// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WeDA.proto

#ifndef PROTOBUF_WeDA_2eproto__INCLUDED
#define PROTOBUF_WeDA_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace FromCs {
class AccountInfo;
class AccountInfoDefaultTypeInternal;
extern AccountInfoDefaultTypeInternal _AccountInfo_default_instance_;
class AppMsgObject;
class AppMsgObjectDefaultTypeInternal;
extern AppMsgObjectDefaultTypeInternal _AppMsgObject_default_instance_;
class AuthData;
class AuthDataDefaultTypeInternal;
extern AuthDataDefaultTypeInternal _AuthData_default_instance_;
class AuthRequest;
class AuthRequestDefaultTypeInternal;
extern AuthRequestDefaultTypeInternal _AuthRequest_default_instance_;
class AuthResponse;
class AuthResponseDefaultTypeInternal;
extern AuthResponseDefaultTypeInternal _AuthResponse_default_instance_;
class AutoAuthRequest;
class AutoAuthRequestDefaultTypeInternal;
extern AutoAuthRequestDefaultTypeInternal _AutoAuthRequest_default_instance_;
class AutoAuthRsaReqData;
class AutoAuthRsaReqDataDefaultTypeInternal;
extern AutoAuthRsaReqDataDefaultTypeInternal _AutoAuthRsaReqData_default_instance_;
class BaseRequest;
class BaseRequestDefaultTypeInternal;
extern BaseRequestDefaultTypeInternal _BaseRequest_default_instance_;
class BaseResponse;
class BaseResponseDefaultTypeInternal;
extern BaseResponseDefaultTypeInternal _BaseResponse_default_instance_;
class BindEmailRequest;
class BindEmailRequestDefaultTypeInternal;
extern BindEmailRequestDefaultTypeInternal _BindEmailRequest_default_instance_;
class BindEmailResponse;
class BindEmailResponseDefaultTypeInternal;
extern BindEmailResponseDefaultTypeInternal _BindEmailResponse_default_instance_;
class BindOpMobileRequest;
class BindOpMobileRequestDefaultTypeInternal;
extern BindOpMobileRequestDefaultTypeInternal _BindOpMobileRequest_default_instance_;
class BindOpMobileResponse;
class BindOpMobileResponseDefaultTypeInternal;
extern BindOpMobileResponseDefaultTypeInternal _BindOpMobileResponse_default_instance_;
class BindQQRequest;
class BindQQRequestDefaultTypeInternal;
extern BindQQRequestDefaultTypeInternal _BindQQRequest_default_instance_;
class BindQQResponse;
class BindQQResponseDefaultTypeInternal;
extern BindQQResponseDefaultTypeInternal _BindQQResponse_default_instance_;
class BindopMobileForRegRequest;
class BindopMobileForRegRequestDefaultTypeInternal;
extern BindopMobileForRegRequestDefaultTypeInternal _BindopMobileForRegRequest_default_instance_;
class BindopMobileForRegResponse;
class BindopMobileForRegResponseDefaultTypeInternal;
extern BindopMobileForRegResponseDefaultTypeInternal _BindopMobileForRegResponse_default_instance_;
class BufferUrlObj;
class BufferUrlObjDefaultTypeInternal;
extern BufferUrlObjDefaultTypeInternal _BufferUrlObj_default_instance_;
class CardInfo;
class CardInfoDefaultTypeInternal;
extern CardInfoDefaultTypeInternal _CardInfo_default_instance_;
class ChatRoomItem;
class ChatRoomItemDefaultTypeInternal;
extern ChatRoomItemDefaultTypeInternal _ChatRoomItem_default_instance_;
class ChatRoomMemberData;
class ChatRoomMemberDataDefaultTypeInternal;
extern ChatRoomMemberDataDefaultTypeInternal _ChatRoomMemberData_default_instance_;
class ChatroomMemberInfo;
class ChatroomMemberInfoDefaultTypeInternal;
extern ChatroomMemberInfoDefaultTypeInternal _ChatroomMemberInfo_default_instance_;
class CheckLoginQRCodeRequest;
class CheckLoginQRCodeRequestDefaultTypeInternal;
extern CheckLoginQRCodeRequestDefaultTypeInternal _CheckLoginQRCodeRequest_default_instance_;
class CheckLoginQRCodeResponse;
class CheckLoginQRCodeResponseDefaultTypeInternal;
extern CheckLoginQRCodeResponseDefaultTypeInternal _CheckLoginQRCodeResponse_default_instance_;
class CheckUnbindRequest;
class CheckUnbindRequestDefaultTypeInternal;
extern CheckUnbindRequestDefaultTypeInternal _CheckUnbindRequest_default_instance_;
class CheckUnbindResponse;
class CheckUnbindResponseDefaultTypeInternal;
extern CheckUnbindResponseDefaultTypeInternal _CheckUnbindResponse_default_instance_;
class ClickCommandRequest;
class ClickCommandRequestDefaultTypeInternal;
extern ClickCommandRequestDefaultTypeInternal _ClickCommandRequest_default_instance_;
class ClickCommandResponse;
class ClickCommandResponseDefaultTypeInternal;
extern ClickCommandResponseDefaultTypeInternal _ClickCommandResponse_default_instance_;
class CmdItem;
class CmdItemDefaultTypeInternal;
extern CmdItemDefaultTypeInternal _CmdItem_default_instance_;
class CmdList;
class CmdListDefaultTypeInternal;
extern CmdListDefaultTypeInternal _CmdList_default_instance_;
class ContactObject;
class ContactObjectDefaultTypeInternal;
extern ContactObjectDefaultTypeInternal _ContactObject_default_instance_;
class ContactProfile;
class ContactProfileDefaultTypeInternal;
extern ContactProfileDefaultTypeInternal _ContactProfile_default_instance_;
class CustomInfo;
class CustomInfoDefaultTypeInternal;
extern CustomInfoDefaultTypeInternal _CustomInfo_default_instance_;
class CustomizedInfoObj;
class CustomizedInfoObjDefaultTypeInternal;
extern CustomizedInfoObjDefaultTypeInternal _CustomizedInfoObj_default_instance_;
class DataItem;
class DataItemDefaultTypeInternal;
extern DataItemDefaultTypeInternal _DataItem_default_instance_;
class DataItem2;
class DataItem2DefaultTypeInternal;
extern DataItem2DefaultTypeInternal _DataItem2_default_instance_;
class DeepLinkBitSet;
class DeepLinkBitSetDefaultTypeInternal;
extern DeepLinkBitSetDefaultTypeInternal _DeepLinkBitSet_default_instance_;
class DisturbSetting;
class DisturbSettingDefaultTypeInternal;
extern DisturbSettingDefaultTypeInternal _DisturbSetting_default_instance_;
class DnsInfoType;
class DnsInfoTypeDefaultTypeInternal;
extern DnsInfoTypeDefaultTypeInternal _DnsInfoType_default_instance_;
class ECDHKey;
class ECDHKeyDefaultTypeInternal;
extern ECDHKeyDefaultTypeInternal _ECDHKey_default_instance_;
class ExitChatroomObject;
class ExitChatroomObjectDefaultTypeInternal;
extern ExitChatroomObjectDefaultTypeInternal _ExitChatroomObject_default_instance_;
class ExtData;
class ExtDataDefaultTypeInternal;
extern ExtDataDefaultTypeInternal _ExtData_default_instance_;
class ExtDeviceLoginConfirmErrorRet;
class ExtDeviceLoginConfirmErrorRetDefaultTypeInternal;
extern ExtDeviceLoginConfirmErrorRetDefaultTypeInternal _ExtDeviceLoginConfirmErrorRet_default_instance_;
class ExtDeviceLoginConfirmExpiredRet;
class ExtDeviceLoginConfirmExpiredRetDefaultTypeInternal;
extern ExtDeviceLoginConfirmExpiredRetDefaultTypeInternal _ExtDeviceLoginConfirmExpiredRet_default_instance_;
class ExtDeviceLoginConfirmOKRet;
class ExtDeviceLoginConfirmOKRetDefaultTypeInternal;
extern ExtDeviceLoginConfirmOKRetDefaultTypeInternal _ExtDeviceLoginConfirmOKRet_default_instance_;
class FBInfo;
class FBInfoDefaultTypeInternal;
extern FBInfoDefaultTypeInternal _FBInfo_default_instance_;
class FriendObj;
class FriendObjDefaultTypeInternal;
extern FriendObjDefaultTypeInternal _FriendObj_default_instance_;
class GHMenu;
class GHMenuDefaultTypeInternal;
extern GHMenuDefaultTypeInternal _GHMenu_default_instance_;
class GMailList;
class GMailListDefaultTypeInternal;
extern GMailListDefaultTypeInternal _GMailList_default_instance_;
class GMailObj;
class GMailObjDefaultTypeInternal;
extern GMailObjDefaultTypeInternal _GMailObj_default_instance_;
class GeneralControlBitSet;
class GeneralControlBitSetDefaultTypeInternal;
extern GeneralControlBitSetDefaultTypeInternal _GeneralControlBitSet_default_instance_;
class GeneralSetRequest;
class GeneralSetRequestDefaultTypeInternal;
extern GeneralSetRequestDefaultTypeInternal _GeneralSetRequest_default_instance_;
class GeneralSetResponse;
class GeneralSetResponseDefaultTypeInternal;
extern GeneralSetResponseDefaultTypeInternal _GeneralSetResponse_default_instance_;
class GetBrandListRequest;
class GetBrandListRequestDefaultTypeInternal;
extern GetBrandListRequestDefaultTypeInternal _GetBrandListRequest_default_instance_;
class GetBrandListResponse;
class GetBrandListResponseDefaultTypeInternal;
extern GetBrandListResponseDefaultTypeInternal _GetBrandListResponse_default_instance_;
class GetChatroomMemberDetailRequest;
class GetChatroomMemberDetailRequestDefaultTypeInternal;
extern GetChatroomMemberDetailRequestDefaultTypeInternal _GetChatroomMemberDetailRequest_default_instance_;
class GetContactRequest;
class GetContactRequestDefaultTypeInternal;
extern GetContactRequestDefaultTypeInternal _GetContactRequest_default_instance_;
class GetContactResponse;
class GetContactResponseDefaultTypeInternal;
extern GetContactResponseDefaultTypeInternal _GetContactResponse_default_instance_;
class GetHDHeadImgRequest;
class GetHDHeadImgRequestDefaultTypeInternal;
extern GetHDHeadImgRequestDefaultTypeInternal _GetHDHeadImgRequest_default_instance_;
class GetHDHeadImgResponse;
class GetHDHeadImgResponseDefaultTypeInternal;
extern GetHDHeadImgResponseDefaultTypeInternal _GetHDHeadImgResponse_default_instance_;
class GetLoginQRCodeRequest;
class GetLoginQRCodeRequestDefaultTypeInternal;
extern GetLoginQRCodeRequestDefaultTypeInternal _GetLoginQRCodeRequest_default_instance_;
class GetLoginQRCodeResponse;
class GetLoginQRCodeResponseDefaultTypeInternal;
extern GetLoginQRCodeResponseDefaultTypeInternal _GetLoginQRCodeResponse_default_instance_;
class GetMFriendRequest;
class GetMFriendRequestDefaultTypeInternal;
extern GetMFriendRequestDefaultTypeInternal _GetMFriendRequest_default_instance_;
class GetMFriendResponse;
class GetMFriendResponseDefaultTypeInternal;
extern GetMFriendResponseDefaultTypeInternal _GetMFriendResponse_default_instance_;
class GetPackageListRequest;
class GetPackageListRequestDefaultTypeInternal;
extern GetPackageListRequestDefaultTypeInternal _GetPackageListRequest_default_instance_;
class GetPackageListResponse;
class GetPackageListResponseDefaultTypeInternal;
extern GetPackageListResponseDefaultTypeInternal _GetPackageListResponse_default_instance_;
class GetVUserInfoRequest;
class GetVUserInfoRequestDefaultTypeInternal;
extern GetVUserInfoRequestDefaultTypeInternal _GetVUserInfoRequest_default_instance_;
class GetVUserInfoResponse;
class GetVUserInfoResponseDefaultTypeInternal;
extern GetVUserInfoResponseDefaultTypeInternal _GetVUserInfoResponse_default_instance_;
class Geta8keyRequest;
class Geta8keyRequestDefaultTypeInternal;
extern Geta8keyRequestDefaultTypeInternal _Geta8keyRequest_default_instance_;
class Geta8keyResponse;
class Geta8keyResponseDefaultTypeInternal;
extern Geta8keyResponseDefaultTypeInternal _Geta8keyResponse_default_instance_;
class GroupObject;
class GroupObjectDefaultTypeInternal;
extern GroupObjectDefaultTypeInternal _GroupObject_default_instance_;
class HTTPHeader;
class HTTPHeaderDefaultTypeInternal;
extern HTTPHeaderDefaultTypeInternal _HTTPHeader_default_instance_;
class HeadImg;
class HeadImgDefaultTypeInternal;
extern HeadImgDefaultTypeInternal _HeadImg_default_instance_;
class JSAPIPermission;
class JSAPIPermissionDefaultTypeInternal;
extern JSAPIPermissionDefaultTypeInternal _JSAPIPermission_default_instance_;
class LBSFindRequest;
class LBSFindRequestDefaultTypeInternal;
extern LBSFindRequestDefaultTypeInternal _LBSFindRequest_default_instance_;
class LBSFindResponse;
class LBSFindResponseDefaultTypeInternal;
extern LBSFindResponseDefaultTypeInternal _LBSFindResponse_default_instance_;
class LoginQRCodeNotifyPkg;
class LoginQRCodeNotifyPkgDefaultTypeInternal;
extern LoginQRCodeNotifyPkgDefaultTypeInternal _LoginQRCodeNotifyPkg_default_instance_;
class LogoutRequest;
class LogoutRequestDefaultTypeInternal;
extern LogoutRequestDefaultTypeInternal _LogoutRequest_default_instance_;
class LogoutResponse;
class LogoutResponseDefaultTypeInternal;
extern LogoutResponseDefaultTypeInternal _LogoutResponse_default_instance_;
class MMSnsPostRequest;
class MMSnsPostRequestDefaultTypeInternal;
extern MMSnsPostRequestDefaultTypeInternal _MMSnsPostRequest_default_instance_;
class MMSnsPostResponse;
class MMSnsPostResponseDefaultTypeInternal;
extern MMSnsPostResponseDefaultTypeInternal _MMSnsPostResponse_default_instance_;
class MMSnsSyncRequest;
class MMSnsSyncRequestDefaultTypeInternal;
extern MMSnsSyncRequestDefaultTypeInternal _MMSnsSyncRequest_default_instance_;
class MMSnsSyncResponse;
class MMSnsSyncResponseDefaultTypeInternal;
extern MMSnsSyncResponseDefaultTypeInternal _MMSnsSyncResponse_default_instance_;
class ManualAuthRequest;
class ManualAuthRequestDefaultTypeInternal;
extern ManualAuthRequestDefaultTypeInternal _ManualAuthRequest_default_instance_;
class MemberInfo;
class MemberInfoDefaultTypeInternal;
extern MemberInfoDefaultTypeInternal _MemberInfo_default_instance_;
class MmsnsuploadRequest;
class MmsnsuploadRequestDefaultTypeInternal;
extern MmsnsuploadRequestDefaultTypeInternal _MmsnsuploadRequest_default_instance_;
class MmsnsuploadResponse;
class MmsnsuploadResponseDefaultTypeInternal;
extern MmsnsuploadResponseDefaultTypeInternal _MmsnsuploadResponse_default_instance_;
class Msg;
class MsgDefaultTypeInternal;
extern MsgDefaultTypeInternal _Msg_default_instance_;
class MsgRequestBody;
class MsgRequestBodyDefaultTypeInternal;
extern MsgRequestBodyDefaultTypeInternal _MsgRequestBody_default_instance_;
class MsgResponseBody;
class MsgResponseBodyDefaultTypeInternal;
extern MsgResponseBodyDefaultTypeInternal _MsgResponseBody_default_instance_;
class MsgTip;
class MsgTipDefaultTypeInternal;
extern MsgTipDefaultTypeInternal _MsgTip_default_instance_;
class MsgTip2;
class MsgTip2DefaultTypeInternal;
extern MsgTip2DefaultTypeInternal _MsgTip2_default_instance_;
class NetworkControlType;
class NetworkControlTypeDefaultTypeInternal;
extern NetworkControlTypeDefaultTypeInternal _NetworkControlType_default_instance_;
class NewAuthResponse;
class NewAuthResponseDefaultTypeInternal;
extern NewAuthResponseDefaultTypeInternal _NewAuthResponse_default_instance_;
class NewHost;
class NewHostDefaultTypeInternal;
extern NewHostDefaultTypeInternal _NewHost_default_instance_;
class NewHostListType;
class NewHostListTypeDefaultTypeInternal;
extern NewHostListTypeDefaultTypeInternal _NewHostListType_default_instance_;
class NewInitRequest;
class NewInitRequestDefaultTypeInternal;
extern NewInitRequestDefaultTypeInternal _NewInitRequest_default_instance_;
class NewInitResponse;
class NewInitResponseDefaultTypeInternal;
extern NewInitResponseDefaultTypeInternal _NewInitResponse_default_instance_;
class NewMsgRequestBody;
class NewMsgRequestBodyDefaultTypeInternal;
extern NewMsgRequestBodyDefaultTypeInternal _NewMsgRequestBody_default_instance_;
class NewMsgResponseBody;
class NewMsgResponseBodyDefaultTypeInternal;
extern NewMsgResponseBodyDefaultTypeInternal _NewMsgResponseBody_default_instance_;
class NewRegRequest;
class NewRegRequestDefaultTypeInternal;
extern NewRegRequestDefaultTypeInternal _NewRegRequest_default_instance_;
class NewRegResponse;
class NewRegResponseDefaultTypeInternal;
extern NewRegResponseDefaultTypeInternal _NewRegResponse_default_instance_;
class NewSetPasswdRequest;
class NewSetPasswdRequestDefaultTypeInternal;
extern NewSetPasswdRequestDefaultTypeInternal _NewSetPasswdRequest_default_instance_;
class NewSetPasswdResponse;
class NewSetPasswdResponseDefaultTypeInternal;
extern NewSetPasswdResponseDefaultTypeInternal _NewSetPasswdResponse_default_instance_;
class NewSyncRequest;
class NewSyncRequestDefaultTypeInternal;
extern NewSyncRequestDefaultTypeInternal _NewSyncRequest_default_instance_;
class NewSyncResponse;
class NewSyncResponseDefaultTypeInternal;
extern NewSyncResponseDefaultTypeInternal _NewSyncResponse_default_instance_;
class NewVerifyPasswdRequest;
class NewVerifyPasswdRequestDefaultTypeInternal;
extern NewVerifyPasswdRequestDefaultTypeInternal _NewVerifyPasswdRequest_default_instance_;
class NewVerifyPasswdResponse;
class NewVerifyPasswdResponseDefaultTypeInternal;
extern NewVerifyPasswdResponseDefaultTypeInternal _NewVerifyPasswdResponse_default_instance_;
class NotifyMsg;
class NotifyMsgDefaultTypeInternal;
extern NotifyMsgDefaultTypeInternal _NotifyMsg_default_instance_;
class PackegeInfo;
class PackegeInfoDefaultTypeInternal;
extern PackegeInfoDefaultTypeInternal _PackegeInfo_default_instance_;
class PageObject;
class PageObjectDefaultTypeInternal;
extern PageObjectDefaultTypeInternal _PageObject_default_instance_;
class ParsePacket;
class ParsePacketDefaultTypeInternal;
extern ParsePacketDefaultTypeInternal _ParsePacket_default_instance_;
class PluginKey;
class PluginKeyDefaultTypeInternal;
extern PluginKeyDefaultTypeInternal _PluginKey_default_instance_;
class PluginKeyListType;
class PluginKeyListTypeDefaultTypeInternal;
extern PluginKeyListTypeDefaultTypeInternal _PluginKeyListType_default_instance_;
class SafeDevice;
class SafeDeviceDefaultTypeInternal;
extern SafeDeviceDefaultTypeInternal _SafeDevice_default_instance_;
class SafeDeviceObj;
class SafeDeviceObjDefaultTypeInternal;
extern SafeDeviceObjDefaultTypeInternal _SafeDeviceObj_default_instance_;
class SecAuthRegKeySect;
class SecAuthRegKeySectDefaultTypeInternal;
extern SecAuthRegKeySectDefaultTypeInternal _SecAuthRegKeySect_default_instance_;
class SendAppMsgRequest;
class SendAppMsgRequestDefaultTypeInternal;
extern SendAppMsgRequestDefaultTypeInternal _SendAppMsgRequest_default_instance_;
class SendAppMsgResponse;
class SendAppMsgResponseDefaultTypeInternal;
extern SendAppMsgResponseDefaultTypeInternal _SendAppMsgResponse_default_instance_;
class SendMsgRequest;
class SendMsgRequestDefaultTypeInternal;
extern SendMsgRequestDefaultTypeInternal _SendMsgRequest_default_instance_;
class SendMsgResponse;
class SendMsgResponseDefaultTypeInternal;
extern SendMsgResponseDefaultTypeInternal _SendMsgResponse_default_instance_;
class ServerInfo;
class ServerInfoDefaultTypeInternal;
extern ServerInfoDefaultTypeInternal _ServerInfo_default_instance_;
class ShakeGetObj;
class ShakeGetObjDefaultTypeInternal;
extern ShakeGetObjDefaultTypeInternal _ShakeGetObj_default_instance_;
class ShakegetRequest;
class ShakegetRequestDefaultTypeInternal;
extern ShakegetRequestDefaultTypeInternal _ShakegetRequest_default_instance_;
class ShakegetResponse;
class ShakegetResponseDefaultTypeInternal;
extern ShakegetResponseDefaultTypeInternal _ShakegetResponse_default_instance_;
class ShakereportRequest;
class ShakereportRequestDefaultTypeInternal;
extern ShakereportRequestDefaultTypeInternal _ShakereportRequest_default_instance_;
class ShakereportResponse;
class ShakereportResponseDefaultTypeInternal;
extern ShakereportResponseDefaultTypeInternal _ShakereportResponse_default_instance_;
class ShowStyleKey;
class ShowStyleKeyDefaultTypeInternal;
extern ShowStyleKeyDefaultTypeInternal _ShowStyleKey_default_instance_;
class SnsUser;
class SnsUserDefaultTypeInternal;
extern SnsUserDefaultTypeInternal _SnsUser_default_instance_;
class StyleKeyItem;
class StyleKeyItemDefaultTypeInternal;
extern StyleKeyItemDefaultTypeInternal _StyleKeyItem_default_instance_;
class SyncKey;
class SyncKeyDefaultTypeInternal;
extern SyncKeyDefaultTypeInternal _SyncKey_default_instance_;
class ThrowBottleRequest;
class ThrowBottleRequestDefaultTypeInternal;
extern ThrowBottleRequestDefaultTypeInternal _ThrowBottleRequest_default_instance_;
class ThrowBottleResponse;
class ThrowBottleResponseDefaultTypeInternal;
extern ThrowBottleResponseDefaultTypeInternal _ThrowBottleResponse_default_instance_;
class TimeSpan;
class TimeSpanDefaultTypeInternal;
extern TimeSpanDefaultTypeInternal _TimeSpan_default_instance_;
class TwitterInfoObj;
class TwitterInfoObjDefaultTypeInternal;
extern TwitterInfoObjDefaultTypeInternal _TwitterInfoObj_default_instance_;
class UnbindqqRequest;
class UnbindqqRequestDefaultTypeInternal;
extern UnbindqqRequestDefaultTypeInternal _UnbindqqRequest_default_instance_;
class UnbindqqResponse;
class UnbindqqResponseDefaultTypeInternal;
extern UnbindqqResponseDefaultTypeInternal _UnbindqqResponse_default_instance_;
class UploadMContact;
class UploadMContactDefaultTypeInternal;
extern UploadMContactDefaultTypeInternal _UploadMContact_default_instance_;
class UploadMContactResponse;
class UploadMContactResponseDefaultTypeInternal;
extern UploadMContactResponseDefaultTypeInternal _UploadMContactResponse_default_instance_;
class UploadMsgImgRequest;
class UploadMsgImgRequestDefaultTypeInternal;
extern UploadMsgImgRequestDefaultTypeInternal _UploadMsgImgRequest_default_instance_;
class UploadMsgImgResponse;
class UploadMsgImgResponseDefaultTypeInternal;
extern UploadMsgImgResponseDefaultTypeInternal _UploadMsgImgResponse_default_instance_;
class UploadhdheadimgRequest;
class UploadhdheadimgRequestDefaultTypeInternal;
extern UploadhdheadimgRequestDefaultTypeInternal _UploadhdheadimgRequest_default_instance_;
class UploadhdheadimgResponse;
class UploadhdheadimgResponseDefaultTypeInternal;
extern UploadhdheadimgResponseDefaultTypeInternal _UploadhdheadimgResponse_default_instance_;
class VUserInfo;
class VUserInfoDefaultTypeInternal;
extern VUserInfoDefaultTypeInternal _VUserInfo_default_instance_;
class VerifyUserObj;
class VerifyUserObjDefaultTypeInternal;
extern VerifyUserObjDefaultTypeInternal _VerifyUserObj_default_instance_;
class VerifyUserRequest;
class VerifyUserRequestDefaultTypeInternal;
extern VerifyUserRequestDefaultTypeInternal _VerifyUserRequest_default_instance_;
class VerifyUserResponse;
class VerifyUserResponseDefaultTypeInternal;
extern VerifyUserResponseDefaultTypeInternal _VerifyUserResponse_default_instance_;
class iPEnd;
class iPEndDefaultTypeInternal;
extern iPEndDefaultTypeInternal _iPEnd_default_instance_;
class iPList;
class iPListDefaultTypeInternal;
extern iPListDefaultTypeInternal _iPList_default_instance_;
class imgPic;
class imgPicDefaultTypeInternal;
extern imgPicDefaultTypeInternal _imgPic_default_instance_;
class initKey;
class initKeyDefaultTypeInternal;
extern initKeyDefaultTypeInternal _initKey_default_instance_;
class kSidData;
class kSidDataDefaultTypeInternal;
extern kSidDataDefaultTypeInternal _kSidData_default_instance_;
class keyValPair;
class keyValPairDefaultTypeInternal;
extern keyValPairDefaultTypeInternal _keyValPair_default_instance_;
class keyValuePairstring;
class keyValuePairstringDefaultTypeInternal;
extern keyValuePairstringDefaultTypeInternal _keyValuePairstring_default_instance_;
class optionItem;
class optionItemDefaultTypeInternal;
extern optionItemDefaultTypeInternal _optionItem_default_instance_;
class removeFriendObject;
class removeFriendObjectDefaultTypeInternal;
extern removeFriendObjectDefaultTypeInternal _removeFriendObject_default_instance_;
class roomInfo;
class roomInfoDefaultTypeInternal;
extern roomInfoDefaultTypeInternal _roomInfo_default_instance_;
class sKBuiltinBufferT;
class sKBuiltinBufferTDefaultTypeInternal;
extern sKBuiltinBufferTDefaultTypeInternal _sKBuiltinBufferT_default_instance_;
class sKBuiltinstringT;
class sKBuiltinstringTDefaultTypeInternal;
extern sKBuiltinstringTDefaultTypeInternal _sKBuiltinstringT_default_instance_;
class updateSomething;
class updateSomethingDefaultTypeInternal;
extern updateSomethingDefaultTypeInternal _updateSomething_default_instance_;
class userObject;
class userObjectDefaultTypeInternal;
extern userObjectDefaultTypeInternal _userObject_default_instance_;
class userProfile;
class userProfileDefaultTypeInternal;
extern userProfileDefaultTypeInternal _userProfile_default_instance_;
}  // namespace FromCs

namespace FromCs {

namespace protobuf_WeDA_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_WeDA_2eproto

// ===================================================================

class GHMenu : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.GHMenu) */ {
 public:
  GHMenu();
  virtual ~GHMenu();

  GHMenu(const GHMenu& from);

  inline GHMenu& operator=(const GHMenu& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GHMenu& default_instance();

  static inline const GHMenu* internal_default_instance() {
    return reinterpret_cast<const GHMenu*>(
               &_GHMenu_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(GHMenu* other);

  // implements Message ----------------------------------------------

  inline GHMenu* New() const PROTOBUF_FINAL { return New(NULL); }

  GHMenu* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GHMenu& from);
  void MergeFrom(const GHMenu& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GHMenu* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string cmd = 3;
  bool has_cmd() const;
  void clear_cmd();
  static const int kCmdFieldNumber = 3;
  const ::std::string& cmd() const;
  void set_cmd(const ::std::string& value);
  #if LANG_CXX11
  void set_cmd(::std::string&& value);
  #endif
  void set_cmd(const char* value);
  void set_cmd(const char* value, size_t size);
  ::std::string* mutable_cmd();
  ::std::string* release_cmd();
  void set_allocated_cmd(::std::string* cmd);

  // optional string ghid = 4;
  bool has_ghid() const;
  void clear_ghid();
  static const int kGhidFieldNumber = 4;
  const ::std::string& ghid() const;
  void set_ghid(const ::std::string& value);
  #if LANG_CXX11
  void set_ghid(::std::string&& value);
  #endif
  void set_ghid(const char* value);
  void set_ghid(const char* value, size_t size);
  ::std::string* mutable_ghid();
  ::std::string* release_ghid();
  void set_allocated_ghid(::std::string* ghid);

  // required .FromCs.BaseRequest base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseRequest& base() const;
  ::FromCs::BaseRequest* mutable_base();
  ::FromCs::BaseRequest* release_base();
  void set_allocated_base(::FromCs::BaseRequest* base);

  // optional int32 opcod = 2;
  bool has_opcod() const;
  void clear_opcod();
  static const int kOpcodFieldNumber = 2;
  ::google::protobuf::int32 opcod() const;
  void set_opcod(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.GHMenu)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_opcod();
  void clear_has_opcod();
  void set_has_cmd();
  void clear_has_cmd();
  void set_has_ghid();
  void clear_has_ghid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr cmd_;
  ::google::protobuf::internal::ArenaStringPtr ghid_;
  ::FromCs::BaseRequest* base_;
  ::google::protobuf::int32 opcod_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AuthRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.AuthRequest) */ {
 public:
  AuthRequest();
  virtual ~AuthRequest();

  AuthRequest(const AuthRequest& from);

  inline AuthRequest& operator=(const AuthRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuthRequest& default_instance();

  static inline const AuthRequest* internal_default_instance() {
    return reinterpret_cast<const AuthRequest*>(
               &_AuthRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(AuthRequest* other);

  // implements Message ----------------------------------------------

  inline AuthRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  AuthRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AuthRequest& from);
  void MergeFrom(const AuthRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AuthRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Pwd2 = 6;
  bool has_pwd2() const;
  void clear_pwd2();
  static const int kPwd2FieldNumber = 6;
  const ::std::string& pwd2() const;
  void set_pwd2(const ::std::string& value);
  #if LANG_CXX11
  void set_pwd2(::std::string&& value);
  #endif
  void set_pwd2(const char* value);
  void set_pwd2(const char* value, size_t size);
  ::std::string* mutable_pwd2();
  ::std::string* release_pwd2();
  void set_allocated_pwd2(::std::string* pwd2);

  // optional string extPwd = 8;
  bool has_extpwd() const;
  void clear_extpwd();
  static const int kExtPwdFieldNumber = 8;
  const ::std::string& extpwd() const;
  void set_extpwd(const ::std::string& value);
  #if LANG_CXX11
  void set_extpwd(::std::string&& value);
  #endif
  void set_extpwd(const char* value);
  void set_extpwd(const char* value, size_t size);
  ::std::string* mutable_extpwd();
  ::std::string* release_extpwd();
  void set_allocated_extpwd(::std::string* extpwd);

  // optional string extPwd2 = 9;
  bool has_extpwd2() const;
  void clear_extpwd2();
  static const int kExtPwd2FieldNumber = 9;
  const ::std::string& extpwd2() const;
  void set_extpwd2(const ::std::string& value);
  #if LANG_CXX11
  void set_extpwd2(::std::string&& value);
  #endif
  void set_extpwd2(const char* value);
  void set_extpwd2(const char* value, size_t size);
  ::std::string* mutable_extpwd2();
  ::std::string* release_extpwd2();
  void set_allocated_extpwd2(::std::string* extpwd2);

  // optional string TimeZone = 10;
  bool has_timezone() const;
  void clear_timezone();
  static const int kTimeZoneFieldNumber = 10;
  const ::std::string& timezone() const;
  void set_timezone(const ::std::string& value);
  #if LANG_CXX11
  void set_timezone(::std::string&& value);
  #endif
  void set_timezone(const char* value);
  void set_timezone(const char* value, size_t size);
  ::std::string* mutable_timezone();
  ::std::string* release_timezone();
  void set_allocated_timezone(::std::string* timezone);

  // optional string Language = 11;
  bool has_language() const;
  void clear_language();
  static const int kLanguageFieldNumber = 11;
  const ::std::string& language() const;
  void set_language(const ::std::string& value);
  #if LANG_CXX11
  void set_language(::std::string&& value);
  #endif
  void set_language(const char* value);
  void set_language(const char* value, size_t size);
  ::std::string* mutable_language();
  ::std::string* release_language();
  void set_allocated_language(::std::string* language);

  // optional string IMEI = 12;
  bool has_imei() const;
  void clear_imei();
  static const int kIMEIFieldNumber = 12;
  const ::std::string& imei() const;
  void set_imei(const ::std::string& value);
  #if LANG_CXX11
  void set_imei(::std::string&& value);
  #endif
  void set_imei(const char* value);
  void set_imei(const char* value, size_t size);
  ::std::string* mutable_imei();
  ::std::string* release_imei();
  void set_allocated_imei(::std::string* imei);

  // optional string IPhoneVer = 14;
  bool has_iphonever() const;
  void clear_iphonever();
  static const int kIPhoneVerFieldNumber = 14;
  const ::std::string& iphonever() const;
  void set_iphonever(const ::std::string& value);
  #if LANG_CXX11
  void set_iphonever(::std::string&& value);
  #endif
  void set_iphonever(const char* value);
  void set_iphonever(const char* value, size_t size);
  ::std::string* mutable_iphonever();
  ::std::string* release_iphonever();
  void set_allocated_iphonever(::std::string* iphonever);

  // optional string TimeStamp = 17;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimeStampFieldNumber = 17;
  const ::std::string& timestamp() const;
  void set_timestamp(const ::std::string& value);
  #if LANG_CXX11
  void set_timestamp(::std::string&& value);
  #endif
  void set_timestamp(const char* value);
  void set_timestamp(const char* value, size_t size);
  ::std::string* mutable_timestamp();
  ::std::string* release_timestamp();
  void set_allocated_timestamp(::std::string* timestamp);

  // optional string DeviceBrand = 18;
  bool has_devicebrand() const;
  void clear_devicebrand();
  static const int kDeviceBrandFieldNumber = 18;
  const ::std::string& devicebrand() const;
  void set_devicebrand(const ::std::string& value);
  #if LANG_CXX11
  void set_devicebrand(::std::string&& value);
  #endif
  void set_devicebrand(const char* value);
  void set_devicebrand(const char* value, size_t size);
  ::std::string* mutable_devicebrand();
  ::std::string* release_devicebrand();
  void set_allocated_devicebrand(::std::string* devicebrand);

  // optional string DeviceModel = 19;
  bool has_devicemodel() const;
  void clear_devicemodel();
  static const int kDeviceModelFieldNumber = 19;
  const ::std::string& devicemodel() const;
  void set_devicemodel(const ::std::string& value);
  #if LANG_CXX11
  void set_devicemodel(::std::string&& value);
  #endif
  void set_devicemodel(const char* value);
  void set_devicemodel(const char* value, size_t size);
  ::std::string* mutable_devicemodel();
  ::std::string* release_devicemodel();
  void set_allocated_devicemodel(::std::string* devicemodel);

  // optional string OSType = 20;
  bool has_ostype() const;
  void clear_ostype();
  static const int kOSTypeFieldNumber = 20;
  const ::std::string& ostype() const;
  void set_ostype(const ::std::string& value);
  #if LANG_CXX11
  void set_ostype(::std::string&& value);
  #endif
  void set_ostype(const char* value);
  void set_ostype(const char* value, size_t size);
  ::std::string* mutable_ostype();
  ::std::string* release_ostype();
  void set_allocated_ostype(::std::string* ostype);

  // optional string DeviceType = 21;
  bool has_devicetype() const;
  void clear_devicetype();
  static const int kDeviceTypeFieldNumber = 21;
  const ::std::string& devicetype() const;
  void set_devicetype(const ::std::string& value);
  #if LANG_CXX11
  void set_devicetype(::std::string&& value);
  #endif
  void set_devicetype(const char* value);
  void set_devicetype(const char* value, size_t size);
  ::std::string* mutable_devicetype();
  ::std::string* release_devicetype();
  void set_allocated_devicetype(::std::string* devicetype);

  // optional string SoftType = 22;
  bool has_softtype() const;
  void clear_softtype();
  static const int kSoftTypeFieldNumber = 22;
  const ::std::string& softtype() const;
  void set_softtype(const ::std::string& value);
  #if LANG_CXX11
  void set_softtype(::std::string&& value);
  #endif
  void set_softtype(const char* value);
  void set_softtype(const char* value, size_t size);
  ::std::string* mutable_softtype();
  ::std::string* release_softtype();
  void set_allocated_softtype(::std::string* softtype);

  // optional string AuthTicket = 23;
  bool has_authticket() const;
  void clear_authticket();
  static const int kAuthTicketFieldNumber = 23;
  const ::std::string& authticket() const;
  void set_authticket(const ::std::string& value);
  #if LANG_CXX11
  void set_authticket(::std::string&& value);
  #endif
  void set_authticket(const char* value);
  void set_authticket(const char* value, size_t size);
  ::std::string* mutable_authticket();
  ::std::string* release_authticket();
  void set_allocated_authticket(::std::string* authticket);

  // optional string RealCountry = 24;
  bool has_realcountry() const;
  void clear_realcountry();
  static const int kRealCountryFieldNumber = 24;
  const ::std::string& realcountry() const;
  void set_realcountry(const ::std::string& value);
  #if LANG_CXX11
  void set_realcountry(::std::string&& value);
  #endif
  void set_realcountry(const char* value);
  void set_realcountry(const char* value, size_t size);
  ::std::string* mutable_realcountry();
  ::std::string* release_realcountry();
  void set_allocated_realcountry(::std::string* realcountry);

  // optional string Signature = 25;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 25;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_signature(::std::string&& value);
  #endif
  void set_signature(const char* value);
  void set_signature(const char* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // optional string AutoAuthTicket = 27;
  bool has_autoauthticket() const;
  void clear_autoauthticket();
  static const int kAutoAuthTicketFieldNumber = 27;
  const ::std::string& autoauthticket() const;
  void set_autoauthticket(const ::std::string& value);
  #if LANG_CXX11
  void set_autoauthticket(::std::string&& value);
  #endif
  void set_autoauthticket(const char* value);
  void set_autoauthticket(const char* value, size_t size);
  ::std::string* mutable_autoauthticket();
  ::std::string* release_autoauthticket();
  void set_allocated_autoauthticket(::std::string* autoauthticket);

  // required .FromCs.BaseRequest base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseRequest& base() const;
  ::FromCs::BaseRequest* mutable_base();
  ::FromCs::BaseRequest* release_base();
  void set_allocated_base(::FromCs::BaseRequest* base);

  // required .FromCs.sKBuiltinstringT UserName = 2;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 2;
  const ::FromCs::sKBuiltinstringT& username() const;
  ::FromCs::sKBuiltinstringT* mutable_username();
  ::FromCs::sKBuiltinstringT* release_username();
  void set_allocated_username(::FromCs::sKBuiltinstringT* username);

  // required .FromCs.sKBuiltinstringT Pwd = 3;
  bool has_pwd() const;
  void clear_pwd();
  static const int kPwdFieldNumber = 3;
  const ::FromCs::sKBuiltinstringT& pwd() const;
  ::FromCs::sKBuiltinstringT* mutable_pwd();
  ::FromCs::sKBuiltinstringT* release_pwd();
  void set_allocated_pwd(::FromCs::sKBuiltinstringT* pwd);

  // required .FromCs.sKBuiltinstringT ImgSid = 4;
  bool has_imgsid() const;
  void clear_imgsid();
  static const int kImgSidFieldNumber = 4;
  const ::FromCs::sKBuiltinstringT& imgsid() const;
  ::FromCs::sKBuiltinstringT* mutable_imgsid();
  ::FromCs::sKBuiltinstringT* release_imgsid();
  void set_allocated_imgsid(::FromCs::sKBuiltinstringT* imgsid);

  // required .FromCs.sKBuiltinstringT ImgCode = 5;
  bool has_imgcode() const;
  void clear_imgcode();
  static const int kImgCodeFieldNumber = 5;
  const ::FromCs::sKBuiltinstringT& imgcode() const;
  ::FromCs::sKBuiltinstringT* mutable_imgcode();
  ::FromCs::sKBuiltinstringT* release_imgcode();
  void set_allocated_imgcode(::FromCs::sKBuiltinstringT* imgcode);

  // optional .FromCs.sKBuiltinstringT ImgEncryptKey = 15;
  bool has_imgencryptkey() const;
  void clear_imgencryptkey();
  static const int kImgEncryptKeyFieldNumber = 15;
  const ::FromCs::sKBuiltinstringT& imgencryptkey() const;
  ::FromCs::sKBuiltinstringT* mutable_imgencryptkey();
  ::FromCs::sKBuiltinstringT* release_imgencryptkey();
  void set_allocated_imgencryptkey(::FromCs::sKBuiltinstringT* imgencryptkey);

  // optional .FromCs.sKBuiltinBufferT KSid = 16;
  bool has_ksid() const;
  void clear_ksid();
  static const int kKSidFieldNumber = 16;
  const ::FromCs::sKBuiltinBufferT& ksid() const;
  ::FromCs::sKBuiltinBufferT* mutable_ksid();
  ::FromCs::sKBuiltinBufferT* release_ksid();
  void set_allocated_ksid(::FromCs::sKBuiltinBufferT* ksid);

  // required .FromCs.sKBuiltinBufferT RandomEncryKey = 26;
  bool has_randomencrykey() const;
  void clear_randomencrykey();
  static const int kRandomEncryKeyFieldNumber = 26;
  const ::FromCs::sKBuiltinBufferT& randomencrykey() const;
  ::FromCs::sKBuiltinBufferT* mutable_randomencrykey();
  ::FromCs::sKBuiltinBufferT* release_randomencrykey();
  void set_allocated_randomencrykey(::FromCs::sKBuiltinBufferT* randomencrykey);

  // optional int32 BuiltinIPSeq = 7;
  bool has_builtinipseq() const;
  void clear_builtinipseq();
  static const int kBuiltinIPSeqFieldNumber = 7;
  ::google::protobuf::int32 builtinipseq() const;
  void set_builtinipseq(::google::protobuf::int32 value);

  // optional int32 Channel = 13;
  bool has_channel() const;
  void clear_channel();
  static const int kChannelFieldNumber = 13;
  ::google::protobuf::int32 channel() const;
  void set_channel(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.AuthRequest)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_username();
  void clear_has_username();
  void set_has_pwd();
  void clear_has_pwd();
  void set_has_imgsid();
  void clear_has_imgsid();
  void set_has_imgcode();
  void clear_has_imgcode();
  void set_has_pwd2();
  void clear_has_pwd2();
  void set_has_builtinipseq();
  void clear_has_builtinipseq();
  void set_has_extpwd();
  void clear_has_extpwd();
  void set_has_extpwd2();
  void clear_has_extpwd2();
  void set_has_timezone();
  void clear_has_timezone();
  void set_has_language();
  void clear_has_language();
  void set_has_imei();
  void clear_has_imei();
  void set_has_channel();
  void clear_has_channel();
  void set_has_iphonever();
  void clear_has_iphonever();
  void set_has_imgencryptkey();
  void clear_has_imgencryptkey();
  void set_has_ksid();
  void clear_has_ksid();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_devicebrand();
  void clear_has_devicebrand();
  void set_has_devicemodel();
  void clear_has_devicemodel();
  void set_has_ostype();
  void clear_has_ostype();
  void set_has_devicetype();
  void clear_has_devicetype();
  void set_has_softtype();
  void clear_has_softtype();
  void set_has_authticket();
  void clear_has_authticket();
  void set_has_realcountry();
  void clear_has_realcountry();
  void set_has_signature();
  void clear_has_signature();
  void set_has_randomencrykey();
  void clear_has_randomencrykey();
  void set_has_autoauthticket();
  void clear_has_autoauthticket();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr pwd2_;
  ::google::protobuf::internal::ArenaStringPtr extpwd_;
  ::google::protobuf::internal::ArenaStringPtr extpwd2_;
  ::google::protobuf::internal::ArenaStringPtr timezone_;
  ::google::protobuf::internal::ArenaStringPtr language_;
  ::google::protobuf::internal::ArenaStringPtr imei_;
  ::google::protobuf::internal::ArenaStringPtr iphonever_;
  ::google::protobuf::internal::ArenaStringPtr timestamp_;
  ::google::protobuf::internal::ArenaStringPtr devicebrand_;
  ::google::protobuf::internal::ArenaStringPtr devicemodel_;
  ::google::protobuf::internal::ArenaStringPtr ostype_;
  ::google::protobuf::internal::ArenaStringPtr devicetype_;
  ::google::protobuf::internal::ArenaStringPtr softtype_;
  ::google::protobuf::internal::ArenaStringPtr authticket_;
  ::google::protobuf::internal::ArenaStringPtr realcountry_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  ::google::protobuf::internal::ArenaStringPtr autoauthticket_;
  ::FromCs::BaseRequest* base_;
  ::FromCs::sKBuiltinstringT* username_;
  ::FromCs::sKBuiltinstringT* pwd_;
  ::FromCs::sKBuiltinstringT* imgsid_;
  ::FromCs::sKBuiltinstringT* imgcode_;
  ::FromCs::sKBuiltinstringT* imgencryptkey_;
  ::FromCs::sKBuiltinBufferT* ksid_;
  ::FromCs::sKBuiltinBufferT* randomencrykey_;
  ::google::protobuf::int32 builtinipseq_;
  ::google::protobuf::int32 channel_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetChatroomMemberDetailRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.GetChatroomMemberDetailRequest) */ {
 public:
  GetChatroomMemberDetailRequest();
  virtual ~GetChatroomMemberDetailRequest();

  GetChatroomMemberDetailRequest(const GetChatroomMemberDetailRequest& from);

  inline GetChatroomMemberDetailRequest& operator=(const GetChatroomMemberDetailRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetChatroomMemberDetailRequest& default_instance();

  static inline const GetChatroomMemberDetailRequest* internal_default_instance() {
    return reinterpret_cast<const GetChatroomMemberDetailRequest*>(
               &_GetChatroomMemberDetailRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(GetChatroomMemberDetailRequest* other);

  // implements Message ----------------------------------------------

  inline GetChatroomMemberDetailRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetChatroomMemberDetailRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetChatroomMemberDetailRequest& from);
  void MergeFrom(const GetChatroomMemberDetailRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetChatroomMemberDetailRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string chatroom = 2;
  bool has_chatroom() const;
  void clear_chatroom();
  static const int kChatroomFieldNumber = 2;
  const ::std::string& chatroom() const;
  void set_chatroom(const ::std::string& value);
  #if LANG_CXX11
  void set_chatroom(::std::string&& value);
  #endif
  void set_chatroom(const char* value);
  void set_chatroom(const char* value, size_t size);
  ::std::string* mutable_chatroom();
  ::std::string* release_chatroom();
  void set_allocated_chatroom(::std::string* chatroom);

  // optional .FromCs.BaseRequest base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseRequest& base() const;
  ::FromCs::BaseRequest* mutable_base();
  ::FromCs::BaseRequest* release_base();
  void set_allocated_base(::FromCs::BaseRequest* base);

  // optional int32 clientVersion = 3;
  bool has_clientversion() const;
  void clear_clientversion();
  static const int kClientVersionFieldNumber = 3;
  ::google::protobuf::int32 clientversion() const;
  void set_clientversion(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.GetChatroomMemberDetailRequest)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_chatroom();
  void clear_has_chatroom();
  void set_has_clientversion();
  void clear_has_clientversion();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr chatroom_;
  ::FromCs::BaseRequest* base_;
  ::google::protobuf::int32 clientversion_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AuthResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.AuthResponse) */ {
 public:
  AuthResponse();
  virtual ~AuthResponse();

  AuthResponse(const AuthResponse& from);

  inline AuthResponse& operator=(const AuthResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuthResponse& default_instance();

  static inline const AuthResponse* internal_default_instance() {
    return reinterpret_cast<const AuthResponse*>(
               &_AuthResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(AuthResponse* other);

  // implements Message ----------------------------------------------

  inline AuthResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  AuthResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AuthResponse& from);
  void MergeFrom(const AuthResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AuthResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes SessionKey = 9;
  bool has_sessionkey() const;
  void clear_sessionkey();
  static const int kSessionKeyFieldNumber = 9;
  const ::std::string& sessionkey() const;
  void set_sessionkey(const ::std::string& value);
  #if LANG_CXX11
  void set_sessionkey(::std::string&& value);
  #endif
  void set_sessionkey(const char* value);
  void set_sessionkey(const void* value, size_t size);
  ::std::string* mutable_sessionkey();
  ::std::string* release_sessionkey();
  void set_allocated_sessionkey(::std::string* sessionkey);

  // optional string Ticket = 17;
  bool has_ticket() const;
  void clear_ticket();
  static const int kTicketFieldNumber = 17;
  const ::std::string& ticket() const;
  void set_ticket(const ::std::string& value);
  #if LANG_CXX11
  void set_ticket(::std::string&& value);
  #endif
  void set_ticket(const char* value);
  void set_ticket(const char* value, size_t size);
  ::std::string* mutable_ticket();
  ::std::string* release_ticket();
  void set_allocated_ticket(::std::string* ticket);

  // optional string PushMailSettingTicket = 20;
  bool has_pushmailsettingticket() const;
  void clear_pushmailsettingticket();
  static const int kPushMailSettingTicketFieldNumber = 20;
  const ::std::string& pushmailsettingticket() const;
  void set_pushmailsettingticket(const ::std::string& value);
  #if LANG_CXX11
  void set_pushmailsettingticket(::std::string&& value);
  #endif
  void set_pushmailsettingticket(const char* value);
  void set_pushmailsettingticket(const char* value, size_t size);
  ::std::string* mutable_pushmailsettingticket();
  ::std::string* release_pushmailsettingticket();
  void set_allocated_pushmailsettingticket(::std::string* pushmailsettingticket);

  // optional string FSURL = 22;
  bool has_fsurl() const;
  void clear_fsurl();
  static const int kFSURLFieldNumber = 22;
  const ::std::string& fsurl() const;
  void set_fsurl(const ::std::string& value);
  #if LANG_CXX11
  void set_fsurl(::std::string&& value);
  #endif
  void set_fsurl(const char* value);
  void set_fsurl(const char* value, size_t size);
  ::std::string* mutable_fsurl();
  ::std::string* release_fsurl();
  void set_allocated_fsurl(::std::string* fsurl);

  // optional string Alias = 25;
  bool has_alias() const;
  void clear_alias();
  static const int kAliasFieldNumber = 25;
  const ::std::string& alias() const;
  void set_alias(const ::std::string& value);
  #if LANG_CXX11
  void set_alias(::std::string&& value);
  #endif
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  ::std::string* mutable_alias();
  ::std::string* release_alias();
  void set_allocated_alias(::std::string* alias);

  // optional string AuthKey = 27;
  bool has_authkey() const;
  void clear_authkey();
  static const int kAuthKeyFieldNumber = 27;
  const ::std::string& authkey() const;
  void set_authkey(const ::std::string& value);
  #if LANG_CXX11
  void set_authkey(::std::string&& value);
  #endif
  void set_authkey(const char* value);
  void set_authkey(const char* value, size_t size);
  ::std::string* mutable_authkey();
  ::std::string* release_authkey();
  void set_allocated_authkey(::std::string* authkey);

  // optional string Sid = 28;
  bool has_sid() const;
  void clear_sid();
  static const int kSidFieldNumber = 28;
  const ::std::string& sid() const;
  void set_sid(const ::std::string& value);
  #if LANG_CXX11
  void set_sid(::std::string&& value);
  #endif
  void set_sid(const char* value);
  void set_sid(const char* value, size_t size);
  ::std::string* mutable_sid();
  ::std::string* release_sid();
  void set_allocated_sid(::std::string* sid);

  // optional string Password = 34;
  bool has_password() const;
  void clear_password();
  static const int kPasswordFieldNumber = 34;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // optional string KickResponse = 37;
  bool has_kickresponse() const;
  void clear_kickresponse();
  static const int kKickResponseFieldNumber = 37;
  const ::std::string& kickresponse() const;
  void set_kickresponse(const ::std::string& value);
  #if LANG_CXX11
  void set_kickresponse(::std::string&& value);
  #endif
  void set_kickresponse(const char* value);
  void set_kickresponse(const char* value, size_t size);
  ::std::string* mutable_kickresponse();
  ::std::string* release_kickresponse();
  void set_allocated_kickresponse(::std::string* kickresponse);

  // optional string ApplyBetaUrl = 38;
  bool has_applybetaurl() const;
  void clear_applybetaurl();
  static const int kApplyBetaUrlFieldNumber = 38;
  const ::std::string& applybetaurl() const;
  void set_applybetaurl(const ::std::string& value);
  #if LANG_CXX11
  void set_applybetaurl(::std::string&& value);
  #endif
  void set_applybetaurl(const char* value);
  void set_applybetaurl(const char* value, size_t size);
  ::std::string* mutable_applybetaurl();
  ::std::string* release_applybetaurl();
  void set_allocated_applybetaurl(::std::string* applybetaurl);

  // optional string DeviceInfoXml = 39;
  bool has_deviceinfoxml() const;
  void clear_deviceinfoxml();
  static const int kDeviceInfoXmlFieldNumber = 39;
  const ::std::string& deviceinfoxml() const;
  void set_deviceinfoxml(const ::std::string& value);
  #if LANG_CXX11
  void set_deviceinfoxml(::std::string&& value);
  #endif
  void set_deviceinfoxml(const char* value);
  void set_deviceinfoxml(const char* value, size_t size);
  ::std::string* mutable_deviceinfoxml();
  ::std::string* release_deviceinfoxml();
  void set_allocated_deviceinfoxml(::std::string* deviceinfoxml);

  // optional string SoftConfigXml = 40;
  bool has_softconfigxml() const;
  void clear_softconfigxml();
  static const int kSoftConfigXmlFieldNumber = 40;
  const ::std::string& softconfigxml() const;
  void set_softconfigxml(const ::std::string& value);
  #if LANG_CXX11
  void set_softconfigxml(::std::string&& value);
  #endif
  void set_softconfigxml(const char* value);
  void set_softconfigxml(const char* value, size_t size);
  ::std::string* mutable_softconfigxml();
  ::std::string* release_softconfigxml();
  void set_allocated_softconfigxml(::std::string* softconfigxml);

  // optional string AuthTicket = 42;
  bool has_authticket() const;
  void clear_authticket();
  static const int kAuthTicketFieldNumber = 42;
  const ::std::string& authticket() const;
  void set_authticket(const ::std::string& value);
  #if LANG_CXX11
  void set_authticket(::std::string&& value);
  #endif
  void set_authticket(const char* value);
  void set_authticket(const char* value, size_t size);
  ::std::string* mutable_authticket();
  ::std::string* release_authticket();
  void set_allocated_authticket(::std::string* authticket);

  // optional string HintMsg = 46;
  bool has_hintmsg() const;
  void clear_hintmsg();
  static const int kHintMsgFieldNumber = 46;
  const ::std::string& hintmsg() const;
  void set_hintmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_hintmsg(::std::string&& value);
  #endif
  void set_hintmsg(const char* value);
  void set_hintmsg(const char* value, size_t size);
  ::std::string* mutable_hintmsg();
  ::std::string* release_hintmsg();
  void set_allocated_hintmsg(::std::string* hintmsg);

  // optional string AutoAuthTicket = 47;
  bool has_autoauthticket() const;
  void clear_autoauthticket();
  static const int kAutoAuthTicketFieldNumber = 47;
  const ::std::string& autoauthticket() const;
  void set_autoauthticket(const ::std::string& value);
  #if LANG_CXX11
  void set_autoauthticket(::std::string&& value);
  #endif
  void set_autoauthticket(const char* value);
  void set_autoauthticket(const char* value, size_t size);
  ::std::string* mutable_autoauthticket();
  ::std::string* release_autoauthticket();
  void set_allocated_autoauthticket(::std::string* autoauthticket);

  // required .FromCs.BaseResponse base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseResponse& base() const;
  ::FromCs::BaseResponse* mutable_base();
  ::FromCs::BaseResponse* release_base();
  void set_allocated_base(::FromCs::BaseResponse* base);

  // required .FromCs.sKBuiltinstringT UserName = 3;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 3;
  const ::FromCs::sKBuiltinstringT& username() const;
  ::FromCs::sKBuiltinstringT* mutable_username();
  ::FromCs::sKBuiltinstringT* release_username();
  void set_allocated_username(::FromCs::sKBuiltinstringT* username);

  // required .FromCs.sKBuiltinstringT NickName = 4;
  bool has_nickname() const;
  void clear_nickname();
  static const int kNickNameFieldNumber = 4;
  const ::FromCs::sKBuiltinstringT& nickname() const;
  ::FromCs::sKBuiltinstringT* mutable_nickname();
  ::FromCs::sKBuiltinstringT* release_nickname();
  void set_allocated_nickname(::FromCs::sKBuiltinstringT* nickname);

  // required .FromCs.sKBuiltinstringT BindEmail = 6;
  bool has_bindemail() const;
  void clear_bindemail();
  static const int kBindEmailFieldNumber = 6;
  const ::FromCs::sKBuiltinstringT& bindemail() const;
  ::FromCs::sKBuiltinstringT* mutable_bindemail();
  ::FromCs::sKBuiltinstringT* release_bindemail();
  void set_allocated_bindemail(::FromCs::sKBuiltinstringT* bindemail);

  // required .FromCs.sKBuiltinstringT BindMobile = 7;
  bool has_bindmobile() const;
  void clear_bindmobile();
  static const int kBindMobileFieldNumber = 7;
  const ::FromCs::sKBuiltinstringT& bindmobile() const;
  ::FromCs::sKBuiltinstringT* mutable_bindmobile();
  ::FromCs::sKBuiltinstringT* release_bindmobile();
  void set_allocated_bindmobile(::FromCs::sKBuiltinstringT* bindmobile);

  // required .FromCs.sKBuiltinstringT ImgSid = 10;
  bool has_imgsid() const;
  void clear_imgsid();
  static const int kImgSidFieldNumber = 10;
  const ::FromCs::sKBuiltinstringT& imgsid() const;
  ::FromCs::sKBuiltinstringT* mutable_imgsid();
  ::FromCs::sKBuiltinstringT* release_imgsid();
  void set_allocated_imgsid(::FromCs::sKBuiltinstringT* imgsid);

  // required .FromCs.sKBuiltinBufferT ImgBuf = 11;
  bool has_imgbuf() const;
  void clear_imgbuf();
  static const int kImgBufFieldNumber = 11;
  const ::FromCs::sKBuiltinBufferT& imgbuf() const;
  ::FromCs::sKBuiltinBufferT* mutable_imgbuf();
  ::FromCs::sKBuiltinBufferT* release_imgbuf();
  void set_allocated_imgbuf(::FromCs::sKBuiltinBufferT* imgbuf);

  // required .FromCs.sKBuiltinstringT OfficialUserName = 12;
  bool has_officialusername() const;
  void clear_officialusername();
  static const int kOfficialUserNameFieldNumber = 12;
  const ::FromCs::sKBuiltinstringT& officialusername() const;
  ::FromCs::sKBuiltinstringT* mutable_officialusername();
  ::FromCs::sKBuiltinstringT* release_officialusername();
  void set_allocated_officialusername(::FromCs::sKBuiltinstringT* officialusername);

  // required .FromCs.sKBuiltinstringT OfficialNickName = 13;
  bool has_officialnickname() const;
  void clear_officialnickname();
  static const int kOfficialNickNameFieldNumber = 13;
  const ::FromCs::sKBuiltinstringT& officialnickname() const;
  ::FromCs::sKBuiltinstringT* mutable_officialnickname();
  ::FromCs::sKBuiltinstringT* release_officialnickname();
  void set_allocated_officialnickname(::FromCs::sKBuiltinstringT* officialnickname);

  // optional .FromCs.sKBuiltinstringT QQMicroBlogUserName = 14;
  bool has_qqmicroblogusername() const;
  void clear_qqmicroblogusername();
  static const int kQQMicroBlogUserNameFieldNumber = 14;
  const ::FromCs::sKBuiltinstringT& qqmicroblogusername() const;
  ::FromCs::sKBuiltinstringT* mutable_qqmicroblogusername();
  ::FromCs::sKBuiltinstringT* release_qqmicroblogusername();
  void set_allocated_qqmicroblogusername(::FromCs::sKBuiltinstringT* qqmicroblogusername);

  // optional .FromCs.iPList BuiltinIPList = 21;
  bool has_builtiniplist() const;
  void clear_builtiniplist();
  static const int kBuiltinIPListFieldNumber = 21;
  const ::FromCs::iPList& builtiniplist() const;
  ::FromCs::iPList* mutable_builtiniplist();
  ::FromCs::iPList* release_builtiniplist();
  void set_allocated_builtiniplist(::FromCs::iPList* builtiniplist);

  // optional .FromCs.NetworkControlType NetworkControl = 23;
  bool has_networkcontrol() const;
  void clear_networkcontrol();
  static const int kNetworkControlFieldNumber = 23;
  const ::FromCs::NetworkControlType& networkcontrol() const;
  ::FromCs::NetworkControlType* mutable_networkcontrol();
  ::FromCs::NetworkControlType* release_networkcontrol();
  void set_allocated_networkcontrol(::FromCs::NetworkControlType* networkcontrol);

  // optional .FromCs.PluginKeyListType PluginKeyList = 29;
  bool has_pluginkeylist() const;
  void clear_pluginkeylist();
  static const int kPluginKeyListFieldNumber = 29;
  const ::FromCs::PluginKeyListType& pluginkeylist() const;
  ::FromCs::PluginKeyListType* mutable_pluginkeylist();
  ::FromCs::PluginKeyListType* release_pluginkeylist();
  void set_allocated_pluginkeylist(::FromCs::PluginKeyListType* pluginkeylist);

  // optional .FromCs.sKBuiltinstringT ImgEncryptKey = 30;
  bool has_imgencryptkey() const;
  void clear_imgencryptkey();
  static const int kImgEncryptKeyFieldNumber = 30;
  const ::FromCs::sKBuiltinstringT& imgencryptkey() const;
  ::FromCs::sKBuiltinstringT* mutable_imgencryptkey();
  ::FromCs::sKBuiltinstringT* release_imgencryptkey();
  void set_allocated_imgencryptkey(::FromCs::sKBuiltinstringT* imgencryptkey);

  // optional .FromCs.sKBuiltinBufferT A2Key = 31;
  bool has_a2key() const;
  void clear_a2key();
  static const int kA2KeyFieldNumber = 31;
  const ::FromCs::sKBuiltinBufferT& a2key() const;
  ::FromCs::sKBuiltinBufferT* mutable_a2key();
  ::FromCs::sKBuiltinBufferT* release_a2key();
  void set_allocated_a2key(::FromCs::sKBuiltinBufferT* a2key);

  // optional .FromCs.sKBuiltinBufferT KSid = 32;
  bool has_ksid() const;
  void clear_ksid();
  static const int kKSidFieldNumber = 32;
  const ::FromCs::sKBuiltinBufferT& ksid() const;
  ::FromCs::sKBuiltinBufferT* mutable_ksid();
  ::FromCs::sKBuiltinBufferT* release_ksid();
  void set_allocated_ksid(::FromCs::sKBuiltinBufferT* ksid);

  // optional .FromCs.NewHostListType NewHostList = 41;
  bool has_newhostlist() const;
  void clear_newhostlist();
  static const int kNewHostListFieldNumber = 41;
  const ::FromCs::NewHostListType& newhostlist() const;
  ::FromCs::NewHostListType* mutable_newhostlist();
  ::FromCs::NewHostListType* release_newhostlist();
  void set_allocated_newhostlist(::FromCs::NewHostListType* newhostlist);

  // optional .FromCs.DnsInfoType DnsInfo = 48;
  bool has_dnsinfo() const;
  void clear_dnsinfo();
  static const int kDnsInfoFieldNumber = 48;
  const ::FromCs::DnsInfoType& dnsinfo() const;
  ::FromCs::DnsInfoType* mutable_dnsinfo();
  ::FromCs::DnsInfoType* release_dnsinfo();
  void set_allocated_dnsinfo(::FromCs::DnsInfoType* dnsinfo);

  // required int32 Uin = 2;
  bool has_uin() const;
  void clear_uin();
  static const int kUinFieldNumber = 2;
  ::google::protobuf::int32 uin() const;
  void set_uin(::google::protobuf::int32 value);

  // required int32 BindUin = 5;
  bool has_binduin() const;
  void clear_binduin();
  static const int kBindUinFieldNumber = 5;
  ::google::protobuf::int32 binduin() const;
  void set_binduin(::google::protobuf::int32 value);

  // required int32 Status = 8;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 8;
  ::google::protobuf::int32 status() const;
  void set_status(::google::protobuf::int32 value);

  // optional int32 QQMicroBlogStatus = 15;
  bool has_qqmicroblogstatus() const;
  void clear_qqmicroblogstatus();
  static const int kQQMicroBlogStatusFieldNumber = 15;
  ::google::protobuf::int32 qqmicroblogstatus() const;
  void set_qqmicroblogstatus(::google::protobuf::int32 value);

  // optional int32 NewVersion = 16;
  bool has_newversion() const;
  void clear_newversion();
  static const int kNewVersionFieldNumber = 16;
  ::google::protobuf::int32 newversion() const;
  void set_newversion(::google::protobuf::int32 value);

  // optional int32 PushMailStatus = 18;
  bool has_pushmailstatus() const;
  void clear_pushmailstatus();
  static const int kPushMailStatusFieldNumber = 18;
  ::google::protobuf::int32 pushmailstatus() const;
  void set_pushmailstatus(::google::protobuf::int32 value);

  // optional int32 SendCardBitFlag = 19;
  bool has_sendcardbitflag() const;
  void clear_sendcardbitflag();
  static const int kSendCardBitFlagFieldNumber = 19;
  ::google::protobuf::int32 sendcardbitflag() const;
  void set_sendcardbitflag(::google::protobuf::int32 value);

  // optional int32 PluginFlag = 24;
  bool has_pluginflag() const;
  void clear_pluginflag();
  static const int kPluginFlagFieldNumber = 24;
  ::google::protobuf::int32 pluginflag() const;
  void set_pluginflag(::google::protobuf::int32 value);

  // optional int32 RegType = 26;
  bool has_regtype() const;
  void clear_regtype();
  static const int kRegTypeFieldNumber = 26;
  ::google::protobuf::int32 regtype() const;
  void set_regtype(::google::protobuf::int32 value);

  // optional int32 ProfileFlag = 33;
  bool has_profileflag() const;
  void clear_profileflag();
  static const int kProfileFlagFieldNumber = 33;
  ::google::protobuf::int32 profileflag() const;
  void set_profileflag(::google::protobuf::int32 value);

  // optional int32 TimeStamp = 35;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimeStampFieldNumber = 35;
  ::google::protobuf::int32 timestamp() const;
  void set_timestamp(::google::protobuf::int32 value);

  // optional int32 IsAutoReg = 36;
  bool has_isautoreg() const;
  void clear_isautoreg();
  static const int kIsAutoRegFieldNumber = 36;
  ::google::protobuf::int32 isautoreg() const;
  void set_isautoreg(::google::protobuf::int32 value);

  // optional int32 SafeDevice = 43;
  bool has_safedevice() const;
  void clear_safedevice();
  static const int kSafeDeviceFieldNumber = 43;
  ::google::protobuf::int32 safedevice() const;
  void set_safedevice(::google::protobuf::int32 value);

  // optional int32 MainAcctType = 44;
  bool has_mainaccttype() const;
  void clear_mainaccttype();
  static const int kMainAcctTypeFieldNumber = 44;
  ::google::protobuf::int32 mainaccttype() const;
  void set_mainaccttype(::google::protobuf::int32 value);

  // optional int32 NeedSetEmailPwd = 45;
  bool has_needsetemailpwd() const;
  void clear_needsetemailpwd();
  static const int kNeedSetEmailPwdFieldNumber = 45;
  ::google::protobuf::int32 needsetemailpwd() const;
  void set_needsetemailpwd(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.AuthResponse)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_uin();
  void clear_has_uin();
  void set_has_username();
  void clear_has_username();
  void set_has_nickname();
  void clear_has_nickname();
  void set_has_binduin();
  void clear_has_binduin();
  void set_has_bindemail();
  void clear_has_bindemail();
  void set_has_bindmobile();
  void clear_has_bindmobile();
  void set_has_status();
  void clear_has_status();
  void set_has_sessionkey();
  void clear_has_sessionkey();
  void set_has_imgsid();
  void clear_has_imgsid();
  void set_has_imgbuf();
  void clear_has_imgbuf();
  void set_has_officialusername();
  void clear_has_officialusername();
  void set_has_officialnickname();
  void clear_has_officialnickname();
  void set_has_qqmicroblogusername();
  void clear_has_qqmicroblogusername();
  void set_has_qqmicroblogstatus();
  void clear_has_qqmicroblogstatus();
  void set_has_newversion();
  void clear_has_newversion();
  void set_has_ticket();
  void clear_has_ticket();
  void set_has_pushmailstatus();
  void clear_has_pushmailstatus();
  void set_has_sendcardbitflag();
  void clear_has_sendcardbitflag();
  void set_has_pushmailsettingticket();
  void clear_has_pushmailsettingticket();
  void set_has_builtiniplist();
  void clear_has_builtiniplist();
  void set_has_fsurl();
  void clear_has_fsurl();
  void set_has_networkcontrol();
  void clear_has_networkcontrol();
  void set_has_pluginflag();
  void clear_has_pluginflag();
  void set_has_alias();
  void clear_has_alias();
  void set_has_regtype();
  void clear_has_regtype();
  void set_has_authkey();
  void clear_has_authkey();
  void set_has_sid();
  void clear_has_sid();
  void set_has_pluginkeylist();
  void clear_has_pluginkeylist();
  void set_has_imgencryptkey();
  void clear_has_imgencryptkey();
  void set_has_a2key();
  void clear_has_a2key();
  void set_has_ksid();
  void clear_has_ksid();
  void set_has_profileflag();
  void clear_has_profileflag();
  void set_has_password();
  void clear_has_password();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_isautoreg();
  void clear_has_isautoreg();
  void set_has_kickresponse();
  void clear_has_kickresponse();
  void set_has_applybetaurl();
  void clear_has_applybetaurl();
  void set_has_deviceinfoxml();
  void clear_has_deviceinfoxml();
  void set_has_softconfigxml();
  void clear_has_softconfigxml();
  void set_has_newhostlist();
  void clear_has_newhostlist();
  void set_has_authticket();
  void clear_has_authticket();
  void set_has_safedevice();
  void clear_has_safedevice();
  void set_has_mainaccttype();
  void clear_has_mainaccttype();
  void set_has_needsetemailpwd();
  void clear_has_needsetemailpwd();
  void set_has_hintmsg();
  void clear_has_hintmsg();
  void set_has_autoauthticket();
  void clear_has_autoauthticket();
  void set_has_dnsinfo();
  void clear_has_dnsinfo();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<2> _has_bits_;
  ::google::protobuf::internal::ArenaStringPtr sessionkey_;
  ::google::protobuf::internal::ArenaStringPtr ticket_;
  ::google::protobuf::internal::ArenaStringPtr pushmailsettingticket_;
  ::google::protobuf::internal::ArenaStringPtr fsurl_;
  ::google::protobuf::internal::ArenaStringPtr alias_;
  ::google::protobuf::internal::ArenaStringPtr authkey_;
  ::google::protobuf::internal::ArenaStringPtr sid_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr kickresponse_;
  ::google::protobuf::internal::ArenaStringPtr applybetaurl_;
  ::google::protobuf::internal::ArenaStringPtr deviceinfoxml_;
  ::google::protobuf::internal::ArenaStringPtr softconfigxml_;
  ::google::protobuf::internal::ArenaStringPtr authticket_;
  ::google::protobuf::internal::ArenaStringPtr hintmsg_;
  ::google::protobuf::internal::ArenaStringPtr autoauthticket_;
  ::FromCs::BaseResponse* base_;
  ::FromCs::sKBuiltinstringT* username_;
  ::FromCs::sKBuiltinstringT* nickname_;
  ::FromCs::sKBuiltinstringT* bindemail_;
  ::FromCs::sKBuiltinstringT* bindmobile_;
  ::FromCs::sKBuiltinstringT* imgsid_;
  ::FromCs::sKBuiltinBufferT* imgbuf_;
  ::FromCs::sKBuiltinstringT* officialusername_;
  ::FromCs::sKBuiltinstringT* officialnickname_;
  ::FromCs::sKBuiltinstringT* qqmicroblogusername_;
  ::FromCs::iPList* builtiniplist_;
  ::FromCs::NetworkControlType* networkcontrol_;
  ::FromCs::PluginKeyListType* pluginkeylist_;
  ::FromCs::sKBuiltinstringT* imgencryptkey_;
  ::FromCs::sKBuiltinBufferT* a2key_;
  ::FromCs::sKBuiltinBufferT* ksid_;
  ::FromCs::NewHostListType* newhostlist_;
  ::FromCs::DnsInfoType* dnsinfo_;
  ::google::protobuf::int32 uin_;
  ::google::protobuf::int32 binduin_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::int32 qqmicroblogstatus_;
  ::google::protobuf::int32 newversion_;
  ::google::protobuf::int32 pushmailstatus_;
  ::google::protobuf::int32 sendcardbitflag_;
  ::google::protobuf::int32 pluginflag_;
  ::google::protobuf::int32 regtype_;
  ::google::protobuf::int32 profileflag_;
  ::google::protobuf::int32 timestamp_;
  ::google::protobuf::int32 isautoreg_;
  ::google::protobuf::int32 safedevice_;
  ::google::protobuf::int32 mainaccttype_;
  ::google::protobuf::int32 needsetemailpwd_;
  mutable int _cached_size_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SendMsgRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.SendMsgRequest) */ {
 public:
  SendMsgRequest();
  virtual ~SendMsgRequest();

  SendMsgRequest(const SendMsgRequest& from);

  inline SendMsgRequest& operator=(const SendMsgRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SendMsgRequest& default_instance();

  static inline const SendMsgRequest* internal_default_instance() {
    return reinterpret_cast<const SendMsgRequest*>(
               &_SendMsgRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(SendMsgRequest* other);

  // implements Message ----------------------------------------------

  inline SendMsgRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SendMsgRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SendMsgRequest& from);
  void MergeFrom(const SendMsgRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SendMsgRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .FromCs.MsgRequestBody List = 3;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 3;
  const ::FromCs::MsgRequestBody& list(int index) const;
  ::FromCs::MsgRequestBody* mutable_list(int index);
  ::FromCs::MsgRequestBody* add_list();
  ::google::protobuf::RepeatedPtrField< ::FromCs::MsgRequestBody >*
      mutable_list();
  const ::google::protobuf::RepeatedPtrField< ::FromCs::MsgRequestBody >&
      list() const;

  // required .FromCs.BaseRequest base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseRequest& base() const;
  ::FromCs::BaseRequest* mutable_base();
  ::FromCs::BaseRequest* release_base();
  void set_allocated_base(::FromCs::BaseRequest* base);

  // required int32 Count = 2;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.SendMsgRequest)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_count();
  void clear_has_count();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::FromCs::MsgRequestBody > list_;
  ::FromCs::BaseRequest* base_;
  ::google::protobuf::int32 count_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SendMsgResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.SendMsgResponse) */ {
 public:
  SendMsgResponse();
  virtual ~SendMsgResponse();

  SendMsgResponse(const SendMsgResponse& from);

  inline SendMsgResponse& operator=(const SendMsgResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SendMsgResponse& default_instance();

  static inline const SendMsgResponse* internal_default_instance() {
    return reinterpret_cast<const SendMsgResponse*>(
               &_SendMsgResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(SendMsgResponse* other);

  // implements Message ----------------------------------------------

  inline SendMsgResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  SendMsgResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SendMsgResponse& from);
  void MergeFrom(const SendMsgResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SendMsgResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .FromCs.MsgResponseBody List = 3;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 3;
  const ::FromCs::MsgResponseBody& list(int index) const;
  ::FromCs::MsgResponseBody* mutable_list(int index);
  ::FromCs::MsgResponseBody* add_list();
  ::google::protobuf::RepeatedPtrField< ::FromCs::MsgResponseBody >*
      mutable_list();
  const ::google::protobuf::RepeatedPtrField< ::FromCs::MsgResponseBody >&
      list() const;

  // required .FromCs.BaseResponse base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseResponse& base() const;
  ::FromCs::BaseResponse* mutable_base();
  ::FromCs::BaseResponse* release_base();
  void set_allocated_base(::FromCs::BaseResponse* base);

  // required int32 Count = 2;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.SendMsgResponse)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_count();
  void clear_has_count();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::FromCs::MsgResponseBody > list_;
  ::FromCs::BaseResponse* base_;
  ::google::protobuf::int32 count_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NewSyncRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.NewSyncRequest) */ {
 public:
  NewSyncRequest();
  virtual ~NewSyncRequest();

  NewSyncRequest(const NewSyncRequest& from);

  inline NewSyncRequest& operator=(const NewSyncRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NewSyncRequest& default_instance();

  static inline const NewSyncRequest* internal_default_instance() {
    return reinterpret_cast<const NewSyncRequest*>(
               &_NewSyncRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(NewSyncRequest* other);

  // implements Message ----------------------------------------------

  inline NewSyncRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  NewSyncRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NewSyncRequest& from);
  void MergeFrom(const NewSyncRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NewSyncRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string DeviceType = 5;
  bool has_devicetype() const;
  void clear_devicetype();
  static const int kDeviceTypeFieldNumber = 5;
  const ::std::string& devicetype() const;
  void set_devicetype(const ::std::string& value);
  #if LANG_CXX11
  void set_devicetype(::std::string&& value);
  #endif
  void set_devicetype(const char* value);
  void set_devicetype(const char* value, size_t size);
  ::std::string* mutable_devicetype();
  ::std::string* release_devicetype();
  void set_allocated_devicetype(::std::string* devicetype);

  // required .FromCs.CmdList Oplog = 1;
  bool has_oplog() const;
  void clear_oplog();
  static const int kOplogFieldNumber = 1;
  const ::FromCs::CmdList& oplog() const;
  ::FromCs::CmdList* mutable_oplog();
  ::FromCs::CmdList* release_oplog();
  void set_allocated_oplog(::FromCs::CmdList* oplog);

  // required .FromCs.sKBuiltinBufferT KeyBuf = 3;
  bool has_keybuf() const;
  void clear_keybuf();
  static const int kKeyBufFieldNumber = 3;
  const ::FromCs::sKBuiltinBufferT& keybuf() const;
  ::FromCs::sKBuiltinBufferT* mutable_keybuf();
  ::FromCs::sKBuiltinBufferT* release_keybuf();
  void set_allocated_keybuf(::FromCs::sKBuiltinBufferT* keybuf);

  // required int32 Selector = 2;
  bool has_selector() const;
  void clear_selector();
  static const int kSelectorFieldNumber = 2;
  ::google::protobuf::int32 selector() const;
  void set_selector(::google::protobuf::int32 value);

  // optional int32 Scene = 4;
  bool has_scene() const;
  void clear_scene();
  static const int kSceneFieldNumber = 4;
  ::google::protobuf::int32 scene() const;
  void set_scene(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.NewSyncRequest)
 private:
  void set_has_oplog();
  void clear_has_oplog();
  void set_has_selector();
  void clear_has_selector();
  void set_has_keybuf();
  void clear_has_keybuf();
  void set_has_scene();
  void clear_has_scene();
  void set_has_devicetype();
  void clear_has_devicetype();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr devicetype_;
  ::FromCs::CmdList* oplog_;
  ::FromCs::sKBuiltinBufferT* keybuf_;
  ::google::protobuf::int32 selector_;
  ::google::protobuf::int32 scene_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NewSyncResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.NewSyncResponse) */ {
 public:
  NewSyncResponse();
  virtual ~NewSyncResponse();

  NewSyncResponse(const NewSyncResponse& from);

  inline NewSyncResponse& operator=(const NewSyncResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NewSyncResponse& default_instance();

  static inline const NewSyncResponse* internal_default_instance() {
    return reinterpret_cast<const NewSyncResponse*>(
               &_NewSyncResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(NewSyncResponse* other);

  // implements Message ----------------------------------------------

  inline NewSyncResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  NewSyncResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NewSyncResponse& from);
  void MergeFrom(const NewSyncResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NewSyncResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .FromCs.CmdList CmdList = 2;
  bool has_cmdlist() const;
  void clear_cmdlist();
  static const int kCmdListFieldNumber = 2;
  const ::FromCs::CmdList& cmdlist() const;
  ::FromCs::CmdList* mutable_cmdlist();
  ::FromCs::CmdList* release_cmdlist();
  void set_allocated_cmdlist(::FromCs::CmdList* cmdlist);

  // required .FromCs.sKBuiltinBufferT KeyBuf = 4;
  bool has_keybuf() const;
  void clear_keybuf();
  static const int kKeyBufFieldNumber = 4;
  const ::FromCs::sKBuiltinBufferT& keybuf() const;
  ::FromCs::sKBuiltinBufferT* mutable_keybuf();
  ::FromCs::sKBuiltinBufferT* release_keybuf();
  void set_allocated_keybuf(::FromCs::sKBuiltinBufferT* keybuf);

  // required int32 Ret = 1;
  bool has_ret() const;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::google::protobuf::int32 ret() const;
  void set_ret(::google::protobuf::int32 value);

  // required int32 ContinueFlag = 3;
  bool has_continueflag() const;
  void clear_continueflag();
  static const int kContinueFlagFieldNumber = 3;
  ::google::protobuf::int32 continueflag() const;
  void set_continueflag(::google::protobuf::int32 value);

  // optional int32 Status = 5;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 5;
  ::google::protobuf::int32 status() const;
  void set_status(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.NewSyncResponse)
 private:
  void set_has_ret();
  void clear_has_ret();
  void set_has_cmdlist();
  void clear_has_cmdlist();
  void set_has_continueflag();
  void clear_has_continueflag();
  void set_has_keybuf();
  void clear_has_keybuf();
  void set_has_status();
  void clear_has_status();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::FromCs::CmdList* cmdlist_;
  ::FromCs::sKBuiltinBufferT* keybuf_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 continueflag_;
  ::google::protobuf::int32 status_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MMSnsSyncRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.MMSnsSyncRequest) */ {
 public:
  MMSnsSyncRequest();
  virtual ~MMSnsSyncRequest();

  MMSnsSyncRequest(const MMSnsSyncRequest& from);

  inline MMSnsSyncRequest& operator=(const MMSnsSyncRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MMSnsSyncRequest& default_instance();

  static inline const MMSnsSyncRequest* internal_default_instance() {
    return reinterpret_cast<const MMSnsSyncRequest*>(
               &_MMSnsSyncRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(MMSnsSyncRequest* other);

  // implements Message ----------------------------------------------

  inline MMSnsSyncRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  MMSnsSyncRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MMSnsSyncRequest& from);
  void MergeFrom(const MMSnsSyncRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MMSnsSyncRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .FromCs.BaseRequest base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseRequest& base() const;
  ::FromCs::BaseRequest* mutable_base();
  ::FromCs::BaseRequest* release_base();
  void set_allocated_base(::FromCs::BaseRequest* base);

  // required .FromCs.sKBuiltinBufferT KeyBuf = 3;
  bool has_keybuf() const;
  void clear_keybuf();
  static const int kKeyBufFieldNumber = 3;
  const ::FromCs::sKBuiltinBufferT& keybuf() const;
  ::FromCs::sKBuiltinBufferT* mutable_keybuf();
  ::FromCs::sKBuiltinBufferT* release_keybuf();
  void set_allocated_keybuf(::FromCs::sKBuiltinBufferT* keybuf);

  // required int32 Selector = 2;
  bool has_selector() const;
  void clear_selector();
  static const int kSelectorFieldNumber = 2;
  ::google::protobuf::int32 selector() const;
  void set_selector(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.MMSnsSyncRequest)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_selector();
  void clear_has_selector();
  void set_has_keybuf();
  void clear_has_keybuf();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::FromCs::BaseRequest* base_;
  ::FromCs::sKBuiltinBufferT* keybuf_;
  ::google::protobuf::int32 selector_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MMSnsSyncResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.MMSnsSyncResponse) */ {
 public:
  MMSnsSyncResponse();
  virtual ~MMSnsSyncResponse();

  MMSnsSyncResponse(const MMSnsSyncResponse& from);

  inline MMSnsSyncResponse& operator=(const MMSnsSyncResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MMSnsSyncResponse& default_instance();

  static inline const MMSnsSyncResponse* internal_default_instance() {
    return reinterpret_cast<const MMSnsSyncResponse*>(
               &_MMSnsSyncResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(MMSnsSyncResponse* other);

  // implements Message ----------------------------------------------

  inline MMSnsSyncResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  MMSnsSyncResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MMSnsSyncResponse& from);
  void MergeFrom(const MMSnsSyncResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MMSnsSyncResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .FromCs.BaseResponse base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseResponse& base() const;
  ::FromCs::BaseResponse* mutable_base();
  ::FromCs::BaseResponse* release_base();
  void set_allocated_base(::FromCs::BaseResponse* base);

  // required .FromCs.CmdList CmdList = 2;
  bool has_cmdlist() const;
  void clear_cmdlist();
  static const int kCmdListFieldNumber = 2;
  const ::FromCs::CmdList& cmdlist() const;
  ::FromCs::CmdList* mutable_cmdlist();
  ::FromCs::CmdList* release_cmdlist();
  void set_allocated_cmdlist(::FromCs::CmdList* cmdlist);

  // required .FromCs.sKBuiltinBufferT KeyBuf = 4;
  bool has_keybuf() const;
  void clear_keybuf();
  static const int kKeyBufFieldNumber = 4;
  const ::FromCs::sKBuiltinBufferT& keybuf() const;
  ::FromCs::sKBuiltinBufferT* mutable_keybuf();
  ::FromCs::sKBuiltinBufferT* release_keybuf();
  void set_allocated_keybuf(::FromCs::sKBuiltinBufferT* keybuf);

  // required int32 ContinueFlag = 3;
  bool has_continueflag() const;
  void clear_continueflag();
  static const int kContinueFlagFieldNumber = 3;
  ::google::protobuf::int32 continueflag() const;
  void set_continueflag(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.MMSnsSyncResponse)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_cmdlist();
  void clear_has_cmdlist();
  void set_has_continueflag();
  void clear_has_continueflag();
  void set_has_keybuf();
  void clear_has_keybuf();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::FromCs::BaseResponse* base_;
  ::FromCs::CmdList* cmdlist_;
  ::FromCs::sKBuiltinBufferT* keybuf_;
  ::google::protobuf::int32 continueflag_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LBSFindRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.LBSFindRequest) */ {
 public:
  LBSFindRequest();
  virtual ~LBSFindRequest();

  LBSFindRequest(const LBSFindRequest& from);

  inline LBSFindRequest& operator=(const LBSFindRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LBSFindRequest& default_instance();

  static inline const LBSFindRequest* internal_default_instance() {
    return reinterpret_cast<const LBSFindRequest*>(
               &_LBSFindRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(LBSFindRequest* other);

  // implements Message ----------------------------------------------

  inline LBSFindRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  LBSFindRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LBSFindRequest& from);
  void MergeFrom(const LBSFindRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LBSFindRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string MacAddr = 6;
  bool has_macaddr() const;
  void clear_macaddr();
  static const int kMacAddrFieldNumber = 6;
  const ::std::string& macaddr() const;
  void set_macaddr(const ::std::string& value);
  #if LANG_CXX11
  void set_macaddr(::std::string&& value);
  #endif
  void set_macaddr(const char* value);
  void set_macaddr(const char* value, size_t size);
  ::std::string* mutable_macaddr();
  ::std::string* release_macaddr();
  void set_allocated_macaddr(::std::string* macaddr);

  // optional string CellId = 7;
  bool has_cellid() const;
  void clear_cellid();
  static const int kCellIdFieldNumber = 7;
  const ::std::string& cellid() const;
  void set_cellid(const ::std::string& value);
  #if LANG_CXX11
  void set_cellid(::std::string&& value);
  #endif
  void set_cellid(const char* value);
  void set_cellid(const char* value, size_t size);
  ::std::string* mutable_cellid();
  ::std::string* release_cellid();
  void set_allocated_cellid(::std::string* cellid);

  // required .FromCs.BaseRequest base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseRequest& base() const;
  ::FromCs::BaseRequest* mutable_base();
  ::FromCs::BaseRequest* release_base();
  void set_allocated_base(::FromCs::BaseRequest* base);

  // required int32 OpCode = 2;
  bool has_opcode() const;
  void clear_opcode();
  static const int kOpCodeFieldNumber = 2;
  ::google::protobuf::int32 opcode() const;
  void set_opcode(::google::protobuf::int32 value);

  // required float Longitude = 3;
  bool has_longitude() const;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 3;
  float longitude() const;
  void set_longitude(float value);

  // required float Latitude = 4;
  bool has_latitude() const;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 4;
  float latitude() const;
  void set_latitude(float value);

  // required int32 Precision = 5;
  bool has_precision() const;
  void clear_precision();
  static const int kPrecisionFieldNumber = 5;
  ::google::protobuf::int32 precision() const;
  void set_precision(::google::protobuf::int32 value);

  // optional int32 GPSSource = 8;
  bool has_gpssource() const;
  void clear_gpssource();
  static const int kGPSSourceFieldNumber = 8;
  ::google::protobuf::int32 gpssource() const;
  void set_gpssource(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.LBSFindRequest)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_opcode();
  void clear_has_opcode();
  void set_has_longitude();
  void clear_has_longitude();
  void set_has_latitude();
  void clear_has_latitude();
  void set_has_precision();
  void clear_has_precision();
  void set_has_macaddr();
  void clear_has_macaddr();
  void set_has_cellid();
  void clear_has_cellid();
  void set_has_gpssource();
  void clear_has_gpssource();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr macaddr_;
  ::google::protobuf::internal::ArenaStringPtr cellid_;
  ::FromCs::BaseRequest* base_;
  ::google::protobuf::int32 opcode_;
  float longitude_;
  float latitude_;
  ::google::protobuf::int32 precision_;
  ::google::protobuf::int32 gpssource_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LBSFindResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.LBSFindResponse) */ {
 public:
  LBSFindResponse();
  virtual ~LBSFindResponse();

  LBSFindResponse(const LBSFindResponse& from);

  inline LBSFindResponse& operator=(const LBSFindResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LBSFindResponse& default_instance();

  static inline const LBSFindResponse* internal_default_instance() {
    return reinterpret_cast<const LBSFindResponse*>(
               &_LBSFindResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(LBSFindResponse* other);

  // implements Message ----------------------------------------------

  inline LBSFindResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  LBSFindResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LBSFindResponse& from);
  void MergeFrom(const LBSFindResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LBSFindResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .FromCs.ContactObject ContactList = 3;
  int contactlist_size() const;
  void clear_contactlist();
  static const int kContactListFieldNumber = 3;
  const ::FromCs::ContactObject& contactlist(int index) const;
  ::FromCs::ContactObject* mutable_contactlist(int index);
  ::FromCs::ContactObject* add_contactlist();
  ::google::protobuf::RepeatedPtrField< ::FromCs::ContactObject >*
      mutable_contactlist();
  const ::google::protobuf::RepeatedPtrField< ::FromCs::ContactObject >&
      contactlist() const;

  // required .FromCs.BaseResponse base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseResponse& base() const;
  ::FromCs::BaseResponse* mutable_base();
  ::FromCs::BaseResponse* release_base();
  void set_allocated_base(::FromCs::BaseResponse* base);

  // required int32 ContactCount = 2;
  bool has_contactcount() const;
  void clear_contactcount();
  static const int kContactCountFieldNumber = 2;
  ::google::protobuf::int32 contactcount() const;
  void set_contactcount(::google::protobuf::int32 value);

  // optional int32 State = 4;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 4;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // optional int32 FlushTime = 5;
  bool has_flushtime() const;
  void clear_flushtime();
  static const int kFlushTimeFieldNumber = 5;
  ::google::protobuf::int32 flushtime() const;
  void set_flushtime(::google::protobuf::int32 value);

  // optional int32 IsShowRoom = 6;
  bool has_isshowroom() const;
  void clear_isshowroom();
  static const int kIsShowRoomFieldNumber = 6;
  ::google::protobuf::int32 isshowroom() const;
  void set_isshowroom(::google::protobuf::int32 value);

  // optional int32 RoomMemberCount = 7;
  bool has_roommembercount() const;
  void clear_roommembercount();
  static const int kRoomMemberCountFieldNumber = 7;
  ::google::protobuf::int32 roommembercount() const;
  void set_roommembercount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.LBSFindResponse)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_contactcount();
  void clear_has_contactcount();
  void set_has_state();
  void clear_has_state();
  void set_has_flushtime();
  void clear_has_flushtime();
  void set_has_isshowroom();
  void clear_has_isshowroom();
  void set_has_roommembercount();
  void clear_has_roommembercount();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::FromCs::ContactObject > contactlist_;
  ::FromCs::BaseResponse* base_;
  ::google::protobuf::int32 contactcount_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 flushtime_;
  ::google::protobuf::int32 isshowroom_;
  ::google::protobuf::int32 roommembercount_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetBrandListRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.GetBrandListRequest) */ {
 public:
  GetBrandListRequest();
  virtual ~GetBrandListRequest();

  GetBrandListRequest(const GetBrandListRequest& from);

  inline GetBrandListRequest& operator=(const GetBrandListRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetBrandListRequest& default_instance();

  static inline const GetBrandListRequest* internal_default_instance() {
    return reinterpret_cast<const GetBrandListRequest*>(
               &_GetBrandListRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(GetBrandListRequest* other);

  // implements Message ----------------------------------------------

  inline GetBrandListRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetBrandListRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetBrandListRequest& from);
  void MergeFrom(const GetBrandListRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetBrandListRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string UserName = 2;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 2;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // required .FromCs.BaseRequest base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseRequest& base() const;
  ::FromCs::BaseRequest* mutable_base();
  ::FromCs::BaseRequest* release_base();
  void set_allocated_base(::FromCs::BaseRequest* base);

  // required .FromCs.sKBuiltinBufferT RequestBuffer = 3;
  bool has_requestbuffer() const;
  void clear_requestbuffer();
  static const int kRequestBufferFieldNumber = 3;
  const ::FromCs::sKBuiltinBufferT& requestbuffer() const;
  ::FromCs::sKBuiltinBufferT* mutable_requestbuffer();
  ::FromCs::sKBuiltinBufferT* release_requestbuffer();
  void set_allocated_requestbuffer(::FromCs::sKBuiltinBufferT* requestbuffer);

  // @@protoc_insertion_point(class_scope:FromCs.GetBrandListRequest)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_username();
  void clear_has_username();
  void set_has_requestbuffer();
  void clear_has_requestbuffer();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::FromCs::BaseRequest* base_;
  ::FromCs::sKBuiltinBufferT* requestbuffer_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetBrandListResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.GetBrandListResponse) */ {
 public:
  GetBrandListResponse();
  virtual ~GetBrandListResponse();

  GetBrandListResponse(const GetBrandListResponse& from);

  inline GetBrandListResponse& operator=(const GetBrandListResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetBrandListResponse& default_instance();

  static inline const GetBrandListResponse* internal_default_instance() {
    return reinterpret_cast<const GetBrandListResponse*>(
               &_GetBrandListResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(GetBrandListResponse* other);

  // implements Message ----------------------------------------------

  inline GetBrandListResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetBrandListResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetBrandListResponse& from);
  void MergeFrom(const GetBrandListResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetBrandListResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string BrandList = 2;
  bool has_brandlist() const;
  void clear_brandlist();
  static const int kBrandListFieldNumber = 2;
  const ::std::string& brandlist() const;
  void set_brandlist(const ::std::string& value);
  #if LANG_CXX11
  void set_brandlist(::std::string&& value);
  #endif
  void set_brandlist(const char* value);
  void set_brandlist(const char* value, size_t size);
  ::std::string* mutable_brandlist();
  ::std::string* release_brandlist();
  void set_allocated_brandlist(::std::string* brandlist);

  // required .FromCs.BaseResponse base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseResponse& base() const;
  ::FromCs::BaseResponse* mutable_base();
  ::FromCs::BaseResponse* release_base();
  void set_allocated_base(::FromCs::BaseResponse* base);

  // required .FromCs.sKBuiltinBufferT RequestBuffer = 3;
  bool has_requestbuffer() const;
  void clear_requestbuffer();
  static const int kRequestBufferFieldNumber = 3;
  const ::FromCs::sKBuiltinBufferT& requestbuffer() const;
  ::FromCs::sKBuiltinBufferT* mutable_requestbuffer();
  ::FromCs::sKBuiltinBufferT* release_requestbuffer();
  void set_allocated_requestbuffer(::FromCs::sKBuiltinBufferT* requestbuffer);

  // @@protoc_insertion_point(class_scope:FromCs.GetBrandListResponse)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_brandlist();
  void clear_has_brandlist();
  void set_has_requestbuffer();
  void clear_has_requestbuffer();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr brandlist_;
  ::FromCs::BaseResponse* base_;
  ::FromCs::sKBuiltinBufferT* requestbuffer_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UploadhdheadimgRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.UploadhdheadimgRequest) */ {
 public:
  UploadhdheadimgRequest();
  virtual ~UploadhdheadimgRequest();

  UploadhdheadimgRequest(const UploadhdheadimgRequest& from);

  inline UploadhdheadimgRequest& operator=(const UploadhdheadimgRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UploadhdheadimgRequest& default_instance();

  static inline const UploadhdheadimgRequest* internal_default_instance() {
    return reinterpret_cast<const UploadhdheadimgRequest*>(
               &_UploadhdheadimgRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(UploadhdheadimgRequest* other);

  // implements Message ----------------------------------------------

  inline UploadhdheadimgRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  UploadhdheadimgRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UploadhdheadimgRequest& from);
  void MergeFrom(const UploadhdheadimgRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UploadhdheadimgRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ImgHash = 6;
  bool has_imghash() const;
  void clear_imghash();
  static const int kImgHashFieldNumber = 6;
  const ::std::string& imghash() const;
  void set_imghash(const ::std::string& value);
  #if LANG_CXX11
  void set_imghash(::std::string&& value);
  #endif
  void set_imghash(const char* value);
  void set_imghash(const char* value, size_t size);
  ::std::string* mutable_imghash();
  ::std::string* release_imghash();
  void set_allocated_imghash(::std::string* imghash);

  // optional string UserName = 7;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 7;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // required .FromCs.BaseRequest base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseRequest& base() const;
  ::FromCs::BaseRequest* mutable_base();
  ::FromCs::BaseRequest* release_base();
  void set_allocated_base(::FromCs::BaseRequest* base);

  // required .FromCs.sKBuiltinBufferT Data = 5;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 5;
  const ::FromCs::sKBuiltinBufferT& data() const;
  ::FromCs::sKBuiltinBufferT* mutable_data();
  ::FromCs::sKBuiltinBufferT* release_data();
  void set_allocated_data(::FromCs::sKBuiltinBufferT* data);

  // required int32 TotalLen = 2;
  bool has_totallen() const;
  void clear_totallen();
  static const int kTotalLenFieldNumber = 2;
  ::google::protobuf::int32 totallen() const;
  void set_totallen(::google::protobuf::int32 value);

  // required int32 StartPos = 3;
  bool has_startpos() const;
  void clear_startpos();
  static const int kStartPosFieldNumber = 3;
  ::google::protobuf::int32 startpos() const;
  void set_startpos(::google::protobuf::int32 value);

  // required int32 HeadImgType = 4;
  bool has_headimgtype() const;
  void clear_headimgtype();
  static const int kHeadImgTypeFieldNumber = 4;
  ::google::protobuf::int32 headimgtype() const;
  void set_headimgtype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.UploadhdheadimgRequest)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_totallen();
  void clear_has_totallen();
  void set_has_startpos();
  void clear_has_startpos();
  void set_has_headimgtype();
  void clear_has_headimgtype();
  void set_has_data();
  void clear_has_data();
  void set_has_imghash();
  void clear_has_imghash();
  void set_has_username();
  void clear_has_username();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr imghash_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::FromCs::BaseRequest* base_;
  ::FromCs::sKBuiltinBufferT* data_;
  ::google::protobuf::int32 totallen_;
  ::google::protobuf::int32 startpos_;
  ::google::protobuf::int32 headimgtype_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UploadhdheadimgResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.UploadhdheadimgResponse) */ {
 public:
  UploadhdheadimgResponse();
  virtual ~UploadhdheadimgResponse();

  UploadhdheadimgResponse(const UploadhdheadimgResponse& from);

  inline UploadhdheadimgResponse& operator=(const UploadhdheadimgResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UploadhdheadimgResponse& default_instance();

  static inline const UploadhdheadimgResponse* internal_default_instance() {
    return reinterpret_cast<const UploadhdheadimgResponse*>(
               &_UploadhdheadimgResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(UploadhdheadimgResponse* other);

  // implements Message ----------------------------------------------

  inline UploadhdheadimgResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  UploadhdheadimgResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UploadhdheadimgResponse& from);
  void MergeFrom(const UploadhdheadimgResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UploadhdheadimgResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string FinalImgMd5sum = 4;
  bool has_finalimgmd5sum() const;
  void clear_finalimgmd5sum();
  static const int kFinalImgMd5SumFieldNumber = 4;
  const ::std::string& finalimgmd5sum() const;
  void set_finalimgmd5sum(const ::std::string& value);
  #if LANG_CXX11
  void set_finalimgmd5sum(::std::string&& value);
  #endif
  void set_finalimgmd5sum(const char* value);
  void set_finalimgmd5sum(const char* value, size_t size);
  ::std::string* mutable_finalimgmd5sum();
  ::std::string* release_finalimgmd5sum();
  void set_allocated_finalimgmd5sum(::std::string* finalimgmd5sum);

  // required .FromCs.BaseResponse base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseResponse& base() const;
  ::FromCs::BaseResponse* mutable_base();
  ::FromCs::BaseResponse* release_base();
  void set_allocated_base(::FromCs::BaseResponse* base);

  // required int32 TotalLen = 2;
  bool has_totallen() const;
  void clear_totallen();
  static const int kTotalLenFieldNumber = 2;
  ::google::protobuf::int32 totallen() const;
  void set_totallen(::google::protobuf::int32 value);

  // required int32 StartPos = 3;
  bool has_startpos() const;
  void clear_startpos();
  static const int kStartPosFieldNumber = 3;
  ::google::protobuf::int32 startpos() const;
  void set_startpos(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.UploadhdheadimgResponse)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_totallen();
  void clear_has_totallen();
  void set_has_startpos();
  void clear_has_startpos();
  void set_has_finalimgmd5sum();
  void clear_has_finalimgmd5sum();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr finalimgmd5sum_;
  ::FromCs::BaseResponse* base_;
  ::google::protobuf::int32 totallen_;
  ::google::protobuf::int32 startpos_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NewInitRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.NewInitRequest) */ {
 public:
  NewInitRequest();
  virtual ~NewInitRequest();

  NewInitRequest(const NewInitRequest& from);

  inline NewInitRequest& operator=(const NewInitRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NewInitRequest& default_instance();

  static inline const NewInitRequest* internal_default_instance() {
    return reinterpret_cast<const NewInitRequest*>(
               &_NewInitRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(NewInitRequest* other);

  // implements Message ----------------------------------------------

  inline NewInitRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  NewInitRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NewInitRequest& from);
  void MergeFrom(const NewInitRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NewInitRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string UserName = 2;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 2;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // optional string Language = 5;
  bool has_language() const;
  void clear_language();
  static const int kLanguageFieldNumber = 5;
  const ::std::string& language() const;
  void set_language(const ::std::string& value);
  #if LANG_CXX11
  void set_language(::std::string&& value);
  #endif
  void set_language(const char* value);
  void set_language(const char* value, size_t size);
  ::std::string* mutable_language();
  ::std::string* release_language();
  void set_allocated_language(::std::string* language);

  // required .FromCs.BaseRequest base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseRequest& base() const;
  ::FromCs::BaseRequest* mutable_base();
  ::FromCs::BaseRequest* release_base();
  void set_allocated_base(::FromCs::BaseRequest* base);

  // required .FromCs.sKBuiltinBufferT CurrentSynckey = 3;
  bool has_currentsynckey() const;
  void clear_currentsynckey();
  static const int kCurrentSynckeyFieldNumber = 3;
  const ::FromCs::sKBuiltinBufferT& currentsynckey() const;
  ::FromCs::sKBuiltinBufferT* mutable_currentsynckey();
  ::FromCs::sKBuiltinBufferT* release_currentsynckey();
  void set_allocated_currentsynckey(::FromCs::sKBuiltinBufferT* currentsynckey);

  // required .FromCs.sKBuiltinBufferT MaxSynckey = 4;
  bool has_maxsynckey() const;
  void clear_maxsynckey();
  static const int kMaxSynckeyFieldNumber = 4;
  const ::FromCs::sKBuiltinBufferT& maxsynckey() const;
  ::FromCs::sKBuiltinBufferT* mutable_maxsynckey();
  ::FromCs::sKBuiltinBufferT* release_maxsynckey();
  void set_allocated_maxsynckey(::FromCs::sKBuiltinBufferT* maxsynckey);

  // @@protoc_insertion_point(class_scope:FromCs.NewInitRequest)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_username();
  void clear_has_username();
  void set_has_currentsynckey();
  void clear_has_currentsynckey();
  void set_has_maxsynckey();
  void clear_has_maxsynckey();
  void set_has_language();
  void clear_has_language();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr language_;
  ::FromCs::BaseRequest* base_;
  ::FromCs::sKBuiltinBufferT* currentsynckey_;
  ::FromCs::sKBuiltinBufferT* maxsynckey_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NewInitResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.NewInitResponse) */ {
 public:
  NewInitResponse();
  virtual ~NewInitResponse();

  NewInitResponse(const NewInitResponse& from);

  inline NewInitResponse& operator=(const NewInitResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NewInitResponse& default_instance();

  static inline const NewInitResponse* internal_default_instance() {
    return reinterpret_cast<const NewInitResponse*>(
               &_NewInitResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(NewInitResponse* other);

  // implements Message ----------------------------------------------

  inline NewInitResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  NewInitResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NewInitResponse& from);
  void MergeFrom(const NewInitResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NewInitResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .FromCs.CmdItem CmdList = 7;
  int cmdlist_size() const;
  void clear_cmdlist();
  static const int kCmdListFieldNumber = 7;
  const ::FromCs::CmdItem& cmdlist(int index) const;
  ::FromCs::CmdItem* mutable_cmdlist(int index);
  ::FromCs::CmdItem* add_cmdlist();
  ::google::protobuf::RepeatedPtrField< ::FromCs::CmdItem >*
      mutable_cmdlist();
  const ::google::protobuf::RepeatedPtrField< ::FromCs::CmdItem >&
      cmdlist() const;

  // required .FromCs.BaseResponse base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseResponse& base() const;
  ::FromCs::BaseResponse* mutable_base();
  ::FromCs::BaseResponse* release_base();
  void set_allocated_base(::FromCs::BaseResponse* base);

  // required .FromCs.sKBuiltinBufferT CurrentSynckey = 2;
  bool has_currentsynckey() const;
  void clear_currentsynckey();
  static const int kCurrentSynckeyFieldNumber = 2;
  const ::FromCs::sKBuiltinBufferT& currentsynckey() const;
  ::FromCs::sKBuiltinBufferT* mutable_currentsynckey();
  ::FromCs::sKBuiltinBufferT* release_currentsynckey();
  void set_allocated_currentsynckey(::FromCs::sKBuiltinBufferT* currentsynckey);

  // required .FromCs.sKBuiltinBufferT MaxSynckey = 3;
  bool has_maxsynckey() const;
  void clear_maxsynckey();
  static const int kMaxSynckeyFieldNumber = 3;
  const ::FromCs::sKBuiltinBufferT& maxsynckey() const;
  ::FromCs::sKBuiltinBufferT* mutable_maxsynckey();
  ::FromCs::sKBuiltinBufferT* release_maxsynckey();
  void set_allocated_maxsynckey(::FromCs::sKBuiltinBufferT* maxsynckey);

  // required int32 ContinueFlag = 4;
  bool has_continueflag() const;
  void clear_continueflag();
  static const int kContinueFlagFieldNumber = 4;
  ::google::protobuf::int32 continueflag() const;
  void set_continueflag(::google::protobuf::int32 value);

  // required int32 SelectBitmap = 5;
  bool has_selectbitmap() const;
  void clear_selectbitmap();
  static const int kSelectBitmapFieldNumber = 5;
  ::google::protobuf::int32 selectbitmap() const;
  void set_selectbitmap(::google::protobuf::int32 value);

  // required int32 CmdCount = 6;
  bool has_cmdcount() const;
  void clear_cmdcount();
  static const int kCmdCountFieldNumber = 6;
  ::google::protobuf::int32 cmdcount() const;
  void set_cmdcount(::google::protobuf::int32 value);

  // required int32 Ratio = 8;
  bool has_ratio() const;
  void clear_ratio();
  static const int kRatioFieldNumber = 8;
  ::google::protobuf::int32 ratio() const;
  void set_ratio(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.NewInitResponse)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_currentsynckey();
  void clear_has_currentsynckey();
  void set_has_maxsynckey();
  void clear_has_maxsynckey();
  void set_has_continueflag();
  void clear_has_continueflag();
  void set_has_selectbitmap();
  void clear_has_selectbitmap();
  void set_has_cmdcount();
  void clear_has_cmdcount();
  void set_has_ratio();
  void clear_has_ratio();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::FromCs::CmdItem > cmdlist_;
  ::FromCs::BaseResponse* base_;
  ::FromCs::sKBuiltinBufferT* currentsynckey_;
  ::FromCs::sKBuiltinBufferT* maxsynckey_;
  ::google::protobuf::int32 continueflag_;
  ::google::protobuf::int32 selectbitmap_;
  ::google::protobuf::int32 cmdcount_;
  ::google::protobuf::int32 ratio_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NewRegRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.NewRegRequest) */ {
 public:
  NewRegRequest();
  virtual ~NewRegRequest();

  NewRegRequest(const NewRegRequest& from);

  inline NewRegRequest& operator=(const NewRegRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NewRegRequest& default_instance();

  static inline const NewRegRequest* internal_default_instance() {
    return reinterpret_cast<const NewRegRequest*>(
               &_NewRegRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(NewRegRequest* other);

  // implements Message ----------------------------------------------

  inline NewRegRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  NewRegRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NewRegRequest& from);
  void MergeFrom(const NewRegRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NewRegRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string UserName = 2;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 2;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // optional string Pwd = 3;
  bool has_pwd() const;
  void clear_pwd();
  static const int kPwdFieldNumber = 3;
  const ::std::string& pwd() const;
  void set_pwd(const ::std::string& value);
  #if LANG_CXX11
  void set_pwd(::std::string&& value);
  #endif
  void set_pwd(const char* value);
  void set_pwd(const char* value, size_t size);
  ::std::string* mutable_pwd();
  ::std::string* release_pwd();
  void set_allocated_pwd(::std::string* pwd);

  // optional string NickName = 4;
  bool has_nickname() const;
  void clear_nickname();
  static const int kNickNameFieldNumber = 4;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  #if LANG_CXX11
  void set_nickname(::std::string&& value);
  #endif
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // required string BindEmail = 6;
  bool has_bindemail() const;
  void clear_bindemail();
  static const int kBindEmailFieldNumber = 6;
  const ::std::string& bindemail() const;
  void set_bindemail(const ::std::string& value);
  #if LANG_CXX11
  void set_bindemail(::std::string&& value);
  #endif
  void set_bindemail(const char* value);
  void set_bindemail(const char* value, size_t size);
  ::std::string* mutable_bindemail();
  ::std::string* release_bindemail();
  void set_allocated_bindemail(::std::string* bindemail);

  // optional string BindMobile = 7;
  bool has_bindmobile() const;
  void clear_bindmobile();
  static const int kBindMobileFieldNumber = 7;
  const ::std::string& bindmobile() const;
  void set_bindmobile(const ::std::string& value);
  #if LANG_CXX11
  void set_bindmobile(::std::string&& value);
  #endif
  void set_bindmobile(const char* value);
  void set_bindmobile(const char* value, size_t size);
  ::std::string* mutable_bindmobile();
  ::std::string* release_bindmobile();
  void set_allocated_bindmobile(::std::string* bindmobile);

  // optional string Ticket = 8;
  bool has_ticket() const;
  void clear_ticket();
  static const int kTicketFieldNumber = 8;
  const ::std::string& ticket() const;
  void set_ticket(const ::std::string& value);
  #if LANG_CXX11
  void set_ticket(::std::string&& value);
  #endif
  void set_ticket(const char* value);
  void set_ticket(const char* value, size_t size);
  ::std::string* mutable_ticket();
  ::std::string* release_ticket();
  void set_allocated_ticket(::std::string* ticket);

  // optional string TimeZone = 15;
  bool has_timezone() const;
  void clear_timezone();
  static const int kTimeZoneFieldNumber = 15;
  const ::std::string& timezone() const;
  void set_timezone(const ::std::string& value);
  #if LANG_CXX11
  void set_timezone(::std::string&& value);
  #endif
  void set_timezone(const char* value);
  void set_timezone(const char* value, size_t size);
  ::std::string* mutable_timezone();
  ::std::string* release_timezone();
  void set_allocated_timezone(::std::string* timezone);

  // optional string Language = 16;
  bool has_language() const;
  void clear_language();
  static const int kLanguageFieldNumber = 16;
  const ::std::string& language() const;
  void set_language(const ::std::string& value);
  #if LANG_CXX11
  void set_language(::std::string&& value);
  #endif
  void set_language(const char* value);
  void set_language(const char* value, size_t size);
  ::std::string* mutable_language();
  ::std::string* release_language();
  void set_allocated_language(::std::string* language);

  // optional string RealCountry = 18;
  bool has_realcountry() const;
  void clear_realcountry();
  static const int kRealCountryFieldNumber = 18;
  const ::std::string& realcountry() const;
  void set_realcountry(const ::std::string& value);
  #if LANG_CXX11
  void set_realcountry(::std::string&& value);
  #endif
  void set_realcountry(const char* value);
  void set_realcountry(const char* value, size_t size);
  ::std::string* mutable_realcountry();
  ::std::string* release_realcountry();
  void set_allocated_realcountry(::std::string* realcountry);

  // optional string alias = 20;
  bool has_alias() const;
  void clear_alias();
  static const int kAliasFieldNumber = 20;
  const ::std::string& alias() const;
  void set_alias(const ::std::string& value);
  #if LANG_CXX11
  void set_alias(::std::string&& value);
  #endif
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  ::std::string* mutable_alias();
  ::std::string* release_alias();
  void set_allocated_alias(::std::string* alias);

  // optional string verifySignature = 21;
  bool has_verifysignature() const;
  void clear_verifysignature();
  static const int kVerifySignatureFieldNumber = 21;
  const ::std::string& verifysignature() const;
  void set_verifysignature(const ::std::string& value);
  #if LANG_CXX11
  void set_verifysignature(::std::string&& value);
  #endif
  void set_verifysignature(const char* value);
  void set_verifysignature(const char* value, size_t size);
  ::std::string* mutable_verifysignature();
  ::std::string* release_verifysignature();
  void set_allocated_verifysignature(::std::string* verifysignature);

  // optional string verifyContent = 22;
  bool has_verifycontent() const;
  void clear_verifycontent();
  static const int kVerifyContentFieldNumber = 22;
  const ::std::string& verifycontent() const;
  void set_verifycontent(const ::std::string& value);
  #if LANG_CXX11
  void set_verifycontent(::std::string&& value);
  #endif
  void set_verifycontent(const char* value);
  void set_verifycontent(const char* value, size_t size);
  ::std::string* mutable_verifycontent();
  ::std::string* release_verifycontent();
  void set_allocated_verifycontent(::std::string* verifycontent);

  // optional string clientSeqId = 31;
  bool has_clientseqid() const;
  void clear_clientseqid();
  static const int kClientSeqIdFieldNumber = 31;
  const ::std::string& clientseqid() const;
  void set_clientseqid(const ::std::string& value);
  #if LANG_CXX11
  void set_clientseqid(::std::string&& value);
  #endif
  void set_clientseqid(const char* value);
  void set_clientseqid(const char* value, size_t size);
  ::std::string* mutable_clientseqid();
  ::std::string* release_clientseqid();
  void set_allocated_clientseqid(::std::string* clientseqid);

  // optional string adSource = 32;
  bool has_adsource() const;
  void clear_adsource();
  static const int kAdSourceFieldNumber = 32;
  const ::std::string& adsource() const;
  void set_adsource(const ::std::string& value);
  #if LANG_CXX11
  void set_adsource(::std::string&& value);
  #endif
  void set_adsource(const char* value);
  void set_adsource(const char* value, size_t size);
  ::std::string* mutable_adsource();
  ::std::string* release_adsource();
  void set_allocated_adsource(::std::string* adsource);

  // optional string androidId = 33;
  bool has_androidid() const;
  void clear_androidid();
  static const int kAndroidIdFieldNumber = 33;
  const ::std::string& androidid() const;
  void set_androidid(const ::std::string& value);
  #if LANG_CXX11
  void set_androidid(::std::string&& value);
  #endif
  void set_androidid(const char* value);
  void set_androidid(const char* value, size_t size);
  ::std::string* mutable_androidid();
  ::std::string* release_androidid();
  void set_allocated_androidid(::std::string* androidid);

  // optional string macAddr = 34;
  bool has_macaddr() const;
  void clear_macaddr();
  static const int kMacAddrFieldNumber = 34;
  const ::std::string& macaddr() const;
  void set_macaddr(const ::std::string& value);
  #if LANG_CXX11
  void set_macaddr(::std::string&& value);
  #endif
  void set_macaddr(const char* value);
  void set_macaddr(const char* value, size_t size);
  ::std::string* mutable_macaddr();
  ::std::string* release_macaddr();
  void set_allocated_macaddr(::std::string* macaddr);

  // optional string androidInstallRef = 35;
  bool has_androidinstallref() const;
  void clear_androidinstallref();
  static const int kAndroidInstallRefFieldNumber = 35;
  const ::std::string& androidinstallref() const;
  void set_androidinstallref(const ::std::string& value);
  #if LANG_CXX11
  void set_androidinstallref(::std::string&& value);
  #endif
  void set_androidinstallref(const char* value);
  void set_androidinstallref(const char* value, size_t size);
  ::std::string* mutable_androidinstallref();
  ::std::string* release_androidinstallref();
  void set_allocated_androidinstallref(::std::string* androidinstallref);

  // optional string clientFingerprint = 36;
  bool has_clientfingerprint() const;
  void clear_clientfingerprint();
  static const int kClientFingerprintFieldNumber = 36;
  const ::std::string& clientfingerprint() const;
  void set_clientfingerprint(const ::std::string& value);
  #if LANG_CXX11
  void set_clientfingerprint(::std::string&& value);
  #endif
  void set_clientfingerprint(const char* value);
  void set_clientfingerprint(const char* value, size_t size);
  ::std::string* mutable_clientfingerprint();
  ::std::string* release_clientfingerprint();
  void set_allocated_clientfingerprint(::std::string* clientfingerprint);

  // optional string googleAid = 38;
  bool has_googleaid() const;
  void clear_googleaid();
  static const int kGoogleAidFieldNumber = 38;
  const ::std::string& googleaid() const;
  void set_googleaid(const ::std::string& value);
  #if LANG_CXX11
  void set_googleaid(::std::string&& value);
  #endif
  void set_googleaid(const char* value);
  void set_googleaid(const char* value, size_t size);
  ::std::string* mutable_googleaid();
  ::std::string* release_googleaid();
  void set_allocated_googleaid(::std::string* googleaid);

  // optional string bundleId = 39;
  bool has_bundleid() const;
  void clear_bundleid();
  static const int kBundleIdFieldNumber = 39;
  const ::std::string& bundleid() const;
  void set_bundleid(const ::std::string& value);
  #if LANG_CXX11
  void set_bundleid(::std::string&& value);
  #endif
  void set_bundleid(const char* value);
  void set_bundleid(const char* value, size_t size);
  ::std::string* mutable_bundleid();
  ::std::string* release_bundleid();
  void set_allocated_bundleid(::std::string* bundleid);

  // required .FromCs.BaseRequest base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseRequest& base() const;
  ::FromCs::BaseRequest* mutable_base();
  ::FromCs::BaseRequest* release_base();
  void set_allocated_base(::FromCs::BaseRequest* base);

  // required .FromCs.sKBuiltinBufferT RandomEncryKey = 19;
  bool has_randomencrykey() const;
  void clear_randomencrykey();
  static const int kRandomEncryKeyFieldNumber = 19;
  const ::FromCs::sKBuiltinBufferT& randomencrykey() const;
  ::FromCs::sKBuiltinBufferT* mutable_randomencrykey();
  ::FromCs::sKBuiltinBufferT* release_randomencrykey();
  void set_allocated_randomencrykey(::FromCs::sKBuiltinBufferT* randomencrykey);

  // optional .FromCs.ECDHKey cliPubEcdhkey = 37;
  bool has_clipubecdhkey() const;
  void clear_clipubecdhkey();
  static const int kCliPubEcdhkeyFieldNumber = 37;
  const ::FromCs::ECDHKey& clipubecdhkey() const;
  ::FromCs::ECDHKey* mutable_clipubecdhkey();
  ::FromCs::ECDHKey* release_clipubecdhkey();
  void set_allocated_clipubecdhkey(::FromCs::ECDHKey* clipubecdhkey);

  // required int32 BindUin = 5;
  bool has_binduin() const;
  void clear_binduin();
  static const int kBindUinFieldNumber = 5;
  ::google::protobuf::int32 binduin() const;
  void set_binduin(::google::protobuf::int32 value);

  // optional int32 BuiltinIPSeq = 12;
  bool has_builtinipseq() const;
  void clear_builtinipseq();
  static const int kBuiltinIPSeqFieldNumber = 12;
  ::google::protobuf::int32 builtinipseq() const;
  void set_builtinipseq(::google::protobuf::int32 value);

  // optional int32 DLSrc = 13;
  bool has_dlsrc() const;
  void clear_dlsrc();
  static const int kDLSrcFieldNumber = 13;
  ::google::protobuf::int32 dlsrc() const;
  void set_dlsrc(::google::protobuf::int32 value);

  // optional int32 RegMode = 14;
  bool has_regmode() const;
  void clear_regmode();
  static const int kRegModeFieldNumber = 14;
  ::google::protobuf::int32 regmode() const;
  void set_regmode(::google::protobuf::int32 value);

  // optional int32 ForceReg = 17;
  bool has_forcereg() const;
  void clear_forcereg();
  static const int kForceRegFieldNumber = 17;
  ::google::protobuf::int32 forcereg() const;
  void set_forcereg(::google::protobuf::int32 value);

  // optional int32 hasHeadImg = 23;
  bool has_hasheadimg() const;
  void clear_hasheadimg();
  static const int kHasHeadImgFieldNumber = 23;
  ::google::protobuf::int32 hasheadimg() const;
  void set_hasheadimg(::google::protobuf::int32 value);

  // optional int32 suggestRet = 24;
  bool has_suggestret() const;
  void clear_suggestret();
  static const int kSuggestRetFieldNumber = 24;
  ::google::protobuf::int32 suggestret() const;
  void set_suggestret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.NewRegRequest)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_username();
  void clear_has_username();
  void set_has_pwd();
  void clear_has_pwd();
  void set_has_nickname();
  void clear_has_nickname();
  void set_has_binduin();
  void clear_has_binduin();
  void set_has_bindemail();
  void clear_has_bindemail();
  void set_has_bindmobile();
  void clear_has_bindmobile();
  void set_has_ticket();
  void clear_has_ticket();
  void set_has_builtinipseq();
  void clear_has_builtinipseq();
  void set_has_dlsrc();
  void clear_has_dlsrc();
  void set_has_regmode();
  void clear_has_regmode();
  void set_has_timezone();
  void clear_has_timezone();
  void set_has_language();
  void clear_has_language();
  void set_has_forcereg();
  void clear_has_forcereg();
  void set_has_realcountry();
  void clear_has_realcountry();
  void set_has_randomencrykey();
  void clear_has_randomencrykey();
  void set_has_alias();
  void clear_has_alias();
  void set_has_verifysignature();
  void clear_has_verifysignature();
  void set_has_verifycontent();
  void clear_has_verifycontent();
  void set_has_hasheadimg();
  void clear_has_hasheadimg();
  void set_has_suggestret();
  void clear_has_suggestret();
  void set_has_clientseqid();
  void clear_has_clientseqid();
  void set_has_adsource();
  void clear_has_adsource();
  void set_has_androidid();
  void clear_has_androidid();
  void set_has_macaddr();
  void clear_has_macaddr();
  void set_has_androidinstallref();
  void clear_has_androidinstallref();
  void set_has_clientfingerprint();
  void clear_has_clientfingerprint();
  void set_has_clipubecdhkey();
  void clear_has_clipubecdhkey();
  void set_has_googleaid();
  void clear_has_googleaid();
  void set_has_bundleid();
  void clear_has_bundleid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr pwd_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::internal::ArenaStringPtr bindemail_;
  ::google::protobuf::internal::ArenaStringPtr bindmobile_;
  ::google::protobuf::internal::ArenaStringPtr ticket_;
  ::google::protobuf::internal::ArenaStringPtr timezone_;
  ::google::protobuf::internal::ArenaStringPtr language_;
  ::google::protobuf::internal::ArenaStringPtr realcountry_;
  ::google::protobuf::internal::ArenaStringPtr alias_;
  ::google::protobuf::internal::ArenaStringPtr verifysignature_;
  ::google::protobuf::internal::ArenaStringPtr verifycontent_;
  ::google::protobuf::internal::ArenaStringPtr clientseqid_;
  ::google::protobuf::internal::ArenaStringPtr adsource_;
  ::google::protobuf::internal::ArenaStringPtr androidid_;
  ::google::protobuf::internal::ArenaStringPtr macaddr_;
  ::google::protobuf::internal::ArenaStringPtr androidinstallref_;
  ::google::protobuf::internal::ArenaStringPtr clientfingerprint_;
  ::google::protobuf::internal::ArenaStringPtr googleaid_;
  ::google::protobuf::internal::ArenaStringPtr bundleid_;
  ::FromCs::BaseRequest* base_;
  ::FromCs::sKBuiltinBufferT* randomencrykey_;
  ::FromCs::ECDHKey* clipubecdhkey_;
  ::google::protobuf::int32 binduin_;
  ::google::protobuf::int32 builtinipseq_;
  ::google::protobuf::int32 dlsrc_;
  ::google::protobuf::int32 regmode_;
  ::google::protobuf::int32 forcereg_;
  ::google::protobuf::int32 hasheadimg_;
  ::google::protobuf::int32 suggestret_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NewRegResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.NewRegResponse) */ {
 public:
  NewRegResponse();
  virtual ~NewRegResponse();

  NewRegResponse(const NewRegResponse& from);

  inline NewRegResponse& operator=(const NewRegResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NewRegResponse& default_instance();

  static inline const NewRegResponse* internal_default_instance() {
    return reinterpret_cast<const NewRegResponse*>(
               &_NewRegResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(NewRegResponse* other);

  // implements Message ----------------------------------------------

  inline NewRegResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  NewRegResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NewRegResponse& from);
  void MergeFrom(const NewRegResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NewRegResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string SessionKey = 3;
  bool has_sessionkey() const;
  void clear_sessionkey();
  static const int kSessionKeyFieldNumber = 3;
  const ::std::string& sessionkey() const;
  void set_sessionkey(const ::std::string& value);
  #if LANG_CXX11
  void set_sessionkey(::std::string&& value);
  #endif
  void set_sessionkey(const char* value);
  void set_sessionkey(const char* value, size_t size);
  ::std::string* mutable_sessionkey();
  ::std::string* release_sessionkey();
  void set_allocated_sessionkey(::std::string* sessionkey);

  // optional string OfficialUserName = 4;
  bool has_officialusername() const;
  void clear_officialusername();
  static const int kOfficialUserNameFieldNumber = 4;
  const ::std::string& officialusername() const;
  void set_officialusername(const ::std::string& value);
  #if LANG_CXX11
  void set_officialusername(::std::string&& value);
  #endif
  void set_officialusername(const char* value);
  void set_officialusername(const char* value, size_t size);
  ::std::string* mutable_officialusername();
  ::std::string* release_officialusername();
  void set_allocated_officialusername(::std::string* officialusername);

  // optional string OfficialNickName = 5;
  bool has_officialnickname() const;
  void clear_officialnickname();
  static const int kOfficialNickNameFieldNumber = 5;
  const ::std::string& officialnickname() const;
  void set_officialnickname(const ::std::string& value);
  #if LANG_CXX11
  void set_officialnickname(::std::string&& value);
  #endif
  void set_officialnickname(const char* value);
  void set_officialnickname(const char* value, size_t size);
  ::std::string* mutable_officialnickname();
  ::std::string* release_officialnickname();
  void set_allocated_officialnickname(::std::string* officialnickname);

  // optional string QQMicroBlogUserName = 6;
  bool has_qqmicroblogusername() const;
  void clear_qqmicroblogusername();
  static const int kQQMicroBlogUserNameFieldNumber = 6;
  const ::std::string& qqmicroblogusername() const;
  void set_qqmicroblogusername(const ::std::string& value);
  #if LANG_CXX11
  void set_qqmicroblogusername(::std::string&& value);
  #endif
  void set_qqmicroblogusername(const char* value);
  void set_qqmicroblogusername(const char* value, size_t size);
  ::std::string* mutable_qqmicroblogusername();
  ::std::string* release_qqmicroblogusername();
  void set_allocated_qqmicroblogusername(::std::string* qqmicroblogusername);

  // optional string BindEmail = 7;
  bool has_bindemail() const;
  void clear_bindemail();
  static const int kBindEmailFieldNumber = 7;
  const ::std::string& bindemail() const;
  void set_bindemail(const ::std::string& value);
  #if LANG_CXX11
  void set_bindemail(::std::string&& value);
  #endif
  void set_bindemail(const char* value);
  void set_bindemail(const char* value, size_t size);
  ::std::string* mutable_bindemail();
  ::std::string* release_bindemail();
  void set_allocated_bindemail(::std::string* bindemail);

  // optional string PushMailSettingTicket = 10;
  bool has_pushmailsettingticket() const;
  void clear_pushmailsettingticket();
  static const int kPushMailSettingTicketFieldNumber = 10;
  const ::std::string& pushmailsettingticket() const;
  void set_pushmailsettingticket(const ::std::string& value);
  #if LANG_CXX11
  void set_pushmailsettingticket(::std::string&& value);
  #endif
  void set_pushmailsettingticket(const char* value);
  void set_pushmailsettingticket(const char* value, size_t size);
  ::std::string* mutable_pushmailsettingticket();
  ::std::string* release_pushmailsettingticket();
  void set_allocated_pushmailsettingticket(::std::string* pushmailsettingticket);

  // optional string FSURL = 15;
  bool has_fsurl() const;
  void clear_fsurl();
  static const int kFSURLFieldNumber = 15;
  const ::std::string& fsurl() const;
  void set_fsurl(const ::std::string& value);
  #if LANG_CXX11
  void set_fsurl(::std::string&& value);
  #endif
  void set_fsurl(const char* value);
  void set_fsurl(const char* value, size_t size);
  ::std::string* mutable_fsurl();
  ::std::string* release_fsurl();
  void set_allocated_fsurl(::std::string* fsurl);

  // optional string UserName = 16;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 16;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // optional string AuthKey = 21;
  bool has_authkey() const;
  void clear_authkey();
  static const int kAuthKeyFieldNumber = 21;
  const ::std::string& authkey() const;
  void set_authkey(const ::std::string& value);
  #if LANG_CXX11
  void set_authkey(::std::string&& value);
  #endif
  void set_authkey(const char* value);
  void set_authkey(const char* value, size_t size);
  ::std::string* mutable_authkey();
  ::std::string* release_authkey();
  void set_allocated_authkey(::std::string* authkey);

  // optional string Password = 23;
  bool has_password() const;
  void clear_password();
  static const int kPasswordFieldNumber = 23;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // optional string AutoAuthTicket = 26;
  bool has_autoauthticket() const;
  void clear_autoauthticket();
  static const int kAutoAuthTicketFieldNumber = 26;
  const ::std::string& autoauthticket() const;
  void set_autoauthticket(const ::std::string& value);
  #if LANG_CXX11
  void set_autoauthticket(::std::string&& value);
  #endif
  void set_autoauthticket(const char* value);
  void set_autoauthticket(const char* value, size_t size);
  ::std::string* mutable_autoauthticket();
  ::std::string* release_autoauthticket();
  void set_allocated_autoauthticket(::std::string* autoauthticket);

  // optional string stepTicket = 28;
  bool has_stepticket() const;
  void clear_stepticket();
  static const int kStepTicketFieldNumber = 28;
  const ::std::string& stepticket() const;
  void set_stepticket(const ::std::string& value);
  #if LANG_CXX11
  void set_stepticket(::std::string&& value);
  #endif
  void set_stepticket(const char* value);
  void set_stepticket(const char* value, size_t size);
  ::std::string* mutable_stepticket();
  ::std::string* release_stepticket();
  void set_allocated_stepticket(::std::string* stepticket);

  // optional string verifySignature = 29;
  bool has_verifysignature() const;
  void clear_verifysignature();
  static const int kVerifySignatureFieldNumber = 29;
  const ::std::string& verifysignature() const;
  void set_verifysignature(const ::std::string& value);
  #if LANG_CXX11
  void set_verifysignature(::std::string&& value);
  #endif
  void set_verifysignature(const char* value);
  void set_verifysignature(const char* value, size_t size);
  ::std::string* mutable_verifysignature();
  ::std::string* release_verifysignature();
  void set_allocated_verifysignature(::std::string* verifysignature);

  // required .FromCs.BaseResponse base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseResponse& base() const;
  ::FromCs::BaseResponse* mutable_base();
  ::FromCs::BaseResponse* release_base();
  void set_allocated_base(::FromCs::BaseResponse* base);

  // optional .FromCs.iPList BuiltinIPList = 14;
  bool has_builtiniplist() const;
  void clear_builtiniplist();
  static const int kBuiltinIPListFieldNumber = 14;
  const ::FromCs::iPList& builtiniplist() const;
  ::FromCs::iPList* mutable_builtiniplist();
  ::FromCs::iPList* release_builtiniplist();
  void set_allocated_builtiniplist(::FromCs::iPList* builtiniplist);

  // optional .FromCs.NetworkControlType NetworkControl = 18;
  bool has_networkcontrol() const;
  void clear_networkcontrol();
  static const int kNetworkControlFieldNumber = 18;
  const ::FromCs::NetworkControlType& networkcontrol() const;
  ::FromCs::NetworkControlType* mutable_networkcontrol();
  ::FromCs::NetworkControlType* release_networkcontrol();
  void set_allocated_networkcontrol(::FromCs::NetworkControlType* networkcontrol);

  // optional .FromCs.PluginKeyListType PluginKeyList = 22;
  bool has_pluginkeylist() const;
  void clear_pluginkeylist();
  static const int kPluginKeyListFieldNumber = 22;
  const ::FromCs::PluginKeyListType& pluginkeylist() const;
  ::FromCs::PluginKeyListType* mutable_pluginkeylist();
  ::FromCs::PluginKeyListType* release_pluginkeylist();
  void set_allocated_pluginkeylist(::FromCs::PluginKeyListType* pluginkeylist);

  // optional .FromCs.NewHostListType NewHostList = 25;
  bool has_newhostlist() const;
  void clear_newhostlist();
  static const int kNewHostListFieldNumber = 25;
  const ::FromCs::NewHostListType& newhostlist() const;
  ::FromCs::NewHostListType* mutable_newhostlist();
  ::FromCs::NewHostListType* release_newhostlist();
  void set_allocated_newhostlist(::FromCs::NewHostListType* newhostlist);

  // optional .FromCs.DnsInfoType DnsInfo = 27;
  bool has_dnsinfo() const;
  void clear_dnsinfo();
  static const int kDnsInfoFieldNumber = 27;
  const ::FromCs::DnsInfoType& dnsinfo() const;
  ::FromCs::DnsInfoType* mutable_dnsinfo();
  ::FromCs::DnsInfoType* release_dnsinfo();
  void set_allocated_dnsinfo(::FromCs::DnsInfoType* dnsinfo);

  // optional .FromCs.sKBuiltinBufferT verifyBuff = 30;
  bool has_verifybuff() const;
  void clear_verifybuff();
  static const int kVerifyBuffFieldNumber = 30;
  const ::FromCs::sKBuiltinBufferT& verifybuff() const;
  ::FromCs::sKBuiltinBufferT* mutable_verifybuff();
  ::FromCs::sKBuiltinBufferT* release_verifybuff();
  void set_allocated_verifybuff(::FromCs::sKBuiltinBufferT* verifybuff);

  // optional .FromCs.ShowStyleKey showStyle = 31;
  bool has_showstyle() const;
  void clear_showstyle();
  static const int kShowStyleFieldNumber = 31;
  const ::FromCs::ShowStyleKey& showstyle() const;
  ::FromCs::ShowStyleKey* mutable_showstyle();
  ::FromCs::ShowStyleKey* release_showstyle();
  void set_allocated_showstyle(::FromCs::ShowStyleKey* showstyle);

  // optional .FromCs.DnsInfoType snsDnsInfo = 32;
  bool has_snsdnsinfo() const;
  void clear_snsdnsinfo();
  static const int kSnsDnsInfoFieldNumber = 32;
  const ::FromCs::DnsInfoType& snsdnsinfo() const;
  ::FromCs::DnsInfoType* mutable_snsdnsinfo();
  ::FromCs::DnsInfoType* release_snsdnsinfo();
  void set_allocated_snsdnsinfo(::FromCs::DnsInfoType* snsdnsinfo);

  // optional .FromCs.DnsInfoType appDnsInfo = 33;
  bool has_appdnsinfo() const;
  void clear_appdnsinfo();
  static const int kAppDnsInfoFieldNumber = 33;
  const ::FromCs::DnsInfoType& appdnsinfo() const;
  ::FromCs::DnsInfoType* mutable_appdnsinfo();
  ::FromCs::DnsInfoType* release_appdnsinfo();
  void set_allocated_appdnsinfo(::FromCs::DnsInfoType* appdnsinfo);

  // optional .FromCs.SecAuthRegKeySect secAuthRegKeySect = 34;
  bool has_secauthregkeysect() const;
  void clear_secauthregkeysect();
  static const int kSecAuthRegKeySectFieldNumber = 34;
  const ::FromCs::SecAuthRegKeySect& secauthregkeysect() const;
  ::FromCs::SecAuthRegKeySect* mutable_secauthregkeysect();
  ::FromCs::SecAuthRegKeySect* release_secauthregkeysect();
  void set_allocated_secauthregkeysect(::FromCs::SecAuthRegKeySect* secauthregkeysect);

  // required int32 Uin = 2;
  bool has_uin() const;
  void clear_uin();
  static const int kUinFieldNumber = 2;
  ::google::protobuf::int32 uin() const;
  void set_uin(::google::protobuf::int32 value);

  // required int32 PushMailStatus = 8;
  bool has_pushmailstatus() const;
  void clear_pushmailstatus();
  static const int kPushMailStatusFieldNumber = 8;
  ::google::protobuf::int32 pushmailstatus() const;
  void set_pushmailstatus(::google::protobuf::int32 value);

  // optional int32 SendCardBitFlag = 9;
  bool has_sendcardbitflag() const;
  void clear_sendcardbitflag();
  static const int kSendCardBitFlagFieldNumber = 9;
  ::google::protobuf::int32 sendcardbitflag() const;
  void set_sendcardbitflag(::google::protobuf::int32 value);

  // optional int32 Status = 17;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 17;
  ::google::protobuf::int32 status() const;
  void set_status(::google::protobuf::int32 value);

  // optional int32 ReturnFlag = 19;
  bool has_returnflag() const;
  void clear_returnflag();
  static const int kReturnFlagFieldNumber = 19;
  ::google::protobuf::int32 returnflag() const;
  void set_returnflag(::google::protobuf::int32 value);

  // optional int32 RegType = 20;
  bool has_regtype() const;
  void clear_regtype();
  static const int kRegTypeFieldNumber = 20;
  ::google::protobuf::int32 regtype() const;
  void set_regtype(::google::protobuf::int32 value);

  // optional int32 ProfileFlag = 24;
  bool has_profileflag() const;
  void clear_profileflag();
  static const int kProfileFlagFieldNumber = 24;
  ::google::protobuf::int32 profileflag() const;
  void set_profileflag(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.NewRegResponse)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_uin();
  void clear_has_uin();
  void set_has_sessionkey();
  void clear_has_sessionkey();
  void set_has_officialusername();
  void clear_has_officialusername();
  void set_has_officialnickname();
  void clear_has_officialnickname();
  void set_has_qqmicroblogusername();
  void clear_has_qqmicroblogusername();
  void set_has_bindemail();
  void clear_has_bindemail();
  void set_has_pushmailstatus();
  void clear_has_pushmailstatus();
  void set_has_sendcardbitflag();
  void clear_has_sendcardbitflag();
  void set_has_pushmailsettingticket();
  void clear_has_pushmailsettingticket();
  void set_has_builtiniplist();
  void clear_has_builtiniplist();
  void set_has_fsurl();
  void clear_has_fsurl();
  void set_has_username();
  void clear_has_username();
  void set_has_status();
  void clear_has_status();
  void set_has_networkcontrol();
  void clear_has_networkcontrol();
  void set_has_returnflag();
  void clear_has_returnflag();
  void set_has_regtype();
  void clear_has_regtype();
  void set_has_authkey();
  void clear_has_authkey();
  void set_has_pluginkeylist();
  void clear_has_pluginkeylist();
  void set_has_password();
  void clear_has_password();
  void set_has_profileflag();
  void clear_has_profileflag();
  void set_has_newhostlist();
  void clear_has_newhostlist();
  void set_has_autoauthticket();
  void clear_has_autoauthticket();
  void set_has_dnsinfo();
  void clear_has_dnsinfo();
  void set_has_stepticket();
  void clear_has_stepticket();
  void set_has_verifysignature();
  void clear_has_verifysignature();
  void set_has_verifybuff();
  void clear_has_verifybuff();
  void set_has_showstyle();
  void clear_has_showstyle();
  void set_has_snsdnsinfo();
  void clear_has_snsdnsinfo();
  void set_has_appdnsinfo();
  void clear_has_appdnsinfo();
  void set_has_secauthregkeysect();
  void clear_has_secauthregkeysect();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sessionkey_;
  ::google::protobuf::internal::ArenaStringPtr officialusername_;
  ::google::protobuf::internal::ArenaStringPtr officialnickname_;
  ::google::protobuf::internal::ArenaStringPtr qqmicroblogusername_;
  ::google::protobuf::internal::ArenaStringPtr bindemail_;
  ::google::protobuf::internal::ArenaStringPtr pushmailsettingticket_;
  ::google::protobuf::internal::ArenaStringPtr fsurl_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr authkey_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr autoauthticket_;
  ::google::protobuf::internal::ArenaStringPtr stepticket_;
  ::google::protobuf::internal::ArenaStringPtr verifysignature_;
  ::FromCs::BaseResponse* base_;
  ::FromCs::iPList* builtiniplist_;
  ::FromCs::NetworkControlType* networkcontrol_;
  ::FromCs::PluginKeyListType* pluginkeylist_;
  ::FromCs::NewHostListType* newhostlist_;
  ::FromCs::DnsInfoType* dnsinfo_;
  ::FromCs::sKBuiltinBufferT* verifybuff_;
  ::FromCs::ShowStyleKey* showstyle_;
  ::FromCs::DnsInfoType* snsdnsinfo_;
  ::FromCs::DnsInfoType* appdnsinfo_;
  ::FromCs::SecAuthRegKeySect* secauthregkeysect_;
  ::google::protobuf::int32 uin_;
  ::google::protobuf::int32 pushmailstatus_;
  ::google::protobuf::int32 sendcardbitflag_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::int32 returnflag_;
  ::google::protobuf::int32 regtype_;
  ::google::protobuf::int32 profileflag_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LogoutRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.LogoutRequest) */ {
 public:
  LogoutRequest();
  virtual ~LogoutRequest();

  LogoutRequest(const LogoutRequest& from);

  inline LogoutRequest& operator=(const LogoutRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogoutRequest& default_instance();

  static inline const LogoutRequest* internal_default_instance() {
    return reinterpret_cast<const LogoutRequest*>(
               &_LogoutRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(LogoutRequest* other);

  // implements Message ----------------------------------------------

  inline LogoutRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  LogoutRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LogoutRequest& from);
  void MergeFrom(const LogoutRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LogoutRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .FromCs.BaseRequest base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseRequest& base() const;
  ::FromCs::BaseRequest* mutable_base();
  ::FromCs::BaseRequest* release_base();
  void set_allocated_base(::FromCs::BaseRequest* base);

  // required int32 Scene = 2;
  bool has_scene() const;
  void clear_scene();
  static const int kSceneFieldNumber = 2;
  ::google::protobuf::int32 scene() const;
  void set_scene(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.LogoutRequest)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_scene();
  void clear_has_scene();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::FromCs::BaseRequest* base_;
  ::google::protobuf::int32 scene_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LogoutResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.LogoutResponse) */ {
 public:
  LogoutResponse();
  virtual ~LogoutResponse();

  LogoutResponse(const LogoutResponse& from);

  inline LogoutResponse& operator=(const LogoutResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogoutResponse& default_instance();

  static inline const LogoutResponse* internal_default_instance() {
    return reinterpret_cast<const LogoutResponse*>(
               &_LogoutResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(LogoutResponse* other);

  // implements Message ----------------------------------------------

  inline LogoutResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  LogoutResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LogoutResponse& from);
  void MergeFrom(const LogoutResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LogoutResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .FromCs.BaseResponse base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseResponse& base() const;
  ::FromCs::BaseResponse* mutable_base();
  ::FromCs::BaseResponse* release_base();
  void set_allocated_base(::FromCs::BaseResponse* base);

  // @@protoc_insertion_point(class_scope:FromCs.LogoutResponse)
 private:
  void set_has_base();
  void clear_has_base();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::FromCs::BaseResponse* base_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VerifyUserRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.VerifyUserRequest) */ {
 public:
  VerifyUserRequest();
  virtual ~VerifyUserRequest();

  VerifyUserRequest(const VerifyUserRequest& from);

  inline VerifyUserRequest& operator=(const VerifyUserRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VerifyUserRequest& default_instance();

  static inline const VerifyUserRequest* internal_default_instance() {
    return reinterpret_cast<const VerifyUserRequest*>(
               &_VerifyUserRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(VerifyUserRequest* other);

  // implements Message ----------------------------------------------

  inline VerifyUserRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  VerifyUserRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VerifyUserRequest& from);
  void MergeFrom(const VerifyUserRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VerifyUserRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .FromCs.VerifyUserObj VerifyUserList = 4;
  int verifyuserlist_size() const;
  void clear_verifyuserlist();
  static const int kVerifyUserListFieldNumber = 4;
  const ::FromCs::VerifyUserObj& verifyuserlist(int index) const;
  ::FromCs::VerifyUserObj* mutable_verifyuserlist(int index);
  ::FromCs::VerifyUserObj* add_verifyuserlist();
  ::google::protobuf::RepeatedPtrField< ::FromCs::VerifyUserObj >*
      mutable_verifyuserlist();
  const ::google::protobuf::RepeatedPtrField< ::FromCs::VerifyUserObj >&
      verifyuserlist() const;

  // repeated string SceneList = 7;
  int scenelist_size() const;
  void clear_scenelist();
  static const int kSceneListFieldNumber = 7;
  const ::std::string& scenelist(int index) const;
  ::std::string* mutable_scenelist(int index);
  void set_scenelist(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_scenelist(int index, ::std::string&& value);
  #endif
  void set_scenelist(int index, const char* value);
  void set_scenelist(int index, const char* value, size_t size);
  ::std::string* add_scenelist();
  void add_scenelist(const ::std::string& value);
  #if LANG_CXX11
  void add_scenelist(::std::string&& value);
  #endif
  void add_scenelist(const char* value);
  void add_scenelist(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& scenelist() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_scenelist();

  // optional string VerifyContent = 5;
  bool has_verifycontent() const;
  void clear_verifycontent();
  static const int kVerifyContentFieldNumber = 5;
  const ::std::string& verifycontent() const;
  void set_verifycontent(const ::std::string& value);
  #if LANG_CXX11
  void set_verifycontent(::std::string&& value);
  #endif
  void set_verifycontent(const char* value);
  void set_verifycontent(const char* value, size_t size);
  ::std::string* mutable_verifycontent();
  ::std::string* release_verifycontent();
  void set_allocated_verifycontent(::std::string* verifycontent);

  // required .FromCs.BaseRequest base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseRequest& base() const;
  ::FromCs::BaseRequest* mutable_base();
  ::FromCs::BaseRequest* release_base();
  void set_allocated_base(::FromCs::BaseRequest* base);

  // required int32 Opcode = 2;
  bool has_opcode() const;
  void clear_opcode();
  static const int kOpcodeFieldNumber = 2;
  ::google::protobuf::int32 opcode() const;
  void set_opcode(::google::protobuf::int32 value);

  // required int32 VerifyUserListSize = 3;
  bool has_verifyuserlistsize() const;
  void clear_verifyuserlistsize();
  static const int kVerifyUserListSizeFieldNumber = 3;
  ::google::protobuf::int32 verifyuserlistsize() const;
  void set_verifyuserlistsize(::google::protobuf::int32 value);

  // optional int32 SceneListNumb = 6;
  bool has_scenelistnumb() const;
  void clear_scenelistnumb();
  static const int kSceneListNumbFieldNumber = 6;
  ::google::protobuf::int32 scenelistnumb() const;
  void set_scenelistnumb(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.VerifyUserRequest)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_opcode();
  void clear_has_opcode();
  void set_has_verifyuserlistsize();
  void clear_has_verifyuserlistsize();
  void set_has_verifycontent();
  void clear_has_verifycontent();
  void set_has_scenelistnumb();
  void clear_has_scenelistnumb();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::FromCs::VerifyUserObj > verifyuserlist_;
  ::google::protobuf::RepeatedPtrField< ::std::string> scenelist_;
  ::google::protobuf::internal::ArenaStringPtr verifycontent_;
  ::FromCs::BaseRequest* base_;
  ::google::protobuf::int32 opcode_;
  ::google::protobuf::int32 verifyuserlistsize_;
  ::google::protobuf::int32 scenelistnumb_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VerifyUserResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.VerifyUserResponse) */ {
 public:
  VerifyUserResponse();
  virtual ~VerifyUserResponse();

  VerifyUserResponse(const VerifyUserResponse& from);

  inline VerifyUserResponse& operator=(const VerifyUserResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VerifyUserResponse& default_instance();

  static inline const VerifyUserResponse* internal_default_instance() {
    return reinterpret_cast<const VerifyUserResponse*>(
               &_VerifyUserResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(VerifyUserResponse* other);

  // implements Message ----------------------------------------------

  inline VerifyUserResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  VerifyUserResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VerifyUserResponse& from);
  void MergeFrom(const VerifyUserResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VerifyUserResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string UserName = 2;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 2;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // required .FromCs.BaseResponse base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseResponse& base() const;
  ::FromCs::BaseResponse* mutable_base();
  ::FromCs::BaseResponse* release_base();
  void set_allocated_base(::FromCs::BaseResponse* base);

  // @@protoc_insertion_point(class_scope:FromCs.VerifyUserResponse)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_username();
  void clear_has_username();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::FromCs::BaseResponse* base_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetContactRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.GetContactRequest) */ {
 public:
  GetContactRequest();
  virtual ~GetContactRequest();

  GetContactRequest(const GetContactRequest& from);

  inline GetContactRequest& operator=(const GetContactRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetContactRequest& default_instance();

  static inline const GetContactRequest* internal_default_instance() {
    return reinterpret_cast<const GetContactRequest*>(
               &_GetContactRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(GetContactRequest* other);

  // implements Message ----------------------------------------------

  inline GetContactRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetContactRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetContactRequest& from);
  void MergeFrom(const GetContactRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetContactRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .FromCs.sKBuiltinstringT UserNameList = 3;
  int usernamelist_size() const;
  void clear_usernamelist();
  static const int kUserNameListFieldNumber = 3;
  const ::FromCs::sKBuiltinstringT& usernamelist(int index) const;
  ::FromCs::sKBuiltinstringT* mutable_usernamelist(int index);
  ::FromCs::sKBuiltinstringT* add_usernamelist();
  ::google::protobuf::RepeatedPtrField< ::FromCs::sKBuiltinstringT >*
      mutable_usernamelist();
  const ::google::protobuf::RepeatedPtrField< ::FromCs::sKBuiltinstringT >&
      usernamelist() const;

  // required .FromCs.BaseRequest base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseRequest& base() const;
  ::FromCs::BaseRequest* mutable_base();
  ::FromCs::BaseRequest* release_base();
  void set_allocated_base(::FromCs::BaseRequest* base);

  // required int32 UserCount = 2;
  bool has_usercount() const;
  void clear_usercount();
  static const int kUserCountFieldNumber = 2;
  ::google::protobuf::int32 usercount() const;
  void set_usercount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.GetContactRequest)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_usercount();
  void clear_has_usercount();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::FromCs::sKBuiltinstringT > usernamelist_;
  ::FromCs::BaseRequest* base_;
  ::google::protobuf::int32 usercount_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetContactResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.GetContactResponse) */ {
 public:
  GetContactResponse();
  virtual ~GetContactResponse();

  GetContactResponse(const GetContactResponse& from);

  inline GetContactResponse& operator=(const GetContactResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetContactResponse& default_instance();

  static inline const GetContactResponse* internal_default_instance() {
    return reinterpret_cast<const GetContactResponse*>(
               &_GetContactResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(GetContactResponse* other);

  // implements Message ----------------------------------------------

  inline GetContactResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetContactResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetContactResponse& from);
  void MergeFrom(const GetContactResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetContactResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .FromCs.ContactProfile ContactList = 3;
  int contactlist_size() const;
  void clear_contactlist();
  static const int kContactListFieldNumber = 3;
  const ::FromCs::ContactProfile& contactlist(int index) const;
  ::FromCs::ContactProfile* mutable_contactlist(int index);
  ::FromCs::ContactProfile* add_contactlist();
  ::google::protobuf::RepeatedPtrField< ::FromCs::ContactProfile >*
      mutable_contactlist();
  const ::google::protobuf::RepeatedPtrField< ::FromCs::ContactProfile >&
      contactlist() const;

  // repeated string Ret = 4;
  int ret_size() const;
  void clear_ret();
  static const int kRetFieldNumber = 4;
  const ::std::string& ret(int index) const;
  ::std::string* mutable_ret(int index);
  void set_ret(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_ret(int index, ::std::string&& value);
  #endif
  void set_ret(int index, const char* value);
  void set_ret(int index, const char* value, size_t size);
  ::std::string* add_ret();
  void add_ret(const ::std::string& value);
  #if LANG_CXX11
  void add_ret(::std::string&& value);
  #endif
  void add_ret(const char* value);
  void add_ret(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& ret() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_ret();

  // required .FromCs.BaseResponse base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseResponse& base() const;
  ::FromCs::BaseResponse* mutable_base();
  ::FromCs::BaseResponse* release_base();
  void set_allocated_base(::FromCs::BaseResponse* base);

  // required int32 ContactCount = 2;
  bool has_contactcount() const;
  void clear_contactcount();
  static const int kContactCountFieldNumber = 2;
  ::google::protobuf::int32 contactcount() const;
  void set_contactcount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.GetContactResponse)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_contactcount();
  void clear_has_contactcount();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::FromCs::ContactProfile > contactlist_;
  ::google::protobuf::RepeatedPtrField< ::std::string> ret_;
  ::FromCs::BaseResponse* base_;
  ::google::protobuf::int32 contactcount_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetPackageListRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.GetPackageListRequest) */ {
 public:
  GetPackageListRequest();
  virtual ~GetPackageListRequest();

  GetPackageListRequest(const GetPackageListRequest& from);

  inline GetPackageListRequest& operator=(const GetPackageListRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPackageListRequest& default_instance();

  static inline const GetPackageListRequest* internal_default_instance() {
    return reinterpret_cast<const GetPackageListRequest*>(
               &_GetPackageListRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(GetPackageListRequest* other);

  // implements Message ----------------------------------------------

  inline GetPackageListRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetPackageListRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetPackageListRequest& from);
  void MergeFrom(const GetPackageListRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetPackageListRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .FromCs.PackegeInfo List = 3;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 3;
  const ::FromCs::PackegeInfo& list(int index) const;
  ::FromCs::PackegeInfo* mutable_list(int index);
  ::FromCs::PackegeInfo* add_list();
  ::google::protobuf::RepeatedPtrField< ::FromCs::PackegeInfo >*
      mutable_list();
  const ::google::protobuf::RepeatedPtrField< ::FromCs::PackegeInfo >&
      list() const;

  // required .FromCs.BaseRequest base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseRequest& base() const;
  ::FromCs::BaseRequest* mutable_base();
  ::FromCs::BaseRequest* release_base();
  void set_allocated_base(::FromCs::BaseRequest* base);

  // required int32 Count = 2;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // optional int32 Type = 4;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.GetPackageListRequest)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_count();
  void clear_has_count();
  void set_has_type();
  void clear_has_type();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::FromCs::PackegeInfo > list_;
  ::FromCs::BaseRequest* base_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::int32 type_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetPackageListResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.GetPackageListResponse) */ {
 public:
  GetPackageListResponse();
  virtual ~GetPackageListResponse();

  GetPackageListResponse(const GetPackageListResponse& from);

  inline GetPackageListResponse& operator=(const GetPackageListResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPackageListResponse& default_instance();

  static inline const GetPackageListResponse* internal_default_instance() {
    return reinterpret_cast<const GetPackageListResponse*>(
               &_GetPackageListResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void Swap(GetPackageListResponse* other);

  // implements Message ----------------------------------------------

  inline GetPackageListResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetPackageListResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetPackageListResponse& from);
  void MergeFrom(const GetPackageListResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetPackageListResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .FromCs.PackegeInfo List = 3;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 3;
  const ::FromCs::PackegeInfo& list(int index) const;
  ::FromCs::PackegeInfo* mutable_list(int index);
  ::FromCs::PackegeInfo* add_list();
  ::google::protobuf::RepeatedPtrField< ::FromCs::PackegeInfo >*
      mutable_list();
  const ::google::protobuf::RepeatedPtrField< ::FromCs::PackegeInfo >&
      list() const;

  // required .FromCs.BaseResponse base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseResponse& base() const;
  ::FromCs::BaseResponse* mutable_base();
  ::FromCs::BaseResponse* release_base();
  void set_allocated_base(::FromCs::BaseResponse* base);

  // required int32 Count = 2;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // required int32 ContinueFlag = 4;
  bool has_continueflag() const;
  void clear_continueflag();
  static const int kContinueFlagFieldNumber = 4;
  ::google::protobuf::int32 continueflag() const;
  void set_continueflag(::google::protobuf::int32 value);

  // required int32 SvrCount = 5;
  bool has_svrcount() const;
  void clear_svrcount();
  static const int kSvrCountFieldNumber = 5;
  ::google::protobuf::int32 svrcount() const;
  void set_svrcount(::google::protobuf::int32 value);

  // optional int32 Type = 6;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 6;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.GetPackageListResponse)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_count();
  void clear_has_count();
  void set_has_continueflag();
  void clear_has_continueflag();
  void set_has_svrcount();
  void clear_has_svrcount();
  void set_has_type();
  void clear_has_type();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::FromCs::PackegeInfo > list_;
  ::FromCs::BaseResponse* base_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::int32 continueflag_;
  ::google::protobuf::int32 svrcount_;
  ::google::protobuf::int32 type_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetHDHeadImgRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.GetHDHeadImgRequest) */ {
 public:
  GetHDHeadImgRequest();
  virtual ~GetHDHeadImgRequest();

  GetHDHeadImgRequest(const GetHDHeadImgRequest& from);

  inline GetHDHeadImgRequest& operator=(const GetHDHeadImgRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetHDHeadImgRequest& default_instance();

  static inline const GetHDHeadImgRequest* internal_default_instance() {
    return reinterpret_cast<const GetHDHeadImgRequest*>(
               &_GetHDHeadImgRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    28;

  void Swap(GetHDHeadImgRequest* other);

  // implements Message ----------------------------------------------

  inline GetHDHeadImgRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetHDHeadImgRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetHDHeadImgRequest& from);
  void MergeFrom(const GetHDHeadImgRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetHDHeadImgRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string UserName = 2;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 2;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // optional string ImgFormat = 5;
  bool has_imgformat() const;
  void clear_imgformat();
  static const int kImgFormatFieldNumber = 5;
  const ::std::string& imgformat() const;
  void set_imgformat(const ::std::string& value);
  #if LANG_CXX11
  void set_imgformat(::std::string&& value);
  #endif
  void set_imgformat(const char* value);
  void set_imgformat(const char* value, size_t size);
  ::std::string* mutable_imgformat();
  ::std::string* release_imgformat();
  void set_allocated_imgformat(::std::string* imgformat);

  // required .FromCs.BaseRequest base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseRequest& base() const;
  ::FromCs::BaseRequest* mutable_base();
  ::FromCs::BaseRequest* release_base();
  void set_allocated_base(::FromCs::BaseRequest* base);

  // required int32 ImgWidth = 3;
  bool has_imgwidth() const;
  void clear_imgwidth();
  static const int kImgWidthFieldNumber = 3;
  ::google::protobuf::int32 imgwidth() const;
  void set_imgwidth(::google::protobuf::int32 value);

  // required int32 ImgHeight = 4;
  bool has_imgheight() const;
  void clear_imgheight();
  static const int kImgHeightFieldNumber = 4;
  ::google::protobuf::int32 imgheight() const;
  void set_imgheight(::google::protobuf::int32 value);

  // required int32 TotalLen = 6;
  bool has_totallen() const;
  void clear_totallen();
  static const int kTotalLenFieldNumber = 6;
  ::google::protobuf::int32 totallen() const;
  void set_totallen(::google::protobuf::int32 value);

  // required int32 StartPos = 7;
  bool has_startpos() const;
  void clear_startpos();
  static const int kStartPosFieldNumber = 7;
  ::google::protobuf::int32 startpos() const;
  void set_startpos(::google::protobuf::int32 value);

  // required int32 HeadImgType = 8;
  bool has_headimgtype() const;
  void clear_headimgtype();
  static const int kHeadImgTypeFieldNumber = 8;
  ::google::protobuf::int32 headimgtype() const;
  void set_headimgtype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.GetHDHeadImgRequest)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_username();
  void clear_has_username();
  void set_has_imgwidth();
  void clear_has_imgwidth();
  void set_has_imgheight();
  void clear_has_imgheight();
  void set_has_imgformat();
  void clear_has_imgformat();
  void set_has_totallen();
  void clear_has_totallen();
  void set_has_startpos();
  void clear_has_startpos();
  void set_has_headimgtype();
  void clear_has_headimgtype();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr imgformat_;
  ::FromCs::BaseRequest* base_;
  ::google::protobuf::int32 imgwidth_;
  ::google::protobuf::int32 imgheight_;
  ::google::protobuf::int32 totallen_;
  ::google::protobuf::int32 startpos_;
  ::google::protobuf::int32 headimgtype_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetHDHeadImgResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.GetHDHeadImgResponse) */ {
 public:
  GetHDHeadImgResponse();
  virtual ~GetHDHeadImgResponse();

  GetHDHeadImgResponse(const GetHDHeadImgResponse& from);

  inline GetHDHeadImgResponse& operator=(const GetHDHeadImgResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetHDHeadImgResponse& default_instance();

  static inline const GetHDHeadImgResponse* internal_default_instance() {
    return reinterpret_cast<const GetHDHeadImgResponse*>(
               &_GetHDHeadImgResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    29;

  void Swap(GetHDHeadImgResponse* other);

  // implements Message ----------------------------------------------

  inline GetHDHeadImgResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetHDHeadImgResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetHDHeadImgResponse& from);
  void MergeFrom(const GetHDHeadImgResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetHDHeadImgResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string UserName = 2;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 2;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // required .FromCs.BaseResponse base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseResponse& base() const;
  ::FromCs::BaseResponse* mutable_base();
  ::FromCs::BaseResponse* release_base();
  void set_allocated_base(::FromCs::BaseResponse* base);

  // required .FromCs.sKBuiltinBufferT Data = 5;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 5;
  const ::FromCs::sKBuiltinBufferT& data() const;
  ::FromCs::sKBuiltinBufferT* mutable_data();
  ::FromCs::sKBuiltinBufferT* release_data();
  void set_allocated_data(::FromCs::sKBuiltinBufferT* data);

  // required int32 TotalLen = 3;
  bool has_totallen() const;
  void clear_totallen();
  static const int kTotalLenFieldNumber = 3;
  ::google::protobuf::int32 totallen() const;
  void set_totallen(::google::protobuf::int32 value);

  // required int32 StartPos = 4;
  bool has_startpos() const;
  void clear_startpos();
  static const int kStartPosFieldNumber = 4;
  ::google::protobuf::int32 startpos() const;
  void set_startpos(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.GetHDHeadImgResponse)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_username();
  void clear_has_username();
  void set_has_totallen();
  void clear_has_totallen();
  void set_has_startpos();
  void clear_has_startpos();
  void set_has_data();
  void clear_has_data();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::FromCs::BaseResponse* base_;
  ::FromCs::sKBuiltinBufferT* data_;
  ::google::protobuf::int32 totallen_;
  ::google::protobuf::int32 startpos_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetVUserInfoRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.GetVUserInfoRequest) */ {
 public:
  GetVUserInfoRequest();
  virtual ~GetVUserInfoRequest();

  GetVUserInfoRequest(const GetVUserInfoRequest& from);

  inline GetVUserInfoRequest& operator=(const GetVUserInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetVUserInfoRequest& default_instance();

  static inline const GetVUserInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetVUserInfoRequest*>(
               &_GetVUserInfoRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    30;

  void Swap(GetVUserInfoRequest* other);

  // implements Message ----------------------------------------------

  inline GetVUserInfoRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetVUserInfoRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetVUserInfoRequest& from);
  void MergeFrom(const GetVUserInfoRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetVUserInfoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .FromCs.BaseRequest base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseRequest& base() const;
  ::FromCs::BaseRequest* mutable_base();
  ::FromCs::BaseRequest* release_base();
  void set_allocated_base(::FromCs::BaseRequest* base);

  // required int32 Version = 2;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  ::google::protobuf::int32 version() const;
  void set_version(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.GetVUserInfoRequest)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_version();
  void clear_has_version();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::FromCs::BaseRequest* base_;
  ::google::protobuf::int32 version_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetVUserInfoResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.GetVUserInfoResponse) */ {
 public:
  GetVUserInfoResponse();
  virtual ~GetVUserInfoResponse();

  GetVUserInfoResponse(const GetVUserInfoResponse& from);

  inline GetVUserInfoResponse& operator=(const GetVUserInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetVUserInfoResponse& default_instance();

  static inline const GetVUserInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetVUserInfoResponse*>(
               &_GetVUserInfoResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    31;

  void Swap(GetVUserInfoResponse* other);

  // implements Message ----------------------------------------------

  inline GetVUserInfoResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetVUserInfoResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetVUserInfoResponse& from);
  void MergeFrom(const GetVUserInfoResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetVUserInfoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .FromCs.VUserInfo VUserList = 4;
  int vuserlist_size() const;
  void clear_vuserlist();
  static const int kVUserListFieldNumber = 4;
  const ::FromCs::VUserInfo& vuserlist(int index) const;
  ::FromCs::VUserInfo* mutable_vuserlist(int index);
  ::FromCs::VUserInfo* add_vuserlist();
  ::google::protobuf::RepeatedPtrField< ::FromCs::VUserInfo >*
      mutable_vuserlist();
  const ::google::protobuf::RepeatedPtrField< ::FromCs::VUserInfo >&
      vuserlist() const;

  // required .FromCs.BaseResponse base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseResponse& base() const;
  ::FromCs::BaseResponse* mutable_base();
  ::FromCs::BaseResponse* release_base();
  void set_allocated_base(::FromCs::BaseResponse* base);

  // required int32 Version = 2;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  ::google::protobuf::int32 version() const;
  void set_version(::google::protobuf::int32 value);

  // required int32 VUserCount = 3;
  bool has_vusercount() const;
  void clear_vusercount();
  static const int kVUserCountFieldNumber = 3;
  ::google::protobuf::int32 vusercount() const;
  void set_vusercount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.GetVUserInfoResponse)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_version();
  void clear_has_version();
  void set_has_vusercount();
  void clear_has_vusercount();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::FromCs::VUserInfo > vuserlist_;
  ::FromCs::BaseResponse* base_;
  ::google::protobuf::int32 version_;
  ::google::protobuf::int32 vusercount_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClickCommandRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.ClickCommandRequest) */ {
 public:
  ClickCommandRequest();
  virtual ~ClickCommandRequest();

  ClickCommandRequest(const ClickCommandRequest& from);

  inline ClickCommandRequest& operator=(const ClickCommandRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClickCommandRequest& default_instance();

  static inline const ClickCommandRequest* internal_default_instance() {
    return reinterpret_cast<const ClickCommandRequest*>(
               &_ClickCommandRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    32;

  void Swap(ClickCommandRequest* other);

  // implements Message ----------------------------------------------

  inline ClickCommandRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ClickCommandRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ClickCommandRequest& from);
  void MergeFrom(const ClickCommandRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ClickCommandRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ClickInfo = 3;
  bool has_clickinfo() const;
  void clear_clickinfo();
  static const int kClickInfoFieldNumber = 3;
  const ::std::string& clickinfo() const;
  void set_clickinfo(const ::std::string& value);
  #if LANG_CXX11
  void set_clickinfo(::std::string&& value);
  #endif
  void set_clickinfo(const char* value);
  void set_clickinfo(const char* value, size_t size);
  ::std::string* mutable_clickinfo();
  ::std::string* release_clickinfo();
  void set_allocated_clickinfo(::std::string* clickinfo);

  // optional string BizUserName = 4;
  bool has_bizusername() const;
  void clear_bizusername();
  static const int kBizUserNameFieldNumber = 4;
  const ::std::string& bizusername() const;
  void set_bizusername(const ::std::string& value);
  #if LANG_CXX11
  void set_bizusername(::std::string&& value);
  #endif
  void set_bizusername(const char* value);
  void set_bizusername(const char* value, size_t size);
  ::std::string* mutable_bizusername();
  ::std::string* release_bizusername();
  void set_allocated_bizusername(::std::string* bizusername);

  // required .FromCs.BaseRequest base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseRequest& base() const;
  ::FromCs::BaseRequest* mutable_base();
  ::FromCs::BaseRequest* release_base();
  void set_allocated_base(::FromCs::BaseRequest* base);

  // required int32 ClickType = 2;
  bool has_clicktype() const;
  void clear_clicktype();
  static const int kClickTypeFieldNumber = 2;
  ::google::protobuf::int32 clicktype() const;
  void set_clicktype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.ClickCommandRequest)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_clicktype();
  void clear_has_clicktype();
  void set_has_clickinfo();
  void clear_has_clickinfo();
  void set_has_bizusername();
  void clear_has_bizusername();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr clickinfo_;
  ::google::protobuf::internal::ArenaStringPtr bizusername_;
  ::FromCs::BaseRequest* base_;
  ::google::protobuf::int32 clicktype_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClickCommandResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.ClickCommandResponse) */ {
 public:
  ClickCommandResponse();
  virtual ~ClickCommandResponse();

  ClickCommandResponse(const ClickCommandResponse& from);

  inline ClickCommandResponse& operator=(const ClickCommandResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClickCommandResponse& default_instance();

  static inline const ClickCommandResponse* internal_default_instance() {
    return reinterpret_cast<const ClickCommandResponse*>(
               &_ClickCommandResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    33;

  void Swap(ClickCommandResponse* other);

  // implements Message ----------------------------------------------

  inline ClickCommandResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ClickCommandResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ClickCommandResponse& from);
  void MergeFrom(const ClickCommandResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ClickCommandResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .FromCs.BaseResponse base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseResponse& base() const;
  ::FromCs::BaseResponse* mutable_base();
  ::FromCs::BaseResponse* release_base();
  void set_allocated_base(::FromCs::BaseResponse* base);

  // @@protoc_insertion_point(class_scope:FromCs.ClickCommandResponse)
 private:
  void set_has_base();
  void clear_has_base();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::FromCs::BaseResponse* base_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BindopMobileForRegRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.BindopMobileForRegRequest) */ {
 public:
  BindopMobileForRegRequest();
  virtual ~BindopMobileForRegRequest();

  BindopMobileForRegRequest(const BindopMobileForRegRequest& from);

  inline BindopMobileForRegRequest& operator=(const BindopMobileForRegRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BindopMobileForRegRequest& default_instance();

  static inline const BindopMobileForRegRequest* internal_default_instance() {
    return reinterpret_cast<const BindopMobileForRegRequest*>(
               &_BindopMobileForRegRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    34;

  void Swap(BindopMobileForRegRequest* other);

  // implements Message ----------------------------------------------

  inline BindopMobileForRegRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  BindopMobileForRegRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BindopMobileForRegRequest& from);
  void MergeFrom(const BindopMobileForRegRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BindopMobileForRegRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string UserName = 2;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 2;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // optional string Mobile = 3;
  bool has_mobile() const;
  void clear_mobile();
  static const int kMobileFieldNumber = 3;
  const ::std::string& mobile() const;
  void set_mobile(const ::std::string& value);
  #if LANG_CXX11
  void set_mobile(::std::string&& value);
  #endif
  void set_mobile(const char* value);
  void set_mobile(const char* value, size_t size);
  ::std::string* mutable_mobile();
  ::std::string* release_mobile();
  void set_allocated_mobile(::std::string* mobile);

  // optional string Verifycode = 5;
  bool has_verifycode() const;
  void clear_verifycode();
  static const int kVerifycodeFieldNumber = 5;
  const ::std::string& verifycode() const;
  void set_verifycode(const ::std::string& value);
  #if LANG_CXX11
  void set_verifycode(::std::string&& value);
  #endif
  void set_verifycode(const char* value);
  void set_verifycode(const char* value, size_t size);
  ::std::string* mutable_verifycode();
  ::std::string* release_verifycode();
  void set_allocated_verifycode(::std::string* verifycode);

  // optional string DialLang = 7;
  bool has_diallang() const;
  void clear_diallang();
  static const int kDialLangFieldNumber = 7;
  const ::std::string& diallang() const;
  void set_diallang(const ::std::string& value);
  #if LANG_CXX11
  void set_diallang(::std::string&& value);
  #endif
  void set_diallang(const char* value);
  void set_diallang(const char* value, size_t size);
  ::std::string* mutable_diallang();
  ::std::string* release_diallang();
  void set_allocated_diallang(::std::string* diallang);

  // optional string AuthTicket = 8;
  bool has_authticket() const;
  void clear_authticket();
  static const int kAuthTicketFieldNumber = 8;
  const ::std::string& authticket() const;
  void set_authticket(const ::std::string& value);
  #if LANG_CXX11
  void set_authticket(::std::string&& value);
  #endif
  void set_authticket(const char* value);
  void set_authticket(const char* value, size_t size);
  ::std::string* mutable_authticket();
  ::std::string* release_authticket();
  void set_allocated_authticket(::std::string* authticket);

  // optional string SafeDeviceName = 10;
  bool has_safedevicename() const;
  void clear_safedevicename();
  static const int kSafeDeviceNameFieldNumber = 10;
  const ::std::string& safedevicename() const;
  void set_safedevicename(const ::std::string& value);
  #if LANG_CXX11
  void set_safedevicename(::std::string&& value);
  #endif
  void set_safedevicename(const char* value);
  void set_safedevicename(const char* value, size_t size);
  ::std::string* mutable_safedevicename();
  ::std::string* release_safedevicename();
  void set_allocated_safedevicename(::std::string* safedevicename);

  // optional string SafeDeviceType = 11;
  bool has_safedevicetype() const;
  void clear_safedevicetype();
  static const int kSafeDeviceTypeFieldNumber = 11;
  const ::std::string& safedevicetype() const;
  void set_safedevicetype(const ::std::string& value);
  #if LANG_CXX11
  void set_safedevicetype(::std::string&& value);
  #endif
  void set_safedevicetype(const char* value);
  void set_safedevicetype(const char* value, size_t size);
  ::std::string* mutable_safedevicetype();
  ::std::string* release_safedevicetype();
  void set_allocated_safedevicetype(::std::string* safedevicetype);

  // optional string Language = 13;
  bool has_language() const;
  void clear_language();
  static const int kLanguageFieldNumber = 13;
  const ::std::string& language() const;
  void set_language(const ::std::string& value);
  #if LANG_CXX11
  void set_language(::std::string&& value);
  #endif
  void set_language(const char* value);
  void set_language(const char* value, size_t size);
  ::std::string* mutable_language();
  ::std::string* release_language();
  void set_allocated_language(::std::string* language);

  // optional string clientSeqId = 16;
  bool has_clientseqid() const;
  void clear_clientseqid();
  static const int kClientSeqIdFieldNumber = 16;
  const ::std::string& clientseqid() const;
  void set_clientseqid(const ::std::string& value);
  #if LANG_CXX11
  void set_clientseqid(::std::string&& value);
  #endif
  void set_clientseqid(const char* value);
  void set_clientseqid(const char* value, size_t size);
  ::std::string* mutable_clientseqid();
  ::std::string* release_clientseqid();
  void set_allocated_clientseqid(::std::string* clientseqid);

  // required .FromCs.BaseRequest base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseRequest& base() const;
  ::FromCs::BaseRequest* mutable_base();
  ::FromCs::BaseRequest* release_base();
  void set_allocated_base(::FromCs::BaseRequest* base);

  // optional .FromCs.sKBuiltinBufferT RandomEncryKey = 12;
  bool has_randomencrykey() const;
  void clear_randomencrykey();
  static const int kRandomEncryKeyFieldNumber = 12;
  const ::FromCs::sKBuiltinBufferT& randomencrykey() const;
  ::FromCs::sKBuiltinBufferT* mutable_randomencrykey();
  ::FromCs::sKBuiltinBufferT* release_randomencrykey();
  void set_allocated_randomencrykey(::FromCs::sKBuiltinBufferT* randomencrykey);

  // required int32 Opcode = 4;
  bool has_opcode() const;
  void clear_opcode();
  static const int kOpcodeFieldNumber = 4;
  ::google::protobuf::int32 opcode() const;
  void set_opcode(::google::protobuf::int32 value);

  // optional int32 DialFlag = 6;
  bool has_dialflag() const;
  void clear_dialflag();
  static const int kDialFlagFieldNumber = 6;
  ::google::protobuf::int32 dialflag() const;
  void set_dialflag(::google::protobuf::int32 value);

  // optional int32 ForceReg = 9;
  bool has_forcereg() const;
  void clear_forcereg();
  static const int kForceRegFieldNumber = 9;
  ::google::protobuf::int32 forcereg() const;
  void set_forcereg(::google::protobuf::int32 value);

  // optional int32 int14 = 14;
  bool has_int14() const;
  void clear_int14();
  static const int kInt14FieldNumber = 14;
  ::google::protobuf::int32 int14() const;
  void set_int14(::google::protobuf::int32 value);

  // optional int32 int15 = 15;
  bool has_int15() const;
  void clear_int15();
  static const int kInt15FieldNumber = 15;
  ::google::protobuf::int32 int15() const;
  void set_int15(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.BindopMobileForRegRequest)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_username();
  void clear_has_username();
  void set_has_mobile();
  void clear_has_mobile();
  void set_has_opcode();
  void clear_has_opcode();
  void set_has_verifycode();
  void clear_has_verifycode();
  void set_has_dialflag();
  void clear_has_dialflag();
  void set_has_diallang();
  void clear_has_diallang();
  void set_has_authticket();
  void clear_has_authticket();
  void set_has_forcereg();
  void clear_has_forcereg();
  void set_has_safedevicename();
  void clear_has_safedevicename();
  void set_has_safedevicetype();
  void clear_has_safedevicetype();
  void set_has_randomencrykey();
  void clear_has_randomencrykey();
  void set_has_language();
  void clear_has_language();
  void set_has_int14();
  void clear_has_int14();
  void set_has_int15();
  void clear_has_int15();
  void set_has_clientseqid();
  void clear_has_clientseqid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr mobile_;
  ::google::protobuf::internal::ArenaStringPtr verifycode_;
  ::google::protobuf::internal::ArenaStringPtr diallang_;
  ::google::protobuf::internal::ArenaStringPtr authticket_;
  ::google::protobuf::internal::ArenaStringPtr safedevicename_;
  ::google::protobuf::internal::ArenaStringPtr safedevicetype_;
  ::google::protobuf::internal::ArenaStringPtr language_;
  ::google::protobuf::internal::ArenaStringPtr clientseqid_;
  ::FromCs::BaseRequest* base_;
  ::FromCs::sKBuiltinBufferT* randomencrykey_;
  ::google::protobuf::int32 opcode_;
  ::google::protobuf::int32 dialflag_;
  ::google::protobuf::int32 forcereg_;
  ::google::protobuf::int32 int14_;
  ::google::protobuf::int32 int15_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BindopMobileForRegResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.BindopMobileForRegResponse) */ {
 public:
  BindopMobileForRegResponse();
  virtual ~BindopMobileForRegResponse();

  BindopMobileForRegResponse(const BindopMobileForRegResponse& from);

  inline BindopMobileForRegResponse& operator=(const BindopMobileForRegResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BindopMobileForRegResponse& default_instance();

  static inline const BindopMobileForRegResponse* internal_default_instance() {
    return reinterpret_cast<const BindopMobileForRegResponse*>(
               &_BindopMobileForRegResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    35;

  void Swap(BindopMobileForRegResponse* other);

  // implements Message ----------------------------------------------

  inline BindopMobileForRegResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  BindopMobileForRegResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BindopMobileForRegResponse& from);
  void MergeFrom(const BindopMobileForRegResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BindopMobileForRegResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ticket = 2;
  bool has_ticket() const;
  void clear_ticket();
  static const int kTicketFieldNumber = 2;
  const ::std::string& ticket() const;
  void set_ticket(const ::std::string& value);
  #if LANG_CXX11
  void set_ticket(::std::string&& value);
  #endif
  void set_ticket(const char* value);
  void set_ticket(const char* value, size_t size);
  ::std::string* mutable_ticket();
  ::std::string* release_ticket();
  void set_allocated_ticket(::std::string* ticket);

  // optional string SmsNo = 3;
  bool has_smsno() const;
  void clear_smsno();
  static const int kSmsNoFieldNumber = 3;
  const ::std::string& smsno() const;
  void set_smsno(const ::std::string& value);
  #if LANG_CXX11
  void set_smsno(::std::string&& value);
  #endif
  void set_smsno(const char* value);
  void set_smsno(const char* value, size_t size);
  ::std::string* mutable_smsno();
  ::std::string* release_smsno();
  void set_allocated_smsno(::std::string* smsno);

  // optional string Pwd = 5;
  bool has_pwd() const;
  void clear_pwd();
  static const int kPwdFieldNumber = 5;
  const ::std::string& pwd() const;
  void set_pwd(const ::std::string& value);
  #if LANG_CXX11
  void set_pwd(::std::string&& value);
  #endif
  void set_pwd(const char* value);
  void set_pwd(const char* value, size_t size);
  ::std::string* mutable_pwd();
  ::std::string* release_pwd();
  void set_allocated_pwd(::std::string* pwd);

  // optional string Username = 6;
  bool has_username() const;
  void clear_username();
  static const int kUsernameFieldNumber = 6;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // optional string AuthTicket = 10;
  bool has_authticket() const;
  void clear_authticket();
  static const int kAuthTicketFieldNumber = 10;
  const ::std::string& authticket() const;
  void set_authticket(const ::std::string& value);
  #if LANG_CXX11
  void set_authticket(::std::string&& value);
  #endif
  void set_authticket(const char* value);
  void set_authticket(const char* value, size_t size);
  ::std::string* mutable_authticket();
  ::std::string* release_authticket();
  void set_allocated_authticket(::std::string* authticket);

  // optional string MainAcct = 12;
  bool has_mainacct() const;
  void clear_mainacct();
  static const int kMainAcctFieldNumber = 12;
  const ::std::string& mainacct() const;
  void set_mainacct(const ::std::string& value);
  #if LANG_CXX11
  void set_mainacct(::std::string&& value);
  #endif
  void set_mainacct(const char* value);
  void set_mainacct(const char* value, size_t size);
  ::std::string* mutable_mainacct();
  ::std::string* release_mainacct();
  void set_allocated_mainacct(::std::string* mainacct);

  // required .FromCs.BaseResponse base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseResponse& base() const;
  ::FromCs::BaseResponse* mutable_base();
  ::FromCs::BaseResponse* release_base();
  void set_allocated_base(::FromCs::BaseResponse* base);

  // optional .FromCs.NewHostListType NewHostList = 7;
  bool has_newhostlist() const;
  void clear_newhostlist();
  static const int kNewHostListFieldNumber = 7;
  const ::FromCs::NewHostListType& newhostlist() const;
  ::FromCs::NewHostListType* mutable_newhostlist();
  ::FromCs::NewHostListType* release_newhostlist();
  void set_allocated_newhostlist(::FromCs::NewHostListType* newhostlist);

  // optional .FromCs.iPList BuiltinIPList = 8;
  bool has_builtiniplist() const;
  void clear_builtiniplist();
  static const int kBuiltinIPListFieldNumber = 8;
  const ::FromCs::iPList& builtiniplist() const;
  ::FromCs::iPList* mutable_builtiniplist();
  ::FromCs::iPList* release_builtiniplist();
  void set_allocated_builtiniplist(::FromCs::iPList* builtiniplist);

  // optional .FromCs.NetworkControlType NetworkControl = 9;
  bool has_networkcontrol() const;
  void clear_networkcontrol();
  static const int kNetworkControlFieldNumber = 9;
  const ::FromCs::NetworkControlType& networkcontrol() const;
  ::FromCs::NetworkControlType* mutable_networkcontrol();
  ::FromCs::NetworkControlType* release_networkcontrol();
  void set_allocated_networkcontrol(::FromCs::NetworkControlType* networkcontrol);

  // optional .FromCs.SafeDevice SafeDeviceList = 14;
  bool has_safedevicelist() const;
  void clear_safedevicelist();
  static const int kSafeDeviceListFieldNumber = 14;
  const ::FromCs::SafeDevice& safedevicelist() const;
  ::FromCs::SafeDevice* mutable_safedevicelist();
  ::FromCs::SafeDevice* release_safedevicelist();
  void set_allocated_safedevicelist(::FromCs::SafeDevice* safedevicelist);

  // optional int32 NeedSetPwd = 4;
  bool has_needsetpwd() const;
  void clear_needsetpwd();
  static const int kNeedSetPwdFieldNumber = 4;
  ::google::protobuf::int32 needsetpwd() const;
  void set_needsetpwd(::google::protobuf::int32 value);

  // optional int32 SafeDevice = 11;
  bool has_safedevice() const;
  void clear_safedevice();
  static const int kSafeDeviceFieldNumber = 11;
  ::google::protobuf::int32 safedevice() const;
  void set_safedevice(::google::protobuf::int32 value);

  // optional int32 MainAcctType = 13;
  bool has_mainaccttype() const;
  void clear_mainaccttype();
  static const int kMainAcctTypeFieldNumber = 13;
  ::google::protobuf::int32 mainaccttype() const;
  void set_mainaccttype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.BindopMobileForRegResponse)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_ticket();
  void clear_has_ticket();
  void set_has_smsno();
  void clear_has_smsno();
  void set_has_needsetpwd();
  void clear_has_needsetpwd();
  void set_has_pwd();
  void clear_has_pwd();
  void set_has_username();
  void clear_has_username();
  void set_has_newhostlist();
  void clear_has_newhostlist();
  void set_has_builtiniplist();
  void clear_has_builtiniplist();
  void set_has_networkcontrol();
  void clear_has_networkcontrol();
  void set_has_authticket();
  void clear_has_authticket();
  void set_has_safedevice();
  void clear_has_safedevice();
  void set_has_mainacct();
  void clear_has_mainacct();
  void set_has_mainaccttype();
  void clear_has_mainaccttype();
  void set_has_safedevicelist();
  void clear_has_safedevicelist();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr ticket_;
  ::google::protobuf::internal::ArenaStringPtr smsno_;
  ::google::protobuf::internal::ArenaStringPtr pwd_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr authticket_;
  ::google::protobuf::internal::ArenaStringPtr mainacct_;
  ::FromCs::BaseResponse* base_;
  ::FromCs::NewHostListType* newhostlist_;
  ::FromCs::iPList* builtiniplist_;
  ::FromCs::NetworkControlType* networkcontrol_;
  ::FromCs::SafeDevice* safedevicelist_;
  ::google::protobuf::int32 needsetpwd_;
  ::google::protobuf::int32 safedevice_;
  ::google::protobuf::int32 mainaccttype_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NewSetPasswdRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.NewSetPasswdRequest) */ {
 public:
  NewSetPasswdRequest();
  virtual ~NewSetPasswdRequest();

  NewSetPasswdRequest(const NewSetPasswdRequest& from);

  inline NewSetPasswdRequest& operator=(const NewSetPasswdRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NewSetPasswdRequest& default_instance();

  static inline const NewSetPasswdRequest* internal_default_instance() {
    return reinterpret_cast<const NewSetPasswdRequest*>(
               &_NewSetPasswdRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    36;

  void Swap(NewSetPasswdRequest* other);

  // implements Message ----------------------------------------------

  inline NewSetPasswdRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  NewSetPasswdRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NewSetPasswdRequest& from);
  void MergeFrom(const NewSetPasswdRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NewSetPasswdRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Password = 2;
  bool has_password() const;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // optional string Ticket = 3;
  bool has_ticket() const;
  void clear_ticket();
  static const int kTicketFieldNumber = 3;
  const ::std::string& ticket() const;
  void set_ticket(const ::std::string& value);
  #if LANG_CXX11
  void set_ticket(::std::string&& value);
  #endif
  void set_ticket(const char* value);
  void set_ticket(const char* value, size_t size);
  ::std::string* mutable_ticket();
  ::std::string* release_ticket();
  void set_allocated_ticket(::std::string* ticket);

  // required .FromCs.BaseRequest base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseRequest& base() const;
  ::FromCs::BaseRequest* mutable_base();
  ::FromCs::BaseRequest* release_base();
  void set_allocated_base(::FromCs::BaseRequest* base);

  // optional .FromCs.sKBuiltinBufferT AutoAuthKey = 4;
  bool has_autoauthkey() const;
  void clear_autoauthkey();
  static const int kAutoAuthKeyFieldNumber = 4;
  const ::FromCs::sKBuiltinBufferT& autoauthkey() const;
  ::FromCs::sKBuiltinBufferT* mutable_autoauthkey();
  ::FromCs::sKBuiltinBufferT* release_autoauthkey();
  void set_allocated_autoauthkey(::FromCs::sKBuiltinBufferT* autoauthkey);

  // @@protoc_insertion_point(class_scope:FromCs.NewSetPasswdRequest)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_password();
  void clear_has_password();
  void set_has_ticket();
  void clear_has_ticket();
  void set_has_autoauthkey();
  void clear_has_autoauthkey();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr ticket_;
  ::FromCs::BaseRequest* base_;
  ::FromCs::sKBuiltinBufferT* autoauthkey_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NewSetPasswdResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.NewSetPasswdResponse) */ {
 public:
  NewSetPasswdResponse();
  virtual ~NewSetPasswdResponse();

  NewSetPasswdResponse(const NewSetPasswdResponse& from);

  inline NewSetPasswdResponse& operator=(const NewSetPasswdResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NewSetPasswdResponse& default_instance();

  static inline const NewSetPasswdResponse* internal_default_instance() {
    return reinterpret_cast<const NewSetPasswdResponse*>(
               &_NewSetPasswdResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    37;

  void Swap(NewSetPasswdResponse* other);

  // implements Message ----------------------------------------------

  inline NewSetPasswdResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  NewSetPasswdResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NewSetPasswdResponse& from);
  void MergeFrom(const NewSetPasswdResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NewSetPasswdResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .FromCs.BaseResponse base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseResponse& base() const;
  ::FromCs::BaseResponse* mutable_base();
  ::FromCs::BaseResponse* release_base();
  void set_allocated_base(::FromCs::BaseResponse* base);

  // optional .FromCs.sKBuiltinBufferT AutoAuthKey = 2;
  bool has_autoauthkey() const;
  void clear_autoauthkey();
  static const int kAutoAuthKeyFieldNumber = 2;
  const ::FromCs::sKBuiltinBufferT& autoauthkey() const;
  ::FromCs::sKBuiltinBufferT* mutable_autoauthkey();
  ::FromCs::sKBuiltinBufferT* release_autoauthkey();
  void set_allocated_autoauthkey(::FromCs::sKBuiltinBufferT* autoauthkey);

  // @@protoc_insertion_point(class_scope:FromCs.NewSetPasswdResponse)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_autoauthkey();
  void clear_has_autoauthkey();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::FromCs::BaseResponse* base_;
  ::FromCs::sKBuiltinBufferT* autoauthkey_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NewVerifyPasswdRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.NewVerifyPasswdRequest) */ {
 public:
  NewVerifyPasswdRequest();
  virtual ~NewVerifyPasswdRequest();

  NewVerifyPasswdRequest(const NewVerifyPasswdRequest& from);

  inline NewVerifyPasswdRequest& operator=(const NewVerifyPasswdRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NewVerifyPasswdRequest& default_instance();

  static inline const NewVerifyPasswdRequest* internal_default_instance() {
    return reinterpret_cast<const NewVerifyPasswdRequest*>(
               &_NewVerifyPasswdRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    38;

  void Swap(NewVerifyPasswdRequest* other);

  // implements Message ----------------------------------------------

  inline NewVerifyPasswdRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  NewVerifyPasswdRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NewVerifyPasswdRequest& from);
  void MergeFrom(const NewVerifyPasswdRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NewVerifyPasswdRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Pwd1 = 3;
  bool has_pwd1() const;
  void clear_pwd1();
  static const int kPwd1FieldNumber = 3;
  const ::std::string& pwd1() const;
  void set_pwd1(const ::std::string& value);
  #if LANG_CXX11
  void set_pwd1(::std::string&& value);
  #endif
  void set_pwd1(const char* value);
  void set_pwd1(const char* value, size_t size);
  ::std::string* mutable_pwd1();
  ::std::string* release_pwd1();
  void set_allocated_pwd1(::std::string* pwd1);

  // optional string Pwd2 = 4;
  bool has_pwd2() const;
  void clear_pwd2();
  static const int kPwd2FieldNumber = 4;
  const ::std::string& pwd2() const;
  void set_pwd2(const ::std::string& value);
  #if LANG_CXX11
  void set_pwd2(::std::string&& value);
  #endif
  void set_pwd2(const char* value);
  void set_pwd2(const char* value, size_t size);
  ::std::string* mutable_pwd2();
  ::std::string* release_pwd2();
  void set_allocated_pwd2(::std::string* pwd2);

  // required .FromCs.BaseRequest base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseRequest& base() const;
  ::FromCs::BaseRequest* mutable_base();
  ::FromCs::BaseRequest* release_base();
  void set_allocated_base(::FromCs::BaseRequest* base);

  // optional .FromCs.sKBuiltinstringT ImgSid = 5;
  bool has_imgsid() const;
  void clear_imgsid();
  static const int kImgSidFieldNumber = 5;
  const ::FromCs::sKBuiltinstringT& imgsid() const;
  ::FromCs::sKBuiltinstringT* mutable_imgsid();
  ::FromCs::sKBuiltinstringT* release_imgsid();
  void set_allocated_imgsid(::FromCs::sKBuiltinstringT* imgsid);

  // optional .FromCs.sKBuiltinstringT ImgCode = 6;
  bool has_imgcode() const;
  void clear_imgcode();
  static const int kImgCodeFieldNumber = 6;
  const ::FromCs::sKBuiltinstringT& imgcode() const;
  ::FromCs::sKBuiltinstringT* mutable_imgcode();
  ::FromCs::sKBuiltinstringT* release_imgcode();
  void set_allocated_imgcode(::FromCs::sKBuiltinstringT* imgcode);

  // optional .FromCs.sKBuiltinstringT ImgEncryptKey = 7;
  bool has_imgencryptkey() const;
  void clear_imgencryptkey();
  static const int kImgEncryptKeyFieldNumber = 7;
  const ::FromCs::sKBuiltinstringT& imgencryptkey() const;
  ::FromCs::sKBuiltinstringT* mutable_imgencryptkey();
  ::FromCs::sKBuiltinstringT* release_imgencryptkey();
  void set_allocated_imgencryptkey(::FromCs::sKBuiltinstringT* imgencryptkey);

  // optional .FromCs.sKBuiltinBufferT KSid = 8;
  bool has_ksid() const;
  void clear_ksid();
  static const int kKSidFieldNumber = 8;
  const ::FromCs::sKBuiltinBufferT& ksid() const;
  ::FromCs::sKBuiltinBufferT* mutable_ksid();
  ::FromCs::sKBuiltinBufferT* release_ksid();
  void set_allocated_ksid(::FromCs::sKBuiltinBufferT* ksid);

  // required int32 OpCode = 2;
  bool has_opcode() const;
  void clear_opcode();
  static const int kOpCodeFieldNumber = 2;
  ::google::protobuf::int32 opcode() const;
  void set_opcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.NewVerifyPasswdRequest)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_opcode();
  void clear_has_opcode();
  void set_has_pwd1();
  void clear_has_pwd1();
  void set_has_pwd2();
  void clear_has_pwd2();
  void set_has_imgsid();
  void clear_has_imgsid();
  void set_has_imgcode();
  void clear_has_imgcode();
  void set_has_imgencryptkey();
  void clear_has_imgencryptkey();
  void set_has_ksid();
  void clear_has_ksid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr pwd1_;
  ::google::protobuf::internal::ArenaStringPtr pwd2_;
  ::FromCs::BaseRequest* base_;
  ::FromCs::sKBuiltinstringT* imgsid_;
  ::FromCs::sKBuiltinstringT* imgcode_;
  ::FromCs::sKBuiltinstringT* imgencryptkey_;
  ::FromCs::sKBuiltinBufferT* ksid_;
  ::google::protobuf::int32 opcode_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NewVerifyPasswdResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.NewVerifyPasswdResponse) */ {
 public:
  NewVerifyPasswdResponse();
  virtual ~NewVerifyPasswdResponse();

  NewVerifyPasswdResponse(const NewVerifyPasswdResponse& from);

  inline NewVerifyPasswdResponse& operator=(const NewVerifyPasswdResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NewVerifyPasswdResponse& default_instance();

  static inline const NewVerifyPasswdResponse* internal_default_instance() {
    return reinterpret_cast<const NewVerifyPasswdResponse*>(
               &_NewVerifyPasswdResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    39;

  void Swap(NewVerifyPasswdResponse* other);

  // implements Message ----------------------------------------------

  inline NewVerifyPasswdResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  NewVerifyPasswdResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NewVerifyPasswdResponse& from);
  void MergeFrom(const NewVerifyPasswdResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NewVerifyPasswdResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Ticket = 4;
  bool has_ticket() const;
  void clear_ticket();
  static const int kTicketFieldNumber = 4;
  const ::std::string& ticket() const;
  void set_ticket(const ::std::string& value);
  #if LANG_CXX11
  void set_ticket(::std::string&& value);
  #endif
  void set_ticket(const char* value);
  void set_ticket(const char* value, size_t size);
  ::std::string* mutable_ticket();
  ::std::string* release_ticket();
  void set_allocated_ticket(::std::string* ticket);

  // required .FromCs.BaseResponse base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseResponse& base() const;
  ::FromCs::BaseResponse* mutable_base();
  ::FromCs::BaseResponse* release_base();
  void set_allocated_base(::FromCs::BaseResponse* base);

  // required .FromCs.sKBuiltinstringT ImgSid = 2;
  bool has_imgsid() const;
  void clear_imgsid();
  static const int kImgSidFieldNumber = 2;
  const ::FromCs::sKBuiltinstringT& imgsid() const;
  ::FromCs::sKBuiltinstringT* mutable_imgsid();
  ::FromCs::sKBuiltinstringT* release_imgsid();
  void set_allocated_imgsid(::FromCs::sKBuiltinstringT* imgsid);

  // required .FromCs.sKBuiltinBufferT ImgBuf = 3;
  bool has_imgbuf() const;
  void clear_imgbuf();
  static const int kImgBufFieldNumber = 3;
  const ::FromCs::sKBuiltinBufferT& imgbuf() const;
  ::FromCs::sKBuiltinBufferT* mutable_imgbuf();
  ::FromCs::sKBuiltinBufferT* release_imgbuf();
  void set_allocated_imgbuf(::FromCs::sKBuiltinBufferT* imgbuf);

  // optional .FromCs.sKBuiltinstringT ImgEncryptKey = 5;
  bool has_imgencryptkey() const;
  void clear_imgencryptkey();
  static const int kImgEncryptKeyFieldNumber = 5;
  const ::FromCs::sKBuiltinstringT& imgencryptkey() const;
  ::FromCs::sKBuiltinstringT* mutable_imgencryptkey();
  ::FromCs::sKBuiltinstringT* release_imgencryptkey();
  void set_allocated_imgencryptkey(::FromCs::sKBuiltinstringT* imgencryptkey);

  // optional .FromCs.sKBuiltinBufferT A2Key = 6;
  bool has_a2key() const;
  void clear_a2key();
  static const int kA2KeyFieldNumber = 6;
  const ::FromCs::sKBuiltinBufferT& a2key() const;
  ::FromCs::sKBuiltinBufferT* mutable_a2key();
  ::FromCs::sKBuiltinBufferT* release_a2key();
  void set_allocated_a2key(::FromCs::sKBuiltinBufferT* a2key);

  // optional .FromCs.sKBuiltinBufferT KSid = 7;
  bool has_ksid() const;
  void clear_ksid();
  static const int kKSidFieldNumber = 7;
  const ::FromCs::sKBuiltinBufferT& ksid() const;
  ::FromCs::sKBuiltinBufferT* mutable_ksid();
  ::FromCs::sKBuiltinBufferT* release_ksid();
  void set_allocated_ksid(::FromCs::sKBuiltinBufferT* ksid);

  // @@protoc_insertion_point(class_scope:FromCs.NewVerifyPasswdResponse)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_imgsid();
  void clear_has_imgsid();
  void set_has_imgbuf();
  void clear_has_imgbuf();
  void set_has_ticket();
  void clear_has_ticket();
  void set_has_imgencryptkey();
  void clear_has_imgencryptkey();
  void set_has_a2key();
  void clear_has_a2key();
  void set_has_ksid();
  void clear_has_ksid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr ticket_;
  ::FromCs::BaseResponse* base_;
  ::FromCs::sKBuiltinstringT* imgsid_;
  ::FromCs::sKBuiltinBufferT* imgbuf_;
  ::FromCs::sKBuiltinstringT* imgencryptkey_;
  ::FromCs::sKBuiltinBufferT* a2key_;
  ::FromCs::sKBuiltinBufferT* ksid_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BindEmailRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.BindEmailRequest) */ {
 public:
  BindEmailRequest();
  virtual ~BindEmailRequest();

  BindEmailRequest(const BindEmailRequest& from);

  inline BindEmailRequest& operator=(const BindEmailRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BindEmailRequest& default_instance();

  static inline const BindEmailRequest* internal_default_instance() {
    return reinterpret_cast<const BindEmailRequest*>(
               &_BindEmailRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    40;

  void Swap(BindEmailRequest* other);

  // implements Message ----------------------------------------------

  inline BindEmailRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  BindEmailRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BindEmailRequest& from);
  void MergeFrom(const BindEmailRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BindEmailRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Email = 3;
  bool has_email() const;
  void clear_email();
  static const int kEmailFieldNumber = 3;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // required .FromCs.BaseRequest base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseRequest& base() const;
  ::FromCs::BaseRequest* mutable_base();
  ::FromCs::BaseRequest* release_base();
  void set_allocated_base(::FromCs::BaseRequest* base);

  // required int32 OpCode = 2;
  bool has_opcode() const;
  void clear_opcode();
  static const int kOpCodeFieldNumber = 2;
  ::google::protobuf::int32 opcode() const;
  void set_opcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.BindEmailRequest)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_opcode();
  void clear_has_opcode();
  void set_has_email();
  void clear_has_email();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::FromCs::BaseRequest* base_;
  ::google::protobuf::int32 opcode_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BindEmailResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.BindEmailResponse) */ {
 public:
  BindEmailResponse();
  virtual ~BindEmailResponse();

  BindEmailResponse(const BindEmailResponse& from);

  inline BindEmailResponse& operator=(const BindEmailResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BindEmailResponse& default_instance();

  static inline const BindEmailResponse* internal_default_instance() {
    return reinterpret_cast<const BindEmailResponse*>(
               &_BindEmailResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    41;

  void Swap(BindEmailResponse* other);

  // implements Message ----------------------------------------------

  inline BindEmailResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  BindEmailResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BindEmailResponse& from);
  void MergeFrom(const BindEmailResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BindEmailResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .FromCs.BaseResponse base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseResponse& base() const;
  ::FromCs::BaseResponse* mutable_base();
  ::FromCs::BaseResponse* release_base();
  void set_allocated_base(::FromCs::BaseResponse* base);

  // @@protoc_insertion_point(class_scope:FromCs.BindEmailResponse)
 private:
  void set_has_base();
  void clear_has_base();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::FromCs::BaseResponse* base_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CheckUnbindRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.CheckUnbindRequest) */ {
 public:
  CheckUnbindRequest();
  virtual ~CheckUnbindRequest();

  CheckUnbindRequest(const CheckUnbindRequest& from);

  inline CheckUnbindRequest& operator=(const CheckUnbindRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckUnbindRequest& default_instance();

  static inline const CheckUnbindRequest* internal_default_instance() {
    return reinterpret_cast<const CheckUnbindRequest*>(
               &_CheckUnbindRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    42;

  void Swap(CheckUnbindRequest* other);

  // implements Message ----------------------------------------------

  inline CheckUnbindRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CheckUnbindRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CheckUnbindRequest& from);
  void MergeFrom(const CheckUnbindRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CheckUnbindRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .FromCs.BaseRequest base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseRequest& base() const;
  ::FromCs::BaseRequest* mutable_base();
  ::FromCs::BaseRequest* release_base();
  void set_allocated_base(::FromCs::BaseRequest* base);

  // required int32 BindType = 2;
  bool has_bindtype() const;
  void clear_bindtype();
  static const int kBindTypeFieldNumber = 2;
  ::google::protobuf::int32 bindtype() const;
  void set_bindtype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.CheckUnbindRequest)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_bindtype();
  void clear_has_bindtype();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::FromCs::BaseRequest* base_;
  ::google::protobuf::int32 bindtype_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CheckUnbindResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.CheckUnbindResponse) */ {
 public:
  CheckUnbindResponse();
  virtual ~CheckUnbindResponse();

  CheckUnbindResponse(const CheckUnbindResponse& from);

  inline CheckUnbindResponse& operator=(const CheckUnbindResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckUnbindResponse& default_instance();

  static inline const CheckUnbindResponse* internal_default_instance() {
    return reinterpret_cast<const CheckUnbindResponse*>(
               &_CheckUnbindResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    43;

  void Swap(CheckUnbindResponse* other);

  // implements Message ----------------------------------------------

  inline CheckUnbindResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CheckUnbindResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CheckUnbindResponse& from);
  void MergeFrom(const CheckUnbindResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CheckUnbindResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string RandomPasswd = 2;
  bool has_randompasswd() const;
  void clear_randompasswd();
  static const int kRandomPasswdFieldNumber = 2;
  const ::std::string& randompasswd() const;
  void set_randompasswd(const ::std::string& value);
  #if LANG_CXX11
  void set_randompasswd(::std::string&& value);
  #endif
  void set_randompasswd(const char* value);
  void set_randompasswd(const char* value, size_t size);
  ::std::string* mutable_randompasswd();
  ::std::string* release_randompasswd();
  void set_allocated_randompasswd(::std::string* randompasswd);

  // required .FromCs.BaseResponse base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseResponse& base() const;
  ::FromCs::BaseResponse* mutable_base();
  ::FromCs::BaseResponse* release_base();
  void set_allocated_base(::FromCs::BaseResponse* base);

  // @@protoc_insertion_point(class_scope:FromCs.CheckUnbindResponse)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_randompasswd();
  void clear_has_randompasswd();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr randompasswd_;
  ::FromCs::BaseResponse* base_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UploadMContact : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.UploadMContact) */ {
 public:
  UploadMContact();
  virtual ~UploadMContact();

  UploadMContact(const UploadMContact& from);

  inline UploadMContact& operator=(const UploadMContact& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UploadMContact& default_instance();

  static inline const UploadMContact* internal_default_instance() {
    return reinterpret_cast<const UploadMContact*>(
               &_UploadMContact_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    44;

  void Swap(UploadMContact* other);

  // implements Message ----------------------------------------------

  inline UploadMContact* New() const PROTOBUF_FINAL { return New(NULL); }

  UploadMContact* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UploadMContact& from);
  void MergeFrom(const UploadMContact& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UploadMContact* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .FromCs.sKBuiltinstringT Mobiles = 6;
  int mobiles_size() const;
  void clear_mobiles();
  static const int kMobilesFieldNumber = 6;
  const ::FromCs::sKBuiltinstringT& mobiles(int index) const;
  ::FromCs::sKBuiltinstringT* mutable_mobiles(int index);
  ::FromCs::sKBuiltinstringT* add_mobiles();
  ::google::protobuf::RepeatedPtrField< ::FromCs::sKBuiltinstringT >*
      mutable_mobiles();
  const ::google::protobuf::RepeatedPtrField< ::FromCs::sKBuiltinstringT >&
      mobiles() const;

  // repeated .FromCs.sKBuiltinstringT Email = 8;
  int email_size() const;
  void clear_email();
  static const int kEmailFieldNumber = 8;
  const ::FromCs::sKBuiltinstringT& email(int index) const;
  ::FromCs::sKBuiltinstringT* mutable_email(int index);
  ::FromCs::sKBuiltinstringT* add_email();
  ::google::protobuf::RepeatedPtrField< ::FromCs::sKBuiltinstringT >*
      mutable_email();
  const ::google::protobuf::RepeatedPtrField< ::FromCs::sKBuiltinstringT >&
      email() const;

  // optional string UserName = 2;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 2;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // optional string Mobile = 4;
  bool has_mobile() const;
  void clear_mobile();
  static const int kMobileFieldNumber = 4;
  const ::std::string& mobile() const;
  void set_mobile(const ::std::string& value);
  #if LANG_CXX11
  void set_mobile(::std::string&& value);
  #endif
  void set_mobile(const char* value);
  void set_mobile(const char* value, size_t size);
  ::std::string* mutable_mobile();
  ::std::string* release_mobile();
  void set_allocated_mobile(::std::string* mobile);

  // required .FromCs.BaseRequest base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseRequest& base() const;
  ::FromCs::BaseRequest* mutable_base();
  ::FromCs::BaseRequest* release_base();
  void set_allocated_base(::FromCs::BaseRequest* base);

  // required int32 Opcode = 3;
  bool has_opcode() const;
  void clear_opcode();
  static const int kOpcodeFieldNumber = 3;
  ::google::protobuf::int32 opcode() const;
  void set_opcode(::google::protobuf::int32 value);

  // required int32 MobileListSize = 5;
  bool has_mobilelistsize() const;
  void clear_mobilelistsize();
  static const int kMobileListSizeFieldNumber = 5;
  ::google::protobuf::int32 mobilelistsize() const;
  void set_mobilelistsize(::google::protobuf::int32 value);

  // required int32 EmailListSize = 7;
  bool has_emaillistsize() const;
  void clear_emaillistsize();
  static const int kEmailListSizeFieldNumber = 7;
  ::google::protobuf::int32 emaillistsize() const;
  void set_emaillistsize(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.UploadMContact)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_username();
  void clear_has_username();
  void set_has_opcode();
  void clear_has_opcode();
  void set_has_mobile();
  void clear_has_mobile();
  void set_has_mobilelistsize();
  void clear_has_mobilelistsize();
  void set_has_emaillistsize();
  void clear_has_emaillistsize();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::FromCs::sKBuiltinstringT > mobiles_;
  ::google::protobuf::RepeatedPtrField< ::FromCs::sKBuiltinstringT > email_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr mobile_;
  ::FromCs::BaseRequest* base_;
  ::google::protobuf::int32 opcode_;
  ::google::protobuf::int32 mobilelistsize_;
  ::google::protobuf::int32 emaillistsize_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UploadMContactResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.UploadMContactResponse) */ {
 public:
  UploadMContactResponse();
  virtual ~UploadMContactResponse();

  UploadMContactResponse(const UploadMContactResponse& from);

  inline UploadMContactResponse& operator=(const UploadMContactResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UploadMContactResponse& default_instance();

  static inline const UploadMContactResponse* internal_default_instance() {
    return reinterpret_cast<const UploadMContactResponse*>(
               &_UploadMContactResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    45;

  void Swap(UploadMContactResponse* other);

  // implements Message ----------------------------------------------

  inline UploadMContactResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  UploadMContactResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UploadMContactResponse& from);
  void MergeFrom(const UploadMContactResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UploadMContactResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .FromCs.BaseResponse base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseResponse& base() const;
  ::FromCs::BaseResponse* mutable_base();
  ::FromCs::BaseResponse* release_base();
  void set_allocated_base(::FromCs::BaseResponse* base);

  // @@protoc_insertion_point(class_scope:FromCs.UploadMContactResponse)
 private:
  void set_has_base();
  void clear_has_base();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::FromCs::BaseResponse* base_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetMFriendRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.GetMFriendRequest) */ {
 public:
  GetMFriendRequest();
  virtual ~GetMFriendRequest();

  GetMFriendRequest(const GetMFriendRequest& from);

  inline GetMFriendRequest& operator=(const GetMFriendRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetMFriendRequest& default_instance();

  static inline const GetMFriendRequest* internal_default_instance() {
    return reinterpret_cast<const GetMFriendRequest*>(
               &_GetMFriendRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    46;

  void Swap(GetMFriendRequest* other);

  // implements Message ----------------------------------------------

  inline GetMFriendRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetMFriendRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetMFriendRequest& from);
  void MergeFrom(const GetMFriendRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetMFriendRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string MD5 = 3;
  bool has_md5() const;
  void clear_md5();
  static const int kMD5FieldNumber = 3;
  const ::std::string& md5() const;
  void set_md5(const ::std::string& value);
  #if LANG_CXX11
  void set_md5(::std::string&& value);
  #endif
  void set_md5(const char* value);
  void set_md5(const char* value, size_t size);
  ::std::string* mutable_md5();
  ::std::string* release_md5();
  void set_allocated_md5(::std::string* md5);

  // required .FromCs.BaseRequest base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseRequest& base() const;
  ::FromCs::BaseRequest* mutable_base();
  ::FromCs::BaseRequest* release_base();
  void set_allocated_base(::FromCs::BaseRequest* base);

  // optional int32 OpType = 2;
  bool has_optype() const;
  void clear_optype();
  static const int kOpTypeFieldNumber = 2;
  ::google::protobuf::int32 optype() const;
  void set_optype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.GetMFriendRequest)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_optype();
  void clear_has_optype();
  void set_has_md5();
  void clear_has_md5();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr md5_;
  ::FromCs::BaseRequest* base_;
  ::google::protobuf::int32 optype_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetMFriendResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.GetMFriendResponse) */ {
 public:
  GetMFriendResponse();
  virtual ~GetMFriendResponse();

  GetMFriendResponse(const GetMFriendResponse& from);

  inline GetMFriendResponse& operator=(const GetMFriendResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetMFriendResponse& default_instance();

  static inline const GetMFriendResponse* internal_default_instance() {
    return reinterpret_cast<const GetMFriendResponse*>(
               &_GetMFriendResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    47;

  void Swap(GetMFriendResponse* other);

  // implements Message ----------------------------------------------

  inline GetMFriendResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetMFriendResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetMFriendResponse& from);
  void MergeFrom(const GetMFriendResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetMFriendResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .FromCs.FriendObj Friend = 3;
  int friend__size() const;
  void clear_friend_();
  static const int kFriendFieldNumber = 3;
  const ::FromCs::FriendObj& friend_(int index) const;
  ::FromCs::FriendObj* mutable_friend_(int index);
  ::FromCs::FriendObj* add_friend_();
  ::google::protobuf::RepeatedPtrField< ::FromCs::FriendObj >*
      mutable_friend_();
  const ::google::protobuf::RepeatedPtrField< ::FromCs::FriendObj >&
      friend_() const;

  // optional string MD5 = 4;
  bool has_md5() const;
  void clear_md5();
  static const int kMD5FieldNumber = 4;
  const ::std::string& md5() const;
  void set_md5(const ::std::string& value);
  #if LANG_CXX11
  void set_md5(::std::string&& value);
  #endif
  void set_md5(const char* value);
  void set_md5(const char* value, size_t size);
  ::std::string* mutable_md5();
  ::std::string* release_md5();
  void set_allocated_md5(::std::string* md5);

  // required .FromCs.BaseResponse base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseResponse& base() const;
  ::FromCs::BaseResponse* mutable_base();
  ::FromCs::BaseResponse* release_base();
  void set_allocated_base(::FromCs::BaseResponse* base);

  // required int32 Count = 2;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.GetMFriendResponse)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_count();
  void clear_has_count();
  void set_has_md5();
  void clear_has_md5();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::FromCs::FriendObj > friend__;
  ::google::protobuf::internal::ArenaStringPtr md5_;
  ::FromCs::BaseResponse* base_;
  ::google::protobuf::int32 count_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Geta8keyRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.Geta8keyRequest) */ {
 public:
  Geta8keyRequest();
  virtual ~Geta8keyRequest();

  Geta8keyRequest(const Geta8keyRequest& from);

  inline Geta8keyRequest& operator=(const Geta8keyRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Geta8keyRequest& default_instance();

  static inline const Geta8keyRequest* internal_default_instance() {
    return reinterpret_cast<const Geta8keyRequest*>(
               &_Geta8keyRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    48;

  void Swap(Geta8keyRequest* other);

  // implements Message ----------------------------------------------

  inline Geta8keyRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  Geta8keyRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Geta8keyRequest& from);
  void MergeFrom(const Geta8keyRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Geta8keyRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string FriendUserName = 8;
  bool has_friendusername() const;
  void clear_friendusername();
  static const int kFriendUserNameFieldNumber = 8;
  const ::std::string& friendusername() const;
  void set_friendusername(const ::std::string& value);
  #if LANG_CXX11
  void set_friendusername(::std::string&& value);
  #endif
  void set_friendusername(const char* value);
  void set_friendusername(const char* value, size_t size);
  ::std::string* mutable_friendusername();
  ::std::string* release_friendusername();
  void set_allocated_friendusername(::std::string* friendusername);

  // optional string UserName = 11;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 11;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // optional string BundleID = 12;
  bool has_bundleid() const;
  void clear_bundleid();
  static const int kBundleIDFieldNumber = 12;
  const ::std::string& bundleid() const;
  void set_bundleid(const ::std::string& value);
  #if LANG_CXX11
  void set_bundleid(::std::string&& value);
  #endif
  void set_bundleid(const char* value);
  void set_bundleid(const char* value, size_t size);
  ::std::string* mutable_bundleid();
  ::std::string* release_bundleid();
  void set_allocated_bundleid(::std::string* bundleid);

  // required .FromCs.BaseRequest base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseRequest& base() const;
  ::FromCs::BaseRequest* mutable_base();
  ::FromCs::BaseRequest* release_base();
  void set_allocated_base(::FromCs::BaseRequest* base);

  // required .FromCs.sKBuiltinBufferT A2Key = 3;
  bool has_a2key() const;
  void clear_a2key();
  static const int kA2KeyFieldNumber = 3;
  const ::FromCs::sKBuiltinBufferT& a2key() const;
  ::FromCs::sKBuiltinBufferT* mutable_a2key();
  ::FromCs::sKBuiltinBufferT* release_a2key();
  void set_allocated_a2key(::FromCs::sKBuiltinBufferT* a2key);

  // optional .FromCs.sKBuiltinstringT AppID = 4;
  bool has_appid() const;
  void clear_appid();
  static const int kAppIDFieldNumber = 4;
  const ::FromCs::sKBuiltinstringT& appid() const;
  ::FromCs::sKBuiltinstringT* mutable_appid();
  ::FromCs::sKBuiltinstringT* release_appid();
  void set_allocated_appid(::FromCs::sKBuiltinstringT* appid);

  // optional .FromCs.sKBuiltinstringT Scope = 5;
  bool has_scope() const;
  void clear_scope();
  static const int kScopeFieldNumber = 5;
  const ::FromCs::sKBuiltinstringT& scope() const;
  ::FromCs::sKBuiltinstringT* mutable_scope();
  ::FromCs::sKBuiltinstringT* release_scope();
  void set_allocated_scope(::FromCs::sKBuiltinstringT* scope);

  // optional .FromCs.sKBuiltinstringT State = 6;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 6;
  const ::FromCs::sKBuiltinstringT& state() const;
  ::FromCs::sKBuiltinstringT* mutable_state();
  ::FromCs::sKBuiltinstringT* release_state();
  void set_allocated_state(::FromCs::sKBuiltinstringT* state);

  // optional .FromCs.sKBuiltinstringT ReqUrl = 7;
  bool has_requrl() const;
  void clear_requrl();
  static const int kReqUrlFieldNumber = 7;
  const ::FromCs::sKBuiltinstringT& requrl() const;
  ::FromCs::sKBuiltinstringT* mutable_requrl();
  ::FromCs::sKBuiltinstringT* release_requrl();
  void set_allocated_requrl(::FromCs::sKBuiltinstringT* requrl);

  // required int32 OpCode = 2;
  bool has_opcode() const;
  void clear_opcode();
  static const int kOpCodeFieldNumber = 2;
  ::google::protobuf::int32 opcode() const;
  void set_opcode(::google::protobuf::int32 value);

  // optional int32 FriendQQ = 9;
  bool has_friendqq() const;
  void clear_friendqq();
  static const int kFriendQQFieldNumber = 9;
  ::google::protobuf::int32 friendqq() const;
  void set_friendqq(::google::protobuf::int32 value);

  // optional int32 Scene = 10;
  bool has_scene() const;
  void clear_scene();
  static const int kSceneFieldNumber = 10;
  ::google::protobuf::int32 scene() const;
  void set_scene(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.Geta8keyRequest)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_opcode();
  void clear_has_opcode();
  void set_has_a2key();
  void clear_has_a2key();
  void set_has_appid();
  void clear_has_appid();
  void set_has_scope();
  void clear_has_scope();
  void set_has_state();
  void clear_has_state();
  void set_has_requrl();
  void clear_has_requrl();
  void set_has_friendusername();
  void clear_has_friendusername();
  void set_has_friendqq();
  void clear_has_friendqq();
  void set_has_scene();
  void clear_has_scene();
  void set_has_username();
  void clear_has_username();
  void set_has_bundleid();
  void clear_has_bundleid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr friendusername_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr bundleid_;
  ::FromCs::BaseRequest* base_;
  ::FromCs::sKBuiltinBufferT* a2key_;
  ::FromCs::sKBuiltinstringT* appid_;
  ::FromCs::sKBuiltinstringT* scope_;
  ::FromCs::sKBuiltinstringT* state_;
  ::FromCs::sKBuiltinstringT* requrl_;
  ::google::protobuf::int32 opcode_;
  ::google::protobuf::int32 friendqq_;
  ::google::protobuf::int32 scene_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Geta8keyResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.Geta8keyResponse) */ {
 public:
  Geta8keyResponse();
  virtual ~Geta8keyResponse();

  Geta8keyResponse(const Geta8keyResponse& from);

  inline Geta8keyResponse& operator=(const Geta8keyResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Geta8keyResponse& default_instance();

  static inline const Geta8keyResponse* internal_default_instance() {
    return reinterpret_cast<const Geta8keyResponse*>(
               &_Geta8keyResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    49;

  void Swap(Geta8keyResponse* other);

  // implements Message ----------------------------------------------

  inline Geta8keyResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  Geta8keyResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Geta8keyResponse& from);
  void MergeFrom(const Geta8keyResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Geta8keyResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 ScopeList = 17;
  int scopelist_size() const;
  void clear_scopelist();
  static const int kScopeListFieldNumber = 17;
  ::google::protobuf::int32 scopelist(int index) const;
  void set_scopelist(int index, ::google::protobuf::int32 value);
  void add_scopelist(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      scopelist() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_scopelist();

  // repeated .FromCs.HTTPHeader HttpHeader = 25;
  int httpheader_size() const;
  void clear_httpheader();
  static const int kHttpHeaderFieldNumber = 25;
  const ::FromCs::HTTPHeader& httpheader(int index) const;
  ::FromCs::HTTPHeader* mutable_httpheader(int index);
  ::FromCs::HTTPHeader* add_httpheader();
  ::google::protobuf::RepeatedPtrField< ::FromCs::HTTPHeader >*
      mutable_httpheader();
  const ::google::protobuf::RepeatedPtrField< ::FromCs::HTTPHeader >&
      httpheader() const;

  // optional string FullURL = 2;
  bool has_fullurl() const;
  void clear_fullurl();
  static const int kFullURLFieldNumber = 2;
  const ::std::string& fullurl() const;
  void set_fullurl(const ::std::string& value);
  #if LANG_CXX11
  void set_fullurl(::std::string&& value);
  #endif
  void set_fullurl(const char* value);
  void set_fullurl(const char* value, size_t size);
  ::std::string* mutable_fullurl();
  ::std::string* release_fullurl();
  void set_allocated_fullurl(::std::string* fullurl);

  // optional string A8Key = 3;
  bool has_a8key() const;
  void clear_a8key();
  static const int kA8KeyFieldNumber = 3;
  const ::std::string& a8key() const;
  void set_a8key(const ::std::string& value);
  #if LANG_CXX11
  void set_a8key(::std::string&& value);
  #endif
  void set_a8key(const char* value);
  void set_a8key(const char* value, size_t size);
  ::std::string* mutable_a8key();
  ::std::string* release_a8key();
  void set_allocated_a8key(::std::string* a8key);

  // optional string Title = 5;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 5;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional string Content = 6;
  bool has_content() const;
  void clear_content();
  static const int kContentFieldNumber = 6;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // optional string UserName = 9;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 9;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // optional string ShareUrl = 15;
  bool has_shareurl() const;
  void clear_shareurl();
  static const int kShareUrlFieldNumber = 15;
  const ::std::string& shareurl() const;
  void set_shareurl(const ::std::string& value);
  #if LANG_CXX11
  void set_shareurl(::std::string&& value);
  #endif
  void set_shareurl(const char* value);
  void set_shareurl(const char* value, size_t size);
  ::std::string* mutable_shareurl();
  ::std::string* release_shareurl();
  void set_allocated_shareurl(::std::string* shareurl);

  // optional string antispamTicket = 18;
  bool has_antispamticket() const;
  void clear_antispamticket();
  static const int kAntispamTicketFieldNumber = 18;
  const ::std::string& antispamticket() const;
  void set_antispamticket(const ::std::string& value);
  #if LANG_CXX11
  void set_antispamticket(::std::string&& value);
  #endif
  void set_antispamticket(const char* value);
  void set_antispamticket(const char* value, size_t size);
  ::std::string* mutable_antispamticket();
  ::std::string* release_antispamticket();
  void set_allocated_antispamticket(::std::string* antispamticket);

  // optional string ssid = 19;
  bool has_ssid() const;
  void clear_ssid();
  static const int kSsidFieldNumber = 19;
  const ::std::string& ssid() const;
  void set_ssid(const ::std::string& value);
  #if LANG_CXX11
  void set_ssid(::std::string&& value);
  #endif
  void set_ssid(const char* value);
  void set_ssid(const char* value, size_t size);
  ::std::string* mutable_ssid();
  ::std::string* release_ssid();
  void set_allocated_ssid(::std::string* ssid);

  // optional string mid = 20;
  bool has_mid() const;
  void clear_mid();
  static const int kMidFieldNumber = 20;
  const ::std::string& mid() const;
  void set_mid(const ::std::string& value);
  #if LANG_CXX11
  void set_mid(::std::string&& value);
  #endif
  void set_mid(const char* value);
  void set_mid(const char* value, size_t size);
  ::std::string* mutable_mid();
  ::std::string* release_mid();
  void set_allocated_mid(::std::string* mid);

  // required .FromCs.BaseResponse base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseResponse& base() const;
  ::FromCs::BaseResponse* mutable_base();
  ::FromCs::BaseResponse* release_base();
  void set_allocated_base(::FromCs::BaseResponse* base);

  // optional .FromCs.JSAPIPermission Permission = 7;
  bool has_permission() const;
  void clear_permission();
  static const int kPermissionFieldNumber = 7;
  const ::FromCs::JSAPIPermission& permission() const;
  ::FromCs::JSAPIPermission* mutable_permission();
  ::FromCs::JSAPIPermission* release_permission();
  void set_allocated_permission(::FromCs::JSAPIPermission* permission);

  // optional .FromCs.GeneralControlBitSet ControlBitSet = 8;
  bool has_controlbitset() const;
  void clear_controlbitset();
  static const int kControlBitSetFieldNumber = 8;
  const ::FromCs::GeneralControlBitSet& controlbitset() const;
  ::FromCs::GeneralControlBitSet* mutable_controlbitset();
  ::FromCs::GeneralControlBitSet* release_controlbitset();
  void set_allocated_controlbitset(::FromCs::GeneralControlBitSet* controlbitset);

  // optional .FromCs.DeepLinkBitSet DeepLinkBT = 22;
  bool has_deeplinkbt() const;
  void clear_deeplinkbt();
  static const int kDeepLinkBTFieldNumber = 22;
  const ::FromCs::DeepLinkBitSet& deeplinkbt() const;
  ::FromCs::DeepLinkBitSet* mutable_deeplinkbt();
  ::FromCs::DeepLinkBitSet* release_deeplinkbt();
  void set_allocated_deeplinkbt(::FromCs::DeepLinkBitSet* deeplinkbt);

  // optional .FromCs.sKBuiltinBufferT jsapicontrolbytes = 23;
  bool has_jsapicontrolbytes() const;
  void clear_jsapicontrolbytes();
  static const int kJsapicontrolbytesFieldNumber = 23;
  const ::FromCs::sKBuiltinBufferT& jsapicontrolbytes() const;
  ::FromCs::sKBuiltinBufferT* mutable_jsapicontrolbytes();
  ::FromCs::sKBuiltinBufferT* release_jsapicontrolbytes();
  void set_allocated_jsapicontrolbytes(::FromCs::sKBuiltinBufferT* jsapicontrolbytes);

  // optional int32 ActionCode = 4;
  bool has_actioncode() const;
  void clear_actioncode();
  static const int kActionCodeFieldNumber = 4;
  ::google::protobuf::int32 actioncode() const;
  void set_actioncode(::google::protobuf::int32 value);

  // optional int32 ScopeCount = 16;
  bool has_scopecount() const;
  void clear_scopecount();
  static const int kScopeCountFieldNumber = 16;
  ::google::protobuf::int32 scopecount() const;
  void set_scopecount(::google::protobuf::int32 value);

  // optional int32 HttpHeaderNumb = 24;
  bool has_httpheadernumb() const;
  void clear_httpheadernumb();
  static const int kHttpHeaderNumbFieldNumber = 24;
  ::google::protobuf::int32 httpheadernumb() const;
  void set_httpheadernumb(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.Geta8keyResponse)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_fullurl();
  void clear_has_fullurl();
  void set_has_a8key();
  void clear_has_a8key();
  void set_has_actioncode();
  void clear_has_actioncode();
  void set_has_title();
  void clear_has_title();
  void set_has_content();
  void clear_has_content();
  void set_has_permission();
  void clear_has_permission();
  void set_has_controlbitset();
  void clear_has_controlbitset();
  void set_has_username();
  void clear_has_username();
  void set_has_shareurl();
  void clear_has_shareurl();
  void set_has_scopecount();
  void clear_has_scopecount();
  void set_has_antispamticket();
  void clear_has_antispamticket();
  void set_has_ssid();
  void clear_has_ssid();
  void set_has_mid();
  void clear_has_mid();
  void set_has_deeplinkbt();
  void clear_has_deeplinkbt();
  void set_has_jsapicontrolbytes();
  void clear_has_jsapicontrolbytes();
  void set_has_httpheadernumb();
  void clear_has_httpheadernumb();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > scopelist_;
  ::google::protobuf::RepeatedPtrField< ::FromCs::HTTPHeader > httpheader_;
  ::google::protobuf::internal::ArenaStringPtr fullurl_;
  ::google::protobuf::internal::ArenaStringPtr a8key_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr shareurl_;
  ::google::protobuf::internal::ArenaStringPtr antispamticket_;
  ::google::protobuf::internal::ArenaStringPtr ssid_;
  ::google::protobuf::internal::ArenaStringPtr mid_;
  ::FromCs::BaseResponse* base_;
  ::FromCs::JSAPIPermission* permission_;
  ::FromCs::GeneralControlBitSet* controlbitset_;
  ::FromCs::DeepLinkBitSet* deeplinkbt_;
  ::FromCs::sKBuiltinBufferT* jsapicontrolbytes_;
  ::google::protobuf::int32 actioncode_;
  ::google::protobuf::int32 scopecount_;
  ::google::protobuf::int32 httpheadernumb_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MMSnsPostRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.MMSnsPostRequest) */ {
 public:
  MMSnsPostRequest();
  virtual ~MMSnsPostRequest();

  MMSnsPostRequest(const MMSnsPostRequest& from);

  inline MMSnsPostRequest& operator=(const MMSnsPostRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MMSnsPostRequest& default_instance();

  static inline const MMSnsPostRequest* internal_default_instance() {
    return reinterpret_cast<const MMSnsPostRequest*>(
               &_MMSnsPostRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    50;

  void Swap(MMSnsPostRequest* other);

  // implements Message ----------------------------------------------

  inline MMSnsPostRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  MMSnsPostRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MMSnsPostRequest& from);
  void MergeFrom(const MMSnsPostRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MMSnsPostRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string WithUserList = 4;
  int withuserlist_size() const;
  void clear_withuserlist();
  static const int kWithUserListFieldNumber = 4;
  const ::std::string& withuserlist(int index) const;
  ::std::string* mutable_withuserlist(int index);
  void set_withuserlist(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_withuserlist(int index, ::std::string&& value);
  #endif
  void set_withuserlist(int index, const char* value);
  void set_withuserlist(int index, const char* value, size_t size);
  ::std::string* add_withuserlist();
  void add_withuserlist(const ::std::string& value);
  #if LANG_CXX11
  void add_withuserlist(::std::string&& value);
  #endif
  void add_withuserlist(const char* value);
  void add_withuserlist(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& withuserlist() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_withuserlist();

  // repeated string GroupIds = 10;
  int groupids_size() const;
  void clear_groupids();
  static const int kGroupIdsFieldNumber = 10;
  const ::std::string& groupids(int index) const;
  ::std::string* mutable_groupids(int index);
  void set_groupids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_groupids(int index, ::std::string&& value);
  #endif
  void set_groupids(int index, const char* value);
  void set_groupids(int index, const char* value, size_t size);
  ::std::string* add_groupids();
  void add_groupids(const ::std::string& value);
  #if LANG_CXX11
  void add_groupids(::std::string&& value);
  #endif
  void add_groupids(const char* value);
  void add_groupids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& groupids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_groupids();

  // repeated string BlackList = 14;
  int blacklist_size() const;
  void clear_blacklist();
  static const int kBlackListFieldNumber = 14;
  const ::std::string& blacklist(int index) const;
  ::std::string* mutable_blacklist(int index);
  void set_blacklist(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_blacklist(int index, ::std::string&& value);
  #endif
  void set_blacklist(int index, const char* value);
  void set_blacklist(int index, const char* value, size_t size);
  ::std::string* add_blacklist();
  void add_blacklist(const ::std::string& value);
  #if LANG_CXX11
  void add_blacklist(::std::string&& value);
  #endif
  void add_blacklist(const char* value);
  void add_blacklist(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& blacklist() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_blacklist();

  // optional string ClientId = 7;
  bool has_clientid() const;
  void clear_clientid();
  static const int kClientIdFieldNumber = 7;
  const ::std::string& clientid() const;
  void set_clientid(const ::std::string& value);
  #if LANG_CXX11
  void set_clientid(::std::string&& value);
  #endif
  void set_clientid(const char* value);
  void set_clientid(const char* value, size_t size);
  ::std::string* mutable_clientid();
  ::std::string* release_clientid();
  void set_allocated_clientid(::std::string* clientid);

  // required .FromCs.BaseRequest base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseRequest& base() const;
  ::FromCs::BaseRequest* mutable_base();
  ::FromCs::BaseRequest* release_base();
  void set_allocated_base(::FromCs::BaseRequest* base);

  // required .FromCs.sKBuiltinBufferT ObjectDesc = 2;
  bool has_objectdesc() const;
  void clear_objectdesc();
  static const int kObjectDescFieldNumber = 2;
  const ::FromCs::sKBuiltinBufferT& objectdesc() const;
  ::FromCs::sKBuiltinBufferT* mutable_objectdesc();
  ::FromCs::sKBuiltinBufferT* release_objectdesc();
  void set_allocated_objectdesc(::FromCs::sKBuiltinBufferT* objectdesc);

  // optional int32 WithUserListNumb = 3;
  bool has_withuserlistnumb() const;
  void clear_withuserlistnumb();
  static const int kWithUserListNumbFieldNumber = 3;
  ::google::protobuf::int32 withuserlistnumb() const;
  void set_withuserlistnumb(::google::protobuf::int32 value);

  // optional int32 Privacy = 5;
  bool has_privacy() const;
  void clear_privacy();
  static const int kPrivacyFieldNumber = 5;
  ::google::protobuf::int32 privacy() const;
  void set_privacy(::google::protobuf::int32 value);

  // optional int32 SyncFlag = 6;
  bool has_syncflag() const;
  void clear_syncflag();
  static const int kSyncFlagFieldNumber = 6;
  ::google::protobuf::int32 syncflag() const;
  void set_syncflag(::google::protobuf::int32 value);

  // optional int32 PostBGImgType = 8;
  bool has_postbgimgtype() const;
  void clear_postbgimgtype();
  static const int kPostBGImgTypeFieldNumber = 8;
  ::google::protobuf::int32 postbgimgtype() const;
  void set_postbgimgtype(::google::protobuf::int32 value);

  // optional int32 GroupCount = 9;
  bool has_groupcount() const;
  void clear_groupcount();
  static const int kGroupCountFieldNumber = 9;
  ::google::protobuf::int32 groupcount() const;
  void set_groupcount(::google::protobuf::int32 value);

  // optional int32 ObjectSource = 11;
  bool has_objectsource() const;
  void clear_objectsource();
  static const int kObjectSourceFieldNumber = 11;
  ::google::protobuf::int32 objectsource() const;
  void set_objectsource(::google::protobuf::int32 value);

  // optional int64 ReferId = 12;
  bool has_referid() const;
  void clear_referid();
  static const int kReferIdFieldNumber = 12;
  ::google::protobuf::int64 referid() const;
  void set_referid(::google::protobuf::int64 value);

  // optional int32 BlackListNumb = 13;
  bool has_blacklistnumb() const;
  void clear_blacklistnumb();
  static const int kBlackListNumbFieldNumber = 13;
  ::google::protobuf::int32 blacklistnumb() const;
  void set_blacklistnumb(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.MMSnsPostRequest)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_objectdesc();
  void clear_has_objectdesc();
  void set_has_withuserlistnumb();
  void clear_has_withuserlistnumb();
  void set_has_privacy();
  void clear_has_privacy();
  void set_has_syncflag();
  void clear_has_syncflag();
  void set_has_clientid();
  void clear_has_clientid();
  void set_has_postbgimgtype();
  void clear_has_postbgimgtype();
  void set_has_groupcount();
  void clear_has_groupcount();
  void set_has_objectsource();
  void clear_has_objectsource();
  void set_has_referid();
  void clear_has_referid();
  void set_has_blacklistnumb();
  void clear_has_blacklistnumb();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> withuserlist_;
  ::google::protobuf::RepeatedPtrField< ::std::string> groupids_;
  ::google::protobuf::RepeatedPtrField< ::std::string> blacklist_;
  ::google::protobuf::internal::ArenaStringPtr clientid_;
  ::FromCs::BaseRequest* base_;
  ::FromCs::sKBuiltinBufferT* objectdesc_;
  ::google::protobuf::int32 withuserlistnumb_;
  ::google::protobuf::int32 privacy_;
  ::google::protobuf::int32 syncflag_;
  ::google::protobuf::int32 postbgimgtype_;
  ::google::protobuf::int32 groupcount_;
  ::google::protobuf::int32 objectsource_;
  ::google::protobuf::int64 referid_;
  ::google::protobuf::int32 blacklistnumb_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MMSnsPostResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.MMSnsPostResponse) */ {
 public:
  MMSnsPostResponse();
  virtual ~MMSnsPostResponse();

  MMSnsPostResponse(const MMSnsPostResponse& from);

  inline MMSnsPostResponse& operator=(const MMSnsPostResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MMSnsPostResponse& default_instance();

  static inline const MMSnsPostResponse* internal_default_instance() {
    return reinterpret_cast<const MMSnsPostResponse*>(
               &_MMSnsPostResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    51;

  void Swap(MMSnsPostResponse* other);

  // implements Message ----------------------------------------------

  inline MMSnsPostResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  MMSnsPostResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MMSnsPostResponse& from);
  void MergeFrom(const MMSnsPostResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MMSnsPostResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .FromCs.BaseResponse base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseResponse& base() const;
  ::FromCs::BaseResponse* mutable_base();
  ::FromCs::BaseResponse* release_base();
  void set_allocated_base(::FromCs::BaseResponse* base);

  // @@protoc_insertion_point(class_scope:FromCs.MMSnsPostResponse)
 private:
  void set_has_base();
  void clear_has_base();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::FromCs::BaseResponse* base_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MmsnsuploadRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.MmsnsuploadRequest) */ {
 public:
  MmsnsuploadRequest();
  virtual ~MmsnsuploadRequest();

  MmsnsuploadRequest(const MmsnsuploadRequest& from);

  inline MmsnsuploadRequest& operator=(const MmsnsuploadRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MmsnsuploadRequest& default_instance();

  static inline const MmsnsuploadRequest* internal_default_instance() {
    return reinterpret_cast<const MmsnsuploadRequest*>(
               &_MmsnsuploadRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    52;

  void Swap(MmsnsuploadRequest* other);

  // implements Message ----------------------------------------------

  inline MmsnsuploadRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  MmsnsuploadRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MmsnsuploadRequest& from);
  void MergeFrom(const MmsnsuploadRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MmsnsuploadRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ClientId = 6;
  bool has_clientid() const;
  void clear_clientid();
  static const int kClientIdFieldNumber = 6;
  const ::std::string& clientid() const;
  void set_clientid(const ::std::string& value);
  #if LANG_CXX11
  void set_clientid(::std::string&& value);
  #endif
  void set_clientid(const char* value);
  void set_clientid(const char* value, size_t size);
  ::std::string* mutable_clientid();
  ::std::string* release_clientid();
  void set_allocated_clientid(::std::string* clientid);

  // optional string Description = 9;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 9;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // required .FromCs.BaseRequest base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseRequest& base() const;
  ::FromCs::BaseRequest* mutable_base();
  ::FromCs::BaseRequest* release_base();
  void set_allocated_base(::FromCs::BaseRequest* base);

  // required .FromCs.sKBuiltinBufferT Buffer = 5;
  bool has_buffer() const;
  void clear_buffer();
  static const int kBufferFieldNumber = 5;
  const ::FromCs::sKBuiltinBufferT& buffer() const;
  ::FromCs::sKBuiltinBufferT* mutable_buffer();
  ::FromCs::sKBuiltinBufferT* release_buffer();
  void set_allocated_buffer(::FromCs::sKBuiltinBufferT* buffer);

  // optional .FromCs.TwitterInfoObj TwitterInfo = 12;
  bool has_twitterinfo() const;
  void clear_twitterinfo();
  static const int kTwitterInfoFieldNumber = 12;
  const ::FromCs::TwitterInfoObj& twitterinfo() const;
  ::FromCs::TwitterInfoObj* mutable_twitterinfo();
  ::FromCs::TwitterInfoObj* release_twitterinfo();
  void set_allocated_twitterinfo(::FromCs::TwitterInfoObj* twitterinfo);

  // required int32 Type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // required int32 StartPos = 3;
  bool has_startpos() const;
  void clear_startpos();
  static const int kStartPosFieldNumber = 3;
  ::google::protobuf::int32 startpos() const;
  void set_startpos(::google::protobuf::int32 value);

  // required int32 TotalLen = 4;
  bool has_totallen() const;
  void clear_totallen();
  static const int kTotalLenFieldNumber = 4;
  ::google::protobuf::int32 totallen() const;
  void set_totallen(::google::protobuf::int32 value);

  // optional int32 FilterStype = 7;
  bool has_filterstype() const;
  void clear_filterstype();
  static const int kFilterStypeFieldNumber = 7;
  ::google::protobuf::int32 filterstype() const;
  void set_filterstype(::google::protobuf::int32 value);

  // optional int32 SyncFlag = 8;
  bool has_syncflag() const;
  void clear_syncflag();
  static const int kSyncFlagFieldNumber = 8;
  ::google::protobuf::int32 syncflag() const;
  void set_syncflag(::google::protobuf::int32 value);

  // optional int32 PhotoFrom = 10;
  bool has_photofrom() const;
  void clear_photofrom();
  static const int kPhotoFromFieldNumber = 10;
  ::google::protobuf::int32 photofrom() const;
  void set_photofrom(::google::protobuf::int32 value);

  // optional int32 NetType = 11;
  bool has_nettype() const;
  void clear_nettype();
  static const int kNetTypeFieldNumber = 11;
  ::google::protobuf::int32 nettype() const;
  void set_nettype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.MmsnsuploadRequest)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_type();
  void clear_has_type();
  void set_has_startpos();
  void clear_has_startpos();
  void set_has_totallen();
  void clear_has_totallen();
  void set_has_buffer();
  void clear_has_buffer();
  void set_has_clientid();
  void clear_has_clientid();
  void set_has_filterstype();
  void clear_has_filterstype();
  void set_has_syncflag();
  void clear_has_syncflag();
  void set_has_description();
  void clear_has_description();
  void set_has_photofrom();
  void clear_has_photofrom();
  void set_has_nettype();
  void clear_has_nettype();
  void set_has_twitterinfo();
  void clear_has_twitterinfo();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr clientid_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::FromCs::BaseRequest* base_;
  ::FromCs::sKBuiltinBufferT* buffer_;
  ::FromCs::TwitterInfoObj* twitterinfo_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 startpos_;
  ::google::protobuf::int32 totallen_;
  ::google::protobuf::int32 filterstype_;
  ::google::protobuf::int32 syncflag_;
  ::google::protobuf::int32 photofrom_;
  ::google::protobuf::int32 nettype_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MmsnsuploadResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.MmsnsuploadResponse) */ {
 public:
  MmsnsuploadResponse();
  virtual ~MmsnsuploadResponse();

  MmsnsuploadResponse(const MmsnsuploadResponse& from);

  inline MmsnsuploadResponse& operator=(const MmsnsuploadResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MmsnsuploadResponse& default_instance();

  static inline const MmsnsuploadResponse* internal_default_instance() {
    return reinterpret_cast<const MmsnsuploadResponse*>(
               &_MmsnsuploadResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    53;

  void Swap(MmsnsuploadResponse* other);

  // implements Message ----------------------------------------------

  inline MmsnsuploadResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  MmsnsuploadResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MmsnsuploadResponse& from);
  void MergeFrom(const MmsnsuploadResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MmsnsuploadResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .FromCs.BufferUrlObj ThumbUrls = 7;
  int thumburls_size() const;
  void clear_thumburls();
  static const int kThumbUrlsFieldNumber = 7;
  const ::FromCs::BufferUrlObj& thumburls(int index) const;
  ::FromCs::BufferUrlObj* mutable_thumburls(int index);
  ::FromCs::BufferUrlObj* add_thumburls();
  ::google::protobuf::RepeatedPtrField< ::FromCs::BufferUrlObj >*
      mutable_thumburls();
  const ::google::protobuf::RepeatedPtrField< ::FromCs::BufferUrlObj >&
      thumburls() const;

  // optional string ClientId = 4;
  bool has_clientid() const;
  void clear_clientid();
  static const int kClientIdFieldNumber = 4;
  const ::std::string& clientid() const;
  void set_clientid(const ::std::string& value);
  #if LANG_CXX11
  void set_clientid(::std::string&& value);
  #endif
  void set_clientid(const char* value);
  void set_clientid(const char* value, size_t size);
  ::std::string* mutable_clientid();
  ::std::string* release_clientid();
  void set_allocated_clientid(::std::string* clientid);

  // required .FromCs.BaseResponse base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseResponse& base() const;
  ::FromCs::BaseResponse* mutable_base();
  ::FromCs::BaseResponse* release_base();
  void set_allocated_base(::FromCs::BaseResponse* base);

  // required .FromCs.BufferUrlObj BufferUrl = 5;
  bool has_bufferurl() const;
  void clear_bufferurl();
  static const int kBufferUrlFieldNumber = 5;
  const ::FromCs::BufferUrlObj& bufferurl() const;
  ::FromCs::BufferUrlObj* mutable_bufferurl();
  ::FromCs::BufferUrlObj* release_bufferurl();
  void set_allocated_bufferurl(::FromCs::BufferUrlObj* bufferurl);

  // required int32 StartPos = 2;
  bool has_startpos() const;
  void clear_startpos();
  static const int kStartPosFieldNumber = 2;
  ::google::protobuf::int32 startpos() const;
  void set_startpos(::google::protobuf::int32 value);

  // required int32 TotalLen = 3;
  bool has_totallen() const;
  void clear_totallen();
  static const int kTotalLenFieldNumber = 3;
  ::google::protobuf::int32 totallen() const;
  void set_totallen(::google::protobuf::int32 value);

  // required int32 ThumbUrlCount = 6;
  bool has_thumburlcount() const;
  void clear_thumburlcount();
  static const int kThumbUrlCountFieldNumber = 6;
  ::google::protobuf::int32 thumburlcount() const;
  void set_thumburlcount(::google::protobuf::int32 value);

  // required int32 Type = 9;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 9;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // required int64 Id = 8;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 8;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:FromCs.MmsnsuploadResponse)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_startpos();
  void clear_has_startpos();
  void set_has_totallen();
  void clear_has_totallen();
  void set_has_clientid();
  void clear_has_clientid();
  void set_has_bufferurl();
  void clear_has_bufferurl();
  void set_has_thumburlcount();
  void clear_has_thumburlcount();
  void set_has_id();
  void clear_has_id();
  void set_has_type();
  void clear_has_type();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::FromCs::BufferUrlObj > thumburls_;
  ::google::protobuf::internal::ArenaStringPtr clientid_;
  ::FromCs::BaseResponse* base_;
  ::FromCs::BufferUrlObj* bufferurl_;
  ::google::protobuf::int32 startpos_;
  ::google::protobuf::int32 totallen_;
  ::google::protobuf::int32 thumburlcount_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int64 id_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UploadMsgImgRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.UploadMsgImgRequest) */ {
 public:
  UploadMsgImgRequest();
  virtual ~UploadMsgImgRequest();

  UploadMsgImgRequest(const UploadMsgImgRequest& from);

  inline UploadMsgImgRequest& operator=(const UploadMsgImgRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UploadMsgImgRequest& default_instance();

  static inline const UploadMsgImgRequest* internal_default_instance() {
    return reinterpret_cast<const UploadMsgImgRequest*>(
               &_UploadMsgImgRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    54;

  void Swap(UploadMsgImgRequest* other);

  // implements Message ----------------------------------------------

  inline UploadMsgImgRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  UploadMsgImgRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UploadMsgImgRequest& from);
  void MergeFrom(const UploadMsgImgRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UploadMsgImgRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string MsgSource = 10;
  bool has_msgsource() const;
  void clear_msgsource();
  static const int kMsgSourceFieldNumber = 10;
  const ::std::string& msgsource() const;
  void set_msgsource(const ::std::string& value);
  #if LANG_CXX11
  void set_msgsource(::std::string&& value);
  #endif
  void set_msgsource(const char* value);
  void set_msgsource(const char* value, size_t size);
  ::std::string* mutable_msgsource();
  ::std::string* release_msgsource();
  void set_allocated_msgsource(::std::string* msgsource);

  // optional string MediaId = 14;
  bool has_mediaid() const;
  void clear_mediaid();
  static const int kMediaIdFieldNumber = 14;
  const ::std::string& mediaid() const;
  void set_mediaid(const ::std::string& value);
  #if LANG_CXX11
  void set_mediaid(::std::string&& value);
  #endif
  void set_mediaid(const char* value);
  void set_mediaid(const char* value, size_t size);
  ::std::string* mutable_mediaid();
  ::std::string* release_mediaid();
  void set_allocated_mediaid(::std::string* mediaid);

  // optional string CDNBigImgUrl = 15;
  bool has_cdnbigimgurl() const;
  void clear_cdnbigimgurl();
  static const int kCDNBigImgUrlFieldNumber = 15;
  const ::std::string& cdnbigimgurl() const;
  void set_cdnbigimgurl(const ::std::string& value);
  #if LANG_CXX11
  void set_cdnbigimgurl(::std::string&& value);
  #endif
  void set_cdnbigimgurl(const char* value);
  void set_cdnbigimgurl(const char* value, size_t size);
  ::std::string* mutable_cdnbigimgurl();
  ::std::string* release_cdnbigimgurl();
  void set_allocated_cdnbigimgurl(::std::string* cdnbigimgurl);

  // optional string CDNMidImgUrl = 16;
  bool has_cdnmidimgurl() const;
  void clear_cdnmidimgurl();
  static const int kCDNMidImgUrlFieldNumber = 16;
  const ::std::string& cdnmidimgurl() const;
  void set_cdnmidimgurl(const ::std::string& value);
  #if LANG_CXX11
  void set_cdnmidimgurl(::std::string&& value);
  #endif
  void set_cdnmidimgurl(const char* value);
  void set_cdnmidimgurl(const char* value, size_t size);
  ::std::string* mutable_cdnmidimgurl();
  ::std::string* release_cdnmidimgurl();
  void set_allocated_cdnmidimgurl(::std::string* cdnmidimgurl);

  // optional string AESKey = 17;
  bool has_aeskey() const;
  void clear_aeskey();
  static const int kAESKeyFieldNumber = 17;
  const ::std::string& aeskey() const;
  void set_aeskey(const ::std::string& value);
  #if LANG_CXX11
  void set_aeskey(::std::string&& value);
  #endif
  void set_aeskey(const char* value);
  void set_aeskey(const char* value, size_t size);
  ::std::string* mutable_aeskey();
  ::std::string* release_aeskey();
  void set_allocated_aeskey(::std::string* aeskey);

  // optional string CDNThumbImgUrl = 21;
  bool has_cdnthumbimgurl() const;
  void clear_cdnthumbimgurl();
  static const int kCDNThumbImgUrlFieldNumber = 21;
  const ::std::string& cdnthumbimgurl() const;
  void set_cdnthumbimgurl(const ::std::string& value);
  #if LANG_CXX11
  void set_cdnthumbimgurl(::std::string&& value);
  #endif
  void set_cdnthumbimgurl(const char* value);
  void set_cdnthumbimgurl(const char* value, size_t size);
  ::std::string* mutable_cdnthumbimgurl();
  ::std::string* release_cdnthumbimgurl();
  void set_allocated_cdnthumbimgurl(::std::string* cdnthumbimgurl);

  // optional string CDNThumbAESKey = 25;
  bool has_cdnthumbaeskey() const;
  void clear_cdnthumbaeskey();
  static const int kCDNThumbAESKeyFieldNumber = 25;
  const ::std::string& cdnthumbaeskey() const;
  void set_cdnthumbaeskey(const ::std::string& value);
  #if LANG_CXX11
  void set_cdnthumbaeskey(::std::string&& value);
  #endif
  void set_cdnthumbaeskey(const char* value);
  void set_cdnthumbaeskey(const char* value, size_t size);
  ::std::string* mutable_cdnthumbaeskey();
  ::std::string* release_cdnthumbaeskey();
  void set_allocated_cdnthumbaeskey(::std::string* cdnthumbaeskey);

  // required .FromCs.BaseRequest base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseRequest& base() const;
  ::FromCs::BaseRequest* mutable_base();
  ::FromCs::BaseRequest* release_base();
  void set_allocated_base(::FromCs::BaseRequest* base);

  // required .FromCs.sKBuiltinstringT ClientImgId = 2;
  bool has_clientimgid() const;
  void clear_clientimgid();
  static const int kClientImgIdFieldNumber = 2;
  const ::FromCs::sKBuiltinstringT& clientimgid() const;
  ::FromCs::sKBuiltinstringT* mutable_clientimgid();
  ::FromCs::sKBuiltinstringT* release_clientimgid();
  void set_allocated_clientimgid(::FromCs::sKBuiltinstringT* clientimgid);

  // required .FromCs.sKBuiltinstringT FromUserName = 3;
  bool has_fromusername() const;
  void clear_fromusername();
  static const int kFromUserNameFieldNumber = 3;
  const ::FromCs::sKBuiltinstringT& fromusername() const;
  ::FromCs::sKBuiltinstringT* mutable_fromusername();
  ::FromCs::sKBuiltinstringT* release_fromusername();
  void set_allocated_fromusername(::FromCs::sKBuiltinstringT* fromusername);

  // required .FromCs.sKBuiltinstringT ToUserName = 4;
  bool has_tousername() const;
  void clear_tousername();
  static const int kToUserNameFieldNumber = 4;
  const ::FromCs::sKBuiltinstringT& tousername() const;
  ::FromCs::sKBuiltinstringT* mutable_tousername();
  ::FromCs::sKBuiltinstringT* release_tousername();
  void set_allocated_tousername(::FromCs::sKBuiltinstringT* tousername);

  // required .FromCs.sKBuiltinBufferT Data = 8;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 8;
  const ::FromCs::sKBuiltinBufferT& data() const;
  ::FromCs::sKBuiltinBufferT* mutable_data();
  ::FromCs::sKBuiltinBufferT* release_data();
  void set_allocated_data(::FromCs::sKBuiltinBufferT* data);

  // required int32 TotalLen = 5;
  bool has_totallen() const;
  void clear_totallen();
  static const int kTotalLenFieldNumber = 5;
  ::google::protobuf::int32 totallen() const;
  void set_totallen(::google::protobuf::int32 value);

  // required int32 StartPos = 6;
  bool has_startpos() const;
  void clear_startpos();
  static const int kStartPosFieldNumber = 6;
  ::google::protobuf::int32 startpos() const;
  void set_startpos(::google::protobuf::int32 value);

  // required int32 DataLen = 7;
  bool has_datalen() const;
  void clear_datalen();
  static const int kDataLenFieldNumber = 7;
  ::google::protobuf::int32 datalen() const;
  void set_datalen(::google::protobuf::int32 value);

  // optional int32 MsgType = 9;
  bool has_msgtype() const;
  void clear_msgtype();
  static const int kMsgTypeFieldNumber = 9;
  ::google::protobuf::int32 msgtype() const;
  void set_msgtype(::google::protobuf::int32 value);

  // optional int32 CompressType = 11;
  bool has_compresstype() const;
  void clear_compresstype();
  static const int kCompressTypeFieldNumber = 11;
  ::google::protobuf::int32 compresstype() const;
  void set_compresstype(::google::protobuf::int32 value);

  // optional int32 NetType = 12;
  bool has_nettype() const;
  void clear_nettype();
  static const int kNetTypeFieldNumber = 12;
  ::google::protobuf::int32 nettype() const;
  void set_nettype(::google::protobuf::int32 value);

  // optional int32 PhotoFrom = 13;
  bool has_photofrom() const;
  void clear_photofrom();
  static const int kPhotoFromFieldNumber = 13;
  ::google::protobuf::int32 photofrom() const;
  void set_photofrom(::google::protobuf::int32 value);

  // optional int32 EncryVer = 18;
  bool has_encryver() const;
  void clear_encryver();
  static const int kEncryVerFieldNumber = 18;
  ::google::protobuf::int32 encryver() const;
  void set_encryver(::google::protobuf::int32 value);

  // optional int32 CDNBigImgSize = 19;
  bool has_cdnbigimgsize() const;
  void clear_cdnbigimgsize();
  static const int kCDNBigImgSizeFieldNumber = 19;
  ::google::protobuf::int32 cdnbigimgsize() const;
  void set_cdnbigimgsize(::google::protobuf::int32 value);

  // optional int32 CDNMidImgSize = 20;
  bool has_cdnmidimgsize() const;
  void clear_cdnmidimgsize();
  static const int kCDNMidImgSizeFieldNumber = 20;
  ::google::protobuf::int32 cdnmidimgsize() const;
  void set_cdnmidimgsize(::google::protobuf::int32 value);

  // optional int32 CDNThumbImgSize = 22;
  bool has_cdnthumbimgsize() const;
  void clear_cdnthumbimgsize();
  static const int kCDNThumbImgSizeFieldNumber = 22;
  ::google::protobuf::int32 cdnthumbimgsize() const;
  void set_cdnthumbimgsize(::google::protobuf::int32 value);

  // optional int32 CDNThumbImgHeight = 23;
  bool has_cdnthumbimgheight() const;
  void clear_cdnthumbimgheight();
  static const int kCDNThumbImgHeightFieldNumber = 23;
  ::google::protobuf::int32 cdnthumbimgheight() const;
  void set_cdnthumbimgheight(::google::protobuf::int32 value);

  // optional int32 CDNThumbImgWidth = 24;
  bool has_cdnthumbimgwidth() const;
  void clear_cdnthumbimgwidth();
  static const int kCDNThumbImgWidthFieldNumber = 24;
  ::google::protobuf::int32 cdnthumbimgwidth() const;
  void set_cdnthumbimgwidth(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.UploadMsgImgRequest)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_clientimgid();
  void clear_has_clientimgid();
  void set_has_fromusername();
  void clear_has_fromusername();
  void set_has_tousername();
  void clear_has_tousername();
  void set_has_totallen();
  void clear_has_totallen();
  void set_has_startpos();
  void clear_has_startpos();
  void set_has_datalen();
  void clear_has_datalen();
  void set_has_data();
  void clear_has_data();
  void set_has_msgtype();
  void clear_has_msgtype();
  void set_has_msgsource();
  void clear_has_msgsource();
  void set_has_compresstype();
  void clear_has_compresstype();
  void set_has_nettype();
  void clear_has_nettype();
  void set_has_photofrom();
  void clear_has_photofrom();
  void set_has_mediaid();
  void clear_has_mediaid();
  void set_has_cdnbigimgurl();
  void clear_has_cdnbigimgurl();
  void set_has_cdnmidimgurl();
  void clear_has_cdnmidimgurl();
  void set_has_aeskey();
  void clear_has_aeskey();
  void set_has_encryver();
  void clear_has_encryver();
  void set_has_cdnbigimgsize();
  void clear_has_cdnbigimgsize();
  void set_has_cdnmidimgsize();
  void clear_has_cdnmidimgsize();
  void set_has_cdnthumbimgurl();
  void clear_has_cdnthumbimgurl();
  void set_has_cdnthumbimgsize();
  void clear_has_cdnthumbimgsize();
  void set_has_cdnthumbimgheight();
  void clear_has_cdnthumbimgheight();
  void set_has_cdnthumbimgwidth();
  void clear_has_cdnthumbimgwidth();
  void set_has_cdnthumbaeskey();
  void clear_has_cdnthumbaeskey();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr msgsource_;
  ::google::protobuf::internal::ArenaStringPtr mediaid_;
  ::google::protobuf::internal::ArenaStringPtr cdnbigimgurl_;
  ::google::protobuf::internal::ArenaStringPtr cdnmidimgurl_;
  ::google::protobuf::internal::ArenaStringPtr aeskey_;
  ::google::protobuf::internal::ArenaStringPtr cdnthumbimgurl_;
  ::google::protobuf::internal::ArenaStringPtr cdnthumbaeskey_;
  ::FromCs::BaseRequest* base_;
  ::FromCs::sKBuiltinstringT* clientimgid_;
  ::FromCs::sKBuiltinstringT* fromusername_;
  ::FromCs::sKBuiltinstringT* tousername_;
  ::FromCs::sKBuiltinBufferT* data_;
  ::google::protobuf::int32 totallen_;
  ::google::protobuf::int32 startpos_;
  ::google::protobuf::int32 datalen_;
  ::google::protobuf::int32 msgtype_;
  ::google::protobuf::int32 compresstype_;
  ::google::protobuf::int32 nettype_;
  ::google::protobuf::int32 photofrom_;
  ::google::protobuf::int32 encryver_;
  ::google::protobuf::int32 cdnbigimgsize_;
  ::google::protobuf::int32 cdnmidimgsize_;
  ::google::protobuf::int32 cdnthumbimgsize_;
  ::google::protobuf::int32 cdnthumbimgheight_;
  ::google::protobuf::int32 cdnthumbimgwidth_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UploadMsgImgResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.UploadMsgImgResponse) */ {
 public:
  UploadMsgImgResponse();
  virtual ~UploadMsgImgResponse();

  UploadMsgImgResponse(const UploadMsgImgResponse& from);

  inline UploadMsgImgResponse& operator=(const UploadMsgImgResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UploadMsgImgResponse& default_instance();

  static inline const UploadMsgImgResponse* internal_default_instance() {
    return reinterpret_cast<const UploadMsgImgResponse*>(
               &_UploadMsgImgResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    55;

  void Swap(UploadMsgImgResponse* other);

  // implements Message ----------------------------------------------

  inline UploadMsgImgResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  UploadMsgImgResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UploadMsgImgResponse& from);
  void MergeFrom(const UploadMsgImgResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UploadMsgImgResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .FromCs.BaseResponse base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseResponse& base() const;
  ::FromCs::BaseResponse* mutable_base();
  ::FromCs::BaseResponse* release_base();
  void set_allocated_base(::FromCs::BaseResponse* base);

  // required .FromCs.sKBuiltinstringT ClientImgId = 3;
  bool has_clientimgid() const;
  void clear_clientimgid();
  static const int kClientImgIdFieldNumber = 3;
  const ::FromCs::sKBuiltinstringT& clientimgid() const;
  ::FromCs::sKBuiltinstringT* mutable_clientimgid();
  ::FromCs::sKBuiltinstringT* release_clientimgid();
  void set_allocated_clientimgid(::FromCs::sKBuiltinstringT* clientimgid);

  // required .FromCs.sKBuiltinstringT FromUserName = 4;
  bool has_fromusername() const;
  void clear_fromusername();
  static const int kFromUserNameFieldNumber = 4;
  const ::FromCs::sKBuiltinstringT& fromusername() const;
  ::FromCs::sKBuiltinstringT* mutable_fromusername();
  ::FromCs::sKBuiltinstringT* release_fromusername();
  void set_allocated_fromusername(::FromCs::sKBuiltinstringT* fromusername);

  // required .FromCs.sKBuiltinstringT ToUserName = 5;
  bool has_tousername() const;
  void clear_tousername();
  static const int kToUserNameFieldNumber = 5;
  const ::FromCs::sKBuiltinstringT& tousername() const;
  ::FromCs::sKBuiltinstringT* mutable_tousername();
  ::FromCs::sKBuiltinstringT* release_tousername();
  void set_allocated_tousername(::FromCs::sKBuiltinstringT* tousername);

  // required int32 MsgId = 2;
  bool has_msgid() const;
  void clear_msgid();
  static const int kMsgIdFieldNumber = 2;
  ::google::protobuf::int32 msgid() const;
  void set_msgid(::google::protobuf::int32 value);

  // required int32 TotalLen = 6;
  bool has_totallen() const;
  void clear_totallen();
  static const int kTotalLenFieldNumber = 6;
  ::google::protobuf::int32 totallen() const;
  void set_totallen(::google::protobuf::int32 value);

  // required int32 StartPos = 7;
  bool has_startpos() const;
  void clear_startpos();
  static const int kStartPosFieldNumber = 7;
  ::google::protobuf::int32 startpos() const;
  void set_startpos(::google::protobuf::int32 value);

  // required int32 DataLen = 8;
  bool has_datalen() const;
  void clear_datalen();
  static const int kDataLenFieldNumber = 8;
  ::google::protobuf::int32 datalen() const;
  void set_datalen(::google::protobuf::int32 value);

  // required int32 CreateTime = 9;
  bool has_createtime() const;
  void clear_createtime();
  static const int kCreateTimeFieldNumber = 9;
  ::google::protobuf::int32 createtime() const;
  void set_createtime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.UploadMsgImgResponse)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_msgid();
  void clear_has_msgid();
  void set_has_clientimgid();
  void clear_has_clientimgid();
  void set_has_fromusername();
  void clear_has_fromusername();
  void set_has_tousername();
  void clear_has_tousername();
  void set_has_totallen();
  void clear_has_totallen();
  void set_has_startpos();
  void clear_has_startpos();
  void set_has_datalen();
  void clear_has_datalen();
  void set_has_createtime();
  void clear_has_createtime();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::FromCs::BaseResponse* base_;
  ::FromCs::sKBuiltinstringT* clientimgid_;
  ::FromCs::sKBuiltinstringT* fromusername_;
  ::FromCs::sKBuiltinstringT* tousername_;
  ::google::protobuf::int32 msgid_;
  ::google::protobuf::int32 totallen_;
  ::google::protobuf::int32 startpos_;
  ::google::protobuf::int32 datalen_;
  ::google::protobuf::int32 createtime_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GeneralSetRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.GeneralSetRequest) */ {
 public:
  GeneralSetRequest();
  virtual ~GeneralSetRequest();

  GeneralSetRequest(const GeneralSetRequest& from);

  inline GeneralSetRequest& operator=(const GeneralSetRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GeneralSetRequest& default_instance();

  static inline const GeneralSetRequest* internal_default_instance() {
    return reinterpret_cast<const GeneralSetRequest*>(
               &_GeneralSetRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    56;

  void Swap(GeneralSetRequest* other);

  // implements Message ----------------------------------------------

  inline GeneralSetRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GeneralSetRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GeneralSetRequest& from);
  void MergeFrom(const GeneralSetRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GeneralSetRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string SetValue = 3;
  bool has_setvalue() const;
  void clear_setvalue();
  static const int kSetValueFieldNumber = 3;
  const ::std::string& setvalue() const;
  void set_setvalue(const ::std::string& value);
  #if LANG_CXX11
  void set_setvalue(::std::string&& value);
  #endif
  void set_setvalue(const char* value);
  void set_setvalue(const char* value, size_t size);
  ::std::string* mutable_setvalue();
  ::std::string* release_setvalue();
  void set_allocated_setvalue(::std::string* setvalue);

  // required .FromCs.BaseRequest base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseRequest& base() const;
  ::FromCs::BaseRequest* mutable_base();
  ::FromCs::BaseRequest* release_base();
  void set_allocated_base(::FromCs::BaseRequest* base);

  // required int32 SetType = 2;
  bool has_settype() const;
  void clear_settype();
  static const int kSetTypeFieldNumber = 2;
  ::google::protobuf::int32 settype() const;
  void set_settype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.GeneralSetRequest)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_settype();
  void clear_has_settype();
  void set_has_setvalue();
  void clear_has_setvalue();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr setvalue_;
  ::FromCs::BaseRequest* base_;
  ::google::protobuf::int32 settype_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GeneralSetResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.GeneralSetResponse) */ {
 public:
  GeneralSetResponse();
  virtual ~GeneralSetResponse();

  GeneralSetResponse(const GeneralSetResponse& from);

  inline GeneralSetResponse& operator=(const GeneralSetResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GeneralSetResponse& default_instance();

  static inline const GeneralSetResponse* internal_default_instance() {
    return reinterpret_cast<const GeneralSetResponse*>(
               &_GeneralSetResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    57;

  void Swap(GeneralSetResponse* other);

  // implements Message ----------------------------------------------

  inline GeneralSetResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GeneralSetResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GeneralSetResponse& from);
  void MergeFrom(const GeneralSetResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GeneralSetResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .FromCs.BaseResponse base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseResponse& base() const;
  ::FromCs::BaseResponse* mutable_base();
  ::FromCs::BaseResponse* release_base();
  void set_allocated_base(::FromCs::BaseResponse* base);

  // @@protoc_insertion_point(class_scope:FromCs.GeneralSetResponse)
 private:
  void set_has_base();
  void clear_has_base();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::FromCs::BaseResponse* base_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UnbindqqRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.UnbindqqRequest) */ {
 public:
  UnbindqqRequest();
  virtual ~UnbindqqRequest();

  UnbindqqRequest(const UnbindqqRequest& from);

  inline UnbindqqRequest& operator=(const UnbindqqRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UnbindqqRequest& default_instance();

  static inline const UnbindqqRequest* internal_default_instance() {
    return reinterpret_cast<const UnbindqqRequest*>(
               &_UnbindqqRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    58;

  void Swap(UnbindqqRequest* other);

  // implements Message ----------------------------------------------

  inline UnbindqqRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  UnbindqqRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UnbindqqRequest& from);
  void MergeFrom(const UnbindqqRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UnbindqqRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Ticket = 2;
  bool has_ticket() const;
  void clear_ticket();
  static const int kTicketFieldNumber = 2;
  const ::std::string& ticket() const;
  void set_ticket(const ::std::string& value);
  #if LANG_CXX11
  void set_ticket(::std::string&& value);
  #endif
  void set_ticket(const char* value);
  void set_ticket(const char* value, size_t size);
  ::std::string* mutable_ticket();
  ::std::string* release_ticket();
  void set_allocated_ticket(::std::string* ticket);

  // required .FromCs.BaseRequest base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseRequest& base() const;
  ::FromCs::BaseRequest* mutable_base();
  ::FromCs::BaseRequest* release_base();
  void set_allocated_base(::FromCs::BaseRequest* base);

  // @@protoc_insertion_point(class_scope:FromCs.UnbindqqRequest)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_ticket();
  void clear_has_ticket();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr ticket_;
  ::FromCs::BaseRequest* base_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UnbindqqResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.UnbindqqResponse) */ {
 public:
  UnbindqqResponse();
  virtual ~UnbindqqResponse();

  UnbindqqResponse(const UnbindqqResponse& from);

  inline UnbindqqResponse& operator=(const UnbindqqResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UnbindqqResponse& default_instance();

  static inline const UnbindqqResponse* internal_default_instance() {
    return reinterpret_cast<const UnbindqqResponse*>(
               &_UnbindqqResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    59;

  void Swap(UnbindqqResponse* other);

  // implements Message ----------------------------------------------

  inline UnbindqqResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  UnbindqqResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UnbindqqResponse& from);
  void MergeFrom(const UnbindqqResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UnbindqqResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .FromCs.BaseResponse base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseResponse& base() const;
  ::FromCs::BaseResponse* mutable_base();
  ::FromCs::BaseResponse* release_base();
  void set_allocated_base(::FromCs::BaseResponse* base);

  // @@protoc_insertion_point(class_scope:FromCs.UnbindqqResponse)
 private:
  void set_has_base();
  void clear_has_base();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::FromCs::BaseResponse* base_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SendAppMsgRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.SendAppMsgRequest) */ {
 public:
  SendAppMsgRequest();
  virtual ~SendAppMsgRequest();

  SendAppMsgRequest(const SendAppMsgRequest& from);

  inline SendAppMsgRequest& operator=(const SendAppMsgRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SendAppMsgRequest& default_instance();

  static inline const SendAppMsgRequest* internal_default_instance() {
    return reinterpret_cast<const SendAppMsgRequest*>(
               &_SendAppMsgRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    60;

  void Swap(SendAppMsgRequest* other);

  // implements Message ----------------------------------------------

  inline SendAppMsgRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SendAppMsgRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SendAppMsgRequest& from);
  void MergeFrom(const SendAppMsgRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SendAppMsgRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string CommentUrl = 3;
  bool has_commenturl() const;
  void clear_commenturl();
  static const int kCommentUrlFieldNumber = 3;
  const ::std::string& commenturl() const;
  void set_commenturl(const ::std::string& value);
  #if LANG_CXX11
  void set_commenturl(::std::string&& value);
  #endif
  void set_commenturl(const char* value);
  void set_commenturl(const char* value, size_t size);
  ::std::string* mutable_commenturl();
  ::std::string* release_commenturl();
  void set_allocated_commenturl(::std::string* commenturl);

  // required .FromCs.BaseRequest base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseRequest& base() const;
  ::FromCs::BaseRequest* mutable_base();
  ::FromCs::BaseRequest* release_base();
  void set_allocated_base(::FromCs::BaseRequest* base);

  // required .FromCs.AppMsgObject Msg = 2;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::FromCs::AppMsgObject& msg() const;
  ::FromCs::AppMsgObject* mutable_msg();
  ::FromCs::AppMsgObject* release_msg();
  void set_allocated_msg(::FromCs::AppMsgObject* msg);

  // @@protoc_insertion_point(class_scope:FromCs.SendAppMsgRequest)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_msg();
  void clear_has_msg();
  void set_has_commenturl();
  void clear_has_commenturl();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr commenturl_;
  ::FromCs::BaseRequest* base_;
  ::FromCs::AppMsgObject* msg_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SendAppMsgResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.SendAppMsgResponse) */ {
 public:
  SendAppMsgResponse();
  virtual ~SendAppMsgResponse();

  SendAppMsgResponse(const SendAppMsgResponse& from);

  inline SendAppMsgResponse& operator=(const SendAppMsgResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SendAppMsgResponse& default_instance();

  static inline const SendAppMsgResponse* internal_default_instance() {
    return reinterpret_cast<const SendAppMsgResponse*>(
               &_SendAppMsgResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    61;

  void Swap(SendAppMsgResponse* other);

  // implements Message ----------------------------------------------

  inline SendAppMsgResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  SendAppMsgResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SendAppMsgResponse& from);
  void MergeFrom(const SendAppMsgResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SendAppMsgResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string AppId = 2;
  bool has_appid() const;
  void clear_appid();
  static const int kAppIdFieldNumber = 2;
  const ::std::string& appid() const;
  void set_appid(const ::std::string& value);
  #if LANG_CXX11
  void set_appid(::std::string&& value);
  #endif
  void set_appid(const char* value);
  void set_appid(const char* value, size_t size);
  ::std::string* mutable_appid();
  ::std::string* release_appid();
  void set_allocated_appid(::std::string* appid);

  // optional string FromUserName = 3;
  bool has_fromusername() const;
  void clear_fromusername();
  static const int kFromUserNameFieldNumber = 3;
  const ::std::string& fromusername() const;
  void set_fromusername(const ::std::string& value);
  #if LANG_CXX11
  void set_fromusername(::std::string&& value);
  #endif
  void set_fromusername(const char* value);
  void set_fromusername(const char* value, size_t size);
  ::std::string* mutable_fromusername();
  ::std::string* release_fromusername();
  void set_allocated_fromusername(::std::string* fromusername);

  // optional string ToUserName = 4;
  bool has_tousername() const;
  void clear_tousername();
  static const int kToUserNameFieldNumber = 4;
  const ::std::string& tousername() const;
  void set_tousername(const ::std::string& value);
  #if LANG_CXX11
  void set_tousername(::std::string&& value);
  #endif
  void set_tousername(const char* value);
  void set_tousername(const char* value, size_t size);
  ::std::string* mutable_tousername();
  ::std::string* release_tousername();
  void set_allocated_tousername(::std::string* tousername);

  // optional string ClientMsgId = 6;
  bool has_clientmsgid() const;
  void clear_clientmsgid();
  static const int kClientMsgIdFieldNumber = 6;
  const ::std::string& clientmsgid() const;
  void set_clientmsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_clientmsgid(::std::string&& value);
  #endif
  void set_clientmsgid(const char* value);
  void set_clientmsgid(const char* value, size_t size);
  ::std::string* mutable_clientmsgid();
  ::std::string* release_clientmsgid();
  void set_allocated_clientmsgid(::std::string* clientmsgid);

  // required .FromCs.BaseResponse base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseResponse& base() const;
  ::FromCs::BaseResponse* mutable_base();
  ::FromCs::BaseResponse* release_base();
  void set_allocated_base(::FromCs::BaseResponse* base);

  // required int32 MsgId = 5;
  bool has_msgid() const;
  void clear_msgid();
  static const int kMsgIdFieldNumber = 5;
  ::google::protobuf::int32 msgid() const;
  void set_msgid(::google::protobuf::int32 value);

  // required int32 CreateTime = 7;
  bool has_createtime() const;
  void clear_createtime();
  static const int kCreateTimeFieldNumber = 7;
  ::google::protobuf::int32 createtime() const;
  void set_createtime(::google::protobuf::int32 value);

  // optional int32 Type = 8;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 8;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.SendAppMsgResponse)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_appid();
  void clear_has_appid();
  void set_has_fromusername();
  void clear_has_fromusername();
  void set_has_tousername();
  void clear_has_tousername();
  void set_has_msgid();
  void clear_has_msgid();
  void set_has_clientmsgid();
  void clear_has_clientmsgid();
  void set_has_createtime();
  void clear_has_createtime();
  void set_has_type();
  void clear_has_type();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr appid_;
  ::google::protobuf::internal::ArenaStringPtr fromusername_;
  ::google::protobuf::internal::ArenaStringPtr tousername_;
  ::google::protobuf::internal::ArenaStringPtr clientmsgid_;
  ::FromCs::BaseResponse* base_;
  ::google::protobuf::int32 msgid_;
  ::google::protobuf::int32 createtime_;
  ::google::protobuf::int32 type_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BindOpMobileRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.BindOpMobileRequest) */ {
 public:
  BindOpMobileRequest();
  virtual ~BindOpMobileRequest();

  BindOpMobileRequest(const BindOpMobileRequest& from);

  inline BindOpMobileRequest& operator=(const BindOpMobileRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BindOpMobileRequest& default_instance();

  static inline const BindOpMobileRequest* internal_default_instance() {
    return reinterpret_cast<const BindOpMobileRequest*>(
               &_BindOpMobileRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    62;

  void Swap(BindOpMobileRequest* other);

  // implements Message ----------------------------------------------

  inline BindOpMobileRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  BindOpMobileRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BindOpMobileRequest& from);
  void MergeFrom(const BindOpMobileRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BindOpMobileRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string UserName = 2;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 2;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // optional string Mobile = 3;
  bool has_mobile() const;
  void clear_mobile();
  static const int kMobileFieldNumber = 3;
  const ::std::string& mobile() const;
  void set_mobile(const ::std::string& value);
  #if LANG_CXX11
  void set_mobile(::std::string&& value);
  #endif
  void set_mobile(const char* value);
  void set_mobile(const char* value, size_t size);
  ::std::string* mutable_mobile();
  ::std::string* release_mobile();
  void set_allocated_mobile(::std::string* mobile);

  // optional string Verifycode = 5;
  bool has_verifycode() const;
  void clear_verifycode();
  static const int kVerifycodeFieldNumber = 5;
  const ::std::string& verifycode() const;
  void set_verifycode(const ::std::string& value);
  #if LANG_CXX11
  void set_verifycode(::std::string&& value);
  #endif
  void set_verifycode(const char* value);
  void set_verifycode(const char* value, size_t size);
  ::std::string* mutable_verifycode();
  ::std::string* release_verifycode();
  void set_allocated_verifycode(::std::string* verifycode);

  // optional string DialLang = 7;
  bool has_diallang() const;
  void clear_diallang();
  static const int kDialLangFieldNumber = 7;
  const ::std::string& diallang() const;
  void set_diallang(const ::std::string& value);
  #if LANG_CXX11
  void set_diallang(::std::string&& value);
  #endif
  void set_diallang(const char* value);
  void set_diallang(const char* value, size_t size);
  ::std::string* mutable_diallang();
  ::std::string* release_diallang();
  void set_allocated_diallang(::std::string* diallang);

  // optional string AuthTicket = 8;
  bool has_authticket() const;
  void clear_authticket();
  static const int kAuthTicketFieldNumber = 8;
  const ::std::string& authticket() const;
  void set_authticket(const ::std::string& value);
  #if LANG_CXX11
  void set_authticket(::std::string&& value);
  #endif
  void set_authticket(const char* value);
  void set_authticket(const char* value, size_t size);
  ::std::string* mutable_authticket();
  ::std::string* release_authticket();
  void set_allocated_authticket(::std::string* authticket);

  // optional string SafeDeviceName = 10;
  bool has_safedevicename() const;
  void clear_safedevicename();
  static const int kSafeDeviceNameFieldNumber = 10;
  const ::std::string& safedevicename() const;
  void set_safedevicename(const ::std::string& value);
  #if LANG_CXX11
  void set_safedevicename(::std::string&& value);
  #endif
  void set_safedevicename(const char* value);
  void set_safedevicename(const char* value, size_t size);
  ::std::string* mutable_safedevicename();
  ::std::string* release_safedevicename();
  void set_allocated_safedevicename(::std::string* safedevicename);

  // optional string SafeDeviceType = 11;
  bool has_safedevicetype() const;
  void clear_safedevicetype();
  static const int kSafeDeviceTypeFieldNumber = 11;
  const ::std::string& safedevicetype() const;
  void set_safedevicetype(const ::std::string& value);
  #if LANG_CXX11
  void set_safedevicetype(::std::string&& value);
  #endif
  void set_safedevicetype(const char* value);
  void set_safedevicetype(const char* value, size_t size);
  ::std::string* mutable_safedevicetype();
  ::std::string* release_safedevicetype();
  void set_allocated_safedevicetype(::std::string* safedevicetype);

  // required .FromCs.BaseRequest base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseRequest& base() const;
  ::FromCs::BaseRequest* mutable_base();
  ::FromCs::BaseRequest* release_base();
  void set_allocated_base(::FromCs::BaseRequest* base);

  // optional .FromCs.sKBuiltinBufferT RandomEncryKey = 12;
  bool has_randomencrykey() const;
  void clear_randomencrykey();
  static const int kRandomEncryKeyFieldNumber = 12;
  const ::FromCs::sKBuiltinBufferT& randomencrykey() const;
  ::FromCs::sKBuiltinBufferT* mutable_randomencrykey();
  ::FromCs::sKBuiltinBufferT* release_randomencrykey();
  void set_allocated_randomencrykey(::FromCs::sKBuiltinBufferT* randomencrykey);

  // required int32 Opcode = 4;
  bool has_opcode() const;
  void clear_opcode();
  static const int kOpcodeFieldNumber = 4;
  ::google::protobuf::int32 opcode() const;
  void set_opcode(::google::protobuf::int32 value);

  // optional int32 DialFlag = 6;
  bool has_dialflag() const;
  void clear_dialflag();
  static const int kDialFlagFieldNumber = 6;
  ::google::protobuf::int32 dialflag() const;
  void set_dialflag(::google::protobuf::int32 value);

  // optional int32 ForceReg = 9;
  bool has_forcereg() const;
  void clear_forcereg();
  static const int kForceRegFieldNumber = 9;
  ::google::protobuf::int32 forcereg() const;
  void set_forcereg(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.BindOpMobileRequest)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_username();
  void clear_has_username();
  void set_has_mobile();
  void clear_has_mobile();
  void set_has_opcode();
  void clear_has_opcode();
  void set_has_verifycode();
  void clear_has_verifycode();
  void set_has_dialflag();
  void clear_has_dialflag();
  void set_has_diallang();
  void clear_has_diallang();
  void set_has_authticket();
  void clear_has_authticket();
  void set_has_forcereg();
  void clear_has_forcereg();
  void set_has_safedevicename();
  void clear_has_safedevicename();
  void set_has_safedevicetype();
  void clear_has_safedevicetype();
  void set_has_randomencrykey();
  void clear_has_randomencrykey();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr mobile_;
  ::google::protobuf::internal::ArenaStringPtr verifycode_;
  ::google::protobuf::internal::ArenaStringPtr diallang_;
  ::google::protobuf::internal::ArenaStringPtr authticket_;
  ::google::protobuf::internal::ArenaStringPtr safedevicename_;
  ::google::protobuf::internal::ArenaStringPtr safedevicetype_;
  ::FromCs::BaseRequest* base_;
  ::FromCs::sKBuiltinBufferT* randomencrykey_;
  ::google::protobuf::int32 opcode_;
  ::google::protobuf::int32 dialflag_;
  ::google::protobuf::int32 forcereg_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BindOpMobileResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.BindOpMobileResponse) */ {
 public:
  BindOpMobileResponse();
  virtual ~BindOpMobileResponse();

  BindOpMobileResponse(const BindOpMobileResponse& from);

  inline BindOpMobileResponse& operator=(const BindOpMobileResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BindOpMobileResponse& default_instance();

  static inline const BindOpMobileResponse* internal_default_instance() {
    return reinterpret_cast<const BindOpMobileResponse*>(
               &_BindOpMobileResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    63;

  void Swap(BindOpMobileResponse* other);

  // implements Message ----------------------------------------------

  inline BindOpMobileResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  BindOpMobileResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BindOpMobileResponse& from);
  void MergeFrom(const BindOpMobileResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BindOpMobileResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ticket = 2;
  bool has_ticket() const;
  void clear_ticket();
  static const int kTicketFieldNumber = 2;
  const ::std::string& ticket() const;
  void set_ticket(const ::std::string& value);
  #if LANG_CXX11
  void set_ticket(::std::string&& value);
  #endif
  void set_ticket(const char* value);
  void set_ticket(const char* value, size_t size);
  ::std::string* mutable_ticket();
  ::std::string* release_ticket();
  void set_allocated_ticket(::std::string* ticket);

  // optional string SmsNo = 3;
  bool has_smsno() const;
  void clear_smsno();
  static const int kSmsNoFieldNumber = 3;
  const ::std::string& smsno() const;
  void set_smsno(const ::std::string& value);
  #if LANG_CXX11
  void set_smsno(::std::string&& value);
  #endif
  void set_smsno(const char* value);
  void set_smsno(const char* value, size_t size);
  ::std::string* mutable_smsno();
  ::std::string* release_smsno();
  void set_allocated_smsno(::std::string* smsno);

  // optional string Pwd = 5;
  bool has_pwd() const;
  void clear_pwd();
  static const int kPwdFieldNumber = 5;
  const ::std::string& pwd() const;
  void set_pwd(const ::std::string& value);
  #if LANG_CXX11
  void set_pwd(::std::string&& value);
  #endif
  void set_pwd(const char* value);
  void set_pwd(const char* value, size_t size);
  ::std::string* mutable_pwd();
  ::std::string* release_pwd();
  void set_allocated_pwd(::std::string* pwd);

  // optional string Username = 6;
  bool has_username() const;
  void clear_username();
  static const int kUsernameFieldNumber = 6;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // optional string AuthTicket = 10;
  bool has_authticket() const;
  void clear_authticket();
  static const int kAuthTicketFieldNumber = 10;
  const ::std::string& authticket() const;
  void set_authticket(const ::std::string& value);
  #if LANG_CXX11
  void set_authticket(::std::string&& value);
  #endif
  void set_authticket(const char* value);
  void set_authticket(const char* value, size_t size);
  ::std::string* mutable_authticket();
  ::std::string* release_authticket();
  void set_allocated_authticket(::std::string* authticket);

  // optional string MainAcct = 12;
  bool has_mainacct() const;
  void clear_mainacct();
  static const int kMainAcctFieldNumber = 12;
  const ::std::string& mainacct() const;
  void set_mainacct(const ::std::string& value);
  #if LANG_CXX11
  void set_mainacct(::std::string&& value);
  #endif
  void set_mainacct(const char* value);
  void set_mainacct(const char* value, size_t size);
  ::std::string* mutable_mainacct();
  ::std::string* release_mainacct();
  void set_allocated_mainacct(::std::string* mainacct);

  // required .FromCs.BaseResponse base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseResponse& base() const;
  ::FromCs::BaseResponse* mutable_base();
  ::FromCs::BaseResponse* release_base();
  void set_allocated_base(::FromCs::BaseResponse* base);

  // optional .FromCs.NewHostListType NewHostList = 7;
  bool has_newhostlist() const;
  void clear_newhostlist();
  static const int kNewHostListFieldNumber = 7;
  const ::FromCs::NewHostListType& newhostlist() const;
  ::FromCs::NewHostListType* mutable_newhostlist();
  ::FromCs::NewHostListType* release_newhostlist();
  void set_allocated_newhostlist(::FromCs::NewHostListType* newhostlist);

  // optional .FromCs.iPList BuiltinIPList = 8;
  bool has_builtiniplist() const;
  void clear_builtiniplist();
  static const int kBuiltinIPListFieldNumber = 8;
  const ::FromCs::iPList& builtiniplist() const;
  ::FromCs::iPList* mutable_builtiniplist();
  ::FromCs::iPList* release_builtiniplist();
  void set_allocated_builtiniplist(::FromCs::iPList* builtiniplist);

  // optional .FromCs.NetworkControlType NetworkControl = 9;
  bool has_networkcontrol() const;
  void clear_networkcontrol();
  static const int kNetworkControlFieldNumber = 9;
  const ::FromCs::NetworkControlType& networkcontrol() const;
  ::FromCs::NetworkControlType* mutable_networkcontrol();
  ::FromCs::NetworkControlType* release_networkcontrol();
  void set_allocated_networkcontrol(::FromCs::NetworkControlType* networkcontrol);

  // optional .FromCs.SafeDevice SafeDeviceList = 14;
  bool has_safedevicelist() const;
  void clear_safedevicelist();
  static const int kSafeDeviceListFieldNumber = 14;
  const ::FromCs::SafeDevice& safedevicelist() const;
  ::FromCs::SafeDevice* mutable_safedevicelist();
  ::FromCs::SafeDevice* release_safedevicelist();
  void set_allocated_safedevicelist(::FromCs::SafeDevice* safedevicelist);

  // optional int32 NeedSetPwd = 4;
  bool has_needsetpwd() const;
  void clear_needsetpwd();
  static const int kNeedSetPwdFieldNumber = 4;
  ::google::protobuf::int32 needsetpwd() const;
  void set_needsetpwd(::google::protobuf::int32 value);

  // optional int32 SafeDevice = 11;
  bool has_safedevice() const;
  void clear_safedevice();
  static const int kSafeDeviceFieldNumber = 11;
  ::google::protobuf::int32 safedevice() const;
  void set_safedevice(::google::protobuf::int32 value);

  // optional int32 MainAcctType = 13;
  bool has_mainaccttype() const;
  void clear_mainaccttype();
  static const int kMainAcctTypeFieldNumber = 13;
  ::google::protobuf::int32 mainaccttype() const;
  void set_mainaccttype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.BindOpMobileResponse)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_ticket();
  void clear_has_ticket();
  void set_has_smsno();
  void clear_has_smsno();
  void set_has_needsetpwd();
  void clear_has_needsetpwd();
  void set_has_pwd();
  void clear_has_pwd();
  void set_has_username();
  void clear_has_username();
  void set_has_newhostlist();
  void clear_has_newhostlist();
  void set_has_builtiniplist();
  void clear_has_builtiniplist();
  void set_has_networkcontrol();
  void clear_has_networkcontrol();
  void set_has_authticket();
  void clear_has_authticket();
  void set_has_safedevice();
  void clear_has_safedevice();
  void set_has_mainacct();
  void clear_has_mainacct();
  void set_has_mainaccttype();
  void clear_has_mainaccttype();
  void set_has_safedevicelist();
  void clear_has_safedevicelist();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr ticket_;
  ::google::protobuf::internal::ArenaStringPtr smsno_;
  ::google::protobuf::internal::ArenaStringPtr pwd_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr authticket_;
  ::google::protobuf::internal::ArenaStringPtr mainacct_;
  ::FromCs::BaseResponse* base_;
  ::FromCs::NewHostListType* newhostlist_;
  ::FromCs::iPList* builtiniplist_;
  ::FromCs::NetworkControlType* networkcontrol_;
  ::FromCs::SafeDevice* safedevicelist_;
  ::google::protobuf::int32 needsetpwd_;
  ::google::protobuf::int32 safedevice_;
  ::google::protobuf::int32 mainaccttype_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BindQQRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.BindQQRequest) */ {
 public:
  BindQQRequest();
  virtual ~BindQQRequest();

  BindQQRequest(const BindQQRequest& from);

  inline BindQQRequest& operator=(const BindQQRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BindQQRequest& default_instance();

  static inline const BindQQRequest* internal_default_instance() {
    return reinterpret_cast<const BindQQRequest*>(
               &_BindQQRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    64;

  void Swap(BindQQRequest* other);

  // implements Message ----------------------------------------------

  inline BindQQRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  BindQQRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BindQQRequest& from);
  void MergeFrom(const BindQQRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BindQQRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Pwd = 3;
  bool has_pwd() const;
  void clear_pwd();
  static const int kPwdFieldNumber = 3;
  const ::std::string& pwd() const;
  void set_pwd(const ::std::string& value);
  #if LANG_CXX11
  void set_pwd(::std::string&& value);
  #endif
  void set_pwd(const char* value);
  void set_pwd(const char* value, size_t size);
  ::std::string* mutable_pwd();
  ::std::string* release_pwd();
  void set_allocated_pwd(::std::string* pwd);

  // optional string Pwd2 = 4;
  bool has_pwd2() const;
  void clear_pwd2();
  static const int kPwd2FieldNumber = 4;
  const ::std::string& pwd2() const;
  void set_pwd2(const ::std::string& value);
  #if LANG_CXX11
  void set_pwd2(::std::string&& value);
  #endif
  void set_pwd2(const char* value);
  void set_pwd2(const char* value, size_t size);
  ::std::string* mutable_pwd2();
  ::std::string* release_pwd2();
  void set_allocated_pwd2(::std::string* pwd2);

  // optional string ImgSid = 5;
  bool has_imgsid() const;
  void clear_imgsid();
  static const int kImgSidFieldNumber = 5;
  const ::std::string& imgsid() const;
  void set_imgsid(const ::std::string& value);
  #if LANG_CXX11
  void set_imgsid(::std::string&& value);
  #endif
  void set_imgsid(const char* value);
  void set_imgsid(const char* value, size_t size);
  ::std::string* mutable_imgsid();
  ::std::string* release_imgsid();
  void set_allocated_imgsid(::std::string* imgsid);

  // optional string ImgCode = 6;
  bool has_imgcode() const;
  void clear_imgcode();
  static const int kImgCodeFieldNumber = 6;
  const ::std::string& imgcode() const;
  void set_imgcode(const ::std::string& value);
  #if LANG_CXX11
  void set_imgcode(::std::string&& value);
  #endif
  void set_imgcode(const char* value);
  void set_imgcode(const char* value, size_t size);
  ::std::string* mutable_imgcode();
  ::std::string* release_imgcode();
  void set_allocated_imgcode(::std::string* imgcode);

  // optional string SafeDeviceName = 11;
  bool has_safedevicename() const;
  void clear_safedevicename();
  static const int kSafeDeviceNameFieldNumber = 11;
  const ::std::string& safedevicename() const;
  void set_safedevicename(const ::std::string& value);
  #if LANG_CXX11
  void set_safedevicename(::std::string&& value);
  #endif
  void set_safedevicename(const char* value);
  void set_safedevicename(const char* value, size_t size);
  ::std::string* mutable_safedevicename();
  ::std::string* release_safedevicename();
  void set_allocated_safedevicename(::std::string* safedevicename);

  // optional string SafeDeviceType = 12;
  bool has_safedevicetype() const;
  void clear_safedevicetype();
  static const int kSafeDeviceTypeFieldNumber = 12;
  const ::std::string& safedevicetype() const;
  void set_safedevicetype(const ::std::string& value);
  #if LANG_CXX11
  void set_safedevicetype(::std::string&& value);
  #endif
  void set_safedevicetype(const char* value);
  void set_safedevicetype(const char* value, size_t size);
  ::std::string* mutable_safedevicetype();
  ::std::string* release_safedevicetype();
  void set_allocated_safedevicetype(::std::string* safedevicetype);

  // required .FromCs.BaseRequest base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseRequest& base() const;
  ::FromCs::BaseRequest* mutable_base();
  ::FromCs::BaseRequest* release_base();
  void set_allocated_base(::FromCs::BaseRequest* base);

  // optional .FromCs.sKBuiltinstringT ImgEncryptKey = 8;
  bool has_imgencryptkey() const;
  void clear_imgencryptkey();
  static const int kImgEncryptKeyFieldNumber = 8;
  const ::FromCs::sKBuiltinstringT& imgencryptkey() const;
  ::FromCs::sKBuiltinstringT* mutable_imgencryptkey();
  ::FromCs::sKBuiltinstringT* release_imgencryptkey();
  void set_allocated_imgencryptkey(::FromCs::sKBuiltinstringT* imgencryptkey);

  // optional .FromCs.sKBuiltinBufferT KSid = 9;
  bool has_ksid() const;
  void clear_ksid();
  static const int kKSidFieldNumber = 9;
  const ::FromCs::sKBuiltinBufferT& ksid() const;
  ::FromCs::sKBuiltinBufferT* mutable_ksid();
  ::FromCs::sKBuiltinBufferT* release_ksid();
  void set_allocated_ksid(::FromCs::sKBuiltinBufferT* ksid);

  // required int32 QQ = 2;
  bool has_qq() const;
  void clear_qq();
  static const int kQQFieldNumber = 2;
  ::google::protobuf::int32 qq() const;
  void set_qq(::google::protobuf::int32 value);

  // required int32 OPCode = 7;
  bool has_opcode() const;
  void clear_opcode();
  static const int kOPCodeFieldNumber = 7;
  ::google::protobuf::int32 opcode() const;
  void set_opcode(::google::protobuf::int32 value);

  // optional int32 SetAsMainAcct = 10;
  bool has_setasmainacct() const;
  void clear_setasmainacct();
  static const int kSetAsMainAcctFieldNumber = 10;
  ::google::protobuf::int32 setasmainacct() const;
  void set_setasmainacct(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.BindQQRequest)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_qq();
  void clear_has_qq();
  void set_has_pwd();
  void clear_has_pwd();
  void set_has_pwd2();
  void clear_has_pwd2();
  void set_has_imgsid();
  void clear_has_imgsid();
  void set_has_imgcode();
  void clear_has_imgcode();
  void set_has_opcode();
  void clear_has_opcode();
  void set_has_imgencryptkey();
  void clear_has_imgencryptkey();
  void set_has_ksid();
  void clear_has_ksid();
  void set_has_setasmainacct();
  void clear_has_setasmainacct();
  void set_has_safedevicename();
  void clear_has_safedevicename();
  void set_has_safedevicetype();
  void clear_has_safedevicetype();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr pwd_;
  ::google::protobuf::internal::ArenaStringPtr pwd2_;
  ::google::protobuf::internal::ArenaStringPtr imgsid_;
  ::google::protobuf::internal::ArenaStringPtr imgcode_;
  ::google::protobuf::internal::ArenaStringPtr safedevicename_;
  ::google::protobuf::internal::ArenaStringPtr safedevicetype_;
  ::FromCs::BaseRequest* base_;
  ::FromCs::sKBuiltinstringT* imgencryptkey_;
  ::FromCs::sKBuiltinBufferT* ksid_;
  ::google::protobuf::int32 qq_;
  ::google::protobuf::int32 opcode_;
  ::google::protobuf::int32 setasmainacct_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BindQQResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.BindQQResponse) */ {
 public:
  BindQQResponse();
  virtual ~BindQQResponse();

  BindQQResponse(const BindQQResponse& from);

  inline BindQQResponse& operator=(const BindQQResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BindQQResponse& default_instance();

  static inline const BindQQResponse* internal_default_instance() {
    return reinterpret_cast<const BindQQResponse*>(
               &_BindQQResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    65;

  void Swap(BindQQResponse* other);

  // implements Message ----------------------------------------------

  inline BindQQResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  BindQQResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BindQQResponse& from);
  void MergeFrom(const BindQQResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BindQQResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ImgSid = 2;
  bool has_imgsid() const;
  void clear_imgsid();
  static const int kImgSidFieldNumber = 2;
  const ::std::string& imgsid() const;
  void set_imgsid(const ::std::string& value);
  #if LANG_CXX11
  void set_imgsid(::std::string&& value);
  #endif
  void set_imgsid(const char* value);
  void set_imgsid(const char* value, size_t size);
  ::std::string* mutable_imgsid();
  ::std::string* release_imgsid();
  void set_allocated_imgsid(::std::string* imgsid);

  // optional string MicroBlogName = 6;
  bool has_microblogname() const;
  void clear_microblogname();
  static const int kMicroBlogNameFieldNumber = 6;
  const ::std::string& microblogname() const;
  void set_microblogname(const ::std::string& value);
  #if LANG_CXX11
  void set_microblogname(::std::string&& value);
  #endif
  void set_microblogname(const char* value);
  void set_microblogname(const char* value, size_t size);
  ::std::string* mutable_microblogname();
  ::std::string* release_microblogname();
  void set_allocated_microblogname(::std::string* microblogname);

  // optional string QQMailSkey = 8;
  bool has_qqmailskey() const;
  void clear_qqmailskey();
  static const int kQQMailSkeyFieldNumber = 8;
  const ::std::string& qqmailskey() const;
  void set_qqmailskey(const ::std::string& value);
  #if LANG_CXX11
  void set_qqmailskey(::std::string&& value);
  #endif
  void set_qqmailskey(const char* value);
  void set_qqmailskey(const char* value, size_t size);
  ::std::string* mutable_qqmailskey();
  ::std::string* release_qqmailskey();
  void set_allocated_qqmailskey(::std::string* qqmailskey);

  // required .FromCs.BaseResponse base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseResponse& base() const;
  ::FromCs::BaseResponse* mutable_base();
  ::FromCs::BaseResponse* release_base();
  void set_allocated_base(::FromCs::BaseResponse* base);

  // required .FromCs.sKBuiltinBufferT ImgBuf = 3;
  bool has_imgbuf() const;
  void clear_imgbuf();
  static const int kImgBufFieldNumber = 3;
  const ::FromCs::sKBuiltinBufferT& imgbuf() const;
  ::FromCs::sKBuiltinBufferT* mutable_imgbuf();
  ::FromCs::sKBuiltinBufferT* release_imgbuf();
  void set_allocated_imgbuf(::FromCs::sKBuiltinBufferT* imgbuf);

  // optional .FromCs.sKBuiltinstringT ImgEncryptKey = 9;
  bool has_imgencryptkey() const;
  void clear_imgencryptkey();
  static const int kImgEncryptKeyFieldNumber = 9;
  const ::FromCs::sKBuiltinstringT& imgencryptkey() const;
  ::FromCs::sKBuiltinstringT* mutable_imgencryptkey();
  ::FromCs::sKBuiltinstringT* release_imgencryptkey();
  void set_allocated_imgencryptkey(::FromCs::sKBuiltinstringT* imgencryptkey);

  // optional .FromCs.sKBuiltinBufferT A2Key = 10;
  bool has_a2key() const;
  void clear_a2key();
  static const int kA2KeyFieldNumber = 10;
  const ::FromCs::sKBuiltinBufferT& a2key() const;
  ::FromCs::sKBuiltinBufferT* mutable_a2key();
  ::FromCs::sKBuiltinBufferT* release_a2key();
  void set_allocated_a2key(::FromCs::sKBuiltinBufferT* a2key);

  // optional .FromCs.sKBuiltinBufferT KSid = 11;
  bool has_ksid() const;
  void clear_ksid();
  static const int kKSidFieldNumber = 11;
  const ::FromCs::sKBuiltinBufferT& ksid() const;
  ::FromCs::sKBuiltinBufferT* mutable_ksid();
  ::FromCs::sKBuiltinBufferT* release_ksid();
  void set_allocated_ksid(::FromCs::sKBuiltinBufferT* ksid);

  // optional .FromCs.SafeDevice SafeDeviceList = 12;
  bool has_safedevicelist() const;
  void clear_safedevicelist();
  static const int kSafeDeviceListFieldNumber = 12;
  const ::FromCs::SafeDevice& safedevicelist() const;
  ::FromCs::SafeDevice* mutable_safedevicelist();
  ::FromCs::SafeDevice* release_safedevicelist();
  void set_allocated_safedevicelist(::FromCs::SafeDevice* safedevicelist);

  // optional int32 PushMailStatus = 4;
  bool has_pushmailstatus() const;
  void clear_pushmailstatus();
  static const int kPushMailStatusFieldNumber = 4;
  ::google::protobuf::int32 pushmailstatus() const;
  void set_pushmailstatus(::google::protobuf::int32 value);

  // optional int32 PrivateMsgStatus = 5;
  bool has_privatemsgstatus() const;
  void clear_privatemsgstatus();
  static const int kPrivateMsgStatusFieldNumber = 5;
  ::google::protobuf::int32 privatemsgstatus() const;
  void set_privatemsgstatus(::google::protobuf::int32 value);

  // optional int32 Status = 7;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 7;
  ::google::protobuf::int32 status() const;
  void set_status(::google::protobuf::int32 value);

  // optional int32 SafeDevice = 13;
  bool has_safedevice() const;
  void clear_safedevice();
  static const int kSafeDeviceFieldNumber = 13;
  ::google::protobuf::int32 safedevice() const;
  void set_safedevice(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.BindQQResponse)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_imgsid();
  void clear_has_imgsid();
  void set_has_imgbuf();
  void clear_has_imgbuf();
  void set_has_pushmailstatus();
  void clear_has_pushmailstatus();
  void set_has_privatemsgstatus();
  void clear_has_privatemsgstatus();
  void set_has_microblogname();
  void clear_has_microblogname();
  void set_has_status();
  void clear_has_status();
  void set_has_qqmailskey();
  void clear_has_qqmailskey();
  void set_has_imgencryptkey();
  void clear_has_imgencryptkey();
  void set_has_a2key();
  void clear_has_a2key();
  void set_has_ksid();
  void clear_has_ksid();
  void set_has_safedevicelist();
  void clear_has_safedevicelist();
  void set_has_safedevice();
  void clear_has_safedevice();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr imgsid_;
  ::google::protobuf::internal::ArenaStringPtr microblogname_;
  ::google::protobuf::internal::ArenaStringPtr qqmailskey_;
  ::FromCs::BaseResponse* base_;
  ::FromCs::sKBuiltinBufferT* imgbuf_;
  ::FromCs::sKBuiltinstringT* imgencryptkey_;
  ::FromCs::sKBuiltinBufferT* a2key_;
  ::FromCs::sKBuiltinBufferT* ksid_;
  ::FromCs::SafeDevice* safedevicelist_;
  ::google::protobuf::int32 pushmailstatus_;
  ::google::protobuf::int32 privatemsgstatus_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::int32 safedevice_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ThrowBottleRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.ThrowBottleRequest) */ {
 public:
  ThrowBottleRequest();
  virtual ~ThrowBottleRequest();

  ThrowBottleRequest(const ThrowBottleRequest& from);

  inline ThrowBottleRequest& operator=(const ThrowBottleRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ThrowBottleRequest& default_instance();

  static inline const ThrowBottleRequest* internal_default_instance() {
    return reinterpret_cast<const ThrowBottleRequest*>(
               &_ThrowBottleRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    66;

  void Swap(ThrowBottleRequest* other);

  // implements Message ----------------------------------------------

  inline ThrowBottleRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ThrowBottleRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ThrowBottleRequest& from);
  void MergeFrom(const ThrowBottleRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ThrowBottleRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ClientID = 7;
  bool has_clientid() const;
  void clear_clientid();
  static const int kClientIDFieldNumber = 7;
  const ::std::string& clientid() const;
  void set_clientid(const ::std::string& value);
  #if LANG_CXX11
  void set_clientid(::std::string&& value);
  #endif
  void set_clientid(const char* value);
  void set_clientid(const char* value, size_t size);
  ::std::string* mutable_clientid();
  ::std::string* release_clientid();
  void set_allocated_clientid(::std::string* clientid);

  // required .FromCs.BaseRequest base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseRequest& base() const;
  ::FromCs::BaseRequest* mutable_base();
  ::FromCs::BaseRequest* release_base();
  void set_allocated_base(::FromCs::BaseRequest* base);

  // required .FromCs.sKBuiltinBufferT Content = 4;
  bool has_content() const;
  void clear_content();
  static const int kContentFieldNumber = 4;
  const ::FromCs::sKBuiltinBufferT& content() const;
  ::FromCs::sKBuiltinBufferT* mutable_content();
  ::FromCs::sKBuiltinBufferT* release_content();
  void set_allocated_content(::FromCs::sKBuiltinBufferT* content);

  // required int32 MsgType = 2;
  bool has_msgtype() const;
  void clear_msgtype();
  static const int kMsgTypeFieldNumber = 2;
  ::google::protobuf::int32 msgtype() const;
  void set_msgtype(::google::protobuf::int32 value);

  // required int32 BottleType = 3;
  bool has_bottletype() const;
  void clear_bottletype();
  static const int kBottleTypeFieldNumber = 3;
  ::google::protobuf::int32 bottletype() const;
  void set_bottletype(::google::protobuf::int32 value);

  // required int32 StartPos = 5;
  bool has_startpos() const;
  void clear_startpos();
  static const int kStartPosFieldNumber = 5;
  ::google::protobuf::int32 startpos() const;
  void set_startpos(::google::protobuf::int32 value);

  // required int32 TotalLen = 6;
  bool has_totallen() const;
  void clear_totallen();
  static const int kTotalLenFieldNumber = 6;
  ::google::protobuf::int32 totallen() const;
  void set_totallen(::google::protobuf::int32 value);

  // optional int32 VoiceLength = 8;
  bool has_voicelength() const;
  void clear_voicelength();
  static const int kVoiceLengthFieldNumber = 8;
  ::google::protobuf::int32 voicelength() const;
  void set_voicelength(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.ThrowBottleRequest)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_msgtype();
  void clear_has_msgtype();
  void set_has_bottletype();
  void clear_has_bottletype();
  void set_has_content();
  void clear_has_content();
  void set_has_startpos();
  void clear_has_startpos();
  void set_has_totallen();
  void clear_has_totallen();
  void set_has_clientid();
  void clear_has_clientid();
  void set_has_voicelength();
  void clear_has_voicelength();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr clientid_;
  ::FromCs::BaseRequest* base_;
  ::FromCs::sKBuiltinBufferT* content_;
  ::google::protobuf::int32 msgtype_;
  ::google::protobuf::int32 bottletype_;
  ::google::protobuf::int32 startpos_;
  ::google::protobuf::int32 totallen_;
  ::google::protobuf::int32 voicelength_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ThrowBottleResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.ThrowBottleResponse) */ {
 public:
  ThrowBottleResponse();
  virtual ~ThrowBottleResponse();

  ThrowBottleResponse(const ThrowBottleResponse& from);

  inline ThrowBottleResponse& operator=(const ThrowBottleResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ThrowBottleResponse& default_instance();

  static inline const ThrowBottleResponse* internal_default_instance() {
    return reinterpret_cast<const ThrowBottleResponse*>(
               &_ThrowBottleResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    67;

  void Swap(ThrowBottleResponse* other);

  // implements Message ----------------------------------------------

  inline ThrowBottleResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ThrowBottleResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ThrowBottleResponse& from);
  void MergeFrom(const ThrowBottleResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ThrowBottleResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .FromCs.sKBuiltinstringT BottleList = 7;
  int bottlelist_size() const;
  void clear_bottlelist();
  static const int kBottleListFieldNumber = 7;
  const ::FromCs::sKBuiltinstringT& bottlelist(int index) const;
  ::FromCs::sKBuiltinstringT* mutable_bottlelist(int index);
  ::FromCs::sKBuiltinstringT* add_bottlelist();
  ::google::protobuf::RepeatedPtrField< ::FromCs::sKBuiltinstringT >*
      mutable_bottlelist();
  const ::google::protobuf::RepeatedPtrField< ::FromCs::sKBuiltinstringT >&
      bottlelist() const;

  // required .FromCs.BaseResponse base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseResponse& base() const;
  ::FromCs::BaseResponse* mutable_base();
  ::FromCs::BaseResponse* release_base();
  void set_allocated_base(::FromCs::BaseResponse* base);

  // required int32 StartPos = 2;
  bool has_startpos() const;
  void clear_startpos();
  static const int kStartPosFieldNumber = 2;
  ::google::protobuf::int32 startpos() const;
  void set_startpos(::google::protobuf::int32 value);

  // required int32 TotalLen = 3;
  bool has_totallen() const;
  void clear_totallen();
  static const int kTotalLenFieldNumber = 3;
  ::google::protobuf::int32 totallen() const;
  void set_totallen(::google::protobuf::int32 value);

  // required int32 ThrowCount = 4;
  bool has_throwcount() const;
  void clear_throwcount();
  static const int kThrowCountFieldNumber = 4;
  ::google::protobuf::int32 throwcount() const;
  void set_throwcount(::google::protobuf::int32 value);

  // required int32 PickCount = 5;
  bool has_pickcount() const;
  void clear_pickcount();
  static const int kPickCountFieldNumber = 5;
  ::google::protobuf::int32 pickcount() const;
  void set_pickcount(::google::protobuf::int32 value);

  // required int32 BottleListNumb = 6;
  bool has_bottlelistnumb() const;
  void clear_bottlelistnumb();
  static const int kBottleListNumbFieldNumber = 6;
  ::google::protobuf::int32 bottlelistnumb() const;
  void set_bottlelistnumb(::google::protobuf::int32 value);

  // required int32 Distance = 8;
  bool has_distance() const;
  void clear_distance();
  static const int kDistanceFieldNumber = 8;
  ::google::protobuf::int32 distance() const;
  void set_distance(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.ThrowBottleResponse)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_startpos();
  void clear_has_startpos();
  void set_has_totallen();
  void clear_has_totallen();
  void set_has_throwcount();
  void clear_has_throwcount();
  void set_has_pickcount();
  void clear_has_pickcount();
  void set_has_bottlelistnumb();
  void clear_has_bottlelistnumb();
  void set_has_distance();
  void clear_has_distance();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::FromCs::sKBuiltinstringT > bottlelist_;
  ::FromCs::BaseResponse* base_;
  ::google::protobuf::int32 startpos_;
  ::google::protobuf::int32 totallen_;
  ::google::protobuf::int32 throwcount_;
  ::google::protobuf::int32 pickcount_;
  ::google::protobuf::int32 bottlelistnumb_;
  ::google::protobuf::int32 distance_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShakereportRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.ShakereportRequest) */ {
 public:
  ShakereportRequest();
  virtual ~ShakereportRequest();

  ShakereportRequest(const ShakereportRequest& from);

  inline ShakereportRequest& operator=(const ShakereportRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShakereportRequest& default_instance();

  static inline const ShakereportRequest* internal_default_instance() {
    return reinterpret_cast<const ShakereportRequest*>(
               &_ShakereportRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    68;

  void Swap(ShakereportRequest* other);

  // implements Message ----------------------------------------------

  inline ShakereportRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ShakereportRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ShakereportRequest& from);
  void MergeFrom(const ShakereportRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ShakereportRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string MacAddr = 6;
  bool has_macaddr() const;
  void clear_macaddr();
  static const int kMacAddrFieldNumber = 6;
  const ::std::string& macaddr() const;
  void set_macaddr(const ::std::string& value);
  #if LANG_CXX11
  void set_macaddr(::std::string&& value);
  #endif
  void set_macaddr(const char* value);
  void set_macaddr(const char* value, size_t size);
  ::std::string* mutable_macaddr();
  ::std::string* release_macaddr();
  void set_allocated_macaddr(::std::string* macaddr);

  // optional string CellId = 7;
  bool has_cellid() const;
  void clear_cellid();
  static const int kCellIdFieldNumber = 7;
  const ::std::string& cellid() const;
  void set_cellid(const ::std::string& value);
  #if LANG_CXX11
  void set_cellid(::std::string&& value);
  #endif
  void set_cellid(const char* value);
  void set_cellid(const char* value, size_t size);
  ::std::string* mutable_cellid();
  ::std::string* release_cellid();
  void set_allocated_cellid(::std::string* cellid);

  // required .FromCs.BaseRequest base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseRequest& base() const;
  ::FromCs::BaseRequest* mutable_base();
  ::FromCs::BaseRequest* release_base();
  void set_allocated_base(::FromCs::BaseRequest* base);

  // required int32 OpCode = 2;
  bool has_opcode() const;
  void clear_opcode();
  static const int kOpCodeFieldNumber = 2;
  ::google::protobuf::int32 opcode() const;
  void set_opcode(::google::protobuf::int32 value);

  // required float Longitude = 3;
  bool has_longitude() const;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 3;
  float longitude() const;
  void set_longitude(float value);

  // required float Latitude = 4;
  bool has_latitude() const;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 4;
  float latitude() const;
  void set_latitude(float value);

  // required int32 Precision = 5;
  bool has_precision() const;
  void clear_precision();
  static const int kPrecisionFieldNumber = 5;
  ::google::protobuf::int32 precision() const;
  void set_precision(::google::protobuf::int32 value);

  // required int32 ImgId = 8;
  bool has_imgid() const;
  void clear_imgid();
  static const int kImgIdFieldNumber = 8;
  ::google::protobuf::int32 imgid() const;
  void set_imgid(::google::protobuf::int32 value);

  // required int32 Times = 9;
  bool has_times() const;
  void clear_times();
  static const int kTimesFieldNumber = 9;
  ::google::protobuf::int32 times() const;
  void set_times(::google::protobuf::int32 value);

  // optional int32 GPSSource = 10;
  bool has_gpssource() const;
  void clear_gpssource();
  static const int kGPSSourceFieldNumber = 10;
  ::google::protobuf::int32 gpssource() const;
  void set_gpssource(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.ShakereportRequest)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_opcode();
  void clear_has_opcode();
  void set_has_longitude();
  void clear_has_longitude();
  void set_has_latitude();
  void clear_has_latitude();
  void set_has_precision();
  void clear_has_precision();
  void set_has_macaddr();
  void clear_has_macaddr();
  void set_has_cellid();
  void clear_has_cellid();
  void set_has_imgid();
  void clear_has_imgid();
  void set_has_times();
  void clear_has_times();
  void set_has_gpssource();
  void clear_has_gpssource();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr macaddr_;
  ::google::protobuf::internal::ArenaStringPtr cellid_;
  ::FromCs::BaseRequest* base_;
  ::google::protobuf::int32 opcode_;
  float longitude_;
  float latitude_;
  ::google::protobuf::int32 precision_;
  ::google::protobuf::int32 imgid_;
  ::google::protobuf::int32 times_;
  ::google::protobuf::int32 gpssource_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShakereportResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.ShakereportResponse) */ {
 public:
  ShakereportResponse();
  virtual ~ShakereportResponse();

  ShakereportResponse(const ShakereportResponse& from);

  inline ShakereportResponse& operator=(const ShakereportResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShakereportResponse& default_instance();

  static inline const ShakereportResponse* internal_default_instance() {
    return reinterpret_cast<const ShakereportResponse*>(
               &_ShakereportResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    69;

  void Swap(ShakereportResponse* other);

  // implements Message ----------------------------------------------

  inline ShakereportResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ShakereportResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ShakereportResponse& from);
  void MergeFrom(const ShakereportResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ShakereportResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .FromCs.BaseResponse base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseResponse& base() const;
  ::FromCs::BaseResponse* mutable_base();
  ::FromCs::BaseResponse* release_base();
  void set_allocated_base(::FromCs::BaseResponse* base);

  // required .FromCs.sKBuiltinBufferT Buffer = 2;
  bool has_buffer() const;
  void clear_buffer();
  static const int kBufferFieldNumber = 2;
  const ::FromCs::sKBuiltinBufferT& buffer() const;
  ::FromCs::sKBuiltinBufferT* mutable_buffer();
  ::FromCs::sKBuiltinBufferT* release_buffer();
  void set_allocated_buffer(::FromCs::sKBuiltinBufferT* buffer);

  // required int32 Ret = 3;
  bool has_ret() const;
  void clear_ret();
  static const int kRetFieldNumber = 3;
  ::google::protobuf::int32 ret() const;
  void set_ret(::google::protobuf::int32 value);

  // required int32 ImgId = 4;
  bool has_imgid() const;
  void clear_imgid();
  static const int kImgIdFieldNumber = 4;
  ::google::protobuf::int32 imgid() const;
  void set_imgid(::google::protobuf::int32 value);

  // optional int32 ImgTotoalLen = 5;
  bool has_imgtotoallen() const;
  void clear_imgtotoallen();
  static const int kImgTotoalLenFieldNumber = 5;
  ::google::protobuf::int32 imgtotoallen() const;
  void set_imgtotoallen(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.ShakereportResponse)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_buffer();
  void clear_has_buffer();
  void set_has_ret();
  void clear_has_ret();
  void set_has_imgid();
  void clear_has_imgid();
  void set_has_imgtotoallen();
  void clear_has_imgtotoallen();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::FromCs::BaseResponse* base_;
  ::FromCs::sKBuiltinBufferT* buffer_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 imgid_;
  ::google::protobuf::int32 imgtotoallen_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShakegetRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.ShakegetRequest) */ {
 public:
  ShakegetRequest();
  virtual ~ShakegetRequest();

  ShakegetRequest(const ShakegetRequest& from);

  inline ShakegetRequest& operator=(const ShakegetRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShakegetRequest& default_instance();

  static inline const ShakegetRequest* internal_default_instance() {
    return reinterpret_cast<const ShakegetRequest*>(
               &_ShakegetRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    70;

  void Swap(ShakegetRequest* other);

  // implements Message ----------------------------------------------

  inline ShakegetRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ShakegetRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ShakegetRequest& from);
  void MergeFrom(const ShakegetRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ShakegetRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .FromCs.BaseRequest base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseRequest& base() const;
  ::FromCs::BaseRequest* mutable_base();
  ::FromCs::BaseRequest* release_base();
  void set_allocated_base(::FromCs::BaseRequest* base);

  // required .FromCs.sKBuiltinBufferT Buffer = 2;
  bool has_buffer() const;
  void clear_buffer();
  static const int kBufferFieldNumber = 2;
  const ::FromCs::sKBuiltinBufferT& buffer() const;
  ::FromCs::sKBuiltinBufferT* mutable_buffer();
  ::FromCs::sKBuiltinBufferT* release_buffer();
  void set_allocated_buffer(::FromCs::sKBuiltinBufferT* buffer);

  // optional int32 IsNewVerson = 3;
  bool has_isnewverson() const;
  void clear_isnewverson();
  static const int kIsNewVersonFieldNumber = 3;
  ::google::protobuf::int32 isnewverson() const;
  void set_isnewverson(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.ShakegetRequest)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_buffer();
  void clear_has_buffer();
  void set_has_isnewverson();
  void clear_has_isnewverson();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::FromCs::BaseRequest* base_;
  ::FromCs::sKBuiltinBufferT* buffer_;
  ::google::protobuf::int32 isnewverson_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShakegetResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.ShakegetResponse) */ {
 public:
  ShakegetResponse();
  virtual ~ShakegetResponse();

  ShakegetResponse(const ShakegetResponse& from);

  inline ShakegetResponse& operator=(const ShakegetResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShakegetResponse& default_instance();

  static inline const ShakegetResponse* internal_default_instance() {
    return reinterpret_cast<const ShakegetResponse*>(
               &_ShakegetResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    71;

  void Swap(ShakegetResponse* other);

  // implements Message ----------------------------------------------

  inline ShakegetResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ShakegetResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ShakegetResponse& from);
  void MergeFrom(const ShakegetResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ShakegetResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .FromCs.ShakeGetObj ShakeGetList = 3;
  int shakegetlist_size() const;
  void clear_shakegetlist();
  static const int kShakeGetListFieldNumber = 3;
  const ::FromCs::ShakeGetObj& shakegetlist(int index) const;
  ::FromCs::ShakeGetObj* mutable_shakegetlist(int index);
  ::FromCs::ShakeGetObj* add_shakegetlist();
  ::google::protobuf::RepeatedPtrField< ::FromCs::ShakeGetObj >*
      mutable_shakegetlist();
  const ::google::protobuf::RepeatedPtrField< ::FromCs::ShakeGetObj >&
      shakegetlist() const;

  // optional string Tips = 4;
  bool has_tips() const;
  void clear_tips();
  static const int kTipsFieldNumber = 4;
  const ::std::string& tips() const;
  void set_tips(const ::std::string& value);
  #if LANG_CXX11
  void set_tips(::std::string&& value);
  #endif
  void set_tips(const char* value);
  void set_tips(const char* value, size_t size);
  ::std::string* mutable_tips();
  ::std::string* release_tips();
  void set_allocated_tips(::std::string* tips);

  // required .FromCs.BaseResponse base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseResponse& base() const;
  ::FromCs::BaseResponse* mutable_base();
  ::FromCs::BaseResponse* release_base();
  void set_allocated_base(::FromCs::BaseResponse* base);

  // required int32 Count = 2;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // required int32 Scence = 5;
  bool has_scence() const;
  void clear_scence();
  static const int kScenceFieldNumber = 5;
  ::google::protobuf::int32 scence() const;
  void set_scence(::google::protobuf::int32 value);

  // required int32 Ret = 6;
  bool has_ret() const;
  void clear_ret();
  static const int kRetFieldNumber = 6;
  ::google::protobuf::int32 ret() const;
  void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.ShakegetResponse)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_count();
  void clear_has_count();
  void set_has_tips();
  void clear_has_tips();
  void set_has_scence();
  void clear_has_scence();
  void set_has_ret();
  void clear_has_ret();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::FromCs::ShakeGetObj > shakegetlist_;
  ::google::protobuf::internal::ArenaStringPtr tips_;
  ::FromCs::BaseResponse* base_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::int32 scence_;
  ::google::protobuf::int32 ret_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ManualAuthRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.ManualAuthRequest) */ {
 public:
  ManualAuthRequest();
  virtual ~ManualAuthRequest();

  ManualAuthRequest(const ManualAuthRequest& from);

  inline ManualAuthRequest& operator=(const ManualAuthRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ManualAuthRequest& default_instance();

  static inline const ManualAuthRequest* internal_default_instance() {
    return reinterpret_cast<const ManualAuthRequest*>(
               &_ManualAuthRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    72;

  void Swap(ManualAuthRequest* other);

  // implements Message ----------------------------------------------

  inline ManualAuthRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ManualAuthRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ManualAuthRequest& from);
  void MergeFrom(const ManualAuthRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ManualAuthRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string IMEI = 3;
  bool has_imei() const;
  void clear_imei();
  static const int kIMEIFieldNumber = 3;
  const ::std::string& imei() const;
  void set_imei(const ::std::string& value);
  #if LANG_CXX11
  void set_imei(::std::string&& value);
  #endif
  void set_imei(const char* value);
  void set_imei(const char* value, size_t size);
  ::std::string* mutable_imei();
  ::std::string* release_imei();
  void set_allocated_imei(::std::string* imei);

  // optional string SoftType = 4;
  bool has_softtype() const;
  void clear_softtype();
  static const int kSoftTypeFieldNumber = 4;
  const ::std::string& softtype() const;
  void set_softtype(const ::std::string& value);
  #if LANG_CXX11
  void set_softtype(::std::string&& value);
  #endif
  void set_softtype(const char* value);
  void set_softtype(const char* value, size_t size);
  ::std::string* mutable_softtype();
  ::std::string* release_softtype();
  void set_allocated_softtype(::std::string* softtype);

  // optional string ClientSeqId = 6;
  bool has_clientseqid() const;
  void clear_clientseqid();
  static const int kClientSeqIdFieldNumber = 6;
  const ::std::string& clientseqid() const;
  void set_clientseqid(const ::std::string& value);
  #if LANG_CXX11
  void set_clientseqid(::std::string&& value);
  #endif
  void set_clientseqid(const char* value);
  void set_clientseqid(const char* value, size_t size);
  ::std::string* mutable_clientseqid();
  ::std::string* release_clientseqid();
  void set_allocated_clientseqid(::std::string* clientseqid);

  // optional string Signature = 7;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 7;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_signature(::std::string&& value);
  #endif
  void set_signature(const char* value);
  void set_signature(const char* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // optional string DeviceName = 8;
  bool has_devicename() const;
  void clear_devicename();
  static const int kDeviceNameFieldNumber = 8;
  const ::std::string& devicename() const;
  void set_devicename(const ::std::string& value);
  #if LANG_CXX11
  void set_devicename(::std::string&& value);
  #endif
  void set_devicename(const char* value);
  void set_devicename(const char* value, size_t size);
  ::std::string* mutable_devicename();
  ::std::string* release_devicename();
  void set_allocated_devicename(::std::string* devicename);

  // optional string DeviceType = 9;
  bool has_devicetype() const;
  void clear_devicetype();
  static const int kDeviceTypeFieldNumber = 9;
  const ::std::string& devicetype() const;
  void set_devicetype(const ::std::string& value);
  #if LANG_CXX11
  void set_devicetype(::std::string&& value);
  #endif
  void set_devicetype(const char* value);
  void set_devicetype(const char* value, size_t size);
  ::std::string* mutable_devicetype();
  ::std::string* release_devicetype();
  void set_allocated_devicetype(::std::string* devicetype);

  // optional string Language = 10;
  bool has_language() const;
  void clear_language();
  static const int kLanguageFieldNumber = 10;
  const ::std::string& language() const;
  void set_language(const ::std::string& value);
  #if LANG_CXX11
  void set_language(::std::string&& value);
  #endif
  void set_language(const char* value);
  void set_language(const char* value, size_t size);
  ::std::string* mutable_language();
  ::std::string* release_language();
  void set_allocated_language(::std::string* language);

  // optional string TimeZone = 11;
  bool has_timezone() const;
  void clear_timezone();
  static const int kTimeZoneFieldNumber = 11;
  const ::std::string& timezone() const;
  void set_timezone(const ::std::string& value);
  #if LANG_CXX11
  void set_timezone(::std::string&& value);
  #endif
  void set_timezone(const char* value);
  void set_timezone(const char* value, size_t size);
  ::std::string* mutable_timezone();
  ::std::string* release_timezone();
  void set_allocated_timezone(::std::string* timezone);

  // optional string DeviceBrand = 15;
  bool has_devicebrand() const;
  void clear_devicebrand();
  static const int kDeviceBrandFieldNumber = 15;
  const ::std::string& devicebrand() const;
  void set_devicebrand(const ::std::string& value);
  #if LANG_CXX11
  void set_devicebrand(::std::string&& value);
  #endif
  void set_devicebrand(const char* value);
  void set_devicebrand(const char* value, size_t size);
  ::std::string* mutable_devicebrand();
  ::std::string* release_devicebrand();
  void set_allocated_devicebrand(::std::string* devicebrand);

  // optional string DeviceModel = 16;
  bool has_devicemodel() const;
  void clear_devicemodel();
  static const int kDeviceModelFieldNumber = 16;
  const ::std::string& devicemodel() const;
  void set_devicemodel(const ::std::string& value);
  #if LANG_CXX11
  void set_devicemodel(::std::string&& value);
  #endif
  void set_devicemodel(const char* value);
  void set_devicemodel(const char* value, size_t size);
  ::std::string* mutable_devicemodel();
  ::std::string* release_devicemodel();
  void set_allocated_devicemodel(::std::string* devicemodel);

  // optional string OSType = 17;
  bool has_ostype() const;
  void clear_ostype();
  static const int kOSTypeFieldNumber = 17;
  const ::std::string& ostype() const;
  void set_ostype(const ::std::string& value);
  #if LANG_CXX11
  void set_ostype(::std::string&& value);
  #endif
  void set_ostype(const char* value);
  void set_ostype(const char* value, size_t size);
  ::std::string* mutable_ostype();
  ::std::string* release_ostype();
  void set_allocated_ostype(::std::string* ostype);

  // optional string CountryCode = 18;
  bool has_countrycode() const;
  void clear_countrycode();
  static const int kCountryCodeFieldNumber = 18;
  const ::std::string& countrycode() const;
  void set_countrycode(const ::std::string& value);
  #if LANG_CXX11
  void set_countrycode(::std::string&& value);
  #endif
  void set_countrycode(const char* value);
  void set_countrycode(const char* value, size_t size);
  ::std::string* mutable_countrycode();
  ::std::string* release_countrycode();
  void set_allocated_countrycode(::std::string* countrycode);

  // optional string BundleId = 19;
  bool has_bundleid() const;
  void clear_bundleid();
  static const int kBundleIdFieldNumber = 19;
  const ::std::string& bundleid() const;
  void set_bundleid(const ::std::string& value);
  #if LANG_CXX11
  void set_bundleid(::std::string&& value);
  #endif
  void set_bundleid(const char* value);
  void set_bundleid(const char* value, size_t size);
  ::std::string* mutable_bundleid();
  ::std::string* release_bundleid();
  void set_allocated_bundleid(::std::string* bundleid);

  // optional string ADSource = 20;
  bool has_adsource() const;
  void clear_adsource();
  static const int kADSourceFieldNumber = 20;
  const ::std::string& adsource() const;
  void set_adsource(const ::std::string& value);
  #if LANG_CXX11
  void set_adsource(::std::string&& value);
  #endif
  void set_adsource(const char* value);
  void set_adsource(const char* value, size_t size);
  ::std::string* mutable_adsource();
  ::std::string* release_adsource();
  void set_allocated_adsource(::std::string* adsource);

  // optional string IphoneVer = 21;
  bool has_iphonever() const;
  void clear_iphonever();
  static const int kIphoneVerFieldNumber = 21;
  const ::std::string& iphonever() const;
  void set_iphonever(const ::std::string& value);
  #if LANG_CXX11
  void set_iphonever(::std::string&& value);
  #endif
  void set_iphonever(const char* value);
  void set_iphonever(const char* value, size_t size);
  ::std::string* mutable_iphonever();
  ::std::string* release_iphonever();
  void set_allocated_iphonever(::std::string* iphonever);

  // required .FromCs.BaseRequest base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseRequest& base() const;
  ::FromCs::BaseRequest* mutable_base();
  ::FromCs::BaseRequest* release_base();
  void set_allocated_base(::FromCs::BaseRequest* base);

  // optional .FromCs.ExtData BaseReqInfo = 2;
  bool has_basereqinfo() const;
  void clear_basereqinfo();
  static const int kBaseReqInfoFieldNumber = 2;
  const ::FromCs::ExtData& basereqinfo() const;
  ::FromCs::ExtData* mutable_basereqinfo();
  ::FromCs::ExtData* release_basereqinfo();
  void set_allocated_basereqinfo(::FromCs::ExtData* basereqinfo);

  // optional int32 builtinIpseq = 5;
  bool has_builtinipseq() const;
  void clear_builtinipseq();
  static const int kBuiltinIpseqFieldNumber = 5;
  ::google::protobuf::int32 builtinipseq() const;
  void set_builtinipseq(::google::protobuf::int32 value);

  // optional int32 Channel = 13;
  bool has_channel() const;
  void clear_channel();
  static const int kChannelFieldNumber = 13;
  ::google::protobuf::int32 channel() const;
  void set_channel(::google::protobuf::int32 value);

  // required int32 TimeStamp = 14;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimeStampFieldNumber = 14;
  ::google::protobuf::int32 timestamp() const;
  void set_timestamp(::google::protobuf::int32 value);

  // optional int32 InputType = 22;
  bool has_inputtype() const;
  void clear_inputtype();
  static const int kInputTypeFieldNumber = 22;
  ::google::protobuf::int32 inputtype() const;
  void set_inputtype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.ManualAuthRequest)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_basereqinfo();
  void clear_has_basereqinfo();
  void set_has_imei();
  void clear_has_imei();
  void set_has_softtype();
  void clear_has_softtype();
  void set_has_builtinipseq();
  void clear_has_builtinipseq();
  void set_has_clientseqid();
  void clear_has_clientseqid();
  void set_has_signature();
  void clear_has_signature();
  void set_has_devicename();
  void clear_has_devicename();
  void set_has_devicetype();
  void clear_has_devicetype();
  void set_has_language();
  void clear_has_language();
  void set_has_timezone();
  void clear_has_timezone();
  void set_has_channel();
  void clear_has_channel();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_devicebrand();
  void clear_has_devicebrand();
  void set_has_devicemodel();
  void clear_has_devicemodel();
  void set_has_ostype();
  void clear_has_ostype();
  void set_has_countrycode();
  void clear_has_countrycode();
  void set_has_bundleid();
  void clear_has_bundleid();
  void set_has_adsource();
  void clear_has_adsource();
  void set_has_iphonever();
  void clear_has_iphonever();
  void set_has_inputtype();
  void clear_has_inputtype();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr imei_;
  ::google::protobuf::internal::ArenaStringPtr softtype_;
  ::google::protobuf::internal::ArenaStringPtr clientseqid_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  ::google::protobuf::internal::ArenaStringPtr devicename_;
  ::google::protobuf::internal::ArenaStringPtr devicetype_;
  ::google::protobuf::internal::ArenaStringPtr language_;
  ::google::protobuf::internal::ArenaStringPtr timezone_;
  ::google::protobuf::internal::ArenaStringPtr devicebrand_;
  ::google::protobuf::internal::ArenaStringPtr devicemodel_;
  ::google::protobuf::internal::ArenaStringPtr ostype_;
  ::google::protobuf::internal::ArenaStringPtr countrycode_;
  ::google::protobuf::internal::ArenaStringPtr bundleid_;
  ::google::protobuf::internal::ArenaStringPtr adsource_;
  ::google::protobuf::internal::ArenaStringPtr iphonever_;
  ::FromCs::BaseRequest* base_;
  ::FromCs::ExtData* basereqinfo_;
  ::google::protobuf::int32 builtinipseq_;
  ::google::protobuf::int32 channel_;
  ::google::protobuf::int32 timestamp_;
  ::google::protobuf::int32 inputtype_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AutoAuthRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.AutoAuthRequest) */ {
 public:
  AutoAuthRequest();
  virtual ~AutoAuthRequest();

  AutoAuthRequest(const AutoAuthRequest& from);

  inline AutoAuthRequest& operator=(const AutoAuthRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AutoAuthRequest& default_instance();

  static inline const AutoAuthRequest* internal_default_instance() {
    return reinterpret_cast<const AutoAuthRequest*>(
               &_AutoAuthRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    73;

  void Swap(AutoAuthRequest* other);

  // implements Message ----------------------------------------------

  inline AutoAuthRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  AutoAuthRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AutoAuthRequest& from);
  void MergeFrom(const AutoAuthRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AutoAuthRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string IMEI = 4;
  bool has_imei() const;
  void clear_imei();
  static const int kIMEIFieldNumber = 4;
  const ::std::string& imei() const;
  void set_imei(const ::std::string& value);
  #if LANG_CXX11
  void set_imei(::std::string&& value);
  #endif
  void set_imei(const char* value);
  void set_imei(const char* value, size_t size);
  ::std::string* mutable_imei();
  ::std::string* release_imei();
  void set_allocated_imei(::std::string* imei);

  // optional string SoftType = 5;
  bool has_softtype() const;
  void clear_softtype();
  static const int kSoftTypeFieldNumber = 5;
  const ::std::string& softtype() const;
  void set_softtype(const ::std::string& value);
  #if LANG_CXX11
  void set_softtype(::std::string&& value);
  #endif
  void set_softtype(const char* value);
  void set_softtype(const char* value, size_t size);
  ::std::string* mutable_softtype();
  ::std::string* release_softtype();
  void set_allocated_softtype(::std::string* softtype);

  // optional string ClientSeqId = 7;
  bool has_clientseqid() const;
  void clear_clientseqid();
  static const int kClientSeqIdFieldNumber = 7;
  const ::std::string& clientseqid() const;
  void set_clientseqid(const ::std::string& value);
  #if LANG_CXX11
  void set_clientseqid(::std::string&& value);
  #endif
  void set_clientseqid(const char* value);
  void set_clientseqid(const char* value, size_t size);
  ::std::string* mutable_clientseqid();
  ::std::string* release_clientseqid();
  void set_allocated_clientseqid(::std::string* clientseqid);

  // optional string Signature = 8;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 8;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_signature(::std::string&& value);
  #endif
  void set_signature(const char* value);
  void set_signature(const char* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // optional string DeviceName = 9;
  bool has_devicename() const;
  void clear_devicename();
  static const int kDeviceNameFieldNumber = 9;
  const ::std::string& devicename() const;
  void set_devicename(const ::std::string& value);
  #if LANG_CXX11
  void set_devicename(::std::string&& value);
  #endif
  void set_devicename(const char* value);
  void set_devicename(const char* value, size_t size);
  ::std::string* mutable_devicename();
  ::std::string* release_devicename();
  void set_allocated_devicename(::std::string* devicename);

  // optional string DeviceType = 10;
  bool has_devicetype() const;
  void clear_devicetype();
  static const int kDeviceTypeFieldNumber = 10;
  const ::std::string& devicetype() const;
  void set_devicetype(const ::std::string& value);
  #if LANG_CXX11
  void set_devicetype(::std::string&& value);
  #endif
  void set_devicetype(const char* value);
  void set_devicetype(const char* value, size_t size);
  ::std::string* mutable_devicetype();
  ::std::string* release_devicetype();
  void set_allocated_devicetype(::std::string* devicetype);

  // optional string Language = 11;
  bool has_language() const;
  void clear_language();
  static const int kLanguageFieldNumber = 11;
  const ::std::string& language() const;
  void set_language(const ::std::string& value);
  #if LANG_CXX11
  void set_language(::std::string&& value);
  #endif
  void set_language(const char* value);
  void set_language(const char* value, size_t size);
  ::std::string* mutable_language();
  ::std::string* release_language();
  void set_allocated_language(::std::string* language);

  // optional string TimeZone = 12;
  bool has_timezone() const;
  void clear_timezone();
  static const int kTimeZoneFieldNumber = 12;
  const ::std::string& timezone() const;
  void set_timezone(const ::std::string& value);
  #if LANG_CXX11
  void set_timezone(::std::string&& value);
  #endif
  void set_timezone(const char* value);
  void set_timezone(const char* value, size_t size);
  ::std::string* mutable_timezone();
  ::std::string* release_timezone();
  void set_allocated_timezone(::std::string* timezone);

  // required .FromCs.BaseRequest base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseRequest& base() const;
  ::FromCs::BaseRequest* mutable_base();
  ::FromCs::BaseRequest* release_base();
  void set_allocated_base(::FromCs::BaseRequest* base);

  // optional .FromCs.ExtData BaseReqInfo = 2;
  bool has_basereqinfo() const;
  void clear_basereqinfo();
  static const int kBaseReqInfoFieldNumber = 2;
  const ::FromCs::ExtData& basereqinfo() const;
  ::FromCs::ExtData* mutable_basereqinfo();
  ::FromCs::ExtData* release_basereqinfo();
  void set_allocated_basereqinfo(::FromCs::ExtData* basereqinfo);

  // optional .FromCs.sKBuiltinBufferT AutoAuthKey = 3;
  bool has_autoauthkey() const;
  void clear_autoauthkey();
  static const int kAutoAuthKeyFieldNumber = 3;
  const ::FromCs::sKBuiltinBufferT& autoauthkey() const;
  ::FromCs::sKBuiltinBufferT* mutable_autoauthkey();
  ::FromCs::sKBuiltinBufferT* release_autoauthkey();
  void set_allocated_autoauthkey(::FromCs::sKBuiltinBufferT* autoauthkey);

  // required int32 builtinIpseq = 6;
  bool has_builtinipseq() const;
  void clear_builtinipseq();
  static const int kBuiltinIpseqFieldNumber = 6;
  ::google::protobuf::int32 builtinipseq() const;
  void set_builtinipseq(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.AutoAuthRequest)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_basereqinfo();
  void clear_has_basereqinfo();
  void set_has_autoauthkey();
  void clear_has_autoauthkey();
  void set_has_imei();
  void clear_has_imei();
  void set_has_softtype();
  void clear_has_softtype();
  void set_has_builtinipseq();
  void clear_has_builtinipseq();
  void set_has_clientseqid();
  void clear_has_clientseqid();
  void set_has_signature();
  void clear_has_signature();
  void set_has_devicename();
  void clear_has_devicename();
  void set_has_devicetype();
  void clear_has_devicetype();
  void set_has_language();
  void clear_has_language();
  void set_has_timezone();
  void clear_has_timezone();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr imei_;
  ::google::protobuf::internal::ArenaStringPtr softtype_;
  ::google::protobuf::internal::ArenaStringPtr clientseqid_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  ::google::protobuf::internal::ArenaStringPtr devicename_;
  ::google::protobuf::internal::ArenaStringPtr devicetype_;
  ::google::protobuf::internal::ArenaStringPtr language_;
  ::google::protobuf::internal::ArenaStringPtr timezone_;
  ::FromCs::BaseRequest* base_;
  ::FromCs::ExtData* basereqinfo_;
  ::FromCs::sKBuiltinBufferT* autoauthkey_;
  ::google::protobuf::int32 builtinipseq_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetLoginQRCodeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.GetLoginQRCodeRequest) */ {
 public:
  GetLoginQRCodeRequest();
  virtual ~GetLoginQRCodeRequest();

  GetLoginQRCodeRequest(const GetLoginQRCodeRequest& from);

  inline GetLoginQRCodeRequest& operator=(const GetLoginQRCodeRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetLoginQRCodeRequest& default_instance();

  static inline const GetLoginQRCodeRequest* internal_default_instance() {
    return reinterpret_cast<const GetLoginQRCodeRequest*>(
               &_GetLoginQRCodeRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    74;

  void Swap(GetLoginQRCodeRequest* other);

  // implements Message ----------------------------------------------

  inline GetLoginQRCodeRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetLoginQRCodeRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetLoginQRCodeRequest& from);
  void MergeFrom(const GetLoginQRCodeRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetLoginQRCodeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string uuid = 3;
  bool has_uuid() const;
  void clear_uuid();
  static const int kUuidFieldNumber = 3;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_uuid(::std::string&& value);
  #endif
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // required .FromCs.BaseRequest base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseRequest& base() const;
  ::FromCs::BaseRequest* mutable_base();
  ::FromCs::BaseRequest* release_base();
  void set_allocated_base(::FromCs::BaseRequest* base);

  // required .FromCs.sKBuiltinBufferT randomEncryKey = 2;
  bool has_randomencrykey() const;
  void clear_randomencrykey();
  static const int kRandomEncryKeyFieldNumber = 2;
  const ::FromCs::sKBuiltinBufferT& randomencrykey() const;
  ::FromCs::sKBuiltinBufferT* mutable_randomencrykey();
  ::FromCs::sKBuiltinBufferT* release_randomencrykey();
  void set_allocated_randomencrykey(::FromCs::sKBuiltinBufferT* randomencrykey);

  // required int32 timestamp = 4;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 4;
  ::google::protobuf::int32 timestamp() const;
  void set_timestamp(::google::protobuf::int32 value);

  // required int32 opcode = 5;
  bool has_opcode() const;
  void clear_opcode();
  static const int kOpcodeFieldNumber = 5;
  ::google::protobuf::int32 opcode() const;
  void set_opcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.GetLoginQRCodeRequest)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_randomencrykey();
  void clear_has_randomencrykey();
  void set_has_uuid();
  void clear_has_uuid();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_opcode();
  void clear_has_opcode();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::FromCs::BaseRequest* base_;
  ::FromCs::sKBuiltinBufferT* randomencrykey_;
  ::google::protobuf::int32 timestamp_;
  ::google::protobuf::int32 opcode_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetLoginQRCodeResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.GetLoginQRCodeResponse) */ {
 public:
  GetLoginQRCodeResponse();
  virtual ~GetLoginQRCodeResponse();

  GetLoginQRCodeResponse(const GetLoginQRCodeResponse& from);

  inline GetLoginQRCodeResponse& operator=(const GetLoginQRCodeResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetLoginQRCodeResponse& default_instance();

  static inline const GetLoginQRCodeResponse* internal_default_instance() {
    return reinterpret_cast<const GetLoginQRCodeResponse*>(
               &_GetLoginQRCodeResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    75;

  void Swap(GetLoginQRCodeResponse* other);

  // implements Message ----------------------------------------------

  inline GetLoginQRCodeResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetLoginQRCodeResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetLoginQRCodeResponse& from);
  void MergeFrom(const GetLoginQRCodeResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetLoginQRCodeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string UUID = 3;
  bool has_uuid() const;
  void clear_uuid();
  static const int kUUIDFieldNumber = 3;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_uuid(::std::string&& value);
  #endif
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // optional string BlueToothBroadCastUuid = 7;
  bool has_bluetoothbroadcastuuid() const;
  void clear_bluetoothbroadcastuuid();
  static const int kBlueToothBroadCastUuidFieldNumber = 7;
  const ::std::string& bluetoothbroadcastuuid() const;
  void set_bluetoothbroadcastuuid(const ::std::string& value);
  #if LANG_CXX11
  void set_bluetoothbroadcastuuid(::std::string&& value);
  #endif
  void set_bluetoothbroadcastuuid(const char* value);
  void set_bluetoothbroadcastuuid(const char* value, size_t size);
  ::std::string* mutable_bluetoothbroadcastuuid();
  ::std::string* release_bluetoothbroadcastuuid();
  void set_allocated_bluetoothbroadcastuuid(::std::string* bluetoothbroadcastuuid);

  // required .FromCs.BaseResponse Base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseResponse& base() const;
  ::FromCs::BaseResponse* mutable_base();
  ::FromCs::BaseResponse* release_base();
  void set_allocated_base(::FromCs::BaseResponse* base);

  // required .FromCs.sKBuiltinBufferT QRCode = 2;
  bool has_qrcode() const;
  void clear_qrcode();
  static const int kQRCodeFieldNumber = 2;
  const ::FromCs::sKBuiltinBufferT& qrcode() const;
  ::FromCs::sKBuiltinBufferT* mutable_qrcode();
  ::FromCs::sKBuiltinBufferT* release_qrcode();
  void set_allocated_qrcode(::FromCs::sKBuiltinBufferT* qrcode);

  // optional .FromCs.sKBuiltinBufferT NotifyKey = 5;
  bool has_notifykey() const;
  void clear_notifykey();
  static const int kNotifyKeyFieldNumber = 5;
  const ::FromCs::sKBuiltinBufferT& notifykey() const;
  ::FromCs::sKBuiltinBufferT* mutable_notifykey();
  ::FromCs::sKBuiltinBufferT* release_notifykey();
  void set_allocated_notifykey(::FromCs::sKBuiltinBufferT* notifykey);

  // optional .FromCs.sKBuiltinBufferT BlueToothBroadCastContent = 8;
  bool has_bluetoothbroadcastcontent() const;
  void clear_bluetoothbroadcastcontent();
  static const int kBlueToothBroadCastContentFieldNumber = 8;
  const ::FromCs::sKBuiltinBufferT& bluetoothbroadcastcontent() const;
  ::FromCs::sKBuiltinBufferT* mutable_bluetoothbroadcastcontent();
  ::FromCs::sKBuiltinBufferT* release_bluetoothbroadcastcontent();
  void set_allocated_bluetoothbroadcastcontent(::FromCs::sKBuiltinBufferT* bluetoothbroadcastcontent);

  // required int32 CheckTime = 4;
  bool has_checktime() const;
  void clear_checktime();
  static const int kCheckTimeFieldNumber = 4;
  ::google::protobuf::int32 checktime() const;
  void set_checktime(::google::protobuf::int32 value);

  // optional int32 ExpiredTime = 6;
  bool has_expiredtime() const;
  void clear_expiredtime();
  static const int kExpiredTimeFieldNumber = 6;
  ::google::protobuf::int32 expiredtime() const;
  void set_expiredtime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.GetLoginQRCodeResponse)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_qrcode();
  void clear_has_qrcode();
  void set_has_uuid();
  void clear_has_uuid();
  void set_has_checktime();
  void clear_has_checktime();
  void set_has_notifykey();
  void clear_has_notifykey();
  void set_has_expiredtime();
  void clear_has_expiredtime();
  void set_has_bluetoothbroadcastuuid();
  void clear_has_bluetoothbroadcastuuid();
  void set_has_bluetoothbroadcastcontent();
  void clear_has_bluetoothbroadcastcontent();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::google::protobuf::internal::ArenaStringPtr bluetoothbroadcastuuid_;
  ::FromCs::BaseResponse* base_;
  ::FromCs::sKBuiltinBufferT* qrcode_;
  ::FromCs::sKBuiltinBufferT* notifykey_;
  ::FromCs::sKBuiltinBufferT* bluetoothbroadcastcontent_;
  ::google::protobuf::int32 checktime_;
  ::google::protobuf::int32 expiredtime_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NewAuthResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.NewAuthResponse) */ {
 public:
  NewAuthResponse();
  virtual ~NewAuthResponse();

  NewAuthResponse(const NewAuthResponse& from);

  inline NewAuthResponse& operator=(const NewAuthResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NewAuthResponse& default_instance();

  static inline const NewAuthResponse* internal_default_instance() {
    return reinterpret_cast<const NewAuthResponse*>(
               &_NewAuthResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    76;

  void Swap(NewAuthResponse* other);

  // implements Message ----------------------------------------------

  inline NewAuthResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  NewAuthResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NewAuthResponse& from);
  void MergeFrom(const NewAuthResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NewAuthResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .FromCs.BaseResponse base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseResponse& base() const;
  ::FromCs::BaseResponse* mutable_base();
  ::FromCs::BaseResponse* release_base();
  void set_allocated_base(::FromCs::BaseResponse* base);

  // optional .FromCs.AuthData Auth = 3;
  bool has_auth() const;
  void clear_auth();
  static const int kAuthFieldNumber = 3;
  const ::FromCs::AuthData& auth() const;
  ::FromCs::AuthData* mutable_auth();
  ::FromCs::AuthData* release_auth();
  void set_allocated_auth(::FromCs::AuthData* auth);

  // optional .FromCs.AccountInfo User = 4;
  bool has_user() const;
  void clear_user();
  static const int kUserFieldNumber = 4;
  const ::FromCs::AccountInfo& user() const;
  ::FromCs::AccountInfo* mutable_user();
  ::FromCs::AccountInfo* release_user();
  void set_allocated_user(::FromCs::AccountInfo* user);

  // optional .FromCs.ServerInfo Server = 5;
  bool has_server() const;
  void clear_server();
  static const int kServerFieldNumber = 5;
  const ::FromCs::ServerInfo& server() const;
  ::FromCs::ServerInfo* mutable_server();
  ::FromCs::ServerInfo* release_server();
  void set_allocated_server(::FromCs::ServerInfo* server);

  // optional int32 int2 = 2;
  bool has_int2() const;
  void clear_int2();
  static const int kInt2FieldNumber = 2;
  ::google::protobuf::int32 int2() const;
  void set_int2(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.NewAuthResponse)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_int2();
  void clear_has_int2();
  void set_has_auth();
  void clear_has_auth();
  void set_has_user();
  void clear_has_user();
  void set_has_server();
  void clear_has_server();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::FromCs::BaseResponse* base_;
  ::FromCs::AuthData* auth_;
  ::FromCs::AccountInfo* user_;
  ::FromCs::ServerInfo* server_;
  ::google::protobuf::int32 int2_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CheckLoginQRCodeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.CheckLoginQRCodeRequest) */ {
 public:
  CheckLoginQRCodeRequest();
  virtual ~CheckLoginQRCodeRequest();

  CheckLoginQRCodeRequest(const CheckLoginQRCodeRequest& from);

  inline CheckLoginQRCodeRequest& operator=(const CheckLoginQRCodeRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckLoginQRCodeRequest& default_instance();

  static inline const CheckLoginQRCodeRequest* internal_default_instance() {
    return reinterpret_cast<const CheckLoginQRCodeRequest*>(
               &_CheckLoginQRCodeRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    77;

  void Swap(CheckLoginQRCodeRequest* other);

  // implements Message ----------------------------------------------

  inline CheckLoginQRCodeRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CheckLoginQRCodeRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CheckLoginQRCodeRequest& from);
  void MergeFrom(const CheckLoginQRCodeRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CheckLoginQRCodeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string uuid = 3;
  bool has_uuid() const;
  void clear_uuid();
  static const int kUuidFieldNumber = 3;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_uuid(::std::string&& value);
  #endif
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // required .FromCs.BaseRequest base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseRequest& base() const;
  ::FromCs::BaseRequest* mutable_base();
  ::FromCs::BaseRequest* release_base();
  void set_allocated_base(::FromCs::BaseRequest* base);

  // required .FromCs.sKBuiltinBufferT randomEncryKey = 2;
  bool has_randomencrykey() const;
  void clear_randomencrykey();
  static const int kRandomEncryKeyFieldNumber = 2;
  const ::FromCs::sKBuiltinBufferT& randomencrykey() const;
  ::FromCs::sKBuiltinBufferT* mutable_randomencrykey();
  ::FromCs::sKBuiltinBufferT* release_randomencrykey();
  void set_allocated_randomencrykey(::FromCs::sKBuiltinBufferT* randomencrykey);

  // required int32 timeStamp = 4;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimeStampFieldNumber = 4;
  ::google::protobuf::int32 timestamp() const;
  void set_timestamp(::google::protobuf::int32 value);

  // required int32 opcode = 5;
  bool has_opcode() const;
  void clear_opcode();
  static const int kOpcodeFieldNumber = 5;
  ::google::protobuf::int32 opcode() const;
  void set_opcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.CheckLoginQRCodeRequest)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_randomencrykey();
  void clear_has_randomencrykey();
  void set_has_uuid();
  void clear_has_uuid();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_opcode();
  void clear_has_opcode();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::FromCs::BaseRequest* base_;
  ::FromCs::sKBuiltinBufferT* randomencrykey_;
  ::google::protobuf::int32 timestamp_;
  ::google::protobuf::int32 opcode_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CheckLoginQRCodeResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.CheckLoginQRCodeResponse) */ {
 public:
  CheckLoginQRCodeResponse();
  virtual ~CheckLoginQRCodeResponse();

  CheckLoginQRCodeResponse(const CheckLoginQRCodeResponse& from);

  inline CheckLoginQRCodeResponse& operator=(const CheckLoginQRCodeResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckLoginQRCodeResponse& default_instance();

  static inline const CheckLoginQRCodeResponse* internal_default_instance() {
    return reinterpret_cast<const CheckLoginQRCodeResponse*>(
               &_CheckLoginQRCodeResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    78;

  void Swap(CheckLoginQRCodeResponse* other);

  // implements Message ----------------------------------------------

  inline CheckLoginQRCodeResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CheckLoginQRCodeResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CheckLoginQRCodeResponse& from);
  void MergeFrom(const CheckLoginQRCodeResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CheckLoginQRCodeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .FromCs.BaseResponse base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::FromCs::BaseResponse& base() const;
  ::FromCs::BaseResponse* mutable_base();
  ::FromCs::BaseResponse* release_base();
  void set_allocated_base(::FromCs::BaseResponse* base);

  // optional .FromCs.LoginQRCodeNotifyPkg notifyPkg = 3;
  bool has_notifypkg() const;
  void clear_notifypkg();
  static const int kNotifyPkgFieldNumber = 3;
  const ::FromCs::LoginQRCodeNotifyPkg& notifypkg() const;
  ::FromCs::LoginQRCodeNotifyPkg* mutable_notifypkg();
  ::FromCs::LoginQRCodeNotifyPkg* release_notifypkg();
  void set_allocated_notifypkg(::FromCs::LoginQRCodeNotifyPkg* notifypkg);

  // @@protoc_insertion_point(class_scope:FromCs.CheckLoginQRCodeResponse)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_notifypkg();
  void clear_has_notifypkg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::FromCs::BaseResponse* base_;
  ::FromCs::LoginQRCodeNotifyPkg* notifypkg_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class sKBuiltinstringT : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.sKBuiltinstringT) */ {
 public:
  sKBuiltinstringT();
  virtual ~sKBuiltinstringT();

  sKBuiltinstringT(const sKBuiltinstringT& from);

  inline sKBuiltinstringT& operator=(const sKBuiltinstringT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sKBuiltinstringT& default_instance();

  static inline const sKBuiltinstringT* internal_default_instance() {
    return reinterpret_cast<const sKBuiltinstringT*>(
               &_sKBuiltinstringT_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    79;

  void Swap(sKBuiltinstringT* other);

  // implements Message ----------------------------------------------

  inline sKBuiltinstringT* New() const PROTOBUF_FINAL { return New(NULL); }

  sKBuiltinstringT* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const sKBuiltinstringT& from);
  void MergeFrom(const sKBuiltinstringT& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(sKBuiltinstringT* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string string = 1;
  bool has_string() const;
  void clear_string();
  static const int kStringFieldNumber = 1;
  const ::std::string& string() const;
  void set_string(const ::std::string& value);
  #if LANG_CXX11
  void set_string(::std::string&& value);
  #endif
  void set_string(const char* value);
  void set_string(const char* value, size_t size);
  ::std::string* mutable_string();
  ::std::string* release_string();
  void set_allocated_string(::std::string* string);

  // @@protoc_insertion_point(class_scope:FromCs.sKBuiltinstringT)
 private:
  void set_has_string();
  void clear_has_string();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr string_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class sKBuiltinBufferT : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.sKBuiltinBufferT) */ {
 public:
  sKBuiltinBufferT();
  virtual ~sKBuiltinBufferT();

  sKBuiltinBufferT(const sKBuiltinBufferT& from);

  inline sKBuiltinBufferT& operator=(const sKBuiltinBufferT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sKBuiltinBufferT& default_instance();

  static inline const sKBuiltinBufferT* internal_default_instance() {
    return reinterpret_cast<const sKBuiltinBufferT*>(
               &_sKBuiltinBufferT_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    80;

  void Swap(sKBuiltinBufferT* other);

  // implements Message ----------------------------------------------

  inline sKBuiltinBufferT* New() const PROTOBUF_FINAL { return New(NULL); }

  sKBuiltinBufferT* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const sKBuiltinBufferT& from);
  void MergeFrom(const sKBuiltinBufferT& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(sKBuiltinBufferT* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes Buffer = 2;
  bool has_buffer() const;
  void clear_buffer();
  static const int kBufferFieldNumber = 2;
  const ::std::string& buffer() const;
  void set_buffer(const ::std::string& value);
  #if LANG_CXX11
  void set_buffer(::std::string&& value);
  #endif
  void set_buffer(const char* value);
  void set_buffer(const void* value, size_t size);
  ::std::string* mutable_buffer();
  ::std::string* release_buffer();
  void set_allocated_buffer(::std::string* buffer);

  // optional int32 ILen = 1;
  bool has_ilen() const;
  void clear_ilen();
  static const int kILenFieldNumber = 1;
  ::google::protobuf::int32 ilen() const;
  void set_ilen(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.sKBuiltinBufferT)
 private:
  void set_has_ilen();
  void clear_has_ilen();
  void set_has_buffer();
  void clear_has_buffer();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr buffer_;
  ::google::protobuf::int32 ilen_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BaseRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.BaseRequest) */ {
 public:
  BaseRequest();
  virtual ~BaseRequest();

  BaseRequest(const BaseRequest& from);

  inline BaseRequest& operator=(const BaseRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BaseRequest& default_instance();

  static inline const BaseRequest* internal_default_instance() {
    return reinterpret_cast<const BaseRequest*>(
               &_BaseRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    81;

  void Swap(BaseRequest* other);

  // implements Message ----------------------------------------------

  inline BaseRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  BaseRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BaseRequest& from);
  void MergeFrom(const BaseRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BaseRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes SessionKey = 1;
  bool has_sessionkey() const;
  void clear_sessionkey();
  static const int kSessionKeyFieldNumber = 1;
  const ::std::string& sessionkey() const;
  void set_sessionkey(const ::std::string& value);
  #if LANG_CXX11
  void set_sessionkey(::std::string&& value);
  #endif
  void set_sessionkey(const char* value);
  void set_sessionkey(const void* value, size_t size);
  ::std::string* mutable_sessionkey();
  ::std::string* release_sessionkey();
  void set_allocated_sessionkey(::std::string* sessionkey);

  // optional bytes DeviceID = 3;
  bool has_deviceid() const;
  void clear_deviceid();
  static const int kDeviceIDFieldNumber = 3;
  const ::std::string& deviceid() const;
  void set_deviceid(const ::std::string& value);
  #if LANG_CXX11
  void set_deviceid(::std::string&& value);
  #endif
  void set_deviceid(const char* value);
  void set_deviceid(const void* value, size_t size);
  ::std::string* mutable_deviceid();
  ::std::string* release_deviceid();
  void set_allocated_deviceid(::std::string* deviceid);

  // optional bytes DeviceType = 5;
  bool has_devicetype() const;
  void clear_devicetype();
  static const int kDeviceTypeFieldNumber = 5;
  const ::std::string& devicetype() const;
  void set_devicetype(const ::std::string& value);
  #if LANG_CXX11
  void set_devicetype(::std::string&& value);
  #endif
  void set_devicetype(const char* value);
  void set_devicetype(const void* value, size_t size);
  ::std::string* mutable_devicetype();
  ::std::string* release_devicetype();
  void set_allocated_devicetype(::std::string* devicetype);

  // optional int32 Uin = 2;
  bool has_uin() const;
  void clear_uin();
  static const int kUinFieldNumber = 2;
  ::google::protobuf::int32 uin() const;
  void set_uin(::google::protobuf::int32 value);

  // optional int32 ClientVersion = 4;
  bool has_clientversion() const;
  void clear_clientversion();
  static const int kClientVersionFieldNumber = 4;
  ::google::protobuf::int32 clientversion() const;
  void set_clientversion(::google::protobuf::int32 value);

  // optional int32 Scene = 6;
  bool has_scene() const;
  void clear_scene();
  static const int kSceneFieldNumber = 6;
  ::google::protobuf::int32 scene() const;
  void set_scene(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.BaseRequest)
 private:
  void set_has_sessionkey();
  void clear_has_sessionkey();
  void set_has_uin();
  void clear_has_uin();
  void set_has_deviceid();
  void clear_has_deviceid();
  void set_has_clientversion();
  void clear_has_clientversion();
  void set_has_devicetype();
  void clear_has_devicetype();
  void set_has_scene();
  void clear_has_scene();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sessionkey_;
  ::google::protobuf::internal::ArenaStringPtr deviceid_;
  ::google::protobuf::internal::ArenaStringPtr devicetype_;
  ::google::protobuf::int32 uin_;
  ::google::protobuf::int32 clientversion_;
  ::google::protobuf::int32 scene_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BaseResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.BaseResponse) */ {
 public:
  BaseResponse();
  virtual ~BaseResponse();

  BaseResponse(const BaseResponse& from);

  inline BaseResponse& operator=(const BaseResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BaseResponse& default_instance();

  static inline const BaseResponse* internal_default_instance() {
    return reinterpret_cast<const BaseResponse*>(
               &_BaseResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    82;

  void Swap(BaseResponse* other);

  // implements Message ----------------------------------------------

  inline BaseResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  BaseResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BaseResponse& from);
  void MergeFrom(const BaseResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BaseResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .FromCs.sKBuiltinstringT ErrMsg = 2;
  bool has_errmsg() const;
  void clear_errmsg();
  static const int kErrMsgFieldNumber = 2;
  const ::FromCs::sKBuiltinstringT& errmsg() const;
  ::FromCs::sKBuiltinstringT* mutable_errmsg();
  ::FromCs::sKBuiltinstringT* release_errmsg();
  void set_allocated_errmsg(::FromCs::sKBuiltinstringT* errmsg);

  // optional int32 Ret = 1;
  bool has_ret() const;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::google::protobuf::int32 ret() const;
  void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.BaseResponse)
 private:
  void set_has_ret();
  void clear_has_ret();
  void set_has_errmsg();
  void clear_has_errmsg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::FromCs::sKBuiltinstringT* errmsg_;
  ::google::protobuf::int32 ret_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DnsInfoType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.DnsInfoType) */ {
 public:
  DnsInfoType();
  virtual ~DnsInfoType();

  DnsInfoType(const DnsInfoType& from);

  inline DnsInfoType& operator=(const DnsInfoType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DnsInfoType& default_instance();

  static inline const DnsInfoType* internal_default_instance() {
    return reinterpret_cast<const DnsInfoType*>(
               &_DnsInfoType_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    83;

  void Swap(DnsInfoType* other);

  // implements Message ----------------------------------------------

  inline DnsInfoType* New() const PROTOBUF_FINAL { return New(NULL); }

  DnsInfoType* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DnsInfoType& from);
  void MergeFrom(const DnsInfoType& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DnsInfoType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ZoneDomain = 7;
  bool has_zonedomain() const;
  void clear_zonedomain();
  static const int kZoneDomainFieldNumber = 7;
  const ::std::string& zonedomain() const;
  void set_zonedomain(const ::std::string& value);
  #if LANG_CXX11
  void set_zonedomain(::std::string&& value);
  #endif
  void set_zonedomain(const char* value);
  void set_zonedomain(const char* value, size_t size);
  ::std::string* mutable_zonedomain();
  ::std::string* release_zonedomain();
  void set_allocated_zonedomain(::std::string* zonedomain);

  // optional .FromCs.sKBuiltinstringT frontIPList_ = 6;
  bool has_frontiplist_() const;
  void clear_frontiplist_();
  static const int kFrontIPListFieldNumber = 6;
  const ::FromCs::sKBuiltinstringT& frontiplist_() const;
  ::FromCs::sKBuiltinstringT* mutable_frontiplist_();
  ::FromCs::sKBuiltinstringT* release_frontiplist_();
  void set_allocated_frontiplist_(::FromCs::sKBuiltinstringT* frontiplist_);

  // optional .FromCs.sKBuiltinstringT AuthKey = 8;
  bool has_authkey() const;
  void clear_authkey();
  static const int kAuthKeyFieldNumber = 8;
  const ::FromCs::sKBuiltinstringT& authkey() const;
  ::FromCs::sKBuiltinstringT* mutable_authkey();
  ::FromCs::sKBuiltinstringT* release_authkey();
  void set_allocated_authkey(::FromCs::sKBuiltinstringT* authkey);

  // optional .FromCs.sKBuiltinstringT zoneIPList_ = 11;
  bool has_zoneiplist_() const;
  void clear_zoneiplist_();
  static const int kZoneIPListFieldNumber = 11;
  const ::FromCs::sKBuiltinstringT& zoneiplist_() const;
  ::FromCs::sKBuiltinstringT* mutable_zoneiplist_();
  ::FromCs::sKBuiltinstringT* release_zoneiplist_();
  void set_allocated_zoneiplist_(::FromCs::sKBuiltinstringT* zoneiplist_);

  // optional int32 Ver = 1;
  bool has_ver() const;
  void clear_ver();
  static const int kVerFieldNumber = 1;
  ::google::protobuf::int32 ver() const;
  void set_ver(::google::protobuf::int32 value);

  // optional int32 Uin = 2;
  bool has_uin() const;
  void clear_uin();
  static const int kUinFieldNumber = 2;
  ::google::protobuf::int32 uin() const;
  void set_uin(::google::protobuf::int32 value);

  // optional int32 ExpireTime = 3;
  bool has_expiretime() const;
  void clear_expiretime();
  static const int kExpireTimeFieldNumber = 3;
  ::google::protobuf::int32 expiretime() const;
  void set_expiretime(::google::protobuf::int32 value);

  // optional int32 FrontID = 4;
  bool has_frontid() const;
  void clear_frontid();
  static const int kFrontIDFieldNumber = 4;
  ::google::protobuf::int32 frontid() const;
  void set_frontid(::google::protobuf::int32 value);

  // optional int32 FrontIPCount = 5;
  bool has_frontipcount() const;
  void clear_frontipcount();
  static const int kFrontIPCountFieldNumber = 5;
  ::google::protobuf::int32 frontipcount() const;
  void set_frontipcount(::google::protobuf::int32 value);

  // optional int32 ZoneID = 9;
  bool has_zoneid() const;
  void clear_zoneid();
  static const int kZoneIDFieldNumber = 9;
  ::google::protobuf::int32 zoneid() const;
  void set_zoneid(::google::protobuf::int32 value);

  // optional int32 ZoneIPCount = 10;
  bool has_zoneipcount() const;
  void clear_zoneipcount();
  static const int kZoneIPCountFieldNumber = 10;
  ::google::protobuf::int32 zoneipcount() const;
  void set_zoneipcount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.DnsInfoType)
 private:
  void set_has_ver();
  void clear_has_ver();
  void set_has_uin();
  void clear_has_uin();
  void set_has_expiretime();
  void clear_has_expiretime();
  void set_has_frontid();
  void clear_has_frontid();
  void set_has_frontipcount();
  void clear_has_frontipcount();
  void set_has_frontiplist_();
  void clear_has_frontiplist_();
  void set_has_zonedomain();
  void clear_has_zonedomain();
  void set_has_authkey();
  void clear_has_authkey();
  void set_has_zoneid();
  void clear_has_zoneid();
  void set_has_zoneipcount();
  void clear_has_zoneipcount();
  void set_has_zoneiplist_();
  void clear_has_zoneiplist_();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr zonedomain_;
  ::FromCs::sKBuiltinstringT* frontiplist__;
  ::FromCs::sKBuiltinstringT* authkey_;
  ::FromCs::sKBuiltinstringT* zoneiplist__;
  ::google::protobuf::int32 ver_;
  ::google::protobuf::int32 uin_;
  ::google::protobuf::int32 expiretime_;
  ::google::protobuf::int32 frontid_;
  ::google::protobuf::int32 frontipcount_;
  ::google::protobuf::int32 zoneid_;
  ::google::protobuf::int32 zoneipcount_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NewHostListType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.NewHostListType) */ {
 public:
  NewHostListType();
  virtual ~NewHostListType();

  NewHostListType(const NewHostListType& from);

  inline NewHostListType& operator=(const NewHostListType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NewHostListType& default_instance();

  static inline const NewHostListType* internal_default_instance() {
    return reinterpret_cast<const NewHostListType*>(
               &_NewHostListType_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    84;

  void Swap(NewHostListType* other);

  // implements Message ----------------------------------------------

  inline NewHostListType* New() const PROTOBUF_FINAL { return New(NULL); }

  NewHostListType* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NewHostListType& from);
  void MergeFrom(const NewHostListType& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NewHostListType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .FromCs.sKBuiltinstringT list_ = 2;
  bool has_list_() const;
  void clear_list_();
  static const int kListFieldNumber = 2;
  const ::FromCs::sKBuiltinstringT& list_() const;
  ::FromCs::sKBuiltinstringT* mutable_list_();
  ::FromCs::sKBuiltinstringT* release_list_();
  void set_allocated_list_(::FromCs::sKBuiltinstringT* list_);

  // optional int32 Count = 1;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 1;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.NewHostListType)
 private:
  void set_has_count();
  void clear_has_count();
  void set_has_list_();
  void clear_has_list_();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::FromCs::sKBuiltinstringT* list__;
  ::google::protobuf::int32 count_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NewHost : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.NewHost) */ {
 public:
  NewHost();
  virtual ~NewHost();

  NewHost(const NewHost& from);

  inline NewHost& operator=(const NewHost& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NewHost& default_instance();

  static inline const NewHost* internal_default_instance() {
    return reinterpret_cast<const NewHost*>(
               &_NewHost_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    85;

  void Swap(NewHost* other);

  // implements Message ----------------------------------------------

  inline NewHost* New() const PROTOBUF_FINAL { return New(NULL); }

  NewHost* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NewHost& from);
  void MergeFrom(const NewHost& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NewHost* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Origin = 1;
  bool has_origin() const;
  void clear_origin();
  static const int kOriginFieldNumber = 1;
  const ::std::string& origin() const;
  void set_origin(const ::std::string& value);
  #if LANG_CXX11
  void set_origin(::std::string&& value);
  #endif
  void set_origin(const char* value);
  void set_origin(const char* value, size_t size);
  ::std::string* mutable_origin();
  ::std::string* release_origin();
  void set_allocated_origin(::std::string* origin);

  // optional string Substitute = 2;
  bool has_substitute() const;
  void clear_substitute();
  static const int kSubstituteFieldNumber = 2;
  const ::std::string& substitute() const;
  void set_substitute(const ::std::string& value);
  #if LANG_CXX11
  void set_substitute(::std::string&& value);
  #endif
  void set_substitute(const char* value);
  void set_substitute(const char* value, size_t size);
  ::std::string* mutable_substitute();
  ::std::string* release_substitute();
  void set_allocated_substitute(::std::string* substitute);

  // optional int32 Type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.NewHost)
 private:
  void set_has_origin();
  void clear_has_origin();
  void set_has_substitute();
  void clear_has_substitute();
  void set_has_type();
  void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr origin_;
  ::google::protobuf::internal::ArenaStringPtr substitute_;
  ::google::protobuf::int32 type_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PluginKeyListType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.PluginKeyListType) */ {
 public:
  PluginKeyListType();
  virtual ~PluginKeyListType();

  PluginKeyListType(const PluginKeyListType& from);

  inline PluginKeyListType& operator=(const PluginKeyListType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PluginKeyListType& default_instance();

  static inline const PluginKeyListType* internal_default_instance() {
    return reinterpret_cast<const PluginKeyListType*>(
               &_PluginKeyListType_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    86;

  void Swap(PluginKeyListType* other);

  // implements Message ----------------------------------------------

  inline PluginKeyListType* New() const PROTOBUF_FINAL { return New(NULL); }

  PluginKeyListType* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PluginKeyListType& from);
  void MergeFrom(const PluginKeyListType& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PluginKeyListType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .FromCs.sKBuiltinstringT list_ = 2;
  bool has_list_() const;
  void clear_list_();
  static const int kListFieldNumber = 2;
  const ::FromCs::sKBuiltinstringT& list_() const;
  ::FromCs::sKBuiltinstringT* mutable_list_();
  ::FromCs::sKBuiltinstringT* release_list_();
  void set_allocated_list_(::FromCs::sKBuiltinstringT* list_);

  // optional int32 Count = 1;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 1;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.PluginKeyListType)
 private:
  void set_has_count();
  void clear_has_count();
  void set_has_list_();
  void clear_has_list_();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::FromCs::sKBuiltinstringT* list__;
  ::google::protobuf::int32 count_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PluginKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.PluginKey) */ {
 public:
  PluginKey();
  virtual ~PluginKey();

  PluginKey(const PluginKey& from);

  inline PluginKey& operator=(const PluginKey& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PluginKey& default_instance();

  static inline const PluginKey* internal_default_instance() {
    return reinterpret_cast<const PluginKey*>(
               &_PluginKey_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    87;

  void Swap(PluginKey* other);

  // implements Message ----------------------------------------------

  inline PluginKey* New() const PROTOBUF_FINAL { return New(NULL); }

  PluginKey* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PluginKey& from);
  void MergeFrom(const PluginKey& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PluginKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional int32 Id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.PluginKey)
 private:
  void set_has_key();
  void clear_has_key();
  void set_has_id();
  void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::int32 id_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NetworkControlType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.NetworkControlType) */ {
 public:
  NetworkControlType();
  virtual ~NetworkControlType();

  NetworkControlType(const NetworkControlType& from);

  inline NetworkControlType& operator=(const NetworkControlType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetworkControlType& default_instance();

  static inline const NetworkControlType* internal_default_instance() {
    return reinterpret_cast<const NetworkControlType*>(
               &_NetworkControlType_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    88;

  void Swap(NetworkControlType* other);

  // implements Message ----------------------------------------------

  inline NetworkControlType* New() const PROTOBUF_FINAL { return New(NULL); }

  NetworkControlType* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NetworkControlType& from);
  void MergeFrom(const NetworkControlType& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NetworkControlType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string PortList = 1;
  bool has_portlist() const;
  void clear_portlist();
  static const int kPortListFieldNumber = 1;
  const ::std::string& portlist() const;
  void set_portlist(const ::std::string& value);
  #if LANG_CXX11
  void set_portlist(::std::string&& value);
  #endif
  void set_portlist(const char* value);
  void set_portlist(const char* value, size_t size);
  ::std::string* mutable_portlist();
  ::std::string* release_portlist();
  void set_allocated_portlist(::std::string* portlist);

  // optional string TimeoutList = 2;
  bool has_timeoutlist() const;
  void clear_timeoutlist();
  static const int kTimeoutListFieldNumber = 2;
  const ::std::string& timeoutlist() const;
  void set_timeoutlist(const ::std::string& value);
  #if LANG_CXX11
  void set_timeoutlist(::std::string&& value);
  #endif
  void set_timeoutlist(const char* value);
  void set_timeoutlist(const char* value, size_t size);
  ::std::string* mutable_timeoutlist();
  ::std::string* release_timeoutlist();
  void set_allocated_timeoutlist(::std::string* timeoutlist);

  // optional int32 MinNoopInterval = 3;
  bool has_minnoopinterval() const;
  void clear_minnoopinterval();
  static const int kMinNoopIntervalFieldNumber = 3;
  ::google::protobuf::int32 minnoopinterval() const;
  void set_minnoopinterval(::google::protobuf::int32 value);

  // optional int32 MaxNoopInterval = 4;
  bool has_maxnoopinterval() const;
  void clear_maxnoopinterval();
  static const int kMaxNoopIntervalFieldNumber = 4;
  ::google::protobuf::int32 maxnoopinterval() const;
  void set_maxnoopinterval(::google::protobuf::int32 value);

  // optional int32 Int5 = 5;
  bool has_int5() const;
  void clear_int5();
  static const int kInt5FieldNumber = 5;
  ::google::protobuf::int32 int5() const;
  void set_int5(::google::protobuf::int32 value);

  // optional int32 Int6 = 6;
  bool has_int6() const;
  void clear_int6();
  static const int kInt6FieldNumber = 6;
  ::google::protobuf::int32 int6() const;
  void set_int6(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.NetworkControlType)
 private:
  void set_has_portlist();
  void clear_has_portlist();
  void set_has_timeoutlist();
  void clear_has_timeoutlist();
  void set_has_minnoopinterval();
  void clear_has_minnoopinterval();
  void set_has_maxnoopinterval();
  void clear_has_maxnoopinterval();
  void set_has_int5();
  void clear_has_int5();
  void set_has_int6();
  void clear_has_int6();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr portlist_;
  ::google::protobuf::internal::ArenaStringPtr timeoutlist_;
  ::google::protobuf::int32 minnoopinterval_;
  ::google::protobuf::int32 maxnoopinterval_;
  ::google::protobuf::int32 int5_;
  ::google::protobuf::int32 int6_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class iPList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.iPList) */ {
 public:
  iPList();
  virtual ~iPList();

  iPList(const iPList& from);

  inline iPList& operator=(const iPList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const iPList& default_instance();

  static inline const iPList* internal_default_instance() {
    return reinterpret_cast<const iPList*>(
               &_iPList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    89;

  void Swap(iPList* other);

  // implements Message ----------------------------------------------

  inline iPList* New() const PROTOBUF_FINAL { return New(NULL); }

  iPList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const iPList& from);
  void MergeFrom(const iPList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(iPList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .FromCs.iPEnd longCionnectIPList_ = 3;
  int longcionnectiplist__size() const;
  void clear_longcionnectiplist_();
  static const int kLongCionnectIPListFieldNumber = 3;
  const ::FromCs::iPEnd& longcionnectiplist_(int index) const;
  ::FromCs::iPEnd* mutable_longcionnectiplist_(int index);
  ::FromCs::iPEnd* add_longcionnectiplist_();
  ::google::protobuf::RepeatedPtrField< ::FromCs::iPEnd >*
      mutable_longcionnectiplist_();
  const ::google::protobuf::RepeatedPtrField< ::FromCs::iPEnd >&
      longcionnectiplist_() const;

  // repeated .FromCs.iPEnd shortConnectIPList_ = 4;
  int shortconnectiplist__size() const;
  void clear_shortconnectiplist_();
  static const int kShortConnectIPListFieldNumber = 4;
  const ::FromCs::iPEnd& shortconnectiplist_(int index) const;
  ::FromCs::iPEnd* mutable_shortconnectiplist_(int index);
  ::FromCs::iPEnd* add_shortconnectiplist_();
  ::google::protobuf::RepeatedPtrField< ::FromCs::iPEnd >*
      mutable_shortconnectiplist_();
  const ::google::protobuf::RepeatedPtrField< ::FromCs::iPEnd >&
      shortconnectiplist_() const;

  // optional int32 LongConnectIPCount = 1;
  bool has_longconnectipcount() const;
  void clear_longconnectipcount();
  static const int kLongConnectIPCountFieldNumber = 1;
  ::google::protobuf::int32 longconnectipcount() const;
  void set_longconnectipcount(::google::protobuf::int32 value);

  // optional int32 ShortConnectIPCount = 2;
  bool has_shortconnectipcount() const;
  void clear_shortconnectipcount();
  static const int kShortConnectIPCountFieldNumber = 2;
  ::google::protobuf::int32 shortconnectipcount() const;
  void set_shortconnectipcount(::google::protobuf::int32 value);

  // optional int32 Seq = 5;
  bool has_seq() const;
  void clear_seq();
  static const int kSeqFieldNumber = 5;
  ::google::protobuf::int32 seq() const;
  void set_seq(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.iPList)
 private:
  void set_has_longconnectipcount();
  void clear_has_longconnectipcount();
  void set_has_shortconnectipcount();
  void clear_has_shortconnectipcount();
  void set_has_seq();
  void clear_has_seq();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::FromCs::iPEnd > longcionnectiplist__;
  ::google::protobuf::RepeatedPtrField< ::FromCs::iPEnd > shortconnectiplist__;
  ::google::protobuf::int32 longconnectipcount_;
  ::google::protobuf::int32 shortconnectipcount_;
  ::google::protobuf::int32 seq_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class iPEnd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.iPEnd) */ {
 public:
  iPEnd();
  virtual ~iPEnd();

  iPEnd(const iPEnd& from);

  inline iPEnd& operator=(const iPEnd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const iPEnd& default_instance();

  static inline const iPEnd* internal_default_instance() {
    return reinterpret_cast<const iPEnd*>(
               &_iPEnd_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    90;

  void Swap(iPEnd* other);

  // implements Message ----------------------------------------------

  inline iPEnd* New() const PROTOBUF_FINAL { return New(NULL); }

  iPEnd* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const iPEnd& from);
  void MergeFrom(const iPEnd& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(iPEnd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes IP = 3;
  bool has_ip() const;
  void clear_ip();
  static const int kIPFieldNumber = 3;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const void* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // optional bytes Host = 4;
  bool has_host() const;
  void clear_host();
  static const int kHostFieldNumber = 4;
  const ::std::string& host() const;
  void set_host(const ::std::string& value);
  #if LANG_CXX11
  void set_host(::std::string&& value);
  #endif
  void set_host(const char* value);
  void set_host(const void* value, size_t size);
  ::std::string* mutable_host();
  ::std::string* release_host();
  void set_allocated_host(::std::string* host);

  // optional int32 Type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // optional int32 Port = 2;
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.iPEnd)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_port();
  void clear_has_port();
  void set_has_ip();
  void clear_has_ip();
  void set_has_host();
  void clear_has_host();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::internal::ArenaStringPtr host_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 port_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NewMsgResponseBody : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.NewMsgResponseBody) */ {
 public:
  NewMsgResponseBody();
  virtual ~NewMsgResponseBody();

  NewMsgResponseBody(const NewMsgResponseBody& from);

  inline NewMsgResponseBody& operator=(const NewMsgResponseBody& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NewMsgResponseBody& default_instance();

  static inline const NewMsgResponseBody* internal_default_instance() {
    return reinterpret_cast<const NewMsgResponseBody*>(
               &_NewMsgResponseBody_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    91;

  void Swap(NewMsgResponseBody* other);

  // implements Message ----------------------------------------------

  inline NewMsgResponseBody* New() const PROTOBUF_FINAL { return New(NULL); }

  NewMsgResponseBody* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NewMsgResponseBody& from);
  void MergeFrom(const NewMsgResponseBody& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NewMsgResponseBody* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .FromCs.sKBuiltinstringT ToUserName = 2;
  bool has_tousername() const;
  void clear_tousername();
  static const int kToUserNameFieldNumber = 2;
  const ::FromCs::sKBuiltinstringT& tousername() const;
  ::FromCs::sKBuiltinstringT* mutable_tousername();
  ::FromCs::sKBuiltinstringT* release_tousername();
  void set_allocated_tousername(::FromCs::sKBuiltinstringT* tousername);

  // optional int32 Ret = 1;
  bool has_ret() const;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::google::protobuf::int32 ret() const;
  void set_ret(::google::protobuf::int32 value);

  // optional int32 MsgId = 3;
  bool has_msgid() const;
  void clear_msgid();
  static const int kMsgIdFieldNumber = 3;
  ::google::protobuf::int32 msgid() const;
  void set_msgid(::google::protobuf::int32 value);

  // optional int32 ClientMsgId = 4;
  bool has_clientmsgid() const;
  void clear_clientmsgid();
  static const int kClientMsgIdFieldNumber = 4;
  ::google::protobuf::int32 clientmsgid() const;
  void set_clientmsgid(::google::protobuf::int32 value);

  // optional int32 CreateTime = 5;
  bool has_createtime() const;
  void clear_createtime();
  static const int kCreateTimeFieldNumber = 5;
  ::google::protobuf::int32 createtime() const;
  void set_createtime(::google::protobuf::int32 value);

  // optional int32 ServerTime = 6;
  bool has_servertime() const;
  void clear_servertime();
  static const int kServerTimeFieldNumber = 6;
  ::google::protobuf::int32 servertime() const;
  void set_servertime(::google::protobuf::int32 value);

  // optional int32 Type = 7;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 7;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // optional int64 NewMsgID = 8;
  bool has_newmsgid() const;
  void clear_newmsgid();
  static const int kNewMsgIDFieldNumber = 8;
  ::google::protobuf::int64 newmsgid() const;
  void set_newmsgid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:FromCs.NewMsgResponseBody)
 private:
  void set_has_ret();
  void clear_has_ret();
  void set_has_tousername();
  void clear_has_tousername();
  void set_has_msgid();
  void clear_has_msgid();
  void set_has_clientmsgid();
  void clear_has_clientmsgid();
  void set_has_createtime();
  void clear_has_createtime();
  void set_has_servertime();
  void clear_has_servertime();
  void set_has_type();
  void clear_has_type();
  void set_has_newmsgid();
  void clear_has_newmsgid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::FromCs::sKBuiltinstringT* tousername_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 msgid_;
  ::google::protobuf::int32 clientmsgid_;
  ::google::protobuf::int32 createtime_;
  ::google::protobuf::int32 servertime_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int64 newmsgid_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NewMsgRequestBody : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.NewMsgRequestBody) */ {
 public:
  NewMsgRequestBody();
  virtual ~NewMsgRequestBody();

  NewMsgRequestBody(const NewMsgRequestBody& from);

  inline NewMsgRequestBody& operator=(const NewMsgRequestBody& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NewMsgRequestBody& default_instance();

  static inline const NewMsgRequestBody* internal_default_instance() {
    return reinterpret_cast<const NewMsgRequestBody*>(
               &_NewMsgRequestBody_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    92;

  void Swap(NewMsgRequestBody* other);

  // implements Message ----------------------------------------------

  inline NewMsgRequestBody* New() const PROTOBUF_FINAL { return New(NULL); }

  NewMsgRequestBody* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NewMsgRequestBody& from);
  void MergeFrom(const NewMsgRequestBody& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NewMsgRequestBody* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Content = 2;
  bool has_content() const;
  void clear_content();
  static const int kContentFieldNumber = 2;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // optional string MsgSource = 6;
  bool has_msgsource() const;
  void clear_msgsource();
  static const int kMsgSourceFieldNumber = 6;
  const ::std::string& msgsource() const;
  void set_msgsource(const ::std::string& value);
  #if LANG_CXX11
  void set_msgsource(::std::string&& value);
  #endif
  void set_msgsource(const char* value);
  void set_msgsource(const char* value, size_t size);
  ::std::string* mutable_msgsource();
  ::std::string* release_msgsource();
  void set_allocated_msgsource(::std::string* msgsource);

  // optional .FromCs.sKBuiltinstringT ToUserName = 1;
  bool has_tousername() const;
  void clear_tousername();
  static const int kToUserNameFieldNumber = 1;
  const ::FromCs::sKBuiltinstringT& tousername() const;
  ::FromCs::sKBuiltinstringT* mutable_tousername();
  ::FromCs::sKBuiltinstringT* release_tousername();
  void set_allocated_tousername(::FromCs::sKBuiltinstringT* tousername);

  // optional int32 Type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // optional int32 CreateTime = 4;
  bool has_createtime() const;
  void clear_createtime();
  static const int kCreateTimeFieldNumber = 4;
  ::google::protobuf::int32 createtime() const;
  void set_createtime(::google::protobuf::int32 value);

  // optional int32 ClientMsgId = 5;
  bool has_clientmsgid() const;
  void clear_clientmsgid();
  static const int kClientMsgIdFieldNumber = 5;
  ::google::protobuf::int32 clientmsgid() const;
  void set_clientmsgid(::google::protobuf::int32 value);

  // optional int32 CtrlBit = 7;
  bool has_ctrlbit() const;
  void clear_ctrlbit();
  static const int kCtrlBitFieldNumber = 7;
  ::google::protobuf::int32 ctrlbit() const;
  void set_ctrlbit(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.NewMsgRequestBody)
 private:
  void set_has_tousername();
  void clear_has_tousername();
  void set_has_content();
  void clear_has_content();
  void set_has_type();
  void clear_has_type();
  void set_has_createtime();
  void clear_has_createtime();
  void set_has_clientmsgid();
  void clear_has_clientmsgid();
  void set_has_msgsource();
  void clear_has_msgsource();
  void set_has_ctrlbit();
  void clear_has_ctrlbit();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::internal::ArenaStringPtr msgsource_;
  ::FromCs::sKBuiltinstringT* tousername_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 createtime_;
  ::google::protobuf::int32 clientmsgid_;
  ::google::protobuf::int32 ctrlbit_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MsgResponseBody : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.MsgResponseBody) */ {
 public:
  MsgResponseBody();
  virtual ~MsgResponseBody();

  MsgResponseBody(const MsgResponseBody& from);

  inline MsgResponseBody& operator=(const MsgResponseBody& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgResponseBody& default_instance();

  static inline const MsgResponseBody* internal_default_instance() {
    return reinterpret_cast<const MsgResponseBody*>(
               &_MsgResponseBody_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    93;

  void Swap(MsgResponseBody* other);

  // implements Message ----------------------------------------------

  inline MsgResponseBody* New() const PROTOBUF_FINAL { return New(NULL); }

  MsgResponseBody* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MsgResponseBody& from);
  void MergeFrom(const MsgResponseBody& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MsgResponseBody* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ClientMsgId = 5;
  bool has_clientmsgid() const;
  void clear_clientmsgid();
  static const int kClientMsgIdFieldNumber = 5;
  const ::std::string& clientmsgid() const;
  void set_clientmsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_clientmsgid(::std::string&& value);
  #endif
  void set_clientmsgid(const char* value);
  void set_clientmsgid(const char* value, size_t size);
  ::std::string* mutable_clientmsgid();
  ::std::string* release_clientmsgid();
  void set_allocated_clientmsgid(::std::string* clientmsgid);

  // optional .FromCs.sKBuiltinstringT FromUserName = 2;
  bool has_fromusername() const;
  void clear_fromusername();
  static const int kFromUserNameFieldNumber = 2;
  const ::FromCs::sKBuiltinstringT& fromusername() const;
  ::FromCs::sKBuiltinstringT* mutable_fromusername();
  ::FromCs::sKBuiltinstringT* release_fromusername();
  void set_allocated_fromusername(::FromCs::sKBuiltinstringT* fromusername);

  // optional .FromCs.sKBuiltinstringT ToUserName = 3;
  bool has_tousername() const;
  void clear_tousername();
  static const int kToUserNameFieldNumber = 3;
  const ::FromCs::sKBuiltinstringT& tousername() const;
  ::FromCs::sKBuiltinstringT* mutable_tousername();
  ::FromCs::sKBuiltinstringT* release_tousername();
  void set_allocated_tousername(::FromCs::sKBuiltinstringT* tousername);

  // optional int32 Ret = 1;
  bool has_ret() const;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::google::protobuf::int32 ret() const;
  void set_ret(::google::protobuf::int32 value);

  // optional int32 MsgId = 4;
  bool has_msgid() const;
  void clear_msgid();
  static const int kMsgIdFieldNumber = 4;
  ::google::protobuf::int32 msgid() const;
  void set_msgid(::google::protobuf::int32 value);

  // optional int32 CreateTime = 6;
  bool has_createtime() const;
  void clear_createtime();
  static const int kCreateTimeFieldNumber = 6;
  ::google::protobuf::int32 createtime() const;
  void set_createtime(::google::protobuf::int32 value);

  // optional int32 Type = 7;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 7;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.MsgResponseBody)
 private:
  void set_has_ret();
  void clear_has_ret();
  void set_has_fromusername();
  void clear_has_fromusername();
  void set_has_tousername();
  void clear_has_tousername();
  void set_has_msgid();
  void clear_has_msgid();
  void set_has_clientmsgid();
  void clear_has_clientmsgid();
  void set_has_createtime();
  void clear_has_createtime();
  void set_has_type();
  void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr clientmsgid_;
  ::FromCs::sKBuiltinstringT* fromusername_;
  ::FromCs::sKBuiltinstringT* tousername_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 msgid_;
  ::google::protobuf::int32 createtime_;
  ::google::protobuf::int32 type_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MsgRequestBody : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.MsgRequestBody) */ {
 public:
  MsgRequestBody();
  virtual ~MsgRequestBody();

  MsgRequestBody(const MsgRequestBody& from);

  inline MsgRequestBody& operator=(const MsgRequestBody& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgRequestBody& default_instance();

  static inline const MsgRequestBody* internal_default_instance() {
    return reinterpret_cast<const MsgRequestBody*>(
               &_MsgRequestBody_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    94;

  void Swap(MsgRequestBody* other);

  // implements Message ----------------------------------------------

  inline MsgRequestBody* New() const PROTOBUF_FINAL { return New(NULL); }

  MsgRequestBody* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MsgRequestBody& from);
  void MergeFrom(const MsgRequestBody& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MsgRequestBody* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Content = 4;
  bool has_content() const;
  void clear_content();
  static const int kContentFieldNumber = 4;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // optional string ClientMsgId = 6;
  bool has_clientmsgid() const;
  void clear_clientmsgid();
  static const int kClientMsgIdFieldNumber = 6;
  const ::std::string& clientmsgid() const;
  void set_clientmsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_clientmsgid(::std::string&& value);
  #endif
  void set_clientmsgid(const char* value);
  void set_clientmsgid(const char* value, size_t size);
  ::std::string* mutable_clientmsgid();
  ::std::string* release_clientmsgid();
  void set_allocated_clientmsgid(::std::string* clientmsgid);

  // optional string MsgSource = 7;
  bool has_msgsource() const;
  void clear_msgsource();
  static const int kMsgSourceFieldNumber = 7;
  const ::std::string& msgsource() const;
  void set_msgsource(const ::std::string& value);
  #if LANG_CXX11
  void set_msgsource(::std::string&& value);
  #endif
  void set_msgsource(const char* value);
  void set_msgsource(const char* value, size_t size);
  ::std::string* mutable_msgsource();
  ::std::string* release_msgsource();
  void set_allocated_msgsource(::std::string* msgsource);

  // optional .FromCs.sKBuiltinstringT FromUserName = 1;
  bool has_fromusername() const;
  void clear_fromusername();
  static const int kFromUserNameFieldNumber = 1;
  const ::FromCs::sKBuiltinstringT& fromusername() const;
  ::FromCs::sKBuiltinstringT* mutable_fromusername();
  ::FromCs::sKBuiltinstringT* release_fromusername();
  void set_allocated_fromusername(::FromCs::sKBuiltinstringT* fromusername);

  // optional .FromCs.sKBuiltinstringT ToUserName = 2;
  bool has_tousername() const;
  void clear_tousername();
  static const int kToUserNameFieldNumber = 2;
  const ::FromCs::sKBuiltinstringT& tousername() const;
  ::FromCs::sKBuiltinstringT* mutable_tousername();
  ::FromCs::sKBuiltinstringT* release_tousername();
  void set_allocated_tousername(::FromCs::sKBuiltinstringT* tousername);

  // optional int32 Type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // optional int32 CreateTime = 5;
  bool has_createtime() const;
  void clear_createtime();
  static const int kCreateTimeFieldNumber = 5;
  ::google::protobuf::int32 createtime() const;
  void set_createtime(::google::protobuf::int32 value);

  // optional int32 EmojiFlag = 8;
  bool has_emojiflag() const;
  void clear_emojiflag();
  static const int kEmojiFlagFieldNumber = 8;
  ::google::protobuf::int32 emojiflag() const;
  void set_emojiflag(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.MsgRequestBody)
 private:
  void set_has_fromusername();
  void clear_has_fromusername();
  void set_has_tousername();
  void clear_has_tousername();
  void set_has_type();
  void clear_has_type();
  void set_has_content();
  void clear_has_content();
  void set_has_createtime();
  void clear_has_createtime();
  void set_has_clientmsgid();
  void clear_has_clientmsgid();
  void set_has_msgsource();
  void clear_has_msgsource();
  void set_has_emojiflag();
  void clear_has_emojiflag();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::internal::ArenaStringPtr clientmsgid_;
  ::google::protobuf::internal::ArenaStringPtr msgsource_;
  ::FromCs::sKBuiltinstringT* fromusername_;
  ::FromCs::sKBuiltinstringT* tousername_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 createtime_;
  ::google::protobuf::int32 emojiflag_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.CmdList) */ {
 public:
  CmdList();
  virtual ~CmdList();

  CmdList(const CmdList& from);

  inline CmdList& operator=(const CmdList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdList& default_instance();

  static inline const CmdList* internal_default_instance() {
    return reinterpret_cast<const CmdList*>(
               &_CmdList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    95;

  void Swap(CmdList* other);

  // implements Message ----------------------------------------------

  inline CmdList* New() const PROTOBUF_FINAL { return New(NULL); }

  CmdList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CmdList& from);
  void MergeFrom(const CmdList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CmdList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .FromCs.sKBuiltinstringT list_ = 2;
  bool has_list_() const;
  void clear_list_();
  static const int kListFieldNumber = 2;
  const ::FromCs::sKBuiltinstringT& list_() const;
  ::FromCs::sKBuiltinstringT* mutable_list_();
  ::FromCs::sKBuiltinstringT* release_list_();
  void set_allocated_list_(::FromCs::sKBuiltinstringT* list_);

  // optional int32 Count = 1;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 1;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.CmdList)
 private:
  void set_has_count();
  void clear_has_count();
  void set_has_list_();
  void clear_has_list_();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::FromCs::sKBuiltinstringT* list__;
  ::google::protobuf::int32 count_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SyncKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.SyncKey) */ {
 public:
  SyncKey();
  virtual ~SyncKey();

  SyncKey(const SyncKey& from);

  inline SyncKey& operator=(const SyncKey& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncKey& default_instance();

  static inline const SyncKey* internal_default_instance() {
    return reinterpret_cast<const SyncKey*>(
               &_SyncKey_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    96;

  void Swap(SyncKey* other);

  // implements Message ----------------------------------------------

  inline SyncKey* New() const PROTOBUF_FINAL { return New(NULL); }

  SyncKey* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SyncKey& from);
  void MergeFrom(const SyncKey& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SyncKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .FromCs.sKBuiltinstringT key_ = 2;
  bool has_key_() const;
  void clear_key_();
  static const int kKeyFieldNumber = 2;
  const ::FromCs::sKBuiltinstringT& key_() const;
  ::FromCs::sKBuiltinstringT* mutable_key_();
  ::FromCs::sKBuiltinstringT* release_key_();
  void set_allocated_key_(::FromCs::sKBuiltinstringT* key_);

  // optional int32 KeyNumb = 1;
  bool has_keynumb() const;
  void clear_keynumb();
  static const int kKeyNumbFieldNumber = 1;
  ::google::protobuf::int32 keynumb() const;
  void set_keynumb(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.SyncKey)
 private:
  void set_has_keynumb();
  void clear_has_keynumb();
  void set_has_key_();
  void clear_has_key_();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::FromCs::sKBuiltinstringT* key__;
  ::google::protobuf::int32 keynumb_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class keyValPair : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.keyValPair) */ {
 public:
  keyValPair();
  virtual ~keyValPair();

  keyValPair(const keyValPair& from);

  inline keyValPair& operator=(const keyValPair& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const keyValPair& default_instance();

  static inline const keyValPair* internal_default_instance() {
    return reinterpret_cast<const keyValPair*>(
               &_keyValPair_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    97;

  void Swap(keyValPair* other);

  // implements Message ----------------------------------------------

  inline keyValPair* New() const PROTOBUF_FINAL { return New(NULL); }

  keyValPair* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const keyValPair& from);
  void MergeFrom(const keyValPair& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(keyValPair* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  ::google::protobuf::int32 key() const;
  void set_key(::google::protobuf::int32 value);

  // optional int32 Val = 2;
  bool has_val() const;
  void clear_val();
  static const int kValFieldNumber = 2;
  ::google::protobuf::int32 val() const;
  void set_val(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.keyValPair)
 private:
  void set_has_key();
  void clear_has_key();
  void set_has_val();
  void clear_has_val();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 key_;
  ::google::protobuf::int32 val_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.CmdItem) */ {
 public:
  CmdItem();
  virtual ~CmdItem();

  CmdItem(const CmdItem& from);

  inline CmdItem& operator=(const CmdItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdItem& default_instance();

  static inline const CmdItem* internal_default_instance() {
    return reinterpret_cast<const CmdItem*>(
               &_CmdItem_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    98;

  void Swap(CmdItem* other);

  // implements Message ----------------------------------------------

  inline CmdItem* New() const PROTOBUF_FINAL { return New(NULL); }

  CmdItem* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CmdItem& from);
  void MergeFrom(const CmdItem& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CmdItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .FromCs.sKBuiltinstringT CmdBuf = 2;
  bool has_cmdbuf() const;
  void clear_cmdbuf();
  static const int kCmdBufFieldNumber = 2;
  const ::FromCs::sKBuiltinstringT& cmdbuf() const;
  ::FromCs::sKBuiltinstringT* mutable_cmdbuf();
  ::FromCs::sKBuiltinstringT* release_cmdbuf();
  void set_allocated_cmdbuf(::FromCs::sKBuiltinstringT* cmdbuf);

  // optional int32 CmdId = 1;
  bool has_cmdid() const;
  void clear_cmdid();
  static const int kCmdIdFieldNumber = 1;
  ::google::protobuf::int32 cmdid() const;
  void set_cmdid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.CmdItem)
 private:
  void set_has_cmdid();
  void clear_has_cmdid();
  void set_has_cmdbuf();
  void clear_has_cmdbuf();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::FromCs::sKBuiltinstringT* cmdbuf_;
  ::google::protobuf::int32 cmdid_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ParsePacket : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.ParsePacket) */ {
 public:
  ParsePacket();
  virtual ~ParsePacket();

  ParsePacket(const ParsePacket& from);

  inline ParsePacket& operator=(const ParsePacket& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParsePacket& default_instance();

  static inline const ParsePacket* internal_default_instance() {
    return reinterpret_cast<const ParsePacket*>(
               &_ParsePacket_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    99;

  void Swap(ParsePacket* other);

  // implements Message ----------------------------------------------

  inline ParsePacket* New() const PROTOBUF_FINAL { return New(NULL); }

  ParsePacket* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ParsePacket& from);
  void MergeFrom(const ParsePacket& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ParsePacket* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:FromCs.ParsePacket)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ContactObject : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.ContactObject) */ {
 public:
  ContactObject();
  virtual ~ContactObject();

  ContactObject(const ContactObject& from);

  inline ContactObject& operator=(const ContactObject& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContactObject& default_instance();

  static inline const ContactObject* internal_default_instance() {
    return reinterpret_cast<const ContactObject*>(
               &_ContactObject_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    100;

  void Swap(ContactObject* other);

  // implements Message ----------------------------------------------

  inline ContactObject* New() const PROTOBUF_FINAL { return New(NULL); }

  ContactObject* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ContactObject& from);
  void MergeFrom(const ContactObject& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ContactObject* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string UserName = 1;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // optional string NickName = 2;
  bool has_nickname() const;
  void clear_nickname();
  static const int kNickNameFieldNumber = 2;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  #if LANG_CXX11
  void set_nickname(::std::string&& value);
  #endif
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // optional string Province = 3;
  bool has_province() const;
  void clear_province();
  static const int kProvinceFieldNumber = 3;
  const ::std::string& province() const;
  void set_province(const ::std::string& value);
  #if LANG_CXX11
  void set_province(::std::string&& value);
  #endif
  void set_province(const char* value);
  void set_province(const char* value, size_t size);
  ::std::string* mutable_province();
  ::std::string* release_province();
  void set_allocated_province(::std::string* province);

  // optional string City = 4;
  bool has_city() const;
  void clear_city();
  static const int kCityFieldNumber = 4;
  const ::std::string& city() const;
  void set_city(const ::std::string& value);
  #if LANG_CXX11
  void set_city(::std::string&& value);
  #endif
  void set_city(const char* value);
  void set_city(const char* value, size_t size);
  ::std::string* mutable_city();
  ::std::string* release_city();
  void set_allocated_city(::std::string* city);

  // optional string Signature = 5;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 5;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_signature(::std::string&& value);
  #endif
  void set_signature(const char* value);
  void set_signature(const char* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // optional string Distance = 6;
  bool has_distance() const;
  void clear_distance();
  static const int kDistanceFieldNumber = 6;
  const ::std::string& distance() const;
  void set_distance(const ::std::string& value);
  #if LANG_CXX11
  void set_distance(::std::string&& value);
  #endif
  void set_distance(const char* value);
  void set_distance(const char* value, size_t size);
  ::std::string* mutable_distance();
  ::std::string* release_distance();
  void set_allocated_distance(::std::string* distance);

  // optional string VerifyInfo = 10;
  bool has_verifyinfo() const;
  void clear_verifyinfo();
  static const int kVerifyInfoFieldNumber = 10;
  const ::std::string& verifyinfo() const;
  void set_verifyinfo(const ::std::string& value);
  #if LANG_CXX11
  void set_verifyinfo(::std::string&& value);
  #endif
  void set_verifyinfo(const char* value);
  void set_verifyinfo(const char* value, size_t size);
  ::std::string* mutable_verifyinfo();
  ::std::string* release_verifyinfo();
  void set_allocated_verifyinfo(::std::string* verifyinfo);

  // optional string VerifyContent = 11;
  bool has_verifycontent() const;
  void clear_verifycontent();
  static const int kVerifyContentFieldNumber = 11;
  const ::std::string& verifycontent() const;
  void set_verifycontent(const ::std::string& value);
  #if LANG_CXX11
  void set_verifycontent(::std::string&& value);
  #endif
  void set_verifycontent(const char* value);
  void set_verifycontent(const char* value, size_t size);
  ::std::string* mutable_verifycontent();
  ::std::string* release_verifycontent();
  void set_allocated_verifycontent(::std::string* verifycontent);

  // optional string Alias = 12;
  bool has_alias() const;
  void clear_alias();
  static const int kAliasFieldNumber = 12;
  const ::std::string& alias() const;
  void set_alias(const ::std::string& value);
  #if LANG_CXX11
  void set_alias(::std::string&& value);
  #endif
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  ::std::string* mutable_alias();
  ::std::string* release_alias();
  void set_allocated_alias(::std::string* alias);

  // optional string Weibo = 13;
  bool has_weibo() const;
  void clear_weibo();
  static const int kWeiboFieldNumber = 13;
  const ::std::string& weibo() const;
  void set_weibo(const ::std::string& value);
  #if LANG_CXX11
  void set_weibo(::std::string&& value);
  #endif
  void set_weibo(const char* value);
  void set_weibo(const char* value, size_t size);
  ::std::string* mutable_weibo();
  ::std::string* release_weibo();
  void set_allocated_weibo(::std::string* weibo);

  // optional string WeiboNickname = 14;
  bool has_weibonickname() const;
  void clear_weibonickname();
  static const int kWeiboNicknameFieldNumber = 14;
  const ::std::string& weibonickname() const;
  void set_weibonickname(const ::std::string& value);
  #if LANG_CXX11
  void set_weibonickname(::std::string&& value);
  #endif
  void set_weibonickname(const char* value);
  void set_weibonickname(const char* value, size_t size);
  ::std::string* mutable_weibonickname();
  ::std::string* release_weibonickname();
  void set_allocated_weibonickname(::std::string* weibonickname);

  // optional string Country = 21;
  bool has_country() const;
  void clear_country();
  static const int kCountryFieldNumber = 21;
  const ::std::string& country() const;
  void set_country(const ::std::string& value);
  #if LANG_CXX11
  void set_country(::std::string&& value);
  #endif
  void set_country(const char* value);
  void set_country(const char* value, size_t size);
  ::std::string* mutable_country();
  ::std::string* release_country();
  void set_allocated_country(::std::string* country);

  // optional string BigHeadImgUrl = 22;
  bool has_bigheadimgurl() const;
  void clear_bigheadimgurl();
  static const int kBigHeadImgUrlFieldNumber = 22;
  const ::std::string& bigheadimgurl() const;
  void set_bigheadimgurl(const ::std::string& value);
  #if LANG_CXX11
  void set_bigheadimgurl(::std::string&& value);
  #endif
  void set_bigheadimgurl(const char* value);
  void set_bigheadimgurl(const char* value, size_t size);
  ::std::string* mutable_bigheadimgurl();
  ::std::string* release_bigheadimgurl();
  void set_allocated_bigheadimgurl(::std::string* bigheadimgurl);

  // optional string SmallHeadImgUrl = 23;
  bool has_smallheadimgurl() const;
  void clear_smallheadimgurl();
  static const int kSmallHeadImgUrlFieldNumber = 23;
  const ::std::string& smallheadimgurl() const;
  void set_smallheadimgurl(const ::std::string& value);
  #if LANG_CXX11
  void set_smallheadimgurl(::std::string&& value);
  #endif
  void set_smallheadimgurl(const char* value);
  void set_smallheadimgurl(const char* value, size_t size);
  ::std::string* mutable_smallheadimgurl();
  ::std::string* release_smallheadimgurl();
  void set_allocated_smallheadimgurl(::std::string* smallheadimgurl);

  // optional string MyBrandList = 24;
  bool has_mybrandlist() const;
  void clear_mybrandlist();
  static const int kMyBrandListFieldNumber = 24;
  const ::std::string& mybrandlist() const;
  void set_mybrandlist(const ::std::string& value);
  #if LANG_CXX11
  void set_mybrandlist(::std::string&& value);
  #endif
  void set_mybrandlist(const char* value);
  void set_mybrandlist(const char* value, size_t size);
  ::std::string* mutable_mybrandlist();
  ::std::string* release_mybrandlist();
  void set_allocated_mybrandlist(::std::string* mybrandlist);

  // optional string AntispamTicket = 26;
  bool has_antispamticket() const;
  void clear_antispamticket();
  static const int kAntispamTicketFieldNumber = 26;
  const ::std::string& antispamticket() const;
  void set_antispamticket(const ::std::string& value);
  #if LANG_CXX11
  void set_antispamticket(::std::string&& value);
  #endif
  void set_antispamticket(const char* value);
  void set_antispamticket(const char* value, size_t size);
  ::std::string* mutable_antispamticket();
  ::std::string* release_antispamticket();
  void set_allocated_antispamticket(::std::string* antispamticket);

  // optional .FromCs.sKBuiltinstringT SnsUserInfo = 20;
  bool has_snsuserinfo() const;
  void clear_snsuserinfo();
  static const int kSnsUserInfoFieldNumber = 20;
  const ::FromCs::sKBuiltinstringT& snsuserinfo() const;
  ::FromCs::sKBuiltinstringT* mutable_snsuserinfo();
  ::FromCs::sKBuiltinstringT* release_snsuserinfo();
  void set_allocated_snsuserinfo(::FromCs::sKBuiltinstringT* snsuserinfo);

  // optional .FromCs.sKBuiltinstringT CustomizedInfo = 25;
  bool has_customizedinfo() const;
  void clear_customizedinfo();
  static const int kCustomizedInfoFieldNumber = 25;
  const ::FromCs::sKBuiltinstringT& customizedinfo() const;
  ::FromCs::sKBuiltinstringT* mutable_customizedinfo();
  ::FromCs::sKBuiltinstringT* release_customizedinfo();
  void set_allocated_customizedinfo(::FromCs::sKBuiltinstringT* customizedinfo);

  // optional int32 Sex = 7;
  bool has_sex() const;
  void clear_sex();
  static const int kSexFieldNumber = 7;
  ::google::protobuf::int32 sex() const;
  void set_sex(::google::protobuf::int32 value);

  // optional int32 ImgStatus = 8;
  bool has_imgstatus() const;
  void clear_imgstatus();
  static const int kImgStatusFieldNumber = 8;
  ::google::protobuf::int32 imgstatus() const;
  void set_imgstatus(::google::protobuf::int32 value);

  // optional int32 VerifyFlag = 9;
  bool has_verifyflag() const;
  void clear_verifyflag();
  static const int kVerifyFlagFieldNumber = 9;
  ::google::protobuf::int32 verifyflag() const;
  void set_verifyflag(::google::protobuf::int32 value);

  // optional int32 WeiboFlag = 15;
  bool has_weiboflag() const;
  void clear_weiboflag();
  static const int kWeiboFlagFieldNumber = 15;
  ::google::protobuf::int32 weiboflag() const;
  void set_weiboflag(::google::protobuf::int32 value);

  // optional int32 HeadImgVersion = 19;
  bool has_headimgversion() const;
  void clear_headimgversion();
  static const int kHeadImgVersionFieldNumber = 19;
  ::google::protobuf::int32 headimgversion() const;
  void set_headimgversion(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.ContactObject)
 private:
  void set_has_username();
  void clear_has_username();
  void set_has_nickname();
  void clear_has_nickname();
  void set_has_province();
  void clear_has_province();
  void set_has_city();
  void clear_has_city();
  void set_has_signature();
  void clear_has_signature();
  void set_has_distance();
  void clear_has_distance();
  void set_has_sex();
  void clear_has_sex();
  void set_has_imgstatus();
  void clear_has_imgstatus();
  void set_has_verifyflag();
  void clear_has_verifyflag();
  void set_has_verifyinfo();
  void clear_has_verifyinfo();
  void set_has_verifycontent();
  void clear_has_verifycontent();
  void set_has_alias();
  void clear_has_alias();
  void set_has_weibo();
  void clear_has_weibo();
  void set_has_weibonickname();
  void clear_has_weibonickname();
  void set_has_weiboflag();
  void clear_has_weiboflag();
  void set_has_headimgversion();
  void clear_has_headimgversion();
  void set_has_snsuserinfo();
  void clear_has_snsuserinfo();
  void set_has_country();
  void clear_has_country();
  void set_has_bigheadimgurl();
  void clear_has_bigheadimgurl();
  void set_has_smallheadimgurl();
  void clear_has_smallheadimgurl();
  void set_has_mybrandlist();
  void clear_has_mybrandlist();
  void set_has_customizedinfo();
  void clear_has_customizedinfo();
  void set_has_antispamticket();
  void clear_has_antispamticket();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::internal::ArenaStringPtr province_;
  ::google::protobuf::internal::ArenaStringPtr city_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  ::google::protobuf::internal::ArenaStringPtr distance_;
  ::google::protobuf::internal::ArenaStringPtr verifyinfo_;
  ::google::protobuf::internal::ArenaStringPtr verifycontent_;
  ::google::protobuf::internal::ArenaStringPtr alias_;
  ::google::protobuf::internal::ArenaStringPtr weibo_;
  ::google::protobuf::internal::ArenaStringPtr weibonickname_;
  ::google::protobuf::internal::ArenaStringPtr country_;
  ::google::protobuf::internal::ArenaStringPtr bigheadimgurl_;
  ::google::protobuf::internal::ArenaStringPtr smallheadimgurl_;
  ::google::protobuf::internal::ArenaStringPtr mybrandlist_;
  ::google::protobuf::internal::ArenaStringPtr antispamticket_;
  ::FromCs::sKBuiltinstringT* snsuserinfo_;
  ::FromCs::sKBuiltinstringT* customizedinfo_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 imgstatus_;
  ::google::protobuf::int32 verifyflag_;
  ::google::protobuf::int32 weiboflag_;
  ::google::protobuf::int32 headimgversion_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SnsUser : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.SnsUser) */ {
 public:
  SnsUser();
  virtual ~SnsUser();

  SnsUser(const SnsUser& from);

  inline SnsUser& operator=(const SnsUser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SnsUser& default_instance();

  static inline const SnsUser* internal_default_instance() {
    return reinterpret_cast<const SnsUser*>(
               &_SnsUser_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    101;

  void Swap(SnsUser* other);

  // implements Message ----------------------------------------------

  inline SnsUser* New() const PROTOBUF_FINAL { return New(NULL); }

  SnsUser* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SnsUser& from);
  void MergeFrom(const SnsUser& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SnsUser* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string SnsBGImgID = 2;
  bool has_snsbgimgid() const;
  void clear_snsbgimgid();
  static const int kSnsBGImgIDFieldNumber = 2;
  const ::std::string& snsbgimgid() const;
  void set_snsbgimgid(const ::std::string& value);
  #if LANG_CXX11
  void set_snsbgimgid(::std::string&& value);
  #endif
  void set_snsbgimgid(const char* value);
  void set_snsbgimgid(const char* value, size_t size);
  ::std::string* mutable_snsbgimgid();
  ::std::string* release_snsbgimgid();
  void set_allocated_snsbgimgid(::std::string* snsbgimgid);

  // optional int32 SnsFlag = 1;
  bool has_snsflag() const;
  void clear_snsflag();
  static const int kSnsFlagFieldNumber = 1;
  ::google::protobuf::int32 snsflag() const;
  void set_snsflag(::google::protobuf::int32 value);

  // optional int32 SnsFlagEx = 4;
  bool has_snsflagex() const;
  void clear_snsflagex();
  static const int kSnsFlagExFieldNumber = 4;
  ::google::protobuf::int32 snsflagex() const;
  void set_snsflagex(::google::protobuf::int32 value);

  // optional int64 SnsBGObjectID = 3;
  bool has_snsbgobjectid() const;
  void clear_snsbgobjectid();
  static const int kSnsBGObjectIDFieldNumber = 3;
  ::google::protobuf::int64 snsbgobjectid() const;
  void set_snsbgobjectid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:FromCs.SnsUser)
 private:
  void set_has_snsflag();
  void clear_has_snsflag();
  void set_has_snsbgimgid();
  void clear_has_snsbgimgid();
  void set_has_snsbgobjectid();
  void clear_has_snsbgobjectid();
  void set_has_snsflagex();
  void clear_has_snsflagex();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr snsbgimgid_;
  ::google::protobuf::int32 snsflag_;
  ::google::protobuf::int32 snsflagex_;
  ::google::protobuf::int64 snsbgobjectid_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CustomInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.CustomInfo) */ {
 public:
  CustomInfo();
  virtual ~CustomInfo();

  CustomInfo(const CustomInfo& from);

  inline CustomInfo& operator=(const CustomInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CustomInfo& default_instance();

  static inline const CustomInfo* internal_default_instance() {
    return reinterpret_cast<const CustomInfo*>(
               &_CustomInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    102;

  void Swap(CustomInfo* other);

  // implements Message ----------------------------------------------

  inline CustomInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  CustomInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CustomInfo& from);
  void MergeFrom(const CustomInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CustomInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ExternalInfo = 2;
  bool has_externalinfo() const;
  void clear_externalinfo();
  static const int kExternalInfoFieldNumber = 2;
  const ::std::string& externalinfo() const;
  void set_externalinfo(const ::std::string& value);
  #if LANG_CXX11
  void set_externalinfo(::std::string&& value);
  #endif
  void set_externalinfo(const char* value);
  void set_externalinfo(const char* value, size_t size);
  ::std::string* mutable_externalinfo();
  ::std::string* release_externalinfo();
  void set_allocated_externalinfo(::std::string* externalinfo);

  // optional string BrandInfo = 3;
  bool has_brandinfo() const;
  void clear_brandinfo();
  static const int kBrandInfoFieldNumber = 3;
  const ::std::string& brandinfo() const;
  void set_brandinfo(const ::std::string& value);
  #if LANG_CXX11
  void set_brandinfo(::std::string&& value);
  #endif
  void set_brandinfo(const char* value);
  void set_brandinfo(const char* value, size_t size);
  ::std::string* mutable_brandinfo();
  ::std::string* release_brandinfo();
  void set_allocated_brandinfo(::std::string* brandinfo);

  // optional string BrandIconURL = 4;
  bool has_brandiconurl() const;
  void clear_brandiconurl();
  static const int kBrandIconURLFieldNumber = 4;
  const ::std::string& brandiconurl() const;
  void set_brandiconurl(const ::std::string& value);
  #if LANG_CXX11
  void set_brandiconurl(::std::string&& value);
  #endif
  void set_brandiconurl(const char* value);
  void set_brandiconurl(const char* value, size_t size);
  ::std::string* mutable_brandiconurl();
  ::std::string* release_brandiconurl();
  void set_allocated_brandiconurl(::std::string* brandiconurl);

  // optional int32 BrandFlag = 1;
  bool has_brandflag() const;
  void clear_brandflag();
  static const int kBrandFlagFieldNumber = 1;
  ::google::protobuf::int32 brandflag() const;
  void set_brandflag(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.CustomInfo)
 private:
  void set_has_brandflag();
  void clear_has_brandflag();
  void set_has_externalinfo();
  void clear_has_externalinfo();
  void set_has_brandinfo();
  void clear_has_brandinfo();
  void set_has_brandiconurl();
  void clear_has_brandiconurl();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr externalinfo_;
  ::google::protobuf::internal::ArenaStringPtr brandinfo_;
  ::google::protobuf::internal::ArenaStringPtr brandiconurl_;
  ::google::protobuf::int32 brandflag_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class userProfile : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.userProfile) */ {
 public:
  userProfile();
  virtual ~userProfile();

  userProfile(const userProfile& from);

  inline userProfile& operator=(const userProfile& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const userProfile& default_instance();

  static inline const userProfile* internal_default_instance() {
    return reinterpret_cast<const userProfile*>(
               &_userProfile_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    103;

  void Swap(userProfile* other);

  // implements Message ----------------------------------------------

  inline userProfile* New() const PROTOBUF_FINAL { return New(NULL); }

  userProfile* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const userProfile& from);
  void MergeFrom(const userProfile& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(userProfile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes ImgBuf = 9;
  bool has_imgbuf() const;
  void clear_imgbuf();
  static const int kImgBufFieldNumber = 9;
  const ::std::string& imgbuf() const;
  void set_imgbuf(const ::std::string& value);
  #if LANG_CXX11
  void set_imgbuf(::std::string&& value);
  #endif
  void set_imgbuf(const char* value);
  void set_imgbuf(const void* value, size_t size);
  ::std::string* mutable_imgbuf();
  ::std::string* release_imgbuf();
  void set_allocated_imgbuf(::std::string* imgbuf);

  // optional string Province = 11;
  bool has_province() const;
  void clear_province();
  static const int kProvinceFieldNumber = 11;
  const ::std::string& province() const;
  void set_province(const ::std::string& value);
  #if LANG_CXX11
  void set_province(::std::string&& value);
  #endif
  void set_province(const char* value);
  void set_province(const char* value, size_t size);
  ::std::string* mutable_province();
  ::std::string* release_province();
  void set_allocated_province(::std::string* province);

  // optional string City = 12;
  bool has_city() const;
  void clear_city();
  static const int kCityFieldNumber = 12;
  const ::std::string& city() const;
  void set_city(const ::std::string& value);
  #if LANG_CXX11
  void set_city(::std::string&& value);
  #endif
  void set_city(const char* value);
  void set_city(const char* value, size_t size);
  ::std::string* mutable_city();
  ::std::string* release_city();
  void set_allocated_city(::std::string* city);

  // optional string Signature = 13;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 13;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_signature(::std::string&& value);
  #endif
  void set_signature(const char* value);
  void set_signature(const char* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // optional string VerifyInfo = 18;
  bool has_verifyinfo() const;
  void clear_verifyinfo();
  static const int kVerifyInfoFieldNumber = 18;
  const ::std::string& verifyinfo() const;
  void set_verifyinfo(const ::std::string& value);
  #if LANG_CXX11
  void set_verifyinfo(::std::string&& value);
  #endif
  void set_verifyinfo(const char* value);
  void set_verifyinfo(const char* value, size_t size);
  ::std::string* mutable_verifyinfo();
  ::std::string* release_verifyinfo();
  void set_allocated_verifyinfo(::std::string* verifyinfo);

  // optional string Weibo = 24;
  bool has_weibo() const;
  void clear_weibo();
  static const int kWeiboFieldNumber = 24;
  const ::std::string& weibo() const;
  void set_weibo(const ::std::string& value);
  #if LANG_CXX11
  void set_weibo(::std::string&& value);
  #endif
  void set_weibo(const char* value);
  void set_weibo(const char* value, size_t size);
  ::std::string* mutable_weibo();
  ::std::string* release_weibo();
  void set_allocated_weibo(::std::string* weibo);

  // optional string Alias = 27;
  bool has_alias() const;
  void clear_alias();
  static const int kAliasFieldNumber = 27;
  const ::std::string& alias() const;
  void set_alias(const ::std::string& value);
  #if LANG_CXX11
  void set_alias(::std::string&& value);
  #endif
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  ::std::string* mutable_alias();
  ::std::string* release_alias();
  void set_allocated_alias(::std::string* alias);

  // optional string WeiboNickname = 28;
  bool has_weibonickname() const;
  void clear_weibonickname();
  static const int kWeiboNicknameFieldNumber = 28;
  const ::std::string& weibonickname() const;
  void set_weibonickname(const ::std::string& value);
  #if LANG_CXX11
  void set_weibonickname(::std::string&& value);
  #endif
  void set_weibonickname(const char* value);
  void set_weibonickname(const char* value, size_t size);
  ::std::string* mutable_weibonickname();
  ::std::string* release_weibonickname();
  void set_allocated_weibonickname(::std::string* weibonickname);

  // optional string FBUserName = 32;
  bool has_fbusername() const;
  void clear_fbusername();
  static const int kFBUserNameFieldNumber = 32;
  const ::std::string& fbusername() const;
  void set_fbusername(const ::std::string& value);
  #if LANG_CXX11
  void set_fbusername(::std::string&& value);
  #endif
  void set_fbusername(const char* value);
  void set_fbusername(const char* value, size_t size);
  ::std::string* mutable_fbusername();
  ::std::string* release_fbusername();
  void set_allocated_fbusername(::std::string* fbusername);

  // optional string AlbumBGImgID = 35;
  bool has_albumbgimgid() const;
  void clear_albumbgimgid();
  static const int kAlbumBGImgIDFieldNumber = 35;
  const ::std::string& albumbgimgid() const;
  void set_albumbgimgid(const ::std::string& value);
  #if LANG_CXX11
  void set_albumbgimgid(::std::string&& value);
  #endif
  void set_albumbgimgid(const char* value);
  void set_albumbgimgid(const char* value, size_t size);
  ::std::string* mutable_albumbgimgid();
  ::std::string* release_albumbgimgid();
  void set_allocated_albumbgimgid(::std::string* albumbgimgid);

  // optional string FBToken = 37;
  bool has_fbtoken() const;
  void clear_fbtoken();
  static const int kFBTokenFieldNumber = 37;
  const ::std::string& fbtoken() const;
  void set_fbtoken(const ::std::string& value);
  #if LANG_CXX11
  void set_fbtoken(::std::string&& value);
  #endif
  void set_fbtoken(const char* value);
  void set_fbtoken(const char* value, size_t size);
  ::std::string* mutable_fbtoken();
  ::std::string* release_fbtoken();
  void set_allocated_fbtoken(::std::string* fbtoken);

  // optional string Country = 38;
  bool has_country() const;
  void clear_country();
  static const int kCountryFieldNumber = 38;
  const ::std::string& country() const;
  void set_country(const ::std::string& value);
  #if LANG_CXX11
  void set_country(::std::string&& value);
  #endif
  void set_country(const char* value);
  void set_country(const char* value, size_t size);
  ::std::string* mutable_country();
  ::std::string* release_country();
  void set_allocated_country(::std::string* country);

  // optional .FromCs.sKBuiltinstringT UserName = 2;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 2;
  const ::FromCs::sKBuiltinstringT& username() const;
  ::FromCs::sKBuiltinstringT* mutable_username();
  ::FromCs::sKBuiltinstringT* release_username();
  void set_allocated_username(::FromCs::sKBuiltinstringT* username);

  // optional .FromCs.sKBuiltinstringT NickName = 3;
  bool has_nickname() const;
  void clear_nickname();
  static const int kNickNameFieldNumber = 3;
  const ::FromCs::sKBuiltinstringT& nickname() const;
  ::FromCs::sKBuiltinstringT* mutable_nickname();
  ::FromCs::sKBuiltinstringT* release_nickname();
  void set_allocated_nickname(::FromCs::sKBuiltinstringT* nickname);

  // optional .FromCs.sKBuiltinstringT BindEmail = 5;
  bool has_bindemail() const;
  void clear_bindemail();
  static const int kBindEmailFieldNumber = 5;
  const ::FromCs::sKBuiltinstringT& bindemail() const;
  ::FromCs::sKBuiltinstringT* mutable_bindemail();
  ::FromCs::sKBuiltinstringT* release_bindemail();
  void set_allocated_bindemail(::FromCs::sKBuiltinstringT* bindemail);

  // optional .FromCs.sKBuiltinstringT BindMobile = 6;
  bool has_bindmobile() const;
  void clear_bindmobile();
  static const int kBindMobileFieldNumber = 6;
  const ::FromCs::sKBuiltinstringT& bindmobile() const;
  ::FromCs::sKBuiltinstringT* mutable_bindmobile();
  ::FromCs::sKBuiltinstringT* release_bindmobile();
  void set_allocated_bindmobile(::FromCs::sKBuiltinstringT* bindmobile);

  // optional .FromCs.sKBuiltinstringT DisturbSetting = 15;
  bool has_disturbsetting() const;
  void clear_disturbsetting();
  static const int kDisturbSettingFieldNumber = 15;
  const ::FromCs::sKBuiltinstringT& disturbsetting() const;
  ::FromCs::sKBuiltinstringT* mutable_disturbsetting();
  ::FromCs::sKBuiltinstringT* release_disturbsetting();
  void set_allocated_disturbsetting(::FromCs::sKBuiltinstringT* disturbsetting);

  // optional .FromCs.sKBuiltinstringT GmailList = 26;
  bool has_gmaillist() const;
  void clear_gmaillist();
  static const int kGmailListFieldNumber = 26;
  const ::FromCs::sKBuiltinstringT& gmaillist() const;
  ::FromCs::sKBuiltinstringT* mutable_gmaillist();
  ::FromCs::sKBuiltinstringT* release_gmaillist();
  void set_allocated_gmaillist(::FromCs::sKBuiltinstringT* gmaillist);

  // optional int32 BitFlag = 1;
  bool has_bitflag() const;
  void clear_bitflag();
  static const int kBitFlagFieldNumber = 1;
  ::google::protobuf::int32 bitflag() const;
  void set_bitflag(::google::protobuf::int32 value);

  // optional int32 BindUin = 4;
  bool has_binduin() const;
  void clear_binduin();
  static const int kBindUinFieldNumber = 4;
  ::google::protobuf::int32 binduin() const;
  void set_binduin(::google::protobuf::int32 value);

  // optional int32 Status = 7;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 7;
  ::google::protobuf::int32 status() const;
  void set_status(::google::protobuf::int32 value);

  // optional int32 ImgLen = 8;
  bool has_imglen() const;
  void clear_imglen();
  static const int kImgLenFieldNumber = 8;
  ::google::protobuf::int32 imglen() const;
  void set_imglen(::google::protobuf::int32 value);

  // optional int32 Sex = 10;
  bool has_sex() const;
  void clear_sex();
  static const int kSexFieldNumber = 10;
  ::google::protobuf::int32 sex() const;
  void set_sex(::google::protobuf::int32 value);

  // optional int32 PersonalCard = 14;
  bool has_personalcard() const;
  void clear_personalcard();
  static const int kPersonalCardFieldNumber = 14;
  ::google::protobuf::int32 personalcard() const;
  void set_personalcard(::google::protobuf::int32 value);

  // optional int32 PluginFlag = 16;
  bool has_pluginflag() const;
  void clear_pluginflag();
  static const int kPluginFlagFieldNumber = 16;
  ::google::protobuf::int32 pluginflag() const;
  void set_pluginflag(::google::protobuf::int32 value);

  // optional int32 VerifyFlag = 17;
  bool has_verifyflag() const;
  void clear_verifyflag();
  static const int kVerifyFlagFieldNumber = 17;
  ::google::protobuf::int32 verifyflag() const;
  void set_verifyflag(::google::protobuf::int32 value);

  // optional int32 Point = 19;
  bool has_point() const;
  void clear_point();
  static const int kPointFieldNumber = 19;
  ::google::protobuf::int32 point() const;
  void set_point(::google::protobuf::int32 value);

  // optional int32 Experience = 20;
  bool has_experience() const;
  void clear_experience();
  static const int kExperienceFieldNumber = 20;
  ::google::protobuf::int32 experience() const;
  void set_experience(::google::protobuf::int32 value);

  // optional int32 Level = 21;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 21;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // optional int32 LevelLowExp = 22;
  bool has_levellowexp() const;
  void clear_levellowexp();
  static const int kLevelLowExpFieldNumber = 22;
  ::google::protobuf::int32 levellowexp() const;
  void set_levellowexp(::google::protobuf::int32 value);

  // optional int32 LevelHighExp = 23;
  bool has_levelhighexp() const;
  void clear_levelhighexp();
  static const int kLevelHighExpFieldNumber = 23;
  ::google::protobuf::int32 levelhighexp() const;
  void set_levelhighexp(::google::protobuf::int32 value);

  // optional int32 PluginSwitch = 25;
  bool has_pluginswitch() const;
  void clear_pluginswitch();
  static const int kPluginSwitchFieldNumber = 25;
  ::google::protobuf::int32 pluginswitch() const;
  void set_pluginswitch(::google::protobuf::int32 value);

  // optional int32 WeiboFlag = 29;
  bool has_weiboflag() const;
  void clear_weiboflag();
  static const int kWeiboFlagFieldNumber = 29;
  ::google::protobuf::int32 weiboflag() const;
  void set_weiboflag(::google::protobuf::int32 value);

  // optional int32 FaceBookFlag = 30;
  bool has_facebookflag() const;
  void clear_facebookflag();
  static const int kFaceBookFlagFieldNumber = 30;
  ::google::protobuf::int32 facebookflag() const;
  void set_facebookflag(::google::protobuf::int32 value);

  // optional int64 FBUserID = 31;
  bool has_fbuserid() const;
  void clear_fbuserid();
  static const int kFBUserIDFieldNumber = 31;
  ::google::protobuf::int64 fbuserid() const;
  void set_fbuserid(::google::protobuf::int64 value);

  // optional int32 AlbumStyle = 33;
  bool has_albumstyle() const;
  void clear_albumstyle();
  static const int kAlbumStyleFieldNumber = 33;
  ::google::protobuf::int32 albumstyle() const;
  void set_albumstyle(::google::protobuf::int32 value);

  // optional int32 AlbumFlag = 34;
  bool has_albumflag() const;
  void clear_albumflag();
  static const int kAlbumFlagFieldNumber = 34;
  ::google::protobuf::int32 albumflag() const;
  void set_albumflag(::google::protobuf::int32 value);

  // optional int32 TXNewsCategory = 36;
  bool has_txnewscategory() const;
  void clear_txnewscategory();
  static const int kTXNewsCategoryFieldNumber = 36;
  ::google::protobuf::int32 txnewscategory() const;
  void set_txnewscategory(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.userProfile)
 private:
  void set_has_bitflag();
  void clear_has_bitflag();
  void set_has_username();
  void clear_has_username();
  void set_has_nickname();
  void clear_has_nickname();
  void set_has_binduin();
  void clear_has_binduin();
  void set_has_bindemail();
  void clear_has_bindemail();
  void set_has_bindmobile();
  void clear_has_bindmobile();
  void set_has_status();
  void clear_has_status();
  void set_has_imglen();
  void clear_has_imglen();
  void set_has_imgbuf();
  void clear_has_imgbuf();
  void set_has_sex();
  void clear_has_sex();
  void set_has_province();
  void clear_has_province();
  void set_has_city();
  void clear_has_city();
  void set_has_signature();
  void clear_has_signature();
  void set_has_personalcard();
  void clear_has_personalcard();
  void set_has_disturbsetting();
  void clear_has_disturbsetting();
  void set_has_pluginflag();
  void clear_has_pluginflag();
  void set_has_verifyflag();
  void clear_has_verifyflag();
  void set_has_verifyinfo();
  void clear_has_verifyinfo();
  void set_has_point();
  void clear_has_point();
  void set_has_experience();
  void clear_has_experience();
  void set_has_level();
  void clear_has_level();
  void set_has_levellowexp();
  void clear_has_levellowexp();
  void set_has_levelhighexp();
  void clear_has_levelhighexp();
  void set_has_weibo();
  void clear_has_weibo();
  void set_has_pluginswitch();
  void clear_has_pluginswitch();
  void set_has_gmaillist();
  void clear_has_gmaillist();
  void set_has_alias();
  void clear_has_alias();
  void set_has_weibonickname();
  void clear_has_weibonickname();
  void set_has_weiboflag();
  void clear_has_weiboflag();
  void set_has_facebookflag();
  void clear_has_facebookflag();
  void set_has_fbuserid();
  void clear_has_fbuserid();
  void set_has_fbusername();
  void clear_has_fbusername();
  void set_has_albumstyle();
  void clear_has_albumstyle();
  void set_has_albumflag();
  void clear_has_albumflag();
  void set_has_albumbgimgid();
  void clear_has_albumbgimgid();
  void set_has_txnewscategory();
  void clear_has_txnewscategory();
  void set_has_fbtoken();
  void clear_has_fbtoken();
  void set_has_country();
  void clear_has_country();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<2> _has_bits_;
  ::google::protobuf::internal::ArenaStringPtr imgbuf_;
  ::google::protobuf::internal::ArenaStringPtr province_;
  ::google::protobuf::internal::ArenaStringPtr city_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  ::google::protobuf::internal::ArenaStringPtr verifyinfo_;
  ::google::protobuf::internal::ArenaStringPtr weibo_;
  ::google::protobuf::internal::ArenaStringPtr alias_;
  ::google::protobuf::internal::ArenaStringPtr weibonickname_;
  ::google::protobuf::internal::ArenaStringPtr fbusername_;
  ::google::protobuf::internal::ArenaStringPtr albumbgimgid_;
  ::google::protobuf::internal::ArenaStringPtr fbtoken_;
  ::google::protobuf::internal::ArenaStringPtr country_;
  ::FromCs::sKBuiltinstringT* username_;
  ::FromCs::sKBuiltinstringT* nickname_;
  ::FromCs::sKBuiltinstringT* bindemail_;
  ::FromCs::sKBuiltinstringT* bindmobile_;
  ::FromCs::sKBuiltinstringT* disturbsetting_;
  ::FromCs::sKBuiltinstringT* gmaillist_;
  ::google::protobuf::int32 bitflag_;
  ::google::protobuf::int32 binduin_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::int32 imglen_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 personalcard_;
  ::google::protobuf::int32 pluginflag_;
  ::google::protobuf::int32 verifyflag_;
  ::google::protobuf::int32 point_;
  ::google::protobuf::int32 experience_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 levellowexp_;
  ::google::protobuf::int32 levelhighexp_;
  ::google::protobuf::int32 pluginswitch_;
  ::google::protobuf::int32 weiboflag_;
  ::google::protobuf::int32 facebookflag_;
  ::google::protobuf::int64 fbuserid_;
  ::google::protobuf::int32 albumstyle_;
  ::google::protobuf::int32 albumflag_;
  ::google::protobuf::int32 txnewscategory_;
  mutable int _cached_size_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DisturbSetting : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.DisturbSetting) */ {
 public:
  DisturbSetting();
  virtual ~DisturbSetting();

  DisturbSetting(const DisturbSetting& from);

  inline DisturbSetting& operator=(const DisturbSetting& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DisturbSetting& default_instance();

  static inline const DisturbSetting* internal_default_instance() {
    return reinterpret_cast<const DisturbSetting*>(
               &_DisturbSetting_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    104;

  void Swap(DisturbSetting* other);

  // implements Message ----------------------------------------------

  inline DisturbSetting* New() const PROTOBUF_FINAL { return New(NULL); }

  DisturbSetting* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DisturbSetting& from);
  void MergeFrom(const DisturbSetting& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DisturbSetting* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .FromCs.sKBuiltinstringT NightTime = 2;
  bool has_nighttime() const;
  void clear_nighttime();
  static const int kNightTimeFieldNumber = 2;
  const ::FromCs::sKBuiltinstringT& nighttime() const;
  ::FromCs::sKBuiltinstringT* mutable_nighttime();
  ::FromCs::sKBuiltinstringT* release_nighttime();
  void set_allocated_nighttime(::FromCs::sKBuiltinstringT* nighttime);

  // optional .FromCs.sKBuiltinstringT AllDayTime = 4;
  bool has_alldaytime() const;
  void clear_alldaytime();
  static const int kAllDayTimeFieldNumber = 4;
  const ::FromCs::sKBuiltinstringT& alldaytime() const;
  ::FromCs::sKBuiltinstringT* mutable_alldaytime();
  ::FromCs::sKBuiltinstringT* release_alldaytime();
  void set_allocated_alldaytime(::FromCs::sKBuiltinstringT* alldaytime);

  // optional int32 NightSetting = 1;
  bool has_nightsetting() const;
  void clear_nightsetting();
  static const int kNightSettingFieldNumber = 1;
  ::google::protobuf::int32 nightsetting() const;
  void set_nightsetting(::google::protobuf::int32 value);

  // optional int32 AllDaySetting = 3;
  bool has_alldaysetting() const;
  void clear_alldaysetting();
  static const int kAllDaySettingFieldNumber = 3;
  ::google::protobuf::int32 alldaysetting() const;
  void set_alldaysetting(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.DisturbSetting)
 private:
  void set_has_nightsetting();
  void clear_has_nightsetting();
  void set_has_nighttime();
  void clear_has_nighttime();
  void set_has_alldaysetting();
  void clear_has_alldaysetting();
  void set_has_alldaytime();
  void clear_has_alldaytime();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::FromCs::sKBuiltinstringT* nighttime_;
  ::FromCs::sKBuiltinstringT* alldaytime_;
  ::google::protobuf::int32 nightsetting_;
  ::google::protobuf::int32 alldaysetting_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TimeSpan : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.TimeSpan) */ {
 public:
  TimeSpan();
  virtual ~TimeSpan();

  TimeSpan(const TimeSpan& from);

  inline TimeSpan& operator=(const TimeSpan& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TimeSpan& default_instance();

  static inline const TimeSpan* internal_default_instance() {
    return reinterpret_cast<const TimeSpan*>(
               &_TimeSpan_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    105;

  void Swap(TimeSpan* other);

  // implements Message ----------------------------------------------

  inline TimeSpan* New() const PROTOBUF_FINAL { return New(NULL); }

  TimeSpan* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TimeSpan& from);
  void MergeFrom(const TimeSpan& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TimeSpan* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 BeginTime = 1;
  bool has_begintime() const;
  void clear_begintime();
  static const int kBeginTimeFieldNumber = 1;
  ::google::protobuf::int32 begintime() const;
  void set_begintime(::google::protobuf::int32 value);

  // optional int32 EndTime = 2;
  bool has_endtime() const;
  void clear_endtime();
  static const int kEndTimeFieldNumber = 2;
  ::google::protobuf::int32 endtime() const;
  void set_endtime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.TimeSpan)
 private:
  void set_has_begintime();
  void clear_has_begintime();
  void set_has_endtime();
  void clear_has_endtime();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 begintime_;
  ::google::protobuf::int32 endtime_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GMailList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.GMailList) */ {
 public:
  GMailList();
  virtual ~GMailList();

  GMailList(const GMailList& from);

  inline GMailList& operator=(const GMailList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GMailList& default_instance();

  static inline const GMailList* internal_default_instance() {
    return reinterpret_cast<const GMailList*>(
               &_GMailList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    106;

  void Swap(GMailList* other);

  // implements Message ----------------------------------------------

  inline GMailList* New() const PROTOBUF_FINAL { return New(NULL); }

  GMailList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GMailList& from);
  void MergeFrom(const GMailList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GMailList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .FromCs.sKBuiltinstringT list_ = 2;
  bool has_list_() const;
  void clear_list_();
  static const int kListFieldNumber = 2;
  const ::FromCs::sKBuiltinstringT& list_() const;
  ::FromCs::sKBuiltinstringT* mutable_list_();
  ::FromCs::sKBuiltinstringT* release_list_();
  void set_allocated_list_(::FromCs::sKBuiltinstringT* list_);

  // optional int32 Count = 1;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 1;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.GMailList)
 private:
  void set_has_count();
  void clear_has_count();
  void set_has_list_();
  void clear_has_list_();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::FromCs::sKBuiltinstringT* list__;
  ::google::protobuf::int32 count_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GMailObj : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.GMailObj) */ {
 public:
  GMailObj();
  virtual ~GMailObj();

  GMailObj(const GMailObj& from);

  inline GMailObj& operator=(const GMailObj& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GMailObj& default_instance();

  static inline const GMailObj* internal_default_instance() {
    return reinterpret_cast<const GMailObj*>(
               &_GMailObj_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    107;

  void Swap(GMailObj* other);

  // implements Message ----------------------------------------------

  inline GMailObj* New() const PROTOBUF_FINAL { return New(NULL); }

  GMailObj* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GMailObj& from);
  void MergeFrom(const GMailObj& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GMailObj* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string GmailAcct = 1;
  bool has_gmailacct() const;
  void clear_gmailacct();
  static const int kGmailAcctFieldNumber = 1;
  const ::std::string& gmailacct() const;
  void set_gmailacct(const ::std::string& value);
  #if LANG_CXX11
  void set_gmailacct(::std::string&& value);
  #endif
  void set_gmailacct(const char* value);
  void set_gmailacct(const char* value, size_t size);
  ::std::string* mutable_gmailacct();
  ::std::string* release_gmailacct();
  void set_allocated_gmailacct(::std::string* gmailacct);

  // optional int32 GmailSwitch = 2;
  bool has_gmailswitch() const;
  void clear_gmailswitch();
  static const int kGmailSwitchFieldNumber = 2;
  ::google::protobuf::int32 gmailswitch() const;
  void set_gmailswitch(::google::protobuf::int32 value);

  // optional int32 GmailErrCode = 3;
  bool has_gmailerrcode() const;
  void clear_gmailerrcode();
  static const int kGmailErrCodeFieldNumber = 3;
  ::google::protobuf::int32 gmailerrcode() const;
  void set_gmailerrcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.GMailObj)
 private:
  void set_has_gmailacct();
  void clear_has_gmailacct();
  void set_has_gmailswitch();
  void clear_has_gmailswitch();
  void set_has_gmailerrcode();
  void clear_has_gmailerrcode();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr gmailacct_;
  ::google::protobuf::int32 gmailswitch_;
  ::google::protobuf::int32 gmailerrcode_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VerifyUserObj : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.VerifyUserObj) */ {
 public:
  VerifyUserObj();
  virtual ~VerifyUserObj();

  VerifyUserObj(const VerifyUserObj& from);

  inline VerifyUserObj& operator=(const VerifyUserObj& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VerifyUserObj& default_instance();

  static inline const VerifyUserObj* internal_default_instance() {
    return reinterpret_cast<const VerifyUserObj*>(
               &_VerifyUserObj_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    108;

  void Swap(VerifyUserObj* other);

  // implements Message ----------------------------------------------

  inline VerifyUserObj* New() const PROTOBUF_FINAL { return New(NULL); }

  VerifyUserObj* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VerifyUserObj& from);
  void MergeFrom(const VerifyUserObj& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VerifyUserObj* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Value = 1;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // optional string VerifyUserTicket = 2;
  bool has_verifyuserticket() const;
  void clear_verifyuserticket();
  static const int kVerifyUserTicketFieldNumber = 2;
  const ::std::string& verifyuserticket() const;
  void set_verifyuserticket(const ::std::string& value);
  #if LANG_CXX11
  void set_verifyuserticket(::std::string&& value);
  #endif
  void set_verifyuserticket(const char* value);
  void set_verifyuserticket(const char* value, size_t size);
  ::std::string* mutable_verifyuserticket();
  ::std::string* release_verifyuserticket();
  void set_allocated_verifyuserticket(::std::string* verifyuserticket);

  // optional string AntiSpamTicket = 3;
  bool has_antispamticket() const;
  void clear_antispamticket();
  static const int kAntiSpamTicketFieldNumber = 3;
  const ::std::string& antispamticket() const;
  void set_antispamticket(const ::std::string& value);
  #if LANG_CXX11
  void set_antispamticket(::std::string&& value);
  #endif
  void set_antispamticket(const char* value);
  void set_antispamticket(const char* value, size_t size);
  ::std::string* mutable_antispamticket();
  ::std::string* release_antispamticket();
  void set_allocated_antispamticket(::std::string* antispamticket);

  // optional string ChatRoomUserName = 5;
  bool has_chatroomusername() const;
  void clear_chatroomusername();
  static const int kChatRoomUserNameFieldNumber = 5;
  const ::std::string& chatroomusername() const;
  void set_chatroomusername(const ::std::string& value);
  #if LANG_CXX11
  void set_chatroomusername(::std::string&& value);
  #endif
  void set_chatroomusername(const char* value);
  void set_chatroomusername(const char* value, size_t size);
  ::std::string* mutable_chatroomusername();
  ::std::string* release_chatroomusername();
  void set_allocated_chatroomusername(::std::string* chatroomusername);

  // optional string SourceUserName = 6;
  bool has_sourceusername() const;
  void clear_sourceusername();
  static const int kSourceUserNameFieldNumber = 6;
  const ::std::string& sourceusername() const;
  void set_sourceusername(const ::std::string& value);
  #if LANG_CXX11
  void set_sourceusername(::std::string&& value);
  #endif
  void set_sourceusername(const char* value);
  void set_sourceusername(const char* value, size_t size);
  ::std::string* mutable_sourceusername();
  ::std::string* release_sourceusername();
  void set_allocated_sourceusername(::std::string* sourceusername);

  // optional string SourceNickName = 7;
  bool has_sourcenickname() const;
  void clear_sourcenickname();
  static const int kSourceNickNameFieldNumber = 7;
  const ::std::string& sourcenickname() const;
  void set_sourcenickname(const ::std::string& value);
  #if LANG_CXX11
  void set_sourcenickname(::std::string&& value);
  #endif
  void set_sourcenickname(const char* value);
  void set_sourcenickname(const char* value, size_t size);
  ::std::string* mutable_sourcenickname();
  ::std::string* release_sourcenickname();
  void set_allocated_sourcenickname(::std::string* sourcenickname);

  // optional int32 FriendFlag = 4;
  bool has_friendflag() const;
  void clear_friendflag();
  static const int kFriendFlagFieldNumber = 4;
  ::google::protobuf::int32 friendflag() const;
  void set_friendflag(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.VerifyUserObj)
 private:
  void set_has_value();
  void clear_has_value();
  void set_has_verifyuserticket();
  void clear_has_verifyuserticket();
  void set_has_antispamticket();
  void clear_has_antispamticket();
  void set_has_friendflag();
  void clear_has_friendflag();
  void set_has_chatroomusername();
  void clear_has_chatroomusername();
  void set_has_sourceusername();
  void clear_has_sourceusername();
  void set_has_sourcenickname();
  void clear_has_sourcenickname();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::internal::ArenaStringPtr verifyuserticket_;
  ::google::protobuf::internal::ArenaStringPtr antispamticket_;
  ::google::protobuf::internal::ArenaStringPtr chatroomusername_;
  ::google::protobuf::internal::ArenaStringPtr sourceusername_;
  ::google::protobuf::internal::ArenaStringPtr sourcenickname_;
  ::google::protobuf::int32 friendflag_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CustomizedInfoObj : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.CustomizedInfoObj) */ {
 public:
  CustomizedInfoObj();
  virtual ~CustomizedInfoObj();

  CustomizedInfoObj(const CustomizedInfoObj& from);

  inline CustomizedInfoObj& operator=(const CustomizedInfoObj& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CustomizedInfoObj& default_instance();

  static inline const CustomizedInfoObj* internal_default_instance() {
    return reinterpret_cast<const CustomizedInfoObj*>(
               &_CustomizedInfoObj_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    109;

  void Swap(CustomizedInfoObj* other);

  // implements Message ----------------------------------------------

  inline CustomizedInfoObj* New() const PROTOBUF_FINAL { return New(NULL); }

  CustomizedInfoObj* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CustomizedInfoObj& from);
  void MergeFrom(const CustomizedInfoObj& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CustomizedInfoObj* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ExternalInfo = 2;
  bool has_externalinfo() const;
  void clear_externalinfo();
  static const int kExternalInfoFieldNumber = 2;
  const ::std::string& externalinfo() const;
  void set_externalinfo(const ::std::string& value);
  #if LANG_CXX11
  void set_externalinfo(::std::string&& value);
  #endif
  void set_externalinfo(const char* value);
  void set_externalinfo(const char* value, size_t size);
  ::std::string* mutable_externalinfo();
  ::std::string* release_externalinfo();
  void set_allocated_externalinfo(::std::string* externalinfo);

  // optional string BrandInfo = 3;
  bool has_brandinfo() const;
  void clear_brandinfo();
  static const int kBrandInfoFieldNumber = 3;
  const ::std::string& brandinfo() const;
  void set_brandinfo(const ::std::string& value);
  #if LANG_CXX11
  void set_brandinfo(::std::string&& value);
  #endif
  void set_brandinfo(const char* value);
  void set_brandinfo(const char* value, size_t size);
  ::std::string* mutable_brandinfo();
  ::std::string* release_brandinfo();
  void set_allocated_brandinfo(::std::string* brandinfo);

  // optional string BrandIconURL = 4;
  bool has_brandiconurl() const;
  void clear_brandiconurl();
  static const int kBrandIconURLFieldNumber = 4;
  const ::std::string& brandiconurl() const;
  void set_brandiconurl(const ::std::string& value);
  #if LANG_CXX11
  void set_brandiconurl(::std::string&& value);
  #endif
  void set_brandiconurl(const char* value);
  void set_brandiconurl(const char* value, size_t size);
  ::std::string* mutable_brandiconurl();
  ::std::string* release_brandiconurl();
  void set_allocated_brandiconurl(::std::string* brandiconurl);

  // optional int32 BrandFlag = 1;
  bool has_brandflag() const;
  void clear_brandflag();
  static const int kBrandFlagFieldNumber = 1;
  ::google::protobuf::int32 brandflag() const;
  void set_brandflag(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.CustomizedInfoObj)
 private:
  void set_has_brandflag();
  void clear_has_brandflag();
  void set_has_externalinfo();
  void clear_has_externalinfo();
  void set_has_brandinfo();
  void clear_has_brandinfo();
  void set_has_brandiconurl();
  void clear_has_brandiconurl();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr externalinfo_;
  ::google::protobuf::internal::ArenaStringPtr brandinfo_;
  ::google::protobuf::internal::ArenaStringPtr brandiconurl_;
  ::google::protobuf::int32 brandflag_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class roomInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.roomInfo) */ {
 public:
  roomInfo();
  virtual ~roomInfo();

  roomInfo(const roomInfo& from);

  inline roomInfo& operator=(const roomInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const roomInfo& default_instance();

  static inline const roomInfo* internal_default_instance() {
    return reinterpret_cast<const roomInfo*>(
               &_roomInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    110;

  void Swap(roomInfo* other);

  // implements Message ----------------------------------------------

  inline roomInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  roomInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const roomInfo& from);
  void MergeFrom(const roomInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(roomInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .FromCs.sKBuiltinstringT UserName = 1;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 1;
  const ::FromCs::sKBuiltinstringT& username() const;
  ::FromCs::sKBuiltinstringT* mutable_username();
  ::FromCs::sKBuiltinstringT* release_username();
  void set_allocated_username(::FromCs::sKBuiltinstringT* username);

  // optional .FromCs.sKBuiltinstringT NickName = 2;
  bool has_nickname() const;
  void clear_nickname();
  static const int kNickNameFieldNumber = 2;
  const ::FromCs::sKBuiltinstringT& nickname() const;
  ::FromCs::sKBuiltinstringT* mutable_nickname();
  ::FromCs::sKBuiltinstringT* release_nickname();
  void set_allocated_nickname(::FromCs::sKBuiltinstringT* nickname);

  // @@protoc_insertion_point(class_scope:FromCs.roomInfo)
 private:
  void set_has_username();
  void clear_has_username();
  void set_has_nickname();
  void clear_has_nickname();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::FromCs::sKBuiltinstringT* username_;
  ::FromCs::sKBuiltinstringT* nickname_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ContactProfile : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.ContactProfile) */ {
 public:
  ContactProfile();
  virtual ~ContactProfile();

  ContactProfile(const ContactProfile& from);

  inline ContactProfile& operator=(const ContactProfile& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContactProfile& default_instance();

  static inline const ContactProfile* internal_default_instance() {
    return reinterpret_cast<const ContactProfile*>(
               &_ContactProfile_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    111;

  void Swap(ContactProfile* other);

  // implements Message ----------------------------------------------

  inline ContactProfile* New() const PROTOBUF_FINAL { return New(NULL); }

  ContactProfile* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ContactProfile& from);
  void MergeFrom(const ContactProfile& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ContactProfile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Province = 19;
  bool has_province() const;
  void clear_province();
  static const int kProvinceFieldNumber = 19;
  const ::std::string& province() const;
  void set_province(const ::std::string& value);
  #if LANG_CXX11
  void set_province(::std::string&& value);
  #endif
  void set_province(const char* value);
  void set_province(const char* value, size_t size);
  ::std::string* mutable_province();
  ::std::string* release_province();
  void set_allocated_province(::std::string* province);

  // optional string City = 20;
  bool has_city() const;
  void clear_city();
  static const int kCityFieldNumber = 20;
  const ::std::string& city() const;
  void set_city(const ::std::string& value);
  #if LANG_CXX11
  void set_city(::std::string&& value);
  #endif
  void set_city(const char* value);
  void set_city(const char* value, size_t size);
  ::std::string* mutable_city();
  ::std::string* release_city();
  void set_allocated_city(::std::string* city);

  // optional string Signature = 21;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 21;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_signature(::std::string&& value);
  #endif
  void set_signature(const char* value);
  void set_signature(const char* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // optional string VerifyInfo = 25;
  bool has_verifyinfo() const;
  void clear_verifyinfo();
  static const int kVerifyInfoFieldNumber = 25;
  const ::std::string& verifyinfo() const;
  void set_verifyinfo(const ::std::string& value);
  #if LANG_CXX11
  void set_verifyinfo(::std::string&& value);
  #endif
  void set_verifyinfo(const char* value);
  void set_verifyinfo(const char* value, size_t size);
  ::std::string* mutable_verifyinfo();
  ::std::string* release_verifyinfo();
  void set_allocated_verifyinfo(::std::string* verifyinfo);

  // optional string Weibo = 28;
  bool has_weibo() const;
  void clear_weibo();
  static const int kWeiboFieldNumber = 28;
  const ::std::string& weibo() const;
  void set_weibo(const ::std::string& value);
  #if LANG_CXX11
  void set_weibo(::std::string&& value);
  #endif
  void set_weibo(const char* value);
  void set_weibo(const char* value, size_t size);
  ::std::string* mutable_weibo();
  ::std::string* release_weibo();
  void set_allocated_weibo(::std::string* weibo);

  // optional string VerifyContent = 29;
  bool has_verifycontent() const;
  void clear_verifycontent();
  static const int kVerifyContentFieldNumber = 29;
  const ::std::string& verifycontent() const;
  void set_verifycontent(const ::std::string& value);
  #if LANG_CXX11
  void set_verifycontent(::std::string&& value);
  #endif
  void set_verifycontent(const char* value);
  void set_verifycontent(const char* value, size_t size);
  ::std::string* mutable_verifycontent();
  ::std::string* release_verifycontent();
  void set_allocated_verifycontent(::std::string* verifycontent);

  // optional string Alias = 30;
  bool has_alias() const;
  void clear_alias();
  static const int kAliasFieldNumber = 30;
  const ::std::string& alias() const;
  void set_alias(const ::std::string& value);
  #if LANG_CXX11
  void set_alias(::std::string&& value);
  #endif
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  ::std::string* mutable_alias();
  ::std::string* release_alias();
  void set_allocated_alias(::std::string* alias);

  // optional string ChatRoomOwner = 31;
  bool has_chatroomowner() const;
  void clear_chatroomowner();
  static const int kChatRoomOwnerFieldNumber = 31;
  const ::std::string& chatroomowner() const;
  void set_chatroomowner(const ::std::string& value);
  #if LANG_CXX11
  void set_chatroomowner(::std::string&& value);
  #endif
  void set_chatroomowner(const char* value);
  void set_chatroomowner(const char* value, size_t size);
  ::std::string* mutable_chatroomowner();
  ::std::string* release_chatroomowner();
  void set_allocated_chatroomowner(::std::string* chatroomowner);

  // optional string WeiboNickname = 32;
  bool has_weibonickname() const;
  void clear_weibonickname();
  static const int kWeiboNicknameFieldNumber = 32;
  const ::std::string& weibonickname() const;
  void set_weibonickname(const ::std::string& value);
  #if LANG_CXX11
  void set_weibonickname(::std::string&& value);
  #endif
  void set_weibonickname(const char* value);
  void set_weibonickname(const char* value, size_t size);
  ::std::string* mutable_weibonickname();
  ::std::string* release_weibonickname();
  void set_allocated_weibonickname(::std::string* weibonickname);

  // optional string AlbumBGImgID = 36;
  bool has_albumbgimgid() const;
  void clear_albumbgimgid();
  static const int kAlbumBGImgIDFieldNumber = 36;
  const ::std::string& albumbgimgid() const;
  void set_albumbgimgid(const ::std::string& value);
  #if LANG_CXX11
  void set_albumbgimgid(::std::string&& value);
  #endif
  void set_albumbgimgid(const char* value);
  void set_albumbgimgid(const char* value, size_t size);
  ::std::string* mutable_albumbgimgid();
  ::std::string* release_albumbgimgid();
  void set_allocated_albumbgimgid(::std::string* albumbgimgid);

  // optional string Country = 38;
  bool has_country() const;
  void clear_country();
  static const int kCountryFieldNumber = 38;
  const ::std::string& country() const;
  void set_country(const ::std::string& value);
  #if LANG_CXX11
  void set_country(::std::string&& value);
  #endif
  void set_country(const char* value);
  void set_country(const char* value, size_t size);
  ::std::string* mutable_country();
  ::std::string* release_country();
  void set_allocated_country(::std::string* country);

  // optional string BigHeadImgUrl = 39;
  bool has_bigheadimgurl() const;
  void clear_bigheadimgurl();
  static const int kBigHeadImgUrlFieldNumber = 39;
  const ::std::string& bigheadimgurl() const;
  void set_bigheadimgurl(const ::std::string& value);
  #if LANG_CXX11
  void set_bigheadimgurl(::std::string&& value);
  #endif
  void set_bigheadimgurl(const char* value);
  void set_bigheadimgurl(const char* value, size_t size);
  ::std::string* mutable_bigheadimgurl();
  ::std::string* release_bigheadimgurl();
  void set_allocated_bigheadimgurl(::std::string* bigheadimgurl);

  // optional string SmallHeadImgUrl = 40;
  bool has_smallheadimgurl() const;
  void clear_smallheadimgurl();
  static const int kSmallHeadImgUrlFieldNumber = 40;
  const ::std::string& smallheadimgurl() const;
  void set_smallheadimgurl(const ::std::string& value);
  #if LANG_CXX11
  void set_smallheadimgurl(::std::string&& value);
  #endif
  void set_smallheadimgurl(const char* value);
  void set_smallheadimgurl(const char* value, size_t size);
  ::std::string* mutable_smallheadimgurl();
  ::std::string* release_smallheadimgurl();
  void set_allocated_smallheadimgurl(::std::string* smallheadimgurl);

  // optional string MyBrandList = 41;
  bool has_mybrandlist() const;
  void clear_mybrandlist();
  static const int kMyBrandListFieldNumber = 41;
  const ::std::string& mybrandlist() const;
  void set_mybrandlist(const ::std::string& value);
  #if LANG_CXX11
  void set_mybrandlist(::std::string&& value);
  #endif
  void set_mybrandlist(const char* value);
  void set_mybrandlist(const char* value, size_t size);
  ::std::string* mutable_mybrandlist();
  ::std::string* release_mybrandlist();
  void set_allocated_mybrandlist(::std::string* mybrandlist);

  // optional string ChatRoomData = 43;
  bool has_chatroomdata() const;
  void clear_chatroomdata();
  static const int kChatRoomDataFieldNumber = 43;
  const ::std::string& chatroomdata() const;
  void set_chatroomdata(const ::std::string& value);
  #if LANG_CXX11
  void set_chatroomdata(::std::string&& value);
  #endif
  void set_chatroomdata(const char* value);
  void set_chatroomdata(const char* value, size_t size);
  ::std::string* mutable_chatroomdata();
  ::std::string* release_chatroomdata();
  void set_allocated_chatroomdata(::std::string* chatroomdata);

  // optional string HeadImgMd5 = 44;
  bool has_headimgmd5() const;
  void clear_headimgmd5();
  static const int kHeadImgMd5FieldNumber = 44;
  const ::std::string& headimgmd5() const;
  void set_headimgmd5(const ::std::string& value);
  #if LANG_CXX11
  void set_headimgmd5(::std::string&& value);
  #endif
  void set_headimgmd5(const char* value);
  void set_headimgmd5(const char* value, size_t size);
  ::std::string* mutable_headimgmd5();
  ::std::string* release_headimgmd5();
  void set_allocated_headimgmd5(::std::string* headimgmd5);

  // optional string EncryptUserName = 45;
  bool has_encryptusername() const;
  void clear_encryptusername();
  static const int kEncryptUserNameFieldNumber = 45;
  const ::std::string& encryptusername() const;
  void set_encryptusername(const ::std::string& value);
  #if LANG_CXX11
  void set_encryptusername(::std::string&& value);
  #endif
  void set_encryptusername(const char* value);
  void set_encryptusername(const char* value, size_t size);
  ::std::string* mutable_encryptusername();
  ::std::string* release_encryptusername();
  void set_allocated_encryptusername(::std::string* encryptusername);

  // optional .FromCs.sKBuiltinstringT UserName = 1;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 1;
  const ::FromCs::sKBuiltinstringT& username() const;
  ::FromCs::sKBuiltinstringT* mutable_username();
  ::FromCs::sKBuiltinstringT* release_username();
  void set_allocated_username(::FromCs::sKBuiltinstringT* username);

  // optional .FromCs.sKBuiltinstringT NickName = 2;
  bool has_nickname() const;
  void clear_nickname();
  static const int kNickNameFieldNumber = 2;
  const ::FromCs::sKBuiltinstringT& nickname() const;
  ::FromCs::sKBuiltinstringT* mutable_nickname();
  ::FromCs::sKBuiltinstringT* release_nickname();
  void set_allocated_nickname(::FromCs::sKBuiltinstringT* nickname);

  // optional .FromCs.sKBuiltinstringT PYInitial = 3;
  bool has_pyinitial() const;
  void clear_pyinitial();
  static const int kPYInitialFieldNumber = 3;
  const ::FromCs::sKBuiltinstringT& pyinitial() const;
  ::FromCs::sKBuiltinstringT* mutable_pyinitial();
  ::FromCs::sKBuiltinstringT* release_pyinitial();
  void set_allocated_pyinitial(::FromCs::sKBuiltinstringT* pyinitial);

  // optional .FromCs.sKBuiltinstringT QuanPin = 4;
  bool has_quanpin() const;
  void clear_quanpin();
  static const int kQuanPinFieldNumber = 4;
  const ::FromCs::sKBuiltinstringT& quanpin() const;
  ::FromCs::sKBuiltinstringT* mutable_quanpin();
  ::FromCs::sKBuiltinstringT* release_quanpin();
  void set_allocated_quanpin(::FromCs::sKBuiltinstringT* quanpin);

  // optional .FromCs.sKBuiltinstringT ImgBuf = 6;
  bool has_imgbuf() const;
  void clear_imgbuf();
  static const int kImgBufFieldNumber = 6;
  const ::FromCs::sKBuiltinstringT& imgbuf() const;
  ::FromCs::sKBuiltinstringT* mutable_imgbuf();
  ::FromCs::sKBuiltinstringT* release_imgbuf();
  void set_allocated_imgbuf(::FromCs::sKBuiltinstringT* imgbuf);

  // optional .FromCs.sKBuiltinstringT Remark = 10;
  bool has_remark() const;
  void clear_remark();
  static const int kRemarkFieldNumber = 10;
  const ::FromCs::sKBuiltinstringT& remark() const;
  ::FromCs::sKBuiltinstringT* mutable_remark();
  ::FromCs::sKBuiltinstringT* release_remark();
  void set_allocated_remark(::FromCs::sKBuiltinstringT* remark);

  // optional .FromCs.sKBuiltinstringT RemarkPYInitial = 11;
  bool has_remarkpyinitial() const;
  void clear_remarkpyinitial();
  static const int kRemarkPYInitialFieldNumber = 11;
  const ::FromCs::sKBuiltinstringT& remarkpyinitial() const;
  ::FromCs::sKBuiltinstringT* mutable_remarkpyinitial();
  ::FromCs::sKBuiltinstringT* release_remarkpyinitial();
  void set_allocated_remarkpyinitial(::FromCs::sKBuiltinstringT* remarkpyinitial);

  // optional .FromCs.sKBuiltinstringT RemarkQuanPin = 12;
  bool has_remarkquanpin() const;
  void clear_remarkquanpin();
  static const int kRemarkQuanPinFieldNumber = 12;
  const ::FromCs::sKBuiltinstringT& remarkquanpin() const;
  ::FromCs::sKBuiltinstringT* mutable_remarkquanpin();
  ::FromCs::sKBuiltinstringT* release_remarkquanpin();
  void set_allocated_remarkquanpin(::FromCs::sKBuiltinstringT* remarkquanpin);

  // optional .FromCs.sKBuiltinstringT roomInfoList_ = 15;
  bool has_roominfolist_() const;
  void clear_roominfolist_();
  static const int kRoomInfoListFieldNumber = 15;
  const ::FromCs::sKBuiltinstringT& roominfolist_() const;
  ::FromCs::sKBuiltinstringT* mutable_roominfolist_();
  ::FromCs::sKBuiltinstringT* release_roominfolist_();
  void set_allocated_roominfolist_(::FromCs::sKBuiltinstringT* roominfolist_);

  // optional .FromCs.sKBuiltinstringT DomainList = 16;
  bool has_domainlist() const;
  void clear_domainlist();
  static const int kDomainListFieldNumber = 16;
  const ::FromCs::sKBuiltinstringT& domainlist() const;
  ::FromCs::sKBuiltinstringT* mutable_domainlist();
  ::FromCs::sKBuiltinstringT* release_domainlist();
  void set_allocated_domainlist(::FromCs::sKBuiltinstringT* domainlist);

  // optional .FromCs.sKBuiltinstringT SnsUserInfo = 37;
  bool has_snsuserinfo() const;
  void clear_snsuserinfo();
  static const int kSnsUserInfoFieldNumber = 37;
  const ::FromCs::sKBuiltinstringT& snsuserinfo() const;
  ::FromCs::sKBuiltinstringT* mutable_snsuserinfo();
  ::FromCs::sKBuiltinstringT* release_snsuserinfo();
  void set_allocated_snsuserinfo(::FromCs::sKBuiltinstringT* snsuserinfo);

  // optional .FromCs.sKBuiltinstringT CustomizedInfo = 42;
  bool has_customizedinfo() const;
  void clear_customizedinfo();
  static const int kCustomizedInfoFieldNumber = 42;
  const ::FromCs::sKBuiltinstringT& customizedinfo() const;
  ::FromCs::sKBuiltinstringT* mutable_customizedinfo();
  ::FromCs::sKBuiltinstringT* release_customizedinfo();
  void set_allocated_customizedinfo(::FromCs::sKBuiltinstringT* customizedinfo);

  // optional int32 Sex = 5;
  bool has_sex() const;
  void clear_sex();
  static const int kSexFieldNumber = 5;
  ::google::protobuf::int32 sex() const;
  void set_sex(::google::protobuf::int32 value);

  // optional int32 BitMask = 7;
  bool has_bitmask() const;
  void clear_bitmask();
  static const int kBitMaskFieldNumber = 7;
  ::google::protobuf::int32 bitmask() const;
  void set_bitmask(::google::protobuf::int32 value);

  // optional int32 BitVal = 8;
  bool has_bitval() const;
  void clear_bitval();
  static const int kBitValFieldNumber = 8;
  ::google::protobuf::int32 bitval() const;
  void set_bitval(::google::protobuf::int32 value);

  // optional int32 ImgFlag = 9;
  bool has_imgflag() const;
  void clear_imgflag();
  static const int kImgFlagFieldNumber = 9;
  ::google::protobuf::int32 imgflag() const;
  void set_imgflag(::google::protobuf::int32 value);

  // optional int32 ContactType = 13;
  bool has_contacttype() const;
  void clear_contacttype();
  static const int kContactTypeFieldNumber = 13;
  ::google::protobuf::int32 contacttype() const;
  void set_contacttype(::google::protobuf::int32 value);

  // optional int32 RoomInfoCount = 14;
  bool has_roominfocount() const;
  void clear_roominfocount();
  static const int kRoomInfoCountFieldNumber = 14;
  ::google::protobuf::int32 roominfocount() const;
  void set_roominfocount(::google::protobuf::int32 value);

  // optional int32 ChatRoomNotify = 17;
  bool has_chatroomnotify() const;
  void clear_chatroomnotify();
  static const int kChatRoomNotifyFieldNumber = 17;
  ::google::protobuf::int32 chatroomnotify() const;
  void set_chatroomnotify(::google::protobuf::int32 value);

  // optional int32 AddContactScene = 18;
  bool has_addcontactscene() const;
  void clear_addcontactscene();
  static const int kAddContactSceneFieldNumber = 18;
  ::google::protobuf::int32 addcontactscene() const;
  void set_addcontactscene(::google::protobuf::int32 value);

  // optional int32 PersonalCard = 22;
  bool has_personalcard() const;
  void clear_personalcard();
  static const int kPersonalCardFieldNumber = 22;
  ::google::protobuf::int32 personalcard() const;
  void set_personalcard(::google::protobuf::int32 value);

  // optional int32 HasWeiXinHdHeadImg = 23;
  bool has_hasweixinhdheadimg() const;
  void clear_hasweixinhdheadimg();
  static const int kHasWeiXinHdHeadImgFieldNumber = 23;
  ::google::protobuf::int32 hasweixinhdheadimg() const;
  void set_hasweixinhdheadimg(::google::protobuf::int32 value);

  // optional int32 VerifyFlag = 24;
  bool has_verifyflag() const;
  void clear_verifyflag();
  static const int kVerifyFlagFieldNumber = 24;
  ::google::protobuf::int32 verifyflag() const;
  void set_verifyflag(::google::protobuf::int32 value);

  // optional int32 Level = 26;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 26;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // optional int32 Source = 27;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 27;
  ::google::protobuf::int32 source() const;
  void set_source(::google::protobuf::int32 value);

  // optional int32 WeiboFlag = 33;
  bool has_weiboflag() const;
  void clear_weiboflag();
  static const int kWeiboFlagFieldNumber = 33;
  ::google::protobuf::int32 weiboflag() const;
  void set_weiboflag(::google::protobuf::int32 value);

  // optional int32 AlbumStyle = 34;
  bool has_albumstyle() const;
  void clear_albumstyle();
  static const int kAlbumStyleFieldNumber = 34;
  ::google::protobuf::int32 albumstyle() const;
  void set_albumstyle(::google::protobuf::int32 value);

  // optional int32 AlbumFlag = 35;
  bool has_albumflag() const;
  void clear_albumflag();
  static const int kAlbumFlagFieldNumber = 35;
  ::google::protobuf::int32 albumflag() const;
  void set_albumflag(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.ContactProfile)
 private:
  void set_has_username();
  void clear_has_username();
  void set_has_nickname();
  void clear_has_nickname();
  void set_has_pyinitial();
  void clear_has_pyinitial();
  void set_has_quanpin();
  void clear_has_quanpin();
  void set_has_sex();
  void clear_has_sex();
  void set_has_imgbuf();
  void clear_has_imgbuf();
  void set_has_bitmask();
  void clear_has_bitmask();
  void set_has_bitval();
  void clear_has_bitval();
  void set_has_imgflag();
  void clear_has_imgflag();
  void set_has_remark();
  void clear_has_remark();
  void set_has_remarkpyinitial();
  void clear_has_remarkpyinitial();
  void set_has_remarkquanpin();
  void clear_has_remarkquanpin();
  void set_has_contacttype();
  void clear_has_contacttype();
  void set_has_roominfocount();
  void clear_has_roominfocount();
  void set_has_roominfolist_();
  void clear_has_roominfolist_();
  void set_has_domainlist();
  void clear_has_domainlist();
  void set_has_chatroomnotify();
  void clear_has_chatroomnotify();
  void set_has_addcontactscene();
  void clear_has_addcontactscene();
  void set_has_province();
  void clear_has_province();
  void set_has_city();
  void clear_has_city();
  void set_has_signature();
  void clear_has_signature();
  void set_has_personalcard();
  void clear_has_personalcard();
  void set_has_hasweixinhdheadimg();
  void clear_has_hasweixinhdheadimg();
  void set_has_verifyflag();
  void clear_has_verifyflag();
  void set_has_verifyinfo();
  void clear_has_verifyinfo();
  void set_has_level();
  void clear_has_level();
  void set_has_source();
  void clear_has_source();
  void set_has_weibo();
  void clear_has_weibo();
  void set_has_verifycontent();
  void clear_has_verifycontent();
  void set_has_alias();
  void clear_has_alias();
  void set_has_chatroomowner();
  void clear_has_chatroomowner();
  void set_has_weibonickname();
  void clear_has_weibonickname();
  void set_has_weiboflag();
  void clear_has_weiboflag();
  void set_has_albumstyle();
  void clear_has_albumstyle();
  void set_has_albumflag();
  void clear_has_albumflag();
  void set_has_albumbgimgid();
  void clear_has_albumbgimgid();
  void set_has_snsuserinfo();
  void clear_has_snsuserinfo();
  void set_has_country();
  void clear_has_country();
  void set_has_bigheadimgurl();
  void clear_has_bigheadimgurl();
  void set_has_smallheadimgurl();
  void clear_has_smallheadimgurl();
  void set_has_mybrandlist();
  void clear_has_mybrandlist();
  void set_has_customizedinfo();
  void clear_has_customizedinfo();
  void set_has_chatroomdata();
  void clear_has_chatroomdata();
  void set_has_headimgmd5();
  void clear_has_headimgmd5();
  void set_has_encryptusername();
  void clear_has_encryptusername();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<2> _has_bits_;
  ::google::protobuf::internal::ArenaStringPtr province_;
  ::google::protobuf::internal::ArenaStringPtr city_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  ::google::protobuf::internal::ArenaStringPtr verifyinfo_;
  ::google::protobuf::internal::ArenaStringPtr weibo_;
  ::google::protobuf::internal::ArenaStringPtr verifycontent_;
  ::google::protobuf::internal::ArenaStringPtr alias_;
  ::google::protobuf::internal::ArenaStringPtr chatroomowner_;
  ::google::protobuf::internal::ArenaStringPtr weibonickname_;
  ::google::protobuf::internal::ArenaStringPtr albumbgimgid_;
  ::google::protobuf::internal::ArenaStringPtr country_;
  ::google::protobuf::internal::ArenaStringPtr bigheadimgurl_;
  ::google::protobuf::internal::ArenaStringPtr smallheadimgurl_;
  ::google::protobuf::internal::ArenaStringPtr mybrandlist_;
  ::google::protobuf::internal::ArenaStringPtr chatroomdata_;
  ::google::protobuf::internal::ArenaStringPtr headimgmd5_;
  ::google::protobuf::internal::ArenaStringPtr encryptusername_;
  ::FromCs::sKBuiltinstringT* username_;
  ::FromCs::sKBuiltinstringT* nickname_;
  ::FromCs::sKBuiltinstringT* pyinitial_;
  ::FromCs::sKBuiltinstringT* quanpin_;
  ::FromCs::sKBuiltinstringT* imgbuf_;
  ::FromCs::sKBuiltinstringT* remark_;
  ::FromCs::sKBuiltinstringT* remarkpyinitial_;
  ::FromCs::sKBuiltinstringT* remarkquanpin_;
  ::FromCs::sKBuiltinstringT* roominfolist__;
  ::FromCs::sKBuiltinstringT* domainlist_;
  ::FromCs::sKBuiltinstringT* snsuserinfo_;
  ::FromCs::sKBuiltinstringT* customizedinfo_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 bitmask_;
  ::google::protobuf::int32 bitval_;
  ::google::protobuf::int32 imgflag_;
  ::google::protobuf::int32 contacttype_;
  ::google::protobuf::int32 roominfocount_;
  ::google::protobuf::int32 chatroomnotify_;
  ::google::protobuf::int32 addcontactscene_;
  ::google::protobuf::int32 personalcard_;
  ::google::protobuf::int32 hasweixinhdheadimg_;
  ::google::protobuf::int32 verifyflag_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 source_;
  ::google::protobuf::int32 weiboflag_;
  ::google::protobuf::int32 albumstyle_;
  ::google::protobuf::int32 albumflag_;
  mutable int _cached_size_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MsgTip : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.MsgTip) */ {
 public:
  MsgTip();
  virtual ~MsgTip();

  MsgTip(const MsgTip& from);

  inline MsgTip& operator=(const MsgTip& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgTip& default_instance();

  static inline const MsgTip* internal_default_instance() {
    return reinterpret_cast<const MsgTip*>(
               &_MsgTip_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    112;

  void Swap(MsgTip* other);

  // implements Message ----------------------------------------------

  inline MsgTip* New() const PROTOBUF_FINAL { return New(NULL); }

  MsgTip* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MsgTip& from);
  void MergeFrom(const MsgTip& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MsgTip* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .FromCs.sKBuiltinstringT FromUserName = 2;
  bool has_fromusername() const;
  void clear_fromusername();
  static const int kFromUserNameFieldNumber = 2;
  const ::FromCs::sKBuiltinstringT& fromusername() const;
  ::FromCs::sKBuiltinstringT* mutable_fromusername();
  ::FromCs::sKBuiltinstringT* release_fromusername();
  void set_allocated_fromusername(::FromCs::sKBuiltinstringT* fromusername);

  // optional .FromCs.sKBuiltinstringT ToUserName = 3;
  bool has_tousername() const;
  void clear_tousername();
  static const int kToUserNameFieldNumber = 3;
  const ::FromCs::sKBuiltinstringT& tousername() const;
  ::FromCs::sKBuiltinstringT* mutable_tousername();
  ::FromCs::sKBuiltinstringT* release_tousername();
  void set_allocated_tousername(::FromCs::sKBuiltinstringT* tousername);

  // optional int32 MsgId = 1;
  bool has_msgid() const;
  void clear_msgid();
  static const int kMsgIdFieldNumber = 1;
  ::google::protobuf::int32 msgid() const;
  void set_msgid(::google::protobuf::int32 value);

  // optional int32 Status = 4;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 4;
  ::google::protobuf::int32 status() const;
  void set_status(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.MsgTip)
 private:
  void set_has_msgid();
  void clear_has_msgid();
  void set_has_fromusername();
  void clear_has_fromusername();
  void set_has_tousername();
  void clear_has_tousername();
  void set_has_status();
  void clear_has_status();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::FromCs::sKBuiltinstringT* fromusername_;
  ::FromCs::sKBuiltinstringT* tousername_;
  ::google::protobuf::int32 msgid_;
  ::google::protobuf::int32 status_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MsgTip2 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.MsgTip2) */ {
 public:
  MsgTip2();
  virtual ~MsgTip2();

  MsgTip2(const MsgTip2& from);

  inline MsgTip2& operator=(const MsgTip2& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgTip2& default_instance();

  static inline const MsgTip2* internal_default_instance() {
    return reinterpret_cast<const MsgTip2*>(
               &_MsgTip2_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    113;

  void Swap(MsgTip2* other);

  // implements Message ----------------------------------------------

  inline MsgTip2* New() const PROTOBUF_FINAL { return New(NULL); }

  MsgTip2* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MsgTip2& from);
  void MergeFrom(const MsgTip2& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MsgTip2* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string MyBrandList = 2;
  bool has_mybrandlist() const;
  void clear_mybrandlist();
  static const int kMyBrandListFieldNumber = 2;
  const ::std::string& mybrandlist() const;
  void set_mybrandlist(const ::std::string& value);
  #if LANG_CXX11
  void set_mybrandlist(::std::string&& value);
  #endif
  void set_mybrandlist(const char* value);
  void set_mybrandlist(const char* value, size_t size);
  ::std::string* mutable_mybrandlist();
  ::std::string* release_mybrandlist();
  void set_allocated_mybrandlist(::std::string* mybrandlist);

  // optional string MsgPushSound = 3;
  bool has_msgpushsound() const;
  void clear_msgpushsound();
  static const int kMsgPushSoundFieldNumber = 3;
  const ::std::string& msgpushsound() const;
  void set_msgpushsound(const ::std::string& value);
  #if LANG_CXX11
  void set_msgpushsound(::std::string&& value);
  #endif
  void set_msgpushsound(const char* value);
  void set_msgpushsound(const char* value, size_t size);
  ::std::string* mutable_msgpushsound();
  ::std::string* release_msgpushsound();
  void set_allocated_msgpushsound(::std::string* msgpushsound);

  // optional string VoipPushSound = 4;
  bool has_voippushsound() const;
  void clear_voippushsound();
  static const int kVoipPushSoundFieldNumber = 4;
  const ::std::string& voippushsound() const;
  void set_voippushsound(const ::std::string& value);
  #if LANG_CXX11
  void set_voippushsound(::std::string&& value);
  #endif
  void set_voippushsound(const char* value);
  void set_voippushsound(const char* value, size_t size);
  ::std::string* mutable_voippushsound();
  ::std::string* release_voippushsound();
  void set_allocated_voippushsound(::std::string* voippushsound);

  // optional string SafeMobile = 8;
  bool has_safemobile() const;
  void clear_safemobile();
  static const int kSafeMobileFieldNumber = 8;
  const ::std::string& safemobile() const;
  void set_safemobile(const ::std::string& value);
  #if LANG_CXX11
  void set_safemobile(::std::string&& value);
  #endif
  void set_safemobile(const char* value);
  void set_safemobile(const char* value, size_t size);
  ::std::string* mutable_safemobile();
  ::std::string* release_safemobile();
  void set_allocated_safemobile(::std::string* safemobile);

  // optional string BigHeadImgUrl = 9;
  bool has_bigheadimgurl() const;
  void clear_bigheadimgurl();
  static const int kBigHeadImgUrlFieldNumber = 9;
  const ::std::string& bigheadimgurl() const;
  void set_bigheadimgurl(const ::std::string& value);
  #if LANG_CXX11
  void set_bigheadimgurl(::std::string&& value);
  #endif
  void set_bigheadimgurl(const char* value);
  void set_bigheadimgurl(const char* value, size_t size);
  ::std::string* mutable_bigheadimgurl();
  ::std::string* release_bigheadimgurl();
  void set_allocated_bigheadimgurl(::std::string* bigheadimgurl);

  // optional string SmallHeadImgUrl = 10;
  bool has_smallheadimgurl() const;
  void clear_smallheadimgurl();
  static const int kSmallHeadImgUrlFieldNumber = 10;
  const ::std::string& smallheadimgurl() const;
  void set_smallheadimgurl(const ::std::string& value);
  #if LANG_CXX11
  void set_smallheadimgurl(::std::string&& value);
  #endif
  void set_smallheadimgurl(const char* value);
  void set_smallheadimgurl(const char* value, size_t size);
  ::std::string* mutable_smallheadimgurl();
  ::std::string* release_smallheadimgurl();
  void set_allocated_smallheadimgurl(::std::string* smallheadimgurl);

  // optional .FromCs.sKBuiltinstringT SnsUserInfo = 1;
  bool has_snsuserinfo() const;
  void clear_snsuserinfo();
  static const int kSnsUserInfoFieldNumber = 1;
  const ::FromCs::sKBuiltinstringT& snsuserinfo() const;
  ::FromCs::sKBuiltinstringT* mutable_snsuserinfo();
  ::FromCs::sKBuiltinstringT* release_snsuserinfo();
  void set_allocated_snsuserinfo(::FromCs::sKBuiltinstringT* snsuserinfo);

  // optional .FromCs.sKBuiltinstringT ExtXml = 12;
  bool has_extxml() const;
  void clear_extxml();
  static const int kExtXmlFieldNumber = 12;
  const ::FromCs::sKBuiltinstringT& extxml() const;
  ::FromCs::sKBuiltinstringT* mutable_extxml();
  ::FromCs::sKBuiltinstringT* release_extxml();
  void set_allocated_extxml(::FromCs::sKBuiltinstringT* extxml);

  // optional .FromCs.sKBuiltinstringT SafeDeviceList = 13;
  bool has_safedevicelist() const;
  void clear_safedevicelist();
  static const int kSafeDeviceListFieldNumber = 13;
  const ::FromCs::sKBuiltinstringT& safedevicelist() const;
  ::FromCs::sKBuiltinstringT* mutable_safedevicelist();
  ::FromCs::sKBuiltinstringT* release_safedevicelist();
  void set_allocated_safedevicelist(::FromCs::sKBuiltinstringT* safedevicelist);

  // optional int32 BigChatRoomSize = 5;
  bool has_bigchatroomsize() const;
  void clear_bigchatroomsize();
  static const int kBigChatRoomSizeFieldNumber = 5;
  ::google::protobuf::int32 bigchatroomsize() const;
  void set_bigchatroomsize(::google::protobuf::int32 value);

  // optional int32 BigChatRoomQuota = 6;
  bool has_bigchatroomquota() const;
  void clear_bigchatroomquota();
  static const int kBigChatRoomQuotaFieldNumber = 6;
  ::google::protobuf::int32 bigchatroomquota() const;
  void set_bigchatroomquota(::google::protobuf::int32 value);

  // optional int32 BigChatRoomInvite = 7;
  bool has_bigchatroominvite() const;
  void clear_bigchatroominvite();
  static const int kBigChatRoomInviteFieldNumber = 7;
  ::google::protobuf::int32 bigchatroominvite() const;
  void set_bigchatroominvite(::google::protobuf::int32 value);

  // optional int32 MainAcctType = 11;
  bool has_mainaccttype() const;
  void clear_mainaccttype();
  static const int kMainAcctTypeFieldNumber = 11;
  ::google::protobuf::int32 mainaccttype() const;
  void set_mainaccttype(::google::protobuf::int32 value);

  // optional int32 SafeDevice = 14;
  bool has_safedevice() const;
  void clear_safedevice();
  static const int kSafeDeviceFieldNumber = 14;
  ::google::protobuf::int32 safedevice() const;
  void set_safedevice(::google::protobuf::int32 value);

  // optional int32 GrayscaleFlag = 15;
  bool has_grayscaleflag() const;
  void clear_grayscaleflag();
  static const int kGrayscaleFlagFieldNumber = 15;
  ::google::protobuf::int32 grayscaleflag() const;
  void set_grayscaleflag(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.MsgTip2)
 private:
  void set_has_snsuserinfo();
  void clear_has_snsuserinfo();
  void set_has_mybrandlist();
  void clear_has_mybrandlist();
  void set_has_msgpushsound();
  void clear_has_msgpushsound();
  void set_has_voippushsound();
  void clear_has_voippushsound();
  void set_has_bigchatroomsize();
  void clear_has_bigchatroomsize();
  void set_has_bigchatroomquota();
  void clear_has_bigchatroomquota();
  void set_has_bigchatroominvite();
  void clear_has_bigchatroominvite();
  void set_has_safemobile();
  void clear_has_safemobile();
  void set_has_bigheadimgurl();
  void clear_has_bigheadimgurl();
  void set_has_smallheadimgurl();
  void clear_has_smallheadimgurl();
  void set_has_mainaccttype();
  void clear_has_mainaccttype();
  void set_has_extxml();
  void clear_has_extxml();
  void set_has_safedevicelist();
  void clear_has_safedevicelist();
  void set_has_safedevice();
  void clear_has_safedevice();
  void set_has_grayscaleflag();
  void clear_has_grayscaleflag();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr mybrandlist_;
  ::google::protobuf::internal::ArenaStringPtr msgpushsound_;
  ::google::protobuf::internal::ArenaStringPtr voippushsound_;
  ::google::protobuf::internal::ArenaStringPtr safemobile_;
  ::google::protobuf::internal::ArenaStringPtr bigheadimgurl_;
  ::google::protobuf::internal::ArenaStringPtr smallheadimgurl_;
  ::FromCs::sKBuiltinstringT* snsuserinfo_;
  ::FromCs::sKBuiltinstringT* extxml_;
  ::FromCs::sKBuiltinstringT* safedevicelist_;
  ::google::protobuf::int32 bigchatroomsize_;
  ::google::protobuf::int32 bigchatroomquota_;
  ::google::protobuf::int32 bigchatroominvite_;
  ::google::protobuf::int32 mainaccttype_;
  ::google::protobuf::int32 safedevice_;
  ::google::protobuf::int32 grayscaleflag_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SafeDevice : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.SafeDevice) */ {
 public:
  SafeDevice();
  virtual ~SafeDevice();

  SafeDevice(const SafeDevice& from);

  inline SafeDevice& operator=(const SafeDevice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SafeDevice& default_instance();

  static inline const SafeDevice* internal_default_instance() {
    return reinterpret_cast<const SafeDevice*>(
               &_SafeDevice_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    114;

  void Swap(SafeDevice* other);

  // implements Message ----------------------------------------------

  inline SafeDevice* New() const PROTOBUF_FINAL { return New(NULL); }

  SafeDevice* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SafeDevice& from);
  void MergeFrom(const SafeDevice& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SafeDevice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .FromCs.sKBuiltinstringT list_ = 2;
  bool has_list_() const;
  void clear_list_();
  static const int kListFieldNumber = 2;
  const ::FromCs::sKBuiltinstringT& list_() const;
  ::FromCs::sKBuiltinstringT* mutable_list_();
  ::FromCs::sKBuiltinstringT* release_list_();
  void set_allocated_list_(::FromCs::sKBuiltinstringT* list_);

  // optional int32 Count = 1;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 1;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.SafeDevice)
 private:
  void set_has_count();
  void clear_has_count();
  void set_has_list_();
  void clear_has_list_();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::FromCs::sKBuiltinstringT* list__;
  ::google::protobuf::int32 count_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SafeDeviceObj : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.SafeDeviceObj) */ {
 public:
  SafeDeviceObj();
  virtual ~SafeDeviceObj();

  SafeDeviceObj(const SafeDeviceObj& from);

  inline SafeDeviceObj& operator=(const SafeDeviceObj& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SafeDeviceObj& default_instance();

  static inline const SafeDeviceObj* internal_default_instance() {
    return reinterpret_cast<const SafeDeviceObj*>(
               &_SafeDeviceObj_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    115;

  void Swap(SafeDeviceObj* other);

  // implements Message ----------------------------------------------

  inline SafeDeviceObj* New() const PROTOBUF_FINAL { return New(NULL); }

  SafeDeviceObj* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SafeDeviceObj& from);
  void MergeFrom(const SafeDeviceObj& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SafeDeviceObj* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string Uuid = 2;
  bool has_uuid() const;
  void clear_uuid();
  static const int kUuidFieldNumber = 2;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_uuid(::std::string&& value);
  #endif
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // optional string DeviceType = 3;
  bool has_devicetype() const;
  void clear_devicetype();
  static const int kDeviceTypeFieldNumber = 3;
  const ::std::string& devicetype() const;
  void set_devicetype(const ::std::string& value);
  #if LANG_CXX11
  void set_devicetype(::std::string&& value);
  #endif
  void set_devicetype(const char* value);
  void set_devicetype(const char* value, size_t size);
  ::std::string* mutable_devicetype();
  ::std::string* release_devicetype();
  void set_allocated_devicetype(::std::string* devicetype);

  // optional int32 CreateTime = 4;
  bool has_createtime() const;
  void clear_createtime();
  static const int kCreateTimeFieldNumber = 4;
  ::google::protobuf::int32 createtime() const;
  void set_createtime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.SafeDeviceObj)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_uuid();
  void clear_has_uuid();
  void set_has_devicetype();
  void clear_has_devicetype();
  void set_has_createtime();
  void clear_has_createtime();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::google::protobuf::internal::ArenaStringPtr devicetype_;
  ::google::protobuf::int32 createtime_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Msg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.Msg) */ {
 public:
  Msg();
  virtual ~Msg();

  Msg(const Msg& from);

  inline Msg& operator=(const Msg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg& default_instance();

  static inline const Msg* internal_default_instance() {
    return reinterpret_cast<const Msg*>(
               &_Msg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    116;

  void Swap(Msg* other);

  // implements Message ----------------------------------------------

  inline Msg* New() const PROTOBUF_FINAL { return New(NULL); }

  Msg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Msg& from);
  void MergeFrom(const Msg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Msg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string MsgSource = 10;
  bool has_msgsource() const;
  void clear_msgsource();
  static const int kMsgSourceFieldNumber = 10;
  const ::std::string& msgsource() const;
  void set_msgsource(const ::std::string& value);
  #if LANG_CXX11
  void set_msgsource(::std::string&& value);
  #endif
  void set_msgsource(const char* value);
  void set_msgsource(const char* value, size_t size);
  ::std::string* mutable_msgsource();
  ::std::string* release_msgsource();
  void set_allocated_msgsource(::std::string* msgsource);

  // optional string PushContent = 11;
  bool has_pushcontent() const;
  void clear_pushcontent();
  static const int kPushContentFieldNumber = 11;
  const ::std::string& pushcontent() const;
  void set_pushcontent(const ::std::string& value);
  #if LANG_CXX11
  void set_pushcontent(::std::string&& value);
  #endif
  void set_pushcontent(const char* value);
  void set_pushcontent(const char* value, size_t size);
  ::std::string* mutable_pushcontent();
  ::std::string* release_pushcontent();
  void set_allocated_pushcontent(::std::string* pushcontent);

  // optional .FromCs.sKBuiltinstringT FromUserName = 2;
  bool has_fromusername() const;
  void clear_fromusername();
  static const int kFromUserNameFieldNumber = 2;
  const ::FromCs::sKBuiltinstringT& fromusername() const;
  ::FromCs::sKBuiltinstringT* mutable_fromusername();
  ::FromCs::sKBuiltinstringT* release_fromusername();
  void set_allocated_fromusername(::FromCs::sKBuiltinstringT* fromusername);

  // optional .FromCs.sKBuiltinstringT ToUserName = 3;
  bool has_tousername() const;
  void clear_tousername();
  static const int kToUserNameFieldNumber = 3;
  const ::FromCs::sKBuiltinstringT& tousername() const;
  ::FromCs::sKBuiltinstringT* mutable_tousername();
  ::FromCs::sKBuiltinstringT* release_tousername();
  void set_allocated_tousername(::FromCs::sKBuiltinstringT* tousername);

  // optional .FromCs.sKBuiltinstringT Content = 5;
  bool has_content() const;
  void clear_content();
  static const int kContentFieldNumber = 5;
  const ::FromCs::sKBuiltinstringT& content() const;
  ::FromCs::sKBuiltinstringT* mutable_content();
  ::FromCs::sKBuiltinstringT* release_content();
  void set_allocated_content(::FromCs::sKBuiltinstringT* content);

  // optional .FromCs.sKBuiltinstringT ImgBuf = 8;
  bool has_imgbuf() const;
  void clear_imgbuf();
  static const int kImgBufFieldNumber = 8;
  const ::FromCs::sKBuiltinstringT& imgbuf() const;
  ::FromCs::sKBuiltinstringT* mutable_imgbuf();
  ::FromCs::sKBuiltinstringT* release_imgbuf();
  void set_allocated_imgbuf(::FromCs::sKBuiltinstringT* imgbuf);

  // optional int32 MsgId = 1;
  bool has_msgid() const;
  void clear_msgid();
  static const int kMsgIdFieldNumber = 1;
  ::google::protobuf::int32 msgid() const;
  void set_msgid(::google::protobuf::int32 value);

  // optional int32 MsgType = 4;
  bool has_msgtype() const;
  void clear_msgtype();
  static const int kMsgTypeFieldNumber = 4;
  ::google::protobuf::int32 msgtype() const;
  void set_msgtype(::google::protobuf::int32 value);

  // optional int32 Status = 6;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 6;
  ::google::protobuf::int32 status() const;
  void set_status(::google::protobuf::int32 value);

  // optional int32 ImgStatus = 7;
  bool has_imgstatus() const;
  void clear_imgstatus();
  static const int kImgStatusFieldNumber = 7;
  ::google::protobuf::int32 imgstatus() const;
  void set_imgstatus(::google::protobuf::int32 value);

  // optional int32 CreateTime = 9;
  bool has_createtime() const;
  void clear_createtime();
  static const int kCreateTimeFieldNumber = 9;
  ::google::protobuf::int32 createtime() const;
  void set_createtime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.Msg)
 private:
  void set_has_msgid();
  void clear_has_msgid();
  void set_has_fromusername();
  void clear_has_fromusername();
  void set_has_tousername();
  void clear_has_tousername();
  void set_has_msgtype();
  void clear_has_msgtype();
  void set_has_content();
  void clear_has_content();
  void set_has_status();
  void clear_has_status();
  void set_has_imgstatus();
  void clear_has_imgstatus();
  void set_has_imgbuf();
  void clear_has_imgbuf();
  void set_has_createtime();
  void clear_has_createtime();
  void set_has_msgsource();
  void clear_has_msgsource();
  void set_has_pushcontent();
  void clear_has_pushcontent();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr msgsource_;
  ::google::protobuf::internal::ArenaStringPtr pushcontent_;
  ::FromCs::sKBuiltinstringT* fromusername_;
  ::FromCs::sKBuiltinstringT* tousername_;
  ::FromCs::sKBuiltinstringT* content_;
  ::FromCs::sKBuiltinstringT* imgbuf_;
  ::google::protobuf::int32 msgid_;
  ::google::protobuf::int32 msgtype_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::int32 imgstatus_;
  ::google::protobuf::int32 createtime_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HeadImg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.HeadImg) */ {
 public:
  HeadImg();
  virtual ~HeadImg();

  HeadImg(const HeadImg& from);

  inline HeadImg& operator=(const HeadImg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeadImg& default_instance();

  static inline const HeadImg* internal_default_instance() {
    return reinterpret_cast<const HeadImg*>(
               &_HeadImg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    117;

  void Swap(HeadImg* other);

  // implements Message ----------------------------------------------

  inline HeadImg* New() const PROTOBUF_FINAL { return New(NULL); }

  HeadImg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HeadImg& from);
  void MergeFrom(const HeadImg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HeadImg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes ImgBuf = 3;
  bool has_imgbuf() const;
  void clear_imgbuf();
  static const int kImgBufFieldNumber = 3;
  const ::std::string& imgbuf() const;
  void set_imgbuf(const ::std::string& value);
  #if LANG_CXX11
  void set_imgbuf(::std::string&& value);
  #endif
  void set_imgbuf(const char* value);
  void set_imgbuf(const void* value, size_t size);
  ::std::string* mutable_imgbuf();
  ::std::string* release_imgbuf();
  void set_allocated_imgbuf(::std::string* imgbuf);

  // optional string ImgMd5 = 4;
  bool has_imgmd5() const;
  void clear_imgmd5();
  static const int kImgMd5FieldNumber = 4;
  const ::std::string& imgmd5() const;
  void set_imgmd5(const ::std::string& value);
  #if LANG_CXX11
  void set_imgmd5(::std::string&& value);
  #endif
  void set_imgmd5(const char* value);
  void set_imgmd5(const char* value, size_t size);
  ::std::string* mutable_imgmd5();
  ::std::string* release_imgmd5();
  void set_allocated_imgmd5(::std::string* imgmd5);

  // optional string BigHeadImgUrl = 5;
  bool has_bigheadimgurl() const;
  void clear_bigheadimgurl();
  static const int kBigHeadImgUrlFieldNumber = 5;
  const ::std::string& bigheadimgurl() const;
  void set_bigheadimgurl(const ::std::string& value);
  #if LANG_CXX11
  void set_bigheadimgurl(::std::string&& value);
  #endif
  void set_bigheadimgurl(const char* value);
  void set_bigheadimgurl(const char* value, size_t size);
  ::std::string* mutable_bigheadimgurl();
  ::std::string* release_bigheadimgurl();
  void set_allocated_bigheadimgurl(::std::string* bigheadimgurl);

  // optional string SmallHeadImgUrl = 6;
  bool has_smallheadimgurl() const;
  void clear_smallheadimgurl();
  static const int kSmallHeadImgUrlFieldNumber = 6;
  const ::std::string& smallheadimgurl() const;
  void set_smallheadimgurl(const ::std::string& value);
  #if LANG_CXX11
  void set_smallheadimgurl(::std::string&& value);
  #endif
  void set_smallheadimgurl(const char* value);
  void set_smallheadimgurl(const char* value, size_t size);
  ::std::string* mutable_smallheadimgurl();
  ::std::string* release_smallheadimgurl();
  void set_allocated_smallheadimgurl(::std::string* smallheadimgurl);

  // optional int32 ImgType = 1;
  bool has_imgtype() const;
  void clear_imgtype();
  static const int kImgTypeFieldNumber = 1;
  ::google::protobuf::int32 imgtype() const;
  void set_imgtype(::google::protobuf::int32 value);

  // optional int32 ImgLen = 2;
  bool has_imglen() const;
  void clear_imglen();
  static const int kImgLenFieldNumber = 2;
  ::google::protobuf::int32 imglen() const;
  void set_imglen(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.HeadImg)
 private:
  void set_has_imgtype();
  void clear_has_imgtype();
  void set_has_imglen();
  void clear_has_imglen();
  void set_has_imgbuf();
  void clear_has_imgbuf();
  void set_has_imgmd5();
  void clear_has_imgmd5();
  void set_has_bigheadimgurl();
  void clear_has_bigheadimgurl();
  void set_has_smallheadimgurl();
  void clear_has_smallheadimgurl();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr imgbuf_;
  ::google::protobuf::internal::ArenaStringPtr imgmd5_;
  ::google::protobuf::internal::ArenaStringPtr bigheadimgurl_;
  ::google::protobuf::internal::ArenaStringPtr smallheadimgurl_;
  ::google::protobuf::int32 imgtype_;
  ::google::protobuf::int32 imglen_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class updateSomething : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.updateSomething) */ {
 public:
  updateSomething();
  virtual ~updateSomething();

  updateSomething(const updateSomething& from);

  inline updateSomething& operator=(const updateSomething& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const updateSomething& default_instance();

  static inline const updateSomething* internal_default_instance() {
    return reinterpret_cast<const updateSomething*>(
               &_updateSomething_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    118;

  void Swap(updateSomething* other);

  // implements Message ----------------------------------------------

  inline updateSomething* New() const PROTOBUF_FINAL { return New(NULL); }

  updateSomething* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const updateSomething& from);
  void MergeFrom(const updateSomething& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(updateSomething* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 FunctionId = 1;
  bool has_functionid() const;
  void clear_functionid();
  static const int kFunctionIdFieldNumber = 1;
  ::google::protobuf::int32 functionid() const;
  void set_functionid(::google::protobuf::int32 value);

  // optional int32 SwitchValue = 2;
  bool has_switchvalue() const;
  void clear_switchvalue();
  static const int kSwitchValueFieldNumber = 2;
  ::google::protobuf::int32 switchvalue() const;
  void set_switchvalue(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.updateSomething)
 private:
  void set_has_functionid();
  void clear_has_functionid();
  void set_has_switchvalue();
  void clear_has_switchvalue();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 functionid_;
  ::google::protobuf::int32 switchvalue_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class keyValuePairstring : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.keyValuePairstring) */ {
 public:
  keyValuePairstring();
  virtual ~keyValuePairstring();

  keyValuePairstring(const keyValuePairstring& from);

  inline keyValuePairstring& operator=(const keyValuePairstring& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const keyValuePairstring& default_instance();

  static inline const keyValuePairstring* internal_default_instance() {
    return reinterpret_cast<const keyValuePairstring*>(
               &_keyValuePairstring_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    119;

  void Swap(keyValuePairstring* other);

  // implements Message ----------------------------------------------

  inline keyValuePairstring* New() const PROTOBUF_FINAL { return New(NULL); }

  keyValuePairstring* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const keyValuePairstring& from);
  void MergeFrom(const keyValuePairstring& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(keyValuePairstring* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // optional int32 Key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  ::google::protobuf::int32 key() const;
  void set_key(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.keyValuePairstring)
 private:
  void set_has_key();
  void clear_has_key();
  void set_has_value();
  void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::int32 key_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class optionItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.optionItem) */ {
 public:
  optionItem();
  virtual ~optionItem();

  optionItem(const optionItem& from);

  inline optionItem& operator=(const optionItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const optionItem& default_instance();

  static inline const optionItem* internal_default_instance() {
    return reinterpret_cast<const optionItem*>(
               &_optionItem_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    120;

  void Swap(optionItem* other);

  // implements Message ----------------------------------------------

  inline optionItem* New() const PROTOBUF_FINAL { return New(NULL); }

  optionItem* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const optionItem& from);
  void MergeFrom(const optionItem& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(optionItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .FromCs.sKBuiltinstringT list_ = 2;
  bool has_list_() const;
  void clear_list_();
  static const int kListFieldNumber = 2;
  const ::FromCs::sKBuiltinstringT& list_() const;
  ::FromCs::sKBuiltinstringT* mutable_list_();
  ::FromCs::sKBuiltinstringT* release_list_();
  void set_allocated_list_(::FromCs::sKBuiltinstringT* list_);

  // optional int32 Count = 1;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 1;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.optionItem)
 private:
  void set_has_count();
  void clear_has_count();
  void set_has_list_();
  void clear_has_list_();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::FromCs::sKBuiltinstringT* list__;
  ::google::protobuf::int32 count_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PackegeInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.PackegeInfo) */ {
 public:
  PackegeInfo();
  virtual ~PackegeInfo();

  PackegeInfo(const PackegeInfo& from);

  inline PackegeInfo& operator=(const PackegeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PackegeInfo& default_instance();

  static inline const PackegeInfo* internal_default_instance() {
    return reinterpret_cast<const PackegeInfo*>(
               &_PackegeInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    121;

  void Swap(PackegeInfo* other);

  // implements Message ----------------------------------------------

  inline PackegeInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  PackegeInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PackegeInfo& from);
  void MergeFrom(const PackegeInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PackegeInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Name = 3;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string PackName = 6;
  bool has_packname() const;
  void clear_packname();
  static const int kPackNameFieldNumber = 6;
  const ::std::string& packname() const;
  void set_packname(const ::std::string& value);
  #if LANG_CXX11
  void set_packname(::std::string&& value);
  #endif
  void set_packname(const char* value);
  void set_packname(const char* value, size_t size);
  ::std::string* mutable_packname();
  ::std::string* release_packname();
  void set_allocated_packname(::std::string* packname);

  // optional .FromCs.sKBuiltinstringT Thumb = 5;
  bool has_thumb() const;
  void clear_thumb();
  static const int kThumbFieldNumber = 5;
  const ::FromCs::sKBuiltinstringT& thumb() const;
  ::FromCs::sKBuiltinstringT* mutable_thumb();
  ::FromCs::sKBuiltinstringT* release_thumb();
  void set_allocated_thumb(::FromCs::sKBuiltinstringT* thumb);

  // optional .FromCs.sKBuiltinstringT Ext = 7;
  bool has_ext() const;
  void clear_ext();
  static const int kExtFieldNumber = 7;
  const ::FromCs::sKBuiltinstringT& ext() const;
  ::FromCs::sKBuiltinstringT* mutable_ext();
  ::FromCs::sKBuiltinstringT* release_ext();
  void set_allocated_ext(::FromCs::sKBuiltinstringT* ext);

  // optional int32 Id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional int32 Version = 2;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  ::google::protobuf::int32 version() const;
  void set_version(::google::protobuf::int32 value);

  // optional int32 Size = 4;
  bool has_size() const;
  void clear_size();
  static const int kSizeFieldNumber = 4;
  ::google::protobuf::int32 size() const;
  void set_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.PackegeInfo)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_version();
  void clear_has_version();
  void set_has_name();
  void clear_has_name();
  void set_has_size();
  void clear_has_size();
  void set_has_thumb();
  void clear_has_thumb();
  void set_has_packname();
  void clear_has_packname();
  void set_has_ext();
  void clear_has_ext();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr packname_;
  ::FromCs::sKBuiltinstringT* thumb_;
  ::FromCs::sKBuiltinstringT* ext_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 version_;
  ::google::protobuf::int32 size_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VUserInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.VUserInfo) */ {
 public:
  VUserInfo();
  virtual ~VUserInfo();

  VUserInfo(const VUserInfo& from);

  inline VUserInfo& operator=(const VUserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VUserInfo& default_instance();

  static inline const VUserInfo* internal_default_instance() {
    return reinterpret_cast<const VUserInfo*>(
               &_VUserInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    122;

  void Swap(VUserInfo* other);

  // implements Message ----------------------------------------------

  inline VUserInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  VUserInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VUserInfo& from);
  void MergeFrom(const VUserInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VUserInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Desc = 2;
  bool has_desc() const;
  void clear_desc();
  static const int kDescFieldNumber = 2;
  const ::std::string& desc() const;
  void set_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_desc(::std::string&& value);
  #endif
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  ::std::string* mutable_desc();
  ::std::string* release_desc();
  void set_allocated_desc(::std::string* desc);

  // optional .FromCs.sKBuiltinstringT Icon = 3;
  bool has_icon() const;
  void clear_icon();
  static const int kIconFieldNumber = 3;
  const ::FromCs::sKBuiltinstringT& icon() const;
  ::FromCs::sKBuiltinstringT* mutable_icon();
  ::FromCs::sKBuiltinstringT* release_icon();
  void set_allocated_icon(::FromCs::sKBuiltinstringT* icon);

  // optional .FromCs.sKBuiltinstringT HDIcon = 4;
  bool has_hdicon() const;
  void clear_hdicon();
  static const int kHDIconFieldNumber = 4;
  const ::FromCs::sKBuiltinstringT& hdicon() const;
  ::FromCs::sKBuiltinstringT* mutable_hdicon();
  ::FromCs::sKBuiltinstringT* release_hdicon();
  void set_allocated_hdicon(::FromCs::sKBuiltinstringT* hdicon);

  // optional int32 ID = 1;
  bool has_id() const;
  void clear_id();
  static const int kIDFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.VUserInfo)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_desc();
  void clear_has_desc();
  void set_has_icon();
  void clear_has_icon();
  void set_has_hdicon();
  void clear_has_hdicon();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr desc_;
  ::FromCs::sKBuiltinstringT* icon_;
  ::FromCs::sKBuiltinstringT* hdicon_;
  ::google::protobuf::int32 id_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FBInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.FBInfo) */ {
 public:
  FBInfo();
  virtual ~FBInfo();

  FBInfo(const FBInfo& from);

  inline FBInfo& operator=(const FBInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FBInfo& default_instance();

  static inline const FBInfo* internal_default_instance() {
    return reinterpret_cast<const FBInfo*>(
               &_FBInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    123;

  void Swap(FBInfo* other);

  // implements Message ----------------------------------------------

  inline FBInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  FBInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FBInfo& from);
  void MergeFrom(const FBInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FBInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional int64 ID = 1;
  bool has_id() const;
  void clear_id();
  static const int kIDFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // optional int32 ImgKey = 3;
  bool has_imgkey() const;
  void clear_imgkey();
  static const int kImgKeyFieldNumber = 3;
  ::google::protobuf::int32 imgkey() const;
  void set_imgkey(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.FBInfo)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_name();
  void clear_has_name();
  void set_has_imgkey();
  void clear_has_imgkey();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int32 imgkey_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FriendObj : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.FriendObj) */ {
 public:
  FriendObj();
  virtual ~FriendObj();

  FriendObj(const FriendObj& from);

  inline FriendObj& operator=(const FriendObj& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendObj& default_instance();

  static inline const FriendObj* internal_default_instance() {
    return reinterpret_cast<const FriendObj*>(
               &_FriendObj_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    124;

  void Swap(FriendObj* other);

  // implements Message ----------------------------------------------

  inline FriendObj* New() const PROTOBUF_FINAL { return New(NULL); }

  FriendObj* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FriendObj& from);
  void MergeFrom(const FriendObj& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FriendObj* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Username = 1;
  bool has_username() const;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // optional string Nickname = 2;
  bool has_nickname() const;
  void clear_nickname();
  static const int kNicknameFieldNumber = 2;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  #if LANG_CXX11
  void set_nickname(::std::string&& value);
  #endif
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // optional string MobileMD5 = 3;
  bool has_mobilemd5() const;
  void clear_mobilemd5();
  static const int kMobileMD5FieldNumber = 3;
  const ::std::string& mobilemd5() const;
  void set_mobilemd5(const ::std::string& value);
  #if LANG_CXX11
  void set_mobilemd5(::std::string&& value);
  #endif
  void set_mobilemd5(const char* value);
  void set_mobilemd5(const char* value, size_t size);
  ::std::string* mutable_mobilemd5();
  ::std::string* release_mobilemd5();
  void set_allocated_mobilemd5(::std::string* mobilemd5);

  // optional string Province = 5;
  bool has_province() const;
  void clear_province();
  static const int kProvinceFieldNumber = 5;
  const ::std::string& province() const;
  void set_province(const ::std::string& value);
  #if LANG_CXX11
  void set_province(::std::string&& value);
  #endif
  void set_province(const char* value);
  void set_province(const char* value, size_t size);
  ::std::string* mutable_province();
  ::std::string* release_province();
  void set_allocated_province(::std::string* province);

  // optional string City = 6;
  bool has_city() const;
  void clear_city();
  static const int kCityFieldNumber = 6;
  const ::std::string& city() const;
  void set_city(const ::std::string& value);
  #if LANG_CXX11
  void set_city(::std::string&& value);
  #endif
  void set_city(const char* value);
  void set_city(const char* value, size_t size);
  ::std::string* mutable_city();
  ::std::string* release_city();
  void set_allocated_city(::std::string* city);

  // optional string Signature = 7;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 7;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_signature(::std::string&& value);
  #endif
  void set_signature(const char* value);
  void set_signature(const char* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // optional string Alias = 9;
  bool has_alias() const;
  void clear_alias();
  static const int kAliasFieldNumber = 9;
  const ::std::string& alias() const;
  void set_alias(const ::std::string& value);
  #if LANG_CXX11
  void set_alias(::std::string&& value);
  #endif
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  ::std::string* mutable_alias();
  ::std::string* release_alias();
  void set_allocated_alias(::std::string* alias);

  // optional string AlbumBGImgID = 13;
  bool has_albumbgimgid() const;
  void clear_albumbgimgid();
  static const int kAlbumBGImgIDFieldNumber = 13;
  const ::std::string& albumbgimgid() const;
  void set_albumbgimgid(const ::std::string& value);
  #if LANG_CXX11
  void set_albumbgimgid(::std::string&& value);
  #endif
  void set_albumbgimgid(const char* value);
  void set_albumbgimgid(const char* value, size_t size);
  ::std::string* mutable_albumbgimgid();
  ::std::string* release_albumbgimgid();
  void set_allocated_albumbgimgid(::std::string* albumbgimgid);

  // optional string Country = 15;
  bool has_country() const;
  void clear_country();
  static const int kCountryFieldNumber = 15;
  const ::std::string& country() const;
  void set_country(const ::std::string& value);
  #if LANG_CXX11
  void set_country(::std::string&& value);
  #endif
  void set_country(const char* value);
  void set_country(const char* value, size_t size);
  ::std::string* mutable_country();
  ::std::string* release_country();
  void set_allocated_country(::std::string* country);

  // optional string MyBrandList = 16;
  bool has_mybrandlist() const;
  void clear_mybrandlist();
  static const int kMyBrandListFieldNumber = 16;
  const ::std::string& mybrandlist() const;
  void set_mybrandlist(const ::std::string& value);
  #if LANG_CXX11
  void set_mybrandlist(::std::string&& value);
  #endif
  void set_mybrandlist(const char* value);
  void set_mybrandlist(const char* value, size_t size);
  ::std::string* mutable_mybrandlist();
  ::std::string* release_mybrandlist();
  void set_allocated_mybrandlist(::std::string* mybrandlist);

  // optional string BigHeadImgUrl = 18;
  bool has_bigheadimgurl() const;
  void clear_bigheadimgurl();
  static const int kBigHeadImgUrlFieldNumber = 18;
  const ::std::string& bigheadimgurl() const;
  void set_bigheadimgurl(const ::std::string& value);
  #if LANG_CXX11
  void set_bigheadimgurl(::std::string&& value);
  #endif
  void set_bigheadimgurl(const char* value);
  void set_bigheadimgurl(const char* value, size_t size);
  ::std::string* mutable_bigheadimgurl();
  ::std::string* release_bigheadimgurl();
  void set_allocated_bigheadimgurl(::std::string* bigheadimgurl);

  // optional string SmallHeadImgUrl = 19;
  bool has_smallheadimgurl() const;
  void clear_smallheadimgurl();
  static const int kSmallHeadImgUrlFieldNumber = 19;
  const ::std::string& smallheadimgurl() const;
  void set_smallheadimgurl(const ::std::string& value);
  #if LANG_CXX11
  void set_smallheadimgurl(::std::string&& value);
  #endif
  void set_smallheadimgurl(const char* value);
  void set_smallheadimgurl(const char* value, size_t size);
  ::std::string* mutable_smallheadimgurl();
  ::std::string* release_smallheadimgurl();
  void set_allocated_smallheadimgurl(::std::string* smallheadimgurl);

  // optional string Str20 = 20;
  bool has_str20() const;
  void clear_str20();
  static const int kStr20FieldNumber = 20;
  const ::std::string& str20() const;
  void set_str20(const ::std::string& value);
  #if LANG_CXX11
  void set_str20(::std::string&& value);
  #endif
  void set_str20(const char* value);
  void set_str20(const char* value, size_t size);
  ::std::string* mutable_str20();
  ::std::string* release_str20();
  void set_allocated_str20(::std::string* str20);

  // optional string Str21 = 21;
  bool has_str21() const;
  void clear_str21();
  static const int kStr21FieldNumber = 21;
  const ::std::string& str21() const;
  void set_str21(const ::std::string& value);
  #if LANG_CXX11
  void set_str21(::std::string&& value);
  #endif
  void set_str21(const char* value);
  void set_str21(const char* value, size_t size);
  ::std::string* mutable_str21();
  ::std::string* release_str21();
  void set_allocated_str21(::std::string* str21);

  // optional string Str22 = 22;
  bool has_str22() const;
  void clear_str22();
  static const int kStr22FieldNumber = 22;
  const ::std::string& str22() const;
  void set_str22(const ::std::string& value);
  #if LANG_CXX11
  void set_str22(::std::string&& value);
  #endif
  void set_str22(const char* value);
  void set_str22(const char* value, size_t size);
  ::std::string* mutable_str22();
  ::std::string* release_str22();
  void set_allocated_str22(::std::string* str22);

  // optional .FromCs.sKBuiltinstringT FBInfos = 10;
  bool has_fbinfos() const;
  void clear_fbinfos();
  static const int kFBInfosFieldNumber = 10;
  const ::FromCs::sKBuiltinstringT& fbinfos() const;
  ::FromCs::sKBuiltinstringT* mutable_fbinfos();
  ::FromCs::sKBuiltinstringT* release_fbinfos();
  void set_allocated_fbinfos(::FromCs::sKBuiltinstringT* fbinfos);

  // optional .FromCs.sKBuiltinstringT SnsUserInfo = 14;
  bool has_snsuserinfo() const;
  void clear_snsuserinfo();
  static const int kSnsUserInfoFieldNumber = 14;
  const ::FromCs::sKBuiltinstringT& snsuserinfo() const;
  ::FromCs::sKBuiltinstringT* mutable_snsuserinfo();
  ::FromCs::sKBuiltinstringT* release_snsuserinfo();
  void set_allocated_snsuserinfo(::FromCs::sKBuiltinstringT* snsuserinfo);

  // optional .FromCs.sKBuiltinstringT CustomizedInfo = 17;
  bool has_customizedinfo() const;
  void clear_customizedinfo();
  static const int kCustomizedInfoFieldNumber = 17;
  const ::FromCs::sKBuiltinstringT& customizedinfo() const;
  ::FromCs::sKBuiltinstringT* mutable_customizedinfo();
  ::FromCs::sKBuiltinstringT* release_customizedinfo();
  void set_allocated_customizedinfo(::FromCs::sKBuiltinstringT* customizedinfo);

  // optional int32 Sex = 4;
  bool has_sex() const;
  void clear_sex();
  static const int kSexFieldNumber = 4;
  ::google::protobuf::int32 sex() const;
  void set_sex(::google::protobuf::int32 value);

  // optional int32 PersonalCard = 8;
  bool has_personalcard() const;
  void clear_personalcard();
  static const int kPersonalCardFieldNumber = 8;
  ::google::protobuf::int32 personalcard() const;
  void set_personalcard(::google::protobuf::int32 value);

  // optional int32 AlbumFlag = 11;
  bool has_albumflag() const;
  void clear_albumflag();
  static const int kAlbumFlagFieldNumber = 11;
  ::google::protobuf::int32 albumflag() const;
  void set_albumflag(::google::protobuf::int32 value);

  // optional int32 AlbumStyle = 12;
  bool has_albumstyle() const;
  void clear_albumstyle();
  static const int kAlbumStyleFieldNumber = 12;
  ::google::protobuf::int32 albumstyle() const;
  void set_albumstyle(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.FriendObj)
 private:
  void set_has_username();
  void clear_has_username();
  void set_has_nickname();
  void clear_has_nickname();
  void set_has_mobilemd5();
  void clear_has_mobilemd5();
  void set_has_sex();
  void clear_has_sex();
  void set_has_province();
  void clear_has_province();
  void set_has_city();
  void clear_has_city();
  void set_has_signature();
  void clear_has_signature();
  void set_has_personalcard();
  void clear_has_personalcard();
  void set_has_alias();
  void clear_has_alias();
  void set_has_fbinfos();
  void clear_has_fbinfos();
  void set_has_albumflag();
  void clear_has_albumflag();
  void set_has_albumstyle();
  void clear_has_albumstyle();
  void set_has_albumbgimgid();
  void clear_has_albumbgimgid();
  void set_has_snsuserinfo();
  void clear_has_snsuserinfo();
  void set_has_country();
  void clear_has_country();
  void set_has_mybrandlist();
  void clear_has_mybrandlist();
  void set_has_customizedinfo();
  void clear_has_customizedinfo();
  void set_has_bigheadimgurl();
  void clear_has_bigheadimgurl();
  void set_has_smallheadimgurl();
  void clear_has_smallheadimgurl();
  void set_has_str20();
  void clear_has_str20();
  void set_has_str21();
  void clear_has_str21();
  void set_has_str22();
  void clear_has_str22();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::internal::ArenaStringPtr mobilemd5_;
  ::google::protobuf::internal::ArenaStringPtr province_;
  ::google::protobuf::internal::ArenaStringPtr city_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  ::google::protobuf::internal::ArenaStringPtr alias_;
  ::google::protobuf::internal::ArenaStringPtr albumbgimgid_;
  ::google::protobuf::internal::ArenaStringPtr country_;
  ::google::protobuf::internal::ArenaStringPtr mybrandlist_;
  ::google::protobuf::internal::ArenaStringPtr bigheadimgurl_;
  ::google::protobuf::internal::ArenaStringPtr smallheadimgurl_;
  ::google::protobuf::internal::ArenaStringPtr str20_;
  ::google::protobuf::internal::ArenaStringPtr str21_;
  ::google::protobuf::internal::ArenaStringPtr str22_;
  ::FromCs::sKBuiltinstringT* fbinfos_;
  ::FromCs::sKBuiltinstringT* snsuserinfo_;
  ::FromCs::sKBuiltinstringT* customizedinfo_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 personalcard_;
  ::google::protobuf::int32 albumflag_;
  ::google::protobuf::int32 albumstyle_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class userObject : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.userObject) */ {
 public:
  userObject();
  virtual ~userObject();

  userObject(const userObject& from);

  inline userObject& operator=(const userObject& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const userObject& default_instance();

  static inline const userObject* internal_default_instance() {
    return reinterpret_cast<const userObject*>(
               &_userObject_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    125;

  void Swap(userObject* other);

  // implements Message ----------------------------------------------

  inline userObject* New() const PROTOBUF_FINAL { return New(NULL); }

  userObject* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const userObject& from);
  void MergeFrom(const userObject& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(userObject* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Username = 1;
  bool has_username() const;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // optional string Nickname = 2;
  bool has_nickname() const;
  void clear_nickname();
  static const int kNicknameFieldNumber = 2;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  #if LANG_CXX11
  void set_nickname(::std::string&& value);
  #endif
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // optional string Content = 5;
  bool has_content() const;
  void clear_content();
  static const int kContentFieldNumber = 5;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // optional string ReplyUsername = 9;
  bool has_replyusername() const;
  void clear_replyusername();
  static const int kReplyUsernameFieldNumber = 9;
  const ::std::string& replyusername() const;
  void set_replyusername(const ::std::string& value);
  #if LANG_CXX11
  void set_replyusername(::std::string&& value);
  #endif
  void set_replyusername(const char* value);
  void set_replyusername(const char* value, size_t size);
  ::std::string* mutable_replyusername();
  ::std::string* release_replyusername();
  void set_allocated_replyusername(::std::string* replyusername);

  // optional int32 Source = 3;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 3;
  ::google::protobuf::int32 source() const;
  void set_source(::google::protobuf::int32 value);

  // optional int32 Type = 4;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // optional int32 CreateTime = 6;
  bool has_createtime() const;
  void clear_createtime();
  static const int kCreateTimeFieldNumber = 6;
  ::google::protobuf::int32 createtime() const;
  void set_createtime(::google::protobuf::int32 value);

  // optional int32 CommentId = 7;
  bool has_commentid() const;
  void clear_commentid();
  static const int kCommentIdFieldNumber = 7;
  ::google::protobuf::int32 commentid() const;
  void set_commentid(::google::protobuf::int32 value);

  // optional int32 ReplyCommentId = 8;
  bool has_replycommentid() const;
  void clear_replycommentid();
  static const int kReplyCommentIdFieldNumber = 8;
  ::google::protobuf::int32 replycommentid() const;
  void set_replycommentid(::google::protobuf::int32 value);

  // optional int32 IsNotRichText = 10;
  bool has_isnotrichtext() const;
  void clear_isnotrichtext();
  static const int kIsNotRichTextFieldNumber = 10;
  ::google::protobuf::int32 isnotrichtext() const;
  void set_isnotrichtext(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.userObject)
 private:
  void set_has_username();
  void clear_has_username();
  void set_has_nickname();
  void clear_has_nickname();
  void set_has_source();
  void clear_has_source();
  void set_has_type();
  void clear_has_type();
  void set_has_content();
  void clear_has_content();
  void set_has_createtime();
  void clear_has_createtime();
  void set_has_commentid();
  void clear_has_commentid();
  void set_has_replycommentid();
  void clear_has_replycommentid();
  void set_has_replyusername();
  void clear_has_replyusername();
  void set_has_isnotrichtext();
  void clear_has_isnotrichtext();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::internal::ArenaStringPtr replyusername_;
  ::google::protobuf::int32 source_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 createtime_;
  ::google::protobuf::int32 commentid_;
  ::google::protobuf::int32 replycommentid_;
  ::google::protobuf::int32 isnotrichtext_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GroupObject : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.GroupObject) */ {
 public:
  GroupObject();
  virtual ~GroupObject();

  GroupObject(const GroupObject& from);

  inline GroupObject& operator=(const GroupObject& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupObject& default_instance();

  static inline const GroupObject* internal_default_instance() {
    return reinterpret_cast<const GroupObject*>(
               &_GroupObject_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    126;

  void Swap(GroupObject* other);

  // implements Message ----------------------------------------------

  inline GroupObject* New() const PROTOBUF_FINAL { return New(NULL); }

  GroupObject* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GroupObject& from);
  void MergeFrom(const GroupObject& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GroupObject* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 GroupId = 1;
  bool has_groupid() const;
  void clear_groupid();
  static const int kGroupIdFieldNumber = 1;
  ::google::protobuf::int64 groupid() const;
  void set_groupid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:FromCs.GroupObject)
 private:
  void set_has_groupid();
  void clear_has_groupid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 groupid_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PageObject : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.PageObject) */ {
 public:
  PageObject();
  virtual ~PageObject();

  PageObject(const PageObject& from);

  inline PageObject& operator=(const PageObject& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PageObject& default_instance();

  static inline const PageObject* internal_default_instance() {
    return reinterpret_cast<const PageObject*>(
               &_PageObject_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    127;

  void Swap(PageObject* other);

  // implements Message ----------------------------------------------

  inline PageObject* New() const PROTOBUF_FINAL { return New(NULL); }

  PageObject* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PageObject& from);
  void MergeFrom(const PageObject& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PageObject* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Username = 2;
  bool has_username() const;
  void clear_username();
  static const int kUsernameFieldNumber = 2;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // optional string Nickname = 3;
  bool has_nickname() const;
  void clear_nickname();
  static const int kNicknameFieldNumber = 3;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  #if LANG_CXX11
  void set_nickname(::std::string&& value);
  #endif
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // optional string ReferUsername = 21;
  bool has_referusername() const;
  void clear_referusername();
  static const int kReferUsernameFieldNumber = 21;
  const ::std::string& referusername() const;
  void set_referusername(const ::std::string& value);
  #if LANG_CXX11
  void set_referusername(::std::string&& value);
  #endif
  void set_referusername(const char* value);
  void set_referusername(const char* value, size_t size);
  ::std::string* mutable_referusername();
  ::std::string* release_referusername();
  void set_allocated_referusername(::std::string* referusername);

  // optional .FromCs.sKBuiltinstringT ObjectDesc = 5;
  bool has_objectdesc() const;
  void clear_objectdesc();
  static const int kObjectDescFieldNumber = 5;
  const ::FromCs::sKBuiltinstringT& objectdesc() const;
  ::FromCs::sKBuiltinstringT* mutable_objectdesc();
  ::FromCs::sKBuiltinstringT* release_objectdesc();
  void set_allocated_objectdesc(::FromCs::sKBuiltinstringT* objectdesc);

  // optional .FromCs.sKBuiltinstringT likeUser_ = 9;
  bool has_likeuser_() const;
  void clear_likeuser_();
  static const int kLikeUserFieldNumber = 9;
  const ::FromCs::sKBuiltinstringT& likeuser_() const;
  ::FromCs::sKBuiltinstringT* mutable_likeuser_();
  ::FromCs::sKBuiltinstringT* release_likeuser_();
  void set_allocated_likeuser_(::FromCs::sKBuiltinstringT* likeuser_);

  // optional .FromCs.sKBuiltinstringT commentUser_ = 12;
  bool has_commentuser_() const;
  void clear_commentuser_();
  static const int kCommentUserFieldNumber = 12;
  const ::FromCs::sKBuiltinstringT& commentuser_() const;
  ::FromCs::sKBuiltinstringT* mutable_commentuser_();
  ::FromCs::sKBuiltinstringT* release_commentuser_();
  void set_allocated_commentuser_(::FromCs::sKBuiltinstringT* commentuser_);

  // optional .FromCs.sKBuiltinstringT withUser_ = 15;
  bool has_withuser_() const;
  void clear_withuser_();
  static const int kWithUserFieldNumber = 15;
  const ::FromCs::sKBuiltinstringT& withuser_() const;
  ::FromCs::sKBuiltinstringT* mutable_withuser_();
  ::FromCs::sKBuiltinstringT* release_withuser_();
  void set_allocated_withuser_(::FromCs::sKBuiltinstringT* withuser_);

  // optional .FromCs.sKBuiltinstringT group_ = 19;
  bool has_group_() const;
  void clear_group_();
  static const int kGroupFieldNumber = 19;
  const ::FromCs::sKBuiltinstringT& group_() const;
  ::FromCs::sKBuiltinstringT* mutable_group_();
  ::FromCs::sKBuiltinstringT* release_group_();
  void set_allocated_group_(::FromCs::sKBuiltinstringT* group_);

  // optional int64 Id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // optional int32 CreateTime = 4;
  bool has_createtime() const;
  void clear_createtime();
  static const int kCreateTimeFieldNumber = 4;
  ::google::protobuf::int32 createtime() const;
  void set_createtime(::google::protobuf::int32 value);

  // optional int32 LikeFlag = 6;
  bool has_likeflag() const;
  void clear_likeflag();
  static const int kLikeFlagFieldNumber = 6;
  ::google::protobuf::int32 likeflag() const;
  void set_likeflag(::google::protobuf::int32 value);

  // optional int32 LikeCount = 7;
  bool has_likecount() const;
  void clear_likecount();
  static const int kLikeCountFieldNumber = 7;
  ::google::protobuf::int32 likecount() const;
  void set_likecount(::google::protobuf::int32 value);

  // optional int32 LikeUserListCount = 8;
  bool has_likeuserlistcount() const;
  void clear_likeuserlistcount();
  static const int kLikeUserListCountFieldNumber = 8;
  ::google::protobuf::int32 likeuserlistcount() const;
  void set_likeuserlistcount(::google::protobuf::int32 value);

  // optional int32 CommentCount = 10;
  bool has_commentcount() const;
  void clear_commentcount();
  static const int kCommentCountFieldNumber = 10;
  ::google::protobuf::int32 commentcount() const;
  void set_commentcount(::google::protobuf::int32 value);

  // optional int32 CommentUserListCount = 11;
  bool has_commentuserlistcount() const;
  void clear_commentuserlistcount();
  static const int kCommentUserListCountFieldNumber = 11;
  ::google::protobuf::int32 commentuserlistcount() const;
  void set_commentuserlistcount(::google::protobuf::int32 value);

  // optional int32 WithUserNumb = 13;
  bool has_withusernumb() const;
  void clear_withusernumb();
  static const int kWithUserNumbFieldNumber = 13;
  ::google::protobuf::int32 withusernumb() const;
  void set_withusernumb(::google::protobuf::int32 value);

  // optional int32 WithUserListCount = 14;
  bool has_withuserlistcount() const;
  void clear_withuserlistcount();
  static const int kWithUserListCountFieldNumber = 14;
  ::google::protobuf::int32 withuserlistcount() const;
  void set_withuserlistcount(::google::protobuf::int32 value);

  // optional int32 ExtFlag = 16;
  bool has_extflag() const;
  void clear_extflag();
  static const int kExtFlagFieldNumber = 16;
  ::google::protobuf::int32 extflag() const;
  void set_extflag(::google::protobuf::int32 value);

  // optional int32 NoChange = 17;
  bool has_nochange() const;
  void clear_nochange();
  static const int kNoChangeFieldNumber = 17;
  ::google::protobuf::int32 nochange() const;
  void set_nochange(::google::protobuf::int32 value);

  // optional int32 GroupNumb = 18;
  bool has_groupnumb() const;
  void clear_groupnumb();
  static const int kGroupNumbFieldNumber = 18;
  ::google::protobuf::int32 groupnumb() const;
  void set_groupnumb(::google::protobuf::int32 value);

  // optional int32 IsNotRichText = 20;
  bool has_isnotrichtext() const;
  void clear_isnotrichtext();
  static const int kIsNotRichTextFieldNumber = 20;
  ::google::protobuf::int32 isnotrichtext() const;
  void set_isnotrichtext(::google::protobuf::int32 value);

  // optional int64 ReferId = 22;
  bool has_referid() const;
  void clear_referid();
  static const int kReferIdFieldNumber = 22;
  ::google::protobuf::int64 referid() const;
  void set_referid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:FromCs.PageObject)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_username();
  void clear_has_username();
  void set_has_nickname();
  void clear_has_nickname();
  void set_has_createtime();
  void clear_has_createtime();
  void set_has_objectdesc();
  void clear_has_objectdesc();
  void set_has_likeflag();
  void clear_has_likeflag();
  void set_has_likecount();
  void clear_has_likecount();
  void set_has_likeuserlistcount();
  void clear_has_likeuserlistcount();
  void set_has_likeuser_();
  void clear_has_likeuser_();
  void set_has_commentcount();
  void clear_has_commentcount();
  void set_has_commentuserlistcount();
  void clear_has_commentuserlistcount();
  void set_has_commentuser_();
  void clear_has_commentuser_();
  void set_has_withusernumb();
  void clear_has_withusernumb();
  void set_has_withuserlistcount();
  void clear_has_withuserlistcount();
  void set_has_withuser_();
  void clear_has_withuser_();
  void set_has_extflag();
  void clear_has_extflag();
  void set_has_nochange();
  void clear_has_nochange();
  void set_has_groupnumb();
  void clear_has_groupnumb();
  void set_has_group_();
  void clear_has_group_();
  void set_has_isnotrichtext();
  void clear_has_isnotrichtext();
  void set_has_referusername();
  void clear_has_referusername();
  void set_has_referid();
  void clear_has_referid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::internal::ArenaStringPtr referusername_;
  ::FromCs::sKBuiltinstringT* objectdesc_;
  ::FromCs::sKBuiltinstringT* likeuser__;
  ::FromCs::sKBuiltinstringT* commentuser__;
  ::FromCs::sKBuiltinstringT* withuser__;
  ::FromCs::sKBuiltinstringT* group__;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int32 createtime_;
  ::google::protobuf::int32 likeflag_;
  ::google::protobuf::int32 likecount_;
  ::google::protobuf::int32 likeuserlistcount_;
  ::google::protobuf::int32 commentcount_;
  ::google::protobuf::int32 commentuserlistcount_;
  ::google::protobuf::int32 withusernumb_;
  ::google::protobuf::int32 withuserlistcount_;
  ::google::protobuf::int32 extflag_;
  ::google::protobuf::int32 nochange_;
  ::google::protobuf::int32 groupnumb_;
  ::google::protobuf::int32 isnotrichtext_;
  ::google::protobuf::int64 referid_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GeneralControlBitSet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.GeneralControlBitSet) */ {
 public:
  GeneralControlBitSet();
  virtual ~GeneralControlBitSet();

  GeneralControlBitSet(const GeneralControlBitSet& from);

  inline GeneralControlBitSet& operator=(const GeneralControlBitSet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GeneralControlBitSet& default_instance();

  static inline const GeneralControlBitSet* internal_default_instance() {
    return reinterpret_cast<const GeneralControlBitSet*>(
               &_GeneralControlBitSet_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    128;

  void Swap(GeneralControlBitSet* other);

  // implements Message ----------------------------------------------

  inline GeneralControlBitSet* New() const PROTOBUF_FINAL { return New(NULL); }

  GeneralControlBitSet* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GeneralControlBitSet& from);
  void MergeFrom(const GeneralControlBitSet& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GeneralControlBitSet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 BitValue = 1;
  bool has_bitvalue() const;
  void clear_bitvalue();
  static const int kBitValueFieldNumber = 1;
  ::google::protobuf::int32 bitvalue() const;
  void set_bitvalue(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.GeneralControlBitSet)
 private:
  void set_has_bitvalue();
  void clear_has_bitvalue();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 bitvalue_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class JSAPIPermission : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.JSAPIPermission) */ {
 public:
  JSAPIPermission();
  virtual ~JSAPIPermission();

  JSAPIPermission(const JSAPIPermission& from);

  inline JSAPIPermission& operator=(const JSAPIPermission& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JSAPIPermission& default_instance();

  static inline const JSAPIPermission* internal_default_instance() {
    return reinterpret_cast<const JSAPIPermission*>(
               &_JSAPIPermission_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    129;

  void Swap(JSAPIPermission* other);

  // implements Message ----------------------------------------------

  inline JSAPIPermission* New() const PROTOBUF_FINAL { return New(NULL); }

  JSAPIPermission* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const JSAPIPermission& from);
  void MergeFrom(const JSAPIPermission& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(JSAPIPermission* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 BitValue = 1;
  bool has_bitvalue() const;
  void clear_bitvalue();
  static const int kBitValueFieldNumber = 1;
  ::google::protobuf::int32 bitvalue() const;
  void set_bitvalue(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.JSAPIPermission)
 private:
  void set_has_bitvalue();
  void clear_has_bitvalue();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 bitvalue_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TwitterInfoObj : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.TwitterInfoObj) */ {
 public:
  TwitterInfoObj();
  virtual ~TwitterInfoObj();

  TwitterInfoObj(const TwitterInfoObj& from);

  inline TwitterInfoObj& operator=(const TwitterInfoObj& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TwitterInfoObj& default_instance();

  static inline const TwitterInfoObj* internal_default_instance() {
    return reinterpret_cast<const TwitterInfoObj*>(
               &_TwitterInfoObj_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    130;

  void Swap(TwitterInfoObj* other);

  // implements Message ----------------------------------------------

  inline TwitterInfoObj* New() const PROTOBUF_FINAL { return New(NULL); }

  TwitterInfoObj* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TwitterInfoObj& from);
  void MergeFrom(const TwitterInfoObj& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TwitterInfoObj* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string OauthToken = 1;
  bool has_oauthtoken() const;
  void clear_oauthtoken();
  static const int kOauthTokenFieldNumber = 1;
  const ::std::string& oauthtoken() const;
  void set_oauthtoken(const ::std::string& value);
  #if LANG_CXX11
  void set_oauthtoken(::std::string&& value);
  #endif
  void set_oauthtoken(const char* value);
  void set_oauthtoken(const char* value, size_t size);
  ::std::string* mutable_oauthtoken();
  ::std::string* release_oauthtoken();
  void set_allocated_oauthtoken(::std::string* oauthtoken);

  // optional string OauthTokenSecret = 2;
  bool has_oauthtokensecret() const;
  void clear_oauthtokensecret();
  static const int kOauthTokenSecretFieldNumber = 2;
  const ::std::string& oauthtokensecret() const;
  void set_oauthtokensecret(const ::std::string& value);
  #if LANG_CXX11
  void set_oauthtokensecret(::std::string&& value);
  #endif
  void set_oauthtokensecret(const char* value);
  void set_oauthtokensecret(const char* value, size_t size);
  ::std::string* mutable_oauthtokensecret();
  ::std::string* release_oauthtokensecret();
  void set_allocated_oauthtokensecret(::std::string* oauthtokensecret);

  // @@protoc_insertion_point(class_scope:FromCs.TwitterInfoObj)
 private:
  void set_has_oauthtoken();
  void clear_has_oauthtoken();
  void set_has_oauthtokensecret();
  void clear_has_oauthtokensecret();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr oauthtoken_;
  ::google::protobuf::internal::ArenaStringPtr oauthtokensecret_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BufferUrlObj : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.BufferUrlObj) */ {
 public:
  BufferUrlObj();
  virtual ~BufferUrlObj();

  BufferUrlObj(const BufferUrlObj& from);

  inline BufferUrlObj& operator=(const BufferUrlObj& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BufferUrlObj& default_instance();

  static inline const BufferUrlObj* internal_default_instance() {
    return reinterpret_cast<const BufferUrlObj*>(
               &_BufferUrlObj_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    131;

  void Swap(BufferUrlObj* other);

  // implements Message ----------------------------------------------

  inline BufferUrlObj* New() const PROTOBUF_FINAL { return New(NULL); }

  BufferUrlObj* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BufferUrlObj& from);
  void MergeFrom(const BufferUrlObj& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BufferUrlObj* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Url = 1;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 1;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional int32 Type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.BufferUrlObj)
 private:
  void set_has_url();
  void clear_has_url();
  void set_has_type();
  void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::int32 type_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AppMsgObject : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.AppMsgObject) */ {
 public:
  AppMsgObject();
  virtual ~AppMsgObject();

  AppMsgObject(const AppMsgObject& from);

  inline AppMsgObject& operator=(const AppMsgObject& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AppMsgObject& default_instance();

  static inline const AppMsgObject* internal_default_instance() {
    return reinterpret_cast<const AppMsgObject*>(
               &_AppMsgObject_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    132;

  void Swap(AppMsgObject* other);

  // implements Message ----------------------------------------------

  inline AppMsgObject* New() const PROTOBUF_FINAL { return New(NULL); }

  AppMsgObject* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AppMsgObject& from);
  void MergeFrom(const AppMsgObject& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AppMsgObject* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string FromUserName = 1;
  bool has_fromusername() const;
  void clear_fromusername();
  static const int kFromUserNameFieldNumber = 1;
  const ::std::string& fromusername() const;
  void set_fromusername(const ::std::string& value);
  #if LANG_CXX11
  void set_fromusername(::std::string&& value);
  #endif
  void set_fromusername(const char* value);
  void set_fromusername(const char* value, size_t size);
  ::std::string* mutable_fromusername();
  ::std::string* release_fromusername();
  void set_allocated_fromusername(::std::string* fromusername);

  // optional string AppId = 2;
  bool has_appid() const;
  void clear_appid();
  static const int kAppIdFieldNumber = 2;
  const ::std::string& appid() const;
  void set_appid(const ::std::string& value);
  #if LANG_CXX11
  void set_appid(::std::string&& value);
  #endif
  void set_appid(const char* value);
  void set_appid(const char* value, size_t size);
  ::std::string* mutable_appid();
  ::std::string* release_appid();
  void set_allocated_appid(::std::string* appid);

  // optional string ToUsername = 4;
  bool has_tousername() const;
  void clear_tousername();
  static const int kToUsernameFieldNumber = 4;
  const ::std::string& tousername() const;
  void set_tousername(const ::std::string& value);
  #if LANG_CXX11
  void set_tousername(::std::string&& value);
  #endif
  void set_tousername(const char* value);
  void set_tousername(const char* value, size_t size);
  ::std::string* mutable_tousername();
  ::std::string* release_tousername();
  void set_allocated_tousername(::std::string* tousername);

  // optional string Content = 6;
  bool has_content() const;
  void clear_content();
  static const int kContentFieldNumber = 6;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // optional string ClientMsgId = 8;
  bool has_clientmsgid() const;
  void clear_clientmsgid();
  static const int kClientMsgIdFieldNumber = 8;
  const ::std::string& clientmsgid() const;
  void set_clientmsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_clientmsgid(::std::string&& value);
  #endif
  void set_clientmsgid(const char* value);
  void set_clientmsgid(const char* value, size_t size);
  ::std::string* mutable_clientmsgid();
  ::std::string* release_clientmsgid();
  void set_allocated_clientmsgid(::std::string* clientmsgid);

  // optional string MsgSource = 12;
  bool has_msgsource() const;
  void clear_msgsource();
  static const int kMsgSourceFieldNumber = 12;
  const ::std::string& msgsource() const;
  void set_msgsource(const ::std::string& value);
  #if LANG_CXX11
  void set_msgsource(::std::string&& value);
  #endif
  void set_msgsource(const char* value);
  void set_msgsource(const char* value, size_t size);
  ::std::string* mutable_msgsource();
  ::std::string* release_msgsource();
  void set_allocated_msgsource(::std::string* msgsource);

  // optional .FromCs.sKBuiltinstringT Thumb = 9;
  bool has_thumb() const;
  void clear_thumb();
  static const int kThumbFieldNumber = 9;
  const ::FromCs::sKBuiltinstringT& thumb() const;
  ::FromCs::sKBuiltinstringT* mutable_thumb();
  ::FromCs::sKBuiltinstringT* release_thumb();
  void set_allocated_thumb(::FromCs::sKBuiltinstringT* thumb);

  // optional int32 SdkVersion = 3;
  bool has_sdkversion() const;
  void clear_sdkversion();
  static const int kSdkVersionFieldNumber = 3;
  ::google::protobuf::int32 sdkversion() const;
  void set_sdkversion(::google::protobuf::int32 value);

  // optional int32 Type = 5;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // optional int32 CreateTime = 7;
  bool has_createtime() const;
  void clear_createtime();
  static const int kCreateTimeFieldNumber = 7;
  ::google::protobuf::int32 createtime() const;
  void set_createtime(::google::protobuf::int32 value);

  // optional int32 Source = 10;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 10;
  ::google::protobuf::int32 source() const;
  void set_source(::google::protobuf::int32 value);

  // optional int32 RemindId = 11;
  bool has_remindid() const;
  void clear_remindid();
  static const int kRemindIdFieldNumber = 11;
  ::google::protobuf::int32 remindid() const;
  void set_remindid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.AppMsgObject)
 private:
  void set_has_fromusername();
  void clear_has_fromusername();
  void set_has_appid();
  void clear_has_appid();
  void set_has_sdkversion();
  void clear_has_sdkversion();
  void set_has_tousername();
  void clear_has_tousername();
  void set_has_type();
  void clear_has_type();
  void set_has_content();
  void clear_has_content();
  void set_has_createtime();
  void clear_has_createtime();
  void set_has_clientmsgid();
  void clear_has_clientmsgid();
  void set_has_thumb();
  void clear_has_thumb();
  void set_has_source();
  void clear_has_source();
  void set_has_remindid();
  void clear_has_remindid();
  void set_has_msgsource();
  void clear_has_msgsource();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr fromusername_;
  ::google::protobuf::internal::ArenaStringPtr appid_;
  ::google::protobuf::internal::ArenaStringPtr tousername_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::internal::ArenaStringPtr clientmsgid_;
  ::google::protobuf::internal::ArenaStringPtr msgsource_;
  ::FromCs::sKBuiltinstringT* thumb_;
  ::google::protobuf::int32 sdkversion_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 createtime_;
  ::google::protobuf::int32 source_;
  ::google::protobuf::int32 remindid_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class removeFriendObject : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.removeFriendObject) */ {
 public:
  removeFriendObject();
  virtual ~removeFriendObject();

  removeFriendObject(const removeFriendObject& from);

  inline removeFriendObject& operator=(const removeFriendObject& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const removeFriendObject& default_instance();

  static inline const removeFriendObject* internal_default_instance() {
    return reinterpret_cast<const removeFriendObject*>(
               &_removeFriendObject_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    133;

  void Swap(removeFriendObject* other);

  // implements Message ----------------------------------------------

  inline removeFriendObject* New() const PROTOBUF_FINAL { return New(NULL); }

  removeFriendObject* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const removeFriendObject& from);
  void MergeFrom(const removeFriendObject& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(removeFriendObject* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .FromCs.sKBuiltinstringT UserName = 1;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 1;
  const ::FromCs::sKBuiltinstringT& username() const;
  ::FromCs::sKBuiltinstringT* mutable_username();
  ::FromCs::sKBuiltinstringT* release_username();
  void set_allocated_username(::FromCs::sKBuiltinstringT* username);

  // @@protoc_insertion_point(class_scope:FromCs.removeFriendObject)
 private:
  void set_has_username();
  void clear_has_username();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::FromCs::sKBuiltinstringT* username_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShakeGetObj : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.ShakeGetObj) */ {
 public:
  ShakeGetObj();
  virtual ~ShakeGetObj();

  ShakeGetObj(const ShakeGetObj& from);

  inline ShakeGetObj& operator=(const ShakeGetObj& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShakeGetObj& default_instance();

  static inline const ShakeGetObj* internal_default_instance() {
    return reinterpret_cast<const ShakeGetObj*>(
               &_ShakeGetObj_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    134;

  void Swap(ShakeGetObj* other);

  // implements Message ----------------------------------------------

  inline ShakeGetObj* New() const PROTOBUF_FINAL { return New(NULL); }

  ShakeGetObj* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ShakeGetObj& from);
  void MergeFrom(const ShakeGetObj& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ShakeGetObj* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string UserName = 1;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // optional string NickName = 2;
  bool has_nickname() const;
  void clear_nickname();
  static const int kNickNameFieldNumber = 2;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  #if LANG_CXX11
  void set_nickname(::std::string&& value);
  #endif
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // optional string Province = 3;
  bool has_province() const;
  void clear_province();
  static const int kProvinceFieldNumber = 3;
  const ::std::string& province() const;
  void set_province(const ::std::string& value);
  #if LANG_CXX11
  void set_province(::std::string&& value);
  #endif
  void set_province(const char* value);
  void set_province(const char* value, size_t size);
  ::std::string* mutable_province();
  ::std::string* release_province();
  void set_allocated_province(::std::string* province);

  // optional string City = 4;
  bool has_city() const;
  void clear_city();
  static const int kCityFieldNumber = 4;
  const ::std::string& city() const;
  void set_city(const ::std::string& value);
  #if LANG_CXX11
  void set_city(::std::string&& value);
  #endif
  void set_city(const char* value);
  void set_city(const char* value, size_t size);
  ::std::string* mutable_city();
  ::std::string* release_city();
  void set_allocated_city(::std::string* city);

  // optional string Signature = 5;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 5;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_signature(::std::string&& value);
  #endif
  void set_signature(const char* value);
  void set_signature(const char* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // optional string Distance = 6;
  bool has_distance() const;
  void clear_distance();
  static const int kDistanceFieldNumber = 6;
  const ::std::string& distance() const;
  void set_distance(const ::std::string& value);
  #if LANG_CXX11
  void set_distance(::std::string&& value);
  #endif
  void set_distance(const char* value);
  void set_distance(const char* value, size_t size);
  ::std::string* mutable_distance();
  ::std::string* release_distance();
  void set_allocated_distance(::std::string* distance);

  // optional string Weibo = 12;
  bool has_weibo() const;
  void clear_weibo();
  static const int kWeiboFieldNumber = 12;
  const ::std::string& weibo() const;
  void set_weibo(const ::std::string& value);
  #if LANG_CXX11
  void set_weibo(::std::string&& value);
  #endif
  void set_weibo(const char* value);
  void set_weibo(const char* value, size_t size);
  ::std::string* mutable_weibo();
  ::std::string* release_weibo();
  void set_allocated_weibo(::std::string* weibo);

  // optional string WeiboNickname = 13;
  bool has_weibonickname() const;
  void clear_weibonickname();
  static const int kWeiboNicknameFieldNumber = 13;
  const ::std::string& weibonickname() const;
  void set_weibonickname(const ::std::string& value);
  #if LANG_CXX11
  void set_weibonickname(::std::string&& value);
  #endif
  void set_weibonickname(const char* value);
  void set_weibonickname(const char* value, size_t size);
  ::std::string* mutable_weibonickname();
  ::std::string* release_weibonickname();
  void set_allocated_weibonickname(::std::string* weibonickname);

  // optional string VerifyInfo = 16;
  bool has_verifyinfo() const;
  void clear_verifyinfo();
  static const int kVerifyInfoFieldNumber = 16;
  const ::std::string& verifyinfo() const;
  void set_verifyinfo(const ::std::string& value);
  #if LANG_CXX11
  void set_verifyinfo(::std::string&& value);
  #endif
  void set_verifyinfo(const char* value);
  void set_verifyinfo(const char* value, size_t size);
  ::std::string* mutable_verifyinfo();
  ::std::string* release_verifyinfo();
  void set_allocated_verifyinfo(::std::string* verifyinfo);

  // optional string VerifyContent = 17;
  bool has_verifycontent() const;
  void clear_verifycontent();
  static const int kVerifyContentFieldNumber = 17;
  const ::std::string& verifycontent() const;
  void set_verifycontent(const ::std::string& value);
  #if LANG_CXX11
  void set_verifycontent(::std::string&& value);
  #endif
  void set_verifycontent(const char* value);
  void set_verifycontent(const char* value, size_t size);
  ::std::string* mutable_verifycontent();
  ::std::string* release_verifycontent();
  void set_allocated_verifycontent(::std::string* verifycontent);

  // optional string Country = 23;
  bool has_country() const;
  void clear_country();
  static const int kCountryFieldNumber = 23;
  const ::std::string& country() const;
  void set_country(const ::std::string& value);
  #if LANG_CXX11
  void set_country(::std::string&& value);
  #endif
  void set_country(const char* value);
  void set_country(const char* value, size_t size);
  ::std::string* mutable_country();
  ::std::string* release_country();
  void set_allocated_country(::std::string* country);

  // optional string BigHeadImgUrl = 24;
  bool has_bigheadimgurl() const;
  void clear_bigheadimgurl();
  static const int kBigHeadImgUrlFieldNumber = 24;
  const ::std::string& bigheadimgurl() const;
  void set_bigheadimgurl(const ::std::string& value);
  #if LANG_CXX11
  void set_bigheadimgurl(::std::string&& value);
  #endif
  void set_bigheadimgurl(const char* value);
  void set_bigheadimgurl(const char* value, size_t size);
  ::std::string* mutable_bigheadimgurl();
  ::std::string* release_bigheadimgurl();
  void set_allocated_bigheadimgurl(::std::string* bigheadimgurl);

  // optional string SmallHeadImgUrl = 25;
  bool has_smallheadimgurl() const;
  void clear_smallheadimgurl();
  static const int kSmallHeadImgUrlFieldNumber = 25;
  const ::std::string& smallheadimgurl() const;
  void set_smallheadimgurl(const ::std::string& value);
  #if LANG_CXX11
  void set_smallheadimgurl(::std::string&& value);
  #endif
  void set_smallheadimgurl(const char* value);
  void set_smallheadimgurl(const char* value, size_t size);
  ::std::string* mutable_smallheadimgurl();
  ::std::string* release_smallheadimgurl();
  void set_allocated_smallheadimgurl(::std::string* smallheadimgurl);

  // optional string MyBrandList = 26;
  bool has_mybrandlist() const;
  void clear_mybrandlist();
  static const int kMyBrandListFieldNumber = 26;
  const ::std::string& mybrandlist() const;
  void set_mybrandlist(const ::std::string& value);
  #if LANG_CXX11
  void set_mybrandlist(::std::string&& value);
  #endif
  void set_mybrandlist(const char* value);
  void set_mybrandlist(const char* value, size_t size);
  ::std::string* mutable_mybrandlist();
  ::std::string* release_mybrandlist();
  void set_allocated_mybrandlist(::std::string* mybrandlist);

  // optional .FromCs.sKBuiltinstringT ImgBuffer = 10;
  bool has_imgbuffer() const;
  void clear_imgbuffer();
  static const int kImgBufferFieldNumber = 10;
  const ::FromCs::sKBuiltinstringT& imgbuffer() const;
  ::FromCs::sKBuiltinstringT* mutable_imgbuffer();
  ::FromCs::sKBuiltinstringT* release_imgbuffer();
  void set_allocated_imgbuffer(::FromCs::sKBuiltinstringT* imgbuffer);

  // optional .FromCs.sKBuiltinstringT SnsUserInfo = 22;
  bool has_snsuserinfo() const;
  void clear_snsuserinfo();
  static const int kSnsUserInfoFieldNumber = 22;
  const ::FromCs::sKBuiltinstringT& snsuserinfo() const;
  ::FromCs::sKBuiltinstringT* mutable_snsuserinfo();
  ::FromCs::sKBuiltinstringT* release_snsuserinfo();
  void set_allocated_snsuserinfo(::FromCs::sKBuiltinstringT* snsuserinfo);

  // optional .FromCs.sKBuiltinstringT CustomizedInfo = 27;
  bool has_customizedinfo() const;
  void clear_customizedinfo();
  static const int kCustomizedInfoFieldNumber = 27;
  const ::FromCs::sKBuiltinstringT& customizedinfo() const;
  ::FromCs::sKBuiltinstringT* mutable_customizedinfo();
  ::FromCs::sKBuiltinstringT* release_customizedinfo();
  void set_allocated_customizedinfo(::FromCs::sKBuiltinstringT* customizedinfo);

  // optional int32 Sex = 7;
  bool has_sex() const;
  void clear_sex();
  static const int kSexFieldNumber = 7;
  ::google::protobuf::int32 sex() const;
  void set_sex(::google::protobuf::int32 value);

  // optional int32 ImgStatus = 8;
  bool has_imgstatus() const;
  void clear_imgstatus();
  static const int kImgStatusFieldNumber = 8;
  ::google::protobuf::int32 imgstatus() const;
  void set_imgstatus(::google::protobuf::int32 value);

  // optional int32 HasHDImg = 9;
  bool has_hashdimg() const;
  void clear_hashdimg();
  static const int kHasHDImgFieldNumber = 9;
  ::google::protobuf::int32 hashdimg() const;
  void set_hashdimg(::google::protobuf::int32 value);

  // optional int32 NumDistance = 11;
  bool has_numdistance() const;
  void clear_numdistance();
  static const int kNumDistanceFieldNumber = 11;
  ::google::protobuf::int32 numdistance() const;
  void set_numdistance(::google::protobuf::int32 value);

  // optional int32 WeiboFlag = 14;
  bool has_weiboflag() const;
  void clear_weiboflag();
  static const int kWeiboFlagFieldNumber = 14;
  ::google::protobuf::int32 weiboflag() const;
  void set_weiboflag(::google::protobuf::int32 value);

  // optional int32 VerifyFlag = 15;
  bool has_verifyflag() const;
  void clear_verifyflag();
  static const int kVerifyFlagFieldNumber = 15;
  ::google::protobuf::int32 verifyflag() const;
  void set_verifyflag(::google::protobuf::int32 value);

  // optional int32 HeadImgVersion = 21;
  bool has_headimgversion() const;
  void clear_headimgversion();
  static const int kHeadImgVersionFieldNumber = 21;
  ::google::protobuf::int32 headimgversion() const;
  void set_headimgversion(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.ShakeGetObj)
 private:
  void set_has_username();
  void clear_has_username();
  void set_has_nickname();
  void clear_has_nickname();
  void set_has_province();
  void clear_has_province();
  void set_has_city();
  void clear_has_city();
  void set_has_signature();
  void clear_has_signature();
  void set_has_distance();
  void clear_has_distance();
  void set_has_sex();
  void clear_has_sex();
  void set_has_imgstatus();
  void clear_has_imgstatus();
  void set_has_hashdimg();
  void clear_has_hashdimg();
  void set_has_imgbuffer();
  void clear_has_imgbuffer();
  void set_has_numdistance();
  void clear_has_numdistance();
  void set_has_weibo();
  void clear_has_weibo();
  void set_has_weibonickname();
  void clear_has_weibonickname();
  void set_has_weiboflag();
  void clear_has_weiboflag();
  void set_has_verifyflag();
  void clear_has_verifyflag();
  void set_has_verifyinfo();
  void clear_has_verifyinfo();
  void set_has_verifycontent();
  void clear_has_verifycontent();
  void set_has_headimgversion();
  void clear_has_headimgversion();
  void set_has_snsuserinfo();
  void clear_has_snsuserinfo();
  void set_has_country();
  void clear_has_country();
  void set_has_bigheadimgurl();
  void clear_has_bigheadimgurl();
  void set_has_smallheadimgurl();
  void clear_has_smallheadimgurl();
  void set_has_mybrandlist();
  void clear_has_mybrandlist();
  void set_has_customizedinfo();
  void clear_has_customizedinfo();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::internal::ArenaStringPtr province_;
  ::google::protobuf::internal::ArenaStringPtr city_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  ::google::protobuf::internal::ArenaStringPtr distance_;
  ::google::protobuf::internal::ArenaStringPtr weibo_;
  ::google::protobuf::internal::ArenaStringPtr weibonickname_;
  ::google::protobuf::internal::ArenaStringPtr verifyinfo_;
  ::google::protobuf::internal::ArenaStringPtr verifycontent_;
  ::google::protobuf::internal::ArenaStringPtr country_;
  ::google::protobuf::internal::ArenaStringPtr bigheadimgurl_;
  ::google::protobuf::internal::ArenaStringPtr smallheadimgurl_;
  ::google::protobuf::internal::ArenaStringPtr mybrandlist_;
  ::FromCs::sKBuiltinstringT* imgbuffer_;
  ::FromCs::sKBuiltinstringT* snsuserinfo_;
  ::FromCs::sKBuiltinstringT* customizedinfo_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 imgstatus_;
  ::google::protobuf::int32 hashdimg_;
  ::google::protobuf::int32 numdistance_;
  ::google::protobuf::int32 weiboflag_;
  ::google::protobuf::int32 verifyflag_;
  ::google::protobuf::int32 headimgversion_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CardInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.CardInfo) */ {
 public:
  CardInfo();
  virtual ~CardInfo();

  CardInfo(const CardInfo& from);

  inline CardInfo& operator=(const CardInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CardInfo& default_instance();

  static inline const CardInfo* internal_default_instance() {
    return reinterpret_cast<const CardInfo*>(
               &_CardInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    135;

  void Swap(CardInfo* other);

  // implements Message ----------------------------------------------

  inline CardInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  CardInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CardInfo& from);
  void MergeFrom(const CardInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CardInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string CardID = 1;
  bool has_cardid() const;
  void clear_cardid();
  static const int kCardIDFieldNumber = 1;
  const ::std::string& cardid() const;
  void set_cardid(const ::std::string& value);
  #if LANG_CXX11
  void set_cardid(::std::string&& value);
  #endif
  void set_cardid(const char* value);
  void set_cardid(const char* value, size_t size);
  ::std::string* mutable_cardid();
  ::std::string* release_cardid();
  void set_allocated_cardid(::std::string* cardid);

  // optional int32 Seq = 2;
  bool has_seq() const;
  void clear_seq();
  static const int kSeqFieldNumber = 2;
  ::google::protobuf::int32 seq() const;
  void set_seq(::google::protobuf::int32 value);

  // optional int32 Itme3 = 3;
  bool has_itme3() const;
  void clear_itme3();
  static const int kItme3FieldNumber = 3;
  ::google::protobuf::int32 itme3() const;
  void set_itme3(::google::protobuf::int32 value);

  // optional int32 Itme4 = 4;
  bool has_itme4() const;
  void clear_itme4();
  static const int kItme4FieldNumber = 4;
  ::google::protobuf::int32 itme4() const;
  void set_itme4(::google::protobuf::int32 value);

  // optional int32 Itme5 = 5;
  bool has_itme5() const;
  void clear_itme5();
  static const int kItme5FieldNumber = 5;
  ::google::protobuf::int32 itme5() const;
  void set_itme5(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.CardInfo)
 private:
  void set_has_cardid();
  void clear_has_cardid();
  void set_has_seq();
  void clear_has_seq();
  void set_has_itme3();
  void clear_has_itme3();
  void set_has_itme4();
  void clear_has_itme4();
  void set_has_itme5();
  void clear_has_itme5();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr cardid_;
  ::google::protobuf::int32 seq_;
  ::google::protobuf::int32 itme3_;
  ::google::protobuf::int32 itme4_;
  ::google::protobuf::int32 itme5_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChatRoomItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.ChatRoomItem) */ {
 public:
  ChatRoomItem();
  virtual ~ChatRoomItem();

  ChatRoomItem(const ChatRoomItem& from);

  inline ChatRoomItem& operator=(const ChatRoomItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatRoomItem& default_instance();

  static inline const ChatRoomItem* internal_default_instance() {
    return reinterpret_cast<const ChatRoomItem*>(
               &_ChatRoomItem_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    136;

  void Swap(ChatRoomItem* other);

  // implements Message ----------------------------------------------

  inline ChatRoomItem* New() const PROTOBUF_FINAL { return New(NULL); }

  ChatRoomItem* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChatRoomItem& from);
  void MergeFrom(const ChatRoomItem& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChatRoomItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .FromCs.sKBuiltinstringT MemberName = 1;
  bool has_membername() const;
  void clear_membername();
  static const int kMemberNameFieldNumber = 1;
  const ::FromCs::sKBuiltinstringT& membername() const;
  ::FromCs::sKBuiltinstringT* mutable_membername();
  ::FromCs::sKBuiltinstringT* release_membername();
  void set_allocated_membername(::FromCs::sKBuiltinstringT* membername);

  // @@protoc_insertion_point(class_scope:FromCs.ChatRoomItem)
 private:
  void set_has_membername();
  void clear_has_membername();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::FromCs::sKBuiltinstringT* membername_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MemberInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.MemberInfo) */ {
 public:
  MemberInfo();
  virtual ~MemberInfo();

  MemberInfo(const MemberInfo& from);

  inline MemberInfo& operator=(const MemberInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MemberInfo& default_instance();

  static inline const MemberInfo* internal_default_instance() {
    return reinterpret_cast<const MemberInfo*>(
               &_MemberInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    137;

  void Swap(MemberInfo* other);

  // implements Message ----------------------------------------------

  inline MemberInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  MemberInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MemberInfo& from);
  void MergeFrom(const MemberInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MemberInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Province = 11;
  bool has_province() const;
  void clear_province();
  static const int kProvinceFieldNumber = 11;
  const ::std::string& province() const;
  void set_province(const ::std::string& value);
  #if LANG_CXX11
  void set_province(::std::string&& value);
  #endif
  void set_province(const char* value);
  void set_province(const char* value, size_t size);
  ::std::string* mutable_province();
  ::std::string* release_province();
  void set_allocated_province(::std::string* province);

  // optional string City = 12;
  bool has_city() const;
  void clear_city();
  static const int kCityFieldNumber = 12;
  const ::std::string& city() const;
  void set_city(const ::std::string& value);
  #if LANG_CXX11
  void set_city(::std::string&& value);
  #endif
  void set_city(const char* value);
  void set_city(const char* value, size_t size);
  ::std::string* mutable_city();
  ::std::string* release_city();
  void set_allocated_city(::std::string* city);

  // optional string Signature = 13;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 13;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_signature(::std::string&& value);
  #endif
  void set_signature(const char* value);
  void set_signature(const char* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // optional string VerifyInfo = 16;
  bool has_verifyinfo() const;
  void clear_verifyinfo();
  static const int kVerifyInfoFieldNumber = 16;
  const ::std::string& verifyinfo() const;
  void set_verifyinfo(const ::std::string& value);
  #if LANG_CXX11
  void set_verifyinfo(::std::string&& value);
  #endif
  void set_verifyinfo(const char* value);
  void set_verifyinfo(const char* value, size_t size);
  ::std::string* mutable_verifyinfo();
  ::std::string* release_verifyinfo();
  void set_allocated_verifyinfo(::std::string* verifyinfo);

  // optional string Country = 17;
  bool has_country() const;
  void clear_country();
  static const int kCountryFieldNumber = 17;
  const ::std::string& country() const;
  void set_country(const ::std::string& value);
  #if LANG_CXX11
  void set_country(::std::string&& value);
  #endif
  void set_country(const char* value);
  void set_country(const char* value, size_t size);
  ::std::string* mutable_country();
  ::std::string* release_country();
  void set_allocated_country(::std::string* country);

  // optional .FromCs.sKBuiltinstringT MemberName = 1;
  bool has_membername() const;
  void clear_membername();
  static const int kMemberNameFieldNumber = 1;
  const ::FromCs::sKBuiltinstringT& membername() const;
  ::FromCs::sKBuiltinstringT* mutable_membername();
  ::FromCs::sKBuiltinstringT* release_membername();
  void set_allocated_membername(::FromCs::sKBuiltinstringT* membername);

  // optional .FromCs.sKBuiltinstringT NickName = 3;
  bool has_nickname() const;
  void clear_nickname();
  static const int kNickNameFieldNumber = 3;
  const ::FromCs::sKBuiltinstringT& nickname() const;
  ::FromCs::sKBuiltinstringT* mutable_nickname();
  ::FromCs::sKBuiltinstringT* release_nickname();
  void set_allocated_nickname(::FromCs::sKBuiltinstringT* nickname);

  // optional .FromCs.sKBuiltinstringT PYInitial = 4;
  bool has_pyinitial() const;
  void clear_pyinitial();
  static const int kPYInitialFieldNumber = 4;
  const ::FromCs::sKBuiltinstringT& pyinitial() const;
  ::FromCs::sKBuiltinstringT* mutable_pyinitial();
  ::FromCs::sKBuiltinstringT* release_pyinitial();
  void set_allocated_pyinitial(::FromCs::sKBuiltinstringT* pyinitial);

  // optional .FromCs.sKBuiltinstringT QuanPin = 5;
  bool has_quanpin() const;
  void clear_quanpin();
  static const int kQuanPinFieldNumber = 5;
  const ::FromCs::sKBuiltinstringT& quanpin() const;
  ::FromCs::sKBuiltinstringT* mutable_quanpin();
  ::FromCs::sKBuiltinstringT* release_quanpin();
  void set_allocated_quanpin(::FromCs::sKBuiltinstringT* quanpin);

  // optional .FromCs.sKBuiltinstringT Remark = 7;
  bool has_remark() const;
  void clear_remark();
  static const int kRemarkFieldNumber = 7;
  const ::FromCs::sKBuiltinstringT& remark() const;
  ::FromCs::sKBuiltinstringT* mutable_remark();
  ::FromCs::sKBuiltinstringT* release_remark();
  void set_allocated_remark(::FromCs::sKBuiltinstringT* remark);

  // optional .FromCs.sKBuiltinstringT RemarkPYInitial = 8;
  bool has_remarkpyinitial() const;
  void clear_remarkpyinitial();
  static const int kRemarkPYInitialFieldNumber = 8;
  const ::FromCs::sKBuiltinstringT& remarkpyinitial() const;
  ::FromCs::sKBuiltinstringT* mutable_remarkpyinitial();
  ::FromCs::sKBuiltinstringT* release_remarkpyinitial();
  void set_allocated_remarkpyinitial(::FromCs::sKBuiltinstringT* remarkpyinitial);

  // optional .FromCs.sKBuiltinstringT RemarkQuanPin = 9;
  bool has_remarkquanpin() const;
  void clear_remarkquanpin();
  static const int kRemarkQuanPinFieldNumber = 9;
  const ::FromCs::sKBuiltinstringT& remarkquanpin() const;
  ::FromCs::sKBuiltinstringT* mutable_remarkquanpin();
  ::FromCs::sKBuiltinstringT* release_remarkquanpin();
  void set_allocated_remarkquanpin(::FromCs::sKBuiltinstringT* remarkquanpin);

  // optional int32 MemberStatus = 2;
  bool has_memberstatus() const;
  void clear_memberstatus();
  static const int kMemberStatusFieldNumber = 2;
  ::google::protobuf::int32 memberstatus() const;
  void set_memberstatus(::google::protobuf::int32 value);

  // optional int32 Sex = 6;
  bool has_sex() const;
  void clear_sex();
  static const int kSexFieldNumber = 6;
  ::google::protobuf::int32 sex() const;
  void set_sex(::google::protobuf::int32 value);

  // optional int32 ContactType = 10;
  bool has_contacttype() const;
  void clear_contacttype();
  static const int kContactTypeFieldNumber = 10;
  ::google::protobuf::int32 contacttype() const;
  void set_contacttype(::google::protobuf::int32 value);

  // optional int32 PersonalCard = 14;
  bool has_personalcard() const;
  void clear_personalcard();
  static const int kPersonalCardFieldNumber = 14;
  ::google::protobuf::int32 personalcard() const;
  void set_personalcard(::google::protobuf::int32 value);

  // optional int32 VerifyFlag = 15;
  bool has_verifyflag() const;
  void clear_verifyflag();
  static const int kVerifyFlagFieldNumber = 15;
  ::google::protobuf::int32 verifyflag() const;
  void set_verifyflag(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.MemberInfo)
 private:
  void set_has_membername();
  void clear_has_membername();
  void set_has_memberstatus();
  void clear_has_memberstatus();
  void set_has_nickname();
  void clear_has_nickname();
  void set_has_pyinitial();
  void clear_has_pyinitial();
  void set_has_quanpin();
  void clear_has_quanpin();
  void set_has_sex();
  void clear_has_sex();
  void set_has_remark();
  void clear_has_remark();
  void set_has_remarkpyinitial();
  void clear_has_remarkpyinitial();
  void set_has_remarkquanpin();
  void clear_has_remarkquanpin();
  void set_has_contacttype();
  void clear_has_contacttype();
  void set_has_province();
  void clear_has_province();
  void set_has_city();
  void clear_has_city();
  void set_has_signature();
  void clear_has_signature();
  void set_has_personalcard();
  void clear_has_personalcard();
  void set_has_verifyflag();
  void clear_has_verifyflag();
  void set_has_verifyinfo();
  void clear_has_verifyinfo();
  void set_has_country();
  void clear_has_country();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr province_;
  ::google::protobuf::internal::ArenaStringPtr city_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  ::google::protobuf::internal::ArenaStringPtr verifyinfo_;
  ::google::protobuf::internal::ArenaStringPtr country_;
  ::FromCs::sKBuiltinstringT* membername_;
  ::FromCs::sKBuiltinstringT* nickname_;
  ::FromCs::sKBuiltinstringT* pyinitial_;
  ::FromCs::sKBuiltinstringT* quanpin_;
  ::FromCs::sKBuiltinstringT* remark_;
  ::FromCs::sKBuiltinstringT* remarkpyinitial_;
  ::FromCs::sKBuiltinstringT* remarkquanpin_;
  ::google::protobuf::int32 memberstatus_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 contacttype_;
  ::google::protobuf::int32 personalcard_;
  ::google::protobuf::int32 verifyflag_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ECDHKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.ECDHKey) */ {
 public:
  ECDHKey();
  virtual ~ECDHKey();

  ECDHKey(const ECDHKey& from);

  inline ECDHKey& operator=(const ECDHKey& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ECDHKey& default_instance();

  static inline const ECDHKey* internal_default_instance() {
    return reinterpret_cast<const ECDHKey*>(
               &_ECDHKey_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    138;

  void Swap(ECDHKey* other);

  // implements Message ----------------------------------------------

  inline ECDHKey* New() const PROTOBUF_FINAL { return New(NULL); }

  ECDHKey* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ECDHKey& from);
  void MergeFrom(const ECDHKey& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ECDHKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .FromCs.sKBuiltinBufferT Key = 2;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::FromCs::sKBuiltinBufferT& key() const;
  ::FromCs::sKBuiltinBufferT* mutable_key();
  ::FromCs::sKBuiltinBufferT* release_key();
  void set_allocated_key(::FromCs::sKBuiltinBufferT* key);

  // optional int32 NID = 1;
  bool has_nid() const;
  void clear_nid();
  static const int kNIDFieldNumber = 1;
  ::google::protobuf::int32 nid() const;
  void set_nid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.ECDHKey)
 private:
  void set_has_nid();
  void clear_has_nid();
  void set_has_key();
  void clear_has_key();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::FromCs::sKBuiltinBufferT* key_;
  ::google::protobuf::int32 nid_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class initKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.initKey) */ {
 public:
  initKey();
  virtual ~initKey();

  initKey(const initKey& from);

  inline initKey& operator=(const initKey& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const initKey& default_instance();

  static inline const initKey* internal_default_instance() {
    return reinterpret_cast<const initKey*>(
               &_initKey_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    139;

  void Swap(initKey* other);

  // implements Message ----------------------------------------------

  inline initKey* New() const PROTOBUF_FINAL { return New(NULL); }

  initKey* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const initKey& from);
  void MergeFrom(const initKey& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(initKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Account = 3;
  bool has_account() const;
  void clear_account();
  static const int kAccountFieldNumber = 3;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // optional string Pwd = 4;
  bool has_pwd() const;
  void clear_pwd();
  static const int kPwdFieldNumber = 4;
  const ::std::string& pwd() const;
  void set_pwd(const ::std::string& value);
  #if LANG_CXX11
  void set_pwd(::std::string&& value);
  #endif
  void set_pwd(const char* value);
  void set_pwd(const char* value, size_t size);
  ::std::string* mutable_pwd();
  ::std::string* release_pwd();
  void set_allocated_pwd(::std::string* pwd);

  // optional string Pwd2 = 5;
  bool has_pwd2() const;
  void clear_pwd2();
  static const int kPwd2FieldNumber = 5;
  const ::std::string& pwd2() const;
  void set_pwd2(const ::std::string& value);
  #if LANG_CXX11
  void set_pwd2(::std::string&& value);
  #endif
  void set_pwd2(const char* value);
  void set_pwd2(const char* value, size_t size);
  ::std::string* mutable_pwd2();
  ::std::string* release_pwd2();
  void set_allocated_pwd2(::std::string* pwd2);

  // optional .FromCs.sKBuiltinBufferT RandomEncryKey = 1;
  bool has_randomencrykey() const;
  void clear_randomencrykey();
  static const int kRandomEncryKeyFieldNumber = 1;
  const ::FromCs::sKBuiltinBufferT& randomencrykey() const;
  ::FromCs::sKBuiltinBufferT* mutable_randomencrykey();
  ::FromCs::sKBuiltinBufferT* release_randomencrykey();
  void set_allocated_randomencrykey(::FromCs::sKBuiltinBufferT* randomencrykey);

  // optional .FromCs.ECDHKey CliPubECDHKey = 2;
  bool has_clipubecdhkey() const;
  void clear_clipubecdhkey();
  static const int kCliPubECDHKeyFieldNumber = 2;
  const ::FromCs::ECDHKey& clipubecdhkey() const;
  ::FromCs::ECDHKey* mutable_clipubecdhkey();
  ::FromCs::ECDHKey* release_clipubecdhkey();
  void set_allocated_clipubecdhkey(::FromCs::ECDHKey* clipubecdhkey);

  // @@protoc_insertion_point(class_scope:FromCs.initKey)
 private:
  void set_has_randomencrykey();
  void clear_has_randomencrykey();
  void set_has_clipubecdhkey();
  void clear_has_clipubecdhkey();
  void set_has_account();
  void clear_has_account();
  void set_has_pwd();
  void clear_has_pwd();
  void set_has_pwd2();
  void clear_has_pwd2();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::internal::ArenaStringPtr pwd_;
  ::google::protobuf::internal::ArenaStringPtr pwd2_;
  ::FromCs::sKBuiltinBufferT* randomencrykey_;
  ::FromCs::ECDHKey* clipubecdhkey_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AutoAuthRsaReqData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.AutoAuthRsaReqData) */ {
 public:
  AutoAuthRsaReqData();
  virtual ~AutoAuthRsaReqData();

  AutoAuthRsaReqData(const AutoAuthRsaReqData& from);

  inline AutoAuthRsaReqData& operator=(const AutoAuthRsaReqData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AutoAuthRsaReqData& default_instance();

  static inline const AutoAuthRsaReqData* internal_default_instance() {
    return reinterpret_cast<const AutoAuthRsaReqData*>(
               &_AutoAuthRsaReqData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    140;

  void Swap(AutoAuthRsaReqData* other);

  // implements Message ----------------------------------------------

  inline AutoAuthRsaReqData* New() const PROTOBUF_FINAL { return New(NULL); }

  AutoAuthRsaReqData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AutoAuthRsaReqData& from);
  void MergeFrom(const AutoAuthRsaReqData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AutoAuthRsaReqData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .FromCs.sKBuiltinBufferT AesEncryptKey = 1;
  bool has_aesencryptkey() const;
  void clear_aesencryptkey();
  static const int kAesEncryptKeyFieldNumber = 1;
  const ::FromCs::sKBuiltinBufferT& aesencryptkey() const;
  ::FromCs::sKBuiltinBufferT* mutable_aesencryptkey();
  ::FromCs::sKBuiltinBufferT* release_aesencryptkey();
  void set_allocated_aesencryptkey(::FromCs::sKBuiltinBufferT* aesencryptkey);

  // optional .FromCs.ECDHKey CliPubECDHKey = 2;
  bool has_clipubecdhkey() const;
  void clear_clipubecdhkey();
  static const int kCliPubECDHKeyFieldNumber = 2;
  const ::FromCs::ECDHKey& clipubecdhkey() const;
  ::FromCs::ECDHKey* mutable_clipubecdhkey();
  ::FromCs::ECDHKey* release_clipubecdhkey();
  void set_allocated_clipubecdhkey(::FromCs::ECDHKey* clipubecdhkey);

  // @@protoc_insertion_point(class_scope:FromCs.AutoAuthRsaReqData)
 private:
  void set_has_aesencryptkey();
  void clear_has_aesencryptkey();
  void set_has_clipubecdhkey();
  void clear_has_clipubecdhkey();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::FromCs::sKBuiltinBufferT* aesencryptkey_;
  ::FromCs::ECDHKey* clipubecdhkey_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DataItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.DataItem) */ {
 public:
  DataItem();
  virtual ~DataItem();

  DataItem(const DataItem& from);

  inline DataItem& operator=(const DataItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataItem& default_instance();

  static inline const DataItem* internal_default_instance() {
    return reinterpret_cast<const DataItem*>(
               &_DataItem_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    141;

  void Swap(DataItem* other);

  // implements Message ----------------------------------------------

  inline DataItem* New() const PROTOBUF_FINAL { return New(NULL); }

  DataItem* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DataItem& from);
  void MergeFrom(const DataItem& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DataItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Str1 = 1;
  bool has_str1() const;
  void clear_str1();
  static const int kStr1FieldNumber = 1;
  const ::std::string& str1() const;
  void set_str1(const ::std::string& value);
  #if LANG_CXX11
  void set_str1(::std::string&& value);
  #endif
  void set_str1(const char* value);
  void set_str1(const char* value, size_t size);
  ::std::string* mutable_str1();
  ::std::string* release_str1();
  void set_allocated_str1(::std::string* str1);

  // optional string Str2 = 2;
  bool has_str2() const;
  void clear_str2();
  static const int kStr2FieldNumber = 2;
  const ::std::string& str2() const;
  void set_str2(const ::std::string& value);
  #if LANG_CXX11
  void set_str2(::std::string&& value);
  #endif
  void set_str2(const char* value);
  void set_str2(const char* value, size_t size);
  ::std::string* mutable_str2();
  ::std::string* release_str2();
  void set_allocated_str2(::std::string* str2);

  // optional string Str3 = 3;
  bool has_str3() const;
  void clear_str3();
  static const int kStr3FieldNumber = 3;
  const ::std::string& str3() const;
  void set_str3(const ::std::string& value);
  #if LANG_CXX11
  void set_str3(::std::string&& value);
  #endif
  void set_str3(const char* value);
  void set_str3(const char* value, size_t size);
  ::std::string* mutable_str3();
  ::std::string* release_str3();
  void set_allocated_str3(::std::string* str3);

  // optional .FromCs.sKBuiltinstringT KSid = 4;
  bool has_ksid() const;
  void clear_ksid();
  static const int kKSidFieldNumber = 4;
  const ::FromCs::sKBuiltinstringT& ksid() const;
  ::FromCs::sKBuiltinstringT* mutable_ksid();
  ::FromCs::sKBuiltinstringT* release_ksid();
  void set_allocated_ksid(::FromCs::sKBuiltinstringT* ksid);

  // @@protoc_insertion_point(class_scope:FromCs.DataItem)
 private:
  void set_has_str1();
  void clear_has_str1();
  void set_has_str2();
  void clear_has_str2();
  void set_has_str3();
  void clear_has_str3();
  void set_has_ksid();
  void clear_has_ksid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr str1_;
  ::google::protobuf::internal::ArenaStringPtr str2_;
  ::google::protobuf::internal::ArenaStringPtr str3_;
  ::FromCs::sKBuiltinstringT* ksid_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DataItem2 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.DataItem2) */ {
 public:
  DataItem2();
  virtual ~DataItem2();

  DataItem2(const DataItem2& from);

  inline DataItem2& operator=(const DataItem2& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataItem2& default_instance();

  static inline const DataItem2* internal_default_instance() {
    return reinterpret_cast<const DataItem2*>(
               &_DataItem2_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    142;

  void Swap(DataItem2* other);

  // implements Message ----------------------------------------------

  inline DataItem2* New() const PROTOBUF_FINAL { return New(NULL); }

  DataItem2* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DataItem2& from);
  void MergeFrom(const DataItem2& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DataItem2* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Str1 = 1;
  bool has_str1() const;
  void clear_str1();
  static const int kStr1FieldNumber = 1;
  const ::std::string& str1() const;
  void set_str1(const ::std::string& value);
  #if LANG_CXX11
  void set_str1(::std::string&& value);
  #endif
  void set_str1(const char* value);
  void set_str1(const char* value, size_t size);
  ::std::string* mutable_str1();
  ::std::string* release_str1();
  void set_allocated_str1(::std::string* str1);

  // optional string Str2 = 2;
  bool has_str2() const;
  void clear_str2();
  static const int kStr2FieldNumber = 2;
  const ::std::string& str2() const;
  void set_str2(const ::std::string& value);
  #if LANG_CXX11
  void set_str2(::std::string&& value);
  #endif
  void set_str2(const char* value);
  void set_str2(const char* value, size_t size);
  ::std::string* mutable_str2();
  ::std::string* release_str2();
  void set_allocated_str2(::std::string* str2);

  // @@protoc_insertion_point(class_scope:FromCs.DataItem2)
 private:
  void set_has_str1();
  void clear_has_str1();
  void set_has_str2();
  void clear_has_str2();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr str1_;
  ::google::protobuf::internal::ArenaStringPtr str2_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ExtData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.ExtData) */ {
 public:
  ExtData();
  virtual ~ExtData();

  ExtData(const ExtData& from);

  inline ExtData& operator=(const ExtData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExtData& default_instance();

  static inline const ExtData* internal_default_instance() {
    return reinterpret_cast<const ExtData*>(
               &_ExtData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    143;

  void Swap(ExtData* other);

  // implements Message ----------------------------------------------

  inline ExtData* New() const PROTOBUF_FINAL { return New(NULL); }

  ExtData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ExtData& from);
  void MergeFrom(const ExtData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ExtData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Str7 = 7;
  bool has_str7() const;
  void clear_str7();
  static const int kStr7FieldNumber = 7;
  const ::std::string& str7() const;
  void set_str7(const ::std::string& value);
  #if LANG_CXX11
  void set_str7(::std::string&& value);
  #endif
  void set_str7(const char* value);
  void set_str7(const char* value, size_t size);
  ::std::string* mutable_str7();
  ::std::string* release_str7();
  void set_allocated_str7(::std::string* str7);

  // optional .FromCs.sKBuiltinBufferT Buffer1 = 1;
  bool has_buffer1() const;
  void clear_buffer1();
  static const int kBuffer1FieldNumber = 1;
  const ::FromCs::sKBuiltinBufferT& buffer1() const;
  ::FromCs::sKBuiltinBufferT* mutable_buffer1();
  ::FromCs::sKBuiltinBufferT* release_buffer1();
  void set_allocated_buffer1(::FromCs::sKBuiltinBufferT* buffer1);

  // optional .FromCs.kSidData KSid = 2;
  bool has_ksid() const;
  void clear_ksid();
  static const int kKSidFieldNumber = 2;
  const ::FromCs::kSidData& ksid() const;
  ::FromCs::kSidData* mutable_ksid();
  ::FromCs::kSidData* release_ksid();
  void set_allocated_ksid(::FromCs::kSidData* ksid);

  // optional .FromCs.sKBuiltinBufferT Data3 = 3;
  bool has_data3() const;
  void clear_data3();
  static const int kData3FieldNumber = 3;
  const ::FromCs::sKBuiltinBufferT& data3() const;
  ::FromCs::sKBuiltinBufferT* mutable_data3();
  ::FromCs::sKBuiltinBufferT* release_data3();
  void set_allocated_data3(::FromCs::sKBuiltinBufferT* data3);

  // optional .FromCs.sKBuiltinBufferT Buffer4 = 4;
  bool has_buffer4() const;
  void clear_buffer4();
  static const int kBuffer4FieldNumber = 4;
  const ::FromCs::sKBuiltinBufferT& buffer4() const;
  ::FromCs::sKBuiltinBufferT* mutable_buffer4();
  ::FromCs::sKBuiltinBufferT* release_buffer4();
  void set_allocated_buffer4(::FromCs::sKBuiltinBufferT* buffer4);

  // optional .FromCs.sKBuiltinBufferT Buffer5 = 5;
  bool has_buffer5() const;
  void clear_buffer5();
  static const int kBuffer5FieldNumber = 5;
  const ::FromCs::sKBuiltinBufferT& buffer5() const;
  ::FromCs::sKBuiltinBufferT* mutable_buffer5();
  ::FromCs::sKBuiltinBufferT* release_buffer5();
  void set_allocated_buffer5(::FromCs::sKBuiltinBufferT* buffer5);

  // optional int32 Int6 = 6;
  bool has_int6() const;
  void clear_int6();
  static const int kInt6FieldNumber = 6;
  ::google::protobuf::int32 int6() const;
  void set_int6(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.ExtData)
 private:
  void set_has_buffer1();
  void clear_has_buffer1();
  void set_has_ksid();
  void clear_has_ksid();
  void set_has_data3();
  void clear_has_data3();
  void set_has_buffer4();
  void clear_has_buffer4();
  void set_has_buffer5();
  void clear_has_buffer5();
  void set_has_int6();
  void clear_has_int6();
  void set_has_str7();
  void clear_has_str7();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr str7_;
  ::FromCs::sKBuiltinBufferT* buffer1_;
  ::FromCs::kSidData* ksid_;
  ::FromCs::sKBuiltinBufferT* data3_;
  ::FromCs::sKBuiltinBufferT* buffer4_;
  ::FromCs::sKBuiltinBufferT* buffer5_;
  ::google::protobuf::int32 int6_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class kSidData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.kSidData) */ {
 public:
  kSidData();
  virtual ~kSidData();

  kSidData(const kSidData& from);

  inline kSidData& operator=(const kSidData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const kSidData& default_instance();

  static inline const kSidData* internal_default_instance() {
    return reinterpret_cast<const kSidData*>(
               &_kSidData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    144;

  void Swap(kSidData* other);

  // implements Message ----------------------------------------------

  inline kSidData* New() const PROTOBUF_FINAL { return New(NULL); }

  kSidData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const kSidData& from);
  void MergeFrom(const kSidData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(kSidData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Str1 = 1;
  bool has_str1() const;
  void clear_str1();
  static const int kStr1FieldNumber = 1;
  const ::std::string& str1() const;
  void set_str1(const ::std::string& value);
  #if LANG_CXX11
  void set_str1(::std::string&& value);
  #endif
  void set_str1(const char* value);
  void set_str1(const char* value, size_t size);
  ::std::string* mutable_str1();
  ::std::string* release_str1();
  void set_allocated_str1(::std::string* str1);

  // optional string KSid = 2;
  bool has_ksid() const;
  void clear_ksid();
  static const int kKSidFieldNumber = 2;
  const ::std::string& ksid() const;
  void set_ksid(const ::std::string& value);
  #if LANG_CXX11
  void set_ksid(::std::string&& value);
  #endif
  void set_ksid(const char* value);
  void set_ksid(const char* value, size_t size);
  ::std::string* mutable_ksid();
  ::std::string* release_ksid();
  void set_allocated_ksid(::std::string* ksid);

  // optional string Str3 = 3;
  bool has_str3() const;
  void clear_str3();
  static const int kStr3FieldNumber = 3;
  const ::std::string& str3() const;
  void set_str3(const ::std::string& value);
  #if LANG_CXX11
  void set_str3(::std::string&& value);
  #endif
  void set_str3(const char* value);
  void set_str3(const char* value, size_t size);
  ::std::string* mutable_str3();
  ::std::string* release_str3();
  void set_allocated_str3(::std::string* str3);

  // optional .FromCs.sKBuiltinBufferT ImgBuf = 4;
  bool has_imgbuf() const;
  void clear_imgbuf();
  static const int kImgBufFieldNumber = 4;
  const ::FromCs::sKBuiltinBufferT& imgbuf() const;
  ::FromCs::sKBuiltinBufferT* mutable_imgbuf();
  ::FromCs::sKBuiltinBufferT* release_imgbuf();
  void set_allocated_imgbuf(::FromCs::sKBuiltinBufferT* imgbuf);

  // @@protoc_insertion_point(class_scope:FromCs.kSidData)
 private:
  void set_has_str1();
  void clear_has_str1();
  void set_has_ksid();
  void clear_has_ksid();
  void set_has_str3();
  void clear_has_str3();
  void set_has_imgbuf();
  void clear_has_imgbuf();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr str1_;
  ::google::protobuf::internal::ArenaStringPtr ksid_;
  ::google::protobuf::internal::ArenaStringPtr str3_;
  ::FromCs::sKBuiltinBufferT* imgbuf_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class imgPic : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.imgPic) */ {
 public:
  imgPic();
  virtual ~imgPic();

  imgPic(const imgPic& from);

  inline imgPic& operator=(const imgPic& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const imgPic& default_instance();

  static inline const imgPic* internal_default_instance() {
    return reinterpret_cast<const imgPic*>(
               &_imgPic_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    145;

  void Swap(imgPic* other);

  // implements Message ----------------------------------------------

  inline imgPic* New() const PROTOBUF_FINAL { return New(NULL); }

  imgPic* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const imgPic& from);
  void MergeFrom(const imgPic& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(imgPic* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Data = 1;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional .FromCs.sKBuiltinBufferT VerifyBuff = 2;
  bool has_verifybuff() const;
  void clear_verifybuff();
  static const int kVerifyBuffFieldNumber = 2;
  const ::FromCs::sKBuiltinBufferT& verifybuff() const;
  ::FromCs::sKBuiltinBufferT* mutable_verifybuff();
  ::FromCs::sKBuiltinBufferT* release_verifybuff();
  void set_allocated_verifybuff(::FromCs::sKBuiltinBufferT* verifybuff);

  // @@protoc_insertion_point(class_scope:FromCs.imgPic)
 private:
  void set_has_data();
  void clear_has_data();
  void set_has_verifybuff();
  void clear_has_verifybuff();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::FromCs::sKBuiltinBufferT* verifybuff_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShowStyleKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.ShowStyleKey) */ {
 public:
  ShowStyleKey();
  virtual ~ShowStyleKey();

  ShowStyleKey(const ShowStyleKey& from);

  inline ShowStyleKey& operator=(const ShowStyleKey& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShowStyleKey& default_instance();

  static inline const ShowStyleKey* internal_default_instance() {
    return reinterpret_cast<const ShowStyleKey*>(
               &_ShowStyleKey_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    146;

  void Swap(ShowStyleKey* other);

  // implements Message ----------------------------------------------

  inline ShowStyleKey* New() const PROTOBUF_FINAL { return New(NULL); }

  ShowStyleKey* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ShowStyleKey& from);
  void MergeFrom(const ShowStyleKey& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ShowStyleKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .FromCs.sKBuiltinBufferT key_ = 2;
  bool has_key_() const;
  void clear_key_();
  static const int kKeyFieldNumber = 2;
  const ::FromCs::sKBuiltinBufferT& key_() const;
  ::FromCs::sKBuiltinBufferT* mutable_key_();
  ::FromCs::sKBuiltinBufferT* release_key_();
  void set_allocated_key_(::FromCs::sKBuiltinBufferT* key_);

  // optional int32 KeyNumb = 1;
  bool has_keynumb() const;
  void clear_keynumb();
  static const int kKeyNumbFieldNumber = 1;
  ::google::protobuf::int32 keynumb() const;
  void set_keynumb(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.ShowStyleKey)
 private:
  void set_has_keynumb();
  void clear_has_keynumb();
  void set_has_key_();
  void clear_has_key_();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::FromCs::sKBuiltinBufferT* key__;
  ::google::protobuf::int32 keynumb_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StyleKeyItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.StyleKeyItem) */ {
 public:
  StyleKeyItem();
  virtual ~StyleKeyItem();

  StyleKeyItem(const StyleKeyItem& from);

  inline StyleKeyItem& operator=(const StyleKeyItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StyleKeyItem& default_instance();

  static inline const StyleKeyItem* internal_default_instance() {
    return reinterpret_cast<const StyleKeyItem*>(
               &_StyleKeyItem_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    147;

  void Swap(StyleKeyItem* other);

  // implements Message ----------------------------------------------

  inline StyleKeyItem* New() const PROTOBUF_FINAL { return New(NULL); }

  StyleKeyItem* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StyleKeyItem& from);
  void MergeFrom(const StyleKeyItem& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StyleKeyItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Str2 = 2;
  bool has_str2() const;
  void clear_str2();
  static const int kStr2FieldNumber = 2;
  const ::std::string& str2() const;
  void set_str2(const ::std::string& value);
  #if LANG_CXX11
  void set_str2(::std::string&& value);
  #endif
  void set_str2(const char* value);
  void set_str2(const char* value, size_t size);
  ::std::string* mutable_str2();
  ::std::string* release_str2();
  void set_allocated_str2(::std::string* str2);

  // optional int32 Int1 = 1;
  bool has_int1() const;
  void clear_int1();
  static const int kInt1FieldNumber = 1;
  ::google::protobuf::int32 int1() const;
  void set_int1(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.StyleKeyItem)
 private:
  void set_has_int1();
  void clear_has_int1();
  void set_has_str2();
  void clear_has_str2();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr str2_;
  ::google::protobuf::int32 int1_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AuthData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.AuthData) */ {
 public:
  AuthData();
  virtual ~AuthData();

  AuthData(const AuthData& from);

  inline AuthData& operator=(const AuthData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuthData& default_instance();

  static inline const AuthData* internal_default_instance() {
    return reinterpret_cast<const AuthData*>(
               &_AuthData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    148;

  void Swap(AuthData* other);

  // implements Message ----------------------------------------------

  inline AuthData* New() const PROTOBUF_FINAL { return New(NULL); }

  AuthData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AuthData& from);
  void MergeFrom(const AuthData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AuthData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Str11 = 11;
  bool has_str11() const;
  void clear_str11();
  static const int kStr11FieldNumber = 11;
  const ::std::string& str11() const;
  void set_str11(const ::std::string& value);
  #if LANG_CXX11
  void set_str11(::std::string&& value);
  #endif
  void set_str11(const char* value);
  void set_str11(const char* value, size_t size);
  ::std::string* mutable_str11();
  ::std::string* release_str11();
  void set_allocated_str11(::std::string* str11);

  // optional string Str14 = 14;
  bool has_str14() const;
  void clear_str14();
  static const int kStr14FieldNumber = 14;
  const ::std::string& str14() const;
  void set_str14(const ::std::string& value);
  #if LANG_CXX11
  void set_str14(::std::string&& value);
  #endif
  void set_str14(const char* value);
  void set_str14(const char* value, size_t size);
  ::std::string* mutable_str14();
  ::std::string* release_str14();
  void set_allocated_str14(::std::string* str14);

  // optional string Str16 = 16;
  bool has_str16() const;
  void clear_str16();
  static const int kStr16FieldNumber = 16;
  const ::std::string& str16() const;
  void set_str16(const ::std::string& value);
  #if LANG_CXX11
  void set_str16(::std::string&& value);
  #endif
  void set_str16(const char* value);
  void set_str16(const char* value, size_t size);
  ::std::string* mutable_str16();
  ::std::string* release_str16();
  void set_allocated_str16(::std::string* str16);

  // optional string FSURL = 20;
  bool has_fsurl() const;
  void clear_fsurl();
  static const int kFSURLFieldNumber = 20;
  const ::std::string& fsurl() const;
  void set_fsurl(const ::std::string& value);
  #if LANG_CXX11
  void set_fsurl(::std::string&& value);
  #endif
  void set_fsurl(const char* value);
  void set_fsurl(const char* value, size_t size);
  ::std::string* mutable_fsurl();
  ::std::string* release_fsurl();
  void set_allocated_fsurl(::std::string* fsurl);

  // optional .FromCs.ECDHKey SvrPubECDHKey = 2;
  bool has_svrpubecdhkey() const;
  void clear_svrpubecdhkey();
  static const int kSvrPubECDHKeyFieldNumber = 2;
  const ::FromCs::ECDHKey& svrpubecdhkey() const;
  ::FromCs::ECDHKey* mutable_svrpubecdhkey();
  ::FromCs::ECDHKey* release_svrpubecdhkey();
  void set_allocated_svrpubecdhkey(::FromCs::ECDHKey* svrpubecdhkey);

  // optional .FromCs.sKBuiltinBufferT SessionKey = 3;
  bool has_sessionkey() const;
  void clear_sessionkey();
  static const int kSessionKeyFieldNumber = 3;
  const ::FromCs::sKBuiltinBufferT& sessionkey() const;
  ::FromCs::sKBuiltinBufferT* mutable_sessionkey();
  ::FromCs::sKBuiltinBufferT* release_sessionkey();
  void set_allocated_sessionkey(::FromCs::sKBuiltinBufferT* sessionkey);

  // optional .FromCs.sKBuiltinBufferT AutoAuthKey = 4;
  bool has_autoauthkey() const;
  void clear_autoauthkey();
  static const int kAutoAuthKeyFieldNumber = 4;
  const ::FromCs::sKBuiltinBufferT& autoauthkey() const;
  ::FromCs::sKBuiltinBufferT* mutable_autoauthkey();
  ::FromCs::sKBuiltinBufferT* release_autoauthkey();
  void set_allocated_autoauthkey(::FromCs::sKBuiltinBufferT* autoauthkey);

  // optional .FromCs.sKBuiltinBufferT Buffer6 = 6;
  bool has_buffer6() const;
  void clear_buffer6();
  static const int kBuffer6FieldNumber = 6;
  const ::FromCs::sKBuiltinBufferT& buffer6() const;
  ::FromCs::sKBuiltinBufferT* mutable_buffer6();
  ::FromCs::sKBuiltinBufferT* release_buffer6();
  void set_allocated_buffer6(::FromCs::sKBuiltinBufferT* buffer6);

  // optional .FromCs.sKBuiltinstringT KSid = 7;
  bool has_ksid() const;
  void clear_ksid();
  static const int kKSidFieldNumber = 7;
  const ::FromCs::sKBuiltinstringT& ksid() const;
  ::FromCs::sKBuiltinstringT* mutable_ksid();
  ::FromCs::sKBuiltinstringT* release_ksid();
  void set_allocated_ksid(::FromCs::sKBuiltinstringT* ksid);

  // optional .FromCs.sKBuiltinBufferT PicData = 8;
  bool has_picdata() const;
  void clear_picdata();
  static const int kPicDataFieldNumber = 8;
  const ::FromCs::sKBuiltinBufferT& picdata() const;
  ::FromCs::sKBuiltinBufferT* mutable_picdata();
  ::FromCs::sKBuiltinBufferT* release_picdata();
  void set_allocated_picdata(::FromCs::sKBuiltinBufferT* picdata);

  // optional .FromCs.sKBuiltinBufferT Buffer9 = 9;
  bool has_buffer9() const;
  void clear_buffer9();
  static const int kBuffer9FieldNumber = 9;
  const ::FromCs::sKBuiltinBufferT& buffer9() const;
  ::FromCs::sKBuiltinBufferT* mutable_buffer9();
  ::FromCs::sKBuiltinBufferT* release_buffer9();
  void set_allocated_buffer9(::FromCs::sKBuiltinBufferT* buffer9);

  // optional .FromCs.sKBuiltinBufferT Buffer10 = 10;
  bool has_buffer10() const;
  void clear_buffer10();
  static const int kBuffer10FieldNumber = 10;
  const ::FromCs::sKBuiltinBufferT& buffer10() const;
  ::FromCs::sKBuiltinBufferT* mutable_buffer10();
  ::FromCs::sKBuiltinBufferT* release_buffer10();
  void set_allocated_buffer10(::FromCs::sKBuiltinBufferT* buffer10);

  // optional .FromCs.sKBuiltinBufferT Buffer12 = 12;
  bool has_buffer12() const;
  void clear_buffer12();
  static const int kBuffer12FieldNumber = 12;
  const ::FromCs::sKBuiltinBufferT& buffer12() const;
  ::FromCs::sKBuiltinBufferT* mutable_buffer12();
  ::FromCs::sKBuiltinBufferT* release_buffer12();
  void set_allocated_buffer12(::FromCs::sKBuiltinBufferT* buffer12);

  // optional .FromCs.sKBuiltinBufferT Item15 = 15;
  bool has_item15() const;
  void clear_item15();
  static const int kItem15FieldNumber = 15;
  const ::FromCs::sKBuiltinBufferT& item15() const;
  ::FromCs::sKBuiltinBufferT* mutable_item15();
  ::FromCs::sKBuiltinBufferT* release_item15();
  void set_allocated_item15(::FromCs::sKBuiltinBufferT* item15);

  // optional int32 Uin = 1;
  bool has_uin() const;
  void clear_uin();
  static const int kUinFieldNumber = 1;
  ::google::protobuf::int32 uin() const;
  void set_uin(::google::protobuf::int32 value);

  // optional int32 Int5 = 5;
  bool has_int5() const;
  void clear_int5();
  static const int kInt5FieldNumber = 5;
  ::google::protobuf::int32 int5() const;
  void set_int5(::google::protobuf::int32 value);

  // optional int32 NewVersion = 17;
  bool has_newversion() const;
  void clear_newversion();
  static const int kNewVersionFieldNumber = 17;
  ::google::protobuf::int32 newversion() const;
  void set_newversion(::google::protobuf::int32 value);

  // optional int32 Int18 = 18;
  bool has_int18() const;
  void clear_int18();
  static const int kInt18FieldNumber = 18;
  ::google::protobuf::int32 int18() const;
  void set_int18(::google::protobuf::int32 value);

  // optional int32 Int19 = 19;
  bool has_int19() const;
  void clear_int19();
  static const int kInt19FieldNumber = 19;
  ::google::protobuf::int32 int19() const;
  void set_int19(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.AuthData)
 private:
  void set_has_uin();
  void clear_has_uin();
  void set_has_svrpubecdhkey();
  void clear_has_svrpubecdhkey();
  void set_has_sessionkey();
  void clear_has_sessionkey();
  void set_has_autoauthkey();
  void clear_has_autoauthkey();
  void set_has_int5();
  void clear_has_int5();
  void set_has_buffer6();
  void clear_has_buffer6();
  void set_has_ksid();
  void clear_has_ksid();
  void set_has_picdata();
  void clear_has_picdata();
  void set_has_buffer9();
  void clear_has_buffer9();
  void set_has_buffer10();
  void clear_has_buffer10();
  void set_has_str11();
  void clear_has_str11();
  void set_has_buffer12();
  void clear_has_buffer12();
  void set_has_str14();
  void clear_has_str14();
  void set_has_item15();
  void clear_has_item15();
  void set_has_str16();
  void clear_has_str16();
  void set_has_newversion();
  void clear_has_newversion();
  void set_has_int18();
  void clear_has_int18();
  void set_has_int19();
  void clear_has_int19();
  void set_has_fsurl();
  void clear_has_fsurl();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr str11_;
  ::google::protobuf::internal::ArenaStringPtr str14_;
  ::google::protobuf::internal::ArenaStringPtr str16_;
  ::google::protobuf::internal::ArenaStringPtr fsurl_;
  ::FromCs::ECDHKey* svrpubecdhkey_;
  ::FromCs::sKBuiltinBufferT* sessionkey_;
  ::FromCs::sKBuiltinBufferT* autoauthkey_;
  ::FromCs::sKBuiltinBufferT* buffer6_;
  ::FromCs::sKBuiltinstringT* ksid_;
  ::FromCs::sKBuiltinBufferT* picdata_;
  ::FromCs::sKBuiltinBufferT* buffer9_;
  ::FromCs::sKBuiltinBufferT* buffer10_;
  ::FromCs::sKBuiltinBufferT* buffer12_;
  ::FromCs::sKBuiltinBufferT* item15_;
  ::google::protobuf::int32 uin_;
  ::google::protobuf::int32 int5_;
  ::google::protobuf::int32 newversion_;
  ::google::protobuf::int32 int18_;
  ::google::protobuf::int32 int19_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AccountInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.AccountInfo) */ {
 public:
  AccountInfo();
  virtual ~AccountInfo();

  AccountInfo(const AccountInfo& from);

  inline AccountInfo& operator=(const AccountInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccountInfo& default_instance();

  static inline const AccountInfo* internal_default_instance() {
    return reinterpret_cast<const AccountInfo*>(
               &_AccountInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    149;

  void Swap(AccountInfo* other);

  // implements Message ----------------------------------------------

  inline AccountInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  AccountInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AccountInfo& from);
  void MergeFrom(const AccountInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AccountInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string UserName = 1;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // optional string NickName = 2;
  bool has_nickname() const;
  void clear_nickname();
  static const int kNickNameFieldNumber = 2;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  #if LANG_CXX11
  void set_nickname(::std::string&& value);
  #endif
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // optional string BindEmail = 4;
  bool has_bindemail() const;
  void clear_bindemail();
  static const int kBindEmailFieldNumber = 4;
  const ::std::string& bindemail() const;
  void set_bindemail(const ::std::string& value);
  #if LANG_CXX11
  void set_bindemail(::std::string&& value);
  #endif
  void set_bindemail(const char* value);
  void set_bindemail(const char* value, size_t size);
  ::std::string* mutable_bindemail();
  ::std::string* release_bindemail();
  void set_allocated_bindemail(::std::string* bindemail);

  // optional string BindMobile = 5;
  bool has_bindmobile() const;
  void clear_bindmobile();
  static const int kBindMobileFieldNumber = 5;
  const ::std::string& bindmobile() const;
  void set_bindmobile(const ::std::string& value);
  #if LANG_CXX11
  void set_bindmobile(::std::string&& value);
  #endif
  void set_bindmobile(const char* value);
  void set_bindmobile(const char* value, size_t size);
  ::std::string* mutable_bindmobile();
  ::std::string* release_bindmobile();
  void set_allocated_bindmobile(::std::string* bindmobile);

  // optional string Alias = 6;
  bool has_alias() const;
  void clear_alias();
  static const int kAliasFieldNumber = 6;
  const ::std::string& alias() const;
  void set_alias(const ::std::string& value);
  #if LANG_CXX11
  void set_alias(::std::string&& value);
  #endif
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  ::std::string* mutable_alias();
  ::std::string* release_alias();
  void set_allocated_alias(::std::string* alias);

  // optional string Str11 = 11;
  bool has_str11() const;
  void clear_str11();
  static const int kStr11FieldNumber = 11;
  const ::std::string& str11() const;
  void set_str11(const ::std::string& value);
  #if LANG_CXX11
  void set_str11(::std::string&& value);
  #endif
  void set_str11(const char* value);
  void set_str11(const char* value, size_t size);
  ::std::string* mutable_str11();
  ::std::string* release_str11();
  void set_allocated_str11(::std::string* str11);

  // optional string OfficialUserName = 13;
  bool has_officialusername() const;
  void clear_officialusername();
  static const int kOfficialUserNameFieldNumber = 13;
  const ::std::string& officialusername() const;
  void set_officialusername(const ::std::string& value);
  #if LANG_CXX11
  void set_officialusername(::std::string&& value);
  #endif
  void set_officialusername(const char* value);
  void set_officialusername(const char* value, size_t size);
  ::std::string* mutable_officialusername();
  ::std::string* release_officialusername();
  void set_allocated_officialusername(::std::string* officialusername);

  // optional string OfficialNickName = 14;
  bool has_officialnickname() const;
  void clear_officialnickname();
  static const int kOfficialNickNameFieldNumber = 14;
  const ::std::string& officialnickname() const;
  void set_officialnickname(const ::std::string& value);
  #if LANG_CXX11
  void set_officialnickname(::std::string&& value);
  #endif
  void set_officialnickname(const char* value);
  void set_officialnickname(const char* value, size_t size);
  ::std::string* mutable_officialnickname();
  ::std::string* release_officialnickname();
  void set_allocated_officialnickname(::std::string* officialnickname);

  // optional string FSURL = 16;
  bool has_fsurl() const;
  void clear_fsurl();
  static const int kFSURLFieldNumber = 16;
  const ::std::string& fsurl() const;
  void set_fsurl(const ::std::string& value);
  #if LANG_CXX11
  void set_fsurl(::std::string&& value);
  #endif
  void set_fsurl(const char* value);
  void set_fsurl(const char* value, size_t size);
  ::std::string* mutable_fsurl();
  ::std::string* release_fsurl();
  void set_allocated_fsurl(::std::string* fsurl);

  // optional int32 BindUin = 3;
  bool has_binduin() const;
  void clear_binduin();
  static const int kBindUinFieldNumber = 3;
  ::google::protobuf::int32 binduin() const;
  void set_binduin(::google::protobuf::int32 value);

  // optional int32 Status = 8;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 8;
  ::google::protobuf::int32 status() const;
  void set_status(::google::protobuf::int32 value);

  // optional int32 Int9 = 9;
  bool has_int9() const;
  void clear_int9();
  static const int kInt9FieldNumber = 9;
  ::google::protobuf::int32 int9() const;
  void set_int9(::google::protobuf::int32 value);

  // optional int32 Int10 = 10;
  bool has_int10() const;
  void clear_int10();
  static const int kInt10FieldNumber = 10;
  ::google::protobuf::int32 int10() const;
  void set_int10(::google::protobuf::int32 value);

  // optional int32 Int12 = 12;
  bool has_int12() const;
  void clear_int12();
  static const int kInt12FieldNumber = 12;
  ::google::protobuf::int32 int12() const;
  void set_int12(::google::protobuf::int32 value);

  // optional int32 Int15 = 15;
  bool has_int15() const;
  void clear_int15();
  static const int kInt15FieldNumber = 15;
  ::google::protobuf::int32 int15() const;
  void set_int15(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.AccountInfo)
 private:
  void set_has_username();
  void clear_has_username();
  void set_has_nickname();
  void clear_has_nickname();
  void set_has_binduin();
  void clear_has_binduin();
  void set_has_bindemail();
  void clear_has_bindemail();
  void set_has_bindmobile();
  void clear_has_bindmobile();
  void set_has_alias();
  void clear_has_alias();
  void set_has_status();
  void clear_has_status();
  void set_has_int9();
  void clear_has_int9();
  void set_has_int10();
  void clear_has_int10();
  void set_has_str11();
  void clear_has_str11();
  void set_has_int12();
  void clear_has_int12();
  void set_has_officialusername();
  void clear_has_officialusername();
  void set_has_officialnickname();
  void clear_has_officialnickname();
  void set_has_int15();
  void clear_has_int15();
  void set_has_fsurl();
  void clear_has_fsurl();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::internal::ArenaStringPtr bindemail_;
  ::google::protobuf::internal::ArenaStringPtr bindmobile_;
  ::google::protobuf::internal::ArenaStringPtr alias_;
  ::google::protobuf::internal::ArenaStringPtr str11_;
  ::google::protobuf::internal::ArenaStringPtr officialusername_;
  ::google::protobuf::internal::ArenaStringPtr officialnickname_;
  ::google::protobuf::internal::ArenaStringPtr fsurl_;
  ::google::protobuf::int32 binduin_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::int32 int9_;
  ::google::protobuf::int32 int10_;
  ::google::protobuf::int32 int12_;
  ::google::protobuf::int32 int15_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServerInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.ServerInfo) */ {
 public:
  ServerInfo();
  virtual ~ServerInfo();

  ServerInfo(const ServerInfo& from);

  inline ServerInfo& operator=(const ServerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerInfo& default_instance();

  static inline const ServerInfo* internal_default_instance() {
    return reinterpret_cast<const ServerInfo*>(
               &_ServerInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    150;

  void Swap(ServerInfo* other);

  // implements Message ----------------------------------------------

  inline ServerInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  ServerInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ServerInfo& from);
  void MergeFrom(const ServerInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServerInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .FromCs.NewHostListType NewHostList = 1;
  bool has_newhostlist() const;
  void clear_newhostlist();
  static const int kNewHostListFieldNumber = 1;
  const ::FromCs::NewHostListType& newhostlist() const;
  ::FromCs::NewHostListType* mutable_newhostlist();
  ::FromCs::NewHostListType* release_newhostlist();
  void set_allocated_newhostlist(::FromCs::NewHostListType* newhostlist);

  // optional .FromCs.NetworkControlType NetworkControl = 2;
  bool has_networkcontrol() const;
  void clear_networkcontrol();
  static const int kNetworkControlFieldNumber = 2;
  const ::FromCs::NetworkControlType& networkcontrol() const;
  ::FromCs::NetworkControlType* mutable_networkcontrol();
  ::FromCs::NetworkControlType* release_networkcontrol();
  void set_allocated_networkcontrol(::FromCs::NetworkControlType* networkcontrol);

  // optional .FromCs.sKBuiltinBufferT BuiltinIPList = 3;
  bool has_builtiniplist() const;
  void clear_builtiniplist();
  static const int kBuiltinIPListFieldNumber = 3;
  const ::FromCs::sKBuiltinBufferT& builtiniplist() const;
  ::FromCs::sKBuiltinBufferT* mutable_builtiniplist();
  ::FromCs::sKBuiltinBufferT* release_builtiniplist();
  void set_allocated_builtiniplist(::FromCs::sKBuiltinBufferT* builtiniplist);

  // @@protoc_insertion_point(class_scope:FromCs.ServerInfo)
 private:
  void set_has_newhostlist();
  void clear_has_newhostlist();
  void set_has_networkcontrol();
  void clear_has_networkcontrol();
  void set_has_builtiniplist();
  void clear_has_builtiniplist();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::FromCs::NewHostListType* newhostlist_;
  ::FromCs::NetworkControlType* networkcontrol_;
  ::FromCs::sKBuiltinBufferT* builtiniplist_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SecAuthRegKeySect : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.SecAuthRegKeySect) */ {
 public:
  SecAuthRegKeySect();
  virtual ~SecAuthRegKeySect();

  SecAuthRegKeySect(const SecAuthRegKeySect& from);

  inline SecAuthRegKeySect& operator=(const SecAuthRegKeySect& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SecAuthRegKeySect& default_instance();

  static inline const SecAuthRegKeySect* internal_default_instance() {
    return reinterpret_cast<const SecAuthRegKeySect*>(
               &_SecAuthRegKeySect_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    151;

  void Swap(SecAuthRegKeySect* other);

  // implements Message ----------------------------------------------

  inline SecAuthRegKeySect* New() const PROTOBUF_FINAL { return New(NULL); }

  SecAuthRegKeySect* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SecAuthRegKeySect& from);
  void MergeFrom(const SecAuthRegKeySect& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SecAuthRegKeySect* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .FromCs.sKBuiltinBufferT AutoAuthKey = 1;
  bool has_autoauthkey() const;
  void clear_autoauthkey();
  static const int kAutoAuthKeyFieldNumber = 1;
  const ::FromCs::sKBuiltinBufferT& autoauthkey() const;
  ::FromCs::sKBuiltinBufferT* mutable_autoauthkey();
  ::FromCs::sKBuiltinBufferT* release_autoauthkey();
  void set_allocated_autoauthkey(::FromCs::sKBuiltinBufferT* autoauthkey);

  // optional .FromCs.ECDHKey SvrPubEcdhkey = 2;
  bool has_svrpubecdhkey() const;
  void clear_svrpubecdhkey();
  static const int kSvrPubEcdhkeyFieldNumber = 2;
  const ::FromCs::ECDHKey& svrpubecdhkey() const;
  ::FromCs::ECDHKey* mutable_svrpubecdhkey();
  ::FromCs::ECDHKey* release_svrpubecdhkey();
  void set_allocated_svrpubecdhkey(::FromCs::ECDHKey* svrpubecdhkey);

  // optional .FromCs.sKBuiltinBufferT SessionKey = 3;
  bool has_sessionkey() const;
  void clear_sessionkey();
  static const int kSessionKeyFieldNumber = 3;
  const ::FromCs::sKBuiltinBufferT& sessionkey() const;
  ::FromCs::sKBuiltinBufferT* mutable_sessionkey();
  ::FromCs::sKBuiltinBufferT* release_sessionkey();
  void set_allocated_sessionkey(::FromCs::sKBuiltinBufferT* sessionkey);

  // optional int32 AuthResultFlag = 4;
  bool has_authresultflag() const;
  void clear_authresultflag();
  static const int kAuthResultFlagFieldNumber = 4;
  ::google::protobuf::int32 authresultflag() const;
  void set_authresultflag(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.SecAuthRegKeySect)
 private:
  void set_has_autoauthkey();
  void clear_has_autoauthkey();
  void set_has_svrpubecdhkey();
  void clear_has_svrpubecdhkey();
  void set_has_sessionkey();
  void clear_has_sessionkey();
  void set_has_authresultflag();
  void clear_has_authresultflag();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::FromCs::sKBuiltinBufferT* autoauthkey_;
  ::FromCs::ECDHKey* svrpubecdhkey_;
  ::FromCs::sKBuiltinBufferT* sessionkey_;
  ::google::protobuf::int32 authresultflag_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LoginQRCodeNotifyPkg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.LoginQRCodeNotifyPkg) */ {
 public:
  LoginQRCodeNotifyPkg();
  virtual ~LoginQRCodeNotifyPkg();

  LoginQRCodeNotifyPkg(const LoginQRCodeNotifyPkg& from);

  inline LoginQRCodeNotifyPkg& operator=(const LoginQRCodeNotifyPkg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginQRCodeNotifyPkg& default_instance();

  static inline const LoginQRCodeNotifyPkg* internal_default_instance() {
    return reinterpret_cast<const LoginQRCodeNotifyPkg*>(
               &_LoginQRCodeNotifyPkg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    152;

  void Swap(LoginQRCodeNotifyPkg* other);

  // implements Message ----------------------------------------------

  inline LoginQRCodeNotifyPkg* New() const PROTOBUF_FINAL { return New(NULL); }

  LoginQRCodeNotifyPkg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoginQRCodeNotifyPkg& from);
  void MergeFrom(const LoginQRCodeNotifyPkg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoginQRCodeNotifyPkg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .FromCs.sKBuiltinBufferT NotifyData = 1;
  bool has_notifydata() const;
  void clear_notifydata();
  static const int kNotifyDataFieldNumber = 1;
  const ::FromCs::sKBuiltinBufferT& notifydata() const;
  ::FromCs::sKBuiltinBufferT* mutable_notifydata();
  ::FromCs::sKBuiltinBufferT* release_notifydata();
  void set_allocated_notifydata(::FromCs::sKBuiltinBufferT* notifydata);

  // optional int32 Opcode = 2;
  bool has_opcode() const;
  void clear_opcode();
  static const int kOpcodeFieldNumber = 2;
  ::google::protobuf::int32 opcode() const;
  void set_opcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.LoginQRCodeNotifyPkg)
 private:
  void set_has_notifydata();
  void clear_has_notifydata();
  void set_has_opcode();
  void clear_has_opcode();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::FromCs::sKBuiltinBufferT* notifydata_;
  ::google::protobuf::int32 opcode_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NotifyMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.NotifyMsg) */ {
 public:
  NotifyMsg();
  virtual ~NotifyMsg();

  NotifyMsg(const NotifyMsg& from);

  inline NotifyMsg& operator=(const NotifyMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyMsg& default_instance();

  static inline const NotifyMsg* internal_default_instance() {
    return reinterpret_cast<const NotifyMsg*>(
               &_NotifyMsg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    153;

  void Swap(NotifyMsg* other);

  // implements Message ----------------------------------------------

  inline NotifyMsg* New() const PROTOBUF_FINAL { return New(NULL); }

  NotifyMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NotifyMsg& from);
  void MergeFrom(const NotifyMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NotifyMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Uuid = 1;
  bool has_uuid() const;
  void clear_uuid();
  static const int kUuidFieldNumber = 1;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_uuid(::std::string&& value);
  #endif
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // optional string Username = 3;
  bool has_username() const;
  void clear_username();
  static const int kUsernameFieldNumber = 3;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // optional string Pass = 4;
  bool has_pass() const;
  void clear_pass();
  static const int kPassFieldNumber = 4;
  const ::std::string& pass() const;
  void set_pass(const ::std::string& value);
  #if LANG_CXX11
  void set_pass(::std::string&& value);
  #endif
  void set_pass(const char* value);
  void set_pass(const char* value, size_t size);
  ::std::string* mutable_pass();
  ::std::string* release_pass();
  void set_allocated_pass(::std::string* pass);

  // optional string Imgurl = 5;
  bool has_imgurl() const;
  void clear_imgurl();
  static const int kImgurlFieldNumber = 5;
  const ::std::string& imgurl() const;
  void set_imgurl(const ::std::string& value);
  #if LANG_CXX11
  void set_imgurl(::std::string&& value);
  #endif
  void set_imgurl(const char* value);
  void set_imgurl(const char* value, size_t size);
  ::std::string* mutable_imgurl();
  ::std::string* release_imgurl();
  void set_allocated_imgurl(::std::string* imgurl);

  // optional string Nickname = 7;
  bool has_nickname() const;
  void clear_nickname();
  static const int kNicknameFieldNumber = 7;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  #if LANG_CXX11
  void set_nickname(::std::string&& value);
  #endif
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // optional string Platform = 11;
  bool has_platform() const;
  void clear_platform();
  static const int kPlatformFieldNumber = 11;
  const ::std::string& platform() const;
  void set_platform(const ::std::string& value);
  #if LANG_CXX11
  void set_platform(::std::string&& value);
  #endif
  void set_platform(const char* value);
  void set_platform(const char* value, size_t size);
  ::std::string* mutable_platform();
  ::std::string* release_platform();
  void set_allocated_platform(::std::string* platform);

  // optional int32 Opcode = 2;
  bool has_opcode() const;
  void clear_opcode();
  static const int kOpcodeFieldNumber = 2;
  ::google::protobuf::int32 opcode() const;
  void set_opcode(::google::protobuf::int32 value);

  // optional int32 Unkownint6 = 6;
  bool has_unkownint6() const;
  void clear_unkownint6();
  static const int kUnkownint6FieldNumber = 6;
  ::google::protobuf::int32 unkownint6() const;
  void set_unkownint6(::google::protobuf::int32 value);

  // optional int32 Unkownint8 = 8;
  bool has_unkownint8() const;
  void clear_unkownint8();
  static const int kUnkownint8FieldNumber = 8;
  ::google::protobuf::int32 unkownint8() const;
  void set_unkownint8(::google::protobuf::int32 value);

  // optional int32 Unkownint10 = 10;
  bool has_unkownint10() const;
  void clear_unkownint10();
  static const int kUnkownint10FieldNumber = 10;
  ::google::protobuf::int32 unkownint10() const;
  void set_unkownint10(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.NotifyMsg)
 private:
  void set_has_uuid();
  void clear_has_uuid();
  void set_has_opcode();
  void clear_has_opcode();
  void set_has_username();
  void clear_has_username();
  void set_has_pass();
  void clear_has_pass();
  void set_has_imgurl();
  void clear_has_imgurl();
  void set_has_unkownint6();
  void clear_has_unkownint6();
  void set_has_nickname();
  void clear_has_nickname();
  void set_has_unkownint8();
  void clear_has_unkownint8();
  void set_has_unkownint10();
  void clear_has_unkownint10();
  void set_has_platform();
  void clear_has_platform();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr pass_;
  ::google::protobuf::internal::ArenaStringPtr imgurl_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::internal::ArenaStringPtr platform_;
  ::google::protobuf::int32 opcode_;
  ::google::protobuf::int32 unkownint6_;
  ::google::protobuf::int32 unkownint8_;
  ::google::protobuf::int32 unkownint10_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HTTPHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.HTTPHeader) */ {
 public:
  HTTPHeader();
  virtual ~HTTPHeader();

  HTTPHeader(const HTTPHeader& from);

  inline HTTPHeader& operator=(const HTTPHeader& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HTTPHeader& default_instance();

  static inline const HTTPHeader* internal_default_instance() {
    return reinterpret_cast<const HTTPHeader*>(
               &_HTTPHeader_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    154;

  void Swap(HTTPHeader* other);

  // implements Message ----------------------------------------------

  inline HTTPHeader* New() const PROTOBUF_FINAL { return New(NULL); }

  HTTPHeader* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HTTPHeader& from);
  void MergeFrom(const HTTPHeader& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HTTPHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional string Value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:FromCs.HTTPHeader)
 private:
  void set_has_key();
  void clear_has_key();
  void set_has_value();
  void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeepLinkBitSet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.DeepLinkBitSet) */ {
 public:
  DeepLinkBitSet();
  virtual ~DeepLinkBitSet();

  DeepLinkBitSet(const DeepLinkBitSet& from);

  inline DeepLinkBitSet& operator=(const DeepLinkBitSet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeepLinkBitSet& default_instance();

  static inline const DeepLinkBitSet* internal_default_instance() {
    return reinterpret_cast<const DeepLinkBitSet*>(
               &_DeepLinkBitSet_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    155;

  void Swap(DeepLinkBitSet* other);

  // implements Message ----------------------------------------------

  inline DeepLinkBitSet* New() const PROTOBUF_FINAL { return New(NULL); }

  DeepLinkBitSet* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeepLinkBitSet& from);
  void MergeFrom(const DeepLinkBitSet& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeepLinkBitSet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 BitValue = 1;
  bool has_bitvalue() const;
  void clear_bitvalue();
  static const int kBitValueFieldNumber = 1;
  ::google::protobuf::int64 bitvalue() const;
  void set_bitvalue(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:FromCs.DeepLinkBitSet)
 private:
  void set_has_bitvalue();
  void clear_has_bitvalue();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 bitvalue_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChatRoomMemberData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.ChatRoomMemberData) */ {
 public:
  ChatRoomMemberData();
  virtual ~ChatRoomMemberData();

  ChatRoomMemberData(const ChatRoomMemberData& from);

  inline ChatRoomMemberData& operator=(const ChatRoomMemberData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatRoomMemberData& default_instance();

  static inline const ChatRoomMemberData* internal_default_instance() {
    return reinterpret_cast<const ChatRoomMemberData*>(
               &_ChatRoomMemberData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    156;

  void Swap(ChatRoomMemberData* other);

  // implements Message ----------------------------------------------

  inline ChatRoomMemberData* New() const PROTOBUF_FINAL { return New(NULL); }

  ChatRoomMemberData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChatRoomMemberData& from);
  void MergeFrom(const ChatRoomMemberData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChatRoomMemberData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .FromCs.sKBuiltinBufferT chatroomMember_ = 2;
  bool has_chatroommember_() const;
  void clear_chatroommember_();
  static const int kChatroomMemberFieldNumber = 2;
  const ::FromCs::sKBuiltinBufferT& chatroommember_() const;
  ::FromCs::sKBuiltinBufferT* mutable_chatroommember_();
  ::FromCs::sKBuiltinBufferT* release_chatroommember_();
  void set_allocated_chatroommember_(::FromCs::sKBuiltinBufferT* chatroommember_);

  // optional int32 MemberCount = 1;
  bool has_membercount() const;
  void clear_membercount();
  static const int kMemberCountFieldNumber = 1;
  ::google::protobuf::int32 membercount() const;
  void set_membercount(::google::protobuf::int32 value);

  // optional int32 InfoMask = 3;
  bool has_infomask() const;
  void clear_infomask();
  static const int kInfoMaskFieldNumber = 3;
  ::google::protobuf::int32 infomask() const;
  void set_infomask(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.ChatRoomMemberData)
 private:
  void set_has_membercount();
  void clear_has_membercount();
  void set_has_chatroommember_();
  void clear_has_chatroommember_();
  void set_has_infomask();
  void clear_has_infomask();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::FromCs::sKBuiltinBufferT* chatroommember__;
  ::google::protobuf::int32 membercount_;
  ::google::protobuf::int32 infomask_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChatroomMemberInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.ChatroomMemberInfo) */ {
 public:
  ChatroomMemberInfo();
  virtual ~ChatroomMemberInfo();

  ChatroomMemberInfo(const ChatroomMemberInfo& from);

  inline ChatroomMemberInfo& operator=(const ChatroomMemberInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatroomMemberInfo& default_instance();

  static inline const ChatroomMemberInfo* internal_default_instance() {
    return reinterpret_cast<const ChatroomMemberInfo*>(
               &_ChatroomMemberInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    157;

  void Swap(ChatroomMemberInfo* other);

  // implements Message ----------------------------------------------

  inline ChatroomMemberInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  ChatroomMemberInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChatroomMemberInfo& from);
  void MergeFrom(const ChatroomMemberInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChatroomMemberInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string UserName = 1;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // optional string NickName = 2;
  bool has_nickname() const;
  void clear_nickname();
  static const int kNickNameFieldNumber = 2;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  #if LANG_CXX11
  void set_nickname(::std::string&& value);
  #endif
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // optional string Owner = 7;
  bool has_owner() const;
  void clear_owner();
  static const int kOwnerFieldNumber = 7;
  const ::std::string& owner() const;
  void set_owner(const ::std::string& value);
  #if LANG_CXX11
  void set_owner(::std::string&& value);
  #endif
  void set_owner(const char* value);
  void set_owner(const char* value, size_t size);
  ::std::string* mutable_owner();
  ::std::string* release_owner();
  void set_allocated_owner(::std::string* owner);

  // optional int32 unknoewn = 6;
  bool has_unknoewn() const;
  void clear_unknoewn();
  static const int kUnknoewnFieldNumber = 6;
  ::google::protobuf::int32 unknoewn() const;
  void set_unknoewn(::google::protobuf::int32 value);

  // optional int32 Int8 = 8;
  bool has_int8() const;
  void clear_int8();
  static const int kInt8FieldNumber = 8;
  ::google::protobuf::int32 int8() const;
  void set_int8(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.ChatroomMemberInfo)
 private:
  void set_has_username();
  void clear_has_username();
  void set_has_nickname();
  void clear_has_nickname();
  void set_has_unknoewn();
  void clear_has_unknoewn();
  void set_has_owner();
  void clear_has_owner();
  void set_has_int8();
  void clear_has_int8();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::internal::ArenaStringPtr owner_;
  ::google::protobuf::int32 unknoewn_;
  ::google::protobuf::int32 int8_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ExitChatroomObject : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.ExitChatroomObject) */ {
 public:
  ExitChatroomObject();
  virtual ~ExitChatroomObject();

  ExitChatroomObject(const ExitChatroomObject& from);

  inline ExitChatroomObject& operator=(const ExitChatroomObject& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExitChatroomObject& default_instance();

  static inline const ExitChatroomObject* internal_default_instance() {
    return reinterpret_cast<const ExitChatroomObject*>(
               &_ExitChatroomObject_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    158;

  void Swap(ExitChatroomObject* other);

  // implements Message ----------------------------------------------

  inline ExitChatroomObject* New() const PROTOBUF_FINAL { return New(NULL); }

  ExitChatroomObject* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ExitChatroomObject& from);
  void MergeFrom(const ExitChatroomObject& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ExitChatroomObject* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .FromCs.sKBuiltinstringT Chatroom = 1;
  bool has_chatroom() const;
  void clear_chatroom();
  static const int kChatroomFieldNumber = 1;
  const ::FromCs::sKBuiltinstringT& chatroom() const;
  ::FromCs::sKBuiltinstringT* mutable_chatroom();
  ::FromCs::sKBuiltinstringT* release_chatroom();
  void set_allocated_chatroom(::FromCs::sKBuiltinstringT* chatroom);

  // optional .FromCs.sKBuiltinstringT UserName = 2;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 2;
  const ::FromCs::sKBuiltinstringT& username() const;
  ::FromCs::sKBuiltinstringT* mutable_username();
  ::FromCs::sKBuiltinstringT* release_username();
  void set_allocated_username(::FromCs::sKBuiltinstringT* username);

  // @@protoc_insertion_point(class_scope:FromCs.ExitChatroomObject)
 private:
  void set_has_chatroom();
  void clear_has_chatroom();
  void set_has_username();
  void clear_has_username();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::FromCs::sKBuiltinstringT* chatroom_;
  ::FromCs::sKBuiltinstringT* username_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ExtDeviceLoginConfirmErrorRet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.ExtDeviceLoginConfirmErrorRet) */ {
 public:
  ExtDeviceLoginConfirmErrorRet();
  virtual ~ExtDeviceLoginConfirmErrorRet();

  ExtDeviceLoginConfirmErrorRet(const ExtDeviceLoginConfirmErrorRet& from);

  inline ExtDeviceLoginConfirmErrorRet& operator=(const ExtDeviceLoginConfirmErrorRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExtDeviceLoginConfirmErrorRet& default_instance();

  static inline const ExtDeviceLoginConfirmErrorRet* internal_default_instance() {
    return reinterpret_cast<const ExtDeviceLoginConfirmErrorRet*>(
               &_ExtDeviceLoginConfirmErrorRet_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    159;

  void Swap(ExtDeviceLoginConfirmErrorRet* other);

  // implements Message ----------------------------------------------

  inline ExtDeviceLoginConfirmErrorRet* New() const PROTOBUF_FINAL { return New(NULL); }

  ExtDeviceLoginConfirmErrorRet* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ExtDeviceLoginConfirmErrorRet& from);
  void MergeFrom(const ExtDeviceLoginConfirmErrorRet& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ExtDeviceLoginConfirmErrorRet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ContentStr = 2;
  bool has_contentstr() const;
  void clear_contentstr();
  static const int kContentStrFieldNumber = 2;
  const ::std::string& contentstr() const;
  void set_contentstr(const ::std::string& value);
  #if LANG_CXX11
  void set_contentstr(::std::string&& value);
  #endif
  void set_contentstr(const char* value);
  void set_contentstr(const char* value, size_t size);
  ::std::string* mutable_contentstr();
  ::std::string* release_contentstr();
  void set_allocated_contentstr(::std::string* contentstr);

  // optional int32 IconType = 1;
  bool has_icontype() const;
  void clear_icontype();
  static const int kIconTypeFieldNumber = 1;
  ::google::protobuf::int32 icontype() const;
  void set_icontype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.ExtDeviceLoginConfirmErrorRet)
 private:
  void set_has_icontype();
  void clear_has_icontype();
  void set_has_contentstr();
  void clear_has_contentstr();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr contentstr_;
  ::google::protobuf::int32 icontype_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ExtDeviceLoginConfirmExpiredRet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.ExtDeviceLoginConfirmExpiredRet) */ {
 public:
  ExtDeviceLoginConfirmExpiredRet();
  virtual ~ExtDeviceLoginConfirmExpiredRet();

  ExtDeviceLoginConfirmExpiredRet(const ExtDeviceLoginConfirmExpiredRet& from);

  inline ExtDeviceLoginConfirmExpiredRet& operator=(const ExtDeviceLoginConfirmExpiredRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExtDeviceLoginConfirmExpiredRet& default_instance();

  static inline const ExtDeviceLoginConfirmExpiredRet* internal_default_instance() {
    return reinterpret_cast<const ExtDeviceLoginConfirmExpiredRet*>(
               &_ExtDeviceLoginConfirmExpiredRet_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    160;

  void Swap(ExtDeviceLoginConfirmExpiredRet* other);

  // implements Message ----------------------------------------------

  inline ExtDeviceLoginConfirmExpiredRet* New() const PROTOBUF_FINAL { return New(NULL); }

  ExtDeviceLoginConfirmExpiredRet* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ExtDeviceLoginConfirmExpiredRet& from);
  void MergeFrom(const ExtDeviceLoginConfirmExpiredRet& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ExtDeviceLoginConfirmExpiredRet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ContentStr = 2;
  bool has_contentstr() const;
  void clear_contentstr();
  static const int kContentStrFieldNumber = 2;
  const ::std::string& contentstr() const;
  void set_contentstr(const ::std::string& value);
  #if LANG_CXX11
  void set_contentstr(::std::string&& value);
  #endif
  void set_contentstr(const char* value);
  void set_contentstr(const char* value, size_t size);
  ::std::string* mutable_contentstr();
  ::std::string* release_contentstr();
  void set_allocated_contentstr(::std::string* contentstr);

  // optional string ButtonStr = 3;
  bool has_buttonstr() const;
  void clear_buttonstr();
  static const int kButtonStrFieldNumber = 3;
  const ::std::string& buttonstr() const;
  void set_buttonstr(const ::std::string& value);
  #if LANG_CXX11
  void set_buttonstr(::std::string&& value);
  #endif
  void set_buttonstr(const char* value);
  void set_buttonstr(const char* value, size_t size);
  ::std::string* mutable_buttonstr();
  ::std::string* release_buttonstr();
  void set_allocated_buttonstr(::std::string* buttonstr);

  // optional string BigHeadImgUrl = 4;
  bool has_bigheadimgurl() const;
  void clear_bigheadimgurl();
  static const int kBigHeadImgUrlFieldNumber = 4;
  const ::std::string& bigheadimgurl() const;
  void set_bigheadimgurl(const ::std::string& value);
  #if LANG_CXX11
  void set_bigheadimgurl(::std::string&& value);
  #endif
  void set_bigheadimgurl(const char* value);
  void set_bigheadimgurl(const char* value, size_t size);
  ::std::string* mutable_bigheadimgurl();
  ::std::string* release_bigheadimgurl();
  void set_allocated_bigheadimgurl(::std::string* bigheadimgurl);

  // optional string SmallHeadImgUrl = 5;
  bool has_smallheadimgurl() const;
  void clear_smallheadimgurl();
  static const int kSmallHeadImgUrlFieldNumber = 5;
  const ::std::string& smallheadimgurl() const;
  void set_smallheadimgurl(const ::std::string& value);
  #if LANG_CXX11
  void set_smallheadimgurl(::std::string&& value);
  #endif
  void set_smallheadimgurl(const char* value);
  void set_smallheadimgurl(const char* value, size_t size);
  ::std::string* mutable_smallheadimgurl();
  ::std::string* release_smallheadimgurl();
  void set_allocated_smallheadimgurl(::std::string* smallheadimgurl);

  // optional int32 IconType = 1;
  bool has_icontype() const;
  void clear_icontype();
  static const int kIconTypeFieldNumber = 1;
  ::google::protobuf::int32 icontype() const;
  void set_icontype(::google::protobuf::int32 value);

  // optional int32 unknoewn = 6;
  bool has_unknoewn() const;
  void clear_unknoewn();
  static const int kUnknoewnFieldNumber = 6;
  ::google::protobuf::int32 unknoewn() const;
  void set_unknoewn(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.ExtDeviceLoginConfirmExpiredRet)
 private:
  void set_has_icontype();
  void clear_has_icontype();
  void set_has_contentstr();
  void clear_has_contentstr();
  void set_has_bigheadimgurl();
  void clear_has_bigheadimgurl();
  void set_has_smallheadimgurl();
  void clear_has_smallheadimgurl();
  void set_has_unknoewn();
  void clear_has_unknoewn();
  void set_has_buttonstr();
  void clear_has_buttonstr();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr contentstr_;
  ::google::protobuf::internal::ArenaStringPtr buttonstr_;
  ::google::protobuf::internal::ArenaStringPtr bigheadimgurl_;
  ::google::protobuf::internal::ArenaStringPtr smallheadimgurl_;
  ::google::protobuf::int32 icontype_;
  ::google::protobuf::int32 unknoewn_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ExtDeviceLoginConfirmOKRet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FromCs.ExtDeviceLoginConfirmOKRet) */ {
 public:
  ExtDeviceLoginConfirmOKRet();
  virtual ~ExtDeviceLoginConfirmOKRet();

  ExtDeviceLoginConfirmOKRet(const ExtDeviceLoginConfirmOKRet& from);

  inline ExtDeviceLoginConfirmOKRet& operator=(const ExtDeviceLoginConfirmOKRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExtDeviceLoginConfirmOKRet& default_instance();

  static inline const ExtDeviceLoginConfirmOKRet* internal_default_instance() {
    return reinterpret_cast<const ExtDeviceLoginConfirmOKRet*>(
               &_ExtDeviceLoginConfirmOKRet_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    161;

  void Swap(ExtDeviceLoginConfirmOKRet* other);

  // implements Message ----------------------------------------------

  inline ExtDeviceLoginConfirmOKRet* New() const PROTOBUF_FINAL { return New(NULL); }

  ExtDeviceLoginConfirmOKRet* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ExtDeviceLoginConfirmOKRet& from);
  void MergeFrom(const ExtDeviceLoginConfirmOKRet& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ExtDeviceLoginConfirmOKRet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ContentStr = 2;
  bool has_contentstr() const;
  void clear_contentstr();
  static const int kContentStrFieldNumber = 2;
  const ::std::string& contentstr() const;
  void set_contentstr(const ::std::string& value);
  #if LANG_CXX11
  void set_contentstr(::std::string&& value);
  #endif
  void set_contentstr(const char* value);
  void set_contentstr(const char* value, size_t size);
  ::std::string* mutable_contentstr();
  ::std::string* release_contentstr();
  void set_allocated_contentstr(::std::string* contentstr);

  // optional string ButtonOKStr = 3;
  bool has_buttonokstr() const;
  void clear_buttonokstr();
  static const int kButtonOKStrFieldNumber = 3;
  const ::std::string& buttonokstr() const;
  void set_buttonokstr(const ::std::string& value);
  #if LANG_CXX11
  void set_buttonokstr(::std::string&& value);
  #endif
  void set_buttonokstr(const char* value);
  void set_buttonokstr(const char* value, size_t size);
  ::std::string* mutable_buttonokstr();
  ::std::string* release_buttonokstr();
  void set_allocated_buttonokstr(::std::string* buttonokstr);

  // optional string ButtonCancelStr = 4;
  bool has_buttoncancelstr() const;
  void clear_buttoncancelstr();
  static const int kButtonCancelStrFieldNumber = 4;
  const ::std::string& buttoncancelstr() const;
  void set_buttoncancelstr(const ::std::string& value);
  #if LANG_CXX11
  void set_buttoncancelstr(::std::string&& value);
  #endif
  void set_buttoncancelstr(const char* value);
  void set_buttoncancelstr(const char* value, size_t size);
  ::std::string* mutable_buttoncancelstr();
  ::std::string* release_buttoncancelstr();
  void set_allocated_buttoncancelstr(::std::string* buttoncancelstr);

  // optional string LoginedDevTip = 7;
  bool has_logineddevtip() const;
  void clear_logineddevtip();
  static const int kLoginedDevTipFieldNumber = 7;
  const ::std::string& logineddevtip() const;
  void set_logineddevtip(const ::std::string& value);
  #if LANG_CXX11
  void set_logineddevtip(::std::string&& value);
  #endif
  void set_logineddevtip(const char* value);
  void set_logineddevtip(const char* value, size_t size);
  ::std::string* mutable_logineddevtip();
  ::std::string* release_logineddevtip();
  void set_allocated_logineddevtip(::std::string* logineddevtip);

  // optional string TitleStr = 8;
  bool has_titlestr() const;
  void clear_titlestr();
  static const int kTitleStrFieldNumber = 8;
  const ::std::string& titlestr() const;
  void set_titlestr(const ::std::string& value);
  #if LANG_CXX11
  void set_titlestr(::std::string&& value);
  #endif
  void set_titlestr(const char* value);
  void set_titlestr(const char* value, size_t size);
  ::std::string* mutable_titlestr();
  ::std::string* release_titlestr();
  void set_allocated_titlestr(::std::string* titlestr);

  // optional string WarmingStr = 9;
  bool has_warmingstr() const;
  void clear_warmingstr();
  static const int kWarmingStrFieldNumber = 9;
  const ::std::string& warmingstr() const;
  void set_warmingstr(const ::std::string& value);
  #if LANG_CXX11
  void set_warmingstr(::std::string&& value);
  #endif
  void set_warmingstr(const char* value);
  void set_warmingstr(const char* value, size_t size);
  ::std::string* mutable_warmingstr();
  ::std::string* release_warmingstr();
  void set_allocated_warmingstr(::std::string* warmingstr);

  // optional int32 IconType = 1;
  bool has_icontype() const;
  void clear_icontype();
  static const int kIconTypeFieldNumber = 1;
  ::google::protobuf::int32 icontype() const;
  void set_icontype(::google::protobuf::int32 value);

  // optional int32 ReqSessionLimit = 5;
  bool has_reqsessionlimit() const;
  void clear_reqsessionlimit();
  static const int kReqSessionLimitFieldNumber = 5;
  ::google::protobuf::int32 reqsessionlimit() const;
  void set_reqsessionlimit(::google::protobuf::int32 value);

  // optional int32 ConfirmTimeOut = 6;
  bool has_confirmtimeout() const;
  void clear_confirmtimeout();
  static const int kConfirmTimeOutFieldNumber = 6;
  ::google::protobuf::int32 confirmtimeout() const;
  void set_confirmtimeout(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FromCs.ExtDeviceLoginConfirmOKRet)
 private:
  void set_has_icontype();
  void clear_has_icontype();
  void set_has_contentstr();
  void clear_has_contentstr();
  void set_has_buttonokstr();
  void clear_has_buttonokstr();
  void set_has_buttoncancelstr();
  void clear_has_buttoncancelstr();
  void set_has_reqsessionlimit();
  void clear_has_reqsessionlimit();
  void set_has_confirmtimeout();
  void clear_has_confirmtimeout();
  void set_has_logineddevtip();
  void clear_has_logineddevtip();
  void set_has_titlestr();
  void clear_has_titlestr();
  void set_has_warmingstr();
  void clear_has_warmingstr();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr contentstr_;
  ::google::protobuf::internal::ArenaStringPtr buttonokstr_;
  ::google::protobuf::internal::ArenaStringPtr buttoncancelstr_;
  ::google::protobuf::internal::ArenaStringPtr logineddevtip_;
  ::google::protobuf::internal::ArenaStringPtr titlestr_;
  ::google::protobuf::internal::ArenaStringPtr warmingstr_;
  ::google::protobuf::int32 icontype_;
  ::google::protobuf::int32 reqsessionlimit_;
  ::google::protobuf::int32 confirmtimeout_;
  friend struct protobuf_WeDA_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// GHMenu

// required .FromCs.BaseRequest base = 1;
inline bool GHMenu::has_base() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GHMenu::set_has_base() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GHMenu::clear_has_base() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GHMenu::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseRequest::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseRequest& GHMenu::base() const {
  // @@protoc_insertion_point(field_get:FromCs.GHMenu.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseRequest::internal_default_instance();
}
inline ::FromCs::BaseRequest* GHMenu::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.GHMenu.base)
  return base_;
}
inline ::FromCs::BaseRequest* GHMenu::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.GHMenu.base)
  clear_has_base();
  ::FromCs::BaseRequest* temp = base_;
  base_ = NULL;
  return temp;
}
inline void GHMenu::set_allocated_base(::FromCs::BaseRequest* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.GHMenu.base)
}

// optional int32 opcod = 2;
inline bool GHMenu::has_opcod() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GHMenu::set_has_opcod() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GHMenu::clear_has_opcod() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GHMenu::clear_opcod() {
  opcod_ = 0;
  clear_has_opcod();
}
inline ::google::protobuf::int32 GHMenu::opcod() const {
  // @@protoc_insertion_point(field_get:FromCs.GHMenu.opcod)
  return opcod_;
}
inline void GHMenu::set_opcod(::google::protobuf::int32 value) {
  set_has_opcod();
  opcod_ = value;
  // @@protoc_insertion_point(field_set:FromCs.GHMenu.opcod)
}

// optional string cmd = 3;
inline bool GHMenu::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GHMenu::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GHMenu::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GHMenu::clear_cmd() {
  cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cmd();
}
inline const ::std::string& GHMenu::cmd() const {
  // @@protoc_insertion_point(field_get:FromCs.GHMenu.cmd)
  return cmd_.GetNoArena();
}
inline void GHMenu::set_cmd(const ::std::string& value) {
  set_has_cmd();
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.GHMenu.cmd)
}
#if LANG_CXX11
inline void GHMenu::set_cmd(::std::string&& value) {
  set_has_cmd();
  cmd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.GHMenu.cmd)
}
#endif
inline void GHMenu::set_cmd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cmd();
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.GHMenu.cmd)
}
inline void GHMenu::set_cmd(const char* value, size_t size) {
  set_has_cmd();
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.GHMenu.cmd)
}
inline ::std::string* GHMenu::mutable_cmd() {
  set_has_cmd();
  // @@protoc_insertion_point(field_mutable:FromCs.GHMenu.cmd)
  return cmd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GHMenu::release_cmd() {
  // @@protoc_insertion_point(field_release:FromCs.GHMenu.cmd)
  clear_has_cmd();
  return cmd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GHMenu::set_allocated_cmd(::std::string* cmd) {
  if (cmd != NULL) {
    set_has_cmd();
  } else {
    clear_has_cmd();
  }
  cmd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cmd);
  // @@protoc_insertion_point(field_set_allocated:FromCs.GHMenu.cmd)
}

// optional string ghid = 4;
inline bool GHMenu::has_ghid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GHMenu::set_has_ghid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GHMenu::clear_has_ghid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GHMenu::clear_ghid() {
  ghid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ghid();
}
inline const ::std::string& GHMenu::ghid() const {
  // @@protoc_insertion_point(field_get:FromCs.GHMenu.ghid)
  return ghid_.GetNoArena();
}
inline void GHMenu::set_ghid(const ::std::string& value) {
  set_has_ghid();
  ghid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.GHMenu.ghid)
}
#if LANG_CXX11
inline void GHMenu::set_ghid(::std::string&& value) {
  set_has_ghid();
  ghid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.GHMenu.ghid)
}
#endif
inline void GHMenu::set_ghid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ghid();
  ghid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.GHMenu.ghid)
}
inline void GHMenu::set_ghid(const char* value, size_t size) {
  set_has_ghid();
  ghid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.GHMenu.ghid)
}
inline ::std::string* GHMenu::mutable_ghid() {
  set_has_ghid();
  // @@protoc_insertion_point(field_mutable:FromCs.GHMenu.ghid)
  return ghid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GHMenu::release_ghid() {
  // @@protoc_insertion_point(field_release:FromCs.GHMenu.ghid)
  clear_has_ghid();
  return ghid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GHMenu::set_allocated_ghid(::std::string* ghid) {
  if (ghid != NULL) {
    set_has_ghid();
  } else {
    clear_has_ghid();
  }
  ghid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ghid);
  // @@protoc_insertion_point(field_set_allocated:FromCs.GHMenu.ghid)
}

// -------------------------------------------------------------------

// AuthRequest

// required .FromCs.BaseRequest base = 1;
inline bool AuthRequest::has_base() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void AuthRequest::set_has_base() {
  _has_bits_[0] |= 0x00020000u;
}
inline void AuthRequest::clear_has_base() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void AuthRequest::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseRequest::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseRequest& AuthRequest::base() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthRequest.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseRequest::internal_default_instance();
}
inline ::FromCs::BaseRequest* AuthRequest::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.AuthRequest.base)
  return base_;
}
inline ::FromCs::BaseRequest* AuthRequest::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.AuthRequest.base)
  clear_has_base();
  ::FromCs::BaseRequest* temp = base_;
  base_ = NULL;
  return temp;
}
inline void AuthRequest::set_allocated_base(::FromCs::BaseRequest* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthRequest.base)
}

// required .FromCs.sKBuiltinstringT UserName = 2;
inline bool AuthRequest::has_username() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void AuthRequest::set_has_username() {
  _has_bits_[0] |= 0x00040000u;
}
inline void AuthRequest::clear_has_username() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void AuthRequest::clear_username() {
  if (username_ != NULL) username_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_username();
}
inline const ::FromCs::sKBuiltinstringT& AuthRequest::username() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthRequest.UserName)
  return username_ != NULL ? *username_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* AuthRequest::mutable_username() {
  set_has_username();
  if (username_ == NULL) {
    username_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.AuthRequest.UserName)
  return username_;
}
inline ::FromCs::sKBuiltinstringT* AuthRequest::release_username() {
  // @@protoc_insertion_point(field_release:FromCs.AuthRequest.UserName)
  clear_has_username();
  ::FromCs::sKBuiltinstringT* temp = username_;
  username_ = NULL;
  return temp;
}
inline void AuthRequest::set_allocated_username(::FromCs::sKBuiltinstringT* username) {
  delete username_;
  username_ = username;
  if (username) {
    set_has_username();
  } else {
    clear_has_username();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthRequest.UserName)
}

// required .FromCs.sKBuiltinstringT Pwd = 3;
inline bool AuthRequest::has_pwd() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void AuthRequest::set_has_pwd() {
  _has_bits_[0] |= 0x00080000u;
}
inline void AuthRequest::clear_has_pwd() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void AuthRequest::clear_pwd() {
  if (pwd_ != NULL) pwd_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_pwd();
}
inline const ::FromCs::sKBuiltinstringT& AuthRequest::pwd() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthRequest.Pwd)
  return pwd_ != NULL ? *pwd_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* AuthRequest::mutable_pwd() {
  set_has_pwd();
  if (pwd_ == NULL) {
    pwd_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.AuthRequest.Pwd)
  return pwd_;
}
inline ::FromCs::sKBuiltinstringT* AuthRequest::release_pwd() {
  // @@protoc_insertion_point(field_release:FromCs.AuthRequest.Pwd)
  clear_has_pwd();
  ::FromCs::sKBuiltinstringT* temp = pwd_;
  pwd_ = NULL;
  return temp;
}
inline void AuthRequest::set_allocated_pwd(::FromCs::sKBuiltinstringT* pwd) {
  delete pwd_;
  pwd_ = pwd;
  if (pwd) {
    set_has_pwd();
  } else {
    clear_has_pwd();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthRequest.Pwd)
}

// required .FromCs.sKBuiltinstringT ImgSid = 4;
inline bool AuthRequest::has_imgsid() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void AuthRequest::set_has_imgsid() {
  _has_bits_[0] |= 0x00100000u;
}
inline void AuthRequest::clear_has_imgsid() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void AuthRequest::clear_imgsid() {
  if (imgsid_ != NULL) imgsid_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_imgsid();
}
inline const ::FromCs::sKBuiltinstringT& AuthRequest::imgsid() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthRequest.ImgSid)
  return imgsid_ != NULL ? *imgsid_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* AuthRequest::mutable_imgsid() {
  set_has_imgsid();
  if (imgsid_ == NULL) {
    imgsid_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.AuthRequest.ImgSid)
  return imgsid_;
}
inline ::FromCs::sKBuiltinstringT* AuthRequest::release_imgsid() {
  // @@protoc_insertion_point(field_release:FromCs.AuthRequest.ImgSid)
  clear_has_imgsid();
  ::FromCs::sKBuiltinstringT* temp = imgsid_;
  imgsid_ = NULL;
  return temp;
}
inline void AuthRequest::set_allocated_imgsid(::FromCs::sKBuiltinstringT* imgsid) {
  delete imgsid_;
  imgsid_ = imgsid;
  if (imgsid) {
    set_has_imgsid();
  } else {
    clear_has_imgsid();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthRequest.ImgSid)
}

// required .FromCs.sKBuiltinstringT ImgCode = 5;
inline bool AuthRequest::has_imgcode() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void AuthRequest::set_has_imgcode() {
  _has_bits_[0] |= 0x00200000u;
}
inline void AuthRequest::clear_has_imgcode() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void AuthRequest::clear_imgcode() {
  if (imgcode_ != NULL) imgcode_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_imgcode();
}
inline const ::FromCs::sKBuiltinstringT& AuthRequest::imgcode() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthRequest.ImgCode)
  return imgcode_ != NULL ? *imgcode_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* AuthRequest::mutable_imgcode() {
  set_has_imgcode();
  if (imgcode_ == NULL) {
    imgcode_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.AuthRequest.ImgCode)
  return imgcode_;
}
inline ::FromCs::sKBuiltinstringT* AuthRequest::release_imgcode() {
  // @@protoc_insertion_point(field_release:FromCs.AuthRequest.ImgCode)
  clear_has_imgcode();
  ::FromCs::sKBuiltinstringT* temp = imgcode_;
  imgcode_ = NULL;
  return temp;
}
inline void AuthRequest::set_allocated_imgcode(::FromCs::sKBuiltinstringT* imgcode) {
  delete imgcode_;
  imgcode_ = imgcode;
  if (imgcode) {
    set_has_imgcode();
  } else {
    clear_has_imgcode();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthRequest.ImgCode)
}

// optional string Pwd2 = 6;
inline bool AuthRequest::has_pwd2() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuthRequest::set_has_pwd2() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuthRequest::clear_has_pwd2() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuthRequest::clear_pwd2() {
  pwd2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pwd2();
}
inline const ::std::string& AuthRequest::pwd2() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthRequest.Pwd2)
  return pwd2_.GetNoArena();
}
inline void AuthRequest::set_pwd2(const ::std::string& value) {
  set_has_pwd2();
  pwd2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.AuthRequest.Pwd2)
}
#if LANG_CXX11
inline void AuthRequest::set_pwd2(::std::string&& value) {
  set_has_pwd2();
  pwd2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.AuthRequest.Pwd2)
}
#endif
inline void AuthRequest::set_pwd2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pwd2();
  pwd2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.AuthRequest.Pwd2)
}
inline void AuthRequest::set_pwd2(const char* value, size_t size) {
  set_has_pwd2();
  pwd2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.AuthRequest.Pwd2)
}
inline ::std::string* AuthRequest::mutable_pwd2() {
  set_has_pwd2();
  // @@protoc_insertion_point(field_mutable:FromCs.AuthRequest.Pwd2)
  return pwd2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthRequest::release_pwd2() {
  // @@protoc_insertion_point(field_release:FromCs.AuthRequest.Pwd2)
  clear_has_pwd2();
  return pwd2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthRequest::set_allocated_pwd2(::std::string* pwd2) {
  if (pwd2 != NULL) {
    set_has_pwd2();
  } else {
    clear_has_pwd2();
  }
  pwd2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd2);
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthRequest.Pwd2)
}

// optional int32 BuiltinIPSeq = 7;
inline bool AuthRequest::has_builtinipseq() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void AuthRequest::set_has_builtinipseq() {
  _has_bits_[0] |= 0x02000000u;
}
inline void AuthRequest::clear_has_builtinipseq() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void AuthRequest::clear_builtinipseq() {
  builtinipseq_ = 0;
  clear_has_builtinipseq();
}
inline ::google::protobuf::int32 AuthRequest::builtinipseq() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthRequest.BuiltinIPSeq)
  return builtinipseq_;
}
inline void AuthRequest::set_builtinipseq(::google::protobuf::int32 value) {
  set_has_builtinipseq();
  builtinipseq_ = value;
  // @@protoc_insertion_point(field_set:FromCs.AuthRequest.BuiltinIPSeq)
}

// optional string extPwd = 8;
inline bool AuthRequest::has_extpwd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AuthRequest::set_has_extpwd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AuthRequest::clear_has_extpwd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AuthRequest::clear_extpwd() {
  extpwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_extpwd();
}
inline const ::std::string& AuthRequest::extpwd() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthRequest.extPwd)
  return extpwd_.GetNoArena();
}
inline void AuthRequest::set_extpwd(const ::std::string& value) {
  set_has_extpwd();
  extpwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.AuthRequest.extPwd)
}
#if LANG_CXX11
inline void AuthRequest::set_extpwd(::std::string&& value) {
  set_has_extpwd();
  extpwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.AuthRequest.extPwd)
}
#endif
inline void AuthRequest::set_extpwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_extpwd();
  extpwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.AuthRequest.extPwd)
}
inline void AuthRequest::set_extpwd(const char* value, size_t size) {
  set_has_extpwd();
  extpwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.AuthRequest.extPwd)
}
inline ::std::string* AuthRequest::mutable_extpwd() {
  set_has_extpwd();
  // @@protoc_insertion_point(field_mutable:FromCs.AuthRequest.extPwd)
  return extpwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthRequest::release_extpwd() {
  // @@protoc_insertion_point(field_release:FromCs.AuthRequest.extPwd)
  clear_has_extpwd();
  return extpwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthRequest::set_allocated_extpwd(::std::string* extpwd) {
  if (extpwd != NULL) {
    set_has_extpwd();
  } else {
    clear_has_extpwd();
  }
  extpwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extpwd);
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthRequest.extPwd)
}

// optional string extPwd2 = 9;
inline bool AuthRequest::has_extpwd2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AuthRequest::set_has_extpwd2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AuthRequest::clear_has_extpwd2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AuthRequest::clear_extpwd2() {
  extpwd2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_extpwd2();
}
inline const ::std::string& AuthRequest::extpwd2() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthRequest.extPwd2)
  return extpwd2_.GetNoArena();
}
inline void AuthRequest::set_extpwd2(const ::std::string& value) {
  set_has_extpwd2();
  extpwd2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.AuthRequest.extPwd2)
}
#if LANG_CXX11
inline void AuthRequest::set_extpwd2(::std::string&& value) {
  set_has_extpwd2();
  extpwd2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.AuthRequest.extPwd2)
}
#endif
inline void AuthRequest::set_extpwd2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_extpwd2();
  extpwd2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.AuthRequest.extPwd2)
}
inline void AuthRequest::set_extpwd2(const char* value, size_t size) {
  set_has_extpwd2();
  extpwd2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.AuthRequest.extPwd2)
}
inline ::std::string* AuthRequest::mutable_extpwd2() {
  set_has_extpwd2();
  // @@protoc_insertion_point(field_mutable:FromCs.AuthRequest.extPwd2)
  return extpwd2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthRequest::release_extpwd2() {
  // @@protoc_insertion_point(field_release:FromCs.AuthRequest.extPwd2)
  clear_has_extpwd2();
  return extpwd2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthRequest::set_allocated_extpwd2(::std::string* extpwd2) {
  if (extpwd2 != NULL) {
    set_has_extpwd2();
  } else {
    clear_has_extpwd2();
  }
  extpwd2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extpwd2);
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthRequest.extPwd2)
}

// optional string TimeZone = 10;
inline bool AuthRequest::has_timezone() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AuthRequest::set_has_timezone() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AuthRequest::clear_has_timezone() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AuthRequest::clear_timezone() {
  timezone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_timezone();
}
inline const ::std::string& AuthRequest::timezone() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthRequest.TimeZone)
  return timezone_.GetNoArena();
}
inline void AuthRequest::set_timezone(const ::std::string& value) {
  set_has_timezone();
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.AuthRequest.TimeZone)
}
#if LANG_CXX11
inline void AuthRequest::set_timezone(::std::string&& value) {
  set_has_timezone();
  timezone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.AuthRequest.TimeZone)
}
#endif
inline void AuthRequest::set_timezone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_timezone();
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.AuthRequest.TimeZone)
}
inline void AuthRequest::set_timezone(const char* value, size_t size) {
  set_has_timezone();
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.AuthRequest.TimeZone)
}
inline ::std::string* AuthRequest::mutable_timezone() {
  set_has_timezone();
  // @@protoc_insertion_point(field_mutable:FromCs.AuthRequest.TimeZone)
  return timezone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthRequest::release_timezone() {
  // @@protoc_insertion_point(field_release:FromCs.AuthRequest.TimeZone)
  clear_has_timezone();
  return timezone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthRequest::set_allocated_timezone(::std::string* timezone) {
  if (timezone != NULL) {
    set_has_timezone();
  } else {
    clear_has_timezone();
  }
  timezone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timezone);
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthRequest.TimeZone)
}

// optional string Language = 11;
inline bool AuthRequest::has_language() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AuthRequest::set_has_language() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AuthRequest::clear_has_language() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AuthRequest::clear_language() {
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_language();
}
inline const ::std::string& AuthRequest::language() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthRequest.Language)
  return language_.GetNoArena();
}
inline void AuthRequest::set_language(const ::std::string& value) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.AuthRequest.Language)
}
#if LANG_CXX11
inline void AuthRequest::set_language(::std::string&& value) {
  set_has_language();
  language_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.AuthRequest.Language)
}
#endif
inline void AuthRequest::set_language(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.AuthRequest.Language)
}
inline void AuthRequest::set_language(const char* value, size_t size) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.AuthRequest.Language)
}
inline ::std::string* AuthRequest::mutable_language() {
  set_has_language();
  // @@protoc_insertion_point(field_mutable:FromCs.AuthRequest.Language)
  return language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthRequest::release_language() {
  // @@protoc_insertion_point(field_release:FromCs.AuthRequest.Language)
  clear_has_language();
  return language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthRequest::set_allocated_language(::std::string* language) {
  if (language != NULL) {
    set_has_language();
  } else {
    clear_has_language();
  }
  language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthRequest.Language)
}

// optional string IMEI = 12;
inline bool AuthRequest::has_imei() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AuthRequest::set_has_imei() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AuthRequest::clear_has_imei() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AuthRequest::clear_imei() {
  imei_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_imei();
}
inline const ::std::string& AuthRequest::imei() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthRequest.IMEI)
  return imei_.GetNoArena();
}
inline void AuthRequest::set_imei(const ::std::string& value) {
  set_has_imei();
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.AuthRequest.IMEI)
}
#if LANG_CXX11
inline void AuthRequest::set_imei(::std::string&& value) {
  set_has_imei();
  imei_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.AuthRequest.IMEI)
}
#endif
inline void AuthRequest::set_imei(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_imei();
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.AuthRequest.IMEI)
}
inline void AuthRequest::set_imei(const char* value, size_t size) {
  set_has_imei();
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.AuthRequest.IMEI)
}
inline ::std::string* AuthRequest::mutable_imei() {
  set_has_imei();
  // @@protoc_insertion_point(field_mutable:FromCs.AuthRequest.IMEI)
  return imei_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthRequest::release_imei() {
  // @@protoc_insertion_point(field_release:FromCs.AuthRequest.IMEI)
  clear_has_imei();
  return imei_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthRequest::set_allocated_imei(::std::string* imei) {
  if (imei != NULL) {
    set_has_imei();
  } else {
    clear_has_imei();
  }
  imei_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imei);
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthRequest.IMEI)
}

// optional int32 Channel = 13;
inline bool AuthRequest::has_channel() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void AuthRequest::set_has_channel() {
  _has_bits_[0] |= 0x04000000u;
}
inline void AuthRequest::clear_has_channel() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void AuthRequest::clear_channel() {
  channel_ = 0;
  clear_has_channel();
}
inline ::google::protobuf::int32 AuthRequest::channel() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthRequest.Channel)
  return channel_;
}
inline void AuthRequest::set_channel(::google::protobuf::int32 value) {
  set_has_channel();
  channel_ = value;
  // @@protoc_insertion_point(field_set:FromCs.AuthRequest.Channel)
}

// optional string IPhoneVer = 14;
inline bool AuthRequest::has_iphonever() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AuthRequest::set_has_iphonever() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AuthRequest::clear_has_iphonever() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AuthRequest::clear_iphonever() {
  iphonever_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_iphonever();
}
inline const ::std::string& AuthRequest::iphonever() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthRequest.IPhoneVer)
  return iphonever_.GetNoArena();
}
inline void AuthRequest::set_iphonever(const ::std::string& value) {
  set_has_iphonever();
  iphonever_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.AuthRequest.IPhoneVer)
}
#if LANG_CXX11
inline void AuthRequest::set_iphonever(::std::string&& value) {
  set_has_iphonever();
  iphonever_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.AuthRequest.IPhoneVer)
}
#endif
inline void AuthRequest::set_iphonever(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_iphonever();
  iphonever_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.AuthRequest.IPhoneVer)
}
inline void AuthRequest::set_iphonever(const char* value, size_t size) {
  set_has_iphonever();
  iphonever_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.AuthRequest.IPhoneVer)
}
inline ::std::string* AuthRequest::mutable_iphonever() {
  set_has_iphonever();
  // @@protoc_insertion_point(field_mutable:FromCs.AuthRequest.IPhoneVer)
  return iphonever_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthRequest::release_iphonever() {
  // @@protoc_insertion_point(field_release:FromCs.AuthRequest.IPhoneVer)
  clear_has_iphonever();
  return iphonever_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthRequest::set_allocated_iphonever(::std::string* iphonever) {
  if (iphonever != NULL) {
    set_has_iphonever();
  } else {
    clear_has_iphonever();
  }
  iphonever_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), iphonever);
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthRequest.IPhoneVer)
}

// optional .FromCs.sKBuiltinstringT ImgEncryptKey = 15;
inline bool AuthRequest::has_imgencryptkey() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void AuthRequest::set_has_imgencryptkey() {
  _has_bits_[0] |= 0x00400000u;
}
inline void AuthRequest::clear_has_imgencryptkey() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void AuthRequest::clear_imgencryptkey() {
  if (imgencryptkey_ != NULL) imgencryptkey_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_imgencryptkey();
}
inline const ::FromCs::sKBuiltinstringT& AuthRequest::imgencryptkey() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthRequest.ImgEncryptKey)
  return imgencryptkey_ != NULL ? *imgencryptkey_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* AuthRequest::mutable_imgencryptkey() {
  set_has_imgencryptkey();
  if (imgencryptkey_ == NULL) {
    imgencryptkey_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.AuthRequest.ImgEncryptKey)
  return imgencryptkey_;
}
inline ::FromCs::sKBuiltinstringT* AuthRequest::release_imgencryptkey() {
  // @@protoc_insertion_point(field_release:FromCs.AuthRequest.ImgEncryptKey)
  clear_has_imgencryptkey();
  ::FromCs::sKBuiltinstringT* temp = imgencryptkey_;
  imgencryptkey_ = NULL;
  return temp;
}
inline void AuthRequest::set_allocated_imgencryptkey(::FromCs::sKBuiltinstringT* imgencryptkey) {
  delete imgencryptkey_;
  imgencryptkey_ = imgencryptkey;
  if (imgencryptkey) {
    set_has_imgencryptkey();
  } else {
    clear_has_imgencryptkey();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthRequest.ImgEncryptKey)
}

// optional .FromCs.sKBuiltinBufferT KSid = 16;
inline bool AuthRequest::has_ksid() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void AuthRequest::set_has_ksid() {
  _has_bits_[0] |= 0x00800000u;
}
inline void AuthRequest::clear_has_ksid() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void AuthRequest::clear_ksid() {
  if (ksid_ != NULL) ksid_->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_ksid();
}
inline const ::FromCs::sKBuiltinBufferT& AuthRequest::ksid() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthRequest.KSid)
  return ksid_ != NULL ? *ksid_
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* AuthRequest::mutable_ksid() {
  set_has_ksid();
  if (ksid_ == NULL) {
    ksid_ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.AuthRequest.KSid)
  return ksid_;
}
inline ::FromCs::sKBuiltinBufferT* AuthRequest::release_ksid() {
  // @@protoc_insertion_point(field_release:FromCs.AuthRequest.KSid)
  clear_has_ksid();
  ::FromCs::sKBuiltinBufferT* temp = ksid_;
  ksid_ = NULL;
  return temp;
}
inline void AuthRequest::set_allocated_ksid(::FromCs::sKBuiltinBufferT* ksid) {
  delete ksid_;
  ksid_ = ksid;
  if (ksid) {
    set_has_ksid();
  } else {
    clear_has_ksid();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthRequest.KSid)
}

// optional string TimeStamp = 17;
inline bool AuthRequest::has_timestamp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AuthRequest::set_has_timestamp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AuthRequest::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AuthRequest::clear_timestamp() {
  timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_timestamp();
}
inline const ::std::string& AuthRequest::timestamp() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthRequest.TimeStamp)
  return timestamp_.GetNoArena();
}
inline void AuthRequest::set_timestamp(const ::std::string& value) {
  set_has_timestamp();
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.AuthRequest.TimeStamp)
}
#if LANG_CXX11
inline void AuthRequest::set_timestamp(::std::string&& value) {
  set_has_timestamp();
  timestamp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.AuthRequest.TimeStamp)
}
#endif
inline void AuthRequest::set_timestamp(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_timestamp();
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.AuthRequest.TimeStamp)
}
inline void AuthRequest::set_timestamp(const char* value, size_t size) {
  set_has_timestamp();
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.AuthRequest.TimeStamp)
}
inline ::std::string* AuthRequest::mutable_timestamp() {
  set_has_timestamp();
  // @@protoc_insertion_point(field_mutable:FromCs.AuthRequest.TimeStamp)
  return timestamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthRequest::release_timestamp() {
  // @@protoc_insertion_point(field_release:FromCs.AuthRequest.TimeStamp)
  clear_has_timestamp();
  return timestamp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthRequest::set_allocated_timestamp(::std::string* timestamp) {
  if (timestamp != NULL) {
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
  timestamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timestamp);
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthRequest.TimeStamp)
}

// optional string DeviceBrand = 18;
inline bool AuthRequest::has_devicebrand() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AuthRequest::set_has_devicebrand() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AuthRequest::clear_has_devicebrand() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AuthRequest::clear_devicebrand() {
  devicebrand_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_devicebrand();
}
inline const ::std::string& AuthRequest::devicebrand() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthRequest.DeviceBrand)
  return devicebrand_.GetNoArena();
}
inline void AuthRequest::set_devicebrand(const ::std::string& value) {
  set_has_devicebrand();
  devicebrand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.AuthRequest.DeviceBrand)
}
#if LANG_CXX11
inline void AuthRequest::set_devicebrand(::std::string&& value) {
  set_has_devicebrand();
  devicebrand_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.AuthRequest.DeviceBrand)
}
#endif
inline void AuthRequest::set_devicebrand(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_devicebrand();
  devicebrand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.AuthRequest.DeviceBrand)
}
inline void AuthRequest::set_devicebrand(const char* value, size_t size) {
  set_has_devicebrand();
  devicebrand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.AuthRequest.DeviceBrand)
}
inline ::std::string* AuthRequest::mutable_devicebrand() {
  set_has_devicebrand();
  // @@protoc_insertion_point(field_mutable:FromCs.AuthRequest.DeviceBrand)
  return devicebrand_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthRequest::release_devicebrand() {
  // @@protoc_insertion_point(field_release:FromCs.AuthRequest.DeviceBrand)
  clear_has_devicebrand();
  return devicebrand_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthRequest::set_allocated_devicebrand(::std::string* devicebrand) {
  if (devicebrand != NULL) {
    set_has_devicebrand();
  } else {
    clear_has_devicebrand();
  }
  devicebrand_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicebrand);
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthRequest.DeviceBrand)
}

// optional string DeviceModel = 19;
inline bool AuthRequest::has_devicemodel() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void AuthRequest::set_has_devicemodel() {
  _has_bits_[0] |= 0x00000200u;
}
inline void AuthRequest::clear_has_devicemodel() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void AuthRequest::clear_devicemodel() {
  devicemodel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_devicemodel();
}
inline const ::std::string& AuthRequest::devicemodel() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthRequest.DeviceModel)
  return devicemodel_.GetNoArena();
}
inline void AuthRequest::set_devicemodel(const ::std::string& value) {
  set_has_devicemodel();
  devicemodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.AuthRequest.DeviceModel)
}
#if LANG_CXX11
inline void AuthRequest::set_devicemodel(::std::string&& value) {
  set_has_devicemodel();
  devicemodel_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.AuthRequest.DeviceModel)
}
#endif
inline void AuthRequest::set_devicemodel(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_devicemodel();
  devicemodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.AuthRequest.DeviceModel)
}
inline void AuthRequest::set_devicemodel(const char* value, size_t size) {
  set_has_devicemodel();
  devicemodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.AuthRequest.DeviceModel)
}
inline ::std::string* AuthRequest::mutable_devicemodel() {
  set_has_devicemodel();
  // @@protoc_insertion_point(field_mutable:FromCs.AuthRequest.DeviceModel)
  return devicemodel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthRequest::release_devicemodel() {
  // @@protoc_insertion_point(field_release:FromCs.AuthRequest.DeviceModel)
  clear_has_devicemodel();
  return devicemodel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthRequest::set_allocated_devicemodel(::std::string* devicemodel) {
  if (devicemodel != NULL) {
    set_has_devicemodel();
  } else {
    clear_has_devicemodel();
  }
  devicemodel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicemodel);
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthRequest.DeviceModel)
}

// optional string OSType = 20;
inline bool AuthRequest::has_ostype() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void AuthRequest::set_has_ostype() {
  _has_bits_[0] |= 0x00000400u;
}
inline void AuthRequest::clear_has_ostype() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void AuthRequest::clear_ostype() {
  ostype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ostype();
}
inline const ::std::string& AuthRequest::ostype() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthRequest.OSType)
  return ostype_.GetNoArena();
}
inline void AuthRequest::set_ostype(const ::std::string& value) {
  set_has_ostype();
  ostype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.AuthRequest.OSType)
}
#if LANG_CXX11
inline void AuthRequest::set_ostype(::std::string&& value) {
  set_has_ostype();
  ostype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.AuthRequest.OSType)
}
#endif
inline void AuthRequest::set_ostype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ostype();
  ostype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.AuthRequest.OSType)
}
inline void AuthRequest::set_ostype(const char* value, size_t size) {
  set_has_ostype();
  ostype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.AuthRequest.OSType)
}
inline ::std::string* AuthRequest::mutable_ostype() {
  set_has_ostype();
  // @@protoc_insertion_point(field_mutable:FromCs.AuthRequest.OSType)
  return ostype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthRequest::release_ostype() {
  // @@protoc_insertion_point(field_release:FromCs.AuthRequest.OSType)
  clear_has_ostype();
  return ostype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthRequest::set_allocated_ostype(::std::string* ostype) {
  if (ostype != NULL) {
    set_has_ostype();
  } else {
    clear_has_ostype();
  }
  ostype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ostype);
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthRequest.OSType)
}

// optional string DeviceType = 21;
inline bool AuthRequest::has_devicetype() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void AuthRequest::set_has_devicetype() {
  _has_bits_[0] |= 0x00000800u;
}
inline void AuthRequest::clear_has_devicetype() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void AuthRequest::clear_devicetype() {
  devicetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_devicetype();
}
inline const ::std::string& AuthRequest::devicetype() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthRequest.DeviceType)
  return devicetype_.GetNoArena();
}
inline void AuthRequest::set_devicetype(const ::std::string& value) {
  set_has_devicetype();
  devicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.AuthRequest.DeviceType)
}
#if LANG_CXX11
inline void AuthRequest::set_devicetype(::std::string&& value) {
  set_has_devicetype();
  devicetype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.AuthRequest.DeviceType)
}
#endif
inline void AuthRequest::set_devicetype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_devicetype();
  devicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.AuthRequest.DeviceType)
}
inline void AuthRequest::set_devicetype(const char* value, size_t size) {
  set_has_devicetype();
  devicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.AuthRequest.DeviceType)
}
inline ::std::string* AuthRequest::mutable_devicetype() {
  set_has_devicetype();
  // @@protoc_insertion_point(field_mutable:FromCs.AuthRequest.DeviceType)
  return devicetype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthRequest::release_devicetype() {
  // @@protoc_insertion_point(field_release:FromCs.AuthRequest.DeviceType)
  clear_has_devicetype();
  return devicetype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthRequest::set_allocated_devicetype(::std::string* devicetype) {
  if (devicetype != NULL) {
    set_has_devicetype();
  } else {
    clear_has_devicetype();
  }
  devicetype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicetype);
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthRequest.DeviceType)
}

// optional string SoftType = 22;
inline bool AuthRequest::has_softtype() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void AuthRequest::set_has_softtype() {
  _has_bits_[0] |= 0x00001000u;
}
inline void AuthRequest::clear_has_softtype() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void AuthRequest::clear_softtype() {
  softtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_softtype();
}
inline const ::std::string& AuthRequest::softtype() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthRequest.SoftType)
  return softtype_.GetNoArena();
}
inline void AuthRequest::set_softtype(const ::std::string& value) {
  set_has_softtype();
  softtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.AuthRequest.SoftType)
}
#if LANG_CXX11
inline void AuthRequest::set_softtype(::std::string&& value) {
  set_has_softtype();
  softtype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.AuthRequest.SoftType)
}
#endif
inline void AuthRequest::set_softtype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_softtype();
  softtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.AuthRequest.SoftType)
}
inline void AuthRequest::set_softtype(const char* value, size_t size) {
  set_has_softtype();
  softtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.AuthRequest.SoftType)
}
inline ::std::string* AuthRequest::mutable_softtype() {
  set_has_softtype();
  // @@protoc_insertion_point(field_mutable:FromCs.AuthRequest.SoftType)
  return softtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthRequest::release_softtype() {
  // @@protoc_insertion_point(field_release:FromCs.AuthRequest.SoftType)
  clear_has_softtype();
  return softtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthRequest::set_allocated_softtype(::std::string* softtype) {
  if (softtype != NULL) {
    set_has_softtype();
  } else {
    clear_has_softtype();
  }
  softtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), softtype);
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthRequest.SoftType)
}

// optional string AuthTicket = 23;
inline bool AuthRequest::has_authticket() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void AuthRequest::set_has_authticket() {
  _has_bits_[0] |= 0x00002000u;
}
inline void AuthRequest::clear_has_authticket() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void AuthRequest::clear_authticket() {
  authticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_authticket();
}
inline const ::std::string& AuthRequest::authticket() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthRequest.AuthTicket)
  return authticket_.GetNoArena();
}
inline void AuthRequest::set_authticket(const ::std::string& value) {
  set_has_authticket();
  authticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.AuthRequest.AuthTicket)
}
#if LANG_CXX11
inline void AuthRequest::set_authticket(::std::string&& value) {
  set_has_authticket();
  authticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.AuthRequest.AuthTicket)
}
#endif
inline void AuthRequest::set_authticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_authticket();
  authticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.AuthRequest.AuthTicket)
}
inline void AuthRequest::set_authticket(const char* value, size_t size) {
  set_has_authticket();
  authticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.AuthRequest.AuthTicket)
}
inline ::std::string* AuthRequest::mutable_authticket() {
  set_has_authticket();
  // @@protoc_insertion_point(field_mutable:FromCs.AuthRequest.AuthTicket)
  return authticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthRequest::release_authticket() {
  // @@protoc_insertion_point(field_release:FromCs.AuthRequest.AuthTicket)
  clear_has_authticket();
  return authticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthRequest::set_allocated_authticket(::std::string* authticket) {
  if (authticket != NULL) {
    set_has_authticket();
  } else {
    clear_has_authticket();
  }
  authticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), authticket);
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthRequest.AuthTicket)
}

// optional string RealCountry = 24;
inline bool AuthRequest::has_realcountry() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void AuthRequest::set_has_realcountry() {
  _has_bits_[0] |= 0x00004000u;
}
inline void AuthRequest::clear_has_realcountry() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void AuthRequest::clear_realcountry() {
  realcountry_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_realcountry();
}
inline const ::std::string& AuthRequest::realcountry() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthRequest.RealCountry)
  return realcountry_.GetNoArena();
}
inline void AuthRequest::set_realcountry(const ::std::string& value) {
  set_has_realcountry();
  realcountry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.AuthRequest.RealCountry)
}
#if LANG_CXX11
inline void AuthRequest::set_realcountry(::std::string&& value) {
  set_has_realcountry();
  realcountry_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.AuthRequest.RealCountry)
}
#endif
inline void AuthRequest::set_realcountry(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_realcountry();
  realcountry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.AuthRequest.RealCountry)
}
inline void AuthRequest::set_realcountry(const char* value, size_t size) {
  set_has_realcountry();
  realcountry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.AuthRequest.RealCountry)
}
inline ::std::string* AuthRequest::mutable_realcountry() {
  set_has_realcountry();
  // @@protoc_insertion_point(field_mutable:FromCs.AuthRequest.RealCountry)
  return realcountry_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthRequest::release_realcountry() {
  // @@protoc_insertion_point(field_release:FromCs.AuthRequest.RealCountry)
  clear_has_realcountry();
  return realcountry_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthRequest::set_allocated_realcountry(::std::string* realcountry) {
  if (realcountry != NULL) {
    set_has_realcountry();
  } else {
    clear_has_realcountry();
  }
  realcountry_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), realcountry);
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthRequest.RealCountry)
}

// optional string Signature = 25;
inline bool AuthRequest::has_signature() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void AuthRequest::set_has_signature() {
  _has_bits_[0] |= 0x00008000u;
}
inline void AuthRequest::clear_has_signature() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void AuthRequest::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_signature();
}
inline const ::std::string& AuthRequest::signature() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthRequest.Signature)
  return signature_.GetNoArena();
}
inline void AuthRequest::set_signature(const ::std::string& value) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.AuthRequest.Signature)
}
#if LANG_CXX11
inline void AuthRequest::set_signature(::std::string&& value) {
  set_has_signature();
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.AuthRequest.Signature)
}
#endif
inline void AuthRequest::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.AuthRequest.Signature)
}
inline void AuthRequest::set_signature(const char* value, size_t size) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.AuthRequest.Signature)
}
inline ::std::string* AuthRequest::mutable_signature() {
  set_has_signature();
  // @@protoc_insertion_point(field_mutable:FromCs.AuthRequest.Signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthRequest::release_signature() {
  // @@protoc_insertion_point(field_release:FromCs.AuthRequest.Signature)
  clear_has_signature();
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthRequest::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthRequest.Signature)
}

// required .FromCs.sKBuiltinBufferT RandomEncryKey = 26;
inline bool AuthRequest::has_randomencrykey() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void AuthRequest::set_has_randomencrykey() {
  _has_bits_[0] |= 0x01000000u;
}
inline void AuthRequest::clear_has_randomencrykey() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void AuthRequest::clear_randomencrykey() {
  if (randomencrykey_ != NULL) randomencrykey_->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_randomencrykey();
}
inline const ::FromCs::sKBuiltinBufferT& AuthRequest::randomencrykey() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthRequest.RandomEncryKey)
  return randomencrykey_ != NULL ? *randomencrykey_
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* AuthRequest::mutable_randomencrykey() {
  set_has_randomencrykey();
  if (randomencrykey_ == NULL) {
    randomencrykey_ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.AuthRequest.RandomEncryKey)
  return randomencrykey_;
}
inline ::FromCs::sKBuiltinBufferT* AuthRequest::release_randomencrykey() {
  // @@protoc_insertion_point(field_release:FromCs.AuthRequest.RandomEncryKey)
  clear_has_randomencrykey();
  ::FromCs::sKBuiltinBufferT* temp = randomencrykey_;
  randomencrykey_ = NULL;
  return temp;
}
inline void AuthRequest::set_allocated_randomencrykey(::FromCs::sKBuiltinBufferT* randomencrykey) {
  delete randomencrykey_;
  randomencrykey_ = randomencrykey;
  if (randomencrykey) {
    set_has_randomencrykey();
  } else {
    clear_has_randomencrykey();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthRequest.RandomEncryKey)
}

// optional string AutoAuthTicket = 27;
inline bool AuthRequest::has_autoauthticket() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void AuthRequest::set_has_autoauthticket() {
  _has_bits_[0] |= 0x00010000u;
}
inline void AuthRequest::clear_has_autoauthticket() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void AuthRequest::clear_autoauthticket() {
  autoauthticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_autoauthticket();
}
inline const ::std::string& AuthRequest::autoauthticket() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthRequest.AutoAuthTicket)
  return autoauthticket_.GetNoArena();
}
inline void AuthRequest::set_autoauthticket(const ::std::string& value) {
  set_has_autoauthticket();
  autoauthticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.AuthRequest.AutoAuthTicket)
}
#if LANG_CXX11
inline void AuthRequest::set_autoauthticket(::std::string&& value) {
  set_has_autoauthticket();
  autoauthticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.AuthRequest.AutoAuthTicket)
}
#endif
inline void AuthRequest::set_autoauthticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_autoauthticket();
  autoauthticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.AuthRequest.AutoAuthTicket)
}
inline void AuthRequest::set_autoauthticket(const char* value, size_t size) {
  set_has_autoauthticket();
  autoauthticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.AuthRequest.AutoAuthTicket)
}
inline ::std::string* AuthRequest::mutable_autoauthticket() {
  set_has_autoauthticket();
  // @@protoc_insertion_point(field_mutable:FromCs.AuthRequest.AutoAuthTicket)
  return autoauthticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthRequest::release_autoauthticket() {
  // @@protoc_insertion_point(field_release:FromCs.AuthRequest.AutoAuthTicket)
  clear_has_autoauthticket();
  return autoauthticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthRequest::set_allocated_autoauthticket(::std::string* autoauthticket) {
  if (autoauthticket != NULL) {
    set_has_autoauthticket();
  } else {
    clear_has_autoauthticket();
  }
  autoauthticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), autoauthticket);
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthRequest.AutoAuthTicket)
}

// -------------------------------------------------------------------

// GetChatroomMemberDetailRequest

// optional .FromCs.BaseRequest base = 1;
inline bool GetChatroomMemberDetailRequest::has_base() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetChatroomMemberDetailRequest::set_has_base() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetChatroomMemberDetailRequest::clear_has_base() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetChatroomMemberDetailRequest::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseRequest::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseRequest& GetChatroomMemberDetailRequest::base() const {
  // @@protoc_insertion_point(field_get:FromCs.GetChatroomMemberDetailRequest.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseRequest::internal_default_instance();
}
inline ::FromCs::BaseRequest* GetChatroomMemberDetailRequest::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.GetChatroomMemberDetailRequest.base)
  return base_;
}
inline ::FromCs::BaseRequest* GetChatroomMemberDetailRequest::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.GetChatroomMemberDetailRequest.base)
  clear_has_base();
  ::FromCs::BaseRequest* temp = base_;
  base_ = NULL;
  return temp;
}
inline void GetChatroomMemberDetailRequest::set_allocated_base(::FromCs::BaseRequest* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.GetChatroomMemberDetailRequest.base)
}

// optional string chatroom = 2;
inline bool GetChatroomMemberDetailRequest::has_chatroom() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetChatroomMemberDetailRequest::set_has_chatroom() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetChatroomMemberDetailRequest::clear_has_chatroom() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetChatroomMemberDetailRequest::clear_chatroom() {
  chatroom_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chatroom();
}
inline const ::std::string& GetChatroomMemberDetailRequest::chatroom() const {
  // @@protoc_insertion_point(field_get:FromCs.GetChatroomMemberDetailRequest.chatroom)
  return chatroom_.GetNoArena();
}
inline void GetChatroomMemberDetailRequest::set_chatroom(const ::std::string& value) {
  set_has_chatroom();
  chatroom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.GetChatroomMemberDetailRequest.chatroom)
}
#if LANG_CXX11
inline void GetChatroomMemberDetailRequest::set_chatroom(::std::string&& value) {
  set_has_chatroom();
  chatroom_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.GetChatroomMemberDetailRequest.chatroom)
}
#endif
inline void GetChatroomMemberDetailRequest::set_chatroom(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_chatroom();
  chatroom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.GetChatroomMemberDetailRequest.chatroom)
}
inline void GetChatroomMemberDetailRequest::set_chatroom(const char* value, size_t size) {
  set_has_chatroom();
  chatroom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.GetChatroomMemberDetailRequest.chatroom)
}
inline ::std::string* GetChatroomMemberDetailRequest::mutable_chatroom() {
  set_has_chatroom();
  // @@protoc_insertion_point(field_mutable:FromCs.GetChatroomMemberDetailRequest.chatroom)
  return chatroom_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetChatroomMemberDetailRequest::release_chatroom() {
  // @@protoc_insertion_point(field_release:FromCs.GetChatroomMemberDetailRequest.chatroom)
  clear_has_chatroom();
  return chatroom_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetChatroomMemberDetailRequest::set_allocated_chatroom(::std::string* chatroom) {
  if (chatroom != NULL) {
    set_has_chatroom();
  } else {
    clear_has_chatroom();
  }
  chatroom_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chatroom);
  // @@protoc_insertion_point(field_set_allocated:FromCs.GetChatroomMemberDetailRequest.chatroom)
}

// optional int32 clientVersion = 3;
inline bool GetChatroomMemberDetailRequest::has_clientversion() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetChatroomMemberDetailRequest::set_has_clientversion() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetChatroomMemberDetailRequest::clear_has_clientversion() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetChatroomMemberDetailRequest::clear_clientversion() {
  clientversion_ = 0;
  clear_has_clientversion();
}
inline ::google::protobuf::int32 GetChatroomMemberDetailRequest::clientversion() const {
  // @@protoc_insertion_point(field_get:FromCs.GetChatroomMemberDetailRequest.clientVersion)
  return clientversion_;
}
inline void GetChatroomMemberDetailRequest::set_clientversion(::google::protobuf::int32 value) {
  set_has_clientversion();
  clientversion_ = value;
  // @@protoc_insertion_point(field_set:FromCs.GetChatroomMemberDetailRequest.clientVersion)
}

// -------------------------------------------------------------------

// AuthResponse

// required .FromCs.BaseResponse base = 1;
inline bool AuthResponse::has_base() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void AuthResponse::set_has_base() {
  _has_bits_[0] |= 0x00008000u;
}
inline void AuthResponse::clear_has_base() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void AuthResponse::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseResponse::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseResponse& AuthResponse::base() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthResponse.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseResponse::internal_default_instance();
}
inline ::FromCs::BaseResponse* AuthResponse::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.AuthResponse.base)
  return base_;
}
inline ::FromCs::BaseResponse* AuthResponse::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.AuthResponse.base)
  clear_has_base();
  ::FromCs::BaseResponse* temp = base_;
  base_ = NULL;
  return temp;
}
inline void AuthResponse::set_allocated_base(::FromCs::BaseResponse* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthResponse.base)
}

// required int32 Uin = 2;
inline bool AuthResponse::has_uin() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void AuthResponse::set_has_uin() {
  _has_bits_[1] |= 0x00000002u;
}
inline void AuthResponse::clear_has_uin() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void AuthResponse::clear_uin() {
  uin_ = 0;
  clear_has_uin();
}
inline ::google::protobuf::int32 AuthResponse::uin() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthResponse.Uin)
  return uin_;
}
inline void AuthResponse::set_uin(::google::protobuf::int32 value) {
  set_has_uin();
  uin_ = value;
  // @@protoc_insertion_point(field_set:FromCs.AuthResponse.Uin)
}

// required .FromCs.sKBuiltinstringT UserName = 3;
inline bool AuthResponse::has_username() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void AuthResponse::set_has_username() {
  _has_bits_[0] |= 0x00010000u;
}
inline void AuthResponse::clear_has_username() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void AuthResponse::clear_username() {
  if (username_ != NULL) username_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_username();
}
inline const ::FromCs::sKBuiltinstringT& AuthResponse::username() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthResponse.UserName)
  return username_ != NULL ? *username_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* AuthResponse::mutable_username() {
  set_has_username();
  if (username_ == NULL) {
    username_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.AuthResponse.UserName)
  return username_;
}
inline ::FromCs::sKBuiltinstringT* AuthResponse::release_username() {
  // @@protoc_insertion_point(field_release:FromCs.AuthResponse.UserName)
  clear_has_username();
  ::FromCs::sKBuiltinstringT* temp = username_;
  username_ = NULL;
  return temp;
}
inline void AuthResponse::set_allocated_username(::FromCs::sKBuiltinstringT* username) {
  delete username_;
  username_ = username;
  if (username) {
    set_has_username();
  } else {
    clear_has_username();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthResponse.UserName)
}

// required .FromCs.sKBuiltinstringT NickName = 4;
inline bool AuthResponse::has_nickname() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void AuthResponse::set_has_nickname() {
  _has_bits_[0] |= 0x00020000u;
}
inline void AuthResponse::clear_has_nickname() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void AuthResponse::clear_nickname() {
  if (nickname_ != NULL) nickname_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_nickname();
}
inline const ::FromCs::sKBuiltinstringT& AuthResponse::nickname() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthResponse.NickName)
  return nickname_ != NULL ? *nickname_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* AuthResponse::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == NULL) {
    nickname_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.AuthResponse.NickName)
  return nickname_;
}
inline ::FromCs::sKBuiltinstringT* AuthResponse::release_nickname() {
  // @@protoc_insertion_point(field_release:FromCs.AuthResponse.NickName)
  clear_has_nickname();
  ::FromCs::sKBuiltinstringT* temp = nickname_;
  nickname_ = NULL;
  return temp;
}
inline void AuthResponse::set_allocated_nickname(::FromCs::sKBuiltinstringT* nickname) {
  delete nickname_;
  nickname_ = nickname;
  if (nickname) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthResponse.NickName)
}

// required int32 BindUin = 5;
inline bool AuthResponse::has_binduin() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void AuthResponse::set_has_binduin() {
  _has_bits_[1] |= 0x00000004u;
}
inline void AuthResponse::clear_has_binduin() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void AuthResponse::clear_binduin() {
  binduin_ = 0;
  clear_has_binduin();
}
inline ::google::protobuf::int32 AuthResponse::binduin() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthResponse.BindUin)
  return binduin_;
}
inline void AuthResponse::set_binduin(::google::protobuf::int32 value) {
  set_has_binduin();
  binduin_ = value;
  // @@protoc_insertion_point(field_set:FromCs.AuthResponse.BindUin)
}

// required .FromCs.sKBuiltinstringT BindEmail = 6;
inline bool AuthResponse::has_bindemail() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void AuthResponse::set_has_bindemail() {
  _has_bits_[0] |= 0x00040000u;
}
inline void AuthResponse::clear_has_bindemail() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void AuthResponse::clear_bindemail() {
  if (bindemail_ != NULL) bindemail_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_bindemail();
}
inline const ::FromCs::sKBuiltinstringT& AuthResponse::bindemail() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthResponse.BindEmail)
  return bindemail_ != NULL ? *bindemail_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* AuthResponse::mutable_bindemail() {
  set_has_bindemail();
  if (bindemail_ == NULL) {
    bindemail_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.AuthResponse.BindEmail)
  return bindemail_;
}
inline ::FromCs::sKBuiltinstringT* AuthResponse::release_bindemail() {
  // @@protoc_insertion_point(field_release:FromCs.AuthResponse.BindEmail)
  clear_has_bindemail();
  ::FromCs::sKBuiltinstringT* temp = bindemail_;
  bindemail_ = NULL;
  return temp;
}
inline void AuthResponse::set_allocated_bindemail(::FromCs::sKBuiltinstringT* bindemail) {
  delete bindemail_;
  bindemail_ = bindemail;
  if (bindemail) {
    set_has_bindemail();
  } else {
    clear_has_bindemail();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthResponse.BindEmail)
}

// required .FromCs.sKBuiltinstringT BindMobile = 7;
inline bool AuthResponse::has_bindmobile() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void AuthResponse::set_has_bindmobile() {
  _has_bits_[0] |= 0x00080000u;
}
inline void AuthResponse::clear_has_bindmobile() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void AuthResponse::clear_bindmobile() {
  if (bindmobile_ != NULL) bindmobile_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_bindmobile();
}
inline const ::FromCs::sKBuiltinstringT& AuthResponse::bindmobile() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthResponse.BindMobile)
  return bindmobile_ != NULL ? *bindmobile_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* AuthResponse::mutable_bindmobile() {
  set_has_bindmobile();
  if (bindmobile_ == NULL) {
    bindmobile_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.AuthResponse.BindMobile)
  return bindmobile_;
}
inline ::FromCs::sKBuiltinstringT* AuthResponse::release_bindmobile() {
  // @@protoc_insertion_point(field_release:FromCs.AuthResponse.BindMobile)
  clear_has_bindmobile();
  ::FromCs::sKBuiltinstringT* temp = bindmobile_;
  bindmobile_ = NULL;
  return temp;
}
inline void AuthResponse::set_allocated_bindmobile(::FromCs::sKBuiltinstringT* bindmobile) {
  delete bindmobile_;
  bindmobile_ = bindmobile;
  if (bindmobile) {
    set_has_bindmobile();
  } else {
    clear_has_bindmobile();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthResponse.BindMobile)
}

// required int32 Status = 8;
inline bool AuthResponse::has_status() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void AuthResponse::set_has_status() {
  _has_bits_[1] |= 0x00000008u;
}
inline void AuthResponse::clear_has_status() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void AuthResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 AuthResponse::status() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthResponse.Status)
  return status_;
}
inline void AuthResponse::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:FromCs.AuthResponse.Status)
}

// required bytes SessionKey = 9;
inline bool AuthResponse::has_sessionkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuthResponse::set_has_sessionkey() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuthResponse::clear_has_sessionkey() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuthResponse::clear_sessionkey() {
  sessionkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sessionkey();
}
inline const ::std::string& AuthResponse::sessionkey() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthResponse.SessionKey)
  return sessionkey_.GetNoArena();
}
inline void AuthResponse::set_sessionkey(const ::std::string& value) {
  set_has_sessionkey();
  sessionkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.AuthResponse.SessionKey)
}
#if LANG_CXX11
inline void AuthResponse::set_sessionkey(::std::string&& value) {
  set_has_sessionkey();
  sessionkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.AuthResponse.SessionKey)
}
#endif
inline void AuthResponse::set_sessionkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sessionkey();
  sessionkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.AuthResponse.SessionKey)
}
inline void AuthResponse::set_sessionkey(const void* value, size_t size) {
  set_has_sessionkey();
  sessionkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.AuthResponse.SessionKey)
}
inline ::std::string* AuthResponse::mutable_sessionkey() {
  set_has_sessionkey();
  // @@protoc_insertion_point(field_mutable:FromCs.AuthResponse.SessionKey)
  return sessionkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthResponse::release_sessionkey() {
  // @@protoc_insertion_point(field_release:FromCs.AuthResponse.SessionKey)
  clear_has_sessionkey();
  return sessionkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthResponse::set_allocated_sessionkey(::std::string* sessionkey) {
  if (sessionkey != NULL) {
    set_has_sessionkey();
  } else {
    clear_has_sessionkey();
  }
  sessionkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionkey);
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthResponse.SessionKey)
}

// required .FromCs.sKBuiltinstringT ImgSid = 10;
inline bool AuthResponse::has_imgsid() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void AuthResponse::set_has_imgsid() {
  _has_bits_[0] |= 0x00100000u;
}
inline void AuthResponse::clear_has_imgsid() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void AuthResponse::clear_imgsid() {
  if (imgsid_ != NULL) imgsid_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_imgsid();
}
inline const ::FromCs::sKBuiltinstringT& AuthResponse::imgsid() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthResponse.ImgSid)
  return imgsid_ != NULL ? *imgsid_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* AuthResponse::mutable_imgsid() {
  set_has_imgsid();
  if (imgsid_ == NULL) {
    imgsid_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.AuthResponse.ImgSid)
  return imgsid_;
}
inline ::FromCs::sKBuiltinstringT* AuthResponse::release_imgsid() {
  // @@protoc_insertion_point(field_release:FromCs.AuthResponse.ImgSid)
  clear_has_imgsid();
  ::FromCs::sKBuiltinstringT* temp = imgsid_;
  imgsid_ = NULL;
  return temp;
}
inline void AuthResponse::set_allocated_imgsid(::FromCs::sKBuiltinstringT* imgsid) {
  delete imgsid_;
  imgsid_ = imgsid;
  if (imgsid) {
    set_has_imgsid();
  } else {
    clear_has_imgsid();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthResponse.ImgSid)
}

// required .FromCs.sKBuiltinBufferT ImgBuf = 11;
inline bool AuthResponse::has_imgbuf() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void AuthResponse::set_has_imgbuf() {
  _has_bits_[0] |= 0x00200000u;
}
inline void AuthResponse::clear_has_imgbuf() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void AuthResponse::clear_imgbuf() {
  if (imgbuf_ != NULL) imgbuf_->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_imgbuf();
}
inline const ::FromCs::sKBuiltinBufferT& AuthResponse::imgbuf() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthResponse.ImgBuf)
  return imgbuf_ != NULL ? *imgbuf_
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* AuthResponse::mutable_imgbuf() {
  set_has_imgbuf();
  if (imgbuf_ == NULL) {
    imgbuf_ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.AuthResponse.ImgBuf)
  return imgbuf_;
}
inline ::FromCs::sKBuiltinBufferT* AuthResponse::release_imgbuf() {
  // @@protoc_insertion_point(field_release:FromCs.AuthResponse.ImgBuf)
  clear_has_imgbuf();
  ::FromCs::sKBuiltinBufferT* temp = imgbuf_;
  imgbuf_ = NULL;
  return temp;
}
inline void AuthResponse::set_allocated_imgbuf(::FromCs::sKBuiltinBufferT* imgbuf) {
  delete imgbuf_;
  imgbuf_ = imgbuf;
  if (imgbuf) {
    set_has_imgbuf();
  } else {
    clear_has_imgbuf();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthResponse.ImgBuf)
}

// required .FromCs.sKBuiltinstringT OfficialUserName = 12;
inline bool AuthResponse::has_officialusername() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void AuthResponse::set_has_officialusername() {
  _has_bits_[0] |= 0x00400000u;
}
inline void AuthResponse::clear_has_officialusername() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void AuthResponse::clear_officialusername() {
  if (officialusername_ != NULL) officialusername_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_officialusername();
}
inline const ::FromCs::sKBuiltinstringT& AuthResponse::officialusername() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthResponse.OfficialUserName)
  return officialusername_ != NULL ? *officialusername_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* AuthResponse::mutable_officialusername() {
  set_has_officialusername();
  if (officialusername_ == NULL) {
    officialusername_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.AuthResponse.OfficialUserName)
  return officialusername_;
}
inline ::FromCs::sKBuiltinstringT* AuthResponse::release_officialusername() {
  // @@protoc_insertion_point(field_release:FromCs.AuthResponse.OfficialUserName)
  clear_has_officialusername();
  ::FromCs::sKBuiltinstringT* temp = officialusername_;
  officialusername_ = NULL;
  return temp;
}
inline void AuthResponse::set_allocated_officialusername(::FromCs::sKBuiltinstringT* officialusername) {
  delete officialusername_;
  officialusername_ = officialusername;
  if (officialusername) {
    set_has_officialusername();
  } else {
    clear_has_officialusername();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthResponse.OfficialUserName)
}

// required .FromCs.sKBuiltinstringT OfficialNickName = 13;
inline bool AuthResponse::has_officialnickname() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void AuthResponse::set_has_officialnickname() {
  _has_bits_[0] |= 0x00800000u;
}
inline void AuthResponse::clear_has_officialnickname() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void AuthResponse::clear_officialnickname() {
  if (officialnickname_ != NULL) officialnickname_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_officialnickname();
}
inline const ::FromCs::sKBuiltinstringT& AuthResponse::officialnickname() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthResponse.OfficialNickName)
  return officialnickname_ != NULL ? *officialnickname_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* AuthResponse::mutable_officialnickname() {
  set_has_officialnickname();
  if (officialnickname_ == NULL) {
    officialnickname_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.AuthResponse.OfficialNickName)
  return officialnickname_;
}
inline ::FromCs::sKBuiltinstringT* AuthResponse::release_officialnickname() {
  // @@protoc_insertion_point(field_release:FromCs.AuthResponse.OfficialNickName)
  clear_has_officialnickname();
  ::FromCs::sKBuiltinstringT* temp = officialnickname_;
  officialnickname_ = NULL;
  return temp;
}
inline void AuthResponse::set_allocated_officialnickname(::FromCs::sKBuiltinstringT* officialnickname) {
  delete officialnickname_;
  officialnickname_ = officialnickname;
  if (officialnickname) {
    set_has_officialnickname();
  } else {
    clear_has_officialnickname();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthResponse.OfficialNickName)
}

// optional .FromCs.sKBuiltinstringT QQMicroBlogUserName = 14;
inline bool AuthResponse::has_qqmicroblogusername() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void AuthResponse::set_has_qqmicroblogusername() {
  _has_bits_[0] |= 0x01000000u;
}
inline void AuthResponse::clear_has_qqmicroblogusername() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void AuthResponse::clear_qqmicroblogusername() {
  if (qqmicroblogusername_ != NULL) qqmicroblogusername_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_qqmicroblogusername();
}
inline const ::FromCs::sKBuiltinstringT& AuthResponse::qqmicroblogusername() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthResponse.QQMicroBlogUserName)
  return qqmicroblogusername_ != NULL ? *qqmicroblogusername_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* AuthResponse::mutable_qqmicroblogusername() {
  set_has_qqmicroblogusername();
  if (qqmicroblogusername_ == NULL) {
    qqmicroblogusername_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.AuthResponse.QQMicroBlogUserName)
  return qqmicroblogusername_;
}
inline ::FromCs::sKBuiltinstringT* AuthResponse::release_qqmicroblogusername() {
  // @@protoc_insertion_point(field_release:FromCs.AuthResponse.QQMicroBlogUserName)
  clear_has_qqmicroblogusername();
  ::FromCs::sKBuiltinstringT* temp = qqmicroblogusername_;
  qqmicroblogusername_ = NULL;
  return temp;
}
inline void AuthResponse::set_allocated_qqmicroblogusername(::FromCs::sKBuiltinstringT* qqmicroblogusername) {
  delete qqmicroblogusername_;
  qqmicroblogusername_ = qqmicroblogusername;
  if (qqmicroblogusername) {
    set_has_qqmicroblogusername();
  } else {
    clear_has_qqmicroblogusername();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthResponse.QQMicroBlogUserName)
}

// optional int32 QQMicroBlogStatus = 15;
inline bool AuthResponse::has_qqmicroblogstatus() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void AuthResponse::set_has_qqmicroblogstatus() {
  _has_bits_[1] |= 0x00000010u;
}
inline void AuthResponse::clear_has_qqmicroblogstatus() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void AuthResponse::clear_qqmicroblogstatus() {
  qqmicroblogstatus_ = 0;
  clear_has_qqmicroblogstatus();
}
inline ::google::protobuf::int32 AuthResponse::qqmicroblogstatus() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthResponse.QQMicroBlogStatus)
  return qqmicroblogstatus_;
}
inline void AuthResponse::set_qqmicroblogstatus(::google::protobuf::int32 value) {
  set_has_qqmicroblogstatus();
  qqmicroblogstatus_ = value;
  // @@protoc_insertion_point(field_set:FromCs.AuthResponse.QQMicroBlogStatus)
}

// optional int32 NewVersion = 16;
inline bool AuthResponse::has_newversion() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void AuthResponse::set_has_newversion() {
  _has_bits_[1] |= 0x00000020u;
}
inline void AuthResponse::clear_has_newversion() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void AuthResponse::clear_newversion() {
  newversion_ = 0;
  clear_has_newversion();
}
inline ::google::protobuf::int32 AuthResponse::newversion() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthResponse.NewVersion)
  return newversion_;
}
inline void AuthResponse::set_newversion(::google::protobuf::int32 value) {
  set_has_newversion();
  newversion_ = value;
  // @@protoc_insertion_point(field_set:FromCs.AuthResponse.NewVersion)
}

// optional string Ticket = 17;
inline bool AuthResponse::has_ticket() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AuthResponse::set_has_ticket() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AuthResponse::clear_has_ticket() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AuthResponse::clear_ticket() {
  ticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ticket();
}
inline const ::std::string& AuthResponse::ticket() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthResponse.Ticket)
  return ticket_.GetNoArena();
}
inline void AuthResponse::set_ticket(const ::std::string& value) {
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.AuthResponse.Ticket)
}
#if LANG_CXX11
inline void AuthResponse::set_ticket(::std::string&& value) {
  set_has_ticket();
  ticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.AuthResponse.Ticket)
}
#endif
inline void AuthResponse::set_ticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.AuthResponse.Ticket)
}
inline void AuthResponse::set_ticket(const char* value, size_t size) {
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.AuthResponse.Ticket)
}
inline ::std::string* AuthResponse::mutable_ticket() {
  set_has_ticket();
  // @@protoc_insertion_point(field_mutable:FromCs.AuthResponse.Ticket)
  return ticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthResponse::release_ticket() {
  // @@protoc_insertion_point(field_release:FromCs.AuthResponse.Ticket)
  clear_has_ticket();
  return ticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthResponse::set_allocated_ticket(::std::string* ticket) {
  if (ticket != NULL) {
    set_has_ticket();
  } else {
    clear_has_ticket();
  }
  ticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ticket);
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthResponse.Ticket)
}

// optional int32 PushMailStatus = 18;
inline bool AuthResponse::has_pushmailstatus() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void AuthResponse::set_has_pushmailstatus() {
  _has_bits_[1] |= 0x00000040u;
}
inline void AuthResponse::clear_has_pushmailstatus() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void AuthResponse::clear_pushmailstatus() {
  pushmailstatus_ = 0;
  clear_has_pushmailstatus();
}
inline ::google::protobuf::int32 AuthResponse::pushmailstatus() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthResponse.PushMailStatus)
  return pushmailstatus_;
}
inline void AuthResponse::set_pushmailstatus(::google::protobuf::int32 value) {
  set_has_pushmailstatus();
  pushmailstatus_ = value;
  // @@protoc_insertion_point(field_set:FromCs.AuthResponse.PushMailStatus)
}

// optional int32 SendCardBitFlag = 19;
inline bool AuthResponse::has_sendcardbitflag() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void AuthResponse::set_has_sendcardbitflag() {
  _has_bits_[1] |= 0x00000080u;
}
inline void AuthResponse::clear_has_sendcardbitflag() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void AuthResponse::clear_sendcardbitflag() {
  sendcardbitflag_ = 0;
  clear_has_sendcardbitflag();
}
inline ::google::protobuf::int32 AuthResponse::sendcardbitflag() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthResponse.SendCardBitFlag)
  return sendcardbitflag_;
}
inline void AuthResponse::set_sendcardbitflag(::google::protobuf::int32 value) {
  set_has_sendcardbitflag();
  sendcardbitflag_ = value;
  // @@protoc_insertion_point(field_set:FromCs.AuthResponse.SendCardBitFlag)
}

// optional string PushMailSettingTicket = 20;
inline bool AuthResponse::has_pushmailsettingticket() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AuthResponse::set_has_pushmailsettingticket() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AuthResponse::clear_has_pushmailsettingticket() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AuthResponse::clear_pushmailsettingticket() {
  pushmailsettingticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pushmailsettingticket();
}
inline const ::std::string& AuthResponse::pushmailsettingticket() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthResponse.PushMailSettingTicket)
  return pushmailsettingticket_.GetNoArena();
}
inline void AuthResponse::set_pushmailsettingticket(const ::std::string& value) {
  set_has_pushmailsettingticket();
  pushmailsettingticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.AuthResponse.PushMailSettingTicket)
}
#if LANG_CXX11
inline void AuthResponse::set_pushmailsettingticket(::std::string&& value) {
  set_has_pushmailsettingticket();
  pushmailsettingticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.AuthResponse.PushMailSettingTicket)
}
#endif
inline void AuthResponse::set_pushmailsettingticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pushmailsettingticket();
  pushmailsettingticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.AuthResponse.PushMailSettingTicket)
}
inline void AuthResponse::set_pushmailsettingticket(const char* value, size_t size) {
  set_has_pushmailsettingticket();
  pushmailsettingticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.AuthResponse.PushMailSettingTicket)
}
inline ::std::string* AuthResponse::mutable_pushmailsettingticket() {
  set_has_pushmailsettingticket();
  // @@protoc_insertion_point(field_mutable:FromCs.AuthResponse.PushMailSettingTicket)
  return pushmailsettingticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthResponse::release_pushmailsettingticket() {
  // @@protoc_insertion_point(field_release:FromCs.AuthResponse.PushMailSettingTicket)
  clear_has_pushmailsettingticket();
  return pushmailsettingticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthResponse::set_allocated_pushmailsettingticket(::std::string* pushmailsettingticket) {
  if (pushmailsettingticket != NULL) {
    set_has_pushmailsettingticket();
  } else {
    clear_has_pushmailsettingticket();
  }
  pushmailsettingticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pushmailsettingticket);
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthResponse.PushMailSettingTicket)
}

// optional .FromCs.iPList BuiltinIPList = 21;
inline bool AuthResponse::has_builtiniplist() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void AuthResponse::set_has_builtiniplist() {
  _has_bits_[0] |= 0x02000000u;
}
inline void AuthResponse::clear_has_builtiniplist() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void AuthResponse::clear_builtiniplist() {
  if (builtiniplist_ != NULL) builtiniplist_->::FromCs::iPList::Clear();
  clear_has_builtiniplist();
}
inline const ::FromCs::iPList& AuthResponse::builtiniplist() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthResponse.BuiltinIPList)
  return builtiniplist_ != NULL ? *builtiniplist_
                         : *::FromCs::iPList::internal_default_instance();
}
inline ::FromCs::iPList* AuthResponse::mutable_builtiniplist() {
  set_has_builtiniplist();
  if (builtiniplist_ == NULL) {
    builtiniplist_ = new ::FromCs::iPList;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.AuthResponse.BuiltinIPList)
  return builtiniplist_;
}
inline ::FromCs::iPList* AuthResponse::release_builtiniplist() {
  // @@protoc_insertion_point(field_release:FromCs.AuthResponse.BuiltinIPList)
  clear_has_builtiniplist();
  ::FromCs::iPList* temp = builtiniplist_;
  builtiniplist_ = NULL;
  return temp;
}
inline void AuthResponse::set_allocated_builtiniplist(::FromCs::iPList* builtiniplist) {
  delete builtiniplist_;
  builtiniplist_ = builtiniplist;
  if (builtiniplist) {
    set_has_builtiniplist();
  } else {
    clear_has_builtiniplist();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthResponse.BuiltinIPList)
}

// optional string FSURL = 22;
inline bool AuthResponse::has_fsurl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AuthResponse::set_has_fsurl() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AuthResponse::clear_has_fsurl() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AuthResponse::clear_fsurl() {
  fsurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fsurl();
}
inline const ::std::string& AuthResponse::fsurl() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthResponse.FSURL)
  return fsurl_.GetNoArena();
}
inline void AuthResponse::set_fsurl(const ::std::string& value) {
  set_has_fsurl();
  fsurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.AuthResponse.FSURL)
}
#if LANG_CXX11
inline void AuthResponse::set_fsurl(::std::string&& value) {
  set_has_fsurl();
  fsurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.AuthResponse.FSURL)
}
#endif
inline void AuthResponse::set_fsurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fsurl();
  fsurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.AuthResponse.FSURL)
}
inline void AuthResponse::set_fsurl(const char* value, size_t size) {
  set_has_fsurl();
  fsurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.AuthResponse.FSURL)
}
inline ::std::string* AuthResponse::mutable_fsurl() {
  set_has_fsurl();
  // @@protoc_insertion_point(field_mutable:FromCs.AuthResponse.FSURL)
  return fsurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthResponse::release_fsurl() {
  // @@protoc_insertion_point(field_release:FromCs.AuthResponse.FSURL)
  clear_has_fsurl();
  return fsurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthResponse::set_allocated_fsurl(::std::string* fsurl) {
  if (fsurl != NULL) {
    set_has_fsurl();
  } else {
    clear_has_fsurl();
  }
  fsurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fsurl);
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthResponse.FSURL)
}

// optional .FromCs.NetworkControlType NetworkControl = 23;
inline bool AuthResponse::has_networkcontrol() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void AuthResponse::set_has_networkcontrol() {
  _has_bits_[0] |= 0x04000000u;
}
inline void AuthResponse::clear_has_networkcontrol() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void AuthResponse::clear_networkcontrol() {
  if (networkcontrol_ != NULL) networkcontrol_->::FromCs::NetworkControlType::Clear();
  clear_has_networkcontrol();
}
inline const ::FromCs::NetworkControlType& AuthResponse::networkcontrol() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthResponse.NetworkControl)
  return networkcontrol_ != NULL ? *networkcontrol_
                         : *::FromCs::NetworkControlType::internal_default_instance();
}
inline ::FromCs::NetworkControlType* AuthResponse::mutable_networkcontrol() {
  set_has_networkcontrol();
  if (networkcontrol_ == NULL) {
    networkcontrol_ = new ::FromCs::NetworkControlType;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.AuthResponse.NetworkControl)
  return networkcontrol_;
}
inline ::FromCs::NetworkControlType* AuthResponse::release_networkcontrol() {
  // @@protoc_insertion_point(field_release:FromCs.AuthResponse.NetworkControl)
  clear_has_networkcontrol();
  ::FromCs::NetworkControlType* temp = networkcontrol_;
  networkcontrol_ = NULL;
  return temp;
}
inline void AuthResponse::set_allocated_networkcontrol(::FromCs::NetworkControlType* networkcontrol) {
  delete networkcontrol_;
  networkcontrol_ = networkcontrol;
  if (networkcontrol) {
    set_has_networkcontrol();
  } else {
    clear_has_networkcontrol();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthResponse.NetworkControl)
}

// optional int32 PluginFlag = 24;
inline bool AuthResponse::has_pluginflag() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void AuthResponse::set_has_pluginflag() {
  _has_bits_[1] |= 0x00000100u;
}
inline void AuthResponse::clear_has_pluginflag() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void AuthResponse::clear_pluginflag() {
  pluginflag_ = 0;
  clear_has_pluginflag();
}
inline ::google::protobuf::int32 AuthResponse::pluginflag() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthResponse.PluginFlag)
  return pluginflag_;
}
inline void AuthResponse::set_pluginflag(::google::protobuf::int32 value) {
  set_has_pluginflag();
  pluginflag_ = value;
  // @@protoc_insertion_point(field_set:FromCs.AuthResponse.PluginFlag)
}

// optional string Alias = 25;
inline bool AuthResponse::has_alias() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AuthResponse::set_has_alias() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AuthResponse::clear_has_alias() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AuthResponse::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_alias();
}
inline const ::std::string& AuthResponse::alias() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthResponse.Alias)
  return alias_.GetNoArena();
}
inline void AuthResponse::set_alias(const ::std::string& value) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.AuthResponse.Alias)
}
#if LANG_CXX11
inline void AuthResponse::set_alias(::std::string&& value) {
  set_has_alias();
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.AuthResponse.Alias)
}
#endif
inline void AuthResponse::set_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.AuthResponse.Alias)
}
inline void AuthResponse::set_alias(const char* value, size_t size) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.AuthResponse.Alias)
}
inline ::std::string* AuthResponse::mutable_alias() {
  set_has_alias();
  // @@protoc_insertion_point(field_mutable:FromCs.AuthResponse.Alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthResponse::release_alias() {
  // @@protoc_insertion_point(field_release:FromCs.AuthResponse.Alias)
  clear_has_alias();
  return alias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthResponse::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    set_has_alias();
  } else {
    clear_has_alias();
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthResponse.Alias)
}

// optional int32 RegType = 26;
inline bool AuthResponse::has_regtype() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void AuthResponse::set_has_regtype() {
  _has_bits_[1] |= 0x00000200u;
}
inline void AuthResponse::clear_has_regtype() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void AuthResponse::clear_regtype() {
  regtype_ = 0;
  clear_has_regtype();
}
inline ::google::protobuf::int32 AuthResponse::regtype() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthResponse.RegType)
  return regtype_;
}
inline void AuthResponse::set_regtype(::google::protobuf::int32 value) {
  set_has_regtype();
  regtype_ = value;
  // @@protoc_insertion_point(field_set:FromCs.AuthResponse.RegType)
}

// optional string AuthKey = 27;
inline bool AuthResponse::has_authkey() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AuthResponse::set_has_authkey() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AuthResponse::clear_has_authkey() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AuthResponse::clear_authkey() {
  authkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_authkey();
}
inline const ::std::string& AuthResponse::authkey() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthResponse.AuthKey)
  return authkey_.GetNoArena();
}
inline void AuthResponse::set_authkey(const ::std::string& value) {
  set_has_authkey();
  authkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.AuthResponse.AuthKey)
}
#if LANG_CXX11
inline void AuthResponse::set_authkey(::std::string&& value) {
  set_has_authkey();
  authkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.AuthResponse.AuthKey)
}
#endif
inline void AuthResponse::set_authkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_authkey();
  authkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.AuthResponse.AuthKey)
}
inline void AuthResponse::set_authkey(const char* value, size_t size) {
  set_has_authkey();
  authkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.AuthResponse.AuthKey)
}
inline ::std::string* AuthResponse::mutable_authkey() {
  set_has_authkey();
  // @@protoc_insertion_point(field_mutable:FromCs.AuthResponse.AuthKey)
  return authkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthResponse::release_authkey() {
  // @@protoc_insertion_point(field_release:FromCs.AuthResponse.AuthKey)
  clear_has_authkey();
  return authkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthResponse::set_allocated_authkey(::std::string* authkey) {
  if (authkey != NULL) {
    set_has_authkey();
  } else {
    clear_has_authkey();
  }
  authkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), authkey);
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthResponse.AuthKey)
}

// optional string Sid = 28;
inline bool AuthResponse::has_sid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AuthResponse::set_has_sid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AuthResponse::clear_has_sid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AuthResponse::clear_sid() {
  sid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sid();
}
inline const ::std::string& AuthResponse::sid() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthResponse.Sid)
  return sid_.GetNoArena();
}
inline void AuthResponse::set_sid(const ::std::string& value) {
  set_has_sid();
  sid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.AuthResponse.Sid)
}
#if LANG_CXX11
inline void AuthResponse::set_sid(::std::string&& value) {
  set_has_sid();
  sid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.AuthResponse.Sid)
}
#endif
inline void AuthResponse::set_sid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sid();
  sid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.AuthResponse.Sid)
}
inline void AuthResponse::set_sid(const char* value, size_t size) {
  set_has_sid();
  sid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.AuthResponse.Sid)
}
inline ::std::string* AuthResponse::mutable_sid() {
  set_has_sid();
  // @@protoc_insertion_point(field_mutable:FromCs.AuthResponse.Sid)
  return sid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthResponse::release_sid() {
  // @@protoc_insertion_point(field_release:FromCs.AuthResponse.Sid)
  clear_has_sid();
  return sid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthResponse::set_allocated_sid(::std::string* sid) {
  if (sid != NULL) {
    set_has_sid();
  } else {
    clear_has_sid();
  }
  sid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sid);
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthResponse.Sid)
}

// optional .FromCs.PluginKeyListType PluginKeyList = 29;
inline bool AuthResponse::has_pluginkeylist() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void AuthResponse::set_has_pluginkeylist() {
  _has_bits_[0] |= 0x08000000u;
}
inline void AuthResponse::clear_has_pluginkeylist() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void AuthResponse::clear_pluginkeylist() {
  if (pluginkeylist_ != NULL) pluginkeylist_->::FromCs::PluginKeyListType::Clear();
  clear_has_pluginkeylist();
}
inline const ::FromCs::PluginKeyListType& AuthResponse::pluginkeylist() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthResponse.PluginKeyList)
  return pluginkeylist_ != NULL ? *pluginkeylist_
                         : *::FromCs::PluginKeyListType::internal_default_instance();
}
inline ::FromCs::PluginKeyListType* AuthResponse::mutable_pluginkeylist() {
  set_has_pluginkeylist();
  if (pluginkeylist_ == NULL) {
    pluginkeylist_ = new ::FromCs::PluginKeyListType;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.AuthResponse.PluginKeyList)
  return pluginkeylist_;
}
inline ::FromCs::PluginKeyListType* AuthResponse::release_pluginkeylist() {
  // @@protoc_insertion_point(field_release:FromCs.AuthResponse.PluginKeyList)
  clear_has_pluginkeylist();
  ::FromCs::PluginKeyListType* temp = pluginkeylist_;
  pluginkeylist_ = NULL;
  return temp;
}
inline void AuthResponse::set_allocated_pluginkeylist(::FromCs::PluginKeyListType* pluginkeylist) {
  delete pluginkeylist_;
  pluginkeylist_ = pluginkeylist;
  if (pluginkeylist) {
    set_has_pluginkeylist();
  } else {
    clear_has_pluginkeylist();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthResponse.PluginKeyList)
}

// optional .FromCs.sKBuiltinstringT ImgEncryptKey = 30;
inline bool AuthResponse::has_imgencryptkey() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void AuthResponse::set_has_imgencryptkey() {
  _has_bits_[0] |= 0x10000000u;
}
inline void AuthResponse::clear_has_imgencryptkey() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void AuthResponse::clear_imgencryptkey() {
  if (imgencryptkey_ != NULL) imgencryptkey_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_imgencryptkey();
}
inline const ::FromCs::sKBuiltinstringT& AuthResponse::imgencryptkey() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthResponse.ImgEncryptKey)
  return imgencryptkey_ != NULL ? *imgencryptkey_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* AuthResponse::mutable_imgencryptkey() {
  set_has_imgencryptkey();
  if (imgencryptkey_ == NULL) {
    imgencryptkey_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.AuthResponse.ImgEncryptKey)
  return imgencryptkey_;
}
inline ::FromCs::sKBuiltinstringT* AuthResponse::release_imgencryptkey() {
  // @@protoc_insertion_point(field_release:FromCs.AuthResponse.ImgEncryptKey)
  clear_has_imgencryptkey();
  ::FromCs::sKBuiltinstringT* temp = imgencryptkey_;
  imgencryptkey_ = NULL;
  return temp;
}
inline void AuthResponse::set_allocated_imgencryptkey(::FromCs::sKBuiltinstringT* imgencryptkey) {
  delete imgencryptkey_;
  imgencryptkey_ = imgencryptkey;
  if (imgencryptkey) {
    set_has_imgencryptkey();
  } else {
    clear_has_imgencryptkey();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthResponse.ImgEncryptKey)
}

// optional .FromCs.sKBuiltinBufferT A2Key = 31;
inline bool AuthResponse::has_a2key() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void AuthResponse::set_has_a2key() {
  _has_bits_[0] |= 0x20000000u;
}
inline void AuthResponse::clear_has_a2key() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void AuthResponse::clear_a2key() {
  if (a2key_ != NULL) a2key_->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_a2key();
}
inline const ::FromCs::sKBuiltinBufferT& AuthResponse::a2key() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthResponse.A2Key)
  return a2key_ != NULL ? *a2key_
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* AuthResponse::mutable_a2key() {
  set_has_a2key();
  if (a2key_ == NULL) {
    a2key_ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.AuthResponse.A2Key)
  return a2key_;
}
inline ::FromCs::sKBuiltinBufferT* AuthResponse::release_a2key() {
  // @@protoc_insertion_point(field_release:FromCs.AuthResponse.A2Key)
  clear_has_a2key();
  ::FromCs::sKBuiltinBufferT* temp = a2key_;
  a2key_ = NULL;
  return temp;
}
inline void AuthResponse::set_allocated_a2key(::FromCs::sKBuiltinBufferT* a2key) {
  delete a2key_;
  a2key_ = a2key;
  if (a2key) {
    set_has_a2key();
  } else {
    clear_has_a2key();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthResponse.A2Key)
}

// optional .FromCs.sKBuiltinBufferT KSid = 32;
inline bool AuthResponse::has_ksid() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void AuthResponse::set_has_ksid() {
  _has_bits_[0] |= 0x40000000u;
}
inline void AuthResponse::clear_has_ksid() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void AuthResponse::clear_ksid() {
  if (ksid_ != NULL) ksid_->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_ksid();
}
inline const ::FromCs::sKBuiltinBufferT& AuthResponse::ksid() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthResponse.KSid)
  return ksid_ != NULL ? *ksid_
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* AuthResponse::mutable_ksid() {
  set_has_ksid();
  if (ksid_ == NULL) {
    ksid_ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.AuthResponse.KSid)
  return ksid_;
}
inline ::FromCs::sKBuiltinBufferT* AuthResponse::release_ksid() {
  // @@protoc_insertion_point(field_release:FromCs.AuthResponse.KSid)
  clear_has_ksid();
  ::FromCs::sKBuiltinBufferT* temp = ksid_;
  ksid_ = NULL;
  return temp;
}
inline void AuthResponse::set_allocated_ksid(::FromCs::sKBuiltinBufferT* ksid) {
  delete ksid_;
  ksid_ = ksid;
  if (ksid) {
    set_has_ksid();
  } else {
    clear_has_ksid();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthResponse.KSid)
}

// optional int32 ProfileFlag = 33;
inline bool AuthResponse::has_profileflag() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void AuthResponse::set_has_profileflag() {
  _has_bits_[1] |= 0x00000400u;
}
inline void AuthResponse::clear_has_profileflag() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void AuthResponse::clear_profileflag() {
  profileflag_ = 0;
  clear_has_profileflag();
}
inline ::google::protobuf::int32 AuthResponse::profileflag() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthResponse.ProfileFlag)
  return profileflag_;
}
inline void AuthResponse::set_profileflag(::google::protobuf::int32 value) {
  set_has_profileflag();
  profileflag_ = value;
  // @@protoc_insertion_point(field_set:FromCs.AuthResponse.ProfileFlag)
}

// optional string Password = 34;
inline bool AuthResponse::has_password() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AuthResponse::set_has_password() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AuthResponse::clear_has_password() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AuthResponse::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
inline const ::std::string& AuthResponse::password() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthResponse.Password)
  return password_.GetNoArena();
}
inline void AuthResponse::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.AuthResponse.Password)
}
#if LANG_CXX11
inline void AuthResponse::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.AuthResponse.Password)
}
#endif
inline void AuthResponse::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.AuthResponse.Password)
}
inline void AuthResponse::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.AuthResponse.Password)
}
inline ::std::string* AuthResponse::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:FromCs.AuthResponse.Password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthResponse::release_password() {
  // @@protoc_insertion_point(field_release:FromCs.AuthResponse.Password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthResponse::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthResponse.Password)
}

// optional int32 TimeStamp = 35;
inline bool AuthResponse::has_timestamp() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void AuthResponse::set_has_timestamp() {
  _has_bits_[1] |= 0x00000800u;
}
inline void AuthResponse::clear_has_timestamp() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void AuthResponse::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline ::google::protobuf::int32 AuthResponse::timestamp() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthResponse.TimeStamp)
  return timestamp_;
}
inline void AuthResponse::set_timestamp(::google::protobuf::int32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:FromCs.AuthResponse.TimeStamp)
}

// optional int32 IsAutoReg = 36;
inline bool AuthResponse::has_isautoreg() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void AuthResponse::set_has_isautoreg() {
  _has_bits_[1] |= 0x00001000u;
}
inline void AuthResponse::clear_has_isautoreg() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void AuthResponse::clear_isautoreg() {
  isautoreg_ = 0;
  clear_has_isautoreg();
}
inline ::google::protobuf::int32 AuthResponse::isautoreg() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthResponse.IsAutoReg)
  return isautoreg_;
}
inline void AuthResponse::set_isautoreg(::google::protobuf::int32 value) {
  set_has_isautoreg();
  isautoreg_ = value;
  // @@protoc_insertion_point(field_set:FromCs.AuthResponse.IsAutoReg)
}

// optional string KickResponse = 37;
inline bool AuthResponse::has_kickresponse() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AuthResponse::set_has_kickresponse() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AuthResponse::clear_has_kickresponse() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AuthResponse::clear_kickresponse() {
  kickresponse_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_kickresponse();
}
inline const ::std::string& AuthResponse::kickresponse() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthResponse.KickResponse)
  return kickresponse_.GetNoArena();
}
inline void AuthResponse::set_kickresponse(const ::std::string& value) {
  set_has_kickresponse();
  kickresponse_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.AuthResponse.KickResponse)
}
#if LANG_CXX11
inline void AuthResponse::set_kickresponse(::std::string&& value) {
  set_has_kickresponse();
  kickresponse_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.AuthResponse.KickResponse)
}
#endif
inline void AuthResponse::set_kickresponse(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_kickresponse();
  kickresponse_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.AuthResponse.KickResponse)
}
inline void AuthResponse::set_kickresponse(const char* value, size_t size) {
  set_has_kickresponse();
  kickresponse_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.AuthResponse.KickResponse)
}
inline ::std::string* AuthResponse::mutable_kickresponse() {
  set_has_kickresponse();
  // @@protoc_insertion_point(field_mutable:FromCs.AuthResponse.KickResponse)
  return kickresponse_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthResponse::release_kickresponse() {
  // @@protoc_insertion_point(field_release:FromCs.AuthResponse.KickResponse)
  clear_has_kickresponse();
  return kickresponse_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthResponse::set_allocated_kickresponse(::std::string* kickresponse) {
  if (kickresponse != NULL) {
    set_has_kickresponse();
  } else {
    clear_has_kickresponse();
  }
  kickresponse_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), kickresponse);
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthResponse.KickResponse)
}

// optional string ApplyBetaUrl = 38;
inline bool AuthResponse::has_applybetaurl() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void AuthResponse::set_has_applybetaurl() {
  _has_bits_[0] |= 0x00000200u;
}
inline void AuthResponse::clear_has_applybetaurl() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void AuthResponse::clear_applybetaurl() {
  applybetaurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_applybetaurl();
}
inline const ::std::string& AuthResponse::applybetaurl() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthResponse.ApplyBetaUrl)
  return applybetaurl_.GetNoArena();
}
inline void AuthResponse::set_applybetaurl(const ::std::string& value) {
  set_has_applybetaurl();
  applybetaurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.AuthResponse.ApplyBetaUrl)
}
#if LANG_CXX11
inline void AuthResponse::set_applybetaurl(::std::string&& value) {
  set_has_applybetaurl();
  applybetaurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.AuthResponse.ApplyBetaUrl)
}
#endif
inline void AuthResponse::set_applybetaurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_applybetaurl();
  applybetaurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.AuthResponse.ApplyBetaUrl)
}
inline void AuthResponse::set_applybetaurl(const char* value, size_t size) {
  set_has_applybetaurl();
  applybetaurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.AuthResponse.ApplyBetaUrl)
}
inline ::std::string* AuthResponse::mutable_applybetaurl() {
  set_has_applybetaurl();
  // @@protoc_insertion_point(field_mutable:FromCs.AuthResponse.ApplyBetaUrl)
  return applybetaurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthResponse::release_applybetaurl() {
  // @@protoc_insertion_point(field_release:FromCs.AuthResponse.ApplyBetaUrl)
  clear_has_applybetaurl();
  return applybetaurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthResponse::set_allocated_applybetaurl(::std::string* applybetaurl) {
  if (applybetaurl != NULL) {
    set_has_applybetaurl();
  } else {
    clear_has_applybetaurl();
  }
  applybetaurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), applybetaurl);
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthResponse.ApplyBetaUrl)
}

// optional string DeviceInfoXml = 39;
inline bool AuthResponse::has_deviceinfoxml() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void AuthResponse::set_has_deviceinfoxml() {
  _has_bits_[0] |= 0x00000400u;
}
inline void AuthResponse::clear_has_deviceinfoxml() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void AuthResponse::clear_deviceinfoxml() {
  deviceinfoxml_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_deviceinfoxml();
}
inline const ::std::string& AuthResponse::deviceinfoxml() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthResponse.DeviceInfoXml)
  return deviceinfoxml_.GetNoArena();
}
inline void AuthResponse::set_deviceinfoxml(const ::std::string& value) {
  set_has_deviceinfoxml();
  deviceinfoxml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.AuthResponse.DeviceInfoXml)
}
#if LANG_CXX11
inline void AuthResponse::set_deviceinfoxml(::std::string&& value) {
  set_has_deviceinfoxml();
  deviceinfoxml_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.AuthResponse.DeviceInfoXml)
}
#endif
inline void AuthResponse::set_deviceinfoxml(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_deviceinfoxml();
  deviceinfoxml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.AuthResponse.DeviceInfoXml)
}
inline void AuthResponse::set_deviceinfoxml(const char* value, size_t size) {
  set_has_deviceinfoxml();
  deviceinfoxml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.AuthResponse.DeviceInfoXml)
}
inline ::std::string* AuthResponse::mutable_deviceinfoxml() {
  set_has_deviceinfoxml();
  // @@protoc_insertion_point(field_mutable:FromCs.AuthResponse.DeviceInfoXml)
  return deviceinfoxml_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthResponse::release_deviceinfoxml() {
  // @@protoc_insertion_point(field_release:FromCs.AuthResponse.DeviceInfoXml)
  clear_has_deviceinfoxml();
  return deviceinfoxml_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthResponse::set_allocated_deviceinfoxml(::std::string* deviceinfoxml) {
  if (deviceinfoxml != NULL) {
    set_has_deviceinfoxml();
  } else {
    clear_has_deviceinfoxml();
  }
  deviceinfoxml_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deviceinfoxml);
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthResponse.DeviceInfoXml)
}

// optional string SoftConfigXml = 40;
inline bool AuthResponse::has_softconfigxml() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void AuthResponse::set_has_softconfigxml() {
  _has_bits_[0] |= 0x00000800u;
}
inline void AuthResponse::clear_has_softconfigxml() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void AuthResponse::clear_softconfigxml() {
  softconfigxml_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_softconfigxml();
}
inline const ::std::string& AuthResponse::softconfigxml() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthResponse.SoftConfigXml)
  return softconfigxml_.GetNoArena();
}
inline void AuthResponse::set_softconfigxml(const ::std::string& value) {
  set_has_softconfigxml();
  softconfigxml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.AuthResponse.SoftConfigXml)
}
#if LANG_CXX11
inline void AuthResponse::set_softconfigxml(::std::string&& value) {
  set_has_softconfigxml();
  softconfigxml_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.AuthResponse.SoftConfigXml)
}
#endif
inline void AuthResponse::set_softconfigxml(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_softconfigxml();
  softconfigxml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.AuthResponse.SoftConfigXml)
}
inline void AuthResponse::set_softconfigxml(const char* value, size_t size) {
  set_has_softconfigxml();
  softconfigxml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.AuthResponse.SoftConfigXml)
}
inline ::std::string* AuthResponse::mutable_softconfigxml() {
  set_has_softconfigxml();
  // @@protoc_insertion_point(field_mutable:FromCs.AuthResponse.SoftConfigXml)
  return softconfigxml_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthResponse::release_softconfigxml() {
  // @@protoc_insertion_point(field_release:FromCs.AuthResponse.SoftConfigXml)
  clear_has_softconfigxml();
  return softconfigxml_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthResponse::set_allocated_softconfigxml(::std::string* softconfigxml) {
  if (softconfigxml != NULL) {
    set_has_softconfigxml();
  } else {
    clear_has_softconfigxml();
  }
  softconfigxml_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), softconfigxml);
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthResponse.SoftConfigXml)
}

// optional .FromCs.NewHostListType NewHostList = 41;
inline bool AuthResponse::has_newhostlist() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void AuthResponse::set_has_newhostlist() {
  _has_bits_[0] |= 0x80000000u;
}
inline void AuthResponse::clear_has_newhostlist() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void AuthResponse::clear_newhostlist() {
  if (newhostlist_ != NULL) newhostlist_->::FromCs::NewHostListType::Clear();
  clear_has_newhostlist();
}
inline const ::FromCs::NewHostListType& AuthResponse::newhostlist() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthResponse.NewHostList)
  return newhostlist_ != NULL ? *newhostlist_
                         : *::FromCs::NewHostListType::internal_default_instance();
}
inline ::FromCs::NewHostListType* AuthResponse::mutable_newhostlist() {
  set_has_newhostlist();
  if (newhostlist_ == NULL) {
    newhostlist_ = new ::FromCs::NewHostListType;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.AuthResponse.NewHostList)
  return newhostlist_;
}
inline ::FromCs::NewHostListType* AuthResponse::release_newhostlist() {
  // @@protoc_insertion_point(field_release:FromCs.AuthResponse.NewHostList)
  clear_has_newhostlist();
  ::FromCs::NewHostListType* temp = newhostlist_;
  newhostlist_ = NULL;
  return temp;
}
inline void AuthResponse::set_allocated_newhostlist(::FromCs::NewHostListType* newhostlist) {
  delete newhostlist_;
  newhostlist_ = newhostlist;
  if (newhostlist) {
    set_has_newhostlist();
  } else {
    clear_has_newhostlist();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthResponse.NewHostList)
}

// optional string AuthTicket = 42;
inline bool AuthResponse::has_authticket() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void AuthResponse::set_has_authticket() {
  _has_bits_[0] |= 0x00001000u;
}
inline void AuthResponse::clear_has_authticket() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void AuthResponse::clear_authticket() {
  authticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_authticket();
}
inline const ::std::string& AuthResponse::authticket() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthResponse.AuthTicket)
  return authticket_.GetNoArena();
}
inline void AuthResponse::set_authticket(const ::std::string& value) {
  set_has_authticket();
  authticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.AuthResponse.AuthTicket)
}
#if LANG_CXX11
inline void AuthResponse::set_authticket(::std::string&& value) {
  set_has_authticket();
  authticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.AuthResponse.AuthTicket)
}
#endif
inline void AuthResponse::set_authticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_authticket();
  authticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.AuthResponse.AuthTicket)
}
inline void AuthResponse::set_authticket(const char* value, size_t size) {
  set_has_authticket();
  authticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.AuthResponse.AuthTicket)
}
inline ::std::string* AuthResponse::mutable_authticket() {
  set_has_authticket();
  // @@protoc_insertion_point(field_mutable:FromCs.AuthResponse.AuthTicket)
  return authticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthResponse::release_authticket() {
  // @@protoc_insertion_point(field_release:FromCs.AuthResponse.AuthTicket)
  clear_has_authticket();
  return authticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthResponse::set_allocated_authticket(::std::string* authticket) {
  if (authticket != NULL) {
    set_has_authticket();
  } else {
    clear_has_authticket();
  }
  authticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), authticket);
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthResponse.AuthTicket)
}

// optional int32 SafeDevice = 43;
inline bool AuthResponse::has_safedevice() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void AuthResponse::set_has_safedevice() {
  _has_bits_[1] |= 0x00002000u;
}
inline void AuthResponse::clear_has_safedevice() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void AuthResponse::clear_safedevice() {
  safedevice_ = 0;
  clear_has_safedevice();
}
inline ::google::protobuf::int32 AuthResponse::safedevice() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthResponse.SafeDevice)
  return safedevice_;
}
inline void AuthResponse::set_safedevice(::google::protobuf::int32 value) {
  set_has_safedevice();
  safedevice_ = value;
  // @@protoc_insertion_point(field_set:FromCs.AuthResponse.SafeDevice)
}

// optional int32 MainAcctType = 44;
inline bool AuthResponse::has_mainaccttype() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void AuthResponse::set_has_mainaccttype() {
  _has_bits_[1] |= 0x00004000u;
}
inline void AuthResponse::clear_has_mainaccttype() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void AuthResponse::clear_mainaccttype() {
  mainaccttype_ = 0;
  clear_has_mainaccttype();
}
inline ::google::protobuf::int32 AuthResponse::mainaccttype() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthResponse.MainAcctType)
  return mainaccttype_;
}
inline void AuthResponse::set_mainaccttype(::google::protobuf::int32 value) {
  set_has_mainaccttype();
  mainaccttype_ = value;
  // @@protoc_insertion_point(field_set:FromCs.AuthResponse.MainAcctType)
}

// optional int32 NeedSetEmailPwd = 45;
inline bool AuthResponse::has_needsetemailpwd() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void AuthResponse::set_has_needsetemailpwd() {
  _has_bits_[1] |= 0x00008000u;
}
inline void AuthResponse::clear_has_needsetemailpwd() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void AuthResponse::clear_needsetemailpwd() {
  needsetemailpwd_ = 0;
  clear_has_needsetemailpwd();
}
inline ::google::protobuf::int32 AuthResponse::needsetemailpwd() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthResponse.NeedSetEmailPwd)
  return needsetemailpwd_;
}
inline void AuthResponse::set_needsetemailpwd(::google::protobuf::int32 value) {
  set_has_needsetemailpwd();
  needsetemailpwd_ = value;
  // @@protoc_insertion_point(field_set:FromCs.AuthResponse.NeedSetEmailPwd)
}

// optional string HintMsg = 46;
inline bool AuthResponse::has_hintmsg() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void AuthResponse::set_has_hintmsg() {
  _has_bits_[0] |= 0x00002000u;
}
inline void AuthResponse::clear_has_hintmsg() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void AuthResponse::clear_hintmsg() {
  hintmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hintmsg();
}
inline const ::std::string& AuthResponse::hintmsg() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthResponse.HintMsg)
  return hintmsg_.GetNoArena();
}
inline void AuthResponse::set_hintmsg(const ::std::string& value) {
  set_has_hintmsg();
  hintmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.AuthResponse.HintMsg)
}
#if LANG_CXX11
inline void AuthResponse::set_hintmsg(::std::string&& value) {
  set_has_hintmsg();
  hintmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.AuthResponse.HintMsg)
}
#endif
inline void AuthResponse::set_hintmsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hintmsg();
  hintmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.AuthResponse.HintMsg)
}
inline void AuthResponse::set_hintmsg(const char* value, size_t size) {
  set_has_hintmsg();
  hintmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.AuthResponse.HintMsg)
}
inline ::std::string* AuthResponse::mutable_hintmsg() {
  set_has_hintmsg();
  // @@protoc_insertion_point(field_mutable:FromCs.AuthResponse.HintMsg)
  return hintmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthResponse::release_hintmsg() {
  // @@protoc_insertion_point(field_release:FromCs.AuthResponse.HintMsg)
  clear_has_hintmsg();
  return hintmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthResponse::set_allocated_hintmsg(::std::string* hintmsg) {
  if (hintmsg != NULL) {
    set_has_hintmsg();
  } else {
    clear_has_hintmsg();
  }
  hintmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hintmsg);
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthResponse.HintMsg)
}

// optional string AutoAuthTicket = 47;
inline bool AuthResponse::has_autoauthticket() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void AuthResponse::set_has_autoauthticket() {
  _has_bits_[0] |= 0x00004000u;
}
inline void AuthResponse::clear_has_autoauthticket() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void AuthResponse::clear_autoauthticket() {
  autoauthticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_autoauthticket();
}
inline const ::std::string& AuthResponse::autoauthticket() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthResponse.AutoAuthTicket)
  return autoauthticket_.GetNoArena();
}
inline void AuthResponse::set_autoauthticket(const ::std::string& value) {
  set_has_autoauthticket();
  autoauthticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.AuthResponse.AutoAuthTicket)
}
#if LANG_CXX11
inline void AuthResponse::set_autoauthticket(::std::string&& value) {
  set_has_autoauthticket();
  autoauthticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.AuthResponse.AutoAuthTicket)
}
#endif
inline void AuthResponse::set_autoauthticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_autoauthticket();
  autoauthticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.AuthResponse.AutoAuthTicket)
}
inline void AuthResponse::set_autoauthticket(const char* value, size_t size) {
  set_has_autoauthticket();
  autoauthticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.AuthResponse.AutoAuthTicket)
}
inline ::std::string* AuthResponse::mutable_autoauthticket() {
  set_has_autoauthticket();
  // @@protoc_insertion_point(field_mutable:FromCs.AuthResponse.AutoAuthTicket)
  return autoauthticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthResponse::release_autoauthticket() {
  // @@protoc_insertion_point(field_release:FromCs.AuthResponse.AutoAuthTicket)
  clear_has_autoauthticket();
  return autoauthticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthResponse::set_allocated_autoauthticket(::std::string* autoauthticket) {
  if (autoauthticket != NULL) {
    set_has_autoauthticket();
  } else {
    clear_has_autoauthticket();
  }
  autoauthticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), autoauthticket);
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthResponse.AutoAuthTicket)
}

// optional .FromCs.DnsInfoType DnsInfo = 48;
inline bool AuthResponse::has_dnsinfo() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void AuthResponse::set_has_dnsinfo() {
  _has_bits_[1] |= 0x00000001u;
}
inline void AuthResponse::clear_has_dnsinfo() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void AuthResponse::clear_dnsinfo() {
  if (dnsinfo_ != NULL) dnsinfo_->::FromCs::DnsInfoType::Clear();
  clear_has_dnsinfo();
}
inline const ::FromCs::DnsInfoType& AuthResponse::dnsinfo() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthResponse.DnsInfo)
  return dnsinfo_ != NULL ? *dnsinfo_
                         : *::FromCs::DnsInfoType::internal_default_instance();
}
inline ::FromCs::DnsInfoType* AuthResponse::mutable_dnsinfo() {
  set_has_dnsinfo();
  if (dnsinfo_ == NULL) {
    dnsinfo_ = new ::FromCs::DnsInfoType;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.AuthResponse.DnsInfo)
  return dnsinfo_;
}
inline ::FromCs::DnsInfoType* AuthResponse::release_dnsinfo() {
  // @@protoc_insertion_point(field_release:FromCs.AuthResponse.DnsInfo)
  clear_has_dnsinfo();
  ::FromCs::DnsInfoType* temp = dnsinfo_;
  dnsinfo_ = NULL;
  return temp;
}
inline void AuthResponse::set_allocated_dnsinfo(::FromCs::DnsInfoType* dnsinfo) {
  delete dnsinfo_;
  dnsinfo_ = dnsinfo;
  if (dnsinfo) {
    set_has_dnsinfo();
  } else {
    clear_has_dnsinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthResponse.DnsInfo)
}

// -------------------------------------------------------------------

// SendMsgRequest

// required .FromCs.BaseRequest base = 1;
inline bool SendMsgRequest::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SendMsgRequest::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SendMsgRequest::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SendMsgRequest::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseRequest::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseRequest& SendMsgRequest::base() const {
  // @@protoc_insertion_point(field_get:FromCs.SendMsgRequest.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseRequest::internal_default_instance();
}
inline ::FromCs::BaseRequest* SendMsgRequest::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.SendMsgRequest.base)
  return base_;
}
inline ::FromCs::BaseRequest* SendMsgRequest::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.SendMsgRequest.base)
  clear_has_base();
  ::FromCs::BaseRequest* temp = base_;
  base_ = NULL;
  return temp;
}
inline void SendMsgRequest::set_allocated_base(::FromCs::BaseRequest* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.SendMsgRequest.base)
}

// required int32 Count = 2;
inline bool SendMsgRequest::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SendMsgRequest::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SendMsgRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SendMsgRequest::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 SendMsgRequest::count() const {
  // @@protoc_insertion_point(field_get:FromCs.SendMsgRequest.Count)
  return count_;
}
inline void SendMsgRequest::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:FromCs.SendMsgRequest.Count)
}

// repeated .FromCs.MsgRequestBody List = 3;
inline int SendMsgRequest::list_size() const {
  return list_.size();
}
inline void SendMsgRequest::clear_list() {
  list_.Clear();
}
inline const ::FromCs::MsgRequestBody& SendMsgRequest::list(int index) const {
  // @@protoc_insertion_point(field_get:FromCs.SendMsgRequest.List)
  return list_.Get(index);
}
inline ::FromCs::MsgRequestBody* SendMsgRequest::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:FromCs.SendMsgRequest.List)
  return list_.Mutable(index);
}
inline ::FromCs::MsgRequestBody* SendMsgRequest::add_list() {
  // @@protoc_insertion_point(field_add:FromCs.SendMsgRequest.List)
  return list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::FromCs::MsgRequestBody >*
SendMsgRequest::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:FromCs.SendMsgRequest.List)
  return &list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::FromCs::MsgRequestBody >&
SendMsgRequest::list() const {
  // @@protoc_insertion_point(field_list:FromCs.SendMsgRequest.List)
  return list_;
}

// -------------------------------------------------------------------

// SendMsgResponse

// required .FromCs.BaseResponse base = 1;
inline bool SendMsgResponse::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SendMsgResponse::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SendMsgResponse::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SendMsgResponse::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseResponse::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseResponse& SendMsgResponse::base() const {
  // @@protoc_insertion_point(field_get:FromCs.SendMsgResponse.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseResponse::internal_default_instance();
}
inline ::FromCs::BaseResponse* SendMsgResponse::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.SendMsgResponse.base)
  return base_;
}
inline ::FromCs::BaseResponse* SendMsgResponse::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.SendMsgResponse.base)
  clear_has_base();
  ::FromCs::BaseResponse* temp = base_;
  base_ = NULL;
  return temp;
}
inline void SendMsgResponse::set_allocated_base(::FromCs::BaseResponse* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.SendMsgResponse.base)
}

// required int32 Count = 2;
inline bool SendMsgResponse::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SendMsgResponse::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SendMsgResponse::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SendMsgResponse::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 SendMsgResponse::count() const {
  // @@protoc_insertion_point(field_get:FromCs.SendMsgResponse.Count)
  return count_;
}
inline void SendMsgResponse::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:FromCs.SendMsgResponse.Count)
}

// repeated .FromCs.MsgResponseBody List = 3;
inline int SendMsgResponse::list_size() const {
  return list_.size();
}
inline void SendMsgResponse::clear_list() {
  list_.Clear();
}
inline const ::FromCs::MsgResponseBody& SendMsgResponse::list(int index) const {
  // @@protoc_insertion_point(field_get:FromCs.SendMsgResponse.List)
  return list_.Get(index);
}
inline ::FromCs::MsgResponseBody* SendMsgResponse::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:FromCs.SendMsgResponse.List)
  return list_.Mutable(index);
}
inline ::FromCs::MsgResponseBody* SendMsgResponse::add_list() {
  // @@protoc_insertion_point(field_add:FromCs.SendMsgResponse.List)
  return list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::FromCs::MsgResponseBody >*
SendMsgResponse::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:FromCs.SendMsgResponse.List)
  return &list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::FromCs::MsgResponseBody >&
SendMsgResponse::list() const {
  // @@protoc_insertion_point(field_list:FromCs.SendMsgResponse.List)
  return list_;
}

// -------------------------------------------------------------------

// NewSyncRequest

// required .FromCs.CmdList Oplog = 1;
inline bool NewSyncRequest::has_oplog() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NewSyncRequest::set_has_oplog() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NewSyncRequest::clear_has_oplog() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NewSyncRequest::clear_oplog() {
  if (oplog_ != NULL) oplog_->::FromCs::CmdList::Clear();
  clear_has_oplog();
}
inline const ::FromCs::CmdList& NewSyncRequest::oplog() const {
  // @@protoc_insertion_point(field_get:FromCs.NewSyncRequest.Oplog)
  return oplog_ != NULL ? *oplog_
                         : *::FromCs::CmdList::internal_default_instance();
}
inline ::FromCs::CmdList* NewSyncRequest::mutable_oplog() {
  set_has_oplog();
  if (oplog_ == NULL) {
    oplog_ = new ::FromCs::CmdList;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.NewSyncRequest.Oplog)
  return oplog_;
}
inline ::FromCs::CmdList* NewSyncRequest::release_oplog() {
  // @@protoc_insertion_point(field_release:FromCs.NewSyncRequest.Oplog)
  clear_has_oplog();
  ::FromCs::CmdList* temp = oplog_;
  oplog_ = NULL;
  return temp;
}
inline void NewSyncRequest::set_allocated_oplog(::FromCs::CmdList* oplog) {
  delete oplog_;
  oplog_ = oplog;
  if (oplog) {
    set_has_oplog();
  } else {
    clear_has_oplog();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewSyncRequest.Oplog)
}

// required int32 Selector = 2;
inline bool NewSyncRequest::has_selector() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NewSyncRequest::set_has_selector() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NewSyncRequest::clear_has_selector() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NewSyncRequest::clear_selector() {
  selector_ = 0;
  clear_has_selector();
}
inline ::google::protobuf::int32 NewSyncRequest::selector() const {
  // @@protoc_insertion_point(field_get:FromCs.NewSyncRequest.Selector)
  return selector_;
}
inline void NewSyncRequest::set_selector(::google::protobuf::int32 value) {
  set_has_selector();
  selector_ = value;
  // @@protoc_insertion_point(field_set:FromCs.NewSyncRequest.Selector)
}

// required .FromCs.sKBuiltinBufferT KeyBuf = 3;
inline bool NewSyncRequest::has_keybuf() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NewSyncRequest::set_has_keybuf() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NewSyncRequest::clear_has_keybuf() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NewSyncRequest::clear_keybuf() {
  if (keybuf_ != NULL) keybuf_->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_keybuf();
}
inline const ::FromCs::sKBuiltinBufferT& NewSyncRequest::keybuf() const {
  // @@protoc_insertion_point(field_get:FromCs.NewSyncRequest.KeyBuf)
  return keybuf_ != NULL ? *keybuf_
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* NewSyncRequest::mutable_keybuf() {
  set_has_keybuf();
  if (keybuf_ == NULL) {
    keybuf_ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.NewSyncRequest.KeyBuf)
  return keybuf_;
}
inline ::FromCs::sKBuiltinBufferT* NewSyncRequest::release_keybuf() {
  // @@protoc_insertion_point(field_release:FromCs.NewSyncRequest.KeyBuf)
  clear_has_keybuf();
  ::FromCs::sKBuiltinBufferT* temp = keybuf_;
  keybuf_ = NULL;
  return temp;
}
inline void NewSyncRequest::set_allocated_keybuf(::FromCs::sKBuiltinBufferT* keybuf) {
  delete keybuf_;
  keybuf_ = keybuf;
  if (keybuf) {
    set_has_keybuf();
  } else {
    clear_has_keybuf();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewSyncRequest.KeyBuf)
}

// optional int32 Scene = 4;
inline bool NewSyncRequest::has_scene() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NewSyncRequest::set_has_scene() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NewSyncRequest::clear_has_scene() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NewSyncRequest::clear_scene() {
  scene_ = 0;
  clear_has_scene();
}
inline ::google::protobuf::int32 NewSyncRequest::scene() const {
  // @@protoc_insertion_point(field_get:FromCs.NewSyncRequest.Scene)
  return scene_;
}
inline void NewSyncRequest::set_scene(::google::protobuf::int32 value) {
  set_has_scene();
  scene_ = value;
  // @@protoc_insertion_point(field_set:FromCs.NewSyncRequest.Scene)
}

// optional string DeviceType = 5;
inline bool NewSyncRequest::has_devicetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NewSyncRequest::set_has_devicetype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NewSyncRequest::clear_has_devicetype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NewSyncRequest::clear_devicetype() {
  devicetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_devicetype();
}
inline const ::std::string& NewSyncRequest::devicetype() const {
  // @@protoc_insertion_point(field_get:FromCs.NewSyncRequest.DeviceType)
  return devicetype_.GetNoArena();
}
inline void NewSyncRequest::set_devicetype(const ::std::string& value) {
  set_has_devicetype();
  devicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.NewSyncRequest.DeviceType)
}
#if LANG_CXX11
inline void NewSyncRequest::set_devicetype(::std::string&& value) {
  set_has_devicetype();
  devicetype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.NewSyncRequest.DeviceType)
}
#endif
inline void NewSyncRequest::set_devicetype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_devicetype();
  devicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.NewSyncRequest.DeviceType)
}
inline void NewSyncRequest::set_devicetype(const char* value, size_t size) {
  set_has_devicetype();
  devicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.NewSyncRequest.DeviceType)
}
inline ::std::string* NewSyncRequest::mutable_devicetype() {
  set_has_devicetype();
  // @@protoc_insertion_point(field_mutable:FromCs.NewSyncRequest.DeviceType)
  return devicetype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewSyncRequest::release_devicetype() {
  // @@protoc_insertion_point(field_release:FromCs.NewSyncRequest.DeviceType)
  clear_has_devicetype();
  return devicetype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewSyncRequest::set_allocated_devicetype(::std::string* devicetype) {
  if (devicetype != NULL) {
    set_has_devicetype();
  } else {
    clear_has_devicetype();
  }
  devicetype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicetype);
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewSyncRequest.DeviceType)
}

// -------------------------------------------------------------------

// NewSyncResponse

// required int32 Ret = 1;
inline bool NewSyncResponse::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NewSyncResponse::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NewSyncResponse::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NewSyncResponse::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 NewSyncResponse::ret() const {
  // @@protoc_insertion_point(field_get:FromCs.NewSyncResponse.Ret)
  return ret_;
}
inline void NewSyncResponse::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:FromCs.NewSyncResponse.Ret)
}

// required .FromCs.CmdList CmdList = 2;
inline bool NewSyncResponse::has_cmdlist() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NewSyncResponse::set_has_cmdlist() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NewSyncResponse::clear_has_cmdlist() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NewSyncResponse::clear_cmdlist() {
  if (cmdlist_ != NULL) cmdlist_->::FromCs::CmdList::Clear();
  clear_has_cmdlist();
}
inline const ::FromCs::CmdList& NewSyncResponse::cmdlist() const {
  // @@protoc_insertion_point(field_get:FromCs.NewSyncResponse.CmdList)
  return cmdlist_ != NULL ? *cmdlist_
                         : *::FromCs::CmdList::internal_default_instance();
}
inline ::FromCs::CmdList* NewSyncResponse::mutable_cmdlist() {
  set_has_cmdlist();
  if (cmdlist_ == NULL) {
    cmdlist_ = new ::FromCs::CmdList;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.NewSyncResponse.CmdList)
  return cmdlist_;
}
inline ::FromCs::CmdList* NewSyncResponse::release_cmdlist() {
  // @@protoc_insertion_point(field_release:FromCs.NewSyncResponse.CmdList)
  clear_has_cmdlist();
  ::FromCs::CmdList* temp = cmdlist_;
  cmdlist_ = NULL;
  return temp;
}
inline void NewSyncResponse::set_allocated_cmdlist(::FromCs::CmdList* cmdlist) {
  delete cmdlist_;
  cmdlist_ = cmdlist;
  if (cmdlist) {
    set_has_cmdlist();
  } else {
    clear_has_cmdlist();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewSyncResponse.CmdList)
}

// required int32 ContinueFlag = 3;
inline bool NewSyncResponse::has_continueflag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NewSyncResponse::set_has_continueflag() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NewSyncResponse::clear_has_continueflag() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NewSyncResponse::clear_continueflag() {
  continueflag_ = 0;
  clear_has_continueflag();
}
inline ::google::protobuf::int32 NewSyncResponse::continueflag() const {
  // @@protoc_insertion_point(field_get:FromCs.NewSyncResponse.ContinueFlag)
  return continueflag_;
}
inline void NewSyncResponse::set_continueflag(::google::protobuf::int32 value) {
  set_has_continueflag();
  continueflag_ = value;
  // @@protoc_insertion_point(field_set:FromCs.NewSyncResponse.ContinueFlag)
}

// required .FromCs.sKBuiltinBufferT KeyBuf = 4;
inline bool NewSyncResponse::has_keybuf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NewSyncResponse::set_has_keybuf() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NewSyncResponse::clear_has_keybuf() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NewSyncResponse::clear_keybuf() {
  if (keybuf_ != NULL) keybuf_->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_keybuf();
}
inline const ::FromCs::sKBuiltinBufferT& NewSyncResponse::keybuf() const {
  // @@protoc_insertion_point(field_get:FromCs.NewSyncResponse.KeyBuf)
  return keybuf_ != NULL ? *keybuf_
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* NewSyncResponse::mutable_keybuf() {
  set_has_keybuf();
  if (keybuf_ == NULL) {
    keybuf_ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.NewSyncResponse.KeyBuf)
  return keybuf_;
}
inline ::FromCs::sKBuiltinBufferT* NewSyncResponse::release_keybuf() {
  // @@protoc_insertion_point(field_release:FromCs.NewSyncResponse.KeyBuf)
  clear_has_keybuf();
  ::FromCs::sKBuiltinBufferT* temp = keybuf_;
  keybuf_ = NULL;
  return temp;
}
inline void NewSyncResponse::set_allocated_keybuf(::FromCs::sKBuiltinBufferT* keybuf) {
  delete keybuf_;
  keybuf_ = keybuf;
  if (keybuf) {
    set_has_keybuf();
  } else {
    clear_has_keybuf();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewSyncResponse.KeyBuf)
}

// optional int32 Status = 5;
inline bool NewSyncResponse::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NewSyncResponse::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NewSyncResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NewSyncResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 NewSyncResponse::status() const {
  // @@protoc_insertion_point(field_get:FromCs.NewSyncResponse.Status)
  return status_;
}
inline void NewSyncResponse::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:FromCs.NewSyncResponse.Status)
}

// -------------------------------------------------------------------

// MMSnsSyncRequest

// required .FromCs.BaseRequest base = 1;
inline bool MMSnsSyncRequest::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MMSnsSyncRequest::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MMSnsSyncRequest::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MMSnsSyncRequest::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseRequest::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseRequest& MMSnsSyncRequest::base() const {
  // @@protoc_insertion_point(field_get:FromCs.MMSnsSyncRequest.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseRequest::internal_default_instance();
}
inline ::FromCs::BaseRequest* MMSnsSyncRequest::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.MMSnsSyncRequest.base)
  return base_;
}
inline ::FromCs::BaseRequest* MMSnsSyncRequest::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.MMSnsSyncRequest.base)
  clear_has_base();
  ::FromCs::BaseRequest* temp = base_;
  base_ = NULL;
  return temp;
}
inline void MMSnsSyncRequest::set_allocated_base(::FromCs::BaseRequest* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.MMSnsSyncRequest.base)
}

// required int32 Selector = 2;
inline bool MMSnsSyncRequest::has_selector() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MMSnsSyncRequest::set_has_selector() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MMSnsSyncRequest::clear_has_selector() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MMSnsSyncRequest::clear_selector() {
  selector_ = 0;
  clear_has_selector();
}
inline ::google::protobuf::int32 MMSnsSyncRequest::selector() const {
  // @@protoc_insertion_point(field_get:FromCs.MMSnsSyncRequest.Selector)
  return selector_;
}
inline void MMSnsSyncRequest::set_selector(::google::protobuf::int32 value) {
  set_has_selector();
  selector_ = value;
  // @@protoc_insertion_point(field_set:FromCs.MMSnsSyncRequest.Selector)
}

// required .FromCs.sKBuiltinBufferT KeyBuf = 3;
inline bool MMSnsSyncRequest::has_keybuf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MMSnsSyncRequest::set_has_keybuf() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MMSnsSyncRequest::clear_has_keybuf() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MMSnsSyncRequest::clear_keybuf() {
  if (keybuf_ != NULL) keybuf_->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_keybuf();
}
inline const ::FromCs::sKBuiltinBufferT& MMSnsSyncRequest::keybuf() const {
  // @@protoc_insertion_point(field_get:FromCs.MMSnsSyncRequest.KeyBuf)
  return keybuf_ != NULL ? *keybuf_
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* MMSnsSyncRequest::mutable_keybuf() {
  set_has_keybuf();
  if (keybuf_ == NULL) {
    keybuf_ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.MMSnsSyncRequest.KeyBuf)
  return keybuf_;
}
inline ::FromCs::sKBuiltinBufferT* MMSnsSyncRequest::release_keybuf() {
  // @@protoc_insertion_point(field_release:FromCs.MMSnsSyncRequest.KeyBuf)
  clear_has_keybuf();
  ::FromCs::sKBuiltinBufferT* temp = keybuf_;
  keybuf_ = NULL;
  return temp;
}
inline void MMSnsSyncRequest::set_allocated_keybuf(::FromCs::sKBuiltinBufferT* keybuf) {
  delete keybuf_;
  keybuf_ = keybuf;
  if (keybuf) {
    set_has_keybuf();
  } else {
    clear_has_keybuf();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.MMSnsSyncRequest.KeyBuf)
}

// -------------------------------------------------------------------

// MMSnsSyncResponse

// required .FromCs.BaseResponse base = 1;
inline bool MMSnsSyncResponse::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MMSnsSyncResponse::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MMSnsSyncResponse::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MMSnsSyncResponse::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseResponse::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseResponse& MMSnsSyncResponse::base() const {
  // @@protoc_insertion_point(field_get:FromCs.MMSnsSyncResponse.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseResponse::internal_default_instance();
}
inline ::FromCs::BaseResponse* MMSnsSyncResponse::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.MMSnsSyncResponse.base)
  return base_;
}
inline ::FromCs::BaseResponse* MMSnsSyncResponse::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.MMSnsSyncResponse.base)
  clear_has_base();
  ::FromCs::BaseResponse* temp = base_;
  base_ = NULL;
  return temp;
}
inline void MMSnsSyncResponse::set_allocated_base(::FromCs::BaseResponse* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.MMSnsSyncResponse.base)
}

// required .FromCs.CmdList CmdList = 2;
inline bool MMSnsSyncResponse::has_cmdlist() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MMSnsSyncResponse::set_has_cmdlist() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MMSnsSyncResponse::clear_has_cmdlist() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MMSnsSyncResponse::clear_cmdlist() {
  if (cmdlist_ != NULL) cmdlist_->::FromCs::CmdList::Clear();
  clear_has_cmdlist();
}
inline const ::FromCs::CmdList& MMSnsSyncResponse::cmdlist() const {
  // @@protoc_insertion_point(field_get:FromCs.MMSnsSyncResponse.CmdList)
  return cmdlist_ != NULL ? *cmdlist_
                         : *::FromCs::CmdList::internal_default_instance();
}
inline ::FromCs::CmdList* MMSnsSyncResponse::mutable_cmdlist() {
  set_has_cmdlist();
  if (cmdlist_ == NULL) {
    cmdlist_ = new ::FromCs::CmdList;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.MMSnsSyncResponse.CmdList)
  return cmdlist_;
}
inline ::FromCs::CmdList* MMSnsSyncResponse::release_cmdlist() {
  // @@protoc_insertion_point(field_release:FromCs.MMSnsSyncResponse.CmdList)
  clear_has_cmdlist();
  ::FromCs::CmdList* temp = cmdlist_;
  cmdlist_ = NULL;
  return temp;
}
inline void MMSnsSyncResponse::set_allocated_cmdlist(::FromCs::CmdList* cmdlist) {
  delete cmdlist_;
  cmdlist_ = cmdlist;
  if (cmdlist) {
    set_has_cmdlist();
  } else {
    clear_has_cmdlist();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.MMSnsSyncResponse.CmdList)
}

// required int32 ContinueFlag = 3;
inline bool MMSnsSyncResponse::has_continueflag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MMSnsSyncResponse::set_has_continueflag() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MMSnsSyncResponse::clear_has_continueflag() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MMSnsSyncResponse::clear_continueflag() {
  continueflag_ = 0;
  clear_has_continueflag();
}
inline ::google::protobuf::int32 MMSnsSyncResponse::continueflag() const {
  // @@protoc_insertion_point(field_get:FromCs.MMSnsSyncResponse.ContinueFlag)
  return continueflag_;
}
inline void MMSnsSyncResponse::set_continueflag(::google::protobuf::int32 value) {
  set_has_continueflag();
  continueflag_ = value;
  // @@protoc_insertion_point(field_set:FromCs.MMSnsSyncResponse.ContinueFlag)
}

// required .FromCs.sKBuiltinBufferT KeyBuf = 4;
inline bool MMSnsSyncResponse::has_keybuf() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MMSnsSyncResponse::set_has_keybuf() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MMSnsSyncResponse::clear_has_keybuf() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MMSnsSyncResponse::clear_keybuf() {
  if (keybuf_ != NULL) keybuf_->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_keybuf();
}
inline const ::FromCs::sKBuiltinBufferT& MMSnsSyncResponse::keybuf() const {
  // @@protoc_insertion_point(field_get:FromCs.MMSnsSyncResponse.KeyBuf)
  return keybuf_ != NULL ? *keybuf_
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* MMSnsSyncResponse::mutable_keybuf() {
  set_has_keybuf();
  if (keybuf_ == NULL) {
    keybuf_ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.MMSnsSyncResponse.KeyBuf)
  return keybuf_;
}
inline ::FromCs::sKBuiltinBufferT* MMSnsSyncResponse::release_keybuf() {
  // @@protoc_insertion_point(field_release:FromCs.MMSnsSyncResponse.KeyBuf)
  clear_has_keybuf();
  ::FromCs::sKBuiltinBufferT* temp = keybuf_;
  keybuf_ = NULL;
  return temp;
}
inline void MMSnsSyncResponse::set_allocated_keybuf(::FromCs::sKBuiltinBufferT* keybuf) {
  delete keybuf_;
  keybuf_ = keybuf;
  if (keybuf) {
    set_has_keybuf();
  } else {
    clear_has_keybuf();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.MMSnsSyncResponse.KeyBuf)
}

// -------------------------------------------------------------------

// LBSFindRequest

// required .FromCs.BaseRequest base = 1;
inline bool LBSFindRequest::has_base() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LBSFindRequest::set_has_base() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LBSFindRequest::clear_has_base() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LBSFindRequest::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseRequest::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseRequest& LBSFindRequest::base() const {
  // @@protoc_insertion_point(field_get:FromCs.LBSFindRequest.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseRequest::internal_default_instance();
}
inline ::FromCs::BaseRequest* LBSFindRequest::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.LBSFindRequest.base)
  return base_;
}
inline ::FromCs::BaseRequest* LBSFindRequest::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.LBSFindRequest.base)
  clear_has_base();
  ::FromCs::BaseRequest* temp = base_;
  base_ = NULL;
  return temp;
}
inline void LBSFindRequest::set_allocated_base(::FromCs::BaseRequest* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.LBSFindRequest.base)
}

// required int32 OpCode = 2;
inline bool LBSFindRequest::has_opcode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LBSFindRequest::set_has_opcode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LBSFindRequest::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LBSFindRequest::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
inline ::google::protobuf::int32 LBSFindRequest::opcode() const {
  // @@protoc_insertion_point(field_get:FromCs.LBSFindRequest.OpCode)
  return opcode_;
}
inline void LBSFindRequest::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
  // @@protoc_insertion_point(field_set:FromCs.LBSFindRequest.OpCode)
}

// required float Longitude = 3;
inline bool LBSFindRequest::has_longitude() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LBSFindRequest::set_has_longitude() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LBSFindRequest::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LBSFindRequest::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline float LBSFindRequest::longitude() const {
  // @@protoc_insertion_point(field_get:FromCs.LBSFindRequest.Longitude)
  return longitude_;
}
inline void LBSFindRequest::set_longitude(float value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:FromCs.LBSFindRequest.Longitude)
}

// required float Latitude = 4;
inline bool LBSFindRequest::has_latitude() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LBSFindRequest::set_has_latitude() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LBSFindRequest::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LBSFindRequest::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline float LBSFindRequest::latitude() const {
  // @@protoc_insertion_point(field_get:FromCs.LBSFindRequest.Latitude)
  return latitude_;
}
inline void LBSFindRequest::set_latitude(float value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:FromCs.LBSFindRequest.Latitude)
}

// required int32 Precision = 5;
inline bool LBSFindRequest::has_precision() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LBSFindRequest::set_has_precision() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LBSFindRequest::clear_has_precision() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LBSFindRequest::clear_precision() {
  precision_ = 0;
  clear_has_precision();
}
inline ::google::protobuf::int32 LBSFindRequest::precision() const {
  // @@protoc_insertion_point(field_get:FromCs.LBSFindRequest.Precision)
  return precision_;
}
inline void LBSFindRequest::set_precision(::google::protobuf::int32 value) {
  set_has_precision();
  precision_ = value;
  // @@protoc_insertion_point(field_set:FromCs.LBSFindRequest.Precision)
}

// optional string MacAddr = 6;
inline bool LBSFindRequest::has_macaddr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LBSFindRequest::set_has_macaddr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LBSFindRequest::clear_has_macaddr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LBSFindRequest::clear_macaddr() {
  macaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_macaddr();
}
inline const ::std::string& LBSFindRequest::macaddr() const {
  // @@protoc_insertion_point(field_get:FromCs.LBSFindRequest.MacAddr)
  return macaddr_.GetNoArena();
}
inline void LBSFindRequest::set_macaddr(const ::std::string& value) {
  set_has_macaddr();
  macaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.LBSFindRequest.MacAddr)
}
#if LANG_CXX11
inline void LBSFindRequest::set_macaddr(::std::string&& value) {
  set_has_macaddr();
  macaddr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.LBSFindRequest.MacAddr)
}
#endif
inline void LBSFindRequest::set_macaddr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_macaddr();
  macaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.LBSFindRequest.MacAddr)
}
inline void LBSFindRequest::set_macaddr(const char* value, size_t size) {
  set_has_macaddr();
  macaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.LBSFindRequest.MacAddr)
}
inline ::std::string* LBSFindRequest::mutable_macaddr() {
  set_has_macaddr();
  // @@protoc_insertion_point(field_mutable:FromCs.LBSFindRequest.MacAddr)
  return macaddr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LBSFindRequest::release_macaddr() {
  // @@protoc_insertion_point(field_release:FromCs.LBSFindRequest.MacAddr)
  clear_has_macaddr();
  return macaddr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LBSFindRequest::set_allocated_macaddr(::std::string* macaddr) {
  if (macaddr != NULL) {
    set_has_macaddr();
  } else {
    clear_has_macaddr();
  }
  macaddr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), macaddr);
  // @@protoc_insertion_point(field_set_allocated:FromCs.LBSFindRequest.MacAddr)
}

// optional string CellId = 7;
inline bool LBSFindRequest::has_cellid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LBSFindRequest::set_has_cellid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LBSFindRequest::clear_has_cellid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LBSFindRequest::clear_cellid() {
  cellid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cellid();
}
inline const ::std::string& LBSFindRequest::cellid() const {
  // @@protoc_insertion_point(field_get:FromCs.LBSFindRequest.CellId)
  return cellid_.GetNoArena();
}
inline void LBSFindRequest::set_cellid(const ::std::string& value) {
  set_has_cellid();
  cellid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.LBSFindRequest.CellId)
}
#if LANG_CXX11
inline void LBSFindRequest::set_cellid(::std::string&& value) {
  set_has_cellid();
  cellid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.LBSFindRequest.CellId)
}
#endif
inline void LBSFindRequest::set_cellid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cellid();
  cellid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.LBSFindRequest.CellId)
}
inline void LBSFindRequest::set_cellid(const char* value, size_t size) {
  set_has_cellid();
  cellid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.LBSFindRequest.CellId)
}
inline ::std::string* LBSFindRequest::mutable_cellid() {
  set_has_cellid();
  // @@protoc_insertion_point(field_mutable:FromCs.LBSFindRequest.CellId)
  return cellid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LBSFindRequest::release_cellid() {
  // @@protoc_insertion_point(field_release:FromCs.LBSFindRequest.CellId)
  clear_has_cellid();
  return cellid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LBSFindRequest::set_allocated_cellid(::std::string* cellid) {
  if (cellid != NULL) {
    set_has_cellid();
  } else {
    clear_has_cellid();
  }
  cellid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cellid);
  // @@protoc_insertion_point(field_set_allocated:FromCs.LBSFindRequest.CellId)
}

// optional int32 GPSSource = 8;
inline bool LBSFindRequest::has_gpssource() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LBSFindRequest::set_has_gpssource() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LBSFindRequest::clear_has_gpssource() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LBSFindRequest::clear_gpssource() {
  gpssource_ = 0;
  clear_has_gpssource();
}
inline ::google::protobuf::int32 LBSFindRequest::gpssource() const {
  // @@protoc_insertion_point(field_get:FromCs.LBSFindRequest.GPSSource)
  return gpssource_;
}
inline void LBSFindRequest::set_gpssource(::google::protobuf::int32 value) {
  set_has_gpssource();
  gpssource_ = value;
  // @@protoc_insertion_point(field_set:FromCs.LBSFindRequest.GPSSource)
}

// -------------------------------------------------------------------

// LBSFindResponse

// required .FromCs.BaseResponse base = 1;
inline bool LBSFindResponse::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LBSFindResponse::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LBSFindResponse::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LBSFindResponse::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseResponse::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseResponse& LBSFindResponse::base() const {
  // @@protoc_insertion_point(field_get:FromCs.LBSFindResponse.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseResponse::internal_default_instance();
}
inline ::FromCs::BaseResponse* LBSFindResponse::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.LBSFindResponse.base)
  return base_;
}
inline ::FromCs::BaseResponse* LBSFindResponse::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.LBSFindResponse.base)
  clear_has_base();
  ::FromCs::BaseResponse* temp = base_;
  base_ = NULL;
  return temp;
}
inline void LBSFindResponse::set_allocated_base(::FromCs::BaseResponse* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.LBSFindResponse.base)
}

// required int32 ContactCount = 2;
inline bool LBSFindResponse::has_contactcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LBSFindResponse::set_has_contactcount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LBSFindResponse::clear_has_contactcount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LBSFindResponse::clear_contactcount() {
  contactcount_ = 0;
  clear_has_contactcount();
}
inline ::google::protobuf::int32 LBSFindResponse::contactcount() const {
  // @@protoc_insertion_point(field_get:FromCs.LBSFindResponse.ContactCount)
  return contactcount_;
}
inline void LBSFindResponse::set_contactcount(::google::protobuf::int32 value) {
  set_has_contactcount();
  contactcount_ = value;
  // @@protoc_insertion_point(field_set:FromCs.LBSFindResponse.ContactCount)
}

// repeated .FromCs.ContactObject ContactList = 3;
inline int LBSFindResponse::contactlist_size() const {
  return contactlist_.size();
}
inline void LBSFindResponse::clear_contactlist() {
  contactlist_.Clear();
}
inline const ::FromCs::ContactObject& LBSFindResponse::contactlist(int index) const {
  // @@protoc_insertion_point(field_get:FromCs.LBSFindResponse.ContactList)
  return contactlist_.Get(index);
}
inline ::FromCs::ContactObject* LBSFindResponse::mutable_contactlist(int index) {
  // @@protoc_insertion_point(field_mutable:FromCs.LBSFindResponse.ContactList)
  return contactlist_.Mutable(index);
}
inline ::FromCs::ContactObject* LBSFindResponse::add_contactlist() {
  // @@protoc_insertion_point(field_add:FromCs.LBSFindResponse.ContactList)
  return contactlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::FromCs::ContactObject >*
LBSFindResponse::mutable_contactlist() {
  // @@protoc_insertion_point(field_mutable_list:FromCs.LBSFindResponse.ContactList)
  return &contactlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::FromCs::ContactObject >&
LBSFindResponse::contactlist() const {
  // @@protoc_insertion_point(field_list:FromCs.LBSFindResponse.ContactList)
  return contactlist_;
}

// optional int32 State = 4;
inline bool LBSFindResponse::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LBSFindResponse::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LBSFindResponse::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LBSFindResponse::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 LBSFindResponse::state() const {
  // @@protoc_insertion_point(field_get:FromCs.LBSFindResponse.State)
  return state_;
}
inline void LBSFindResponse::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:FromCs.LBSFindResponse.State)
}

// optional int32 FlushTime = 5;
inline bool LBSFindResponse::has_flushtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LBSFindResponse::set_has_flushtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LBSFindResponse::clear_has_flushtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LBSFindResponse::clear_flushtime() {
  flushtime_ = 0;
  clear_has_flushtime();
}
inline ::google::protobuf::int32 LBSFindResponse::flushtime() const {
  // @@protoc_insertion_point(field_get:FromCs.LBSFindResponse.FlushTime)
  return flushtime_;
}
inline void LBSFindResponse::set_flushtime(::google::protobuf::int32 value) {
  set_has_flushtime();
  flushtime_ = value;
  // @@protoc_insertion_point(field_set:FromCs.LBSFindResponse.FlushTime)
}

// optional int32 IsShowRoom = 6;
inline bool LBSFindResponse::has_isshowroom() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LBSFindResponse::set_has_isshowroom() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LBSFindResponse::clear_has_isshowroom() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LBSFindResponse::clear_isshowroom() {
  isshowroom_ = 0;
  clear_has_isshowroom();
}
inline ::google::protobuf::int32 LBSFindResponse::isshowroom() const {
  // @@protoc_insertion_point(field_get:FromCs.LBSFindResponse.IsShowRoom)
  return isshowroom_;
}
inline void LBSFindResponse::set_isshowroom(::google::protobuf::int32 value) {
  set_has_isshowroom();
  isshowroom_ = value;
  // @@protoc_insertion_point(field_set:FromCs.LBSFindResponse.IsShowRoom)
}

// optional int32 RoomMemberCount = 7;
inline bool LBSFindResponse::has_roommembercount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LBSFindResponse::set_has_roommembercount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LBSFindResponse::clear_has_roommembercount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LBSFindResponse::clear_roommembercount() {
  roommembercount_ = 0;
  clear_has_roommembercount();
}
inline ::google::protobuf::int32 LBSFindResponse::roommembercount() const {
  // @@protoc_insertion_point(field_get:FromCs.LBSFindResponse.RoomMemberCount)
  return roommembercount_;
}
inline void LBSFindResponse::set_roommembercount(::google::protobuf::int32 value) {
  set_has_roommembercount();
  roommembercount_ = value;
  // @@protoc_insertion_point(field_set:FromCs.LBSFindResponse.RoomMemberCount)
}

// -------------------------------------------------------------------

// GetBrandListRequest

// required .FromCs.BaseRequest base = 1;
inline bool GetBrandListRequest::has_base() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetBrandListRequest::set_has_base() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetBrandListRequest::clear_has_base() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetBrandListRequest::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseRequest::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseRequest& GetBrandListRequest::base() const {
  // @@protoc_insertion_point(field_get:FromCs.GetBrandListRequest.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseRequest::internal_default_instance();
}
inline ::FromCs::BaseRequest* GetBrandListRequest::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.GetBrandListRequest.base)
  return base_;
}
inline ::FromCs::BaseRequest* GetBrandListRequest::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.GetBrandListRequest.base)
  clear_has_base();
  ::FromCs::BaseRequest* temp = base_;
  base_ = NULL;
  return temp;
}
inline void GetBrandListRequest::set_allocated_base(::FromCs::BaseRequest* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.GetBrandListRequest.base)
}

// optional string UserName = 2;
inline bool GetBrandListRequest::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetBrandListRequest::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetBrandListRequest::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetBrandListRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& GetBrandListRequest::username() const {
  // @@protoc_insertion_point(field_get:FromCs.GetBrandListRequest.UserName)
  return username_.GetNoArena();
}
inline void GetBrandListRequest::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.GetBrandListRequest.UserName)
}
#if LANG_CXX11
inline void GetBrandListRequest::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.GetBrandListRequest.UserName)
}
#endif
inline void GetBrandListRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.GetBrandListRequest.UserName)
}
inline void GetBrandListRequest::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.GetBrandListRequest.UserName)
}
inline ::std::string* GetBrandListRequest::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:FromCs.GetBrandListRequest.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetBrandListRequest::release_username() {
  // @@protoc_insertion_point(field_release:FromCs.GetBrandListRequest.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetBrandListRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:FromCs.GetBrandListRequest.UserName)
}

// required .FromCs.sKBuiltinBufferT RequestBuffer = 3;
inline bool GetBrandListRequest::has_requestbuffer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetBrandListRequest::set_has_requestbuffer() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetBrandListRequest::clear_has_requestbuffer() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetBrandListRequest::clear_requestbuffer() {
  if (requestbuffer_ != NULL) requestbuffer_->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_requestbuffer();
}
inline const ::FromCs::sKBuiltinBufferT& GetBrandListRequest::requestbuffer() const {
  // @@protoc_insertion_point(field_get:FromCs.GetBrandListRequest.RequestBuffer)
  return requestbuffer_ != NULL ? *requestbuffer_
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* GetBrandListRequest::mutable_requestbuffer() {
  set_has_requestbuffer();
  if (requestbuffer_ == NULL) {
    requestbuffer_ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.GetBrandListRequest.RequestBuffer)
  return requestbuffer_;
}
inline ::FromCs::sKBuiltinBufferT* GetBrandListRequest::release_requestbuffer() {
  // @@protoc_insertion_point(field_release:FromCs.GetBrandListRequest.RequestBuffer)
  clear_has_requestbuffer();
  ::FromCs::sKBuiltinBufferT* temp = requestbuffer_;
  requestbuffer_ = NULL;
  return temp;
}
inline void GetBrandListRequest::set_allocated_requestbuffer(::FromCs::sKBuiltinBufferT* requestbuffer) {
  delete requestbuffer_;
  requestbuffer_ = requestbuffer;
  if (requestbuffer) {
    set_has_requestbuffer();
  } else {
    clear_has_requestbuffer();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.GetBrandListRequest.RequestBuffer)
}

// -------------------------------------------------------------------

// GetBrandListResponse

// required .FromCs.BaseResponse base = 1;
inline bool GetBrandListResponse::has_base() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetBrandListResponse::set_has_base() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetBrandListResponse::clear_has_base() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetBrandListResponse::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseResponse::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseResponse& GetBrandListResponse::base() const {
  // @@protoc_insertion_point(field_get:FromCs.GetBrandListResponse.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseResponse::internal_default_instance();
}
inline ::FromCs::BaseResponse* GetBrandListResponse::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.GetBrandListResponse.base)
  return base_;
}
inline ::FromCs::BaseResponse* GetBrandListResponse::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.GetBrandListResponse.base)
  clear_has_base();
  ::FromCs::BaseResponse* temp = base_;
  base_ = NULL;
  return temp;
}
inline void GetBrandListResponse::set_allocated_base(::FromCs::BaseResponse* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.GetBrandListResponse.base)
}

// optional string BrandList = 2;
inline bool GetBrandListResponse::has_brandlist() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetBrandListResponse::set_has_brandlist() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetBrandListResponse::clear_has_brandlist() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetBrandListResponse::clear_brandlist() {
  brandlist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_brandlist();
}
inline const ::std::string& GetBrandListResponse::brandlist() const {
  // @@protoc_insertion_point(field_get:FromCs.GetBrandListResponse.BrandList)
  return brandlist_.GetNoArena();
}
inline void GetBrandListResponse::set_brandlist(const ::std::string& value) {
  set_has_brandlist();
  brandlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.GetBrandListResponse.BrandList)
}
#if LANG_CXX11
inline void GetBrandListResponse::set_brandlist(::std::string&& value) {
  set_has_brandlist();
  brandlist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.GetBrandListResponse.BrandList)
}
#endif
inline void GetBrandListResponse::set_brandlist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_brandlist();
  brandlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.GetBrandListResponse.BrandList)
}
inline void GetBrandListResponse::set_brandlist(const char* value, size_t size) {
  set_has_brandlist();
  brandlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.GetBrandListResponse.BrandList)
}
inline ::std::string* GetBrandListResponse::mutable_brandlist() {
  set_has_brandlist();
  // @@protoc_insertion_point(field_mutable:FromCs.GetBrandListResponse.BrandList)
  return brandlist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetBrandListResponse::release_brandlist() {
  // @@protoc_insertion_point(field_release:FromCs.GetBrandListResponse.BrandList)
  clear_has_brandlist();
  return brandlist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetBrandListResponse::set_allocated_brandlist(::std::string* brandlist) {
  if (brandlist != NULL) {
    set_has_brandlist();
  } else {
    clear_has_brandlist();
  }
  brandlist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brandlist);
  // @@protoc_insertion_point(field_set_allocated:FromCs.GetBrandListResponse.BrandList)
}

// required .FromCs.sKBuiltinBufferT RequestBuffer = 3;
inline bool GetBrandListResponse::has_requestbuffer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetBrandListResponse::set_has_requestbuffer() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetBrandListResponse::clear_has_requestbuffer() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetBrandListResponse::clear_requestbuffer() {
  if (requestbuffer_ != NULL) requestbuffer_->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_requestbuffer();
}
inline const ::FromCs::sKBuiltinBufferT& GetBrandListResponse::requestbuffer() const {
  // @@protoc_insertion_point(field_get:FromCs.GetBrandListResponse.RequestBuffer)
  return requestbuffer_ != NULL ? *requestbuffer_
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* GetBrandListResponse::mutable_requestbuffer() {
  set_has_requestbuffer();
  if (requestbuffer_ == NULL) {
    requestbuffer_ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.GetBrandListResponse.RequestBuffer)
  return requestbuffer_;
}
inline ::FromCs::sKBuiltinBufferT* GetBrandListResponse::release_requestbuffer() {
  // @@protoc_insertion_point(field_release:FromCs.GetBrandListResponse.RequestBuffer)
  clear_has_requestbuffer();
  ::FromCs::sKBuiltinBufferT* temp = requestbuffer_;
  requestbuffer_ = NULL;
  return temp;
}
inline void GetBrandListResponse::set_allocated_requestbuffer(::FromCs::sKBuiltinBufferT* requestbuffer) {
  delete requestbuffer_;
  requestbuffer_ = requestbuffer;
  if (requestbuffer) {
    set_has_requestbuffer();
  } else {
    clear_has_requestbuffer();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.GetBrandListResponse.RequestBuffer)
}

// -------------------------------------------------------------------

// UploadhdheadimgRequest

// required .FromCs.BaseRequest base = 1;
inline bool UploadhdheadimgRequest::has_base() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UploadhdheadimgRequest::set_has_base() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UploadhdheadimgRequest::clear_has_base() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UploadhdheadimgRequest::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseRequest::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseRequest& UploadhdheadimgRequest::base() const {
  // @@protoc_insertion_point(field_get:FromCs.UploadhdheadimgRequest.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseRequest::internal_default_instance();
}
inline ::FromCs::BaseRequest* UploadhdheadimgRequest::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.UploadhdheadimgRequest.base)
  return base_;
}
inline ::FromCs::BaseRequest* UploadhdheadimgRequest::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.UploadhdheadimgRequest.base)
  clear_has_base();
  ::FromCs::BaseRequest* temp = base_;
  base_ = NULL;
  return temp;
}
inline void UploadhdheadimgRequest::set_allocated_base(::FromCs::BaseRequest* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.UploadhdheadimgRequest.base)
}

// required int32 TotalLen = 2;
inline bool UploadhdheadimgRequest::has_totallen() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UploadhdheadimgRequest::set_has_totallen() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UploadhdheadimgRequest::clear_has_totallen() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UploadhdheadimgRequest::clear_totallen() {
  totallen_ = 0;
  clear_has_totallen();
}
inline ::google::protobuf::int32 UploadhdheadimgRequest::totallen() const {
  // @@protoc_insertion_point(field_get:FromCs.UploadhdheadimgRequest.TotalLen)
  return totallen_;
}
inline void UploadhdheadimgRequest::set_totallen(::google::protobuf::int32 value) {
  set_has_totallen();
  totallen_ = value;
  // @@protoc_insertion_point(field_set:FromCs.UploadhdheadimgRequest.TotalLen)
}

// required int32 StartPos = 3;
inline bool UploadhdheadimgRequest::has_startpos() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UploadhdheadimgRequest::set_has_startpos() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UploadhdheadimgRequest::clear_has_startpos() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UploadhdheadimgRequest::clear_startpos() {
  startpos_ = 0;
  clear_has_startpos();
}
inline ::google::protobuf::int32 UploadhdheadimgRequest::startpos() const {
  // @@protoc_insertion_point(field_get:FromCs.UploadhdheadimgRequest.StartPos)
  return startpos_;
}
inline void UploadhdheadimgRequest::set_startpos(::google::protobuf::int32 value) {
  set_has_startpos();
  startpos_ = value;
  // @@protoc_insertion_point(field_set:FromCs.UploadhdheadimgRequest.StartPos)
}

// required int32 HeadImgType = 4;
inline bool UploadhdheadimgRequest::has_headimgtype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UploadhdheadimgRequest::set_has_headimgtype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UploadhdheadimgRequest::clear_has_headimgtype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UploadhdheadimgRequest::clear_headimgtype() {
  headimgtype_ = 0;
  clear_has_headimgtype();
}
inline ::google::protobuf::int32 UploadhdheadimgRequest::headimgtype() const {
  // @@protoc_insertion_point(field_get:FromCs.UploadhdheadimgRequest.HeadImgType)
  return headimgtype_;
}
inline void UploadhdheadimgRequest::set_headimgtype(::google::protobuf::int32 value) {
  set_has_headimgtype();
  headimgtype_ = value;
  // @@protoc_insertion_point(field_set:FromCs.UploadhdheadimgRequest.HeadImgType)
}

// required .FromCs.sKBuiltinBufferT Data = 5;
inline bool UploadhdheadimgRequest::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UploadhdheadimgRequest::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UploadhdheadimgRequest::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UploadhdheadimgRequest::clear_data() {
  if (data_ != NULL) data_->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_data();
}
inline const ::FromCs::sKBuiltinBufferT& UploadhdheadimgRequest::data() const {
  // @@protoc_insertion_point(field_get:FromCs.UploadhdheadimgRequest.Data)
  return data_ != NULL ? *data_
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* UploadhdheadimgRequest::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    data_ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.UploadhdheadimgRequest.Data)
  return data_;
}
inline ::FromCs::sKBuiltinBufferT* UploadhdheadimgRequest::release_data() {
  // @@protoc_insertion_point(field_release:FromCs.UploadhdheadimgRequest.Data)
  clear_has_data();
  ::FromCs::sKBuiltinBufferT* temp = data_;
  data_ = NULL;
  return temp;
}
inline void UploadhdheadimgRequest::set_allocated_data(::FromCs::sKBuiltinBufferT* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.UploadhdheadimgRequest.Data)
}

// optional string ImgHash = 6;
inline bool UploadhdheadimgRequest::has_imghash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UploadhdheadimgRequest::set_has_imghash() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UploadhdheadimgRequest::clear_has_imghash() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UploadhdheadimgRequest::clear_imghash() {
  imghash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_imghash();
}
inline const ::std::string& UploadhdheadimgRequest::imghash() const {
  // @@protoc_insertion_point(field_get:FromCs.UploadhdheadimgRequest.ImgHash)
  return imghash_.GetNoArena();
}
inline void UploadhdheadimgRequest::set_imghash(const ::std::string& value) {
  set_has_imghash();
  imghash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.UploadhdheadimgRequest.ImgHash)
}
#if LANG_CXX11
inline void UploadhdheadimgRequest::set_imghash(::std::string&& value) {
  set_has_imghash();
  imghash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.UploadhdheadimgRequest.ImgHash)
}
#endif
inline void UploadhdheadimgRequest::set_imghash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_imghash();
  imghash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.UploadhdheadimgRequest.ImgHash)
}
inline void UploadhdheadimgRequest::set_imghash(const char* value, size_t size) {
  set_has_imghash();
  imghash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.UploadhdheadimgRequest.ImgHash)
}
inline ::std::string* UploadhdheadimgRequest::mutable_imghash() {
  set_has_imghash();
  // @@protoc_insertion_point(field_mutable:FromCs.UploadhdheadimgRequest.ImgHash)
  return imghash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadhdheadimgRequest::release_imghash() {
  // @@protoc_insertion_point(field_release:FromCs.UploadhdheadimgRequest.ImgHash)
  clear_has_imghash();
  return imghash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadhdheadimgRequest::set_allocated_imghash(::std::string* imghash) {
  if (imghash != NULL) {
    set_has_imghash();
  } else {
    clear_has_imghash();
  }
  imghash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imghash);
  // @@protoc_insertion_point(field_set_allocated:FromCs.UploadhdheadimgRequest.ImgHash)
}

// optional string UserName = 7;
inline bool UploadhdheadimgRequest::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UploadhdheadimgRequest::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UploadhdheadimgRequest::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UploadhdheadimgRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& UploadhdheadimgRequest::username() const {
  // @@protoc_insertion_point(field_get:FromCs.UploadhdheadimgRequest.UserName)
  return username_.GetNoArena();
}
inline void UploadhdheadimgRequest::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.UploadhdheadimgRequest.UserName)
}
#if LANG_CXX11
inline void UploadhdheadimgRequest::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.UploadhdheadimgRequest.UserName)
}
#endif
inline void UploadhdheadimgRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.UploadhdheadimgRequest.UserName)
}
inline void UploadhdheadimgRequest::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.UploadhdheadimgRequest.UserName)
}
inline ::std::string* UploadhdheadimgRequest::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:FromCs.UploadhdheadimgRequest.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadhdheadimgRequest::release_username() {
  // @@protoc_insertion_point(field_release:FromCs.UploadhdheadimgRequest.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadhdheadimgRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:FromCs.UploadhdheadimgRequest.UserName)
}

// -------------------------------------------------------------------

// UploadhdheadimgResponse

// required .FromCs.BaseResponse base = 1;
inline bool UploadhdheadimgResponse::has_base() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UploadhdheadimgResponse::set_has_base() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UploadhdheadimgResponse::clear_has_base() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UploadhdheadimgResponse::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseResponse::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseResponse& UploadhdheadimgResponse::base() const {
  // @@protoc_insertion_point(field_get:FromCs.UploadhdheadimgResponse.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseResponse::internal_default_instance();
}
inline ::FromCs::BaseResponse* UploadhdheadimgResponse::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.UploadhdheadimgResponse.base)
  return base_;
}
inline ::FromCs::BaseResponse* UploadhdheadimgResponse::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.UploadhdheadimgResponse.base)
  clear_has_base();
  ::FromCs::BaseResponse* temp = base_;
  base_ = NULL;
  return temp;
}
inline void UploadhdheadimgResponse::set_allocated_base(::FromCs::BaseResponse* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.UploadhdheadimgResponse.base)
}

// required int32 TotalLen = 2;
inline bool UploadhdheadimgResponse::has_totallen() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UploadhdheadimgResponse::set_has_totallen() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UploadhdheadimgResponse::clear_has_totallen() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UploadhdheadimgResponse::clear_totallen() {
  totallen_ = 0;
  clear_has_totallen();
}
inline ::google::protobuf::int32 UploadhdheadimgResponse::totallen() const {
  // @@protoc_insertion_point(field_get:FromCs.UploadhdheadimgResponse.TotalLen)
  return totallen_;
}
inline void UploadhdheadimgResponse::set_totallen(::google::protobuf::int32 value) {
  set_has_totallen();
  totallen_ = value;
  // @@protoc_insertion_point(field_set:FromCs.UploadhdheadimgResponse.TotalLen)
}

// required int32 StartPos = 3;
inline bool UploadhdheadimgResponse::has_startpos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UploadhdheadimgResponse::set_has_startpos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UploadhdheadimgResponse::clear_has_startpos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UploadhdheadimgResponse::clear_startpos() {
  startpos_ = 0;
  clear_has_startpos();
}
inline ::google::protobuf::int32 UploadhdheadimgResponse::startpos() const {
  // @@protoc_insertion_point(field_get:FromCs.UploadhdheadimgResponse.StartPos)
  return startpos_;
}
inline void UploadhdheadimgResponse::set_startpos(::google::protobuf::int32 value) {
  set_has_startpos();
  startpos_ = value;
  // @@protoc_insertion_point(field_set:FromCs.UploadhdheadimgResponse.StartPos)
}

// optional string FinalImgMd5sum = 4;
inline bool UploadhdheadimgResponse::has_finalimgmd5sum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UploadhdheadimgResponse::set_has_finalimgmd5sum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UploadhdheadimgResponse::clear_has_finalimgmd5sum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UploadhdheadimgResponse::clear_finalimgmd5sum() {
  finalimgmd5sum_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_finalimgmd5sum();
}
inline const ::std::string& UploadhdheadimgResponse::finalimgmd5sum() const {
  // @@protoc_insertion_point(field_get:FromCs.UploadhdheadimgResponse.FinalImgMd5sum)
  return finalimgmd5sum_.GetNoArena();
}
inline void UploadhdheadimgResponse::set_finalimgmd5sum(const ::std::string& value) {
  set_has_finalimgmd5sum();
  finalimgmd5sum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.UploadhdheadimgResponse.FinalImgMd5sum)
}
#if LANG_CXX11
inline void UploadhdheadimgResponse::set_finalimgmd5sum(::std::string&& value) {
  set_has_finalimgmd5sum();
  finalimgmd5sum_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.UploadhdheadimgResponse.FinalImgMd5sum)
}
#endif
inline void UploadhdheadimgResponse::set_finalimgmd5sum(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_finalimgmd5sum();
  finalimgmd5sum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.UploadhdheadimgResponse.FinalImgMd5sum)
}
inline void UploadhdheadimgResponse::set_finalimgmd5sum(const char* value, size_t size) {
  set_has_finalimgmd5sum();
  finalimgmd5sum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.UploadhdheadimgResponse.FinalImgMd5sum)
}
inline ::std::string* UploadhdheadimgResponse::mutable_finalimgmd5sum() {
  set_has_finalimgmd5sum();
  // @@protoc_insertion_point(field_mutable:FromCs.UploadhdheadimgResponse.FinalImgMd5sum)
  return finalimgmd5sum_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadhdheadimgResponse::release_finalimgmd5sum() {
  // @@protoc_insertion_point(field_release:FromCs.UploadhdheadimgResponse.FinalImgMd5sum)
  clear_has_finalimgmd5sum();
  return finalimgmd5sum_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadhdheadimgResponse::set_allocated_finalimgmd5sum(::std::string* finalimgmd5sum) {
  if (finalimgmd5sum != NULL) {
    set_has_finalimgmd5sum();
  } else {
    clear_has_finalimgmd5sum();
  }
  finalimgmd5sum_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), finalimgmd5sum);
  // @@protoc_insertion_point(field_set_allocated:FromCs.UploadhdheadimgResponse.FinalImgMd5sum)
}

// -------------------------------------------------------------------

// NewInitRequest

// required .FromCs.BaseRequest base = 1;
inline bool NewInitRequest::has_base() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NewInitRequest::set_has_base() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NewInitRequest::clear_has_base() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NewInitRequest::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseRequest::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseRequest& NewInitRequest::base() const {
  // @@protoc_insertion_point(field_get:FromCs.NewInitRequest.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseRequest::internal_default_instance();
}
inline ::FromCs::BaseRequest* NewInitRequest::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.NewInitRequest.base)
  return base_;
}
inline ::FromCs::BaseRequest* NewInitRequest::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.NewInitRequest.base)
  clear_has_base();
  ::FromCs::BaseRequest* temp = base_;
  base_ = NULL;
  return temp;
}
inline void NewInitRequest::set_allocated_base(::FromCs::BaseRequest* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewInitRequest.base)
}

// optional string UserName = 2;
inline bool NewInitRequest::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NewInitRequest::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NewInitRequest::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NewInitRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& NewInitRequest::username() const {
  // @@protoc_insertion_point(field_get:FromCs.NewInitRequest.UserName)
  return username_.GetNoArena();
}
inline void NewInitRequest::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.NewInitRequest.UserName)
}
#if LANG_CXX11
inline void NewInitRequest::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.NewInitRequest.UserName)
}
#endif
inline void NewInitRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.NewInitRequest.UserName)
}
inline void NewInitRequest::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.NewInitRequest.UserName)
}
inline ::std::string* NewInitRequest::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:FromCs.NewInitRequest.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewInitRequest::release_username() {
  // @@protoc_insertion_point(field_release:FromCs.NewInitRequest.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewInitRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewInitRequest.UserName)
}

// required .FromCs.sKBuiltinBufferT CurrentSynckey = 3;
inline bool NewInitRequest::has_currentsynckey() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NewInitRequest::set_has_currentsynckey() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NewInitRequest::clear_has_currentsynckey() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NewInitRequest::clear_currentsynckey() {
  if (currentsynckey_ != NULL) currentsynckey_->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_currentsynckey();
}
inline const ::FromCs::sKBuiltinBufferT& NewInitRequest::currentsynckey() const {
  // @@protoc_insertion_point(field_get:FromCs.NewInitRequest.CurrentSynckey)
  return currentsynckey_ != NULL ? *currentsynckey_
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* NewInitRequest::mutable_currentsynckey() {
  set_has_currentsynckey();
  if (currentsynckey_ == NULL) {
    currentsynckey_ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.NewInitRequest.CurrentSynckey)
  return currentsynckey_;
}
inline ::FromCs::sKBuiltinBufferT* NewInitRequest::release_currentsynckey() {
  // @@protoc_insertion_point(field_release:FromCs.NewInitRequest.CurrentSynckey)
  clear_has_currentsynckey();
  ::FromCs::sKBuiltinBufferT* temp = currentsynckey_;
  currentsynckey_ = NULL;
  return temp;
}
inline void NewInitRequest::set_allocated_currentsynckey(::FromCs::sKBuiltinBufferT* currentsynckey) {
  delete currentsynckey_;
  currentsynckey_ = currentsynckey;
  if (currentsynckey) {
    set_has_currentsynckey();
  } else {
    clear_has_currentsynckey();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewInitRequest.CurrentSynckey)
}

// required .FromCs.sKBuiltinBufferT MaxSynckey = 4;
inline bool NewInitRequest::has_maxsynckey() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NewInitRequest::set_has_maxsynckey() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NewInitRequest::clear_has_maxsynckey() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NewInitRequest::clear_maxsynckey() {
  if (maxsynckey_ != NULL) maxsynckey_->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_maxsynckey();
}
inline const ::FromCs::sKBuiltinBufferT& NewInitRequest::maxsynckey() const {
  // @@protoc_insertion_point(field_get:FromCs.NewInitRequest.MaxSynckey)
  return maxsynckey_ != NULL ? *maxsynckey_
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* NewInitRequest::mutable_maxsynckey() {
  set_has_maxsynckey();
  if (maxsynckey_ == NULL) {
    maxsynckey_ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.NewInitRequest.MaxSynckey)
  return maxsynckey_;
}
inline ::FromCs::sKBuiltinBufferT* NewInitRequest::release_maxsynckey() {
  // @@protoc_insertion_point(field_release:FromCs.NewInitRequest.MaxSynckey)
  clear_has_maxsynckey();
  ::FromCs::sKBuiltinBufferT* temp = maxsynckey_;
  maxsynckey_ = NULL;
  return temp;
}
inline void NewInitRequest::set_allocated_maxsynckey(::FromCs::sKBuiltinBufferT* maxsynckey) {
  delete maxsynckey_;
  maxsynckey_ = maxsynckey;
  if (maxsynckey) {
    set_has_maxsynckey();
  } else {
    clear_has_maxsynckey();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewInitRequest.MaxSynckey)
}

// optional string Language = 5;
inline bool NewInitRequest::has_language() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NewInitRequest::set_has_language() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NewInitRequest::clear_has_language() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NewInitRequest::clear_language() {
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_language();
}
inline const ::std::string& NewInitRequest::language() const {
  // @@protoc_insertion_point(field_get:FromCs.NewInitRequest.Language)
  return language_.GetNoArena();
}
inline void NewInitRequest::set_language(const ::std::string& value) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.NewInitRequest.Language)
}
#if LANG_CXX11
inline void NewInitRequest::set_language(::std::string&& value) {
  set_has_language();
  language_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.NewInitRequest.Language)
}
#endif
inline void NewInitRequest::set_language(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.NewInitRequest.Language)
}
inline void NewInitRequest::set_language(const char* value, size_t size) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.NewInitRequest.Language)
}
inline ::std::string* NewInitRequest::mutable_language() {
  set_has_language();
  // @@protoc_insertion_point(field_mutable:FromCs.NewInitRequest.Language)
  return language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewInitRequest::release_language() {
  // @@protoc_insertion_point(field_release:FromCs.NewInitRequest.Language)
  clear_has_language();
  return language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewInitRequest::set_allocated_language(::std::string* language) {
  if (language != NULL) {
    set_has_language();
  } else {
    clear_has_language();
  }
  language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewInitRequest.Language)
}

// -------------------------------------------------------------------

// NewInitResponse

// required .FromCs.BaseResponse base = 1;
inline bool NewInitResponse::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NewInitResponse::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NewInitResponse::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NewInitResponse::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseResponse::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseResponse& NewInitResponse::base() const {
  // @@protoc_insertion_point(field_get:FromCs.NewInitResponse.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseResponse::internal_default_instance();
}
inline ::FromCs::BaseResponse* NewInitResponse::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.NewInitResponse.base)
  return base_;
}
inline ::FromCs::BaseResponse* NewInitResponse::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.NewInitResponse.base)
  clear_has_base();
  ::FromCs::BaseResponse* temp = base_;
  base_ = NULL;
  return temp;
}
inline void NewInitResponse::set_allocated_base(::FromCs::BaseResponse* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewInitResponse.base)
}

// required .FromCs.sKBuiltinBufferT CurrentSynckey = 2;
inline bool NewInitResponse::has_currentsynckey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NewInitResponse::set_has_currentsynckey() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NewInitResponse::clear_has_currentsynckey() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NewInitResponse::clear_currentsynckey() {
  if (currentsynckey_ != NULL) currentsynckey_->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_currentsynckey();
}
inline const ::FromCs::sKBuiltinBufferT& NewInitResponse::currentsynckey() const {
  // @@protoc_insertion_point(field_get:FromCs.NewInitResponse.CurrentSynckey)
  return currentsynckey_ != NULL ? *currentsynckey_
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* NewInitResponse::mutable_currentsynckey() {
  set_has_currentsynckey();
  if (currentsynckey_ == NULL) {
    currentsynckey_ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.NewInitResponse.CurrentSynckey)
  return currentsynckey_;
}
inline ::FromCs::sKBuiltinBufferT* NewInitResponse::release_currentsynckey() {
  // @@protoc_insertion_point(field_release:FromCs.NewInitResponse.CurrentSynckey)
  clear_has_currentsynckey();
  ::FromCs::sKBuiltinBufferT* temp = currentsynckey_;
  currentsynckey_ = NULL;
  return temp;
}
inline void NewInitResponse::set_allocated_currentsynckey(::FromCs::sKBuiltinBufferT* currentsynckey) {
  delete currentsynckey_;
  currentsynckey_ = currentsynckey;
  if (currentsynckey) {
    set_has_currentsynckey();
  } else {
    clear_has_currentsynckey();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewInitResponse.CurrentSynckey)
}

// required .FromCs.sKBuiltinBufferT MaxSynckey = 3;
inline bool NewInitResponse::has_maxsynckey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NewInitResponse::set_has_maxsynckey() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NewInitResponse::clear_has_maxsynckey() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NewInitResponse::clear_maxsynckey() {
  if (maxsynckey_ != NULL) maxsynckey_->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_maxsynckey();
}
inline const ::FromCs::sKBuiltinBufferT& NewInitResponse::maxsynckey() const {
  // @@protoc_insertion_point(field_get:FromCs.NewInitResponse.MaxSynckey)
  return maxsynckey_ != NULL ? *maxsynckey_
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* NewInitResponse::mutable_maxsynckey() {
  set_has_maxsynckey();
  if (maxsynckey_ == NULL) {
    maxsynckey_ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.NewInitResponse.MaxSynckey)
  return maxsynckey_;
}
inline ::FromCs::sKBuiltinBufferT* NewInitResponse::release_maxsynckey() {
  // @@protoc_insertion_point(field_release:FromCs.NewInitResponse.MaxSynckey)
  clear_has_maxsynckey();
  ::FromCs::sKBuiltinBufferT* temp = maxsynckey_;
  maxsynckey_ = NULL;
  return temp;
}
inline void NewInitResponse::set_allocated_maxsynckey(::FromCs::sKBuiltinBufferT* maxsynckey) {
  delete maxsynckey_;
  maxsynckey_ = maxsynckey;
  if (maxsynckey) {
    set_has_maxsynckey();
  } else {
    clear_has_maxsynckey();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewInitResponse.MaxSynckey)
}

// required int32 ContinueFlag = 4;
inline bool NewInitResponse::has_continueflag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NewInitResponse::set_has_continueflag() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NewInitResponse::clear_has_continueflag() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NewInitResponse::clear_continueflag() {
  continueflag_ = 0;
  clear_has_continueflag();
}
inline ::google::protobuf::int32 NewInitResponse::continueflag() const {
  // @@protoc_insertion_point(field_get:FromCs.NewInitResponse.ContinueFlag)
  return continueflag_;
}
inline void NewInitResponse::set_continueflag(::google::protobuf::int32 value) {
  set_has_continueflag();
  continueflag_ = value;
  // @@protoc_insertion_point(field_set:FromCs.NewInitResponse.ContinueFlag)
}

// required int32 SelectBitmap = 5;
inline bool NewInitResponse::has_selectbitmap() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NewInitResponse::set_has_selectbitmap() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NewInitResponse::clear_has_selectbitmap() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NewInitResponse::clear_selectbitmap() {
  selectbitmap_ = 0;
  clear_has_selectbitmap();
}
inline ::google::protobuf::int32 NewInitResponse::selectbitmap() const {
  // @@protoc_insertion_point(field_get:FromCs.NewInitResponse.SelectBitmap)
  return selectbitmap_;
}
inline void NewInitResponse::set_selectbitmap(::google::protobuf::int32 value) {
  set_has_selectbitmap();
  selectbitmap_ = value;
  // @@protoc_insertion_point(field_set:FromCs.NewInitResponse.SelectBitmap)
}

// required int32 CmdCount = 6;
inline bool NewInitResponse::has_cmdcount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NewInitResponse::set_has_cmdcount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NewInitResponse::clear_has_cmdcount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NewInitResponse::clear_cmdcount() {
  cmdcount_ = 0;
  clear_has_cmdcount();
}
inline ::google::protobuf::int32 NewInitResponse::cmdcount() const {
  // @@protoc_insertion_point(field_get:FromCs.NewInitResponse.CmdCount)
  return cmdcount_;
}
inline void NewInitResponse::set_cmdcount(::google::protobuf::int32 value) {
  set_has_cmdcount();
  cmdcount_ = value;
  // @@protoc_insertion_point(field_set:FromCs.NewInitResponse.CmdCount)
}

// repeated .FromCs.CmdItem CmdList = 7;
inline int NewInitResponse::cmdlist_size() const {
  return cmdlist_.size();
}
inline void NewInitResponse::clear_cmdlist() {
  cmdlist_.Clear();
}
inline const ::FromCs::CmdItem& NewInitResponse::cmdlist(int index) const {
  // @@protoc_insertion_point(field_get:FromCs.NewInitResponse.CmdList)
  return cmdlist_.Get(index);
}
inline ::FromCs::CmdItem* NewInitResponse::mutable_cmdlist(int index) {
  // @@protoc_insertion_point(field_mutable:FromCs.NewInitResponse.CmdList)
  return cmdlist_.Mutable(index);
}
inline ::FromCs::CmdItem* NewInitResponse::add_cmdlist() {
  // @@protoc_insertion_point(field_add:FromCs.NewInitResponse.CmdList)
  return cmdlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::FromCs::CmdItem >*
NewInitResponse::mutable_cmdlist() {
  // @@protoc_insertion_point(field_mutable_list:FromCs.NewInitResponse.CmdList)
  return &cmdlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::FromCs::CmdItem >&
NewInitResponse::cmdlist() const {
  // @@protoc_insertion_point(field_list:FromCs.NewInitResponse.CmdList)
  return cmdlist_;
}

// required int32 Ratio = 8;
inline bool NewInitResponse::has_ratio() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NewInitResponse::set_has_ratio() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NewInitResponse::clear_has_ratio() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NewInitResponse::clear_ratio() {
  ratio_ = 0;
  clear_has_ratio();
}
inline ::google::protobuf::int32 NewInitResponse::ratio() const {
  // @@protoc_insertion_point(field_get:FromCs.NewInitResponse.Ratio)
  return ratio_;
}
inline void NewInitResponse::set_ratio(::google::protobuf::int32 value) {
  set_has_ratio();
  ratio_ = value;
  // @@protoc_insertion_point(field_set:FromCs.NewInitResponse.Ratio)
}

// -------------------------------------------------------------------

// NewRegRequest

// required .FromCs.BaseRequest base = 1;
inline bool NewRegRequest::has_base() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void NewRegRequest::set_has_base() {
  _has_bits_[0] |= 0x00100000u;
}
inline void NewRegRequest::clear_has_base() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void NewRegRequest::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseRequest::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseRequest& NewRegRequest::base() const {
  // @@protoc_insertion_point(field_get:FromCs.NewRegRequest.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseRequest::internal_default_instance();
}
inline ::FromCs::BaseRequest* NewRegRequest::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.NewRegRequest.base)
  return base_;
}
inline ::FromCs::BaseRequest* NewRegRequest::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.NewRegRequest.base)
  clear_has_base();
  ::FromCs::BaseRequest* temp = base_;
  base_ = NULL;
  return temp;
}
inline void NewRegRequest::set_allocated_base(::FromCs::BaseRequest* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewRegRequest.base)
}

// optional string UserName = 2;
inline bool NewRegRequest::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NewRegRequest::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NewRegRequest::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NewRegRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& NewRegRequest::username() const {
  // @@protoc_insertion_point(field_get:FromCs.NewRegRequest.UserName)
  return username_.GetNoArena();
}
inline void NewRegRequest::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.NewRegRequest.UserName)
}
#if LANG_CXX11
inline void NewRegRequest::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.NewRegRequest.UserName)
}
#endif
inline void NewRegRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.NewRegRequest.UserName)
}
inline void NewRegRequest::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.NewRegRequest.UserName)
}
inline ::std::string* NewRegRequest::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:FromCs.NewRegRequest.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewRegRequest::release_username() {
  // @@protoc_insertion_point(field_release:FromCs.NewRegRequest.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewRegRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewRegRequest.UserName)
}

// optional string Pwd = 3;
inline bool NewRegRequest::has_pwd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NewRegRequest::set_has_pwd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NewRegRequest::clear_has_pwd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NewRegRequest::clear_pwd() {
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pwd();
}
inline const ::std::string& NewRegRequest::pwd() const {
  // @@protoc_insertion_point(field_get:FromCs.NewRegRequest.Pwd)
  return pwd_.GetNoArena();
}
inline void NewRegRequest::set_pwd(const ::std::string& value) {
  set_has_pwd();
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.NewRegRequest.Pwd)
}
#if LANG_CXX11
inline void NewRegRequest::set_pwd(::std::string&& value) {
  set_has_pwd();
  pwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.NewRegRequest.Pwd)
}
#endif
inline void NewRegRequest::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pwd();
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.NewRegRequest.Pwd)
}
inline void NewRegRequest::set_pwd(const char* value, size_t size) {
  set_has_pwd();
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.NewRegRequest.Pwd)
}
inline ::std::string* NewRegRequest::mutable_pwd() {
  set_has_pwd();
  // @@protoc_insertion_point(field_mutable:FromCs.NewRegRequest.Pwd)
  return pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewRegRequest::release_pwd() {
  // @@protoc_insertion_point(field_release:FromCs.NewRegRequest.Pwd)
  clear_has_pwd();
  return pwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewRegRequest::set_allocated_pwd(::std::string* pwd) {
  if (pwd != NULL) {
    set_has_pwd();
  } else {
    clear_has_pwd();
  }
  pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd);
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewRegRequest.Pwd)
}

// optional string NickName = 4;
inline bool NewRegRequest::has_nickname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NewRegRequest::set_has_nickname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NewRegRequest::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NewRegRequest::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
inline const ::std::string& NewRegRequest::nickname() const {
  // @@protoc_insertion_point(field_get:FromCs.NewRegRequest.NickName)
  return nickname_.GetNoArena();
}
inline void NewRegRequest::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.NewRegRequest.NickName)
}
#if LANG_CXX11
inline void NewRegRequest::set_nickname(::std::string&& value) {
  set_has_nickname();
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.NewRegRequest.NickName)
}
#endif
inline void NewRegRequest::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.NewRegRequest.NickName)
}
inline void NewRegRequest::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.NewRegRequest.NickName)
}
inline ::std::string* NewRegRequest::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:FromCs.NewRegRequest.NickName)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewRegRequest::release_nickname() {
  // @@protoc_insertion_point(field_release:FromCs.NewRegRequest.NickName)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewRegRequest::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewRegRequest.NickName)
}

// required int32 BindUin = 5;
inline bool NewRegRequest::has_binduin() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void NewRegRequest::set_has_binduin() {
  _has_bits_[0] |= 0x00800000u;
}
inline void NewRegRequest::clear_has_binduin() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void NewRegRequest::clear_binduin() {
  binduin_ = 0;
  clear_has_binduin();
}
inline ::google::protobuf::int32 NewRegRequest::binduin() const {
  // @@protoc_insertion_point(field_get:FromCs.NewRegRequest.BindUin)
  return binduin_;
}
inline void NewRegRequest::set_binduin(::google::protobuf::int32 value) {
  set_has_binduin();
  binduin_ = value;
  // @@protoc_insertion_point(field_set:FromCs.NewRegRequest.BindUin)
}

// required string BindEmail = 6;
inline bool NewRegRequest::has_bindemail() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NewRegRequest::set_has_bindemail() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NewRegRequest::clear_has_bindemail() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NewRegRequest::clear_bindemail() {
  bindemail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bindemail();
}
inline const ::std::string& NewRegRequest::bindemail() const {
  // @@protoc_insertion_point(field_get:FromCs.NewRegRequest.BindEmail)
  return bindemail_.GetNoArena();
}
inline void NewRegRequest::set_bindemail(const ::std::string& value) {
  set_has_bindemail();
  bindemail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.NewRegRequest.BindEmail)
}
#if LANG_CXX11
inline void NewRegRequest::set_bindemail(::std::string&& value) {
  set_has_bindemail();
  bindemail_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.NewRegRequest.BindEmail)
}
#endif
inline void NewRegRequest::set_bindemail(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bindemail();
  bindemail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.NewRegRequest.BindEmail)
}
inline void NewRegRequest::set_bindemail(const char* value, size_t size) {
  set_has_bindemail();
  bindemail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.NewRegRequest.BindEmail)
}
inline ::std::string* NewRegRequest::mutable_bindemail() {
  set_has_bindemail();
  // @@protoc_insertion_point(field_mutable:FromCs.NewRegRequest.BindEmail)
  return bindemail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewRegRequest::release_bindemail() {
  // @@protoc_insertion_point(field_release:FromCs.NewRegRequest.BindEmail)
  clear_has_bindemail();
  return bindemail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewRegRequest::set_allocated_bindemail(::std::string* bindemail) {
  if (bindemail != NULL) {
    set_has_bindemail();
  } else {
    clear_has_bindemail();
  }
  bindemail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bindemail);
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewRegRequest.BindEmail)
}

// optional string BindMobile = 7;
inline bool NewRegRequest::has_bindmobile() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NewRegRequest::set_has_bindmobile() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NewRegRequest::clear_has_bindmobile() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NewRegRequest::clear_bindmobile() {
  bindmobile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bindmobile();
}
inline const ::std::string& NewRegRequest::bindmobile() const {
  // @@protoc_insertion_point(field_get:FromCs.NewRegRequest.BindMobile)
  return bindmobile_.GetNoArena();
}
inline void NewRegRequest::set_bindmobile(const ::std::string& value) {
  set_has_bindmobile();
  bindmobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.NewRegRequest.BindMobile)
}
#if LANG_CXX11
inline void NewRegRequest::set_bindmobile(::std::string&& value) {
  set_has_bindmobile();
  bindmobile_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.NewRegRequest.BindMobile)
}
#endif
inline void NewRegRequest::set_bindmobile(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bindmobile();
  bindmobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.NewRegRequest.BindMobile)
}
inline void NewRegRequest::set_bindmobile(const char* value, size_t size) {
  set_has_bindmobile();
  bindmobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.NewRegRequest.BindMobile)
}
inline ::std::string* NewRegRequest::mutable_bindmobile() {
  set_has_bindmobile();
  // @@protoc_insertion_point(field_mutable:FromCs.NewRegRequest.BindMobile)
  return bindmobile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewRegRequest::release_bindmobile() {
  // @@protoc_insertion_point(field_release:FromCs.NewRegRequest.BindMobile)
  clear_has_bindmobile();
  return bindmobile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewRegRequest::set_allocated_bindmobile(::std::string* bindmobile) {
  if (bindmobile != NULL) {
    set_has_bindmobile();
  } else {
    clear_has_bindmobile();
  }
  bindmobile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bindmobile);
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewRegRequest.BindMobile)
}

// optional string Ticket = 8;
inline bool NewRegRequest::has_ticket() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NewRegRequest::set_has_ticket() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NewRegRequest::clear_has_ticket() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NewRegRequest::clear_ticket() {
  ticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ticket();
}
inline const ::std::string& NewRegRequest::ticket() const {
  // @@protoc_insertion_point(field_get:FromCs.NewRegRequest.Ticket)
  return ticket_.GetNoArena();
}
inline void NewRegRequest::set_ticket(const ::std::string& value) {
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.NewRegRequest.Ticket)
}
#if LANG_CXX11
inline void NewRegRequest::set_ticket(::std::string&& value) {
  set_has_ticket();
  ticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.NewRegRequest.Ticket)
}
#endif
inline void NewRegRequest::set_ticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.NewRegRequest.Ticket)
}
inline void NewRegRequest::set_ticket(const char* value, size_t size) {
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.NewRegRequest.Ticket)
}
inline ::std::string* NewRegRequest::mutable_ticket() {
  set_has_ticket();
  // @@protoc_insertion_point(field_mutable:FromCs.NewRegRequest.Ticket)
  return ticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewRegRequest::release_ticket() {
  // @@protoc_insertion_point(field_release:FromCs.NewRegRequest.Ticket)
  clear_has_ticket();
  return ticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewRegRequest::set_allocated_ticket(::std::string* ticket) {
  if (ticket != NULL) {
    set_has_ticket();
  } else {
    clear_has_ticket();
  }
  ticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ticket);
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewRegRequest.Ticket)
}

// optional int32 BuiltinIPSeq = 12;
inline bool NewRegRequest::has_builtinipseq() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void NewRegRequest::set_has_builtinipseq() {
  _has_bits_[0] |= 0x01000000u;
}
inline void NewRegRequest::clear_has_builtinipseq() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void NewRegRequest::clear_builtinipseq() {
  builtinipseq_ = 0;
  clear_has_builtinipseq();
}
inline ::google::protobuf::int32 NewRegRequest::builtinipseq() const {
  // @@protoc_insertion_point(field_get:FromCs.NewRegRequest.BuiltinIPSeq)
  return builtinipseq_;
}
inline void NewRegRequest::set_builtinipseq(::google::protobuf::int32 value) {
  set_has_builtinipseq();
  builtinipseq_ = value;
  // @@protoc_insertion_point(field_set:FromCs.NewRegRequest.BuiltinIPSeq)
}

// optional int32 DLSrc = 13;
inline bool NewRegRequest::has_dlsrc() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void NewRegRequest::set_has_dlsrc() {
  _has_bits_[0] |= 0x02000000u;
}
inline void NewRegRequest::clear_has_dlsrc() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void NewRegRequest::clear_dlsrc() {
  dlsrc_ = 0;
  clear_has_dlsrc();
}
inline ::google::protobuf::int32 NewRegRequest::dlsrc() const {
  // @@protoc_insertion_point(field_get:FromCs.NewRegRequest.DLSrc)
  return dlsrc_;
}
inline void NewRegRequest::set_dlsrc(::google::protobuf::int32 value) {
  set_has_dlsrc();
  dlsrc_ = value;
  // @@protoc_insertion_point(field_set:FromCs.NewRegRequest.DLSrc)
}

// optional int32 RegMode = 14;
inline bool NewRegRequest::has_regmode() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void NewRegRequest::set_has_regmode() {
  _has_bits_[0] |= 0x04000000u;
}
inline void NewRegRequest::clear_has_regmode() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void NewRegRequest::clear_regmode() {
  regmode_ = 0;
  clear_has_regmode();
}
inline ::google::protobuf::int32 NewRegRequest::regmode() const {
  // @@protoc_insertion_point(field_get:FromCs.NewRegRequest.RegMode)
  return regmode_;
}
inline void NewRegRequest::set_regmode(::google::protobuf::int32 value) {
  set_has_regmode();
  regmode_ = value;
  // @@protoc_insertion_point(field_set:FromCs.NewRegRequest.RegMode)
}

// optional string TimeZone = 15;
inline bool NewRegRequest::has_timezone() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NewRegRequest::set_has_timezone() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NewRegRequest::clear_has_timezone() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NewRegRequest::clear_timezone() {
  timezone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_timezone();
}
inline const ::std::string& NewRegRequest::timezone() const {
  // @@protoc_insertion_point(field_get:FromCs.NewRegRequest.TimeZone)
  return timezone_.GetNoArena();
}
inline void NewRegRequest::set_timezone(const ::std::string& value) {
  set_has_timezone();
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.NewRegRequest.TimeZone)
}
#if LANG_CXX11
inline void NewRegRequest::set_timezone(::std::string&& value) {
  set_has_timezone();
  timezone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.NewRegRequest.TimeZone)
}
#endif
inline void NewRegRequest::set_timezone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_timezone();
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.NewRegRequest.TimeZone)
}
inline void NewRegRequest::set_timezone(const char* value, size_t size) {
  set_has_timezone();
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.NewRegRequest.TimeZone)
}
inline ::std::string* NewRegRequest::mutable_timezone() {
  set_has_timezone();
  // @@protoc_insertion_point(field_mutable:FromCs.NewRegRequest.TimeZone)
  return timezone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewRegRequest::release_timezone() {
  // @@protoc_insertion_point(field_release:FromCs.NewRegRequest.TimeZone)
  clear_has_timezone();
  return timezone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewRegRequest::set_allocated_timezone(::std::string* timezone) {
  if (timezone != NULL) {
    set_has_timezone();
  } else {
    clear_has_timezone();
  }
  timezone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timezone);
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewRegRequest.TimeZone)
}

// optional string Language = 16;
inline bool NewRegRequest::has_language() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NewRegRequest::set_has_language() {
  _has_bits_[0] |= 0x00000080u;
}
inline void NewRegRequest::clear_has_language() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void NewRegRequest::clear_language() {
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_language();
}
inline const ::std::string& NewRegRequest::language() const {
  // @@protoc_insertion_point(field_get:FromCs.NewRegRequest.Language)
  return language_.GetNoArena();
}
inline void NewRegRequest::set_language(const ::std::string& value) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.NewRegRequest.Language)
}
#if LANG_CXX11
inline void NewRegRequest::set_language(::std::string&& value) {
  set_has_language();
  language_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.NewRegRequest.Language)
}
#endif
inline void NewRegRequest::set_language(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.NewRegRequest.Language)
}
inline void NewRegRequest::set_language(const char* value, size_t size) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.NewRegRequest.Language)
}
inline ::std::string* NewRegRequest::mutable_language() {
  set_has_language();
  // @@protoc_insertion_point(field_mutable:FromCs.NewRegRequest.Language)
  return language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewRegRequest::release_language() {
  // @@protoc_insertion_point(field_release:FromCs.NewRegRequest.Language)
  clear_has_language();
  return language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewRegRequest::set_allocated_language(::std::string* language) {
  if (language != NULL) {
    set_has_language();
  } else {
    clear_has_language();
  }
  language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewRegRequest.Language)
}

// optional int32 ForceReg = 17;
inline bool NewRegRequest::has_forcereg() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void NewRegRequest::set_has_forcereg() {
  _has_bits_[0] |= 0x08000000u;
}
inline void NewRegRequest::clear_has_forcereg() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void NewRegRequest::clear_forcereg() {
  forcereg_ = 0;
  clear_has_forcereg();
}
inline ::google::protobuf::int32 NewRegRequest::forcereg() const {
  // @@protoc_insertion_point(field_get:FromCs.NewRegRequest.ForceReg)
  return forcereg_;
}
inline void NewRegRequest::set_forcereg(::google::protobuf::int32 value) {
  set_has_forcereg();
  forcereg_ = value;
  // @@protoc_insertion_point(field_set:FromCs.NewRegRequest.ForceReg)
}

// optional string RealCountry = 18;
inline bool NewRegRequest::has_realcountry() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void NewRegRequest::set_has_realcountry() {
  _has_bits_[0] |= 0x00000100u;
}
inline void NewRegRequest::clear_has_realcountry() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void NewRegRequest::clear_realcountry() {
  realcountry_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_realcountry();
}
inline const ::std::string& NewRegRequest::realcountry() const {
  // @@protoc_insertion_point(field_get:FromCs.NewRegRequest.RealCountry)
  return realcountry_.GetNoArena();
}
inline void NewRegRequest::set_realcountry(const ::std::string& value) {
  set_has_realcountry();
  realcountry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.NewRegRequest.RealCountry)
}
#if LANG_CXX11
inline void NewRegRequest::set_realcountry(::std::string&& value) {
  set_has_realcountry();
  realcountry_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.NewRegRequest.RealCountry)
}
#endif
inline void NewRegRequest::set_realcountry(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_realcountry();
  realcountry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.NewRegRequest.RealCountry)
}
inline void NewRegRequest::set_realcountry(const char* value, size_t size) {
  set_has_realcountry();
  realcountry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.NewRegRequest.RealCountry)
}
inline ::std::string* NewRegRequest::mutable_realcountry() {
  set_has_realcountry();
  // @@protoc_insertion_point(field_mutable:FromCs.NewRegRequest.RealCountry)
  return realcountry_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewRegRequest::release_realcountry() {
  // @@protoc_insertion_point(field_release:FromCs.NewRegRequest.RealCountry)
  clear_has_realcountry();
  return realcountry_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewRegRequest::set_allocated_realcountry(::std::string* realcountry) {
  if (realcountry != NULL) {
    set_has_realcountry();
  } else {
    clear_has_realcountry();
  }
  realcountry_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), realcountry);
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewRegRequest.RealCountry)
}

// required .FromCs.sKBuiltinBufferT RandomEncryKey = 19;
inline bool NewRegRequest::has_randomencrykey() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void NewRegRequest::set_has_randomencrykey() {
  _has_bits_[0] |= 0x00200000u;
}
inline void NewRegRequest::clear_has_randomencrykey() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void NewRegRequest::clear_randomencrykey() {
  if (randomencrykey_ != NULL) randomencrykey_->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_randomencrykey();
}
inline const ::FromCs::sKBuiltinBufferT& NewRegRequest::randomencrykey() const {
  // @@protoc_insertion_point(field_get:FromCs.NewRegRequest.RandomEncryKey)
  return randomencrykey_ != NULL ? *randomencrykey_
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* NewRegRequest::mutable_randomencrykey() {
  set_has_randomencrykey();
  if (randomencrykey_ == NULL) {
    randomencrykey_ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.NewRegRequest.RandomEncryKey)
  return randomencrykey_;
}
inline ::FromCs::sKBuiltinBufferT* NewRegRequest::release_randomencrykey() {
  // @@protoc_insertion_point(field_release:FromCs.NewRegRequest.RandomEncryKey)
  clear_has_randomencrykey();
  ::FromCs::sKBuiltinBufferT* temp = randomencrykey_;
  randomencrykey_ = NULL;
  return temp;
}
inline void NewRegRequest::set_allocated_randomencrykey(::FromCs::sKBuiltinBufferT* randomencrykey) {
  delete randomencrykey_;
  randomencrykey_ = randomencrykey;
  if (randomencrykey) {
    set_has_randomencrykey();
  } else {
    clear_has_randomencrykey();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewRegRequest.RandomEncryKey)
}

// optional string alias = 20;
inline bool NewRegRequest::has_alias() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void NewRegRequest::set_has_alias() {
  _has_bits_[0] |= 0x00000200u;
}
inline void NewRegRequest::clear_has_alias() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void NewRegRequest::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_alias();
}
inline const ::std::string& NewRegRequest::alias() const {
  // @@protoc_insertion_point(field_get:FromCs.NewRegRequest.alias)
  return alias_.GetNoArena();
}
inline void NewRegRequest::set_alias(const ::std::string& value) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.NewRegRequest.alias)
}
#if LANG_CXX11
inline void NewRegRequest::set_alias(::std::string&& value) {
  set_has_alias();
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.NewRegRequest.alias)
}
#endif
inline void NewRegRequest::set_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.NewRegRequest.alias)
}
inline void NewRegRequest::set_alias(const char* value, size_t size) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.NewRegRequest.alias)
}
inline ::std::string* NewRegRequest::mutable_alias() {
  set_has_alias();
  // @@protoc_insertion_point(field_mutable:FromCs.NewRegRequest.alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewRegRequest::release_alias() {
  // @@protoc_insertion_point(field_release:FromCs.NewRegRequest.alias)
  clear_has_alias();
  return alias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewRegRequest::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    set_has_alias();
  } else {
    clear_has_alias();
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewRegRequest.alias)
}

// optional string verifySignature = 21;
inline bool NewRegRequest::has_verifysignature() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void NewRegRequest::set_has_verifysignature() {
  _has_bits_[0] |= 0x00000400u;
}
inline void NewRegRequest::clear_has_verifysignature() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void NewRegRequest::clear_verifysignature() {
  verifysignature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_verifysignature();
}
inline const ::std::string& NewRegRequest::verifysignature() const {
  // @@protoc_insertion_point(field_get:FromCs.NewRegRequest.verifySignature)
  return verifysignature_.GetNoArena();
}
inline void NewRegRequest::set_verifysignature(const ::std::string& value) {
  set_has_verifysignature();
  verifysignature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.NewRegRequest.verifySignature)
}
#if LANG_CXX11
inline void NewRegRequest::set_verifysignature(::std::string&& value) {
  set_has_verifysignature();
  verifysignature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.NewRegRequest.verifySignature)
}
#endif
inline void NewRegRequest::set_verifysignature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_verifysignature();
  verifysignature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.NewRegRequest.verifySignature)
}
inline void NewRegRequest::set_verifysignature(const char* value, size_t size) {
  set_has_verifysignature();
  verifysignature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.NewRegRequest.verifySignature)
}
inline ::std::string* NewRegRequest::mutable_verifysignature() {
  set_has_verifysignature();
  // @@protoc_insertion_point(field_mutable:FromCs.NewRegRequest.verifySignature)
  return verifysignature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewRegRequest::release_verifysignature() {
  // @@protoc_insertion_point(field_release:FromCs.NewRegRequest.verifySignature)
  clear_has_verifysignature();
  return verifysignature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewRegRequest::set_allocated_verifysignature(::std::string* verifysignature) {
  if (verifysignature != NULL) {
    set_has_verifysignature();
  } else {
    clear_has_verifysignature();
  }
  verifysignature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verifysignature);
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewRegRequest.verifySignature)
}

// optional string verifyContent = 22;
inline bool NewRegRequest::has_verifycontent() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void NewRegRequest::set_has_verifycontent() {
  _has_bits_[0] |= 0x00000800u;
}
inline void NewRegRequest::clear_has_verifycontent() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void NewRegRequest::clear_verifycontent() {
  verifycontent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_verifycontent();
}
inline const ::std::string& NewRegRequest::verifycontent() const {
  // @@protoc_insertion_point(field_get:FromCs.NewRegRequest.verifyContent)
  return verifycontent_.GetNoArena();
}
inline void NewRegRequest::set_verifycontent(const ::std::string& value) {
  set_has_verifycontent();
  verifycontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.NewRegRequest.verifyContent)
}
#if LANG_CXX11
inline void NewRegRequest::set_verifycontent(::std::string&& value) {
  set_has_verifycontent();
  verifycontent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.NewRegRequest.verifyContent)
}
#endif
inline void NewRegRequest::set_verifycontent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_verifycontent();
  verifycontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.NewRegRequest.verifyContent)
}
inline void NewRegRequest::set_verifycontent(const char* value, size_t size) {
  set_has_verifycontent();
  verifycontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.NewRegRequest.verifyContent)
}
inline ::std::string* NewRegRequest::mutable_verifycontent() {
  set_has_verifycontent();
  // @@protoc_insertion_point(field_mutable:FromCs.NewRegRequest.verifyContent)
  return verifycontent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewRegRequest::release_verifycontent() {
  // @@protoc_insertion_point(field_release:FromCs.NewRegRequest.verifyContent)
  clear_has_verifycontent();
  return verifycontent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewRegRequest::set_allocated_verifycontent(::std::string* verifycontent) {
  if (verifycontent != NULL) {
    set_has_verifycontent();
  } else {
    clear_has_verifycontent();
  }
  verifycontent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verifycontent);
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewRegRequest.verifyContent)
}

// optional int32 hasHeadImg = 23;
inline bool NewRegRequest::has_hasheadimg() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void NewRegRequest::set_has_hasheadimg() {
  _has_bits_[0] |= 0x10000000u;
}
inline void NewRegRequest::clear_has_hasheadimg() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void NewRegRequest::clear_hasheadimg() {
  hasheadimg_ = 0;
  clear_has_hasheadimg();
}
inline ::google::protobuf::int32 NewRegRequest::hasheadimg() const {
  // @@protoc_insertion_point(field_get:FromCs.NewRegRequest.hasHeadImg)
  return hasheadimg_;
}
inline void NewRegRequest::set_hasheadimg(::google::protobuf::int32 value) {
  set_has_hasheadimg();
  hasheadimg_ = value;
  // @@protoc_insertion_point(field_set:FromCs.NewRegRequest.hasHeadImg)
}

// optional int32 suggestRet = 24;
inline bool NewRegRequest::has_suggestret() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void NewRegRequest::set_has_suggestret() {
  _has_bits_[0] |= 0x20000000u;
}
inline void NewRegRequest::clear_has_suggestret() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void NewRegRequest::clear_suggestret() {
  suggestret_ = 0;
  clear_has_suggestret();
}
inline ::google::protobuf::int32 NewRegRequest::suggestret() const {
  // @@protoc_insertion_point(field_get:FromCs.NewRegRequest.suggestRet)
  return suggestret_;
}
inline void NewRegRequest::set_suggestret(::google::protobuf::int32 value) {
  set_has_suggestret();
  suggestret_ = value;
  // @@protoc_insertion_point(field_set:FromCs.NewRegRequest.suggestRet)
}

// optional string clientSeqId = 31;
inline bool NewRegRequest::has_clientseqid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void NewRegRequest::set_has_clientseqid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void NewRegRequest::clear_has_clientseqid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void NewRegRequest::clear_clientseqid() {
  clientseqid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientseqid();
}
inline const ::std::string& NewRegRequest::clientseqid() const {
  // @@protoc_insertion_point(field_get:FromCs.NewRegRequest.clientSeqId)
  return clientseqid_.GetNoArena();
}
inline void NewRegRequest::set_clientseqid(const ::std::string& value) {
  set_has_clientseqid();
  clientseqid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.NewRegRequest.clientSeqId)
}
#if LANG_CXX11
inline void NewRegRequest::set_clientseqid(::std::string&& value) {
  set_has_clientseqid();
  clientseqid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.NewRegRequest.clientSeqId)
}
#endif
inline void NewRegRequest::set_clientseqid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientseqid();
  clientseqid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.NewRegRequest.clientSeqId)
}
inline void NewRegRequest::set_clientseqid(const char* value, size_t size) {
  set_has_clientseqid();
  clientseqid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.NewRegRequest.clientSeqId)
}
inline ::std::string* NewRegRequest::mutable_clientseqid() {
  set_has_clientseqid();
  // @@protoc_insertion_point(field_mutable:FromCs.NewRegRequest.clientSeqId)
  return clientseqid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewRegRequest::release_clientseqid() {
  // @@protoc_insertion_point(field_release:FromCs.NewRegRequest.clientSeqId)
  clear_has_clientseqid();
  return clientseqid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewRegRequest::set_allocated_clientseqid(::std::string* clientseqid) {
  if (clientseqid != NULL) {
    set_has_clientseqid();
  } else {
    clear_has_clientseqid();
  }
  clientseqid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientseqid);
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewRegRequest.clientSeqId)
}

// optional string adSource = 32;
inline bool NewRegRequest::has_adsource() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void NewRegRequest::set_has_adsource() {
  _has_bits_[0] |= 0x00002000u;
}
inline void NewRegRequest::clear_has_adsource() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void NewRegRequest::clear_adsource() {
  adsource_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_adsource();
}
inline const ::std::string& NewRegRequest::adsource() const {
  // @@protoc_insertion_point(field_get:FromCs.NewRegRequest.adSource)
  return adsource_.GetNoArena();
}
inline void NewRegRequest::set_adsource(const ::std::string& value) {
  set_has_adsource();
  adsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.NewRegRequest.adSource)
}
#if LANG_CXX11
inline void NewRegRequest::set_adsource(::std::string&& value) {
  set_has_adsource();
  adsource_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.NewRegRequest.adSource)
}
#endif
inline void NewRegRequest::set_adsource(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_adsource();
  adsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.NewRegRequest.adSource)
}
inline void NewRegRequest::set_adsource(const char* value, size_t size) {
  set_has_adsource();
  adsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.NewRegRequest.adSource)
}
inline ::std::string* NewRegRequest::mutable_adsource() {
  set_has_adsource();
  // @@protoc_insertion_point(field_mutable:FromCs.NewRegRequest.adSource)
  return adsource_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewRegRequest::release_adsource() {
  // @@protoc_insertion_point(field_release:FromCs.NewRegRequest.adSource)
  clear_has_adsource();
  return adsource_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewRegRequest::set_allocated_adsource(::std::string* adsource) {
  if (adsource != NULL) {
    set_has_adsource();
  } else {
    clear_has_adsource();
  }
  adsource_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), adsource);
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewRegRequest.adSource)
}

// optional string androidId = 33;
inline bool NewRegRequest::has_androidid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void NewRegRequest::set_has_androidid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void NewRegRequest::clear_has_androidid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void NewRegRequest::clear_androidid() {
  androidid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_androidid();
}
inline const ::std::string& NewRegRequest::androidid() const {
  // @@protoc_insertion_point(field_get:FromCs.NewRegRequest.androidId)
  return androidid_.GetNoArena();
}
inline void NewRegRequest::set_androidid(const ::std::string& value) {
  set_has_androidid();
  androidid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.NewRegRequest.androidId)
}
#if LANG_CXX11
inline void NewRegRequest::set_androidid(::std::string&& value) {
  set_has_androidid();
  androidid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.NewRegRequest.androidId)
}
#endif
inline void NewRegRequest::set_androidid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_androidid();
  androidid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.NewRegRequest.androidId)
}
inline void NewRegRequest::set_androidid(const char* value, size_t size) {
  set_has_androidid();
  androidid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.NewRegRequest.androidId)
}
inline ::std::string* NewRegRequest::mutable_androidid() {
  set_has_androidid();
  // @@protoc_insertion_point(field_mutable:FromCs.NewRegRequest.androidId)
  return androidid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewRegRequest::release_androidid() {
  // @@protoc_insertion_point(field_release:FromCs.NewRegRequest.androidId)
  clear_has_androidid();
  return androidid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewRegRequest::set_allocated_androidid(::std::string* androidid) {
  if (androidid != NULL) {
    set_has_androidid();
  } else {
    clear_has_androidid();
  }
  androidid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), androidid);
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewRegRequest.androidId)
}

// optional string macAddr = 34;
inline bool NewRegRequest::has_macaddr() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void NewRegRequest::set_has_macaddr() {
  _has_bits_[0] |= 0x00008000u;
}
inline void NewRegRequest::clear_has_macaddr() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void NewRegRequest::clear_macaddr() {
  macaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_macaddr();
}
inline const ::std::string& NewRegRequest::macaddr() const {
  // @@protoc_insertion_point(field_get:FromCs.NewRegRequest.macAddr)
  return macaddr_.GetNoArena();
}
inline void NewRegRequest::set_macaddr(const ::std::string& value) {
  set_has_macaddr();
  macaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.NewRegRequest.macAddr)
}
#if LANG_CXX11
inline void NewRegRequest::set_macaddr(::std::string&& value) {
  set_has_macaddr();
  macaddr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.NewRegRequest.macAddr)
}
#endif
inline void NewRegRequest::set_macaddr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_macaddr();
  macaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.NewRegRequest.macAddr)
}
inline void NewRegRequest::set_macaddr(const char* value, size_t size) {
  set_has_macaddr();
  macaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.NewRegRequest.macAddr)
}
inline ::std::string* NewRegRequest::mutable_macaddr() {
  set_has_macaddr();
  // @@protoc_insertion_point(field_mutable:FromCs.NewRegRequest.macAddr)
  return macaddr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewRegRequest::release_macaddr() {
  // @@protoc_insertion_point(field_release:FromCs.NewRegRequest.macAddr)
  clear_has_macaddr();
  return macaddr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewRegRequest::set_allocated_macaddr(::std::string* macaddr) {
  if (macaddr != NULL) {
    set_has_macaddr();
  } else {
    clear_has_macaddr();
  }
  macaddr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), macaddr);
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewRegRequest.macAddr)
}

// optional string androidInstallRef = 35;
inline bool NewRegRequest::has_androidinstallref() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void NewRegRequest::set_has_androidinstallref() {
  _has_bits_[0] |= 0x00010000u;
}
inline void NewRegRequest::clear_has_androidinstallref() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void NewRegRequest::clear_androidinstallref() {
  androidinstallref_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_androidinstallref();
}
inline const ::std::string& NewRegRequest::androidinstallref() const {
  // @@protoc_insertion_point(field_get:FromCs.NewRegRequest.androidInstallRef)
  return androidinstallref_.GetNoArena();
}
inline void NewRegRequest::set_androidinstallref(const ::std::string& value) {
  set_has_androidinstallref();
  androidinstallref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.NewRegRequest.androidInstallRef)
}
#if LANG_CXX11
inline void NewRegRequest::set_androidinstallref(::std::string&& value) {
  set_has_androidinstallref();
  androidinstallref_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.NewRegRequest.androidInstallRef)
}
#endif
inline void NewRegRequest::set_androidinstallref(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_androidinstallref();
  androidinstallref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.NewRegRequest.androidInstallRef)
}
inline void NewRegRequest::set_androidinstallref(const char* value, size_t size) {
  set_has_androidinstallref();
  androidinstallref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.NewRegRequest.androidInstallRef)
}
inline ::std::string* NewRegRequest::mutable_androidinstallref() {
  set_has_androidinstallref();
  // @@protoc_insertion_point(field_mutable:FromCs.NewRegRequest.androidInstallRef)
  return androidinstallref_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewRegRequest::release_androidinstallref() {
  // @@protoc_insertion_point(field_release:FromCs.NewRegRequest.androidInstallRef)
  clear_has_androidinstallref();
  return androidinstallref_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewRegRequest::set_allocated_androidinstallref(::std::string* androidinstallref) {
  if (androidinstallref != NULL) {
    set_has_androidinstallref();
  } else {
    clear_has_androidinstallref();
  }
  androidinstallref_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), androidinstallref);
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewRegRequest.androidInstallRef)
}

// optional string clientFingerprint = 36;
inline bool NewRegRequest::has_clientfingerprint() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void NewRegRequest::set_has_clientfingerprint() {
  _has_bits_[0] |= 0x00020000u;
}
inline void NewRegRequest::clear_has_clientfingerprint() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void NewRegRequest::clear_clientfingerprint() {
  clientfingerprint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientfingerprint();
}
inline const ::std::string& NewRegRequest::clientfingerprint() const {
  // @@protoc_insertion_point(field_get:FromCs.NewRegRequest.clientFingerprint)
  return clientfingerprint_.GetNoArena();
}
inline void NewRegRequest::set_clientfingerprint(const ::std::string& value) {
  set_has_clientfingerprint();
  clientfingerprint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.NewRegRequest.clientFingerprint)
}
#if LANG_CXX11
inline void NewRegRequest::set_clientfingerprint(::std::string&& value) {
  set_has_clientfingerprint();
  clientfingerprint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.NewRegRequest.clientFingerprint)
}
#endif
inline void NewRegRequest::set_clientfingerprint(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientfingerprint();
  clientfingerprint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.NewRegRequest.clientFingerprint)
}
inline void NewRegRequest::set_clientfingerprint(const char* value, size_t size) {
  set_has_clientfingerprint();
  clientfingerprint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.NewRegRequest.clientFingerprint)
}
inline ::std::string* NewRegRequest::mutable_clientfingerprint() {
  set_has_clientfingerprint();
  // @@protoc_insertion_point(field_mutable:FromCs.NewRegRequest.clientFingerprint)
  return clientfingerprint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewRegRequest::release_clientfingerprint() {
  // @@protoc_insertion_point(field_release:FromCs.NewRegRequest.clientFingerprint)
  clear_has_clientfingerprint();
  return clientfingerprint_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewRegRequest::set_allocated_clientfingerprint(::std::string* clientfingerprint) {
  if (clientfingerprint != NULL) {
    set_has_clientfingerprint();
  } else {
    clear_has_clientfingerprint();
  }
  clientfingerprint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientfingerprint);
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewRegRequest.clientFingerprint)
}

// optional .FromCs.ECDHKey cliPubEcdhkey = 37;
inline bool NewRegRequest::has_clipubecdhkey() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void NewRegRequest::set_has_clipubecdhkey() {
  _has_bits_[0] |= 0x00400000u;
}
inline void NewRegRequest::clear_has_clipubecdhkey() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void NewRegRequest::clear_clipubecdhkey() {
  if (clipubecdhkey_ != NULL) clipubecdhkey_->::FromCs::ECDHKey::Clear();
  clear_has_clipubecdhkey();
}
inline const ::FromCs::ECDHKey& NewRegRequest::clipubecdhkey() const {
  // @@protoc_insertion_point(field_get:FromCs.NewRegRequest.cliPubEcdhkey)
  return clipubecdhkey_ != NULL ? *clipubecdhkey_
                         : *::FromCs::ECDHKey::internal_default_instance();
}
inline ::FromCs::ECDHKey* NewRegRequest::mutable_clipubecdhkey() {
  set_has_clipubecdhkey();
  if (clipubecdhkey_ == NULL) {
    clipubecdhkey_ = new ::FromCs::ECDHKey;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.NewRegRequest.cliPubEcdhkey)
  return clipubecdhkey_;
}
inline ::FromCs::ECDHKey* NewRegRequest::release_clipubecdhkey() {
  // @@protoc_insertion_point(field_release:FromCs.NewRegRequest.cliPubEcdhkey)
  clear_has_clipubecdhkey();
  ::FromCs::ECDHKey* temp = clipubecdhkey_;
  clipubecdhkey_ = NULL;
  return temp;
}
inline void NewRegRequest::set_allocated_clipubecdhkey(::FromCs::ECDHKey* clipubecdhkey) {
  delete clipubecdhkey_;
  clipubecdhkey_ = clipubecdhkey;
  if (clipubecdhkey) {
    set_has_clipubecdhkey();
  } else {
    clear_has_clipubecdhkey();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewRegRequest.cliPubEcdhkey)
}

// optional string googleAid = 38;
inline bool NewRegRequest::has_googleaid() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void NewRegRequest::set_has_googleaid() {
  _has_bits_[0] |= 0x00040000u;
}
inline void NewRegRequest::clear_has_googleaid() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void NewRegRequest::clear_googleaid() {
  googleaid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_googleaid();
}
inline const ::std::string& NewRegRequest::googleaid() const {
  // @@protoc_insertion_point(field_get:FromCs.NewRegRequest.googleAid)
  return googleaid_.GetNoArena();
}
inline void NewRegRequest::set_googleaid(const ::std::string& value) {
  set_has_googleaid();
  googleaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.NewRegRequest.googleAid)
}
#if LANG_CXX11
inline void NewRegRequest::set_googleaid(::std::string&& value) {
  set_has_googleaid();
  googleaid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.NewRegRequest.googleAid)
}
#endif
inline void NewRegRequest::set_googleaid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_googleaid();
  googleaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.NewRegRequest.googleAid)
}
inline void NewRegRequest::set_googleaid(const char* value, size_t size) {
  set_has_googleaid();
  googleaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.NewRegRequest.googleAid)
}
inline ::std::string* NewRegRequest::mutable_googleaid() {
  set_has_googleaid();
  // @@protoc_insertion_point(field_mutable:FromCs.NewRegRequest.googleAid)
  return googleaid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewRegRequest::release_googleaid() {
  // @@protoc_insertion_point(field_release:FromCs.NewRegRequest.googleAid)
  clear_has_googleaid();
  return googleaid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewRegRequest::set_allocated_googleaid(::std::string* googleaid) {
  if (googleaid != NULL) {
    set_has_googleaid();
  } else {
    clear_has_googleaid();
  }
  googleaid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), googleaid);
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewRegRequest.googleAid)
}

// optional string bundleId = 39;
inline bool NewRegRequest::has_bundleid() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void NewRegRequest::set_has_bundleid() {
  _has_bits_[0] |= 0x00080000u;
}
inline void NewRegRequest::clear_has_bundleid() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void NewRegRequest::clear_bundleid() {
  bundleid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bundleid();
}
inline const ::std::string& NewRegRequest::bundleid() const {
  // @@protoc_insertion_point(field_get:FromCs.NewRegRequest.bundleId)
  return bundleid_.GetNoArena();
}
inline void NewRegRequest::set_bundleid(const ::std::string& value) {
  set_has_bundleid();
  bundleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.NewRegRequest.bundleId)
}
#if LANG_CXX11
inline void NewRegRequest::set_bundleid(::std::string&& value) {
  set_has_bundleid();
  bundleid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.NewRegRequest.bundleId)
}
#endif
inline void NewRegRequest::set_bundleid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bundleid();
  bundleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.NewRegRequest.bundleId)
}
inline void NewRegRequest::set_bundleid(const char* value, size_t size) {
  set_has_bundleid();
  bundleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.NewRegRequest.bundleId)
}
inline ::std::string* NewRegRequest::mutable_bundleid() {
  set_has_bundleid();
  // @@protoc_insertion_point(field_mutable:FromCs.NewRegRequest.bundleId)
  return bundleid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewRegRequest::release_bundleid() {
  // @@protoc_insertion_point(field_release:FromCs.NewRegRequest.bundleId)
  clear_has_bundleid();
  return bundleid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewRegRequest::set_allocated_bundleid(::std::string* bundleid) {
  if (bundleid != NULL) {
    set_has_bundleid();
  } else {
    clear_has_bundleid();
  }
  bundleid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bundleid);
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewRegRequest.bundleId)
}

// -------------------------------------------------------------------

// NewRegResponse

// required .FromCs.BaseResponse base = 1;
inline bool NewRegResponse::has_base() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void NewRegResponse::set_has_base() {
  _has_bits_[0] |= 0x00002000u;
}
inline void NewRegResponse::clear_has_base() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void NewRegResponse::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseResponse::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseResponse& NewRegResponse::base() const {
  // @@protoc_insertion_point(field_get:FromCs.NewRegResponse.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseResponse::internal_default_instance();
}
inline ::FromCs::BaseResponse* NewRegResponse::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.NewRegResponse.base)
  return base_;
}
inline ::FromCs::BaseResponse* NewRegResponse::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.NewRegResponse.base)
  clear_has_base();
  ::FromCs::BaseResponse* temp = base_;
  base_ = NULL;
  return temp;
}
inline void NewRegResponse::set_allocated_base(::FromCs::BaseResponse* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewRegResponse.base)
}

// required int32 Uin = 2;
inline bool NewRegResponse::has_uin() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void NewRegResponse::set_has_uin() {
  _has_bits_[0] |= 0x01000000u;
}
inline void NewRegResponse::clear_has_uin() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void NewRegResponse::clear_uin() {
  uin_ = 0;
  clear_has_uin();
}
inline ::google::protobuf::int32 NewRegResponse::uin() const {
  // @@protoc_insertion_point(field_get:FromCs.NewRegResponse.Uin)
  return uin_;
}
inline void NewRegResponse::set_uin(::google::protobuf::int32 value) {
  set_has_uin();
  uin_ = value;
  // @@protoc_insertion_point(field_set:FromCs.NewRegResponse.Uin)
}

// optional string SessionKey = 3;
inline bool NewRegResponse::has_sessionkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NewRegResponse::set_has_sessionkey() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NewRegResponse::clear_has_sessionkey() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NewRegResponse::clear_sessionkey() {
  sessionkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sessionkey();
}
inline const ::std::string& NewRegResponse::sessionkey() const {
  // @@protoc_insertion_point(field_get:FromCs.NewRegResponse.SessionKey)
  return sessionkey_.GetNoArena();
}
inline void NewRegResponse::set_sessionkey(const ::std::string& value) {
  set_has_sessionkey();
  sessionkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.NewRegResponse.SessionKey)
}
#if LANG_CXX11
inline void NewRegResponse::set_sessionkey(::std::string&& value) {
  set_has_sessionkey();
  sessionkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.NewRegResponse.SessionKey)
}
#endif
inline void NewRegResponse::set_sessionkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sessionkey();
  sessionkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.NewRegResponse.SessionKey)
}
inline void NewRegResponse::set_sessionkey(const char* value, size_t size) {
  set_has_sessionkey();
  sessionkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.NewRegResponse.SessionKey)
}
inline ::std::string* NewRegResponse::mutable_sessionkey() {
  set_has_sessionkey();
  // @@protoc_insertion_point(field_mutable:FromCs.NewRegResponse.SessionKey)
  return sessionkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewRegResponse::release_sessionkey() {
  // @@protoc_insertion_point(field_release:FromCs.NewRegResponse.SessionKey)
  clear_has_sessionkey();
  return sessionkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewRegResponse::set_allocated_sessionkey(::std::string* sessionkey) {
  if (sessionkey != NULL) {
    set_has_sessionkey();
  } else {
    clear_has_sessionkey();
  }
  sessionkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionkey);
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewRegResponse.SessionKey)
}

// optional string OfficialUserName = 4;
inline bool NewRegResponse::has_officialusername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NewRegResponse::set_has_officialusername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NewRegResponse::clear_has_officialusername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NewRegResponse::clear_officialusername() {
  officialusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_officialusername();
}
inline const ::std::string& NewRegResponse::officialusername() const {
  // @@protoc_insertion_point(field_get:FromCs.NewRegResponse.OfficialUserName)
  return officialusername_.GetNoArena();
}
inline void NewRegResponse::set_officialusername(const ::std::string& value) {
  set_has_officialusername();
  officialusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.NewRegResponse.OfficialUserName)
}
#if LANG_CXX11
inline void NewRegResponse::set_officialusername(::std::string&& value) {
  set_has_officialusername();
  officialusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.NewRegResponse.OfficialUserName)
}
#endif
inline void NewRegResponse::set_officialusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_officialusername();
  officialusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.NewRegResponse.OfficialUserName)
}
inline void NewRegResponse::set_officialusername(const char* value, size_t size) {
  set_has_officialusername();
  officialusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.NewRegResponse.OfficialUserName)
}
inline ::std::string* NewRegResponse::mutable_officialusername() {
  set_has_officialusername();
  // @@protoc_insertion_point(field_mutable:FromCs.NewRegResponse.OfficialUserName)
  return officialusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewRegResponse::release_officialusername() {
  // @@protoc_insertion_point(field_release:FromCs.NewRegResponse.OfficialUserName)
  clear_has_officialusername();
  return officialusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewRegResponse::set_allocated_officialusername(::std::string* officialusername) {
  if (officialusername != NULL) {
    set_has_officialusername();
  } else {
    clear_has_officialusername();
  }
  officialusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), officialusername);
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewRegResponse.OfficialUserName)
}

// optional string OfficialNickName = 5;
inline bool NewRegResponse::has_officialnickname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NewRegResponse::set_has_officialnickname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NewRegResponse::clear_has_officialnickname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NewRegResponse::clear_officialnickname() {
  officialnickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_officialnickname();
}
inline const ::std::string& NewRegResponse::officialnickname() const {
  // @@protoc_insertion_point(field_get:FromCs.NewRegResponse.OfficialNickName)
  return officialnickname_.GetNoArena();
}
inline void NewRegResponse::set_officialnickname(const ::std::string& value) {
  set_has_officialnickname();
  officialnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.NewRegResponse.OfficialNickName)
}
#if LANG_CXX11
inline void NewRegResponse::set_officialnickname(::std::string&& value) {
  set_has_officialnickname();
  officialnickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.NewRegResponse.OfficialNickName)
}
#endif
inline void NewRegResponse::set_officialnickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_officialnickname();
  officialnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.NewRegResponse.OfficialNickName)
}
inline void NewRegResponse::set_officialnickname(const char* value, size_t size) {
  set_has_officialnickname();
  officialnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.NewRegResponse.OfficialNickName)
}
inline ::std::string* NewRegResponse::mutable_officialnickname() {
  set_has_officialnickname();
  // @@protoc_insertion_point(field_mutable:FromCs.NewRegResponse.OfficialNickName)
  return officialnickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewRegResponse::release_officialnickname() {
  // @@protoc_insertion_point(field_release:FromCs.NewRegResponse.OfficialNickName)
  clear_has_officialnickname();
  return officialnickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewRegResponse::set_allocated_officialnickname(::std::string* officialnickname) {
  if (officialnickname != NULL) {
    set_has_officialnickname();
  } else {
    clear_has_officialnickname();
  }
  officialnickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), officialnickname);
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewRegResponse.OfficialNickName)
}

// optional string QQMicroBlogUserName = 6;
inline bool NewRegResponse::has_qqmicroblogusername() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NewRegResponse::set_has_qqmicroblogusername() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NewRegResponse::clear_has_qqmicroblogusername() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NewRegResponse::clear_qqmicroblogusername() {
  qqmicroblogusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_qqmicroblogusername();
}
inline const ::std::string& NewRegResponse::qqmicroblogusername() const {
  // @@protoc_insertion_point(field_get:FromCs.NewRegResponse.QQMicroBlogUserName)
  return qqmicroblogusername_.GetNoArena();
}
inline void NewRegResponse::set_qqmicroblogusername(const ::std::string& value) {
  set_has_qqmicroblogusername();
  qqmicroblogusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.NewRegResponse.QQMicroBlogUserName)
}
#if LANG_CXX11
inline void NewRegResponse::set_qqmicroblogusername(::std::string&& value) {
  set_has_qqmicroblogusername();
  qqmicroblogusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.NewRegResponse.QQMicroBlogUserName)
}
#endif
inline void NewRegResponse::set_qqmicroblogusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_qqmicroblogusername();
  qqmicroblogusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.NewRegResponse.QQMicroBlogUserName)
}
inline void NewRegResponse::set_qqmicroblogusername(const char* value, size_t size) {
  set_has_qqmicroblogusername();
  qqmicroblogusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.NewRegResponse.QQMicroBlogUserName)
}
inline ::std::string* NewRegResponse::mutable_qqmicroblogusername() {
  set_has_qqmicroblogusername();
  // @@protoc_insertion_point(field_mutable:FromCs.NewRegResponse.QQMicroBlogUserName)
  return qqmicroblogusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewRegResponse::release_qqmicroblogusername() {
  // @@protoc_insertion_point(field_release:FromCs.NewRegResponse.QQMicroBlogUserName)
  clear_has_qqmicroblogusername();
  return qqmicroblogusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewRegResponse::set_allocated_qqmicroblogusername(::std::string* qqmicroblogusername) {
  if (qqmicroblogusername != NULL) {
    set_has_qqmicroblogusername();
  } else {
    clear_has_qqmicroblogusername();
  }
  qqmicroblogusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), qqmicroblogusername);
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewRegResponse.QQMicroBlogUserName)
}

// optional string BindEmail = 7;
inline bool NewRegResponse::has_bindemail() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NewRegResponse::set_has_bindemail() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NewRegResponse::clear_has_bindemail() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NewRegResponse::clear_bindemail() {
  bindemail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bindemail();
}
inline const ::std::string& NewRegResponse::bindemail() const {
  // @@protoc_insertion_point(field_get:FromCs.NewRegResponse.BindEmail)
  return bindemail_.GetNoArena();
}
inline void NewRegResponse::set_bindemail(const ::std::string& value) {
  set_has_bindemail();
  bindemail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.NewRegResponse.BindEmail)
}
#if LANG_CXX11
inline void NewRegResponse::set_bindemail(::std::string&& value) {
  set_has_bindemail();
  bindemail_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.NewRegResponse.BindEmail)
}
#endif
inline void NewRegResponse::set_bindemail(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bindemail();
  bindemail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.NewRegResponse.BindEmail)
}
inline void NewRegResponse::set_bindemail(const char* value, size_t size) {
  set_has_bindemail();
  bindemail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.NewRegResponse.BindEmail)
}
inline ::std::string* NewRegResponse::mutable_bindemail() {
  set_has_bindemail();
  // @@protoc_insertion_point(field_mutable:FromCs.NewRegResponse.BindEmail)
  return bindemail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewRegResponse::release_bindemail() {
  // @@protoc_insertion_point(field_release:FromCs.NewRegResponse.BindEmail)
  clear_has_bindemail();
  return bindemail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewRegResponse::set_allocated_bindemail(::std::string* bindemail) {
  if (bindemail != NULL) {
    set_has_bindemail();
  } else {
    clear_has_bindemail();
  }
  bindemail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bindemail);
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewRegResponse.BindEmail)
}

// required int32 PushMailStatus = 8;
inline bool NewRegResponse::has_pushmailstatus() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void NewRegResponse::set_has_pushmailstatus() {
  _has_bits_[0] |= 0x02000000u;
}
inline void NewRegResponse::clear_has_pushmailstatus() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void NewRegResponse::clear_pushmailstatus() {
  pushmailstatus_ = 0;
  clear_has_pushmailstatus();
}
inline ::google::protobuf::int32 NewRegResponse::pushmailstatus() const {
  // @@protoc_insertion_point(field_get:FromCs.NewRegResponse.PushMailStatus)
  return pushmailstatus_;
}
inline void NewRegResponse::set_pushmailstatus(::google::protobuf::int32 value) {
  set_has_pushmailstatus();
  pushmailstatus_ = value;
  // @@protoc_insertion_point(field_set:FromCs.NewRegResponse.PushMailStatus)
}

// optional int32 SendCardBitFlag = 9;
inline bool NewRegResponse::has_sendcardbitflag() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void NewRegResponse::set_has_sendcardbitflag() {
  _has_bits_[0] |= 0x04000000u;
}
inline void NewRegResponse::clear_has_sendcardbitflag() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void NewRegResponse::clear_sendcardbitflag() {
  sendcardbitflag_ = 0;
  clear_has_sendcardbitflag();
}
inline ::google::protobuf::int32 NewRegResponse::sendcardbitflag() const {
  // @@protoc_insertion_point(field_get:FromCs.NewRegResponse.SendCardBitFlag)
  return sendcardbitflag_;
}
inline void NewRegResponse::set_sendcardbitflag(::google::protobuf::int32 value) {
  set_has_sendcardbitflag();
  sendcardbitflag_ = value;
  // @@protoc_insertion_point(field_set:FromCs.NewRegResponse.SendCardBitFlag)
}

// optional string PushMailSettingTicket = 10;
inline bool NewRegResponse::has_pushmailsettingticket() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NewRegResponse::set_has_pushmailsettingticket() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NewRegResponse::clear_has_pushmailsettingticket() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NewRegResponse::clear_pushmailsettingticket() {
  pushmailsettingticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pushmailsettingticket();
}
inline const ::std::string& NewRegResponse::pushmailsettingticket() const {
  // @@protoc_insertion_point(field_get:FromCs.NewRegResponse.PushMailSettingTicket)
  return pushmailsettingticket_.GetNoArena();
}
inline void NewRegResponse::set_pushmailsettingticket(const ::std::string& value) {
  set_has_pushmailsettingticket();
  pushmailsettingticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.NewRegResponse.PushMailSettingTicket)
}
#if LANG_CXX11
inline void NewRegResponse::set_pushmailsettingticket(::std::string&& value) {
  set_has_pushmailsettingticket();
  pushmailsettingticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.NewRegResponse.PushMailSettingTicket)
}
#endif
inline void NewRegResponse::set_pushmailsettingticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pushmailsettingticket();
  pushmailsettingticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.NewRegResponse.PushMailSettingTicket)
}
inline void NewRegResponse::set_pushmailsettingticket(const char* value, size_t size) {
  set_has_pushmailsettingticket();
  pushmailsettingticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.NewRegResponse.PushMailSettingTicket)
}
inline ::std::string* NewRegResponse::mutable_pushmailsettingticket() {
  set_has_pushmailsettingticket();
  // @@protoc_insertion_point(field_mutable:FromCs.NewRegResponse.PushMailSettingTicket)
  return pushmailsettingticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewRegResponse::release_pushmailsettingticket() {
  // @@protoc_insertion_point(field_release:FromCs.NewRegResponse.PushMailSettingTicket)
  clear_has_pushmailsettingticket();
  return pushmailsettingticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewRegResponse::set_allocated_pushmailsettingticket(::std::string* pushmailsettingticket) {
  if (pushmailsettingticket != NULL) {
    set_has_pushmailsettingticket();
  } else {
    clear_has_pushmailsettingticket();
  }
  pushmailsettingticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pushmailsettingticket);
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewRegResponse.PushMailSettingTicket)
}

// optional .FromCs.iPList BuiltinIPList = 14;
inline bool NewRegResponse::has_builtiniplist() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void NewRegResponse::set_has_builtiniplist() {
  _has_bits_[0] |= 0x00004000u;
}
inline void NewRegResponse::clear_has_builtiniplist() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void NewRegResponse::clear_builtiniplist() {
  if (builtiniplist_ != NULL) builtiniplist_->::FromCs::iPList::Clear();
  clear_has_builtiniplist();
}
inline const ::FromCs::iPList& NewRegResponse::builtiniplist() const {
  // @@protoc_insertion_point(field_get:FromCs.NewRegResponse.BuiltinIPList)
  return builtiniplist_ != NULL ? *builtiniplist_
                         : *::FromCs::iPList::internal_default_instance();
}
inline ::FromCs::iPList* NewRegResponse::mutable_builtiniplist() {
  set_has_builtiniplist();
  if (builtiniplist_ == NULL) {
    builtiniplist_ = new ::FromCs::iPList;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.NewRegResponse.BuiltinIPList)
  return builtiniplist_;
}
inline ::FromCs::iPList* NewRegResponse::release_builtiniplist() {
  // @@protoc_insertion_point(field_release:FromCs.NewRegResponse.BuiltinIPList)
  clear_has_builtiniplist();
  ::FromCs::iPList* temp = builtiniplist_;
  builtiniplist_ = NULL;
  return temp;
}
inline void NewRegResponse::set_allocated_builtiniplist(::FromCs::iPList* builtiniplist) {
  delete builtiniplist_;
  builtiniplist_ = builtiniplist;
  if (builtiniplist) {
    set_has_builtiniplist();
  } else {
    clear_has_builtiniplist();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewRegResponse.BuiltinIPList)
}

// optional string FSURL = 15;
inline bool NewRegResponse::has_fsurl() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NewRegResponse::set_has_fsurl() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NewRegResponse::clear_has_fsurl() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NewRegResponse::clear_fsurl() {
  fsurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fsurl();
}
inline const ::std::string& NewRegResponse::fsurl() const {
  // @@protoc_insertion_point(field_get:FromCs.NewRegResponse.FSURL)
  return fsurl_.GetNoArena();
}
inline void NewRegResponse::set_fsurl(const ::std::string& value) {
  set_has_fsurl();
  fsurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.NewRegResponse.FSURL)
}
#if LANG_CXX11
inline void NewRegResponse::set_fsurl(::std::string&& value) {
  set_has_fsurl();
  fsurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.NewRegResponse.FSURL)
}
#endif
inline void NewRegResponse::set_fsurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fsurl();
  fsurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.NewRegResponse.FSURL)
}
inline void NewRegResponse::set_fsurl(const char* value, size_t size) {
  set_has_fsurl();
  fsurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.NewRegResponse.FSURL)
}
inline ::std::string* NewRegResponse::mutable_fsurl() {
  set_has_fsurl();
  // @@protoc_insertion_point(field_mutable:FromCs.NewRegResponse.FSURL)
  return fsurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewRegResponse::release_fsurl() {
  // @@protoc_insertion_point(field_release:FromCs.NewRegResponse.FSURL)
  clear_has_fsurl();
  return fsurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewRegResponse::set_allocated_fsurl(::std::string* fsurl) {
  if (fsurl != NULL) {
    set_has_fsurl();
  } else {
    clear_has_fsurl();
  }
  fsurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fsurl);
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewRegResponse.FSURL)
}

// optional string UserName = 16;
inline bool NewRegResponse::has_username() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NewRegResponse::set_has_username() {
  _has_bits_[0] |= 0x00000080u;
}
inline void NewRegResponse::clear_has_username() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void NewRegResponse::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& NewRegResponse::username() const {
  // @@protoc_insertion_point(field_get:FromCs.NewRegResponse.UserName)
  return username_.GetNoArena();
}
inline void NewRegResponse::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.NewRegResponse.UserName)
}
#if LANG_CXX11
inline void NewRegResponse::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.NewRegResponse.UserName)
}
#endif
inline void NewRegResponse::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.NewRegResponse.UserName)
}
inline void NewRegResponse::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.NewRegResponse.UserName)
}
inline ::std::string* NewRegResponse::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:FromCs.NewRegResponse.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewRegResponse::release_username() {
  // @@protoc_insertion_point(field_release:FromCs.NewRegResponse.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewRegResponse::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewRegResponse.UserName)
}

// optional int32 Status = 17;
inline bool NewRegResponse::has_status() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void NewRegResponse::set_has_status() {
  _has_bits_[0] |= 0x08000000u;
}
inline void NewRegResponse::clear_has_status() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void NewRegResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 NewRegResponse::status() const {
  // @@protoc_insertion_point(field_get:FromCs.NewRegResponse.Status)
  return status_;
}
inline void NewRegResponse::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:FromCs.NewRegResponse.Status)
}

// optional .FromCs.NetworkControlType NetworkControl = 18;
inline bool NewRegResponse::has_networkcontrol() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void NewRegResponse::set_has_networkcontrol() {
  _has_bits_[0] |= 0x00008000u;
}
inline void NewRegResponse::clear_has_networkcontrol() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void NewRegResponse::clear_networkcontrol() {
  if (networkcontrol_ != NULL) networkcontrol_->::FromCs::NetworkControlType::Clear();
  clear_has_networkcontrol();
}
inline const ::FromCs::NetworkControlType& NewRegResponse::networkcontrol() const {
  // @@protoc_insertion_point(field_get:FromCs.NewRegResponse.NetworkControl)
  return networkcontrol_ != NULL ? *networkcontrol_
                         : *::FromCs::NetworkControlType::internal_default_instance();
}
inline ::FromCs::NetworkControlType* NewRegResponse::mutable_networkcontrol() {
  set_has_networkcontrol();
  if (networkcontrol_ == NULL) {
    networkcontrol_ = new ::FromCs::NetworkControlType;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.NewRegResponse.NetworkControl)
  return networkcontrol_;
}
inline ::FromCs::NetworkControlType* NewRegResponse::release_networkcontrol() {
  // @@protoc_insertion_point(field_release:FromCs.NewRegResponse.NetworkControl)
  clear_has_networkcontrol();
  ::FromCs::NetworkControlType* temp = networkcontrol_;
  networkcontrol_ = NULL;
  return temp;
}
inline void NewRegResponse::set_allocated_networkcontrol(::FromCs::NetworkControlType* networkcontrol) {
  delete networkcontrol_;
  networkcontrol_ = networkcontrol;
  if (networkcontrol) {
    set_has_networkcontrol();
  } else {
    clear_has_networkcontrol();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewRegResponse.NetworkControl)
}

// optional int32 ReturnFlag = 19;
inline bool NewRegResponse::has_returnflag() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void NewRegResponse::set_has_returnflag() {
  _has_bits_[0] |= 0x10000000u;
}
inline void NewRegResponse::clear_has_returnflag() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void NewRegResponse::clear_returnflag() {
  returnflag_ = 0;
  clear_has_returnflag();
}
inline ::google::protobuf::int32 NewRegResponse::returnflag() const {
  // @@protoc_insertion_point(field_get:FromCs.NewRegResponse.ReturnFlag)
  return returnflag_;
}
inline void NewRegResponse::set_returnflag(::google::protobuf::int32 value) {
  set_has_returnflag();
  returnflag_ = value;
  // @@protoc_insertion_point(field_set:FromCs.NewRegResponse.ReturnFlag)
}

// optional int32 RegType = 20;
inline bool NewRegResponse::has_regtype() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void NewRegResponse::set_has_regtype() {
  _has_bits_[0] |= 0x20000000u;
}
inline void NewRegResponse::clear_has_regtype() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void NewRegResponse::clear_regtype() {
  regtype_ = 0;
  clear_has_regtype();
}
inline ::google::protobuf::int32 NewRegResponse::regtype() const {
  // @@protoc_insertion_point(field_get:FromCs.NewRegResponse.RegType)
  return regtype_;
}
inline void NewRegResponse::set_regtype(::google::protobuf::int32 value) {
  set_has_regtype();
  regtype_ = value;
  // @@protoc_insertion_point(field_set:FromCs.NewRegResponse.RegType)
}

// optional string AuthKey = 21;
inline bool NewRegResponse::has_authkey() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void NewRegResponse::set_has_authkey() {
  _has_bits_[0] |= 0x00000100u;
}
inline void NewRegResponse::clear_has_authkey() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void NewRegResponse::clear_authkey() {
  authkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_authkey();
}
inline const ::std::string& NewRegResponse::authkey() const {
  // @@protoc_insertion_point(field_get:FromCs.NewRegResponse.AuthKey)
  return authkey_.GetNoArena();
}
inline void NewRegResponse::set_authkey(const ::std::string& value) {
  set_has_authkey();
  authkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.NewRegResponse.AuthKey)
}
#if LANG_CXX11
inline void NewRegResponse::set_authkey(::std::string&& value) {
  set_has_authkey();
  authkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.NewRegResponse.AuthKey)
}
#endif
inline void NewRegResponse::set_authkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_authkey();
  authkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.NewRegResponse.AuthKey)
}
inline void NewRegResponse::set_authkey(const char* value, size_t size) {
  set_has_authkey();
  authkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.NewRegResponse.AuthKey)
}
inline ::std::string* NewRegResponse::mutable_authkey() {
  set_has_authkey();
  // @@protoc_insertion_point(field_mutable:FromCs.NewRegResponse.AuthKey)
  return authkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewRegResponse::release_authkey() {
  // @@protoc_insertion_point(field_release:FromCs.NewRegResponse.AuthKey)
  clear_has_authkey();
  return authkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewRegResponse::set_allocated_authkey(::std::string* authkey) {
  if (authkey != NULL) {
    set_has_authkey();
  } else {
    clear_has_authkey();
  }
  authkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), authkey);
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewRegResponse.AuthKey)
}

// optional .FromCs.PluginKeyListType PluginKeyList = 22;
inline bool NewRegResponse::has_pluginkeylist() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void NewRegResponse::set_has_pluginkeylist() {
  _has_bits_[0] |= 0x00010000u;
}
inline void NewRegResponse::clear_has_pluginkeylist() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void NewRegResponse::clear_pluginkeylist() {
  if (pluginkeylist_ != NULL) pluginkeylist_->::FromCs::PluginKeyListType::Clear();
  clear_has_pluginkeylist();
}
inline const ::FromCs::PluginKeyListType& NewRegResponse::pluginkeylist() const {
  // @@protoc_insertion_point(field_get:FromCs.NewRegResponse.PluginKeyList)
  return pluginkeylist_ != NULL ? *pluginkeylist_
                         : *::FromCs::PluginKeyListType::internal_default_instance();
}
inline ::FromCs::PluginKeyListType* NewRegResponse::mutable_pluginkeylist() {
  set_has_pluginkeylist();
  if (pluginkeylist_ == NULL) {
    pluginkeylist_ = new ::FromCs::PluginKeyListType;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.NewRegResponse.PluginKeyList)
  return pluginkeylist_;
}
inline ::FromCs::PluginKeyListType* NewRegResponse::release_pluginkeylist() {
  // @@protoc_insertion_point(field_release:FromCs.NewRegResponse.PluginKeyList)
  clear_has_pluginkeylist();
  ::FromCs::PluginKeyListType* temp = pluginkeylist_;
  pluginkeylist_ = NULL;
  return temp;
}
inline void NewRegResponse::set_allocated_pluginkeylist(::FromCs::PluginKeyListType* pluginkeylist) {
  delete pluginkeylist_;
  pluginkeylist_ = pluginkeylist;
  if (pluginkeylist) {
    set_has_pluginkeylist();
  } else {
    clear_has_pluginkeylist();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewRegResponse.PluginKeyList)
}

// optional string Password = 23;
inline bool NewRegResponse::has_password() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void NewRegResponse::set_has_password() {
  _has_bits_[0] |= 0x00000200u;
}
inline void NewRegResponse::clear_has_password() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void NewRegResponse::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
inline const ::std::string& NewRegResponse::password() const {
  // @@protoc_insertion_point(field_get:FromCs.NewRegResponse.Password)
  return password_.GetNoArena();
}
inline void NewRegResponse::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.NewRegResponse.Password)
}
#if LANG_CXX11
inline void NewRegResponse::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.NewRegResponse.Password)
}
#endif
inline void NewRegResponse::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.NewRegResponse.Password)
}
inline void NewRegResponse::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.NewRegResponse.Password)
}
inline ::std::string* NewRegResponse::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:FromCs.NewRegResponse.Password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewRegResponse::release_password() {
  // @@protoc_insertion_point(field_release:FromCs.NewRegResponse.Password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewRegResponse::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewRegResponse.Password)
}

// optional int32 ProfileFlag = 24;
inline bool NewRegResponse::has_profileflag() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void NewRegResponse::set_has_profileflag() {
  _has_bits_[0] |= 0x40000000u;
}
inline void NewRegResponse::clear_has_profileflag() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void NewRegResponse::clear_profileflag() {
  profileflag_ = 0;
  clear_has_profileflag();
}
inline ::google::protobuf::int32 NewRegResponse::profileflag() const {
  // @@protoc_insertion_point(field_get:FromCs.NewRegResponse.ProfileFlag)
  return profileflag_;
}
inline void NewRegResponse::set_profileflag(::google::protobuf::int32 value) {
  set_has_profileflag();
  profileflag_ = value;
  // @@protoc_insertion_point(field_set:FromCs.NewRegResponse.ProfileFlag)
}

// optional .FromCs.NewHostListType NewHostList = 25;
inline bool NewRegResponse::has_newhostlist() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void NewRegResponse::set_has_newhostlist() {
  _has_bits_[0] |= 0x00020000u;
}
inline void NewRegResponse::clear_has_newhostlist() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void NewRegResponse::clear_newhostlist() {
  if (newhostlist_ != NULL) newhostlist_->::FromCs::NewHostListType::Clear();
  clear_has_newhostlist();
}
inline const ::FromCs::NewHostListType& NewRegResponse::newhostlist() const {
  // @@protoc_insertion_point(field_get:FromCs.NewRegResponse.NewHostList)
  return newhostlist_ != NULL ? *newhostlist_
                         : *::FromCs::NewHostListType::internal_default_instance();
}
inline ::FromCs::NewHostListType* NewRegResponse::mutable_newhostlist() {
  set_has_newhostlist();
  if (newhostlist_ == NULL) {
    newhostlist_ = new ::FromCs::NewHostListType;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.NewRegResponse.NewHostList)
  return newhostlist_;
}
inline ::FromCs::NewHostListType* NewRegResponse::release_newhostlist() {
  // @@protoc_insertion_point(field_release:FromCs.NewRegResponse.NewHostList)
  clear_has_newhostlist();
  ::FromCs::NewHostListType* temp = newhostlist_;
  newhostlist_ = NULL;
  return temp;
}
inline void NewRegResponse::set_allocated_newhostlist(::FromCs::NewHostListType* newhostlist) {
  delete newhostlist_;
  newhostlist_ = newhostlist;
  if (newhostlist) {
    set_has_newhostlist();
  } else {
    clear_has_newhostlist();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewRegResponse.NewHostList)
}

// optional string AutoAuthTicket = 26;
inline bool NewRegResponse::has_autoauthticket() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void NewRegResponse::set_has_autoauthticket() {
  _has_bits_[0] |= 0x00000400u;
}
inline void NewRegResponse::clear_has_autoauthticket() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void NewRegResponse::clear_autoauthticket() {
  autoauthticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_autoauthticket();
}
inline const ::std::string& NewRegResponse::autoauthticket() const {
  // @@protoc_insertion_point(field_get:FromCs.NewRegResponse.AutoAuthTicket)
  return autoauthticket_.GetNoArena();
}
inline void NewRegResponse::set_autoauthticket(const ::std::string& value) {
  set_has_autoauthticket();
  autoauthticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.NewRegResponse.AutoAuthTicket)
}
#if LANG_CXX11
inline void NewRegResponse::set_autoauthticket(::std::string&& value) {
  set_has_autoauthticket();
  autoauthticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.NewRegResponse.AutoAuthTicket)
}
#endif
inline void NewRegResponse::set_autoauthticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_autoauthticket();
  autoauthticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.NewRegResponse.AutoAuthTicket)
}
inline void NewRegResponse::set_autoauthticket(const char* value, size_t size) {
  set_has_autoauthticket();
  autoauthticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.NewRegResponse.AutoAuthTicket)
}
inline ::std::string* NewRegResponse::mutable_autoauthticket() {
  set_has_autoauthticket();
  // @@protoc_insertion_point(field_mutable:FromCs.NewRegResponse.AutoAuthTicket)
  return autoauthticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewRegResponse::release_autoauthticket() {
  // @@protoc_insertion_point(field_release:FromCs.NewRegResponse.AutoAuthTicket)
  clear_has_autoauthticket();
  return autoauthticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewRegResponse::set_allocated_autoauthticket(::std::string* autoauthticket) {
  if (autoauthticket != NULL) {
    set_has_autoauthticket();
  } else {
    clear_has_autoauthticket();
  }
  autoauthticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), autoauthticket);
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewRegResponse.AutoAuthTicket)
}

// optional .FromCs.DnsInfoType DnsInfo = 27;
inline bool NewRegResponse::has_dnsinfo() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void NewRegResponse::set_has_dnsinfo() {
  _has_bits_[0] |= 0x00040000u;
}
inline void NewRegResponse::clear_has_dnsinfo() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void NewRegResponse::clear_dnsinfo() {
  if (dnsinfo_ != NULL) dnsinfo_->::FromCs::DnsInfoType::Clear();
  clear_has_dnsinfo();
}
inline const ::FromCs::DnsInfoType& NewRegResponse::dnsinfo() const {
  // @@protoc_insertion_point(field_get:FromCs.NewRegResponse.DnsInfo)
  return dnsinfo_ != NULL ? *dnsinfo_
                         : *::FromCs::DnsInfoType::internal_default_instance();
}
inline ::FromCs::DnsInfoType* NewRegResponse::mutable_dnsinfo() {
  set_has_dnsinfo();
  if (dnsinfo_ == NULL) {
    dnsinfo_ = new ::FromCs::DnsInfoType;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.NewRegResponse.DnsInfo)
  return dnsinfo_;
}
inline ::FromCs::DnsInfoType* NewRegResponse::release_dnsinfo() {
  // @@protoc_insertion_point(field_release:FromCs.NewRegResponse.DnsInfo)
  clear_has_dnsinfo();
  ::FromCs::DnsInfoType* temp = dnsinfo_;
  dnsinfo_ = NULL;
  return temp;
}
inline void NewRegResponse::set_allocated_dnsinfo(::FromCs::DnsInfoType* dnsinfo) {
  delete dnsinfo_;
  dnsinfo_ = dnsinfo;
  if (dnsinfo) {
    set_has_dnsinfo();
  } else {
    clear_has_dnsinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewRegResponse.DnsInfo)
}

// optional string stepTicket = 28;
inline bool NewRegResponse::has_stepticket() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void NewRegResponse::set_has_stepticket() {
  _has_bits_[0] |= 0x00000800u;
}
inline void NewRegResponse::clear_has_stepticket() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void NewRegResponse::clear_stepticket() {
  stepticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stepticket();
}
inline const ::std::string& NewRegResponse::stepticket() const {
  // @@protoc_insertion_point(field_get:FromCs.NewRegResponse.stepTicket)
  return stepticket_.GetNoArena();
}
inline void NewRegResponse::set_stepticket(const ::std::string& value) {
  set_has_stepticket();
  stepticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.NewRegResponse.stepTicket)
}
#if LANG_CXX11
inline void NewRegResponse::set_stepticket(::std::string&& value) {
  set_has_stepticket();
  stepticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.NewRegResponse.stepTicket)
}
#endif
inline void NewRegResponse::set_stepticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_stepticket();
  stepticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.NewRegResponse.stepTicket)
}
inline void NewRegResponse::set_stepticket(const char* value, size_t size) {
  set_has_stepticket();
  stepticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.NewRegResponse.stepTicket)
}
inline ::std::string* NewRegResponse::mutable_stepticket() {
  set_has_stepticket();
  // @@protoc_insertion_point(field_mutable:FromCs.NewRegResponse.stepTicket)
  return stepticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewRegResponse::release_stepticket() {
  // @@protoc_insertion_point(field_release:FromCs.NewRegResponse.stepTicket)
  clear_has_stepticket();
  return stepticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewRegResponse::set_allocated_stepticket(::std::string* stepticket) {
  if (stepticket != NULL) {
    set_has_stepticket();
  } else {
    clear_has_stepticket();
  }
  stepticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stepticket);
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewRegResponse.stepTicket)
}

// optional string verifySignature = 29;
inline bool NewRegResponse::has_verifysignature() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void NewRegResponse::set_has_verifysignature() {
  _has_bits_[0] |= 0x00001000u;
}
inline void NewRegResponse::clear_has_verifysignature() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void NewRegResponse::clear_verifysignature() {
  verifysignature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_verifysignature();
}
inline const ::std::string& NewRegResponse::verifysignature() const {
  // @@protoc_insertion_point(field_get:FromCs.NewRegResponse.verifySignature)
  return verifysignature_.GetNoArena();
}
inline void NewRegResponse::set_verifysignature(const ::std::string& value) {
  set_has_verifysignature();
  verifysignature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.NewRegResponse.verifySignature)
}
#if LANG_CXX11
inline void NewRegResponse::set_verifysignature(::std::string&& value) {
  set_has_verifysignature();
  verifysignature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.NewRegResponse.verifySignature)
}
#endif
inline void NewRegResponse::set_verifysignature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_verifysignature();
  verifysignature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.NewRegResponse.verifySignature)
}
inline void NewRegResponse::set_verifysignature(const char* value, size_t size) {
  set_has_verifysignature();
  verifysignature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.NewRegResponse.verifySignature)
}
inline ::std::string* NewRegResponse::mutable_verifysignature() {
  set_has_verifysignature();
  // @@protoc_insertion_point(field_mutable:FromCs.NewRegResponse.verifySignature)
  return verifysignature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewRegResponse::release_verifysignature() {
  // @@protoc_insertion_point(field_release:FromCs.NewRegResponse.verifySignature)
  clear_has_verifysignature();
  return verifysignature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewRegResponse::set_allocated_verifysignature(::std::string* verifysignature) {
  if (verifysignature != NULL) {
    set_has_verifysignature();
  } else {
    clear_has_verifysignature();
  }
  verifysignature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verifysignature);
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewRegResponse.verifySignature)
}

// optional .FromCs.sKBuiltinBufferT verifyBuff = 30;
inline bool NewRegResponse::has_verifybuff() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void NewRegResponse::set_has_verifybuff() {
  _has_bits_[0] |= 0x00080000u;
}
inline void NewRegResponse::clear_has_verifybuff() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void NewRegResponse::clear_verifybuff() {
  if (verifybuff_ != NULL) verifybuff_->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_verifybuff();
}
inline const ::FromCs::sKBuiltinBufferT& NewRegResponse::verifybuff() const {
  // @@protoc_insertion_point(field_get:FromCs.NewRegResponse.verifyBuff)
  return verifybuff_ != NULL ? *verifybuff_
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* NewRegResponse::mutable_verifybuff() {
  set_has_verifybuff();
  if (verifybuff_ == NULL) {
    verifybuff_ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.NewRegResponse.verifyBuff)
  return verifybuff_;
}
inline ::FromCs::sKBuiltinBufferT* NewRegResponse::release_verifybuff() {
  // @@protoc_insertion_point(field_release:FromCs.NewRegResponse.verifyBuff)
  clear_has_verifybuff();
  ::FromCs::sKBuiltinBufferT* temp = verifybuff_;
  verifybuff_ = NULL;
  return temp;
}
inline void NewRegResponse::set_allocated_verifybuff(::FromCs::sKBuiltinBufferT* verifybuff) {
  delete verifybuff_;
  verifybuff_ = verifybuff;
  if (verifybuff) {
    set_has_verifybuff();
  } else {
    clear_has_verifybuff();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewRegResponse.verifyBuff)
}

// optional .FromCs.ShowStyleKey showStyle = 31;
inline bool NewRegResponse::has_showstyle() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void NewRegResponse::set_has_showstyle() {
  _has_bits_[0] |= 0x00100000u;
}
inline void NewRegResponse::clear_has_showstyle() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void NewRegResponse::clear_showstyle() {
  if (showstyle_ != NULL) showstyle_->::FromCs::ShowStyleKey::Clear();
  clear_has_showstyle();
}
inline const ::FromCs::ShowStyleKey& NewRegResponse::showstyle() const {
  // @@protoc_insertion_point(field_get:FromCs.NewRegResponse.showStyle)
  return showstyle_ != NULL ? *showstyle_
                         : *::FromCs::ShowStyleKey::internal_default_instance();
}
inline ::FromCs::ShowStyleKey* NewRegResponse::mutable_showstyle() {
  set_has_showstyle();
  if (showstyle_ == NULL) {
    showstyle_ = new ::FromCs::ShowStyleKey;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.NewRegResponse.showStyle)
  return showstyle_;
}
inline ::FromCs::ShowStyleKey* NewRegResponse::release_showstyle() {
  // @@protoc_insertion_point(field_release:FromCs.NewRegResponse.showStyle)
  clear_has_showstyle();
  ::FromCs::ShowStyleKey* temp = showstyle_;
  showstyle_ = NULL;
  return temp;
}
inline void NewRegResponse::set_allocated_showstyle(::FromCs::ShowStyleKey* showstyle) {
  delete showstyle_;
  showstyle_ = showstyle;
  if (showstyle) {
    set_has_showstyle();
  } else {
    clear_has_showstyle();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewRegResponse.showStyle)
}

// optional .FromCs.DnsInfoType snsDnsInfo = 32;
inline bool NewRegResponse::has_snsdnsinfo() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void NewRegResponse::set_has_snsdnsinfo() {
  _has_bits_[0] |= 0x00200000u;
}
inline void NewRegResponse::clear_has_snsdnsinfo() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void NewRegResponse::clear_snsdnsinfo() {
  if (snsdnsinfo_ != NULL) snsdnsinfo_->::FromCs::DnsInfoType::Clear();
  clear_has_snsdnsinfo();
}
inline const ::FromCs::DnsInfoType& NewRegResponse::snsdnsinfo() const {
  // @@protoc_insertion_point(field_get:FromCs.NewRegResponse.snsDnsInfo)
  return snsdnsinfo_ != NULL ? *snsdnsinfo_
                         : *::FromCs::DnsInfoType::internal_default_instance();
}
inline ::FromCs::DnsInfoType* NewRegResponse::mutable_snsdnsinfo() {
  set_has_snsdnsinfo();
  if (snsdnsinfo_ == NULL) {
    snsdnsinfo_ = new ::FromCs::DnsInfoType;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.NewRegResponse.snsDnsInfo)
  return snsdnsinfo_;
}
inline ::FromCs::DnsInfoType* NewRegResponse::release_snsdnsinfo() {
  // @@protoc_insertion_point(field_release:FromCs.NewRegResponse.snsDnsInfo)
  clear_has_snsdnsinfo();
  ::FromCs::DnsInfoType* temp = snsdnsinfo_;
  snsdnsinfo_ = NULL;
  return temp;
}
inline void NewRegResponse::set_allocated_snsdnsinfo(::FromCs::DnsInfoType* snsdnsinfo) {
  delete snsdnsinfo_;
  snsdnsinfo_ = snsdnsinfo;
  if (snsdnsinfo) {
    set_has_snsdnsinfo();
  } else {
    clear_has_snsdnsinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewRegResponse.snsDnsInfo)
}

// optional .FromCs.DnsInfoType appDnsInfo = 33;
inline bool NewRegResponse::has_appdnsinfo() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void NewRegResponse::set_has_appdnsinfo() {
  _has_bits_[0] |= 0x00400000u;
}
inline void NewRegResponse::clear_has_appdnsinfo() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void NewRegResponse::clear_appdnsinfo() {
  if (appdnsinfo_ != NULL) appdnsinfo_->::FromCs::DnsInfoType::Clear();
  clear_has_appdnsinfo();
}
inline const ::FromCs::DnsInfoType& NewRegResponse::appdnsinfo() const {
  // @@protoc_insertion_point(field_get:FromCs.NewRegResponse.appDnsInfo)
  return appdnsinfo_ != NULL ? *appdnsinfo_
                         : *::FromCs::DnsInfoType::internal_default_instance();
}
inline ::FromCs::DnsInfoType* NewRegResponse::mutable_appdnsinfo() {
  set_has_appdnsinfo();
  if (appdnsinfo_ == NULL) {
    appdnsinfo_ = new ::FromCs::DnsInfoType;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.NewRegResponse.appDnsInfo)
  return appdnsinfo_;
}
inline ::FromCs::DnsInfoType* NewRegResponse::release_appdnsinfo() {
  // @@protoc_insertion_point(field_release:FromCs.NewRegResponse.appDnsInfo)
  clear_has_appdnsinfo();
  ::FromCs::DnsInfoType* temp = appdnsinfo_;
  appdnsinfo_ = NULL;
  return temp;
}
inline void NewRegResponse::set_allocated_appdnsinfo(::FromCs::DnsInfoType* appdnsinfo) {
  delete appdnsinfo_;
  appdnsinfo_ = appdnsinfo;
  if (appdnsinfo) {
    set_has_appdnsinfo();
  } else {
    clear_has_appdnsinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewRegResponse.appDnsInfo)
}

// optional .FromCs.SecAuthRegKeySect secAuthRegKeySect = 34;
inline bool NewRegResponse::has_secauthregkeysect() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void NewRegResponse::set_has_secauthregkeysect() {
  _has_bits_[0] |= 0x00800000u;
}
inline void NewRegResponse::clear_has_secauthregkeysect() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void NewRegResponse::clear_secauthregkeysect() {
  if (secauthregkeysect_ != NULL) secauthregkeysect_->::FromCs::SecAuthRegKeySect::Clear();
  clear_has_secauthregkeysect();
}
inline const ::FromCs::SecAuthRegKeySect& NewRegResponse::secauthregkeysect() const {
  // @@protoc_insertion_point(field_get:FromCs.NewRegResponse.secAuthRegKeySect)
  return secauthregkeysect_ != NULL ? *secauthregkeysect_
                         : *::FromCs::SecAuthRegKeySect::internal_default_instance();
}
inline ::FromCs::SecAuthRegKeySect* NewRegResponse::mutable_secauthregkeysect() {
  set_has_secauthregkeysect();
  if (secauthregkeysect_ == NULL) {
    secauthregkeysect_ = new ::FromCs::SecAuthRegKeySect;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.NewRegResponse.secAuthRegKeySect)
  return secauthregkeysect_;
}
inline ::FromCs::SecAuthRegKeySect* NewRegResponse::release_secauthregkeysect() {
  // @@protoc_insertion_point(field_release:FromCs.NewRegResponse.secAuthRegKeySect)
  clear_has_secauthregkeysect();
  ::FromCs::SecAuthRegKeySect* temp = secauthregkeysect_;
  secauthregkeysect_ = NULL;
  return temp;
}
inline void NewRegResponse::set_allocated_secauthregkeysect(::FromCs::SecAuthRegKeySect* secauthregkeysect) {
  delete secauthregkeysect_;
  secauthregkeysect_ = secauthregkeysect;
  if (secauthregkeysect) {
    set_has_secauthregkeysect();
  } else {
    clear_has_secauthregkeysect();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewRegResponse.secAuthRegKeySect)
}

// -------------------------------------------------------------------

// LogoutRequest

// required .FromCs.BaseRequest base = 1;
inline bool LogoutRequest::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogoutRequest::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogoutRequest::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogoutRequest::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseRequest::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseRequest& LogoutRequest::base() const {
  // @@protoc_insertion_point(field_get:FromCs.LogoutRequest.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseRequest::internal_default_instance();
}
inline ::FromCs::BaseRequest* LogoutRequest::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.LogoutRequest.base)
  return base_;
}
inline ::FromCs::BaseRequest* LogoutRequest::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.LogoutRequest.base)
  clear_has_base();
  ::FromCs::BaseRequest* temp = base_;
  base_ = NULL;
  return temp;
}
inline void LogoutRequest::set_allocated_base(::FromCs::BaseRequest* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.LogoutRequest.base)
}

// required int32 Scene = 2;
inline bool LogoutRequest::has_scene() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogoutRequest::set_has_scene() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogoutRequest::clear_has_scene() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogoutRequest::clear_scene() {
  scene_ = 0;
  clear_has_scene();
}
inline ::google::protobuf::int32 LogoutRequest::scene() const {
  // @@protoc_insertion_point(field_get:FromCs.LogoutRequest.Scene)
  return scene_;
}
inline void LogoutRequest::set_scene(::google::protobuf::int32 value) {
  set_has_scene();
  scene_ = value;
  // @@protoc_insertion_point(field_set:FromCs.LogoutRequest.Scene)
}

// -------------------------------------------------------------------

// LogoutResponse

// required .FromCs.BaseResponse base = 1;
inline bool LogoutResponse::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogoutResponse::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogoutResponse::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogoutResponse::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseResponse::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseResponse& LogoutResponse::base() const {
  // @@protoc_insertion_point(field_get:FromCs.LogoutResponse.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseResponse::internal_default_instance();
}
inline ::FromCs::BaseResponse* LogoutResponse::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.LogoutResponse.base)
  return base_;
}
inline ::FromCs::BaseResponse* LogoutResponse::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.LogoutResponse.base)
  clear_has_base();
  ::FromCs::BaseResponse* temp = base_;
  base_ = NULL;
  return temp;
}
inline void LogoutResponse::set_allocated_base(::FromCs::BaseResponse* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.LogoutResponse.base)
}

// -------------------------------------------------------------------

// VerifyUserRequest

// required .FromCs.BaseRequest base = 1;
inline bool VerifyUserRequest::has_base() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VerifyUserRequest::set_has_base() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VerifyUserRequest::clear_has_base() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VerifyUserRequest::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseRequest::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseRequest& VerifyUserRequest::base() const {
  // @@protoc_insertion_point(field_get:FromCs.VerifyUserRequest.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseRequest::internal_default_instance();
}
inline ::FromCs::BaseRequest* VerifyUserRequest::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.VerifyUserRequest.base)
  return base_;
}
inline ::FromCs::BaseRequest* VerifyUserRequest::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.VerifyUserRequest.base)
  clear_has_base();
  ::FromCs::BaseRequest* temp = base_;
  base_ = NULL;
  return temp;
}
inline void VerifyUserRequest::set_allocated_base(::FromCs::BaseRequest* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.VerifyUserRequest.base)
}

// required int32 Opcode = 2;
inline bool VerifyUserRequest::has_opcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VerifyUserRequest::set_has_opcode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VerifyUserRequest::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VerifyUserRequest::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
inline ::google::protobuf::int32 VerifyUserRequest::opcode() const {
  // @@protoc_insertion_point(field_get:FromCs.VerifyUserRequest.Opcode)
  return opcode_;
}
inline void VerifyUserRequest::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
  // @@protoc_insertion_point(field_set:FromCs.VerifyUserRequest.Opcode)
}

// required int32 VerifyUserListSize = 3;
inline bool VerifyUserRequest::has_verifyuserlistsize() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VerifyUserRequest::set_has_verifyuserlistsize() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VerifyUserRequest::clear_has_verifyuserlistsize() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VerifyUserRequest::clear_verifyuserlistsize() {
  verifyuserlistsize_ = 0;
  clear_has_verifyuserlistsize();
}
inline ::google::protobuf::int32 VerifyUserRequest::verifyuserlistsize() const {
  // @@protoc_insertion_point(field_get:FromCs.VerifyUserRequest.VerifyUserListSize)
  return verifyuserlistsize_;
}
inline void VerifyUserRequest::set_verifyuserlistsize(::google::protobuf::int32 value) {
  set_has_verifyuserlistsize();
  verifyuserlistsize_ = value;
  // @@protoc_insertion_point(field_set:FromCs.VerifyUserRequest.VerifyUserListSize)
}

// repeated .FromCs.VerifyUserObj VerifyUserList = 4;
inline int VerifyUserRequest::verifyuserlist_size() const {
  return verifyuserlist_.size();
}
inline void VerifyUserRequest::clear_verifyuserlist() {
  verifyuserlist_.Clear();
}
inline const ::FromCs::VerifyUserObj& VerifyUserRequest::verifyuserlist(int index) const {
  // @@protoc_insertion_point(field_get:FromCs.VerifyUserRequest.VerifyUserList)
  return verifyuserlist_.Get(index);
}
inline ::FromCs::VerifyUserObj* VerifyUserRequest::mutable_verifyuserlist(int index) {
  // @@protoc_insertion_point(field_mutable:FromCs.VerifyUserRequest.VerifyUserList)
  return verifyuserlist_.Mutable(index);
}
inline ::FromCs::VerifyUserObj* VerifyUserRequest::add_verifyuserlist() {
  // @@protoc_insertion_point(field_add:FromCs.VerifyUserRequest.VerifyUserList)
  return verifyuserlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::FromCs::VerifyUserObj >*
VerifyUserRequest::mutable_verifyuserlist() {
  // @@protoc_insertion_point(field_mutable_list:FromCs.VerifyUserRequest.VerifyUserList)
  return &verifyuserlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::FromCs::VerifyUserObj >&
VerifyUserRequest::verifyuserlist() const {
  // @@protoc_insertion_point(field_list:FromCs.VerifyUserRequest.VerifyUserList)
  return verifyuserlist_;
}

// optional string VerifyContent = 5;
inline bool VerifyUserRequest::has_verifycontent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VerifyUserRequest::set_has_verifycontent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VerifyUserRequest::clear_has_verifycontent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VerifyUserRequest::clear_verifycontent() {
  verifycontent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_verifycontent();
}
inline const ::std::string& VerifyUserRequest::verifycontent() const {
  // @@protoc_insertion_point(field_get:FromCs.VerifyUserRequest.VerifyContent)
  return verifycontent_.GetNoArena();
}
inline void VerifyUserRequest::set_verifycontent(const ::std::string& value) {
  set_has_verifycontent();
  verifycontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.VerifyUserRequest.VerifyContent)
}
#if LANG_CXX11
inline void VerifyUserRequest::set_verifycontent(::std::string&& value) {
  set_has_verifycontent();
  verifycontent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.VerifyUserRequest.VerifyContent)
}
#endif
inline void VerifyUserRequest::set_verifycontent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_verifycontent();
  verifycontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.VerifyUserRequest.VerifyContent)
}
inline void VerifyUserRequest::set_verifycontent(const char* value, size_t size) {
  set_has_verifycontent();
  verifycontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.VerifyUserRequest.VerifyContent)
}
inline ::std::string* VerifyUserRequest::mutable_verifycontent() {
  set_has_verifycontent();
  // @@protoc_insertion_point(field_mutable:FromCs.VerifyUserRequest.VerifyContent)
  return verifycontent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VerifyUserRequest::release_verifycontent() {
  // @@protoc_insertion_point(field_release:FromCs.VerifyUserRequest.VerifyContent)
  clear_has_verifycontent();
  return verifycontent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VerifyUserRequest::set_allocated_verifycontent(::std::string* verifycontent) {
  if (verifycontent != NULL) {
    set_has_verifycontent();
  } else {
    clear_has_verifycontent();
  }
  verifycontent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verifycontent);
  // @@protoc_insertion_point(field_set_allocated:FromCs.VerifyUserRequest.VerifyContent)
}

// optional int32 SceneListNumb = 6;
inline bool VerifyUserRequest::has_scenelistnumb() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VerifyUserRequest::set_has_scenelistnumb() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VerifyUserRequest::clear_has_scenelistnumb() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VerifyUserRequest::clear_scenelistnumb() {
  scenelistnumb_ = 0;
  clear_has_scenelistnumb();
}
inline ::google::protobuf::int32 VerifyUserRequest::scenelistnumb() const {
  // @@protoc_insertion_point(field_get:FromCs.VerifyUserRequest.SceneListNumb)
  return scenelistnumb_;
}
inline void VerifyUserRequest::set_scenelistnumb(::google::protobuf::int32 value) {
  set_has_scenelistnumb();
  scenelistnumb_ = value;
  // @@protoc_insertion_point(field_set:FromCs.VerifyUserRequest.SceneListNumb)
}

// repeated string SceneList = 7;
inline int VerifyUserRequest::scenelist_size() const {
  return scenelist_.size();
}
inline void VerifyUserRequest::clear_scenelist() {
  scenelist_.Clear();
}
inline const ::std::string& VerifyUserRequest::scenelist(int index) const {
  // @@protoc_insertion_point(field_get:FromCs.VerifyUserRequest.SceneList)
  return scenelist_.Get(index);
}
inline ::std::string* VerifyUserRequest::mutable_scenelist(int index) {
  // @@protoc_insertion_point(field_mutable:FromCs.VerifyUserRequest.SceneList)
  return scenelist_.Mutable(index);
}
inline void VerifyUserRequest::set_scenelist(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:FromCs.VerifyUserRequest.SceneList)
  scenelist_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void VerifyUserRequest::set_scenelist(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:FromCs.VerifyUserRequest.SceneList)
  scenelist_.Mutable(index)->assign(std::move(value));
}
#endif
inline void VerifyUserRequest::set_scenelist(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  scenelist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:FromCs.VerifyUserRequest.SceneList)
}
inline void VerifyUserRequest::set_scenelist(int index, const char* value, size_t size) {
  scenelist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:FromCs.VerifyUserRequest.SceneList)
}
inline ::std::string* VerifyUserRequest::add_scenelist() {
  // @@protoc_insertion_point(field_add_mutable:FromCs.VerifyUserRequest.SceneList)
  return scenelist_.Add();
}
inline void VerifyUserRequest::add_scenelist(const ::std::string& value) {
  scenelist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:FromCs.VerifyUserRequest.SceneList)
}
#if LANG_CXX11
inline void VerifyUserRequest::add_scenelist(::std::string&& value) {
  scenelist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:FromCs.VerifyUserRequest.SceneList)
}
#endif
inline void VerifyUserRequest::add_scenelist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  scenelist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:FromCs.VerifyUserRequest.SceneList)
}
inline void VerifyUserRequest::add_scenelist(const char* value, size_t size) {
  scenelist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:FromCs.VerifyUserRequest.SceneList)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
VerifyUserRequest::scenelist() const {
  // @@protoc_insertion_point(field_list:FromCs.VerifyUserRequest.SceneList)
  return scenelist_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
VerifyUserRequest::mutable_scenelist() {
  // @@protoc_insertion_point(field_mutable_list:FromCs.VerifyUserRequest.SceneList)
  return &scenelist_;
}

// -------------------------------------------------------------------

// VerifyUserResponse

// required .FromCs.BaseResponse base = 1;
inline bool VerifyUserResponse::has_base() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VerifyUserResponse::set_has_base() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VerifyUserResponse::clear_has_base() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VerifyUserResponse::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseResponse::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseResponse& VerifyUserResponse::base() const {
  // @@protoc_insertion_point(field_get:FromCs.VerifyUserResponse.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseResponse::internal_default_instance();
}
inline ::FromCs::BaseResponse* VerifyUserResponse::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.VerifyUserResponse.base)
  return base_;
}
inline ::FromCs::BaseResponse* VerifyUserResponse::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.VerifyUserResponse.base)
  clear_has_base();
  ::FromCs::BaseResponse* temp = base_;
  base_ = NULL;
  return temp;
}
inline void VerifyUserResponse::set_allocated_base(::FromCs::BaseResponse* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.VerifyUserResponse.base)
}

// optional string UserName = 2;
inline bool VerifyUserResponse::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VerifyUserResponse::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VerifyUserResponse::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VerifyUserResponse::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& VerifyUserResponse::username() const {
  // @@protoc_insertion_point(field_get:FromCs.VerifyUserResponse.UserName)
  return username_.GetNoArena();
}
inline void VerifyUserResponse::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.VerifyUserResponse.UserName)
}
#if LANG_CXX11
inline void VerifyUserResponse::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.VerifyUserResponse.UserName)
}
#endif
inline void VerifyUserResponse::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.VerifyUserResponse.UserName)
}
inline void VerifyUserResponse::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.VerifyUserResponse.UserName)
}
inline ::std::string* VerifyUserResponse::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:FromCs.VerifyUserResponse.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VerifyUserResponse::release_username() {
  // @@protoc_insertion_point(field_release:FromCs.VerifyUserResponse.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VerifyUserResponse::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:FromCs.VerifyUserResponse.UserName)
}

// -------------------------------------------------------------------

// GetContactRequest

// required .FromCs.BaseRequest base = 1;
inline bool GetContactRequest::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetContactRequest::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetContactRequest::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetContactRequest::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseRequest::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseRequest& GetContactRequest::base() const {
  // @@protoc_insertion_point(field_get:FromCs.GetContactRequest.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseRequest::internal_default_instance();
}
inline ::FromCs::BaseRequest* GetContactRequest::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.GetContactRequest.base)
  return base_;
}
inline ::FromCs::BaseRequest* GetContactRequest::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.GetContactRequest.base)
  clear_has_base();
  ::FromCs::BaseRequest* temp = base_;
  base_ = NULL;
  return temp;
}
inline void GetContactRequest::set_allocated_base(::FromCs::BaseRequest* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.GetContactRequest.base)
}

// required int32 UserCount = 2;
inline bool GetContactRequest::has_usercount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetContactRequest::set_has_usercount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetContactRequest::clear_has_usercount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetContactRequest::clear_usercount() {
  usercount_ = 0;
  clear_has_usercount();
}
inline ::google::protobuf::int32 GetContactRequest::usercount() const {
  // @@protoc_insertion_point(field_get:FromCs.GetContactRequest.UserCount)
  return usercount_;
}
inline void GetContactRequest::set_usercount(::google::protobuf::int32 value) {
  set_has_usercount();
  usercount_ = value;
  // @@protoc_insertion_point(field_set:FromCs.GetContactRequest.UserCount)
}

// repeated .FromCs.sKBuiltinstringT UserNameList = 3;
inline int GetContactRequest::usernamelist_size() const {
  return usernamelist_.size();
}
inline void GetContactRequest::clear_usernamelist() {
  usernamelist_.Clear();
}
inline const ::FromCs::sKBuiltinstringT& GetContactRequest::usernamelist(int index) const {
  // @@protoc_insertion_point(field_get:FromCs.GetContactRequest.UserNameList)
  return usernamelist_.Get(index);
}
inline ::FromCs::sKBuiltinstringT* GetContactRequest::mutable_usernamelist(int index) {
  // @@protoc_insertion_point(field_mutable:FromCs.GetContactRequest.UserNameList)
  return usernamelist_.Mutable(index);
}
inline ::FromCs::sKBuiltinstringT* GetContactRequest::add_usernamelist() {
  // @@protoc_insertion_point(field_add:FromCs.GetContactRequest.UserNameList)
  return usernamelist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::FromCs::sKBuiltinstringT >*
GetContactRequest::mutable_usernamelist() {
  // @@protoc_insertion_point(field_mutable_list:FromCs.GetContactRequest.UserNameList)
  return &usernamelist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::FromCs::sKBuiltinstringT >&
GetContactRequest::usernamelist() const {
  // @@protoc_insertion_point(field_list:FromCs.GetContactRequest.UserNameList)
  return usernamelist_;
}

// -------------------------------------------------------------------

// GetContactResponse

// required .FromCs.BaseResponse base = 1;
inline bool GetContactResponse::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetContactResponse::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetContactResponse::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetContactResponse::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseResponse::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseResponse& GetContactResponse::base() const {
  // @@protoc_insertion_point(field_get:FromCs.GetContactResponse.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseResponse::internal_default_instance();
}
inline ::FromCs::BaseResponse* GetContactResponse::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.GetContactResponse.base)
  return base_;
}
inline ::FromCs::BaseResponse* GetContactResponse::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.GetContactResponse.base)
  clear_has_base();
  ::FromCs::BaseResponse* temp = base_;
  base_ = NULL;
  return temp;
}
inline void GetContactResponse::set_allocated_base(::FromCs::BaseResponse* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.GetContactResponse.base)
}

// required int32 ContactCount = 2;
inline bool GetContactResponse::has_contactcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetContactResponse::set_has_contactcount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetContactResponse::clear_has_contactcount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetContactResponse::clear_contactcount() {
  contactcount_ = 0;
  clear_has_contactcount();
}
inline ::google::protobuf::int32 GetContactResponse::contactcount() const {
  // @@protoc_insertion_point(field_get:FromCs.GetContactResponse.ContactCount)
  return contactcount_;
}
inline void GetContactResponse::set_contactcount(::google::protobuf::int32 value) {
  set_has_contactcount();
  contactcount_ = value;
  // @@protoc_insertion_point(field_set:FromCs.GetContactResponse.ContactCount)
}

// repeated .FromCs.ContactProfile ContactList = 3;
inline int GetContactResponse::contactlist_size() const {
  return contactlist_.size();
}
inline void GetContactResponse::clear_contactlist() {
  contactlist_.Clear();
}
inline const ::FromCs::ContactProfile& GetContactResponse::contactlist(int index) const {
  // @@protoc_insertion_point(field_get:FromCs.GetContactResponse.ContactList)
  return contactlist_.Get(index);
}
inline ::FromCs::ContactProfile* GetContactResponse::mutable_contactlist(int index) {
  // @@protoc_insertion_point(field_mutable:FromCs.GetContactResponse.ContactList)
  return contactlist_.Mutable(index);
}
inline ::FromCs::ContactProfile* GetContactResponse::add_contactlist() {
  // @@protoc_insertion_point(field_add:FromCs.GetContactResponse.ContactList)
  return contactlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::FromCs::ContactProfile >*
GetContactResponse::mutable_contactlist() {
  // @@protoc_insertion_point(field_mutable_list:FromCs.GetContactResponse.ContactList)
  return &contactlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::FromCs::ContactProfile >&
GetContactResponse::contactlist() const {
  // @@protoc_insertion_point(field_list:FromCs.GetContactResponse.ContactList)
  return contactlist_;
}

// repeated string Ret = 4;
inline int GetContactResponse::ret_size() const {
  return ret_.size();
}
inline void GetContactResponse::clear_ret() {
  ret_.Clear();
}
inline const ::std::string& GetContactResponse::ret(int index) const {
  // @@protoc_insertion_point(field_get:FromCs.GetContactResponse.Ret)
  return ret_.Get(index);
}
inline ::std::string* GetContactResponse::mutable_ret(int index) {
  // @@protoc_insertion_point(field_mutable:FromCs.GetContactResponse.Ret)
  return ret_.Mutable(index);
}
inline void GetContactResponse::set_ret(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:FromCs.GetContactResponse.Ret)
  ret_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void GetContactResponse::set_ret(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:FromCs.GetContactResponse.Ret)
  ret_.Mutable(index)->assign(std::move(value));
}
#endif
inline void GetContactResponse::set_ret(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  ret_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:FromCs.GetContactResponse.Ret)
}
inline void GetContactResponse::set_ret(int index, const char* value, size_t size) {
  ret_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:FromCs.GetContactResponse.Ret)
}
inline ::std::string* GetContactResponse::add_ret() {
  // @@protoc_insertion_point(field_add_mutable:FromCs.GetContactResponse.Ret)
  return ret_.Add();
}
inline void GetContactResponse::add_ret(const ::std::string& value) {
  ret_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:FromCs.GetContactResponse.Ret)
}
#if LANG_CXX11
inline void GetContactResponse::add_ret(::std::string&& value) {
  ret_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:FromCs.GetContactResponse.Ret)
}
#endif
inline void GetContactResponse::add_ret(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  ret_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:FromCs.GetContactResponse.Ret)
}
inline void GetContactResponse::add_ret(const char* value, size_t size) {
  ret_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:FromCs.GetContactResponse.Ret)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetContactResponse::ret() const {
  // @@protoc_insertion_point(field_list:FromCs.GetContactResponse.Ret)
  return ret_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GetContactResponse::mutable_ret() {
  // @@protoc_insertion_point(field_mutable_list:FromCs.GetContactResponse.Ret)
  return &ret_;
}

// -------------------------------------------------------------------

// GetPackageListRequest

// required .FromCs.BaseRequest base = 1;
inline bool GetPackageListRequest::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetPackageListRequest::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetPackageListRequest::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetPackageListRequest::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseRequest::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseRequest& GetPackageListRequest::base() const {
  // @@protoc_insertion_point(field_get:FromCs.GetPackageListRequest.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseRequest::internal_default_instance();
}
inline ::FromCs::BaseRequest* GetPackageListRequest::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.GetPackageListRequest.base)
  return base_;
}
inline ::FromCs::BaseRequest* GetPackageListRequest::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.GetPackageListRequest.base)
  clear_has_base();
  ::FromCs::BaseRequest* temp = base_;
  base_ = NULL;
  return temp;
}
inline void GetPackageListRequest::set_allocated_base(::FromCs::BaseRequest* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.GetPackageListRequest.base)
}

// required int32 Count = 2;
inline bool GetPackageListRequest::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetPackageListRequest::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetPackageListRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetPackageListRequest::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 GetPackageListRequest::count() const {
  // @@protoc_insertion_point(field_get:FromCs.GetPackageListRequest.Count)
  return count_;
}
inline void GetPackageListRequest::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:FromCs.GetPackageListRequest.Count)
}

// repeated .FromCs.PackegeInfo List = 3;
inline int GetPackageListRequest::list_size() const {
  return list_.size();
}
inline void GetPackageListRequest::clear_list() {
  list_.Clear();
}
inline const ::FromCs::PackegeInfo& GetPackageListRequest::list(int index) const {
  // @@protoc_insertion_point(field_get:FromCs.GetPackageListRequest.List)
  return list_.Get(index);
}
inline ::FromCs::PackegeInfo* GetPackageListRequest::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:FromCs.GetPackageListRequest.List)
  return list_.Mutable(index);
}
inline ::FromCs::PackegeInfo* GetPackageListRequest::add_list() {
  // @@protoc_insertion_point(field_add:FromCs.GetPackageListRequest.List)
  return list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::FromCs::PackegeInfo >*
GetPackageListRequest::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:FromCs.GetPackageListRequest.List)
  return &list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::FromCs::PackegeInfo >&
GetPackageListRequest::list() const {
  // @@protoc_insertion_point(field_list:FromCs.GetPackageListRequest.List)
  return list_;
}

// optional int32 Type = 4;
inline bool GetPackageListRequest::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetPackageListRequest::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetPackageListRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetPackageListRequest::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 GetPackageListRequest::type() const {
  // @@protoc_insertion_point(field_get:FromCs.GetPackageListRequest.Type)
  return type_;
}
inline void GetPackageListRequest::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:FromCs.GetPackageListRequest.Type)
}

// -------------------------------------------------------------------

// GetPackageListResponse

// required .FromCs.BaseResponse base = 1;
inline bool GetPackageListResponse::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetPackageListResponse::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetPackageListResponse::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetPackageListResponse::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseResponse::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseResponse& GetPackageListResponse::base() const {
  // @@protoc_insertion_point(field_get:FromCs.GetPackageListResponse.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseResponse::internal_default_instance();
}
inline ::FromCs::BaseResponse* GetPackageListResponse::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.GetPackageListResponse.base)
  return base_;
}
inline ::FromCs::BaseResponse* GetPackageListResponse::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.GetPackageListResponse.base)
  clear_has_base();
  ::FromCs::BaseResponse* temp = base_;
  base_ = NULL;
  return temp;
}
inline void GetPackageListResponse::set_allocated_base(::FromCs::BaseResponse* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.GetPackageListResponse.base)
}

// required int32 Count = 2;
inline bool GetPackageListResponse::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetPackageListResponse::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetPackageListResponse::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetPackageListResponse::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 GetPackageListResponse::count() const {
  // @@protoc_insertion_point(field_get:FromCs.GetPackageListResponse.Count)
  return count_;
}
inline void GetPackageListResponse::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:FromCs.GetPackageListResponse.Count)
}

// repeated .FromCs.PackegeInfo List = 3;
inline int GetPackageListResponse::list_size() const {
  return list_.size();
}
inline void GetPackageListResponse::clear_list() {
  list_.Clear();
}
inline const ::FromCs::PackegeInfo& GetPackageListResponse::list(int index) const {
  // @@protoc_insertion_point(field_get:FromCs.GetPackageListResponse.List)
  return list_.Get(index);
}
inline ::FromCs::PackegeInfo* GetPackageListResponse::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:FromCs.GetPackageListResponse.List)
  return list_.Mutable(index);
}
inline ::FromCs::PackegeInfo* GetPackageListResponse::add_list() {
  // @@protoc_insertion_point(field_add:FromCs.GetPackageListResponse.List)
  return list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::FromCs::PackegeInfo >*
GetPackageListResponse::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:FromCs.GetPackageListResponse.List)
  return &list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::FromCs::PackegeInfo >&
GetPackageListResponse::list() const {
  // @@protoc_insertion_point(field_list:FromCs.GetPackageListResponse.List)
  return list_;
}

// required int32 ContinueFlag = 4;
inline bool GetPackageListResponse::has_continueflag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetPackageListResponse::set_has_continueflag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetPackageListResponse::clear_has_continueflag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetPackageListResponse::clear_continueflag() {
  continueflag_ = 0;
  clear_has_continueflag();
}
inline ::google::protobuf::int32 GetPackageListResponse::continueflag() const {
  // @@protoc_insertion_point(field_get:FromCs.GetPackageListResponse.ContinueFlag)
  return continueflag_;
}
inline void GetPackageListResponse::set_continueflag(::google::protobuf::int32 value) {
  set_has_continueflag();
  continueflag_ = value;
  // @@protoc_insertion_point(field_set:FromCs.GetPackageListResponse.ContinueFlag)
}

// required int32 SvrCount = 5;
inline bool GetPackageListResponse::has_svrcount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetPackageListResponse::set_has_svrcount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetPackageListResponse::clear_has_svrcount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetPackageListResponse::clear_svrcount() {
  svrcount_ = 0;
  clear_has_svrcount();
}
inline ::google::protobuf::int32 GetPackageListResponse::svrcount() const {
  // @@protoc_insertion_point(field_get:FromCs.GetPackageListResponse.SvrCount)
  return svrcount_;
}
inline void GetPackageListResponse::set_svrcount(::google::protobuf::int32 value) {
  set_has_svrcount();
  svrcount_ = value;
  // @@protoc_insertion_point(field_set:FromCs.GetPackageListResponse.SvrCount)
}

// optional int32 Type = 6;
inline bool GetPackageListResponse::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GetPackageListResponse::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GetPackageListResponse::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GetPackageListResponse::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 GetPackageListResponse::type() const {
  // @@protoc_insertion_point(field_get:FromCs.GetPackageListResponse.Type)
  return type_;
}
inline void GetPackageListResponse::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:FromCs.GetPackageListResponse.Type)
}

// -------------------------------------------------------------------

// GetHDHeadImgRequest

// required .FromCs.BaseRequest base = 1;
inline bool GetHDHeadImgRequest::has_base() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetHDHeadImgRequest::set_has_base() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetHDHeadImgRequest::clear_has_base() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetHDHeadImgRequest::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseRequest::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseRequest& GetHDHeadImgRequest::base() const {
  // @@protoc_insertion_point(field_get:FromCs.GetHDHeadImgRequest.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseRequest::internal_default_instance();
}
inline ::FromCs::BaseRequest* GetHDHeadImgRequest::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.GetHDHeadImgRequest.base)
  return base_;
}
inline ::FromCs::BaseRequest* GetHDHeadImgRequest::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.GetHDHeadImgRequest.base)
  clear_has_base();
  ::FromCs::BaseRequest* temp = base_;
  base_ = NULL;
  return temp;
}
inline void GetHDHeadImgRequest::set_allocated_base(::FromCs::BaseRequest* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.GetHDHeadImgRequest.base)
}

// optional string UserName = 2;
inline bool GetHDHeadImgRequest::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetHDHeadImgRequest::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetHDHeadImgRequest::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetHDHeadImgRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& GetHDHeadImgRequest::username() const {
  // @@protoc_insertion_point(field_get:FromCs.GetHDHeadImgRequest.UserName)
  return username_.GetNoArena();
}
inline void GetHDHeadImgRequest::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.GetHDHeadImgRequest.UserName)
}
#if LANG_CXX11
inline void GetHDHeadImgRequest::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.GetHDHeadImgRequest.UserName)
}
#endif
inline void GetHDHeadImgRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.GetHDHeadImgRequest.UserName)
}
inline void GetHDHeadImgRequest::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.GetHDHeadImgRequest.UserName)
}
inline ::std::string* GetHDHeadImgRequest::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:FromCs.GetHDHeadImgRequest.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetHDHeadImgRequest::release_username() {
  // @@protoc_insertion_point(field_release:FromCs.GetHDHeadImgRequest.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetHDHeadImgRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:FromCs.GetHDHeadImgRequest.UserName)
}

// required int32 ImgWidth = 3;
inline bool GetHDHeadImgRequest::has_imgwidth() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetHDHeadImgRequest::set_has_imgwidth() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetHDHeadImgRequest::clear_has_imgwidth() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetHDHeadImgRequest::clear_imgwidth() {
  imgwidth_ = 0;
  clear_has_imgwidth();
}
inline ::google::protobuf::int32 GetHDHeadImgRequest::imgwidth() const {
  // @@protoc_insertion_point(field_get:FromCs.GetHDHeadImgRequest.ImgWidth)
  return imgwidth_;
}
inline void GetHDHeadImgRequest::set_imgwidth(::google::protobuf::int32 value) {
  set_has_imgwidth();
  imgwidth_ = value;
  // @@protoc_insertion_point(field_set:FromCs.GetHDHeadImgRequest.ImgWidth)
}

// required int32 ImgHeight = 4;
inline bool GetHDHeadImgRequest::has_imgheight() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GetHDHeadImgRequest::set_has_imgheight() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GetHDHeadImgRequest::clear_has_imgheight() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GetHDHeadImgRequest::clear_imgheight() {
  imgheight_ = 0;
  clear_has_imgheight();
}
inline ::google::protobuf::int32 GetHDHeadImgRequest::imgheight() const {
  // @@protoc_insertion_point(field_get:FromCs.GetHDHeadImgRequest.ImgHeight)
  return imgheight_;
}
inline void GetHDHeadImgRequest::set_imgheight(::google::protobuf::int32 value) {
  set_has_imgheight();
  imgheight_ = value;
  // @@protoc_insertion_point(field_set:FromCs.GetHDHeadImgRequest.ImgHeight)
}

// optional string ImgFormat = 5;
inline bool GetHDHeadImgRequest::has_imgformat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetHDHeadImgRequest::set_has_imgformat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetHDHeadImgRequest::clear_has_imgformat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetHDHeadImgRequest::clear_imgformat() {
  imgformat_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_imgformat();
}
inline const ::std::string& GetHDHeadImgRequest::imgformat() const {
  // @@protoc_insertion_point(field_get:FromCs.GetHDHeadImgRequest.ImgFormat)
  return imgformat_.GetNoArena();
}
inline void GetHDHeadImgRequest::set_imgformat(const ::std::string& value) {
  set_has_imgformat();
  imgformat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.GetHDHeadImgRequest.ImgFormat)
}
#if LANG_CXX11
inline void GetHDHeadImgRequest::set_imgformat(::std::string&& value) {
  set_has_imgformat();
  imgformat_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.GetHDHeadImgRequest.ImgFormat)
}
#endif
inline void GetHDHeadImgRequest::set_imgformat(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_imgformat();
  imgformat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.GetHDHeadImgRequest.ImgFormat)
}
inline void GetHDHeadImgRequest::set_imgformat(const char* value, size_t size) {
  set_has_imgformat();
  imgformat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.GetHDHeadImgRequest.ImgFormat)
}
inline ::std::string* GetHDHeadImgRequest::mutable_imgformat() {
  set_has_imgformat();
  // @@protoc_insertion_point(field_mutable:FromCs.GetHDHeadImgRequest.ImgFormat)
  return imgformat_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetHDHeadImgRequest::release_imgformat() {
  // @@protoc_insertion_point(field_release:FromCs.GetHDHeadImgRequest.ImgFormat)
  clear_has_imgformat();
  return imgformat_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetHDHeadImgRequest::set_allocated_imgformat(::std::string* imgformat) {
  if (imgformat != NULL) {
    set_has_imgformat();
  } else {
    clear_has_imgformat();
  }
  imgformat_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imgformat);
  // @@protoc_insertion_point(field_set_allocated:FromCs.GetHDHeadImgRequest.ImgFormat)
}

// required int32 TotalLen = 6;
inline bool GetHDHeadImgRequest::has_totallen() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GetHDHeadImgRequest::set_has_totallen() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GetHDHeadImgRequest::clear_has_totallen() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GetHDHeadImgRequest::clear_totallen() {
  totallen_ = 0;
  clear_has_totallen();
}
inline ::google::protobuf::int32 GetHDHeadImgRequest::totallen() const {
  // @@protoc_insertion_point(field_get:FromCs.GetHDHeadImgRequest.TotalLen)
  return totallen_;
}
inline void GetHDHeadImgRequest::set_totallen(::google::protobuf::int32 value) {
  set_has_totallen();
  totallen_ = value;
  // @@protoc_insertion_point(field_set:FromCs.GetHDHeadImgRequest.TotalLen)
}

// required int32 StartPos = 7;
inline bool GetHDHeadImgRequest::has_startpos() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GetHDHeadImgRequest::set_has_startpos() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GetHDHeadImgRequest::clear_has_startpos() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GetHDHeadImgRequest::clear_startpos() {
  startpos_ = 0;
  clear_has_startpos();
}
inline ::google::protobuf::int32 GetHDHeadImgRequest::startpos() const {
  // @@protoc_insertion_point(field_get:FromCs.GetHDHeadImgRequest.StartPos)
  return startpos_;
}
inline void GetHDHeadImgRequest::set_startpos(::google::protobuf::int32 value) {
  set_has_startpos();
  startpos_ = value;
  // @@protoc_insertion_point(field_set:FromCs.GetHDHeadImgRequest.StartPos)
}

// required int32 HeadImgType = 8;
inline bool GetHDHeadImgRequest::has_headimgtype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GetHDHeadImgRequest::set_has_headimgtype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GetHDHeadImgRequest::clear_has_headimgtype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GetHDHeadImgRequest::clear_headimgtype() {
  headimgtype_ = 0;
  clear_has_headimgtype();
}
inline ::google::protobuf::int32 GetHDHeadImgRequest::headimgtype() const {
  // @@protoc_insertion_point(field_get:FromCs.GetHDHeadImgRequest.HeadImgType)
  return headimgtype_;
}
inline void GetHDHeadImgRequest::set_headimgtype(::google::protobuf::int32 value) {
  set_has_headimgtype();
  headimgtype_ = value;
  // @@protoc_insertion_point(field_set:FromCs.GetHDHeadImgRequest.HeadImgType)
}

// -------------------------------------------------------------------

// GetHDHeadImgResponse

// required .FromCs.BaseResponse base = 1;
inline bool GetHDHeadImgResponse::has_base() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetHDHeadImgResponse::set_has_base() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetHDHeadImgResponse::clear_has_base() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetHDHeadImgResponse::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseResponse::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseResponse& GetHDHeadImgResponse::base() const {
  // @@protoc_insertion_point(field_get:FromCs.GetHDHeadImgResponse.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseResponse::internal_default_instance();
}
inline ::FromCs::BaseResponse* GetHDHeadImgResponse::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.GetHDHeadImgResponse.base)
  return base_;
}
inline ::FromCs::BaseResponse* GetHDHeadImgResponse::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.GetHDHeadImgResponse.base)
  clear_has_base();
  ::FromCs::BaseResponse* temp = base_;
  base_ = NULL;
  return temp;
}
inline void GetHDHeadImgResponse::set_allocated_base(::FromCs::BaseResponse* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.GetHDHeadImgResponse.base)
}

// optional string UserName = 2;
inline bool GetHDHeadImgResponse::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetHDHeadImgResponse::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetHDHeadImgResponse::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetHDHeadImgResponse::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& GetHDHeadImgResponse::username() const {
  // @@protoc_insertion_point(field_get:FromCs.GetHDHeadImgResponse.UserName)
  return username_.GetNoArena();
}
inline void GetHDHeadImgResponse::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.GetHDHeadImgResponse.UserName)
}
#if LANG_CXX11
inline void GetHDHeadImgResponse::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.GetHDHeadImgResponse.UserName)
}
#endif
inline void GetHDHeadImgResponse::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.GetHDHeadImgResponse.UserName)
}
inline void GetHDHeadImgResponse::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.GetHDHeadImgResponse.UserName)
}
inline ::std::string* GetHDHeadImgResponse::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:FromCs.GetHDHeadImgResponse.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetHDHeadImgResponse::release_username() {
  // @@protoc_insertion_point(field_release:FromCs.GetHDHeadImgResponse.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetHDHeadImgResponse::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:FromCs.GetHDHeadImgResponse.UserName)
}

// required int32 TotalLen = 3;
inline bool GetHDHeadImgResponse::has_totallen() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetHDHeadImgResponse::set_has_totallen() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetHDHeadImgResponse::clear_has_totallen() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetHDHeadImgResponse::clear_totallen() {
  totallen_ = 0;
  clear_has_totallen();
}
inline ::google::protobuf::int32 GetHDHeadImgResponse::totallen() const {
  // @@protoc_insertion_point(field_get:FromCs.GetHDHeadImgResponse.TotalLen)
  return totallen_;
}
inline void GetHDHeadImgResponse::set_totallen(::google::protobuf::int32 value) {
  set_has_totallen();
  totallen_ = value;
  // @@protoc_insertion_point(field_set:FromCs.GetHDHeadImgResponse.TotalLen)
}

// required int32 StartPos = 4;
inline bool GetHDHeadImgResponse::has_startpos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GetHDHeadImgResponse::set_has_startpos() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GetHDHeadImgResponse::clear_has_startpos() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GetHDHeadImgResponse::clear_startpos() {
  startpos_ = 0;
  clear_has_startpos();
}
inline ::google::protobuf::int32 GetHDHeadImgResponse::startpos() const {
  // @@protoc_insertion_point(field_get:FromCs.GetHDHeadImgResponse.StartPos)
  return startpos_;
}
inline void GetHDHeadImgResponse::set_startpos(::google::protobuf::int32 value) {
  set_has_startpos();
  startpos_ = value;
  // @@protoc_insertion_point(field_set:FromCs.GetHDHeadImgResponse.StartPos)
}

// required .FromCs.sKBuiltinBufferT Data = 5;
inline bool GetHDHeadImgResponse::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetHDHeadImgResponse::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetHDHeadImgResponse::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetHDHeadImgResponse::clear_data() {
  if (data_ != NULL) data_->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_data();
}
inline const ::FromCs::sKBuiltinBufferT& GetHDHeadImgResponse::data() const {
  // @@protoc_insertion_point(field_get:FromCs.GetHDHeadImgResponse.Data)
  return data_ != NULL ? *data_
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* GetHDHeadImgResponse::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    data_ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.GetHDHeadImgResponse.Data)
  return data_;
}
inline ::FromCs::sKBuiltinBufferT* GetHDHeadImgResponse::release_data() {
  // @@protoc_insertion_point(field_release:FromCs.GetHDHeadImgResponse.Data)
  clear_has_data();
  ::FromCs::sKBuiltinBufferT* temp = data_;
  data_ = NULL;
  return temp;
}
inline void GetHDHeadImgResponse::set_allocated_data(::FromCs::sKBuiltinBufferT* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.GetHDHeadImgResponse.Data)
}

// -------------------------------------------------------------------

// GetVUserInfoRequest

// required .FromCs.BaseRequest base = 1;
inline bool GetVUserInfoRequest::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetVUserInfoRequest::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetVUserInfoRequest::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetVUserInfoRequest::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseRequest::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseRequest& GetVUserInfoRequest::base() const {
  // @@protoc_insertion_point(field_get:FromCs.GetVUserInfoRequest.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseRequest::internal_default_instance();
}
inline ::FromCs::BaseRequest* GetVUserInfoRequest::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.GetVUserInfoRequest.base)
  return base_;
}
inline ::FromCs::BaseRequest* GetVUserInfoRequest::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.GetVUserInfoRequest.base)
  clear_has_base();
  ::FromCs::BaseRequest* temp = base_;
  base_ = NULL;
  return temp;
}
inline void GetVUserInfoRequest::set_allocated_base(::FromCs::BaseRequest* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.GetVUserInfoRequest.base)
}

// required int32 Version = 2;
inline bool GetVUserInfoRequest::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetVUserInfoRequest::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetVUserInfoRequest::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetVUserInfoRequest::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 GetVUserInfoRequest::version() const {
  // @@protoc_insertion_point(field_get:FromCs.GetVUserInfoRequest.Version)
  return version_;
}
inline void GetVUserInfoRequest::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:FromCs.GetVUserInfoRequest.Version)
}

// -------------------------------------------------------------------

// GetVUserInfoResponse

// required .FromCs.BaseResponse base = 1;
inline bool GetVUserInfoResponse::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetVUserInfoResponse::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetVUserInfoResponse::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetVUserInfoResponse::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseResponse::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseResponse& GetVUserInfoResponse::base() const {
  // @@protoc_insertion_point(field_get:FromCs.GetVUserInfoResponse.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseResponse::internal_default_instance();
}
inline ::FromCs::BaseResponse* GetVUserInfoResponse::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.GetVUserInfoResponse.base)
  return base_;
}
inline ::FromCs::BaseResponse* GetVUserInfoResponse::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.GetVUserInfoResponse.base)
  clear_has_base();
  ::FromCs::BaseResponse* temp = base_;
  base_ = NULL;
  return temp;
}
inline void GetVUserInfoResponse::set_allocated_base(::FromCs::BaseResponse* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.GetVUserInfoResponse.base)
}

// required int32 Version = 2;
inline bool GetVUserInfoResponse::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetVUserInfoResponse::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetVUserInfoResponse::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetVUserInfoResponse::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 GetVUserInfoResponse::version() const {
  // @@protoc_insertion_point(field_get:FromCs.GetVUserInfoResponse.Version)
  return version_;
}
inline void GetVUserInfoResponse::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:FromCs.GetVUserInfoResponse.Version)
}

// required int32 VUserCount = 3;
inline bool GetVUserInfoResponse::has_vusercount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetVUserInfoResponse::set_has_vusercount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetVUserInfoResponse::clear_has_vusercount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetVUserInfoResponse::clear_vusercount() {
  vusercount_ = 0;
  clear_has_vusercount();
}
inline ::google::protobuf::int32 GetVUserInfoResponse::vusercount() const {
  // @@protoc_insertion_point(field_get:FromCs.GetVUserInfoResponse.VUserCount)
  return vusercount_;
}
inline void GetVUserInfoResponse::set_vusercount(::google::protobuf::int32 value) {
  set_has_vusercount();
  vusercount_ = value;
  // @@protoc_insertion_point(field_set:FromCs.GetVUserInfoResponse.VUserCount)
}

// repeated .FromCs.VUserInfo VUserList = 4;
inline int GetVUserInfoResponse::vuserlist_size() const {
  return vuserlist_.size();
}
inline void GetVUserInfoResponse::clear_vuserlist() {
  vuserlist_.Clear();
}
inline const ::FromCs::VUserInfo& GetVUserInfoResponse::vuserlist(int index) const {
  // @@protoc_insertion_point(field_get:FromCs.GetVUserInfoResponse.VUserList)
  return vuserlist_.Get(index);
}
inline ::FromCs::VUserInfo* GetVUserInfoResponse::mutable_vuserlist(int index) {
  // @@protoc_insertion_point(field_mutable:FromCs.GetVUserInfoResponse.VUserList)
  return vuserlist_.Mutable(index);
}
inline ::FromCs::VUserInfo* GetVUserInfoResponse::add_vuserlist() {
  // @@protoc_insertion_point(field_add:FromCs.GetVUserInfoResponse.VUserList)
  return vuserlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::FromCs::VUserInfo >*
GetVUserInfoResponse::mutable_vuserlist() {
  // @@protoc_insertion_point(field_mutable_list:FromCs.GetVUserInfoResponse.VUserList)
  return &vuserlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::FromCs::VUserInfo >&
GetVUserInfoResponse::vuserlist() const {
  // @@protoc_insertion_point(field_list:FromCs.GetVUserInfoResponse.VUserList)
  return vuserlist_;
}

// -------------------------------------------------------------------

// ClickCommandRequest

// required .FromCs.BaseRequest base = 1;
inline bool ClickCommandRequest::has_base() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClickCommandRequest::set_has_base() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClickCommandRequest::clear_has_base() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClickCommandRequest::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseRequest::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseRequest& ClickCommandRequest::base() const {
  // @@protoc_insertion_point(field_get:FromCs.ClickCommandRequest.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseRequest::internal_default_instance();
}
inline ::FromCs::BaseRequest* ClickCommandRequest::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.ClickCommandRequest.base)
  return base_;
}
inline ::FromCs::BaseRequest* ClickCommandRequest::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.ClickCommandRequest.base)
  clear_has_base();
  ::FromCs::BaseRequest* temp = base_;
  base_ = NULL;
  return temp;
}
inline void ClickCommandRequest::set_allocated_base(::FromCs::BaseRequest* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.ClickCommandRequest.base)
}

// required int32 ClickType = 2;
inline bool ClickCommandRequest::has_clicktype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClickCommandRequest::set_has_clicktype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ClickCommandRequest::clear_has_clicktype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ClickCommandRequest::clear_clicktype() {
  clicktype_ = 0;
  clear_has_clicktype();
}
inline ::google::protobuf::int32 ClickCommandRequest::clicktype() const {
  // @@protoc_insertion_point(field_get:FromCs.ClickCommandRequest.ClickType)
  return clicktype_;
}
inline void ClickCommandRequest::set_clicktype(::google::protobuf::int32 value) {
  set_has_clicktype();
  clicktype_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ClickCommandRequest.ClickType)
}

// optional string ClickInfo = 3;
inline bool ClickCommandRequest::has_clickinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClickCommandRequest::set_has_clickinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClickCommandRequest::clear_has_clickinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClickCommandRequest::clear_clickinfo() {
  clickinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clickinfo();
}
inline const ::std::string& ClickCommandRequest::clickinfo() const {
  // @@protoc_insertion_point(field_get:FromCs.ClickCommandRequest.ClickInfo)
  return clickinfo_.GetNoArena();
}
inline void ClickCommandRequest::set_clickinfo(const ::std::string& value) {
  set_has_clickinfo();
  clickinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ClickCommandRequest.ClickInfo)
}
#if LANG_CXX11
inline void ClickCommandRequest::set_clickinfo(::std::string&& value) {
  set_has_clickinfo();
  clickinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ClickCommandRequest.ClickInfo)
}
#endif
inline void ClickCommandRequest::set_clickinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clickinfo();
  clickinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ClickCommandRequest.ClickInfo)
}
inline void ClickCommandRequest::set_clickinfo(const char* value, size_t size) {
  set_has_clickinfo();
  clickinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ClickCommandRequest.ClickInfo)
}
inline ::std::string* ClickCommandRequest::mutable_clickinfo() {
  set_has_clickinfo();
  // @@protoc_insertion_point(field_mutable:FromCs.ClickCommandRequest.ClickInfo)
  return clickinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClickCommandRequest::release_clickinfo() {
  // @@protoc_insertion_point(field_release:FromCs.ClickCommandRequest.ClickInfo)
  clear_has_clickinfo();
  return clickinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClickCommandRequest::set_allocated_clickinfo(::std::string* clickinfo) {
  if (clickinfo != NULL) {
    set_has_clickinfo();
  } else {
    clear_has_clickinfo();
  }
  clickinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clickinfo);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ClickCommandRequest.ClickInfo)
}

// optional string BizUserName = 4;
inline bool ClickCommandRequest::has_bizusername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClickCommandRequest::set_has_bizusername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClickCommandRequest::clear_has_bizusername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClickCommandRequest::clear_bizusername() {
  bizusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bizusername();
}
inline const ::std::string& ClickCommandRequest::bizusername() const {
  // @@protoc_insertion_point(field_get:FromCs.ClickCommandRequest.BizUserName)
  return bizusername_.GetNoArena();
}
inline void ClickCommandRequest::set_bizusername(const ::std::string& value) {
  set_has_bizusername();
  bizusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ClickCommandRequest.BizUserName)
}
#if LANG_CXX11
inline void ClickCommandRequest::set_bizusername(::std::string&& value) {
  set_has_bizusername();
  bizusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ClickCommandRequest.BizUserName)
}
#endif
inline void ClickCommandRequest::set_bizusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bizusername();
  bizusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ClickCommandRequest.BizUserName)
}
inline void ClickCommandRequest::set_bizusername(const char* value, size_t size) {
  set_has_bizusername();
  bizusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ClickCommandRequest.BizUserName)
}
inline ::std::string* ClickCommandRequest::mutable_bizusername() {
  set_has_bizusername();
  // @@protoc_insertion_point(field_mutable:FromCs.ClickCommandRequest.BizUserName)
  return bizusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClickCommandRequest::release_bizusername() {
  // @@protoc_insertion_point(field_release:FromCs.ClickCommandRequest.BizUserName)
  clear_has_bizusername();
  return bizusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClickCommandRequest::set_allocated_bizusername(::std::string* bizusername) {
  if (bizusername != NULL) {
    set_has_bizusername();
  } else {
    clear_has_bizusername();
  }
  bizusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bizusername);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ClickCommandRequest.BizUserName)
}

// -------------------------------------------------------------------

// ClickCommandResponse

// required .FromCs.BaseResponse base = 1;
inline bool ClickCommandResponse::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClickCommandResponse::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClickCommandResponse::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClickCommandResponse::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseResponse::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseResponse& ClickCommandResponse::base() const {
  // @@protoc_insertion_point(field_get:FromCs.ClickCommandResponse.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseResponse::internal_default_instance();
}
inline ::FromCs::BaseResponse* ClickCommandResponse::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.ClickCommandResponse.base)
  return base_;
}
inline ::FromCs::BaseResponse* ClickCommandResponse::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.ClickCommandResponse.base)
  clear_has_base();
  ::FromCs::BaseResponse* temp = base_;
  base_ = NULL;
  return temp;
}
inline void ClickCommandResponse::set_allocated_base(::FromCs::BaseResponse* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.ClickCommandResponse.base)
}

// -------------------------------------------------------------------

// BindopMobileForRegRequest

// required .FromCs.BaseRequest base = 1;
inline bool BindopMobileForRegRequest::has_base() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BindopMobileForRegRequest::set_has_base() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BindopMobileForRegRequest::clear_has_base() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BindopMobileForRegRequest::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseRequest::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseRequest& BindopMobileForRegRequest::base() const {
  // @@protoc_insertion_point(field_get:FromCs.BindopMobileForRegRequest.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseRequest::internal_default_instance();
}
inline ::FromCs::BaseRequest* BindopMobileForRegRequest::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.BindopMobileForRegRequest.base)
  return base_;
}
inline ::FromCs::BaseRequest* BindopMobileForRegRequest::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.BindopMobileForRegRequest.base)
  clear_has_base();
  ::FromCs::BaseRequest* temp = base_;
  base_ = NULL;
  return temp;
}
inline void BindopMobileForRegRequest::set_allocated_base(::FromCs::BaseRequest* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.BindopMobileForRegRequest.base)
}

// optional string UserName = 2;
inline bool BindopMobileForRegRequest::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BindopMobileForRegRequest::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BindopMobileForRegRequest::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BindopMobileForRegRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& BindopMobileForRegRequest::username() const {
  // @@protoc_insertion_point(field_get:FromCs.BindopMobileForRegRequest.UserName)
  return username_.GetNoArena();
}
inline void BindopMobileForRegRequest::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.BindopMobileForRegRequest.UserName)
}
#if LANG_CXX11
inline void BindopMobileForRegRequest::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.BindopMobileForRegRequest.UserName)
}
#endif
inline void BindopMobileForRegRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.BindopMobileForRegRequest.UserName)
}
inline void BindopMobileForRegRequest::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.BindopMobileForRegRequest.UserName)
}
inline ::std::string* BindopMobileForRegRequest::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:FromCs.BindopMobileForRegRequest.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BindopMobileForRegRequest::release_username() {
  // @@protoc_insertion_point(field_release:FromCs.BindopMobileForRegRequest.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BindopMobileForRegRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:FromCs.BindopMobileForRegRequest.UserName)
}

// optional string Mobile = 3;
inline bool BindopMobileForRegRequest::has_mobile() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BindopMobileForRegRequest::set_has_mobile() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BindopMobileForRegRequest::clear_has_mobile() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BindopMobileForRegRequest::clear_mobile() {
  mobile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mobile();
}
inline const ::std::string& BindopMobileForRegRequest::mobile() const {
  // @@protoc_insertion_point(field_get:FromCs.BindopMobileForRegRequest.Mobile)
  return mobile_.GetNoArena();
}
inline void BindopMobileForRegRequest::set_mobile(const ::std::string& value) {
  set_has_mobile();
  mobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.BindopMobileForRegRequest.Mobile)
}
#if LANG_CXX11
inline void BindopMobileForRegRequest::set_mobile(::std::string&& value) {
  set_has_mobile();
  mobile_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.BindopMobileForRegRequest.Mobile)
}
#endif
inline void BindopMobileForRegRequest::set_mobile(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mobile();
  mobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.BindopMobileForRegRequest.Mobile)
}
inline void BindopMobileForRegRequest::set_mobile(const char* value, size_t size) {
  set_has_mobile();
  mobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.BindopMobileForRegRequest.Mobile)
}
inline ::std::string* BindopMobileForRegRequest::mutable_mobile() {
  set_has_mobile();
  // @@protoc_insertion_point(field_mutable:FromCs.BindopMobileForRegRequest.Mobile)
  return mobile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BindopMobileForRegRequest::release_mobile() {
  // @@protoc_insertion_point(field_release:FromCs.BindopMobileForRegRequest.Mobile)
  clear_has_mobile();
  return mobile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BindopMobileForRegRequest::set_allocated_mobile(::std::string* mobile) {
  if (mobile != NULL) {
    set_has_mobile();
  } else {
    clear_has_mobile();
  }
  mobile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mobile);
  // @@protoc_insertion_point(field_set_allocated:FromCs.BindopMobileForRegRequest.Mobile)
}

// required int32 Opcode = 4;
inline bool BindopMobileForRegRequest::has_opcode() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BindopMobileForRegRequest::set_has_opcode() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BindopMobileForRegRequest::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BindopMobileForRegRequest::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
inline ::google::protobuf::int32 BindopMobileForRegRequest::opcode() const {
  // @@protoc_insertion_point(field_get:FromCs.BindopMobileForRegRequest.Opcode)
  return opcode_;
}
inline void BindopMobileForRegRequest::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
  // @@protoc_insertion_point(field_set:FromCs.BindopMobileForRegRequest.Opcode)
}

// optional string Verifycode = 5;
inline bool BindopMobileForRegRequest::has_verifycode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BindopMobileForRegRequest::set_has_verifycode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BindopMobileForRegRequest::clear_has_verifycode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BindopMobileForRegRequest::clear_verifycode() {
  verifycode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_verifycode();
}
inline const ::std::string& BindopMobileForRegRequest::verifycode() const {
  // @@protoc_insertion_point(field_get:FromCs.BindopMobileForRegRequest.Verifycode)
  return verifycode_.GetNoArena();
}
inline void BindopMobileForRegRequest::set_verifycode(const ::std::string& value) {
  set_has_verifycode();
  verifycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.BindopMobileForRegRequest.Verifycode)
}
#if LANG_CXX11
inline void BindopMobileForRegRequest::set_verifycode(::std::string&& value) {
  set_has_verifycode();
  verifycode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.BindopMobileForRegRequest.Verifycode)
}
#endif
inline void BindopMobileForRegRequest::set_verifycode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_verifycode();
  verifycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.BindopMobileForRegRequest.Verifycode)
}
inline void BindopMobileForRegRequest::set_verifycode(const char* value, size_t size) {
  set_has_verifycode();
  verifycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.BindopMobileForRegRequest.Verifycode)
}
inline ::std::string* BindopMobileForRegRequest::mutable_verifycode() {
  set_has_verifycode();
  // @@protoc_insertion_point(field_mutable:FromCs.BindopMobileForRegRequest.Verifycode)
  return verifycode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BindopMobileForRegRequest::release_verifycode() {
  // @@protoc_insertion_point(field_release:FromCs.BindopMobileForRegRequest.Verifycode)
  clear_has_verifycode();
  return verifycode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BindopMobileForRegRequest::set_allocated_verifycode(::std::string* verifycode) {
  if (verifycode != NULL) {
    set_has_verifycode();
  } else {
    clear_has_verifycode();
  }
  verifycode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verifycode);
  // @@protoc_insertion_point(field_set_allocated:FromCs.BindopMobileForRegRequest.Verifycode)
}

// optional int32 DialFlag = 6;
inline bool BindopMobileForRegRequest::has_dialflag() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BindopMobileForRegRequest::set_has_dialflag() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BindopMobileForRegRequest::clear_has_dialflag() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BindopMobileForRegRequest::clear_dialflag() {
  dialflag_ = 0;
  clear_has_dialflag();
}
inline ::google::protobuf::int32 BindopMobileForRegRequest::dialflag() const {
  // @@protoc_insertion_point(field_get:FromCs.BindopMobileForRegRequest.DialFlag)
  return dialflag_;
}
inline void BindopMobileForRegRequest::set_dialflag(::google::protobuf::int32 value) {
  set_has_dialflag();
  dialflag_ = value;
  // @@protoc_insertion_point(field_set:FromCs.BindopMobileForRegRequest.DialFlag)
}

// optional string DialLang = 7;
inline bool BindopMobileForRegRequest::has_diallang() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BindopMobileForRegRequest::set_has_diallang() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BindopMobileForRegRequest::clear_has_diallang() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BindopMobileForRegRequest::clear_diallang() {
  diallang_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_diallang();
}
inline const ::std::string& BindopMobileForRegRequest::diallang() const {
  // @@protoc_insertion_point(field_get:FromCs.BindopMobileForRegRequest.DialLang)
  return diallang_.GetNoArena();
}
inline void BindopMobileForRegRequest::set_diallang(const ::std::string& value) {
  set_has_diallang();
  diallang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.BindopMobileForRegRequest.DialLang)
}
#if LANG_CXX11
inline void BindopMobileForRegRequest::set_diallang(::std::string&& value) {
  set_has_diallang();
  diallang_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.BindopMobileForRegRequest.DialLang)
}
#endif
inline void BindopMobileForRegRequest::set_diallang(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_diallang();
  diallang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.BindopMobileForRegRequest.DialLang)
}
inline void BindopMobileForRegRequest::set_diallang(const char* value, size_t size) {
  set_has_diallang();
  diallang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.BindopMobileForRegRequest.DialLang)
}
inline ::std::string* BindopMobileForRegRequest::mutable_diallang() {
  set_has_diallang();
  // @@protoc_insertion_point(field_mutable:FromCs.BindopMobileForRegRequest.DialLang)
  return diallang_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BindopMobileForRegRequest::release_diallang() {
  // @@protoc_insertion_point(field_release:FromCs.BindopMobileForRegRequest.DialLang)
  clear_has_diallang();
  return diallang_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BindopMobileForRegRequest::set_allocated_diallang(::std::string* diallang) {
  if (diallang != NULL) {
    set_has_diallang();
  } else {
    clear_has_diallang();
  }
  diallang_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), diallang);
  // @@protoc_insertion_point(field_set_allocated:FromCs.BindopMobileForRegRequest.DialLang)
}

// optional string AuthTicket = 8;
inline bool BindopMobileForRegRequest::has_authticket() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BindopMobileForRegRequest::set_has_authticket() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BindopMobileForRegRequest::clear_has_authticket() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BindopMobileForRegRequest::clear_authticket() {
  authticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_authticket();
}
inline const ::std::string& BindopMobileForRegRequest::authticket() const {
  // @@protoc_insertion_point(field_get:FromCs.BindopMobileForRegRequest.AuthTicket)
  return authticket_.GetNoArena();
}
inline void BindopMobileForRegRequest::set_authticket(const ::std::string& value) {
  set_has_authticket();
  authticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.BindopMobileForRegRequest.AuthTicket)
}
#if LANG_CXX11
inline void BindopMobileForRegRequest::set_authticket(::std::string&& value) {
  set_has_authticket();
  authticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.BindopMobileForRegRequest.AuthTicket)
}
#endif
inline void BindopMobileForRegRequest::set_authticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_authticket();
  authticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.BindopMobileForRegRequest.AuthTicket)
}
inline void BindopMobileForRegRequest::set_authticket(const char* value, size_t size) {
  set_has_authticket();
  authticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.BindopMobileForRegRequest.AuthTicket)
}
inline ::std::string* BindopMobileForRegRequest::mutable_authticket() {
  set_has_authticket();
  // @@protoc_insertion_point(field_mutable:FromCs.BindopMobileForRegRequest.AuthTicket)
  return authticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BindopMobileForRegRequest::release_authticket() {
  // @@protoc_insertion_point(field_release:FromCs.BindopMobileForRegRequest.AuthTicket)
  clear_has_authticket();
  return authticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BindopMobileForRegRequest::set_allocated_authticket(::std::string* authticket) {
  if (authticket != NULL) {
    set_has_authticket();
  } else {
    clear_has_authticket();
  }
  authticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), authticket);
  // @@protoc_insertion_point(field_set_allocated:FromCs.BindopMobileForRegRequest.AuthTicket)
}

// optional int32 ForceReg = 9;
inline bool BindopMobileForRegRequest::has_forcereg() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BindopMobileForRegRequest::set_has_forcereg() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BindopMobileForRegRequest::clear_has_forcereg() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BindopMobileForRegRequest::clear_forcereg() {
  forcereg_ = 0;
  clear_has_forcereg();
}
inline ::google::protobuf::int32 BindopMobileForRegRequest::forcereg() const {
  // @@protoc_insertion_point(field_get:FromCs.BindopMobileForRegRequest.ForceReg)
  return forcereg_;
}
inline void BindopMobileForRegRequest::set_forcereg(::google::protobuf::int32 value) {
  set_has_forcereg();
  forcereg_ = value;
  // @@protoc_insertion_point(field_set:FromCs.BindopMobileForRegRequest.ForceReg)
}

// optional string SafeDeviceName = 10;
inline bool BindopMobileForRegRequest::has_safedevicename() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BindopMobileForRegRequest::set_has_safedevicename() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BindopMobileForRegRequest::clear_has_safedevicename() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BindopMobileForRegRequest::clear_safedevicename() {
  safedevicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_safedevicename();
}
inline const ::std::string& BindopMobileForRegRequest::safedevicename() const {
  // @@protoc_insertion_point(field_get:FromCs.BindopMobileForRegRequest.SafeDeviceName)
  return safedevicename_.GetNoArena();
}
inline void BindopMobileForRegRequest::set_safedevicename(const ::std::string& value) {
  set_has_safedevicename();
  safedevicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.BindopMobileForRegRequest.SafeDeviceName)
}
#if LANG_CXX11
inline void BindopMobileForRegRequest::set_safedevicename(::std::string&& value) {
  set_has_safedevicename();
  safedevicename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.BindopMobileForRegRequest.SafeDeviceName)
}
#endif
inline void BindopMobileForRegRequest::set_safedevicename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_safedevicename();
  safedevicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.BindopMobileForRegRequest.SafeDeviceName)
}
inline void BindopMobileForRegRequest::set_safedevicename(const char* value, size_t size) {
  set_has_safedevicename();
  safedevicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.BindopMobileForRegRequest.SafeDeviceName)
}
inline ::std::string* BindopMobileForRegRequest::mutable_safedevicename() {
  set_has_safedevicename();
  // @@protoc_insertion_point(field_mutable:FromCs.BindopMobileForRegRequest.SafeDeviceName)
  return safedevicename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BindopMobileForRegRequest::release_safedevicename() {
  // @@protoc_insertion_point(field_release:FromCs.BindopMobileForRegRequest.SafeDeviceName)
  clear_has_safedevicename();
  return safedevicename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BindopMobileForRegRequest::set_allocated_safedevicename(::std::string* safedevicename) {
  if (safedevicename != NULL) {
    set_has_safedevicename();
  } else {
    clear_has_safedevicename();
  }
  safedevicename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), safedevicename);
  // @@protoc_insertion_point(field_set_allocated:FromCs.BindopMobileForRegRequest.SafeDeviceName)
}

// optional string SafeDeviceType = 11;
inline bool BindopMobileForRegRequest::has_safedevicetype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BindopMobileForRegRequest::set_has_safedevicetype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BindopMobileForRegRequest::clear_has_safedevicetype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BindopMobileForRegRequest::clear_safedevicetype() {
  safedevicetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_safedevicetype();
}
inline const ::std::string& BindopMobileForRegRequest::safedevicetype() const {
  // @@protoc_insertion_point(field_get:FromCs.BindopMobileForRegRequest.SafeDeviceType)
  return safedevicetype_.GetNoArena();
}
inline void BindopMobileForRegRequest::set_safedevicetype(const ::std::string& value) {
  set_has_safedevicetype();
  safedevicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.BindopMobileForRegRequest.SafeDeviceType)
}
#if LANG_CXX11
inline void BindopMobileForRegRequest::set_safedevicetype(::std::string&& value) {
  set_has_safedevicetype();
  safedevicetype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.BindopMobileForRegRequest.SafeDeviceType)
}
#endif
inline void BindopMobileForRegRequest::set_safedevicetype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_safedevicetype();
  safedevicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.BindopMobileForRegRequest.SafeDeviceType)
}
inline void BindopMobileForRegRequest::set_safedevicetype(const char* value, size_t size) {
  set_has_safedevicetype();
  safedevicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.BindopMobileForRegRequest.SafeDeviceType)
}
inline ::std::string* BindopMobileForRegRequest::mutable_safedevicetype() {
  set_has_safedevicetype();
  // @@protoc_insertion_point(field_mutable:FromCs.BindopMobileForRegRequest.SafeDeviceType)
  return safedevicetype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BindopMobileForRegRequest::release_safedevicetype() {
  // @@protoc_insertion_point(field_release:FromCs.BindopMobileForRegRequest.SafeDeviceType)
  clear_has_safedevicetype();
  return safedevicetype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BindopMobileForRegRequest::set_allocated_safedevicetype(::std::string* safedevicetype) {
  if (safedevicetype != NULL) {
    set_has_safedevicetype();
  } else {
    clear_has_safedevicetype();
  }
  safedevicetype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), safedevicetype);
  // @@protoc_insertion_point(field_set_allocated:FromCs.BindopMobileForRegRequest.SafeDeviceType)
}

// optional .FromCs.sKBuiltinBufferT RandomEncryKey = 12;
inline bool BindopMobileForRegRequest::has_randomencrykey() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BindopMobileForRegRequest::set_has_randomencrykey() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BindopMobileForRegRequest::clear_has_randomencrykey() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BindopMobileForRegRequest::clear_randomencrykey() {
  if (randomencrykey_ != NULL) randomencrykey_->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_randomencrykey();
}
inline const ::FromCs::sKBuiltinBufferT& BindopMobileForRegRequest::randomencrykey() const {
  // @@protoc_insertion_point(field_get:FromCs.BindopMobileForRegRequest.RandomEncryKey)
  return randomencrykey_ != NULL ? *randomencrykey_
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* BindopMobileForRegRequest::mutable_randomencrykey() {
  set_has_randomencrykey();
  if (randomencrykey_ == NULL) {
    randomencrykey_ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.BindopMobileForRegRequest.RandomEncryKey)
  return randomencrykey_;
}
inline ::FromCs::sKBuiltinBufferT* BindopMobileForRegRequest::release_randomencrykey() {
  // @@protoc_insertion_point(field_release:FromCs.BindopMobileForRegRequest.RandomEncryKey)
  clear_has_randomencrykey();
  ::FromCs::sKBuiltinBufferT* temp = randomencrykey_;
  randomencrykey_ = NULL;
  return temp;
}
inline void BindopMobileForRegRequest::set_allocated_randomencrykey(::FromCs::sKBuiltinBufferT* randomencrykey) {
  delete randomencrykey_;
  randomencrykey_ = randomencrykey;
  if (randomencrykey) {
    set_has_randomencrykey();
  } else {
    clear_has_randomencrykey();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.BindopMobileForRegRequest.RandomEncryKey)
}

// optional string Language = 13;
inline bool BindopMobileForRegRequest::has_language() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BindopMobileForRegRequest::set_has_language() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BindopMobileForRegRequest::clear_has_language() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BindopMobileForRegRequest::clear_language() {
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_language();
}
inline const ::std::string& BindopMobileForRegRequest::language() const {
  // @@protoc_insertion_point(field_get:FromCs.BindopMobileForRegRequest.Language)
  return language_.GetNoArena();
}
inline void BindopMobileForRegRequest::set_language(const ::std::string& value) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.BindopMobileForRegRequest.Language)
}
#if LANG_CXX11
inline void BindopMobileForRegRequest::set_language(::std::string&& value) {
  set_has_language();
  language_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.BindopMobileForRegRequest.Language)
}
#endif
inline void BindopMobileForRegRequest::set_language(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.BindopMobileForRegRequest.Language)
}
inline void BindopMobileForRegRequest::set_language(const char* value, size_t size) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.BindopMobileForRegRequest.Language)
}
inline ::std::string* BindopMobileForRegRequest::mutable_language() {
  set_has_language();
  // @@protoc_insertion_point(field_mutable:FromCs.BindopMobileForRegRequest.Language)
  return language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BindopMobileForRegRequest::release_language() {
  // @@protoc_insertion_point(field_release:FromCs.BindopMobileForRegRequest.Language)
  clear_has_language();
  return language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BindopMobileForRegRequest::set_allocated_language(::std::string* language) {
  if (language != NULL) {
    set_has_language();
  } else {
    clear_has_language();
  }
  language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:FromCs.BindopMobileForRegRequest.Language)
}

// optional int32 int14 = 14;
inline bool BindopMobileForRegRequest::has_int14() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void BindopMobileForRegRequest::set_has_int14() {
  _has_bits_[0] |= 0x00004000u;
}
inline void BindopMobileForRegRequest::clear_has_int14() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void BindopMobileForRegRequest::clear_int14() {
  int14_ = 0;
  clear_has_int14();
}
inline ::google::protobuf::int32 BindopMobileForRegRequest::int14() const {
  // @@protoc_insertion_point(field_get:FromCs.BindopMobileForRegRequest.int14)
  return int14_;
}
inline void BindopMobileForRegRequest::set_int14(::google::protobuf::int32 value) {
  set_has_int14();
  int14_ = value;
  // @@protoc_insertion_point(field_set:FromCs.BindopMobileForRegRequest.int14)
}

// optional int32 int15 = 15;
inline bool BindopMobileForRegRequest::has_int15() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void BindopMobileForRegRequest::set_has_int15() {
  _has_bits_[0] |= 0x00008000u;
}
inline void BindopMobileForRegRequest::clear_has_int15() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void BindopMobileForRegRequest::clear_int15() {
  int15_ = 0;
  clear_has_int15();
}
inline ::google::protobuf::int32 BindopMobileForRegRequest::int15() const {
  // @@protoc_insertion_point(field_get:FromCs.BindopMobileForRegRequest.int15)
  return int15_;
}
inline void BindopMobileForRegRequest::set_int15(::google::protobuf::int32 value) {
  set_has_int15();
  int15_ = value;
  // @@protoc_insertion_point(field_set:FromCs.BindopMobileForRegRequest.int15)
}

// optional string clientSeqId = 16;
inline bool BindopMobileForRegRequest::has_clientseqid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BindopMobileForRegRequest::set_has_clientseqid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BindopMobileForRegRequest::clear_has_clientseqid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BindopMobileForRegRequest::clear_clientseqid() {
  clientseqid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientseqid();
}
inline const ::std::string& BindopMobileForRegRequest::clientseqid() const {
  // @@protoc_insertion_point(field_get:FromCs.BindopMobileForRegRequest.clientSeqId)
  return clientseqid_.GetNoArena();
}
inline void BindopMobileForRegRequest::set_clientseqid(const ::std::string& value) {
  set_has_clientseqid();
  clientseqid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.BindopMobileForRegRequest.clientSeqId)
}
#if LANG_CXX11
inline void BindopMobileForRegRequest::set_clientseqid(::std::string&& value) {
  set_has_clientseqid();
  clientseqid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.BindopMobileForRegRequest.clientSeqId)
}
#endif
inline void BindopMobileForRegRequest::set_clientseqid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientseqid();
  clientseqid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.BindopMobileForRegRequest.clientSeqId)
}
inline void BindopMobileForRegRequest::set_clientseqid(const char* value, size_t size) {
  set_has_clientseqid();
  clientseqid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.BindopMobileForRegRequest.clientSeqId)
}
inline ::std::string* BindopMobileForRegRequest::mutable_clientseqid() {
  set_has_clientseqid();
  // @@protoc_insertion_point(field_mutable:FromCs.BindopMobileForRegRequest.clientSeqId)
  return clientseqid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BindopMobileForRegRequest::release_clientseqid() {
  // @@protoc_insertion_point(field_release:FromCs.BindopMobileForRegRequest.clientSeqId)
  clear_has_clientseqid();
  return clientseqid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BindopMobileForRegRequest::set_allocated_clientseqid(::std::string* clientseqid) {
  if (clientseqid != NULL) {
    set_has_clientseqid();
  } else {
    clear_has_clientseqid();
  }
  clientseqid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientseqid);
  // @@protoc_insertion_point(field_set_allocated:FromCs.BindopMobileForRegRequest.clientSeqId)
}

// -------------------------------------------------------------------

// BindopMobileForRegResponse

// required .FromCs.BaseResponse base = 1;
inline bool BindopMobileForRegResponse::has_base() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BindopMobileForRegResponse::set_has_base() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BindopMobileForRegResponse::clear_has_base() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BindopMobileForRegResponse::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseResponse::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseResponse& BindopMobileForRegResponse::base() const {
  // @@protoc_insertion_point(field_get:FromCs.BindopMobileForRegResponse.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseResponse::internal_default_instance();
}
inline ::FromCs::BaseResponse* BindopMobileForRegResponse::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.BindopMobileForRegResponse.base)
  return base_;
}
inline ::FromCs::BaseResponse* BindopMobileForRegResponse::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.BindopMobileForRegResponse.base)
  clear_has_base();
  ::FromCs::BaseResponse* temp = base_;
  base_ = NULL;
  return temp;
}
inline void BindopMobileForRegResponse::set_allocated_base(::FromCs::BaseResponse* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.BindopMobileForRegResponse.base)
}

// optional string ticket = 2;
inline bool BindopMobileForRegResponse::has_ticket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BindopMobileForRegResponse::set_has_ticket() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BindopMobileForRegResponse::clear_has_ticket() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BindopMobileForRegResponse::clear_ticket() {
  ticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ticket();
}
inline const ::std::string& BindopMobileForRegResponse::ticket() const {
  // @@protoc_insertion_point(field_get:FromCs.BindopMobileForRegResponse.ticket)
  return ticket_.GetNoArena();
}
inline void BindopMobileForRegResponse::set_ticket(const ::std::string& value) {
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.BindopMobileForRegResponse.ticket)
}
#if LANG_CXX11
inline void BindopMobileForRegResponse::set_ticket(::std::string&& value) {
  set_has_ticket();
  ticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.BindopMobileForRegResponse.ticket)
}
#endif
inline void BindopMobileForRegResponse::set_ticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.BindopMobileForRegResponse.ticket)
}
inline void BindopMobileForRegResponse::set_ticket(const char* value, size_t size) {
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.BindopMobileForRegResponse.ticket)
}
inline ::std::string* BindopMobileForRegResponse::mutable_ticket() {
  set_has_ticket();
  // @@protoc_insertion_point(field_mutable:FromCs.BindopMobileForRegResponse.ticket)
  return ticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BindopMobileForRegResponse::release_ticket() {
  // @@protoc_insertion_point(field_release:FromCs.BindopMobileForRegResponse.ticket)
  clear_has_ticket();
  return ticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BindopMobileForRegResponse::set_allocated_ticket(::std::string* ticket) {
  if (ticket != NULL) {
    set_has_ticket();
  } else {
    clear_has_ticket();
  }
  ticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ticket);
  // @@protoc_insertion_point(field_set_allocated:FromCs.BindopMobileForRegResponse.ticket)
}

// optional string SmsNo = 3;
inline bool BindopMobileForRegResponse::has_smsno() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BindopMobileForRegResponse::set_has_smsno() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BindopMobileForRegResponse::clear_has_smsno() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BindopMobileForRegResponse::clear_smsno() {
  smsno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_smsno();
}
inline const ::std::string& BindopMobileForRegResponse::smsno() const {
  // @@protoc_insertion_point(field_get:FromCs.BindopMobileForRegResponse.SmsNo)
  return smsno_.GetNoArena();
}
inline void BindopMobileForRegResponse::set_smsno(const ::std::string& value) {
  set_has_smsno();
  smsno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.BindopMobileForRegResponse.SmsNo)
}
#if LANG_CXX11
inline void BindopMobileForRegResponse::set_smsno(::std::string&& value) {
  set_has_smsno();
  smsno_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.BindopMobileForRegResponse.SmsNo)
}
#endif
inline void BindopMobileForRegResponse::set_smsno(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_smsno();
  smsno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.BindopMobileForRegResponse.SmsNo)
}
inline void BindopMobileForRegResponse::set_smsno(const char* value, size_t size) {
  set_has_smsno();
  smsno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.BindopMobileForRegResponse.SmsNo)
}
inline ::std::string* BindopMobileForRegResponse::mutable_smsno() {
  set_has_smsno();
  // @@protoc_insertion_point(field_mutable:FromCs.BindopMobileForRegResponse.SmsNo)
  return smsno_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BindopMobileForRegResponse::release_smsno() {
  // @@protoc_insertion_point(field_release:FromCs.BindopMobileForRegResponse.SmsNo)
  clear_has_smsno();
  return smsno_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BindopMobileForRegResponse::set_allocated_smsno(::std::string* smsno) {
  if (smsno != NULL) {
    set_has_smsno();
  } else {
    clear_has_smsno();
  }
  smsno_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsno);
  // @@protoc_insertion_point(field_set_allocated:FromCs.BindopMobileForRegResponse.SmsNo)
}

// optional int32 NeedSetPwd = 4;
inline bool BindopMobileForRegResponse::has_needsetpwd() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BindopMobileForRegResponse::set_has_needsetpwd() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BindopMobileForRegResponse::clear_has_needsetpwd() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BindopMobileForRegResponse::clear_needsetpwd() {
  needsetpwd_ = 0;
  clear_has_needsetpwd();
}
inline ::google::protobuf::int32 BindopMobileForRegResponse::needsetpwd() const {
  // @@protoc_insertion_point(field_get:FromCs.BindopMobileForRegResponse.NeedSetPwd)
  return needsetpwd_;
}
inline void BindopMobileForRegResponse::set_needsetpwd(::google::protobuf::int32 value) {
  set_has_needsetpwd();
  needsetpwd_ = value;
  // @@protoc_insertion_point(field_set:FromCs.BindopMobileForRegResponse.NeedSetPwd)
}

// optional string Pwd = 5;
inline bool BindopMobileForRegResponse::has_pwd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BindopMobileForRegResponse::set_has_pwd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BindopMobileForRegResponse::clear_has_pwd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BindopMobileForRegResponse::clear_pwd() {
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pwd();
}
inline const ::std::string& BindopMobileForRegResponse::pwd() const {
  // @@protoc_insertion_point(field_get:FromCs.BindopMobileForRegResponse.Pwd)
  return pwd_.GetNoArena();
}
inline void BindopMobileForRegResponse::set_pwd(const ::std::string& value) {
  set_has_pwd();
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.BindopMobileForRegResponse.Pwd)
}
#if LANG_CXX11
inline void BindopMobileForRegResponse::set_pwd(::std::string&& value) {
  set_has_pwd();
  pwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.BindopMobileForRegResponse.Pwd)
}
#endif
inline void BindopMobileForRegResponse::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pwd();
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.BindopMobileForRegResponse.Pwd)
}
inline void BindopMobileForRegResponse::set_pwd(const char* value, size_t size) {
  set_has_pwd();
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.BindopMobileForRegResponse.Pwd)
}
inline ::std::string* BindopMobileForRegResponse::mutable_pwd() {
  set_has_pwd();
  // @@protoc_insertion_point(field_mutable:FromCs.BindopMobileForRegResponse.Pwd)
  return pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BindopMobileForRegResponse::release_pwd() {
  // @@protoc_insertion_point(field_release:FromCs.BindopMobileForRegResponse.Pwd)
  clear_has_pwd();
  return pwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BindopMobileForRegResponse::set_allocated_pwd(::std::string* pwd) {
  if (pwd != NULL) {
    set_has_pwd();
  } else {
    clear_has_pwd();
  }
  pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd);
  // @@protoc_insertion_point(field_set_allocated:FromCs.BindopMobileForRegResponse.Pwd)
}

// optional string Username = 6;
inline bool BindopMobileForRegResponse::has_username() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BindopMobileForRegResponse::set_has_username() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BindopMobileForRegResponse::clear_has_username() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BindopMobileForRegResponse::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& BindopMobileForRegResponse::username() const {
  // @@protoc_insertion_point(field_get:FromCs.BindopMobileForRegResponse.Username)
  return username_.GetNoArena();
}
inline void BindopMobileForRegResponse::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.BindopMobileForRegResponse.Username)
}
#if LANG_CXX11
inline void BindopMobileForRegResponse::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.BindopMobileForRegResponse.Username)
}
#endif
inline void BindopMobileForRegResponse::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.BindopMobileForRegResponse.Username)
}
inline void BindopMobileForRegResponse::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.BindopMobileForRegResponse.Username)
}
inline ::std::string* BindopMobileForRegResponse::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:FromCs.BindopMobileForRegResponse.Username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BindopMobileForRegResponse::release_username() {
  // @@protoc_insertion_point(field_release:FromCs.BindopMobileForRegResponse.Username)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BindopMobileForRegResponse::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:FromCs.BindopMobileForRegResponse.Username)
}

// optional .FromCs.NewHostListType NewHostList = 7;
inline bool BindopMobileForRegResponse::has_newhostlist() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BindopMobileForRegResponse::set_has_newhostlist() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BindopMobileForRegResponse::clear_has_newhostlist() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BindopMobileForRegResponse::clear_newhostlist() {
  if (newhostlist_ != NULL) newhostlist_->::FromCs::NewHostListType::Clear();
  clear_has_newhostlist();
}
inline const ::FromCs::NewHostListType& BindopMobileForRegResponse::newhostlist() const {
  // @@protoc_insertion_point(field_get:FromCs.BindopMobileForRegResponse.NewHostList)
  return newhostlist_ != NULL ? *newhostlist_
                         : *::FromCs::NewHostListType::internal_default_instance();
}
inline ::FromCs::NewHostListType* BindopMobileForRegResponse::mutable_newhostlist() {
  set_has_newhostlist();
  if (newhostlist_ == NULL) {
    newhostlist_ = new ::FromCs::NewHostListType;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.BindopMobileForRegResponse.NewHostList)
  return newhostlist_;
}
inline ::FromCs::NewHostListType* BindopMobileForRegResponse::release_newhostlist() {
  // @@protoc_insertion_point(field_release:FromCs.BindopMobileForRegResponse.NewHostList)
  clear_has_newhostlist();
  ::FromCs::NewHostListType* temp = newhostlist_;
  newhostlist_ = NULL;
  return temp;
}
inline void BindopMobileForRegResponse::set_allocated_newhostlist(::FromCs::NewHostListType* newhostlist) {
  delete newhostlist_;
  newhostlist_ = newhostlist;
  if (newhostlist) {
    set_has_newhostlist();
  } else {
    clear_has_newhostlist();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.BindopMobileForRegResponse.NewHostList)
}

// optional .FromCs.iPList BuiltinIPList = 8;
inline bool BindopMobileForRegResponse::has_builtiniplist() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BindopMobileForRegResponse::set_has_builtiniplist() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BindopMobileForRegResponse::clear_has_builtiniplist() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BindopMobileForRegResponse::clear_builtiniplist() {
  if (builtiniplist_ != NULL) builtiniplist_->::FromCs::iPList::Clear();
  clear_has_builtiniplist();
}
inline const ::FromCs::iPList& BindopMobileForRegResponse::builtiniplist() const {
  // @@protoc_insertion_point(field_get:FromCs.BindopMobileForRegResponse.BuiltinIPList)
  return builtiniplist_ != NULL ? *builtiniplist_
                         : *::FromCs::iPList::internal_default_instance();
}
inline ::FromCs::iPList* BindopMobileForRegResponse::mutable_builtiniplist() {
  set_has_builtiniplist();
  if (builtiniplist_ == NULL) {
    builtiniplist_ = new ::FromCs::iPList;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.BindopMobileForRegResponse.BuiltinIPList)
  return builtiniplist_;
}
inline ::FromCs::iPList* BindopMobileForRegResponse::release_builtiniplist() {
  // @@protoc_insertion_point(field_release:FromCs.BindopMobileForRegResponse.BuiltinIPList)
  clear_has_builtiniplist();
  ::FromCs::iPList* temp = builtiniplist_;
  builtiniplist_ = NULL;
  return temp;
}
inline void BindopMobileForRegResponse::set_allocated_builtiniplist(::FromCs::iPList* builtiniplist) {
  delete builtiniplist_;
  builtiniplist_ = builtiniplist;
  if (builtiniplist) {
    set_has_builtiniplist();
  } else {
    clear_has_builtiniplist();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.BindopMobileForRegResponse.BuiltinIPList)
}

// optional .FromCs.NetworkControlType NetworkControl = 9;
inline bool BindopMobileForRegResponse::has_networkcontrol() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BindopMobileForRegResponse::set_has_networkcontrol() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BindopMobileForRegResponse::clear_has_networkcontrol() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BindopMobileForRegResponse::clear_networkcontrol() {
  if (networkcontrol_ != NULL) networkcontrol_->::FromCs::NetworkControlType::Clear();
  clear_has_networkcontrol();
}
inline const ::FromCs::NetworkControlType& BindopMobileForRegResponse::networkcontrol() const {
  // @@protoc_insertion_point(field_get:FromCs.BindopMobileForRegResponse.NetworkControl)
  return networkcontrol_ != NULL ? *networkcontrol_
                         : *::FromCs::NetworkControlType::internal_default_instance();
}
inline ::FromCs::NetworkControlType* BindopMobileForRegResponse::mutable_networkcontrol() {
  set_has_networkcontrol();
  if (networkcontrol_ == NULL) {
    networkcontrol_ = new ::FromCs::NetworkControlType;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.BindopMobileForRegResponse.NetworkControl)
  return networkcontrol_;
}
inline ::FromCs::NetworkControlType* BindopMobileForRegResponse::release_networkcontrol() {
  // @@protoc_insertion_point(field_release:FromCs.BindopMobileForRegResponse.NetworkControl)
  clear_has_networkcontrol();
  ::FromCs::NetworkControlType* temp = networkcontrol_;
  networkcontrol_ = NULL;
  return temp;
}
inline void BindopMobileForRegResponse::set_allocated_networkcontrol(::FromCs::NetworkControlType* networkcontrol) {
  delete networkcontrol_;
  networkcontrol_ = networkcontrol;
  if (networkcontrol) {
    set_has_networkcontrol();
  } else {
    clear_has_networkcontrol();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.BindopMobileForRegResponse.NetworkControl)
}

// optional string AuthTicket = 10;
inline bool BindopMobileForRegResponse::has_authticket() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BindopMobileForRegResponse::set_has_authticket() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BindopMobileForRegResponse::clear_has_authticket() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BindopMobileForRegResponse::clear_authticket() {
  authticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_authticket();
}
inline const ::std::string& BindopMobileForRegResponse::authticket() const {
  // @@protoc_insertion_point(field_get:FromCs.BindopMobileForRegResponse.AuthTicket)
  return authticket_.GetNoArena();
}
inline void BindopMobileForRegResponse::set_authticket(const ::std::string& value) {
  set_has_authticket();
  authticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.BindopMobileForRegResponse.AuthTicket)
}
#if LANG_CXX11
inline void BindopMobileForRegResponse::set_authticket(::std::string&& value) {
  set_has_authticket();
  authticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.BindopMobileForRegResponse.AuthTicket)
}
#endif
inline void BindopMobileForRegResponse::set_authticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_authticket();
  authticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.BindopMobileForRegResponse.AuthTicket)
}
inline void BindopMobileForRegResponse::set_authticket(const char* value, size_t size) {
  set_has_authticket();
  authticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.BindopMobileForRegResponse.AuthTicket)
}
inline ::std::string* BindopMobileForRegResponse::mutable_authticket() {
  set_has_authticket();
  // @@protoc_insertion_point(field_mutable:FromCs.BindopMobileForRegResponse.AuthTicket)
  return authticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BindopMobileForRegResponse::release_authticket() {
  // @@protoc_insertion_point(field_release:FromCs.BindopMobileForRegResponse.AuthTicket)
  clear_has_authticket();
  return authticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BindopMobileForRegResponse::set_allocated_authticket(::std::string* authticket) {
  if (authticket != NULL) {
    set_has_authticket();
  } else {
    clear_has_authticket();
  }
  authticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), authticket);
  // @@protoc_insertion_point(field_set_allocated:FromCs.BindopMobileForRegResponse.AuthTicket)
}

// optional int32 SafeDevice = 11;
inline bool BindopMobileForRegResponse::has_safedevice() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BindopMobileForRegResponse::set_has_safedevice() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BindopMobileForRegResponse::clear_has_safedevice() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BindopMobileForRegResponse::clear_safedevice() {
  safedevice_ = 0;
  clear_has_safedevice();
}
inline ::google::protobuf::int32 BindopMobileForRegResponse::safedevice() const {
  // @@protoc_insertion_point(field_get:FromCs.BindopMobileForRegResponse.SafeDevice)
  return safedevice_;
}
inline void BindopMobileForRegResponse::set_safedevice(::google::protobuf::int32 value) {
  set_has_safedevice();
  safedevice_ = value;
  // @@protoc_insertion_point(field_set:FromCs.BindopMobileForRegResponse.SafeDevice)
}

// optional string MainAcct = 12;
inline bool BindopMobileForRegResponse::has_mainacct() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BindopMobileForRegResponse::set_has_mainacct() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BindopMobileForRegResponse::clear_has_mainacct() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BindopMobileForRegResponse::clear_mainacct() {
  mainacct_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mainacct();
}
inline const ::std::string& BindopMobileForRegResponse::mainacct() const {
  // @@protoc_insertion_point(field_get:FromCs.BindopMobileForRegResponse.MainAcct)
  return mainacct_.GetNoArena();
}
inline void BindopMobileForRegResponse::set_mainacct(const ::std::string& value) {
  set_has_mainacct();
  mainacct_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.BindopMobileForRegResponse.MainAcct)
}
#if LANG_CXX11
inline void BindopMobileForRegResponse::set_mainacct(::std::string&& value) {
  set_has_mainacct();
  mainacct_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.BindopMobileForRegResponse.MainAcct)
}
#endif
inline void BindopMobileForRegResponse::set_mainacct(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mainacct();
  mainacct_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.BindopMobileForRegResponse.MainAcct)
}
inline void BindopMobileForRegResponse::set_mainacct(const char* value, size_t size) {
  set_has_mainacct();
  mainacct_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.BindopMobileForRegResponse.MainAcct)
}
inline ::std::string* BindopMobileForRegResponse::mutable_mainacct() {
  set_has_mainacct();
  // @@protoc_insertion_point(field_mutable:FromCs.BindopMobileForRegResponse.MainAcct)
  return mainacct_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BindopMobileForRegResponse::release_mainacct() {
  // @@protoc_insertion_point(field_release:FromCs.BindopMobileForRegResponse.MainAcct)
  clear_has_mainacct();
  return mainacct_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BindopMobileForRegResponse::set_allocated_mainacct(::std::string* mainacct) {
  if (mainacct != NULL) {
    set_has_mainacct();
  } else {
    clear_has_mainacct();
  }
  mainacct_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mainacct);
  // @@protoc_insertion_point(field_set_allocated:FromCs.BindopMobileForRegResponse.MainAcct)
}

// optional int32 MainAcctType = 13;
inline bool BindopMobileForRegResponse::has_mainaccttype() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BindopMobileForRegResponse::set_has_mainaccttype() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BindopMobileForRegResponse::clear_has_mainaccttype() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BindopMobileForRegResponse::clear_mainaccttype() {
  mainaccttype_ = 0;
  clear_has_mainaccttype();
}
inline ::google::protobuf::int32 BindopMobileForRegResponse::mainaccttype() const {
  // @@protoc_insertion_point(field_get:FromCs.BindopMobileForRegResponse.MainAcctType)
  return mainaccttype_;
}
inline void BindopMobileForRegResponse::set_mainaccttype(::google::protobuf::int32 value) {
  set_has_mainaccttype();
  mainaccttype_ = value;
  // @@protoc_insertion_point(field_set:FromCs.BindopMobileForRegResponse.MainAcctType)
}

// optional .FromCs.SafeDevice SafeDeviceList = 14;
inline bool BindopMobileForRegResponse::has_safedevicelist() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BindopMobileForRegResponse::set_has_safedevicelist() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BindopMobileForRegResponse::clear_has_safedevicelist() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BindopMobileForRegResponse::clear_safedevicelist() {
  if (safedevicelist_ != NULL) safedevicelist_->::FromCs::SafeDevice::Clear();
  clear_has_safedevicelist();
}
inline const ::FromCs::SafeDevice& BindopMobileForRegResponse::safedevicelist() const {
  // @@protoc_insertion_point(field_get:FromCs.BindopMobileForRegResponse.SafeDeviceList)
  return safedevicelist_ != NULL ? *safedevicelist_
                         : *::FromCs::SafeDevice::internal_default_instance();
}
inline ::FromCs::SafeDevice* BindopMobileForRegResponse::mutable_safedevicelist() {
  set_has_safedevicelist();
  if (safedevicelist_ == NULL) {
    safedevicelist_ = new ::FromCs::SafeDevice;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.BindopMobileForRegResponse.SafeDeviceList)
  return safedevicelist_;
}
inline ::FromCs::SafeDevice* BindopMobileForRegResponse::release_safedevicelist() {
  // @@protoc_insertion_point(field_release:FromCs.BindopMobileForRegResponse.SafeDeviceList)
  clear_has_safedevicelist();
  ::FromCs::SafeDevice* temp = safedevicelist_;
  safedevicelist_ = NULL;
  return temp;
}
inline void BindopMobileForRegResponse::set_allocated_safedevicelist(::FromCs::SafeDevice* safedevicelist) {
  delete safedevicelist_;
  safedevicelist_ = safedevicelist;
  if (safedevicelist) {
    set_has_safedevicelist();
  } else {
    clear_has_safedevicelist();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.BindopMobileForRegResponse.SafeDeviceList)
}

// -------------------------------------------------------------------

// NewSetPasswdRequest

// required .FromCs.BaseRequest base = 1;
inline bool NewSetPasswdRequest::has_base() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NewSetPasswdRequest::set_has_base() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NewSetPasswdRequest::clear_has_base() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NewSetPasswdRequest::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseRequest::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseRequest& NewSetPasswdRequest::base() const {
  // @@protoc_insertion_point(field_get:FromCs.NewSetPasswdRequest.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseRequest::internal_default_instance();
}
inline ::FromCs::BaseRequest* NewSetPasswdRequest::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.NewSetPasswdRequest.base)
  return base_;
}
inline ::FromCs::BaseRequest* NewSetPasswdRequest::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.NewSetPasswdRequest.base)
  clear_has_base();
  ::FromCs::BaseRequest* temp = base_;
  base_ = NULL;
  return temp;
}
inline void NewSetPasswdRequest::set_allocated_base(::FromCs::BaseRequest* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewSetPasswdRequest.base)
}

// optional string Password = 2;
inline bool NewSetPasswdRequest::has_password() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NewSetPasswdRequest::set_has_password() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NewSetPasswdRequest::clear_has_password() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NewSetPasswdRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
inline const ::std::string& NewSetPasswdRequest::password() const {
  // @@protoc_insertion_point(field_get:FromCs.NewSetPasswdRequest.Password)
  return password_.GetNoArena();
}
inline void NewSetPasswdRequest::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.NewSetPasswdRequest.Password)
}
#if LANG_CXX11
inline void NewSetPasswdRequest::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.NewSetPasswdRequest.Password)
}
#endif
inline void NewSetPasswdRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.NewSetPasswdRequest.Password)
}
inline void NewSetPasswdRequest::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.NewSetPasswdRequest.Password)
}
inline ::std::string* NewSetPasswdRequest::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:FromCs.NewSetPasswdRequest.Password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewSetPasswdRequest::release_password() {
  // @@protoc_insertion_point(field_release:FromCs.NewSetPasswdRequest.Password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewSetPasswdRequest::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewSetPasswdRequest.Password)
}

// optional string Ticket = 3;
inline bool NewSetPasswdRequest::has_ticket() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NewSetPasswdRequest::set_has_ticket() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NewSetPasswdRequest::clear_has_ticket() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NewSetPasswdRequest::clear_ticket() {
  ticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ticket();
}
inline const ::std::string& NewSetPasswdRequest::ticket() const {
  // @@protoc_insertion_point(field_get:FromCs.NewSetPasswdRequest.Ticket)
  return ticket_.GetNoArena();
}
inline void NewSetPasswdRequest::set_ticket(const ::std::string& value) {
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.NewSetPasswdRequest.Ticket)
}
#if LANG_CXX11
inline void NewSetPasswdRequest::set_ticket(::std::string&& value) {
  set_has_ticket();
  ticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.NewSetPasswdRequest.Ticket)
}
#endif
inline void NewSetPasswdRequest::set_ticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.NewSetPasswdRequest.Ticket)
}
inline void NewSetPasswdRequest::set_ticket(const char* value, size_t size) {
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.NewSetPasswdRequest.Ticket)
}
inline ::std::string* NewSetPasswdRequest::mutable_ticket() {
  set_has_ticket();
  // @@protoc_insertion_point(field_mutable:FromCs.NewSetPasswdRequest.Ticket)
  return ticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewSetPasswdRequest::release_ticket() {
  // @@protoc_insertion_point(field_release:FromCs.NewSetPasswdRequest.Ticket)
  clear_has_ticket();
  return ticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewSetPasswdRequest::set_allocated_ticket(::std::string* ticket) {
  if (ticket != NULL) {
    set_has_ticket();
  } else {
    clear_has_ticket();
  }
  ticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ticket);
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewSetPasswdRequest.Ticket)
}

// optional .FromCs.sKBuiltinBufferT AutoAuthKey = 4;
inline bool NewSetPasswdRequest::has_autoauthkey() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NewSetPasswdRequest::set_has_autoauthkey() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NewSetPasswdRequest::clear_has_autoauthkey() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NewSetPasswdRequest::clear_autoauthkey() {
  if (autoauthkey_ != NULL) autoauthkey_->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_autoauthkey();
}
inline const ::FromCs::sKBuiltinBufferT& NewSetPasswdRequest::autoauthkey() const {
  // @@protoc_insertion_point(field_get:FromCs.NewSetPasswdRequest.AutoAuthKey)
  return autoauthkey_ != NULL ? *autoauthkey_
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* NewSetPasswdRequest::mutable_autoauthkey() {
  set_has_autoauthkey();
  if (autoauthkey_ == NULL) {
    autoauthkey_ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.NewSetPasswdRequest.AutoAuthKey)
  return autoauthkey_;
}
inline ::FromCs::sKBuiltinBufferT* NewSetPasswdRequest::release_autoauthkey() {
  // @@protoc_insertion_point(field_release:FromCs.NewSetPasswdRequest.AutoAuthKey)
  clear_has_autoauthkey();
  ::FromCs::sKBuiltinBufferT* temp = autoauthkey_;
  autoauthkey_ = NULL;
  return temp;
}
inline void NewSetPasswdRequest::set_allocated_autoauthkey(::FromCs::sKBuiltinBufferT* autoauthkey) {
  delete autoauthkey_;
  autoauthkey_ = autoauthkey;
  if (autoauthkey) {
    set_has_autoauthkey();
  } else {
    clear_has_autoauthkey();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewSetPasswdRequest.AutoAuthKey)
}

// -------------------------------------------------------------------

// NewSetPasswdResponse

// required .FromCs.BaseResponse base = 1;
inline bool NewSetPasswdResponse::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NewSetPasswdResponse::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NewSetPasswdResponse::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NewSetPasswdResponse::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseResponse::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseResponse& NewSetPasswdResponse::base() const {
  // @@protoc_insertion_point(field_get:FromCs.NewSetPasswdResponse.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseResponse::internal_default_instance();
}
inline ::FromCs::BaseResponse* NewSetPasswdResponse::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.NewSetPasswdResponse.base)
  return base_;
}
inline ::FromCs::BaseResponse* NewSetPasswdResponse::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.NewSetPasswdResponse.base)
  clear_has_base();
  ::FromCs::BaseResponse* temp = base_;
  base_ = NULL;
  return temp;
}
inline void NewSetPasswdResponse::set_allocated_base(::FromCs::BaseResponse* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewSetPasswdResponse.base)
}

// optional .FromCs.sKBuiltinBufferT AutoAuthKey = 2;
inline bool NewSetPasswdResponse::has_autoauthkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NewSetPasswdResponse::set_has_autoauthkey() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NewSetPasswdResponse::clear_has_autoauthkey() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NewSetPasswdResponse::clear_autoauthkey() {
  if (autoauthkey_ != NULL) autoauthkey_->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_autoauthkey();
}
inline const ::FromCs::sKBuiltinBufferT& NewSetPasswdResponse::autoauthkey() const {
  // @@protoc_insertion_point(field_get:FromCs.NewSetPasswdResponse.AutoAuthKey)
  return autoauthkey_ != NULL ? *autoauthkey_
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* NewSetPasswdResponse::mutable_autoauthkey() {
  set_has_autoauthkey();
  if (autoauthkey_ == NULL) {
    autoauthkey_ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.NewSetPasswdResponse.AutoAuthKey)
  return autoauthkey_;
}
inline ::FromCs::sKBuiltinBufferT* NewSetPasswdResponse::release_autoauthkey() {
  // @@protoc_insertion_point(field_release:FromCs.NewSetPasswdResponse.AutoAuthKey)
  clear_has_autoauthkey();
  ::FromCs::sKBuiltinBufferT* temp = autoauthkey_;
  autoauthkey_ = NULL;
  return temp;
}
inline void NewSetPasswdResponse::set_allocated_autoauthkey(::FromCs::sKBuiltinBufferT* autoauthkey) {
  delete autoauthkey_;
  autoauthkey_ = autoauthkey;
  if (autoauthkey) {
    set_has_autoauthkey();
  } else {
    clear_has_autoauthkey();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewSetPasswdResponse.AutoAuthKey)
}

// -------------------------------------------------------------------

// NewVerifyPasswdRequest

// required .FromCs.BaseRequest base = 1;
inline bool NewVerifyPasswdRequest::has_base() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NewVerifyPasswdRequest::set_has_base() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NewVerifyPasswdRequest::clear_has_base() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NewVerifyPasswdRequest::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseRequest::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseRequest& NewVerifyPasswdRequest::base() const {
  // @@protoc_insertion_point(field_get:FromCs.NewVerifyPasswdRequest.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseRequest::internal_default_instance();
}
inline ::FromCs::BaseRequest* NewVerifyPasswdRequest::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.NewVerifyPasswdRequest.base)
  return base_;
}
inline ::FromCs::BaseRequest* NewVerifyPasswdRequest::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.NewVerifyPasswdRequest.base)
  clear_has_base();
  ::FromCs::BaseRequest* temp = base_;
  base_ = NULL;
  return temp;
}
inline void NewVerifyPasswdRequest::set_allocated_base(::FromCs::BaseRequest* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewVerifyPasswdRequest.base)
}

// required int32 OpCode = 2;
inline bool NewVerifyPasswdRequest::has_opcode() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NewVerifyPasswdRequest::set_has_opcode() {
  _has_bits_[0] |= 0x00000080u;
}
inline void NewVerifyPasswdRequest::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void NewVerifyPasswdRequest::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
inline ::google::protobuf::int32 NewVerifyPasswdRequest::opcode() const {
  // @@protoc_insertion_point(field_get:FromCs.NewVerifyPasswdRequest.OpCode)
  return opcode_;
}
inline void NewVerifyPasswdRequest::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
  // @@protoc_insertion_point(field_set:FromCs.NewVerifyPasswdRequest.OpCode)
}

// optional string Pwd1 = 3;
inline bool NewVerifyPasswdRequest::has_pwd1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NewVerifyPasswdRequest::set_has_pwd1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NewVerifyPasswdRequest::clear_has_pwd1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NewVerifyPasswdRequest::clear_pwd1() {
  pwd1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pwd1();
}
inline const ::std::string& NewVerifyPasswdRequest::pwd1() const {
  // @@protoc_insertion_point(field_get:FromCs.NewVerifyPasswdRequest.Pwd1)
  return pwd1_.GetNoArena();
}
inline void NewVerifyPasswdRequest::set_pwd1(const ::std::string& value) {
  set_has_pwd1();
  pwd1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.NewVerifyPasswdRequest.Pwd1)
}
#if LANG_CXX11
inline void NewVerifyPasswdRequest::set_pwd1(::std::string&& value) {
  set_has_pwd1();
  pwd1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.NewVerifyPasswdRequest.Pwd1)
}
#endif
inline void NewVerifyPasswdRequest::set_pwd1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pwd1();
  pwd1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.NewVerifyPasswdRequest.Pwd1)
}
inline void NewVerifyPasswdRequest::set_pwd1(const char* value, size_t size) {
  set_has_pwd1();
  pwd1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.NewVerifyPasswdRequest.Pwd1)
}
inline ::std::string* NewVerifyPasswdRequest::mutable_pwd1() {
  set_has_pwd1();
  // @@protoc_insertion_point(field_mutable:FromCs.NewVerifyPasswdRequest.Pwd1)
  return pwd1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewVerifyPasswdRequest::release_pwd1() {
  // @@protoc_insertion_point(field_release:FromCs.NewVerifyPasswdRequest.Pwd1)
  clear_has_pwd1();
  return pwd1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewVerifyPasswdRequest::set_allocated_pwd1(::std::string* pwd1) {
  if (pwd1 != NULL) {
    set_has_pwd1();
  } else {
    clear_has_pwd1();
  }
  pwd1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd1);
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewVerifyPasswdRequest.Pwd1)
}

// optional string Pwd2 = 4;
inline bool NewVerifyPasswdRequest::has_pwd2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NewVerifyPasswdRequest::set_has_pwd2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NewVerifyPasswdRequest::clear_has_pwd2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NewVerifyPasswdRequest::clear_pwd2() {
  pwd2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pwd2();
}
inline const ::std::string& NewVerifyPasswdRequest::pwd2() const {
  // @@protoc_insertion_point(field_get:FromCs.NewVerifyPasswdRequest.Pwd2)
  return pwd2_.GetNoArena();
}
inline void NewVerifyPasswdRequest::set_pwd2(const ::std::string& value) {
  set_has_pwd2();
  pwd2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.NewVerifyPasswdRequest.Pwd2)
}
#if LANG_CXX11
inline void NewVerifyPasswdRequest::set_pwd2(::std::string&& value) {
  set_has_pwd2();
  pwd2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.NewVerifyPasswdRequest.Pwd2)
}
#endif
inline void NewVerifyPasswdRequest::set_pwd2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pwd2();
  pwd2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.NewVerifyPasswdRequest.Pwd2)
}
inline void NewVerifyPasswdRequest::set_pwd2(const char* value, size_t size) {
  set_has_pwd2();
  pwd2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.NewVerifyPasswdRequest.Pwd2)
}
inline ::std::string* NewVerifyPasswdRequest::mutable_pwd2() {
  set_has_pwd2();
  // @@protoc_insertion_point(field_mutable:FromCs.NewVerifyPasswdRequest.Pwd2)
  return pwd2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewVerifyPasswdRequest::release_pwd2() {
  // @@protoc_insertion_point(field_release:FromCs.NewVerifyPasswdRequest.Pwd2)
  clear_has_pwd2();
  return pwd2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewVerifyPasswdRequest::set_allocated_pwd2(::std::string* pwd2) {
  if (pwd2 != NULL) {
    set_has_pwd2();
  } else {
    clear_has_pwd2();
  }
  pwd2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd2);
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewVerifyPasswdRequest.Pwd2)
}

// optional .FromCs.sKBuiltinstringT ImgSid = 5;
inline bool NewVerifyPasswdRequest::has_imgsid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NewVerifyPasswdRequest::set_has_imgsid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NewVerifyPasswdRequest::clear_has_imgsid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NewVerifyPasswdRequest::clear_imgsid() {
  if (imgsid_ != NULL) imgsid_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_imgsid();
}
inline const ::FromCs::sKBuiltinstringT& NewVerifyPasswdRequest::imgsid() const {
  // @@protoc_insertion_point(field_get:FromCs.NewVerifyPasswdRequest.ImgSid)
  return imgsid_ != NULL ? *imgsid_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* NewVerifyPasswdRequest::mutable_imgsid() {
  set_has_imgsid();
  if (imgsid_ == NULL) {
    imgsid_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.NewVerifyPasswdRequest.ImgSid)
  return imgsid_;
}
inline ::FromCs::sKBuiltinstringT* NewVerifyPasswdRequest::release_imgsid() {
  // @@protoc_insertion_point(field_release:FromCs.NewVerifyPasswdRequest.ImgSid)
  clear_has_imgsid();
  ::FromCs::sKBuiltinstringT* temp = imgsid_;
  imgsid_ = NULL;
  return temp;
}
inline void NewVerifyPasswdRequest::set_allocated_imgsid(::FromCs::sKBuiltinstringT* imgsid) {
  delete imgsid_;
  imgsid_ = imgsid;
  if (imgsid) {
    set_has_imgsid();
  } else {
    clear_has_imgsid();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewVerifyPasswdRequest.ImgSid)
}

// optional .FromCs.sKBuiltinstringT ImgCode = 6;
inline bool NewVerifyPasswdRequest::has_imgcode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NewVerifyPasswdRequest::set_has_imgcode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NewVerifyPasswdRequest::clear_has_imgcode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NewVerifyPasswdRequest::clear_imgcode() {
  if (imgcode_ != NULL) imgcode_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_imgcode();
}
inline const ::FromCs::sKBuiltinstringT& NewVerifyPasswdRequest::imgcode() const {
  // @@protoc_insertion_point(field_get:FromCs.NewVerifyPasswdRequest.ImgCode)
  return imgcode_ != NULL ? *imgcode_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* NewVerifyPasswdRequest::mutable_imgcode() {
  set_has_imgcode();
  if (imgcode_ == NULL) {
    imgcode_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.NewVerifyPasswdRequest.ImgCode)
  return imgcode_;
}
inline ::FromCs::sKBuiltinstringT* NewVerifyPasswdRequest::release_imgcode() {
  // @@protoc_insertion_point(field_release:FromCs.NewVerifyPasswdRequest.ImgCode)
  clear_has_imgcode();
  ::FromCs::sKBuiltinstringT* temp = imgcode_;
  imgcode_ = NULL;
  return temp;
}
inline void NewVerifyPasswdRequest::set_allocated_imgcode(::FromCs::sKBuiltinstringT* imgcode) {
  delete imgcode_;
  imgcode_ = imgcode;
  if (imgcode) {
    set_has_imgcode();
  } else {
    clear_has_imgcode();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewVerifyPasswdRequest.ImgCode)
}

// optional .FromCs.sKBuiltinstringT ImgEncryptKey = 7;
inline bool NewVerifyPasswdRequest::has_imgencryptkey() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NewVerifyPasswdRequest::set_has_imgencryptkey() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NewVerifyPasswdRequest::clear_has_imgencryptkey() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NewVerifyPasswdRequest::clear_imgencryptkey() {
  if (imgencryptkey_ != NULL) imgencryptkey_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_imgencryptkey();
}
inline const ::FromCs::sKBuiltinstringT& NewVerifyPasswdRequest::imgencryptkey() const {
  // @@protoc_insertion_point(field_get:FromCs.NewVerifyPasswdRequest.ImgEncryptKey)
  return imgencryptkey_ != NULL ? *imgencryptkey_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* NewVerifyPasswdRequest::mutable_imgencryptkey() {
  set_has_imgencryptkey();
  if (imgencryptkey_ == NULL) {
    imgencryptkey_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.NewVerifyPasswdRequest.ImgEncryptKey)
  return imgencryptkey_;
}
inline ::FromCs::sKBuiltinstringT* NewVerifyPasswdRequest::release_imgencryptkey() {
  // @@protoc_insertion_point(field_release:FromCs.NewVerifyPasswdRequest.ImgEncryptKey)
  clear_has_imgencryptkey();
  ::FromCs::sKBuiltinstringT* temp = imgencryptkey_;
  imgencryptkey_ = NULL;
  return temp;
}
inline void NewVerifyPasswdRequest::set_allocated_imgencryptkey(::FromCs::sKBuiltinstringT* imgencryptkey) {
  delete imgencryptkey_;
  imgencryptkey_ = imgencryptkey;
  if (imgencryptkey) {
    set_has_imgencryptkey();
  } else {
    clear_has_imgencryptkey();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewVerifyPasswdRequest.ImgEncryptKey)
}

// optional .FromCs.sKBuiltinBufferT KSid = 8;
inline bool NewVerifyPasswdRequest::has_ksid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NewVerifyPasswdRequest::set_has_ksid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NewVerifyPasswdRequest::clear_has_ksid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NewVerifyPasswdRequest::clear_ksid() {
  if (ksid_ != NULL) ksid_->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_ksid();
}
inline const ::FromCs::sKBuiltinBufferT& NewVerifyPasswdRequest::ksid() const {
  // @@protoc_insertion_point(field_get:FromCs.NewVerifyPasswdRequest.KSid)
  return ksid_ != NULL ? *ksid_
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* NewVerifyPasswdRequest::mutable_ksid() {
  set_has_ksid();
  if (ksid_ == NULL) {
    ksid_ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.NewVerifyPasswdRequest.KSid)
  return ksid_;
}
inline ::FromCs::sKBuiltinBufferT* NewVerifyPasswdRequest::release_ksid() {
  // @@protoc_insertion_point(field_release:FromCs.NewVerifyPasswdRequest.KSid)
  clear_has_ksid();
  ::FromCs::sKBuiltinBufferT* temp = ksid_;
  ksid_ = NULL;
  return temp;
}
inline void NewVerifyPasswdRequest::set_allocated_ksid(::FromCs::sKBuiltinBufferT* ksid) {
  delete ksid_;
  ksid_ = ksid;
  if (ksid) {
    set_has_ksid();
  } else {
    clear_has_ksid();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewVerifyPasswdRequest.KSid)
}

// -------------------------------------------------------------------

// NewVerifyPasswdResponse

// required .FromCs.BaseResponse base = 1;
inline bool NewVerifyPasswdResponse::has_base() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NewVerifyPasswdResponse::set_has_base() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NewVerifyPasswdResponse::clear_has_base() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NewVerifyPasswdResponse::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseResponse::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseResponse& NewVerifyPasswdResponse::base() const {
  // @@protoc_insertion_point(field_get:FromCs.NewVerifyPasswdResponse.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseResponse::internal_default_instance();
}
inline ::FromCs::BaseResponse* NewVerifyPasswdResponse::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.NewVerifyPasswdResponse.base)
  return base_;
}
inline ::FromCs::BaseResponse* NewVerifyPasswdResponse::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.NewVerifyPasswdResponse.base)
  clear_has_base();
  ::FromCs::BaseResponse* temp = base_;
  base_ = NULL;
  return temp;
}
inline void NewVerifyPasswdResponse::set_allocated_base(::FromCs::BaseResponse* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewVerifyPasswdResponse.base)
}

// required .FromCs.sKBuiltinstringT ImgSid = 2;
inline bool NewVerifyPasswdResponse::has_imgsid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NewVerifyPasswdResponse::set_has_imgsid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NewVerifyPasswdResponse::clear_has_imgsid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NewVerifyPasswdResponse::clear_imgsid() {
  if (imgsid_ != NULL) imgsid_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_imgsid();
}
inline const ::FromCs::sKBuiltinstringT& NewVerifyPasswdResponse::imgsid() const {
  // @@protoc_insertion_point(field_get:FromCs.NewVerifyPasswdResponse.ImgSid)
  return imgsid_ != NULL ? *imgsid_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* NewVerifyPasswdResponse::mutable_imgsid() {
  set_has_imgsid();
  if (imgsid_ == NULL) {
    imgsid_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.NewVerifyPasswdResponse.ImgSid)
  return imgsid_;
}
inline ::FromCs::sKBuiltinstringT* NewVerifyPasswdResponse::release_imgsid() {
  // @@protoc_insertion_point(field_release:FromCs.NewVerifyPasswdResponse.ImgSid)
  clear_has_imgsid();
  ::FromCs::sKBuiltinstringT* temp = imgsid_;
  imgsid_ = NULL;
  return temp;
}
inline void NewVerifyPasswdResponse::set_allocated_imgsid(::FromCs::sKBuiltinstringT* imgsid) {
  delete imgsid_;
  imgsid_ = imgsid;
  if (imgsid) {
    set_has_imgsid();
  } else {
    clear_has_imgsid();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewVerifyPasswdResponse.ImgSid)
}

// required .FromCs.sKBuiltinBufferT ImgBuf = 3;
inline bool NewVerifyPasswdResponse::has_imgbuf() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NewVerifyPasswdResponse::set_has_imgbuf() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NewVerifyPasswdResponse::clear_has_imgbuf() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NewVerifyPasswdResponse::clear_imgbuf() {
  if (imgbuf_ != NULL) imgbuf_->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_imgbuf();
}
inline const ::FromCs::sKBuiltinBufferT& NewVerifyPasswdResponse::imgbuf() const {
  // @@protoc_insertion_point(field_get:FromCs.NewVerifyPasswdResponse.ImgBuf)
  return imgbuf_ != NULL ? *imgbuf_
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* NewVerifyPasswdResponse::mutable_imgbuf() {
  set_has_imgbuf();
  if (imgbuf_ == NULL) {
    imgbuf_ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.NewVerifyPasswdResponse.ImgBuf)
  return imgbuf_;
}
inline ::FromCs::sKBuiltinBufferT* NewVerifyPasswdResponse::release_imgbuf() {
  // @@protoc_insertion_point(field_release:FromCs.NewVerifyPasswdResponse.ImgBuf)
  clear_has_imgbuf();
  ::FromCs::sKBuiltinBufferT* temp = imgbuf_;
  imgbuf_ = NULL;
  return temp;
}
inline void NewVerifyPasswdResponse::set_allocated_imgbuf(::FromCs::sKBuiltinBufferT* imgbuf) {
  delete imgbuf_;
  imgbuf_ = imgbuf;
  if (imgbuf) {
    set_has_imgbuf();
  } else {
    clear_has_imgbuf();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewVerifyPasswdResponse.ImgBuf)
}

// optional string Ticket = 4;
inline bool NewVerifyPasswdResponse::has_ticket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NewVerifyPasswdResponse::set_has_ticket() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NewVerifyPasswdResponse::clear_has_ticket() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NewVerifyPasswdResponse::clear_ticket() {
  ticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ticket();
}
inline const ::std::string& NewVerifyPasswdResponse::ticket() const {
  // @@protoc_insertion_point(field_get:FromCs.NewVerifyPasswdResponse.Ticket)
  return ticket_.GetNoArena();
}
inline void NewVerifyPasswdResponse::set_ticket(const ::std::string& value) {
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.NewVerifyPasswdResponse.Ticket)
}
#if LANG_CXX11
inline void NewVerifyPasswdResponse::set_ticket(::std::string&& value) {
  set_has_ticket();
  ticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.NewVerifyPasswdResponse.Ticket)
}
#endif
inline void NewVerifyPasswdResponse::set_ticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.NewVerifyPasswdResponse.Ticket)
}
inline void NewVerifyPasswdResponse::set_ticket(const char* value, size_t size) {
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.NewVerifyPasswdResponse.Ticket)
}
inline ::std::string* NewVerifyPasswdResponse::mutable_ticket() {
  set_has_ticket();
  // @@protoc_insertion_point(field_mutable:FromCs.NewVerifyPasswdResponse.Ticket)
  return ticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewVerifyPasswdResponse::release_ticket() {
  // @@protoc_insertion_point(field_release:FromCs.NewVerifyPasswdResponse.Ticket)
  clear_has_ticket();
  return ticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewVerifyPasswdResponse::set_allocated_ticket(::std::string* ticket) {
  if (ticket != NULL) {
    set_has_ticket();
  } else {
    clear_has_ticket();
  }
  ticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ticket);
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewVerifyPasswdResponse.Ticket)
}

// optional .FromCs.sKBuiltinstringT ImgEncryptKey = 5;
inline bool NewVerifyPasswdResponse::has_imgencryptkey() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NewVerifyPasswdResponse::set_has_imgencryptkey() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NewVerifyPasswdResponse::clear_has_imgencryptkey() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NewVerifyPasswdResponse::clear_imgencryptkey() {
  if (imgencryptkey_ != NULL) imgencryptkey_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_imgencryptkey();
}
inline const ::FromCs::sKBuiltinstringT& NewVerifyPasswdResponse::imgencryptkey() const {
  // @@protoc_insertion_point(field_get:FromCs.NewVerifyPasswdResponse.ImgEncryptKey)
  return imgencryptkey_ != NULL ? *imgencryptkey_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* NewVerifyPasswdResponse::mutable_imgencryptkey() {
  set_has_imgencryptkey();
  if (imgencryptkey_ == NULL) {
    imgencryptkey_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.NewVerifyPasswdResponse.ImgEncryptKey)
  return imgencryptkey_;
}
inline ::FromCs::sKBuiltinstringT* NewVerifyPasswdResponse::release_imgencryptkey() {
  // @@protoc_insertion_point(field_release:FromCs.NewVerifyPasswdResponse.ImgEncryptKey)
  clear_has_imgencryptkey();
  ::FromCs::sKBuiltinstringT* temp = imgencryptkey_;
  imgencryptkey_ = NULL;
  return temp;
}
inline void NewVerifyPasswdResponse::set_allocated_imgencryptkey(::FromCs::sKBuiltinstringT* imgencryptkey) {
  delete imgencryptkey_;
  imgencryptkey_ = imgencryptkey;
  if (imgencryptkey) {
    set_has_imgencryptkey();
  } else {
    clear_has_imgencryptkey();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewVerifyPasswdResponse.ImgEncryptKey)
}

// optional .FromCs.sKBuiltinBufferT A2Key = 6;
inline bool NewVerifyPasswdResponse::has_a2key() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NewVerifyPasswdResponse::set_has_a2key() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NewVerifyPasswdResponse::clear_has_a2key() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NewVerifyPasswdResponse::clear_a2key() {
  if (a2key_ != NULL) a2key_->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_a2key();
}
inline const ::FromCs::sKBuiltinBufferT& NewVerifyPasswdResponse::a2key() const {
  // @@protoc_insertion_point(field_get:FromCs.NewVerifyPasswdResponse.A2Key)
  return a2key_ != NULL ? *a2key_
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* NewVerifyPasswdResponse::mutable_a2key() {
  set_has_a2key();
  if (a2key_ == NULL) {
    a2key_ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.NewVerifyPasswdResponse.A2Key)
  return a2key_;
}
inline ::FromCs::sKBuiltinBufferT* NewVerifyPasswdResponse::release_a2key() {
  // @@protoc_insertion_point(field_release:FromCs.NewVerifyPasswdResponse.A2Key)
  clear_has_a2key();
  ::FromCs::sKBuiltinBufferT* temp = a2key_;
  a2key_ = NULL;
  return temp;
}
inline void NewVerifyPasswdResponse::set_allocated_a2key(::FromCs::sKBuiltinBufferT* a2key) {
  delete a2key_;
  a2key_ = a2key;
  if (a2key) {
    set_has_a2key();
  } else {
    clear_has_a2key();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewVerifyPasswdResponse.A2Key)
}

// optional .FromCs.sKBuiltinBufferT KSid = 7;
inline bool NewVerifyPasswdResponse::has_ksid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NewVerifyPasswdResponse::set_has_ksid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NewVerifyPasswdResponse::clear_has_ksid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NewVerifyPasswdResponse::clear_ksid() {
  if (ksid_ != NULL) ksid_->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_ksid();
}
inline const ::FromCs::sKBuiltinBufferT& NewVerifyPasswdResponse::ksid() const {
  // @@protoc_insertion_point(field_get:FromCs.NewVerifyPasswdResponse.KSid)
  return ksid_ != NULL ? *ksid_
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* NewVerifyPasswdResponse::mutable_ksid() {
  set_has_ksid();
  if (ksid_ == NULL) {
    ksid_ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.NewVerifyPasswdResponse.KSid)
  return ksid_;
}
inline ::FromCs::sKBuiltinBufferT* NewVerifyPasswdResponse::release_ksid() {
  // @@protoc_insertion_point(field_release:FromCs.NewVerifyPasswdResponse.KSid)
  clear_has_ksid();
  ::FromCs::sKBuiltinBufferT* temp = ksid_;
  ksid_ = NULL;
  return temp;
}
inline void NewVerifyPasswdResponse::set_allocated_ksid(::FromCs::sKBuiltinBufferT* ksid) {
  delete ksid_;
  ksid_ = ksid;
  if (ksid) {
    set_has_ksid();
  } else {
    clear_has_ksid();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewVerifyPasswdResponse.KSid)
}

// -------------------------------------------------------------------

// BindEmailRequest

// required .FromCs.BaseRequest base = 1;
inline bool BindEmailRequest::has_base() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BindEmailRequest::set_has_base() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BindEmailRequest::clear_has_base() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BindEmailRequest::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseRequest::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseRequest& BindEmailRequest::base() const {
  // @@protoc_insertion_point(field_get:FromCs.BindEmailRequest.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseRequest::internal_default_instance();
}
inline ::FromCs::BaseRequest* BindEmailRequest::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.BindEmailRequest.base)
  return base_;
}
inline ::FromCs::BaseRequest* BindEmailRequest::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.BindEmailRequest.base)
  clear_has_base();
  ::FromCs::BaseRequest* temp = base_;
  base_ = NULL;
  return temp;
}
inline void BindEmailRequest::set_allocated_base(::FromCs::BaseRequest* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.BindEmailRequest.base)
}

// required int32 OpCode = 2;
inline bool BindEmailRequest::has_opcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BindEmailRequest::set_has_opcode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BindEmailRequest::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BindEmailRequest::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
inline ::google::protobuf::int32 BindEmailRequest::opcode() const {
  // @@protoc_insertion_point(field_get:FromCs.BindEmailRequest.OpCode)
  return opcode_;
}
inline void BindEmailRequest::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
  // @@protoc_insertion_point(field_set:FromCs.BindEmailRequest.OpCode)
}

// optional string Email = 3;
inline bool BindEmailRequest::has_email() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BindEmailRequest::set_has_email() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BindEmailRequest::clear_has_email() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BindEmailRequest::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_email();
}
inline const ::std::string& BindEmailRequest::email() const {
  // @@protoc_insertion_point(field_get:FromCs.BindEmailRequest.Email)
  return email_.GetNoArena();
}
inline void BindEmailRequest::set_email(const ::std::string& value) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.BindEmailRequest.Email)
}
#if LANG_CXX11
inline void BindEmailRequest::set_email(::std::string&& value) {
  set_has_email();
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.BindEmailRequest.Email)
}
#endif
inline void BindEmailRequest::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.BindEmailRequest.Email)
}
inline void BindEmailRequest::set_email(const char* value, size_t size) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.BindEmailRequest.Email)
}
inline ::std::string* BindEmailRequest::mutable_email() {
  set_has_email();
  // @@protoc_insertion_point(field_mutable:FromCs.BindEmailRequest.Email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BindEmailRequest::release_email() {
  // @@protoc_insertion_point(field_release:FromCs.BindEmailRequest.Email)
  clear_has_email();
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BindEmailRequest::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    set_has_email();
  } else {
    clear_has_email();
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:FromCs.BindEmailRequest.Email)
}

// -------------------------------------------------------------------

// BindEmailResponse

// required .FromCs.BaseResponse base = 1;
inline bool BindEmailResponse::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BindEmailResponse::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BindEmailResponse::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BindEmailResponse::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseResponse::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseResponse& BindEmailResponse::base() const {
  // @@protoc_insertion_point(field_get:FromCs.BindEmailResponse.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseResponse::internal_default_instance();
}
inline ::FromCs::BaseResponse* BindEmailResponse::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.BindEmailResponse.base)
  return base_;
}
inline ::FromCs::BaseResponse* BindEmailResponse::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.BindEmailResponse.base)
  clear_has_base();
  ::FromCs::BaseResponse* temp = base_;
  base_ = NULL;
  return temp;
}
inline void BindEmailResponse::set_allocated_base(::FromCs::BaseResponse* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.BindEmailResponse.base)
}

// -------------------------------------------------------------------

// CheckUnbindRequest

// required .FromCs.BaseRequest base = 1;
inline bool CheckUnbindRequest::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CheckUnbindRequest::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CheckUnbindRequest::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CheckUnbindRequest::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseRequest::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseRequest& CheckUnbindRequest::base() const {
  // @@protoc_insertion_point(field_get:FromCs.CheckUnbindRequest.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseRequest::internal_default_instance();
}
inline ::FromCs::BaseRequest* CheckUnbindRequest::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.CheckUnbindRequest.base)
  return base_;
}
inline ::FromCs::BaseRequest* CheckUnbindRequest::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.CheckUnbindRequest.base)
  clear_has_base();
  ::FromCs::BaseRequest* temp = base_;
  base_ = NULL;
  return temp;
}
inline void CheckUnbindRequest::set_allocated_base(::FromCs::BaseRequest* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.CheckUnbindRequest.base)
}

// required int32 BindType = 2;
inline bool CheckUnbindRequest::has_bindtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CheckUnbindRequest::set_has_bindtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CheckUnbindRequest::clear_has_bindtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CheckUnbindRequest::clear_bindtype() {
  bindtype_ = 0;
  clear_has_bindtype();
}
inline ::google::protobuf::int32 CheckUnbindRequest::bindtype() const {
  // @@protoc_insertion_point(field_get:FromCs.CheckUnbindRequest.BindType)
  return bindtype_;
}
inline void CheckUnbindRequest::set_bindtype(::google::protobuf::int32 value) {
  set_has_bindtype();
  bindtype_ = value;
  // @@protoc_insertion_point(field_set:FromCs.CheckUnbindRequest.BindType)
}

// -------------------------------------------------------------------

// CheckUnbindResponse

// required .FromCs.BaseResponse base = 1;
inline bool CheckUnbindResponse::has_base() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CheckUnbindResponse::set_has_base() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CheckUnbindResponse::clear_has_base() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CheckUnbindResponse::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseResponse::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseResponse& CheckUnbindResponse::base() const {
  // @@protoc_insertion_point(field_get:FromCs.CheckUnbindResponse.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseResponse::internal_default_instance();
}
inline ::FromCs::BaseResponse* CheckUnbindResponse::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.CheckUnbindResponse.base)
  return base_;
}
inline ::FromCs::BaseResponse* CheckUnbindResponse::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.CheckUnbindResponse.base)
  clear_has_base();
  ::FromCs::BaseResponse* temp = base_;
  base_ = NULL;
  return temp;
}
inline void CheckUnbindResponse::set_allocated_base(::FromCs::BaseResponse* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.CheckUnbindResponse.base)
}

// optional string RandomPasswd = 2;
inline bool CheckUnbindResponse::has_randompasswd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CheckUnbindResponse::set_has_randompasswd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CheckUnbindResponse::clear_has_randompasswd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CheckUnbindResponse::clear_randompasswd() {
  randompasswd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_randompasswd();
}
inline const ::std::string& CheckUnbindResponse::randompasswd() const {
  // @@protoc_insertion_point(field_get:FromCs.CheckUnbindResponse.RandomPasswd)
  return randompasswd_.GetNoArena();
}
inline void CheckUnbindResponse::set_randompasswd(const ::std::string& value) {
  set_has_randompasswd();
  randompasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.CheckUnbindResponse.RandomPasswd)
}
#if LANG_CXX11
inline void CheckUnbindResponse::set_randompasswd(::std::string&& value) {
  set_has_randompasswd();
  randompasswd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.CheckUnbindResponse.RandomPasswd)
}
#endif
inline void CheckUnbindResponse::set_randompasswd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_randompasswd();
  randompasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.CheckUnbindResponse.RandomPasswd)
}
inline void CheckUnbindResponse::set_randompasswd(const char* value, size_t size) {
  set_has_randompasswd();
  randompasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.CheckUnbindResponse.RandomPasswd)
}
inline ::std::string* CheckUnbindResponse::mutable_randompasswd() {
  set_has_randompasswd();
  // @@protoc_insertion_point(field_mutable:FromCs.CheckUnbindResponse.RandomPasswd)
  return randompasswd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckUnbindResponse::release_randompasswd() {
  // @@protoc_insertion_point(field_release:FromCs.CheckUnbindResponse.RandomPasswd)
  clear_has_randompasswd();
  return randompasswd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckUnbindResponse::set_allocated_randompasswd(::std::string* randompasswd) {
  if (randompasswd != NULL) {
    set_has_randompasswd();
  } else {
    clear_has_randompasswd();
  }
  randompasswd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), randompasswd);
  // @@protoc_insertion_point(field_set_allocated:FromCs.CheckUnbindResponse.RandomPasswd)
}

// -------------------------------------------------------------------

// UploadMContact

// required .FromCs.BaseRequest base = 1;
inline bool UploadMContact::has_base() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UploadMContact::set_has_base() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UploadMContact::clear_has_base() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UploadMContact::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseRequest::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseRequest& UploadMContact::base() const {
  // @@protoc_insertion_point(field_get:FromCs.UploadMContact.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseRequest::internal_default_instance();
}
inline ::FromCs::BaseRequest* UploadMContact::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.UploadMContact.base)
  return base_;
}
inline ::FromCs::BaseRequest* UploadMContact::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.UploadMContact.base)
  clear_has_base();
  ::FromCs::BaseRequest* temp = base_;
  base_ = NULL;
  return temp;
}
inline void UploadMContact::set_allocated_base(::FromCs::BaseRequest* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.UploadMContact.base)
}

// optional string UserName = 2;
inline bool UploadMContact::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UploadMContact::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UploadMContact::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UploadMContact::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& UploadMContact::username() const {
  // @@protoc_insertion_point(field_get:FromCs.UploadMContact.UserName)
  return username_.GetNoArena();
}
inline void UploadMContact::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.UploadMContact.UserName)
}
#if LANG_CXX11
inline void UploadMContact::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.UploadMContact.UserName)
}
#endif
inline void UploadMContact::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.UploadMContact.UserName)
}
inline void UploadMContact::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.UploadMContact.UserName)
}
inline ::std::string* UploadMContact::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:FromCs.UploadMContact.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadMContact::release_username() {
  // @@protoc_insertion_point(field_release:FromCs.UploadMContact.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadMContact::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:FromCs.UploadMContact.UserName)
}

// required int32 Opcode = 3;
inline bool UploadMContact::has_opcode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UploadMContact::set_has_opcode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UploadMContact::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UploadMContact::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
inline ::google::protobuf::int32 UploadMContact::opcode() const {
  // @@protoc_insertion_point(field_get:FromCs.UploadMContact.Opcode)
  return opcode_;
}
inline void UploadMContact::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
  // @@protoc_insertion_point(field_set:FromCs.UploadMContact.Opcode)
}

// optional string Mobile = 4;
inline bool UploadMContact::has_mobile() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UploadMContact::set_has_mobile() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UploadMContact::clear_has_mobile() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UploadMContact::clear_mobile() {
  mobile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mobile();
}
inline const ::std::string& UploadMContact::mobile() const {
  // @@protoc_insertion_point(field_get:FromCs.UploadMContact.Mobile)
  return mobile_.GetNoArena();
}
inline void UploadMContact::set_mobile(const ::std::string& value) {
  set_has_mobile();
  mobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.UploadMContact.Mobile)
}
#if LANG_CXX11
inline void UploadMContact::set_mobile(::std::string&& value) {
  set_has_mobile();
  mobile_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.UploadMContact.Mobile)
}
#endif
inline void UploadMContact::set_mobile(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mobile();
  mobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.UploadMContact.Mobile)
}
inline void UploadMContact::set_mobile(const char* value, size_t size) {
  set_has_mobile();
  mobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.UploadMContact.Mobile)
}
inline ::std::string* UploadMContact::mutable_mobile() {
  set_has_mobile();
  // @@protoc_insertion_point(field_mutable:FromCs.UploadMContact.Mobile)
  return mobile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadMContact::release_mobile() {
  // @@protoc_insertion_point(field_release:FromCs.UploadMContact.Mobile)
  clear_has_mobile();
  return mobile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadMContact::set_allocated_mobile(::std::string* mobile) {
  if (mobile != NULL) {
    set_has_mobile();
  } else {
    clear_has_mobile();
  }
  mobile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mobile);
  // @@protoc_insertion_point(field_set_allocated:FromCs.UploadMContact.Mobile)
}

// required int32 MobileListSize = 5;
inline bool UploadMContact::has_mobilelistsize() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UploadMContact::set_has_mobilelistsize() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UploadMContact::clear_has_mobilelistsize() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UploadMContact::clear_mobilelistsize() {
  mobilelistsize_ = 0;
  clear_has_mobilelistsize();
}
inline ::google::protobuf::int32 UploadMContact::mobilelistsize() const {
  // @@protoc_insertion_point(field_get:FromCs.UploadMContact.MobileListSize)
  return mobilelistsize_;
}
inline void UploadMContact::set_mobilelistsize(::google::protobuf::int32 value) {
  set_has_mobilelistsize();
  mobilelistsize_ = value;
  // @@protoc_insertion_point(field_set:FromCs.UploadMContact.MobileListSize)
}

// repeated .FromCs.sKBuiltinstringT Mobiles = 6;
inline int UploadMContact::mobiles_size() const {
  return mobiles_.size();
}
inline void UploadMContact::clear_mobiles() {
  mobiles_.Clear();
}
inline const ::FromCs::sKBuiltinstringT& UploadMContact::mobiles(int index) const {
  // @@protoc_insertion_point(field_get:FromCs.UploadMContact.Mobiles)
  return mobiles_.Get(index);
}
inline ::FromCs::sKBuiltinstringT* UploadMContact::mutable_mobiles(int index) {
  // @@protoc_insertion_point(field_mutable:FromCs.UploadMContact.Mobiles)
  return mobiles_.Mutable(index);
}
inline ::FromCs::sKBuiltinstringT* UploadMContact::add_mobiles() {
  // @@protoc_insertion_point(field_add:FromCs.UploadMContact.Mobiles)
  return mobiles_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::FromCs::sKBuiltinstringT >*
UploadMContact::mutable_mobiles() {
  // @@protoc_insertion_point(field_mutable_list:FromCs.UploadMContact.Mobiles)
  return &mobiles_;
}
inline const ::google::protobuf::RepeatedPtrField< ::FromCs::sKBuiltinstringT >&
UploadMContact::mobiles() const {
  // @@protoc_insertion_point(field_list:FromCs.UploadMContact.Mobiles)
  return mobiles_;
}

// required int32 EmailListSize = 7;
inline bool UploadMContact::has_emaillistsize() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UploadMContact::set_has_emaillistsize() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UploadMContact::clear_has_emaillistsize() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UploadMContact::clear_emaillistsize() {
  emaillistsize_ = 0;
  clear_has_emaillistsize();
}
inline ::google::protobuf::int32 UploadMContact::emaillistsize() const {
  // @@protoc_insertion_point(field_get:FromCs.UploadMContact.EmailListSize)
  return emaillistsize_;
}
inline void UploadMContact::set_emaillistsize(::google::protobuf::int32 value) {
  set_has_emaillistsize();
  emaillistsize_ = value;
  // @@protoc_insertion_point(field_set:FromCs.UploadMContact.EmailListSize)
}

// repeated .FromCs.sKBuiltinstringT Email = 8;
inline int UploadMContact::email_size() const {
  return email_.size();
}
inline void UploadMContact::clear_email() {
  email_.Clear();
}
inline const ::FromCs::sKBuiltinstringT& UploadMContact::email(int index) const {
  // @@protoc_insertion_point(field_get:FromCs.UploadMContact.Email)
  return email_.Get(index);
}
inline ::FromCs::sKBuiltinstringT* UploadMContact::mutable_email(int index) {
  // @@protoc_insertion_point(field_mutable:FromCs.UploadMContact.Email)
  return email_.Mutable(index);
}
inline ::FromCs::sKBuiltinstringT* UploadMContact::add_email() {
  // @@protoc_insertion_point(field_add:FromCs.UploadMContact.Email)
  return email_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::FromCs::sKBuiltinstringT >*
UploadMContact::mutable_email() {
  // @@protoc_insertion_point(field_mutable_list:FromCs.UploadMContact.Email)
  return &email_;
}
inline const ::google::protobuf::RepeatedPtrField< ::FromCs::sKBuiltinstringT >&
UploadMContact::email() const {
  // @@protoc_insertion_point(field_list:FromCs.UploadMContact.Email)
  return email_;
}

// -------------------------------------------------------------------

// UploadMContactResponse

// required .FromCs.BaseResponse base = 1;
inline bool UploadMContactResponse::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UploadMContactResponse::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UploadMContactResponse::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UploadMContactResponse::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseResponse::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseResponse& UploadMContactResponse::base() const {
  // @@protoc_insertion_point(field_get:FromCs.UploadMContactResponse.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseResponse::internal_default_instance();
}
inline ::FromCs::BaseResponse* UploadMContactResponse::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.UploadMContactResponse.base)
  return base_;
}
inline ::FromCs::BaseResponse* UploadMContactResponse::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.UploadMContactResponse.base)
  clear_has_base();
  ::FromCs::BaseResponse* temp = base_;
  base_ = NULL;
  return temp;
}
inline void UploadMContactResponse::set_allocated_base(::FromCs::BaseResponse* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.UploadMContactResponse.base)
}

// -------------------------------------------------------------------

// GetMFriendRequest

// required .FromCs.BaseRequest base = 1;
inline bool GetMFriendRequest::has_base() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetMFriendRequest::set_has_base() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetMFriendRequest::clear_has_base() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetMFriendRequest::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseRequest::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseRequest& GetMFriendRequest::base() const {
  // @@protoc_insertion_point(field_get:FromCs.GetMFriendRequest.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseRequest::internal_default_instance();
}
inline ::FromCs::BaseRequest* GetMFriendRequest::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.GetMFriendRequest.base)
  return base_;
}
inline ::FromCs::BaseRequest* GetMFriendRequest::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.GetMFriendRequest.base)
  clear_has_base();
  ::FromCs::BaseRequest* temp = base_;
  base_ = NULL;
  return temp;
}
inline void GetMFriendRequest::set_allocated_base(::FromCs::BaseRequest* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.GetMFriendRequest.base)
}

// optional int32 OpType = 2;
inline bool GetMFriendRequest::has_optype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetMFriendRequest::set_has_optype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetMFriendRequest::clear_has_optype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetMFriendRequest::clear_optype() {
  optype_ = 0;
  clear_has_optype();
}
inline ::google::protobuf::int32 GetMFriendRequest::optype() const {
  // @@protoc_insertion_point(field_get:FromCs.GetMFriendRequest.OpType)
  return optype_;
}
inline void GetMFriendRequest::set_optype(::google::protobuf::int32 value) {
  set_has_optype();
  optype_ = value;
  // @@protoc_insertion_point(field_set:FromCs.GetMFriendRequest.OpType)
}

// optional string MD5 = 3;
inline bool GetMFriendRequest::has_md5() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetMFriendRequest::set_has_md5() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetMFriendRequest::clear_has_md5() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetMFriendRequest::clear_md5() {
  md5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_md5();
}
inline const ::std::string& GetMFriendRequest::md5() const {
  // @@protoc_insertion_point(field_get:FromCs.GetMFriendRequest.MD5)
  return md5_.GetNoArena();
}
inline void GetMFriendRequest::set_md5(const ::std::string& value) {
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.GetMFriendRequest.MD5)
}
#if LANG_CXX11
inline void GetMFriendRequest::set_md5(::std::string&& value) {
  set_has_md5();
  md5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.GetMFriendRequest.MD5)
}
#endif
inline void GetMFriendRequest::set_md5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.GetMFriendRequest.MD5)
}
inline void GetMFriendRequest::set_md5(const char* value, size_t size) {
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.GetMFriendRequest.MD5)
}
inline ::std::string* GetMFriendRequest::mutable_md5() {
  set_has_md5();
  // @@protoc_insertion_point(field_mutable:FromCs.GetMFriendRequest.MD5)
  return md5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetMFriendRequest::release_md5() {
  // @@protoc_insertion_point(field_release:FromCs.GetMFriendRequest.MD5)
  clear_has_md5();
  return md5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetMFriendRequest::set_allocated_md5(::std::string* md5) {
  if (md5 != NULL) {
    set_has_md5();
  } else {
    clear_has_md5();
  }
  md5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), md5);
  // @@protoc_insertion_point(field_set_allocated:FromCs.GetMFriendRequest.MD5)
}

// -------------------------------------------------------------------

// GetMFriendResponse

// required .FromCs.BaseResponse base = 1;
inline bool GetMFriendResponse::has_base() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetMFriendResponse::set_has_base() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetMFriendResponse::clear_has_base() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetMFriendResponse::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseResponse::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseResponse& GetMFriendResponse::base() const {
  // @@protoc_insertion_point(field_get:FromCs.GetMFriendResponse.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseResponse::internal_default_instance();
}
inline ::FromCs::BaseResponse* GetMFriendResponse::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.GetMFriendResponse.base)
  return base_;
}
inline ::FromCs::BaseResponse* GetMFriendResponse::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.GetMFriendResponse.base)
  clear_has_base();
  ::FromCs::BaseResponse* temp = base_;
  base_ = NULL;
  return temp;
}
inline void GetMFriendResponse::set_allocated_base(::FromCs::BaseResponse* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.GetMFriendResponse.base)
}

// required int32 Count = 2;
inline bool GetMFriendResponse::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetMFriendResponse::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetMFriendResponse::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetMFriendResponse::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 GetMFriendResponse::count() const {
  // @@protoc_insertion_point(field_get:FromCs.GetMFriendResponse.Count)
  return count_;
}
inline void GetMFriendResponse::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:FromCs.GetMFriendResponse.Count)
}

// repeated .FromCs.FriendObj Friend = 3;
inline int GetMFriendResponse::friend__size() const {
  return friend__.size();
}
inline void GetMFriendResponse::clear_friend_() {
  friend__.Clear();
}
inline const ::FromCs::FriendObj& GetMFriendResponse::friend_(int index) const {
  // @@protoc_insertion_point(field_get:FromCs.GetMFriendResponse.Friend)
  return friend__.Get(index);
}
inline ::FromCs::FriendObj* GetMFriendResponse::mutable_friend_(int index) {
  // @@protoc_insertion_point(field_mutable:FromCs.GetMFriendResponse.Friend)
  return friend__.Mutable(index);
}
inline ::FromCs::FriendObj* GetMFriendResponse::add_friend_() {
  // @@protoc_insertion_point(field_add:FromCs.GetMFriendResponse.Friend)
  return friend__.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::FromCs::FriendObj >*
GetMFriendResponse::mutable_friend_() {
  // @@protoc_insertion_point(field_mutable_list:FromCs.GetMFriendResponse.Friend)
  return &friend__;
}
inline const ::google::protobuf::RepeatedPtrField< ::FromCs::FriendObj >&
GetMFriendResponse::friend_() const {
  // @@protoc_insertion_point(field_list:FromCs.GetMFriendResponse.Friend)
  return friend__;
}

// optional string MD5 = 4;
inline bool GetMFriendResponse::has_md5() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetMFriendResponse::set_has_md5() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetMFriendResponse::clear_has_md5() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetMFriendResponse::clear_md5() {
  md5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_md5();
}
inline const ::std::string& GetMFriendResponse::md5() const {
  // @@protoc_insertion_point(field_get:FromCs.GetMFriendResponse.MD5)
  return md5_.GetNoArena();
}
inline void GetMFriendResponse::set_md5(const ::std::string& value) {
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.GetMFriendResponse.MD5)
}
#if LANG_CXX11
inline void GetMFriendResponse::set_md5(::std::string&& value) {
  set_has_md5();
  md5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.GetMFriendResponse.MD5)
}
#endif
inline void GetMFriendResponse::set_md5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.GetMFriendResponse.MD5)
}
inline void GetMFriendResponse::set_md5(const char* value, size_t size) {
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.GetMFriendResponse.MD5)
}
inline ::std::string* GetMFriendResponse::mutable_md5() {
  set_has_md5();
  // @@protoc_insertion_point(field_mutable:FromCs.GetMFriendResponse.MD5)
  return md5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetMFriendResponse::release_md5() {
  // @@protoc_insertion_point(field_release:FromCs.GetMFriendResponse.MD5)
  clear_has_md5();
  return md5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetMFriendResponse::set_allocated_md5(::std::string* md5) {
  if (md5 != NULL) {
    set_has_md5();
  } else {
    clear_has_md5();
  }
  md5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), md5);
  // @@protoc_insertion_point(field_set_allocated:FromCs.GetMFriendResponse.MD5)
}

// -------------------------------------------------------------------

// Geta8keyRequest

// required .FromCs.BaseRequest base = 1;
inline bool Geta8keyRequest::has_base() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Geta8keyRequest::set_has_base() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Geta8keyRequest::clear_has_base() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Geta8keyRequest::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseRequest::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseRequest& Geta8keyRequest::base() const {
  // @@protoc_insertion_point(field_get:FromCs.Geta8keyRequest.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseRequest::internal_default_instance();
}
inline ::FromCs::BaseRequest* Geta8keyRequest::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.Geta8keyRequest.base)
  return base_;
}
inline ::FromCs::BaseRequest* Geta8keyRequest::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.Geta8keyRequest.base)
  clear_has_base();
  ::FromCs::BaseRequest* temp = base_;
  base_ = NULL;
  return temp;
}
inline void Geta8keyRequest::set_allocated_base(::FromCs::BaseRequest* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.Geta8keyRequest.base)
}

// required int32 OpCode = 2;
inline bool Geta8keyRequest::has_opcode() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Geta8keyRequest::set_has_opcode() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Geta8keyRequest::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Geta8keyRequest::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
inline ::google::protobuf::int32 Geta8keyRequest::opcode() const {
  // @@protoc_insertion_point(field_get:FromCs.Geta8keyRequest.OpCode)
  return opcode_;
}
inline void Geta8keyRequest::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
  // @@protoc_insertion_point(field_set:FromCs.Geta8keyRequest.OpCode)
}

// required .FromCs.sKBuiltinBufferT A2Key = 3;
inline bool Geta8keyRequest::has_a2key() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Geta8keyRequest::set_has_a2key() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Geta8keyRequest::clear_has_a2key() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Geta8keyRequest::clear_a2key() {
  if (a2key_ != NULL) a2key_->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_a2key();
}
inline const ::FromCs::sKBuiltinBufferT& Geta8keyRequest::a2key() const {
  // @@protoc_insertion_point(field_get:FromCs.Geta8keyRequest.A2Key)
  return a2key_ != NULL ? *a2key_
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* Geta8keyRequest::mutable_a2key() {
  set_has_a2key();
  if (a2key_ == NULL) {
    a2key_ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.Geta8keyRequest.A2Key)
  return a2key_;
}
inline ::FromCs::sKBuiltinBufferT* Geta8keyRequest::release_a2key() {
  // @@protoc_insertion_point(field_release:FromCs.Geta8keyRequest.A2Key)
  clear_has_a2key();
  ::FromCs::sKBuiltinBufferT* temp = a2key_;
  a2key_ = NULL;
  return temp;
}
inline void Geta8keyRequest::set_allocated_a2key(::FromCs::sKBuiltinBufferT* a2key) {
  delete a2key_;
  a2key_ = a2key;
  if (a2key) {
    set_has_a2key();
  } else {
    clear_has_a2key();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.Geta8keyRequest.A2Key)
}

// optional .FromCs.sKBuiltinstringT AppID = 4;
inline bool Geta8keyRequest::has_appid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Geta8keyRequest::set_has_appid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Geta8keyRequest::clear_has_appid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Geta8keyRequest::clear_appid() {
  if (appid_ != NULL) appid_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_appid();
}
inline const ::FromCs::sKBuiltinstringT& Geta8keyRequest::appid() const {
  // @@protoc_insertion_point(field_get:FromCs.Geta8keyRequest.AppID)
  return appid_ != NULL ? *appid_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* Geta8keyRequest::mutable_appid() {
  set_has_appid();
  if (appid_ == NULL) {
    appid_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.Geta8keyRequest.AppID)
  return appid_;
}
inline ::FromCs::sKBuiltinstringT* Geta8keyRequest::release_appid() {
  // @@protoc_insertion_point(field_release:FromCs.Geta8keyRequest.AppID)
  clear_has_appid();
  ::FromCs::sKBuiltinstringT* temp = appid_;
  appid_ = NULL;
  return temp;
}
inline void Geta8keyRequest::set_allocated_appid(::FromCs::sKBuiltinstringT* appid) {
  delete appid_;
  appid_ = appid;
  if (appid) {
    set_has_appid();
  } else {
    clear_has_appid();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.Geta8keyRequest.AppID)
}

// optional .FromCs.sKBuiltinstringT Scope = 5;
inline bool Geta8keyRequest::has_scope() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Geta8keyRequest::set_has_scope() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Geta8keyRequest::clear_has_scope() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Geta8keyRequest::clear_scope() {
  if (scope_ != NULL) scope_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_scope();
}
inline const ::FromCs::sKBuiltinstringT& Geta8keyRequest::scope() const {
  // @@protoc_insertion_point(field_get:FromCs.Geta8keyRequest.Scope)
  return scope_ != NULL ? *scope_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* Geta8keyRequest::mutable_scope() {
  set_has_scope();
  if (scope_ == NULL) {
    scope_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.Geta8keyRequest.Scope)
  return scope_;
}
inline ::FromCs::sKBuiltinstringT* Geta8keyRequest::release_scope() {
  // @@protoc_insertion_point(field_release:FromCs.Geta8keyRequest.Scope)
  clear_has_scope();
  ::FromCs::sKBuiltinstringT* temp = scope_;
  scope_ = NULL;
  return temp;
}
inline void Geta8keyRequest::set_allocated_scope(::FromCs::sKBuiltinstringT* scope) {
  delete scope_;
  scope_ = scope;
  if (scope) {
    set_has_scope();
  } else {
    clear_has_scope();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.Geta8keyRequest.Scope)
}

// optional .FromCs.sKBuiltinstringT State = 6;
inline bool Geta8keyRequest::has_state() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Geta8keyRequest::set_has_state() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Geta8keyRequest::clear_has_state() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Geta8keyRequest::clear_state() {
  if (state_ != NULL) state_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_state();
}
inline const ::FromCs::sKBuiltinstringT& Geta8keyRequest::state() const {
  // @@protoc_insertion_point(field_get:FromCs.Geta8keyRequest.State)
  return state_ != NULL ? *state_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* Geta8keyRequest::mutable_state() {
  set_has_state();
  if (state_ == NULL) {
    state_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.Geta8keyRequest.State)
  return state_;
}
inline ::FromCs::sKBuiltinstringT* Geta8keyRequest::release_state() {
  // @@protoc_insertion_point(field_release:FromCs.Geta8keyRequest.State)
  clear_has_state();
  ::FromCs::sKBuiltinstringT* temp = state_;
  state_ = NULL;
  return temp;
}
inline void Geta8keyRequest::set_allocated_state(::FromCs::sKBuiltinstringT* state) {
  delete state_;
  state_ = state;
  if (state) {
    set_has_state();
  } else {
    clear_has_state();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.Geta8keyRequest.State)
}

// optional .FromCs.sKBuiltinstringT ReqUrl = 7;
inline bool Geta8keyRequest::has_requrl() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Geta8keyRequest::set_has_requrl() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Geta8keyRequest::clear_has_requrl() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Geta8keyRequest::clear_requrl() {
  if (requrl_ != NULL) requrl_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_requrl();
}
inline const ::FromCs::sKBuiltinstringT& Geta8keyRequest::requrl() const {
  // @@protoc_insertion_point(field_get:FromCs.Geta8keyRequest.ReqUrl)
  return requrl_ != NULL ? *requrl_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* Geta8keyRequest::mutable_requrl() {
  set_has_requrl();
  if (requrl_ == NULL) {
    requrl_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.Geta8keyRequest.ReqUrl)
  return requrl_;
}
inline ::FromCs::sKBuiltinstringT* Geta8keyRequest::release_requrl() {
  // @@protoc_insertion_point(field_release:FromCs.Geta8keyRequest.ReqUrl)
  clear_has_requrl();
  ::FromCs::sKBuiltinstringT* temp = requrl_;
  requrl_ = NULL;
  return temp;
}
inline void Geta8keyRequest::set_allocated_requrl(::FromCs::sKBuiltinstringT* requrl) {
  delete requrl_;
  requrl_ = requrl;
  if (requrl) {
    set_has_requrl();
  } else {
    clear_has_requrl();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.Geta8keyRequest.ReqUrl)
}

// optional string FriendUserName = 8;
inline bool Geta8keyRequest::has_friendusername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Geta8keyRequest::set_has_friendusername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Geta8keyRequest::clear_has_friendusername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Geta8keyRequest::clear_friendusername() {
  friendusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_friendusername();
}
inline const ::std::string& Geta8keyRequest::friendusername() const {
  // @@protoc_insertion_point(field_get:FromCs.Geta8keyRequest.FriendUserName)
  return friendusername_.GetNoArena();
}
inline void Geta8keyRequest::set_friendusername(const ::std::string& value) {
  set_has_friendusername();
  friendusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.Geta8keyRequest.FriendUserName)
}
#if LANG_CXX11
inline void Geta8keyRequest::set_friendusername(::std::string&& value) {
  set_has_friendusername();
  friendusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.Geta8keyRequest.FriendUserName)
}
#endif
inline void Geta8keyRequest::set_friendusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_friendusername();
  friendusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.Geta8keyRequest.FriendUserName)
}
inline void Geta8keyRequest::set_friendusername(const char* value, size_t size) {
  set_has_friendusername();
  friendusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.Geta8keyRequest.FriendUserName)
}
inline ::std::string* Geta8keyRequest::mutable_friendusername() {
  set_has_friendusername();
  // @@protoc_insertion_point(field_mutable:FromCs.Geta8keyRequest.FriendUserName)
  return friendusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Geta8keyRequest::release_friendusername() {
  // @@protoc_insertion_point(field_release:FromCs.Geta8keyRequest.FriendUserName)
  clear_has_friendusername();
  return friendusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Geta8keyRequest::set_allocated_friendusername(::std::string* friendusername) {
  if (friendusername != NULL) {
    set_has_friendusername();
  } else {
    clear_has_friendusername();
  }
  friendusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), friendusername);
  // @@protoc_insertion_point(field_set_allocated:FromCs.Geta8keyRequest.FriendUserName)
}

// optional int32 FriendQQ = 9;
inline bool Geta8keyRequest::has_friendqq() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Geta8keyRequest::set_has_friendqq() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Geta8keyRequest::clear_has_friendqq() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Geta8keyRequest::clear_friendqq() {
  friendqq_ = 0;
  clear_has_friendqq();
}
inline ::google::protobuf::int32 Geta8keyRequest::friendqq() const {
  // @@protoc_insertion_point(field_get:FromCs.Geta8keyRequest.FriendQQ)
  return friendqq_;
}
inline void Geta8keyRequest::set_friendqq(::google::protobuf::int32 value) {
  set_has_friendqq();
  friendqq_ = value;
  // @@protoc_insertion_point(field_set:FromCs.Geta8keyRequest.FriendQQ)
}

// optional int32 Scene = 10;
inline bool Geta8keyRequest::has_scene() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Geta8keyRequest::set_has_scene() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Geta8keyRequest::clear_has_scene() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Geta8keyRequest::clear_scene() {
  scene_ = 0;
  clear_has_scene();
}
inline ::google::protobuf::int32 Geta8keyRequest::scene() const {
  // @@protoc_insertion_point(field_get:FromCs.Geta8keyRequest.Scene)
  return scene_;
}
inline void Geta8keyRequest::set_scene(::google::protobuf::int32 value) {
  set_has_scene();
  scene_ = value;
  // @@protoc_insertion_point(field_set:FromCs.Geta8keyRequest.Scene)
}

// optional string UserName = 11;
inline bool Geta8keyRequest::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Geta8keyRequest::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Geta8keyRequest::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Geta8keyRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& Geta8keyRequest::username() const {
  // @@protoc_insertion_point(field_get:FromCs.Geta8keyRequest.UserName)
  return username_.GetNoArena();
}
inline void Geta8keyRequest::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.Geta8keyRequest.UserName)
}
#if LANG_CXX11
inline void Geta8keyRequest::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.Geta8keyRequest.UserName)
}
#endif
inline void Geta8keyRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.Geta8keyRequest.UserName)
}
inline void Geta8keyRequest::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.Geta8keyRequest.UserName)
}
inline ::std::string* Geta8keyRequest::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:FromCs.Geta8keyRequest.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Geta8keyRequest::release_username() {
  // @@protoc_insertion_point(field_release:FromCs.Geta8keyRequest.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Geta8keyRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:FromCs.Geta8keyRequest.UserName)
}

// optional string BundleID = 12;
inline bool Geta8keyRequest::has_bundleid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Geta8keyRequest::set_has_bundleid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Geta8keyRequest::clear_has_bundleid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Geta8keyRequest::clear_bundleid() {
  bundleid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bundleid();
}
inline const ::std::string& Geta8keyRequest::bundleid() const {
  // @@protoc_insertion_point(field_get:FromCs.Geta8keyRequest.BundleID)
  return bundleid_.GetNoArena();
}
inline void Geta8keyRequest::set_bundleid(const ::std::string& value) {
  set_has_bundleid();
  bundleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.Geta8keyRequest.BundleID)
}
#if LANG_CXX11
inline void Geta8keyRequest::set_bundleid(::std::string&& value) {
  set_has_bundleid();
  bundleid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.Geta8keyRequest.BundleID)
}
#endif
inline void Geta8keyRequest::set_bundleid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bundleid();
  bundleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.Geta8keyRequest.BundleID)
}
inline void Geta8keyRequest::set_bundleid(const char* value, size_t size) {
  set_has_bundleid();
  bundleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.Geta8keyRequest.BundleID)
}
inline ::std::string* Geta8keyRequest::mutable_bundleid() {
  set_has_bundleid();
  // @@protoc_insertion_point(field_mutable:FromCs.Geta8keyRequest.BundleID)
  return bundleid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Geta8keyRequest::release_bundleid() {
  // @@protoc_insertion_point(field_release:FromCs.Geta8keyRequest.BundleID)
  clear_has_bundleid();
  return bundleid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Geta8keyRequest::set_allocated_bundleid(::std::string* bundleid) {
  if (bundleid != NULL) {
    set_has_bundleid();
  } else {
    clear_has_bundleid();
  }
  bundleid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bundleid);
  // @@protoc_insertion_point(field_set_allocated:FromCs.Geta8keyRequest.BundleID)
}

// -------------------------------------------------------------------

// Geta8keyResponse

// required .FromCs.BaseResponse base = 1;
inline bool Geta8keyResponse::has_base() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Geta8keyResponse::set_has_base() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Geta8keyResponse::clear_has_base() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Geta8keyResponse::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseResponse::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseResponse& Geta8keyResponse::base() const {
  // @@protoc_insertion_point(field_get:FromCs.Geta8keyResponse.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseResponse::internal_default_instance();
}
inline ::FromCs::BaseResponse* Geta8keyResponse::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.Geta8keyResponse.base)
  return base_;
}
inline ::FromCs::BaseResponse* Geta8keyResponse::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.Geta8keyResponse.base)
  clear_has_base();
  ::FromCs::BaseResponse* temp = base_;
  base_ = NULL;
  return temp;
}
inline void Geta8keyResponse::set_allocated_base(::FromCs::BaseResponse* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.Geta8keyResponse.base)
}

// optional string FullURL = 2;
inline bool Geta8keyResponse::has_fullurl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Geta8keyResponse::set_has_fullurl() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Geta8keyResponse::clear_has_fullurl() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Geta8keyResponse::clear_fullurl() {
  fullurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fullurl();
}
inline const ::std::string& Geta8keyResponse::fullurl() const {
  // @@protoc_insertion_point(field_get:FromCs.Geta8keyResponse.FullURL)
  return fullurl_.GetNoArena();
}
inline void Geta8keyResponse::set_fullurl(const ::std::string& value) {
  set_has_fullurl();
  fullurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.Geta8keyResponse.FullURL)
}
#if LANG_CXX11
inline void Geta8keyResponse::set_fullurl(::std::string&& value) {
  set_has_fullurl();
  fullurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.Geta8keyResponse.FullURL)
}
#endif
inline void Geta8keyResponse::set_fullurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fullurl();
  fullurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.Geta8keyResponse.FullURL)
}
inline void Geta8keyResponse::set_fullurl(const char* value, size_t size) {
  set_has_fullurl();
  fullurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.Geta8keyResponse.FullURL)
}
inline ::std::string* Geta8keyResponse::mutable_fullurl() {
  set_has_fullurl();
  // @@protoc_insertion_point(field_mutable:FromCs.Geta8keyResponse.FullURL)
  return fullurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Geta8keyResponse::release_fullurl() {
  // @@protoc_insertion_point(field_release:FromCs.Geta8keyResponse.FullURL)
  clear_has_fullurl();
  return fullurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Geta8keyResponse::set_allocated_fullurl(::std::string* fullurl) {
  if (fullurl != NULL) {
    set_has_fullurl();
  } else {
    clear_has_fullurl();
  }
  fullurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fullurl);
  // @@protoc_insertion_point(field_set_allocated:FromCs.Geta8keyResponse.FullURL)
}

// optional string A8Key = 3;
inline bool Geta8keyResponse::has_a8key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Geta8keyResponse::set_has_a8key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Geta8keyResponse::clear_has_a8key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Geta8keyResponse::clear_a8key() {
  a8key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_a8key();
}
inline const ::std::string& Geta8keyResponse::a8key() const {
  // @@protoc_insertion_point(field_get:FromCs.Geta8keyResponse.A8Key)
  return a8key_.GetNoArena();
}
inline void Geta8keyResponse::set_a8key(const ::std::string& value) {
  set_has_a8key();
  a8key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.Geta8keyResponse.A8Key)
}
#if LANG_CXX11
inline void Geta8keyResponse::set_a8key(::std::string&& value) {
  set_has_a8key();
  a8key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.Geta8keyResponse.A8Key)
}
#endif
inline void Geta8keyResponse::set_a8key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_a8key();
  a8key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.Geta8keyResponse.A8Key)
}
inline void Geta8keyResponse::set_a8key(const char* value, size_t size) {
  set_has_a8key();
  a8key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.Geta8keyResponse.A8Key)
}
inline ::std::string* Geta8keyResponse::mutable_a8key() {
  set_has_a8key();
  // @@protoc_insertion_point(field_mutable:FromCs.Geta8keyResponse.A8Key)
  return a8key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Geta8keyResponse::release_a8key() {
  // @@protoc_insertion_point(field_release:FromCs.Geta8keyResponse.A8Key)
  clear_has_a8key();
  return a8key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Geta8keyResponse::set_allocated_a8key(::std::string* a8key) {
  if (a8key != NULL) {
    set_has_a8key();
  } else {
    clear_has_a8key();
  }
  a8key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), a8key);
  // @@protoc_insertion_point(field_set_allocated:FromCs.Geta8keyResponse.A8Key)
}

// optional int32 ActionCode = 4;
inline bool Geta8keyResponse::has_actioncode() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Geta8keyResponse::set_has_actioncode() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Geta8keyResponse::clear_has_actioncode() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Geta8keyResponse::clear_actioncode() {
  actioncode_ = 0;
  clear_has_actioncode();
}
inline ::google::protobuf::int32 Geta8keyResponse::actioncode() const {
  // @@protoc_insertion_point(field_get:FromCs.Geta8keyResponse.ActionCode)
  return actioncode_;
}
inline void Geta8keyResponse::set_actioncode(::google::protobuf::int32 value) {
  set_has_actioncode();
  actioncode_ = value;
  // @@protoc_insertion_point(field_set:FromCs.Geta8keyResponse.ActionCode)
}

// optional string Title = 5;
inline bool Geta8keyResponse::has_title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Geta8keyResponse::set_has_title() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Geta8keyResponse::clear_has_title() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Geta8keyResponse::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& Geta8keyResponse::title() const {
  // @@protoc_insertion_point(field_get:FromCs.Geta8keyResponse.Title)
  return title_.GetNoArena();
}
inline void Geta8keyResponse::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.Geta8keyResponse.Title)
}
#if LANG_CXX11
inline void Geta8keyResponse::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.Geta8keyResponse.Title)
}
#endif
inline void Geta8keyResponse::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.Geta8keyResponse.Title)
}
inline void Geta8keyResponse::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.Geta8keyResponse.Title)
}
inline ::std::string* Geta8keyResponse::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:FromCs.Geta8keyResponse.Title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Geta8keyResponse::release_title() {
  // @@protoc_insertion_point(field_release:FromCs.Geta8keyResponse.Title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Geta8keyResponse::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:FromCs.Geta8keyResponse.Title)
}

// optional string Content = 6;
inline bool Geta8keyResponse::has_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Geta8keyResponse::set_has_content() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Geta8keyResponse::clear_has_content() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Geta8keyResponse::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
inline const ::std::string& Geta8keyResponse::content() const {
  // @@protoc_insertion_point(field_get:FromCs.Geta8keyResponse.Content)
  return content_.GetNoArena();
}
inline void Geta8keyResponse::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.Geta8keyResponse.Content)
}
#if LANG_CXX11
inline void Geta8keyResponse::set_content(::std::string&& value) {
  set_has_content();
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.Geta8keyResponse.Content)
}
#endif
inline void Geta8keyResponse::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.Geta8keyResponse.Content)
}
inline void Geta8keyResponse::set_content(const char* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.Geta8keyResponse.Content)
}
inline ::std::string* Geta8keyResponse::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:FromCs.Geta8keyResponse.Content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Geta8keyResponse::release_content() {
  // @@protoc_insertion_point(field_release:FromCs.Geta8keyResponse.Content)
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Geta8keyResponse::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:FromCs.Geta8keyResponse.Content)
}

// optional .FromCs.JSAPIPermission Permission = 7;
inline bool Geta8keyResponse::has_permission() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Geta8keyResponse::set_has_permission() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Geta8keyResponse::clear_has_permission() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Geta8keyResponse::clear_permission() {
  if (permission_ != NULL) permission_->::FromCs::JSAPIPermission::Clear();
  clear_has_permission();
}
inline const ::FromCs::JSAPIPermission& Geta8keyResponse::permission() const {
  // @@protoc_insertion_point(field_get:FromCs.Geta8keyResponse.Permission)
  return permission_ != NULL ? *permission_
                         : *::FromCs::JSAPIPermission::internal_default_instance();
}
inline ::FromCs::JSAPIPermission* Geta8keyResponse::mutable_permission() {
  set_has_permission();
  if (permission_ == NULL) {
    permission_ = new ::FromCs::JSAPIPermission;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.Geta8keyResponse.Permission)
  return permission_;
}
inline ::FromCs::JSAPIPermission* Geta8keyResponse::release_permission() {
  // @@protoc_insertion_point(field_release:FromCs.Geta8keyResponse.Permission)
  clear_has_permission();
  ::FromCs::JSAPIPermission* temp = permission_;
  permission_ = NULL;
  return temp;
}
inline void Geta8keyResponse::set_allocated_permission(::FromCs::JSAPIPermission* permission) {
  delete permission_;
  permission_ = permission;
  if (permission) {
    set_has_permission();
  } else {
    clear_has_permission();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.Geta8keyResponse.Permission)
}

// optional .FromCs.GeneralControlBitSet ControlBitSet = 8;
inline bool Geta8keyResponse::has_controlbitset() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Geta8keyResponse::set_has_controlbitset() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Geta8keyResponse::clear_has_controlbitset() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Geta8keyResponse::clear_controlbitset() {
  if (controlbitset_ != NULL) controlbitset_->::FromCs::GeneralControlBitSet::Clear();
  clear_has_controlbitset();
}
inline const ::FromCs::GeneralControlBitSet& Geta8keyResponse::controlbitset() const {
  // @@protoc_insertion_point(field_get:FromCs.Geta8keyResponse.ControlBitSet)
  return controlbitset_ != NULL ? *controlbitset_
                         : *::FromCs::GeneralControlBitSet::internal_default_instance();
}
inline ::FromCs::GeneralControlBitSet* Geta8keyResponse::mutable_controlbitset() {
  set_has_controlbitset();
  if (controlbitset_ == NULL) {
    controlbitset_ = new ::FromCs::GeneralControlBitSet;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.Geta8keyResponse.ControlBitSet)
  return controlbitset_;
}
inline ::FromCs::GeneralControlBitSet* Geta8keyResponse::release_controlbitset() {
  // @@protoc_insertion_point(field_release:FromCs.Geta8keyResponse.ControlBitSet)
  clear_has_controlbitset();
  ::FromCs::GeneralControlBitSet* temp = controlbitset_;
  controlbitset_ = NULL;
  return temp;
}
inline void Geta8keyResponse::set_allocated_controlbitset(::FromCs::GeneralControlBitSet* controlbitset) {
  delete controlbitset_;
  controlbitset_ = controlbitset;
  if (controlbitset) {
    set_has_controlbitset();
  } else {
    clear_has_controlbitset();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.Geta8keyResponse.ControlBitSet)
}

// optional string UserName = 9;
inline bool Geta8keyResponse::has_username() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Geta8keyResponse::set_has_username() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Geta8keyResponse::clear_has_username() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Geta8keyResponse::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& Geta8keyResponse::username() const {
  // @@protoc_insertion_point(field_get:FromCs.Geta8keyResponse.UserName)
  return username_.GetNoArena();
}
inline void Geta8keyResponse::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.Geta8keyResponse.UserName)
}
#if LANG_CXX11
inline void Geta8keyResponse::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.Geta8keyResponse.UserName)
}
#endif
inline void Geta8keyResponse::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.Geta8keyResponse.UserName)
}
inline void Geta8keyResponse::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.Geta8keyResponse.UserName)
}
inline ::std::string* Geta8keyResponse::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:FromCs.Geta8keyResponse.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Geta8keyResponse::release_username() {
  // @@protoc_insertion_point(field_release:FromCs.Geta8keyResponse.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Geta8keyResponse::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:FromCs.Geta8keyResponse.UserName)
}

// optional string ShareUrl = 15;
inline bool Geta8keyResponse::has_shareurl() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Geta8keyResponse::set_has_shareurl() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Geta8keyResponse::clear_has_shareurl() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Geta8keyResponse::clear_shareurl() {
  shareurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_shareurl();
}
inline const ::std::string& Geta8keyResponse::shareurl() const {
  // @@protoc_insertion_point(field_get:FromCs.Geta8keyResponse.ShareUrl)
  return shareurl_.GetNoArena();
}
inline void Geta8keyResponse::set_shareurl(const ::std::string& value) {
  set_has_shareurl();
  shareurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.Geta8keyResponse.ShareUrl)
}
#if LANG_CXX11
inline void Geta8keyResponse::set_shareurl(::std::string&& value) {
  set_has_shareurl();
  shareurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.Geta8keyResponse.ShareUrl)
}
#endif
inline void Geta8keyResponse::set_shareurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_shareurl();
  shareurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.Geta8keyResponse.ShareUrl)
}
inline void Geta8keyResponse::set_shareurl(const char* value, size_t size) {
  set_has_shareurl();
  shareurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.Geta8keyResponse.ShareUrl)
}
inline ::std::string* Geta8keyResponse::mutable_shareurl() {
  set_has_shareurl();
  // @@protoc_insertion_point(field_mutable:FromCs.Geta8keyResponse.ShareUrl)
  return shareurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Geta8keyResponse::release_shareurl() {
  // @@protoc_insertion_point(field_release:FromCs.Geta8keyResponse.ShareUrl)
  clear_has_shareurl();
  return shareurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Geta8keyResponse::set_allocated_shareurl(::std::string* shareurl) {
  if (shareurl != NULL) {
    set_has_shareurl();
  } else {
    clear_has_shareurl();
  }
  shareurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), shareurl);
  // @@protoc_insertion_point(field_set_allocated:FromCs.Geta8keyResponse.ShareUrl)
}

// optional int32 ScopeCount = 16;
inline bool Geta8keyResponse::has_scopecount() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Geta8keyResponse::set_has_scopecount() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Geta8keyResponse::clear_has_scopecount() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Geta8keyResponse::clear_scopecount() {
  scopecount_ = 0;
  clear_has_scopecount();
}
inline ::google::protobuf::int32 Geta8keyResponse::scopecount() const {
  // @@protoc_insertion_point(field_get:FromCs.Geta8keyResponse.ScopeCount)
  return scopecount_;
}
inline void Geta8keyResponse::set_scopecount(::google::protobuf::int32 value) {
  set_has_scopecount();
  scopecount_ = value;
  // @@protoc_insertion_point(field_set:FromCs.Geta8keyResponse.ScopeCount)
}

// repeated int32 ScopeList = 17;
inline int Geta8keyResponse::scopelist_size() const {
  return scopelist_.size();
}
inline void Geta8keyResponse::clear_scopelist() {
  scopelist_.Clear();
}
inline ::google::protobuf::int32 Geta8keyResponse::scopelist(int index) const {
  // @@protoc_insertion_point(field_get:FromCs.Geta8keyResponse.ScopeList)
  return scopelist_.Get(index);
}
inline void Geta8keyResponse::set_scopelist(int index, ::google::protobuf::int32 value) {
  scopelist_.Set(index, value);
  // @@protoc_insertion_point(field_set:FromCs.Geta8keyResponse.ScopeList)
}
inline void Geta8keyResponse::add_scopelist(::google::protobuf::int32 value) {
  scopelist_.Add(value);
  // @@protoc_insertion_point(field_add:FromCs.Geta8keyResponse.ScopeList)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Geta8keyResponse::scopelist() const {
  // @@protoc_insertion_point(field_list:FromCs.Geta8keyResponse.ScopeList)
  return scopelist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Geta8keyResponse::mutable_scopelist() {
  // @@protoc_insertion_point(field_mutable_list:FromCs.Geta8keyResponse.ScopeList)
  return &scopelist_;
}

// optional string antispamTicket = 18;
inline bool Geta8keyResponse::has_antispamticket() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Geta8keyResponse::set_has_antispamticket() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Geta8keyResponse::clear_has_antispamticket() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Geta8keyResponse::clear_antispamticket() {
  antispamticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_antispamticket();
}
inline const ::std::string& Geta8keyResponse::antispamticket() const {
  // @@protoc_insertion_point(field_get:FromCs.Geta8keyResponse.antispamTicket)
  return antispamticket_.GetNoArena();
}
inline void Geta8keyResponse::set_antispamticket(const ::std::string& value) {
  set_has_antispamticket();
  antispamticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.Geta8keyResponse.antispamTicket)
}
#if LANG_CXX11
inline void Geta8keyResponse::set_antispamticket(::std::string&& value) {
  set_has_antispamticket();
  antispamticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.Geta8keyResponse.antispamTicket)
}
#endif
inline void Geta8keyResponse::set_antispamticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_antispamticket();
  antispamticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.Geta8keyResponse.antispamTicket)
}
inline void Geta8keyResponse::set_antispamticket(const char* value, size_t size) {
  set_has_antispamticket();
  antispamticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.Geta8keyResponse.antispamTicket)
}
inline ::std::string* Geta8keyResponse::mutable_antispamticket() {
  set_has_antispamticket();
  // @@protoc_insertion_point(field_mutable:FromCs.Geta8keyResponse.antispamTicket)
  return antispamticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Geta8keyResponse::release_antispamticket() {
  // @@protoc_insertion_point(field_release:FromCs.Geta8keyResponse.antispamTicket)
  clear_has_antispamticket();
  return antispamticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Geta8keyResponse::set_allocated_antispamticket(::std::string* antispamticket) {
  if (antispamticket != NULL) {
    set_has_antispamticket();
  } else {
    clear_has_antispamticket();
  }
  antispamticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), antispamticket);
  // @@protoc_insertion_point(field_set_allocated:FromCs.Geta8keyResponse.antispamTicket)
}

// optional string ssid = 19;
inline bool Geta8keyResponse::has_ssid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Geta8keyResponse::set_has_ssid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Geta8keyResponse::clear_has_ssid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Geta8keyResponse::clear_ssid() {
  ssid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ssid();
}
inline const ::std::string& Geta8keyResponse::ssid() const {
  // @@protoc_insertion_point(field_get:FromCs.Geta8keyResponse.ssid)
  return ssid_.GetNoArena();
}
inline void Geta8keyResponse::set_ssid(const ::std::string& value) {
  set_has_ssid();
  ssid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.Geta8keyResponse.ssid)
}
#if LANG_CXX11
inline void Geta8keyResponse::set_ssid(::std::string&& value) {
  set_has_ssid();
  ssid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.Geta8keyResponse.ssid)
}
#endif
inline void Geta8keyResponse::set_ssid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ssid();
  ssid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.Geta8keyResponse.ssid)
}
inline void Geta8keyResponse::set_ssid(const char* value, size_t size) {
  set_has_ssid();
  ssid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.Geta8keyResponse.ssid)
}
inline ::std::string* Geta8keyResponse::mutable_ssid() {
  set_has_ssid();
  // @@protoc_insertion_point(field_mutable:FromCs.Geta8keyResponse.ssid)
  return ssid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Geta8keyResponse::release_ssid() {
  // @@protoc_insertion_point(field_release:FromCs.Geta8keyResponse.ssid)
  clear_has_ssid();
  return ssid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Geta8keyResponse::set_allocated_ssid(::std::string* ssid) {
  if (ssid != NULL) {
    set_has_ssid();
  } else {
    clear_has_ssid();
  }
  ssid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ssid);
  // @@protoc_insertion_point(field_set_allocated:FromCs.Geta8keyResponse.ssid)
}

// optional string mid = 20;
inline bool Geta8keyResponse::has_mid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Geta8keyResponse::set_has_mid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Geta8keyResponse::clear_has_mid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Geta8keyResponse::clear_mid() {
  mid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mid();
}
inline const ::std::string& Geta8keyResponse::mid() const {
  // @@protoc_insertion_point(field_get:FromCs.Geta8keyResponse.mid)
  return mid_.GetNoArena();
}
inline void Geta8keyResponse::set_mid(const ::std::string& value) {
  set_has_mid();
  mid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.Geta8keyResponse.mid)
}
#if LANG_CXX11
inline void Geta8keyResponse::set_mid(::std::string&& value) {
  set_has_mid();
  mid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.Geta8keyResponse.mid)
}
#endif
inline void Geta8keyResponse::set_mid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mid();
  mid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.Geta8keyResponse.mid)
}
inline void Geta8keyResponse::set_mid(const char* value, size_t size) {
  set_has_mid();
  mid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.Geta8keyResponse.mid)
}
inline ::std::string* Geta8keyResponse::mutable_mid() {
  set_has_mid();
  // @@protoc_insertion_point(field_mutable:FromCs.Geta8keyResponse.mid)
  return mid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Geta8keyResponse::release_mid() {
  // @@protoc_insertion_point(field_release:FromCs.Geta8keyResponse.mid)
  clear_has_mid();
  return mid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Geta8keyResponse::set_allocated_mid(::std::string* mid) {
  if (mid != NULL) {
    set_has_mid();
  } else {
    clear_has_mid();
  }
  mid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mid);
  // @@protoc_insertion_point(field_set_allocated:FromCs.Geta8keyResponse.mid)
}

// optional .FromCs.DeepLinkBitSet DeepLinkBT = 22;
inline bool Geta8keyResponse::has_deeplinkbt() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Geta8keyResponse::set_has_deeplinkbt() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Geta8keyResponse::clear_has_deeplinkbt() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Geta8keyResponse::clear_deeplinkbt() {
  if (deeplinkbt_ != NULL) deeplinkbt_->::FromCs::DeepLinkBitSet::Clear();
  clear_has_deeplinkbt();
}
inline const ::FromCs::DeepLinkBitSet& Geta8keyResponse::deeplinkbt() const {
  // @@protoc_insertion_point(field_get:FromCs.Geta8keyResponse.DeepLinkBT)
  return deeplinkbt_ != NULL ? *deeplinkbt_
                         : *::FromCs::DeepLinkBitSet::internal_default_instance();
}
inline ::FromCs::DeepLinkBitSet* Geta8keyResponse::mutable_deeplinkbt() {
  set_has_deeplinkbt();
  if (deeplinkbt_ == NULL) {
    deeplinkbt_ = new ::FromCs::DeepLinkBitSet;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.Geta8keyResponse.DeepLinkBT)
  return deeplinkbt_;
}
inline ::FromCs::DeepLinkBitSet* Geta8keyResponse::release_deeplinkbt() {
  // @@protoc_insertion_point(field_release:FromCs.Geta8keyResponse.DeepLinkBT)
  clear_has_deeplinkbt();
  ::FromCs::DeepLinkBitSet* temp = deeplinkbt_;
  deeplinkbt_ = NULL;
  return temp;
}
inline void Geta8keyResponse::set_allocated_deeplinkbt(::FromCs::DeepLinkBitSet* deeplinkbt) {
  delete deeplinkbt_;
  deeplinkbt_ = deeplinkbt;
  if (deeplinkbt) {
    set_has_deeplinkbt();
  } else {
    clear_has_deeplinkbt();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.Geta8keyResponse.DeepLinkBT)
}

// optional .FromCs.sKBuiltinBufferT jsapicontrolbytes = 23;
inline bool Geta8keyResponse::has_jsapicontrolbytes() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Geta8keyResponse::set_has_jsapicontrolbytes() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Geta8keyResponse::clear_has_jsapicontrolbytes() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Geta8keyResponse::clear_jsapicontrolbytes() {
  if (jsapicontrolbytes_ != NULL) jsapicontrolbytes_->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_jsapicontrolbytes();
}
inline const ::FromCs::sKBuiltinBufferT& Geta8keyResponse::jsapicontrolbytes() const {
  // @@protoc_insertion_point(field_get:FromCs.Geta8keyResponse.jsapicontrolbytes)
  return jsapicontrolbytes_ != NULL ? *jsapicontrolbytes_
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* Geta8keyResponse::mutable_jsapicontrolbytes() {
  set_has_jsapicontrolbytes();
  if (jsapicontrolbytes_ == NULL) {
    jsapicontrolbytes_ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.Geta8keyResponse.jsapicontrolbytes)
  return jsapicontrolbytes_;
}
inline ::FromCs::sKBuiltinBufferT* Geta8keyResponse::release_jsapicontrolbytes() {
  // @@protoc_insertion_point(field_release:FromCs.Geta8keyResponse.jsapicontrolbytes)
  clear_has_jsapicontrolbytes();
  ::FromCs::sKBuiltinBufferT* temp = jsapicontrolbytes_;
  jsapicontrolbytes_ = NULL;
  return temp;
}
inline void Geta8keyResponse::set_allocated_jsapicontrolbytes(::FromCs::sKBuiltinBufferT* jsapicontrolbytes) {
  delete jsapicontrolbytes_;
  jsapicontrolbytes_ = jsapicontrolbytes;
  if (jsapicontrolbytes) {
    set_has_jsapicontrolbytes();
  } else {
    clear_has_jsapicontrolbytes();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.Geta8keyResponse.jsapicontrolbytes)
}

// optional int32 HttpHeaderNumb = 24;
inline bool Geta8keyResponse::has_httpheadernumb() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Geta8keyResponse::set_has_httpheadernumb() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Geta8keyResponse::clear_has_httpheadernumb() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Geta8keyResponse::clear_httpheadernumb() {
  httpheadernumb_ = 0;
  clear_has_httpheadernumb();
}
inline ::google::protobuf::int32 Geta8keyResponse::httpheadernumb() const {
  // @@protoc_insertion_point(field_get:FromCs.Geta8keyResponse.HttpHeaderNumb)
  return httpheadernumb_;
}
inline void Geta8keyResponse::set_httpheadernumb(::google::protobuf::int32 value) {
  set_has_httpheadernumb();
  httpheadernumb_ = value;
  // @@protoc_insertion_point(field_set:FromCs.Geta8keyResponse.HttpHeaderNumb)
}

// repeated .FromCs.HTTPHeader HttpHeader = 25;
inline int Geta8keyResponse::httpheader_size() const {
  return httpheader_.size();
}
inline void Geta8keyResponse::clear_httpheader() {
  httpheader_.Clear();
}
inline const ::FromCs::HTTPHeader& Geta8keyResponse::httpheader(int index) const {
  // @@protoc_insertion_point(field_get:FromCs.Geta8keyResponse.HttpHeader)
  return httpheader_.Get(index);
}
inline ::FromCs::HTTPHeader* Geta8keyResponse::mutable_httpheader(int index) {
  // @@protoc_insertion_point(field_mutable:FromCs.Geta8keyResponse.HttpHeader)
  return httpheader_.Mutable(index);
}
inline ::FromCs::HTTPHeader* Geta8keyResponse::add_httpheader() {
  // @@protoc_insertion_point(field_add:FromCs.Geta8keyResponse.HttpHeader)
  return httpheader_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::FromCs::HTTPHeader >*
Geta8keyResponse::mutable_httpheader() {
  // @@protoc_insertion_point(field_mutable_list:FromCs.Geta8keyResponse.HttpHeader)
  return &httpheader_;
}
inline const ::google::protobuf::RepeatedPtrField< ::FromCs::HTTPHeader >&
Geta8keyResponse::httpheader() const {
  // @@protoc_insertion_point(field_list:FromCs.Geta8keyResponse.HttpHeader)
  return httpheader_;
}

// -------------------------------------------------------------------

// MMSnsPostRequest

// required .FromCs.BaseRequest base = 1;
inline bool MMSnsPostRequest::has_base() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MMSnsPostRequest::set_has_base() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MMSnsPostRequest::clear_has_base() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MMSnsPostRequest::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseRequest::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseRequest& MMSnsPostRequest::base() const {
  // @@protoc_insertion_point(field_get:FromCs.MMSnsPostRequest.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseRequest::internal_default_instance();
}
inline ::FromCs::BaseRequest* MMSnsPostRequest::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.MMSnsPostRequest.base)
  return base_;
}
inline ::FromCs::BaseRequest* MMSnsPostRequest::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.MMSnsPostRequest.base)
  clear_has_base();
  ::FromCs::BaseRequest* temp = base_;
  base_ = NULL;
  return temp;
}
inline void MMSnsPostRequest::set_allocated_base(::FromCs::BaseRequest* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.MMSnsPostRequest.base)
}

// required .FromCs.sKBuiltinBufferT ObjectDesc = 2;
inline bool MMSnsPostRequest::has_objectdesc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MMSnsPostRequest::set_has_objectdesc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MMSnsPostRequest::clear_has_objectdesc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MMSnsPostRequest::clear_objectdesc() {
  if (objectdesc_ != NULL) objectdesc_->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_objectdesc();
}
inline const ::FromCs::sKBuiltinBufferT& MMSnsPostRequest::objectdesc() const {
  // @@protoc_insertion_point(field_get:FromCs.MMSnsPostRequest.ObjectDesc)
  return objectdesc_ != NULL ? *objectdesc_
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* MMSnsPostRequest::mutable_objectdesc() {
  set_has_objectdesc();
  if (objectdesc_ == NULL) {
    objectdesc_ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.MMSnsPostRequest.ObjectDesc)
  return objectdesc_;
}
inline ::FromCs::sKBuiltinBufferT* MMSnsPostRequest::release_objectdesc() {
  // @@protoc_insertion_point(field_release:FromCs.MMSnsPostRequest.ObjectDesc)
  clear_has_objectdesc();
  ::FromCs::sKBuiltinBufferT* temp = objectdesc_;
  objectdesc_ = NULL;
  return temp;
}
inline void MMSnsPostRequest::set_allocated_objectdesc(::FromCs::sKBuiltinBufferT* objectdesc) {
  delete objectdesc_;
  objectdesc_ = objectdesc;
  if (objectdesc) {
    set_has_objectdesc();
  } else {
    clear_has_objectdesc();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.MMSnsPostRequest.ObjectDesc)
}

// optional int32 WithUserListNumb = 3;
inline bool MMSnsPostRequest::has_withuserlistnumb() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MMSnsPostRequest::set_has_withuserlistnumb() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MMSnsPostRequest::clear_has_withuserlistnumb() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MMSnsPostRequest::clear_withuserlistnumb() {
  withuserlistnumb_ = 0;
  clear_has_withuserlistnumb();
}
inline ::google::protobuf::int32 MMSnsPostRequest::withuserlistnumb() const {
  // @@protoc_insertion_point(field_get:FromCs.MMSnsPostRequest.WithUserListNumb)
  return withuserlistnumb_;
}
inline void MMSnsPostRequest::set_withuserlistnumb(::google::protobuf::int32 value) {
  set_has_withuserlistnumb();
  withuserlistnumb_ = value;
  // @@protoc_insertion_point(field_set:FromCs.MMSnsPostRequest.WithUserListNumb)
}

// repeated string WithUserList = 4;
inline int MMSnsPostRequest::withuserlist_size() const {
  return withuserlist_.size();
}
inline void MMSnsPostRequest::clear_withuserlist() {
  withuserlist_.Clear();
}
inline const ::std::string& MMSnsPostRequest::withuserlist(int index) const {
  // @@protoc_insertion_point(field_get:FromCs.MMSnsPostRequest.WithUserList)
  return withuserlist_.Get(index);
}
inline ::std::string* MMSnsPostRequest::mutable_withuserlist(int index) {
  // @@protoc_insertion_point(field_mutable:FromCs.MMSnsPostRequest.WithUserList)
  return withuserlist_.Mutable(index);
}
inline void MMSnsPostRequest::set_withuserlist(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:FromCs.MMSnsPostRequest.WithUserList)
  withuserlist_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void MMSnsPostRequest::set_withuserlist(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:FromCs.MMSnsPostRequest.WithUserList)
  withuserlist_.Mutable(index)->assign(std::move(value));
}
#endif
inline void MMSnsPostRequest::set_withuserlist(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  withuserlist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:FromCs.MMSnsPostRequest.WithUserList)
}
inline void MMSnsPostRequest::set_withuserlist(int index, const char* value, size_t size) {
  withuserlist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:FromCs.MMSnsPostRequest.WithUserList)
}
inline ::std::string* MMSnsPostRequest::add_withuserlist() {
  // @@protoc_insertion_point(field_add_mutable:FromCs.MMSnsPostRequest.WithUserList)
  return withuserlist_.Add();
}
inline void MMSnsPostRequest::add_withuserlist(const ::std::string& value) {
  withuserlist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:FromCs.MMSnsPostRequest.WithUserList)
}
#if LANG_CXX11
inline void MMSnsPostRequest::add_withuserlist(::std::string&& value) {
  withuserlist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:FromCs.MMSnsPostRequest.WithUserList)
}
#endif
inline void MMSnsPostRequest::add_withuserlist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  withuserlist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:FromCs.MMSnsPostRequest.WithUserList)
}
inline void MMSnsPostRequest::add_withuserlist(const char* value, size_t size) {
  withuserlist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:FromCs.MMSnsPostRequest.WithUserList)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MMSnsPostRequest::withuserlist() const {
  // @@protoc_insertion_point(field_list:FromCs.MMSnsPostRequest.WithUserList)
  return withuserlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MMSnsPostRequest::mutable_withuserlist() {
  // @@protoc_insertion_point(field_mutable_list:FromCs.MMSnsPostRequest.WithUserList)
  return &withuserlist_;
}

// optional int32 Privacy = 5;
inline bool MMSnsPostRequest::has_privacy() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MMSnsPostRequest::set_has_privacy() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MMSnsPostRequest::clear_has_privacy() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MMSnsPostRequest::clear_privacy() {
  privacy_ = 0;
  clear_has_privacy();
}
inline ::google::protobuf::int32 MMSnsPostRequest::privacy() const {
  // @@protoc_insertion_point(field_get:FromCs.MMSnsPostRequest.Privacy)
  return privacy_;
}
inline void MMSnsPostRequest::set_privacy(::google::protobuf::int32 value) {
  set_has_privacy();
  privacy_ = value;
  // @@protoc_insertion_point(field_set:FromCs.MMSnsPostRequest.Privacy)
}

// optional int32 SyncFlag = 6;
inline bool MMSnsPostRequest::has_syncflag() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MMSnsPostRequest::set_has_syncflag() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MMSnsPostRequest::clear_has_syncflag() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MMSnsPostRequest::clear_syncflag() {
  syncflag_ = 0;
  clear_has_syncflag();
}
inline ::google::protobuf::int32 MMSnsPostRequest::syncflag() const {
  // @@protoc_insertion_point(field_get:FromCs.MMSnsPostRequest.SyncFlag)
  return syncflag_;
}
inline void MMSnsPostRequest::set_syncflag(::google::protobuf::int32 value) {
  set_has_syncflag();
  syncflag_ = value;
  // @@protoc_insertion_point(field_set:FromCs.MMSnsPostRequest.SyncFlag)
}

// optional string ClientId = 7;
inline bool MMSnsPostRequest::has_clientid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MMSnsPostRequest::set_has_clientid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MMSnsPostRequest::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MMSnsPostRequest::clear_clientid() {
  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientid();
}
inline const ::std::string& MMSnsPostRequest::clientid() const {
  // @@protoc_insertion_point(field_get:FromCs.MMSnsPostRequest.ClientId)
  return clientid_.GetNoArena();
}
inline void MMSnsPostRequest::set_clientid(const ::std::string& value) {
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.MMSnsPostRequest.ClientId)
}
#if LANG_CXX11
inline void MMSnsPostRequest::set_clientid(::std::string&& value) {
  set_has_clientid();
  clientid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.MMSnsPostRequest.ClientId)
}
#endif
inline void MMSnsPostRequest::set_clientid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.MMSnsPostRequest.ClientId)
}
inline void MMSnsPostRequest::set_clientid(const char* value, size_t size) {
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.MMSnsPostRequest.ClientId)
}
inline ::std::string* MMSnsPostRequest::mutable_clientid() {
  set_has_clientid();
  // @@protoc_insertion_point(field_mutable:FromCs.MMSnsPostRequest.ClientId)
  return clientid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MMSnsPostRequest::release_clientid() {
  // @@protoc_insertion_point(field_release:FromCs.MMSnsPostRequest.ClientId)
  clear_has_clientid();
  return clientid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MMSnsPostRequest::set_allocated_clientid(::std::string* clientid) {
  if (clientid != NULL) {
    set_has_clientid();
  } else {
    clear_has_clientid();
  }
  clientid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientid);
  // @@protoc_insertion_point(field_set_allocated:FromCs.MMSnsPostRequest.ClientId)
}

// optional int32 PostBGImgType = 8;
inline bool MMSnsPostRequest::has_postbgimgtype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MMSnsPostRequest::set_has_postbgimgtype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MMSnsPostRequest::clear_has_postbgimgtype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MMSnsPostRequest::clear_postbgimgtype() {
  postbgimgtype_ = 0;
  clear_has_postbgimgtype();
}
inline ::google::protobuf::int32 MMSnsPostRequest::postbgimgtype() const {
  // @@protoc_insertion_point(field_get:FromCs.MMSnsPostRequest.PostBGImgType)
  return postbgimgtype_;
}
inline void MMSnsPostRequest::set_postbgimgtype(::google::protobuf::int32 value) {
  set_has_postbgimgtype();
  postbgimgtype_ = value;
  // @@protoc_insertion_point(field_set:FromCs.MMSnsPostRequest.PostBGImgType)
}

// optional int32 GroupCount = 9;
inline bool MMSnsPostRequest::has_groupcount() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MMSnsPostRequest::set_has_groupcount() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MMSnsPostRequest::clear_has_groupcount() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MMSnsPostRequest::clear_groupcount() {
  groupcount_ = 0;
  clear_has_groupcount();
}
inline ::google::protobuf::int32 MMSnsPostRequest::groupcount() const {
  // @@protoc_insertion_point(field_get:FromCs.MMSnsPostRequest.GroupCount)
  return groupcount_;
}
inline void MMSnsPostRequest::set_groupcount(::google::protobuf::int32 value) {
  set_has_groupcount();
  groupcount_ = value;
  // @@protoc_insertion_point(field_set:FromCs.MMSnsPostRequest.GroupCount)
}

// repeated string GroupIds = 10;
inline int MMSnsPostRequest::groupids_size() const {
  return groupids_.size();
}
inline void MMSnsPostRequest::clear_groupids() {
  groupids_.Clear();
}
inline const ::std::string& MMSnsPostRequest::groupids(int index) const {
  // @@protoc_insertion_point(field_get:FromCs.MMSnsPostRequest.GroupIds)
  return groupids_.Get(index);
}
inline ::std::string* MMSnsPostRequest::mutable_groupids(int index) {
  // @@protoc_insertion_point(field_mutable:FromCs.MMSnsPostRequest.GroupIds)
  return groupids_.Mutable(index);
}
inline void MMSnsPostRequest::set_groupids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:FromCs.MMSnsPostRequest.GroupIds)
  groupids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void MMSnsPostRequest::set_groupids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:FromCs.MMSnsPostRequest.GroupIds)
  groupids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void MMSnsPostRequest::set_groupids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  groupids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:FromCs.MMSnsPostRequest.GroupIds)
}
inline void MMSnsPostRequest::set_groupids(int index, const char* value, size_t size) {
  groupids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:FromCs.MMSnsPostRequest.GroupIds)
}
inline ::std::string* MMSnsPostRequest::add_groupids() {
  // @@protoc_insertion_point(field_add_mutable:FromCs.MMSnsPostRequest.GroupIds)
  return groupids_.Add();
}
inline void MMSnsPostRequest::add_groupids(const ::std::string& value) {
  groupids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:FromCs.MMSnsPostRequest.GroupIds)
}
#if LANG_CXX11
inline void MMSnsPostRequest::add_groupids(::std::string&& value) {
  groupids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:FromCs.MMSnsPostRequest.GroupIds)
}
#endif
inline void MMSnsPostRequest::add_groupids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  groupids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:FromCs.MMSnsPostRequest.GroupIds)
}
inline void MMSnsPostRequest::add_groupids(const char* value, size_t size) {
  groupids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:FromCs.MMSnsPostRequest.GroupIds)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MMSnsPostRequest::groupids() const {
  // @@protoc_insertion_point(field_list:FromCs.MMSnsPostRequest.GroupIds)
  return groupids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MMSnsPostRequest::mutable_groupids() {
  // @@protoc_insertion_point(field_mutable_list:FromCs.MMSnsPostRequest.GroupIds)
  return &groupids_;
}

// optional int32 ObjectSource = 11;
inline bool MMSnsPostRequest::has_objectsource() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MMSnsPostRequest::set_has_objectsource() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MMSnsPostRequest::clear_has_objectsource() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MMSnsPostRequest::clear_objectsource() {
  objectsource_ = 0;
  clear_has_objectsource();
}
inline ::google::protobuf::int32 MMSnsPostRequest::objectsource() const {
  // @@protoc_insertion_point(field_get:FromCs.MMSnsPostRequest.ObjectSource)
  return objectsource_;
}
inline void MMSnsPostRequest::set_objectsource(::google::protobuf::int32 value) {
  set_has_objectsource();
  objectsource_ = value;
  // @@protoc_insertion_point(field_set:FromCs.MMSnsPostRequest.ObjectSource)
}

// optional int64 ReferId = 12;
inline bool MMSnsPostRequest::has_referid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MMSnsPostRequest::set_has_referid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MMSnsPostRequest::clear_has_referid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MMSnsPostRequest::clear_referid() {
  referid_ = GOOGLE_LONGLONG(0);
  clear_has_referid();
}
inline ::google::protobuf::int64 MMSnsPostRequest::referid() const {
  // @@protoc_insertion_point(field_get:FromCs.MMSnsPostRequest.ReferId)
  return referid_;
}
inline void MMSnsPostRequest::set_referid(::google::protobuf::int64 value) {
  set_has_referid();
  referid_ = value;
  // @@protoc_insertion_point(field_set:FromCs.MMSnsPostRequest.ReferId)
}

// optional int32 BlackListNumb = 13;
inline bool MMSnsPostRequest::has_blacklistnumb() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MMSnsPostRequest::set_has_blacklistnumb() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MMSnsPostRequest::clear_has_blacklistnumb() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MMSnsPostRequest::clear_blacklistnumb() {
  blacklistnumb_ = 0;
  clear_has_blacklistnumb();
}
inline ::google::protobuf::int32 MMSnsPostRequest::blacklistnumb() const {
  // @@protoc_insertion_point(field_get:FromCs.MMSnsPostRequest.BlackListNumb)
  return blacklistnumb_;
}
inline void MMSnsPostRequest::set_blacklistnumb(::google::protobuf::int32 value) {
  set_has_blacklistnumb();
  blacklistnumb_ = value;
  // @@protoc_insertion_point(field_set:FromCs.MMSnsPostRequest.BlackListNumb)
}

// repeated string BlackList = 14;
inline int MMSnsPostRequest::blacklist_size() const {
  return blacklist_.size();
}
inline void MMSnsPostRequest::clear_blacklist() {
  blacklist_.Clear();
}
inline const ::std::string& MMSnsPostRequest::blacklist(int index) const {
  // @@protoc_insertion_point(field_get:FromCs.MMSnsPostRequest.BlackList)
  return blacklist_.Get(index);
}
inline ::std::string* MMSnsPostRequest::mutable_blacklist(int index) {
  // @@protoc_insertion_point(field_mutable:FromCs.MMSnsPostRequest.BlackList)
  return blacklist_.Mutable(index);
}
inline void MMSnsPostRequest::set_blacklist(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:FromCs.MMSnsPostRequest.BlackList)
  blacklist_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void MMSnsPostRequest::set_blacklist(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:FromCs.MMSnsPostRequest.BlackList)
  blacklist_.Mutable(index)->assign(std::move(value));
}
#endif
inline void MMSnsPostRequest::set_blacklist(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  blacklist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:FromCs.MMSnsPostRequest.BlackList)
}
inline void MMSnsPostRequest::set_blacklist(int index, const char* value, size_t size) {
  blacklist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:FromCs.MMSnsPostRequest.BlackList)
}
inline ::std::string* MMSnsPostRequest::add_blacklist() {
  // @@protoc_insertion_point(field_add_mutable:FromCs.MMSnsPostRequest.BlackList)
  return blacklist_.Add();
}
inline void MMSnsPostRequest::add_blacklist(const ::std::string& value) {
  blacklist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:FromCs.MMSnsPostRequest.BlackList)
}
#if LANG_CXX11
inline void MMSnsPostRequest::add_blacklist(::std::string&& value) {
  blacklist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:FromCs.MMSnsPostRequest.BlackList)
}
#endif
inline void MMSnsPostRequest::add_blacklist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  blacklist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:FromCs.MMSnsPostRequest.BlackList)
}
inline void MMSnsPostRequest::add_blacklist(const char* value, size_t size) {
  blacklist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:FromCs.MMSnsPostRequest.BlackList)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MMSnsPostRequest::blacklist() const {
  // @@protoc_insertion_point(field_list:FromCs.MMSnsPostRequest.BlackList)
  return blacklist_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MMSnsPostRequest::mutable_blacklist() {
  // @@protoc_insertion_point(field_mutable_list:FromCs.MMSnsPostRequest.BlackList)
  return &blacklist_;
}

// -------------------------------------------------------------------

// MMSnsPostResponse

// required .FromCs.BaseResponse base = 1;
inline bool MMSnsPostResponse::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MMSnsPostResponse::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MMSnsPostResponse::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MMSnsPostResponse::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseResponse::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseResponse& MMSnsPostResponse::base() const {
  // @@protoc_insertion_point(field_get:FromCs.MMSnsPostResponse.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseResponse::internal_default_instance();
}
inline ::FromCs::BaseResponse* MMSnsPostResponse::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.MMSnsPostResponse.base)
  return base_;
}
inline ::FromCs::BaseResponse* MMSnsPostResponse::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.MMSnsPostResponse.base)
  clear_has_base();
  ::FromCs::BaseResponse* temp = base_;
  base_ = NULL;
  return temp;
}
inline void MMSnsPostResponse::set_allocated_base(::FromCs::BaseResponse* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.MMSnsPostResponse.base)
}

// -------------------------------------------------------------------

// MmsnsuploadRequest

// required .FromCs.BaseRequest base = 1;
inline bool MmsnsuploadRequest::has_base() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MmsnsuploadRequest::set_has_base() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MmsnsuploadRequest::clear_has_base() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MmsnsuploadRequest::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseRequest::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseRequest& MmsnsuploadRequest::base() const {
  // @@protoc_insertion_point(field_get:FromCs.MmsnsuploadRequest.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseRequest::internal_default_instance();
}
inline ::FromCs::BaseRequest* MmsnsuploadRequest::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.MmsnsuploadRequest.base)
  return base_;
}
inline ::FromCs::BaseRequest* MmsnsuploadRequest::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.MmsnsuploadRequest.base)
  clear_has_base();
  ::FromCs::BaseRequest* temp = base_;
  base_ = NULL;
  return temp;
}
inline void MmsnsuploadRequest::set_allocated_base(::FromCs::BaseRequest* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.MmsnsuploadRequest.base)
}

// required int32 Type = 2;
inline bool MmsnsuploadRequest::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MmsnsuploadRequest::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MmsnsuploadRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MmsnsuploadRequest::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 MmsnsuploadRequest::type() const {
  // @@protoc_insertion_point(field_get:FromCs.MmsnsuploadRequest.Type)
  return type_;
}
inline void MmsnsuploadRequest::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:FromCs.MmsnsuploadRequest.Type)
}

// required int32 StartPos = 3;
inline bool MmsnsuploadRequest::has_startpos() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MmsnsuploadRequest::set_has_startpos() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MmsnsuploadRequest::clear_has_startpos() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MmsnsuploadRequest::clear_startpos() {
  startpos_ = 0;
  clear_has_startpos();
}
inline ::google::protobuf::int32 MmsnsuploadRequest::startpos() const {
  // @@protoc_insertion_point(field_get:FromCs.MmsnsuploadRequest.StartPos)
  return startpos_;
}
inline void MmsnsuploadRequest::set_startpos(::google::protobuf::int32 value) {
  set_has_startpos();
  startpos_ = value;
  // @@protoc_insertion_point(field_set:FromCs.MmsnsuploadRequest.StartPos)
}

// required int32 TotalLen = 4;
inline bool MmsnsuploadRequest::has_totallen() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MmsnsuploadRequest::set_has_totallen() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MmsnsuploadRequest::clear_has_totallen() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MmsnsuploadRequest::clear_totallen() {
  totallen_ = 0;
  clear_has_totallen();
}
inline ::google::protobuf::int32 MmsnsuploadRequest::totallen() const {
  // @@protoc_insertion_point(field_get:FromCs.MmsnsuploadRequest.TotalLen)
  return totallen_;
}
inline void MmsnsuploadRequest::set_totallen(::google::protobuf::int32 value) {
  set_has_totallen();
  totallen_ = value;
  // @@protoc_insertion_point(field_set:FromCs.MmsnsuploadRequest.TotalLen)
}

// required .FromCs.sKBuiltinBufferT Buffer = 5;
inline bool MmsnsuploadRequest::has_buffer() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MmsnsuploadRequest::set_has_buffer() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MmsnsuploadRequest::clear_has_buffer() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MmsnsuploadRequest::clear_buffer() {
  if (buffer_ != NULL) buffer_->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_buffer();
}
inline const ::FromCs::sKBuiltinBufferT& MmsnsuploadRequest::buffer() const {
  // @@protoc_insertion_point(field_get:FromCs.MmsnsuploadRequest.Buffer)
  return buffer_ != NULL ? *buffer_
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* MmsnsuploadRequest::mutable_buffer() {
  set_has_buffer();
  if (buffer_ == NULL) {
    buffer_ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.MmsnsuploadRequest.Buffer)
  return buffer_;
}
inline ::FromCs::sKBuiltinBufferT* MmsnsuploadRequest::release_buffer() {
  // @@protoc_insertion_point(field_release:FromCs.MmsnsuploadRequest.Buffer)
  clear_has_buffer();
  ::FromCs::sKBuiltinBufferT* temp = buffer_;
  buffer_ = NULL;
  return temp;
}
inline void MmsnsuploadRequest::set_allocated_buffer(::FromCs::sKBuiltinBufferT* buffer) {
  delete buffer_;
  buffer_ = buffer;
  if (buffer) {
    set_has_buffer();
  } else {
    clear_has_buffer();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.MmsnsuploadRequest.Buffer)
}

// optional string ClientId = 6;
inline bool MmsnsuploadRequest::has_clientid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MmsnsuploadRequest::set_has_clientid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MmsnsuploadRequest::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MmsnsuploadRequest::clear_clientid() {
  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientid();
}
inline const ::std::string& MmsnsuploadRequest::clientid() const {
  // @@protoc_insertion_point(field_get:FromCs.MmsnsuploadRequest.ClientId)
  return clientid_.GetNoArena();
}
inline void MmsnsuploadRequest::set_clientid(const ::std::string& value) {
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.MmsnsuploadRequest.ClientId)
}
#if LANG_CXX11
inline void MmsnsuploadRequest::set_clientid(::std::string&& value) {
  set_has_clientid();
  clientid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.MmsnsuploadRequest.ClientId)
}
#endif
inline void MmsnsuploadRequest::set_clientid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.MmsnsuploadRequest.ClientId)
}
inline void MmsnsuploadRequest::set_clientid(const char* value, size_t size) {
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.MmsnsuploadRequest.ClientId)
}
inline ::std::string* MmsnsuploadRequest::mutable_clientid() {
  set_has_clientid();
  // @@protoc_insertion_point(field_mutable:FromCs.MmsnsuploadRequest.ClientId)
  return clientid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MmsnsuploadRequest::release_clientid() {
  // @@protoc_insertion_point(field_release:FromCs.MmsnsuploadRequest.ClientId)
  clear_has_clientid();
  return clientid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MmsnsuploadRequest::set_allocated_clientid(::std::string* clientid) {
  if (clientid != NULL) {
    set_has_clientid();
  } else {
    clear_has_clientid();
  }
  clientid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientid);
  // @@protoc_insertion_point(field_set_allocated:FromCs.MmsnsuploadRequest.ClientId)
}

// optional int32 FilterStype = 7;
inline bool MmsnsuploadRequest::has_filterstype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MmsnsuploadRequest::set_has_filterstype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MmsnsuploadRequest::clear_has_filterstype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MmsnsuploadRequest::clear_filterstype() {
  filterstype_ = 0;
  clear_has_filterstype();
}
inline ::google::protobuf::int32 MmsnsuploadRequest::filterstype() const {
  // @@protoc_insertion_point(field_get:FromCs.MmsnsuploadRequest.FilterStype)
  return filterstype_;
}
inline void MmsnsuploadRequest::set_filterstype(::google::protobuf::int32 value) {
  set_has_filterstype();
  filterstype_ = value;
  // @@protoc_insertion_point(field_set:FromCs.MmsnsuploadRequest.FilterStype)
}

// optional int32 SyncFlag = 8;
inline bool MmsnsuploadRequest::has_syncflag() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MmsnsuploadRequest::set_has_syncflag() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MmsnsuploadRequest::clear_has_syncflag() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MmsnsuploadRequest::clear_syncflag() {
  syncflag_ = 0;
  clear_has_syncflag();
}
inline ::google::protobuf::int32 MmsnsuploadRequest::syncflag() const {
  // @@protoc_insertion_point(field_get:FromCs.MmsnsuploadRequest.SyncFlag)
  return syncflag_;
}
inline void MmsnsuploadRequest::set_syncflag(::google::protobuf::int32 value) {
  set_has_syncflag();
  syncflag_ = value;
  // @@protoc_insertion_point(field_set:FromCs.MmsnsuploadRequest.SyncFlag)
}

// optional string Description = 9;
inline bool MmsnsuploadRequest::has_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MmsnsuploadRequest::set_has_description() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MmsnsuploadRequest::clear_has_description() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MmsnsuploadRequest::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
inline const ::std::string& MmsnsuploadRequest::description() const {
  // @@protoc_insertion_point(field_get:FromCs.MmsnsuploadRequest.Description)
  return description_.GetNoArena();
}
inline void MmsnsuploadRequest::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.MmsnsuploadRequest.Description)
}
#if LANG_CXX11
inline void MmsnsuploadRequest::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.MmsnsuploadRequest.Description)
}
#endif
inline void MmsnsuploadRequest::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.MmsnsuploadRequest.Description)
}
inline void MmsnsuploadRequest::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.MmsnsuploadRequest.Description)
}
inline ::std::string* MmsnsuploadRequest::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:FromCs.MmsnsuploadRequest.Description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MmsnsuploadRequest::release_description() {
  // @@protoc_insertion_point(field_release:FromCs.MmsnsuploadRequest.Description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MmsnsuploadRequest::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:FromCs.MmsnsuploadRequest.Description)
}

// optional int32 PhotoFrom = 10;
inline bool MmsnsuploadRequest::has_photofrom() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MmsnsuploadRequest::set_has_photofrom() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MmsnsuploadRequest::clear_has_photofrom() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MmsnsuploadRequest::clear_photofrom() {
  photofrom_ = 0;
  clear_has_photofrom();
}
inline ::google::protobuf::int32 MmsnsuploadRequest::photofrom() const {
  // @@protoc_insertion_point(field_get:FromCs.MmsnsuploadRequest.PhotoFrom)
  return photofrom_;
}
inline void MmsnsuploadRequest::set_photofrom(::google::protobuf::int32 value) {
  set_has_photofrom();
  photofrom_ = value;
  // @@protoc_insertion_point(field_set:FromCs.MmsnsuploadRequest.PhotoFrom)
}

// optional int32 NetType = 11;
inline bool MmsnsuploadRequest::has_nettype() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MmsnsuploadRequest::set_has_nettype() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MmsnsuploadRequest::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MmsnsuploadRequest::clear_nettype() {
  nettype_ = 0;
  clear_has_nettype();
}
inline ::google::protobuf::int32 MmsnsuploadRequest::nettype() const {
  // @@protoc_insertion_point(field_get:FromCs.MmsnsuploadRequest.NetType)
  return nettype_;
}
inline void MmsnsuploadRequest::set_nettype(::google::protobuf::int32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:FromCs.MmsnsuploadRequest.NetType)
}

// optional .FromCs.TwitterInfoObj TwitterInfo = 12;
inline bool MmsnsuploadRequest::has_twitterinfo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MmsnsuploadRequest::set_has_twitterinfo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MmsnsuploadRequest::clear_has_twitterinfo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MmsnsuploadRequest::clear_twitterinfo() {
  if (twitterinfo_ != NULL) twitterinfo_->::FromCs::TwitterInfoObj::Clear();
  clear_has_twitterinfo();
}
inline const ::FromCs::TwitterInfoObj& MmsnsuploadRequest::twitterinfo() const {
  // @@protoc_insertion_point(field_get:FromCs.MmsnsuploadRequest.TwitterInfo)
  return twitterinfo_ != NULL ? *twitterinfo_
                         : *::FromCs::TwitterInfoObj::internal_default_instance();
}
inline ::FromCs::TwitterInfoObj* MmsnsuploadRequest::mutable_twitterinfo() {
  set_has_twitterinfo();
  if (twitterinfo_ == NULL) {
    twitterinfo_ = new ::FromCs::TwitterInfoObj;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.MmsnsuploadRequest.TwitterInfo)
  return twitterinfo_;
}
inline ::FromCs::TwitterInfoObj* MmsnsuploadRequest::release_twitterinfo() {
  // @@protoc_insertion_point(field_release:FromCs.MmsnsuploadRequest.TwitterInfo)
  clear_has_twitterinfo();
  ::FromCs::TwitterInfoObj* temp = twitterinfo_;
  twitterinfo_ = NULL;
  return temp;
}
inline void MmsnsuploadRequest::set_allocated_twitterinfo(::FromCs::TwitterInfoObj* twitterinfo) {
  delete twitterinfo_;
  twitterinfo_ = twitterinfo;
  if (twitterinfo) {
    set_has_twitterinfo();
  } else {
    clear_has_twitterinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.MmsnsuploadRequest.TwitterInfo)
}

// -------------------------------------------------------------------

// MmsnsuploadResponse

// required .FromCs.BaseResponse base = 1;
inline bool MmsnsuploadResponse::has_base() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MmsnsuploadResponse::set_has_base() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MmsnsuploadResponse::clear_has_base() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MmsnsuploadResponse::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseResponse::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseResponse& MmsnsuploadResponse::base() const {
  // @@protoc_insertion_point(field_get:FromCs.MmsnsuploadResponse.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseResponse::internal_default_instance();
}
inline ::FromCs::BaseResponse* MmsnsuploadResponse::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.MmsnsuploadResponse.base)
  return base_;
}
inline ::FromCs::BaseResponse* MmsnsuploadResponse::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.MmsnsuploadResponse.base)
  clear_has_base();
  ::FromCs::BaseResponse* temp = base_;
  base_ = NULL;
  return temp;
}
inline void MmsnsuploadResponse::set_allocated_base(::FromCs::BaseResponse* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.MmsnsuploadResponse.base)
}

// required int32 StartPos = 2;
inline bool MmsnsuploadResponse::has_startpos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MmsnsuploadResponse::set_has_startpos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MmsnsuploadResponse::clear_has_startpos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MmsnsuploadResponse::clear_startpos() {
  startpos_ = 0;
  clear_has_startpos();
}
inline ::google::protobuf::int32 MmsnsuploadResponse::startpos() const {
  // @@protoc_insertion_point(field_get:FromCs.MmsnsuploadResponse.StartPos)
  return startpos_;
}
inline void MmsnsuploadResponse::set_startpos(::google::protobuf::int32 value) {
  set_has_startpos();
  startpos_ = value;
  // @@protoc_insertion_point(field_set:FromCs.MmsnsuploadResponse.StartPos)
}

// required int32 TotalLen = 3;
inline bool MmsnsuploadResponse::has_totallen() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MmsnsuploadResponse::set_has_totallen() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MmsnsuploadResponse::clear_has_totallen() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MmsnsuploadResponse::clear_totallen() {
  totallen_ = 0;
  clear_has_totallen();
}
inline ::google::protobuf::int32 MmsnsuploadResponse::totallen() const {
  // @@protoc_insertion_point(field_get:FromCs.MmsnsuploadResponse.TotalLen)
  return totallen_;
}
inline void MmsnsuploadResponse::set_totallen(::google::protobuf::int32 value) {
  set_has_totallen();
  totallen_ = value;
  // @@protoc_insertion_point(field_set:FromCs.MmsnsuploadResponse.TotalLen)
}

// optional string ClientId = 4;
inline bool MmsnsuploadResponse::has_clientid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MmsnsuploadResponse::set_has_clientid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MmsnsuploadResponse::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MmsnsuploadResponse::clear_clientid() {
  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientid();
}
inline const ::std::string& MmsnsuploadResponse::clientid() const {
  // @@protoc_insertion_point(field_get:FromCs.MmsnsuploadResponse.ClientId)
  return clientid_.GetNoArena();
}
inline void MmsnsuploadResponse::set_clientid(const ::std::string& value) {
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.MmsnsuploadResponse.ClientId)
}
#if LANG_CXX11
inline void MmsnsuploadResponse::set_clientid(::std::string&& value) {
  set_has_clientid();
  clientid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.MmsnsuploadResponse.ClientId)
}
#endif
inline void MmsnsuploadResponse::set_clientid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.MmsnsuploadResponse.ClientId)
}
inline void MmsnsuploadResponse::set_clientid(const char* value, size_t size) {
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.MmsnsuploadResponse.ClientId)
}
inline ::std::string* MmsnsuploadResponse::mutable_clientid() {
  set_has_clientid();
  // @@protoc_insertion_point(field_mutable:FromCs.MmsnsuploadResponse.ClientId)
  return clientid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MmsnsuploadResponse::release_clientid() {
  // @@protoc_insertion_point(field_release:FromCs.MmsnsuploadResponse.ClientId)
  clear_has_clientid();
  return clientid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MmsnsuploadResponse::set_allocated_clientid(::std::string* clientid) {
  if (clientid != NULL) {
    set_has_clientid();
  } else {
    clear_has_clientid();
  }
  clientid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientid);
  // @@protoc_insertion_point(field_set_allocated:FromCs.MmsnsuploadResponse.ClientId)
}

// required .FromCs.BufferUrlObj BufferUrl = 5;
inline bool MmsnsuploadResponse::has_bufferurl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MmsnsuploadResponse::set_has_bufferurl() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MmsnsuploadResponse::clear_has_bufferurl() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MmsnsuploadResponse::clear_bufferurl() {
  if (bufferurl_ != NULL) bufferurl_->::FromCs::BufferUrlObj::Clear();
  clear_has_bufferurl();
}
inline const ::FromCs::BufferUrlObj& MmsnsuploadResponse::bufferurl() const {
  // @@protoc_insertion_point(field_get:FromCs.MmsnsuploadResponse.BufferUrl)
  return bufferurl_ != NULL ? *bufferurl_
                         : *::FromCs::BufferUrlObj::internal_default_instance();
}
inline ::FromCs::BufferUrlObj* MmsnsuploadResponse::mutable_bufferurl() {
  set_has_bufferurl();
  if (bufferurl_ == NULL) {
    bufferurl_ = new ::FromCs::BufferUrlObj;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.MmsnsuploadResponse.BufferUrl)
  return bufferurl_;
}
inline ::FromCs::BufferUrlObj* MmsnsuploadResponse::release_bufferurl() {
  // @@protoc_insertion_point(field_release:FromCs.MmsnsuploadResponse.BufferUrl)
  clear_has_bufferurl();
  ::FromCs::BufferUrlObj* temp = bufferurl_;
  bufferurl_ = NULL;
  return temp;
}
inline void MmsnsuploadResponse::set_allocated_bufferurl(::FromCs::BufferUrlObj* bufferurl) {
  delete bufferurl_;
  bufferurl_ = bufferurl;
  if (bufferurl) {
    set_has_bufferurl();
  } else {
    clear_has_bufferurl();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.MmsnsuploadResponse.BufferUrl)
}

// required int32 ThumbUrlCount = 6;
inline bool MmsnsuploadResponse::has_thumburlcount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MmsnsuploadResponse::set_has_thumburlcount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MmsnsuploadResponse::clear_has_thumburlcount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MmsnsuploadResponse::clear_thumburlcount() {
  thumburlcount_ = 0;
  clear_has_thumburlcount();
}
inline ::google::protobuf::int32 MmsnsuploadResponse::thumburlcount() const {
  // @@protoc_insertion_point(field_get:FromCs.MmsnsuploadResponse.ThumbUrlCount)
  return thumburlcount_;
}
inline void MmsnsuploadResponse::set_thumburlcount(::google::protobuf::int32 value) {
  set_has_thumburlcount();
  thumburlcount_ = value;
  // @@protoc_insertion_point(field_set:FromCs.MmsnsuploadResponse.ThumbUrlCount)
}

// repeated .FromCs.BufferUrlObj ThumbUrls = 7;
inline int MmsnsuploadResponse::thumburls_size() const {
  return thumburls_.size();
}
inline void MmsnsuploadResponse::clear_thumburls() {
  thumburls_.Clear();
}
inline const ::FromCs::BufferUrlObj& MmsnsuploadResponse::thumburls(int index) const {
  // @@protoc_insertion_point(field_get:FromCs.MmsnsuploadResponse.ThumbUrls)
  return thumburls_.Get(index);
}
inline ::FromCs::BufferUrlObj* MmsnsuploadResponse::mutable_thumburls(int index) {
  // @@protoc_insertion_point(field_mutable:FromCs.MmsnsuploadResponse.ThumbUrls)
  return thumburls_.Mutable(index);
}
inline ::FromCs::BufferUrlObj* MmsnsuploadResponse::add_thumburls() {
  // @@protoc_insertion_point(field_add:FromCs.MmsnsuploadResponse.ThumbUrls)
  return thumburls_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::FromCs::BufferUrlObj >*
MmsnsuploadResponse::mutable_thumburls() {
  // @@protoc_insertion_point(field_mutable_list:FromCs.MmsnsuploadResponse.ThumbUrls)
  return &thumburls_;
}
inline const ::google::protobuf::RepeatedPtrField< ::FromCs::BufferUrlObj >&
MmsnsuploadResponse::thumburls() const {
  // @@protoc_insertion_point(field_list:FromCs.MmsnsuploadResponse.ThumbUrls)
  return thumburls_;
}

// required int64 Id = 8;
inline bool MmsnsuploadResponse::has_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MmsnsuploadResponse::set_has_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MmsnsuploadResponse::clear_has_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MmsnsuploadResponse::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 MmsnsuploadResponse::id() const {
  // @@protoc_insertion_point(field_get:FromCs.MmsnsuploadResponse.Id)
  return id_;
}
inline void MmsnsuploadResponse::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:FromCs.MmsnsuploadResponse.Id)
}

// required int32 Type = 9;
inline bool MmsnsuploadResponse::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MmsnsuploadResponse::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MmsnsuploadResponse::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MmsnsuploadResponse::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 MmsnsuploadResponse::type() const {
  // @@protoc_insertion_point(field_get:FromCs.MmsnsuploadResponse.Type)
  return type_;
}
inline void MmsnsuploadResponse::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:FromCs.MmsnsuploadResponse.Type)
}

// -------------------------------------------------------------------

// UploadMsgImgRequest

// required .FromCs.BaseRequest base = 1;
inline bool UploadMsgImgRequest::has_base() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UploadMsgImgRequest::set_has_base() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UploadMsgImgRequest::clear_has_base() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UploadMsgImgRequest::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseRequest::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseRequest& UploadMsgImgRequest::base() const {
  // @@protoc_insertion_point(field_get:FromCs.UploadMsgImgRequest.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseRequest::internal_default_instance();
}
inline ::FromCs::BaseRequest* UploadMsgImgRequest::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.UploadMsgImgRequest.base)
  return base_;
}
inline ::FromCs::BaseRequest* UploadMsgImgRequest::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.UploadMsgImgRequest.base)
  clear_has_base();
  ::FromCs::BaseRequest* temp = base_;
  base_ = NULL;
  return temp;
}
inline void UploadMsgImgRequest::set_allocated_base(::FromCs::BaseRequest* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.UploadMsgImgRequest.base)
}

// required .FromCs.sKBuiltinstringT ClientImgId = 2;
inline bool UploadMsgImgRequest::has_clientimgid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UploadMsgImgRequest::set_has_clientimgid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UploadMsgImgRequest::clear_has_clientimgid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UploadMsgImgRequest::clear_clientimgid() {
  if (clientimgid_ != NULL) clientimgid_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_clientimgid();
}
inline const ::FromCs::sKBuiltinstringT& UploadMsgImgRequest::clientimgid() const {
  // @@protoc_insertion_point(field_get:FromCs.UploadMsgImgRequest.ClientImgId)
  return clientimgid_ != NULL ? *clientimgid_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* UploadMsgImgRequest::mutable_clientimgid() {
  set_has_clientimgid();
  if (clientimgid_ == NULL) {
    clientimgid_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.UploadMsgImgRequest.ClientImgId)
  return clientimgid_;
}
inline ::FromCs::sKBuiltinstringT* UploadMsgImgRequest::release_clientimgid() {
  // @@protoc_insertion_point(field_release:FromCs.UploadMsgImgRequest.ClientImgId)
  clear_has_clientimgid();
  ::FromCs::sKBuiltinstringT* temp = clientimgid_;
  clientimgid_ = NULL;
  return temp;
}
inline void UploadMsgImgRequest::set_allocated_clientimgid(::FromCs::sKBuiltinstringT* clientimgid) {
  delete clientimgid_;
  clientimgid_ = clientimgid;
  if (clientimgid) {
    set_has_clientimgid();
  } else {
    clear_has_clientimgid();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.UploadMsgImgRequest.ClientImgId)
}

// required .FromCs.sKBuiltinstringT FromUserName = 3;
inline bool UploadMsgImgRequest::has_fromusername() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void UploadMsgImgRequest::set_has_fromusername() {
  _has_bits_[0] |= 0x00000200u;
}
inline void UploadMsgImgRequest::clear_has_fromusername() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void UploadMsgImgRequest::clear_fromusername() {
  if (fromusername_ != NULL) fromusername_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_fromusername();
}
inline const ::FromCs::sKBuiltinstringT& UploadMsgImgRequest::fromusername() const {
  // @@protoc_insertion_point(field_get:FromCs.UploadMsgImgRequest.FromUserName)
  return fromusername_ != NULL ? *fromusername_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* UploadMsgImgRequest::mutable_fromusername() {
  set_has_fromusername();
  if (fromusername_ == NULL) {
    fromusername_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.UploadMsgImgRequest.FromUserName)
  return fromusername_;
}
inline ::FromCs::sKBuiltinstringT* UploadMsgImgRequest::release_fromusername() {
  // @@protoc_insertion_point(field_release:FromCs.UploadMsgImgRequest.FromUserName)
  clear_has_fromusername();
  ::FromCs::sKBuiltinstringT* temp = fromusername_;
  fromusername_ = NULL;
  return temp;
}
inline void UploadMsgImgRequest::set_allocated_fromusername(::FromCs::sKBuiltinstringT* fromusername) {
  delete fromusername_;
  fromusername_ = fromusername;
  if (fromusername) {
    set_has_fromusername();
  } else {
    clear_has_fromusername();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.UploadMsgImgRequest.FromUserName)
}

// required .FromCs.sKBuiltinstringT ToUserName = 4;
inline bool UploadMsgImgRequest::has_tousername() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void UploadMsgImgRequest::set_has_tousername() {
  _has_bits_[0] |= 0x00000400u;
}
inline void UploadMsgImgRequest::clear_has_tousername() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void UploadMsgImgRequest::clear_tousername() {
  if (tousername_ != NULL) tousername_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_tousername();
}
inline const ::FromCs::sKBuiltinstringT& UploadMsgImgRequest::tousername() const {
  // @@protoc_insertion_point(field_get:FromCs.UploadMsgImgRequest.ToUserName)
  return tousername_ != NULL ? *tousername_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* UploadMsgImgRequest::mutable_tousername() {
  set_has_tousername();
  if (tousername_ == NULL) {
    tousername_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.UploadMsgImgRequest.ToUserName)
  return tousername_;
}
inline ::FromCs::sKBuiltinstringT* UploadMsgImgRequest::release_tousername() {
  // @@protoc_insertion_point(field_release:FromCs.UploadMsgImgRequest.ToUserName)
  clear_has_tousername();
  ::FromCs::sKBuiltinstringT* temp = tousername_;
  tousername_ = NULL;
  return temp;
}
inline void UploadMsgImgRequest::set_allocated_tousername(::FromCs::sKBuiltinstringT* tousername) {
  delete tousername_;
  tousername_ = tousername;
  if (tousername) {
    set_has_tousername();
  } else {
    clear_has_tousername();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.UploadMsgImgRequest.ToUserName)
}

// required int32 TotalLen = 5;
inline bool UploadMsgImgRequest::has_totallen() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void UploadMsgImgRequest::set_has_totallen() {
  _has_bits_[0] |= 0x00001000u;
}
inline void UploadMsgImgRequest::clear_has_totallen() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void UploadMsgImgRequest::clear_totallen() {
  totallen_ = 0;
  clear_has_totallen();
}
inline ::google::protobuf::int32 UploadMsgImgRequest::totallen() const {
  // @@protoc_insertion_point(field_get:FromCs.UploadMsgImgRequest.TotalLen)
  return totallen_;
}
inline void UploadMsgImgRequest::set_totallen(::google::protobuf::int32 value) {
  set_has_totallen();
  totallen_ = value;
  // @@protoc_insertion_point(field_set:FromCs.UploadMsgImgRequest.TotalLen)
}

// required int32 StartPos = 6;
inline bool UploadMsgImgRequest::has_startpos() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void UploadMsgImgRequest::set_has_startpos() {
  _has_bits_[0] |= 0x00002000u;
}
inline void UploadMsgImgRequest::clear_has_startpos() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void UploadMsgImgRequest::clear_startpos() {
  startpos_ = 0;
  clear_has_startpos();
}
inline ::google::protobuf::int32 UploadMsgImgRequest::startpos() const {
  // @@protoc_insertion_point(field_get:FromCs.UploadMsgImgRequest.StartPos)
  return startpos_;
}
inline void UploadMsgImgRequest::set_startpos(::google::protobuf::int32 value) {
  set_has_startpos();
  startpos_ = value;
  // @@protoc_insertion_point(field_set:FromCs.UploadMsgImgRequest.StartPos)
}

// required int32 DataLen = 7;
inline bool UploadMsgImgRequest::has_datalen() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void UploadMsgImgRequest::set_has_datalen() {
  _has_bits_[0] |= 0x00004000u;
}
inline void UploadMsgImgRequest::clear_has_datalen() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void UploadMsgImgRequest::clear_datalen() {
  datalen_ = 0;
  clear_has_datalen();
}
inline ::google::protobuf::int32 UploadMsgImgRequest::datalen() const {
  // @@protoc_insertion_point(field_get:FromCs.UploadMsgImgRequest.DataLen)
  return datalen_;
}
inline void UploadMsgImgRequest::set_datalen(::google::protobuf::int32 value) {
  set_has_datalen();
  datalen_ = value;
  // @@protoc_insertion_point(field_set:FromCs.UploadMsgImgRequest.DataLen)
}

// required .FromCs.sKBuiltinBufferT Data = 8;
inline bool UploadMsgImgRequest::has_data() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void UploadMsgImgRequest::set_has_data() {
  _has_bits_[0] |= 0x00000800u;
}
inline void UploadMsgImgRequest::clear_has_data() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void UploadMsgImgRequest::clear_data() {
  if (data_ != NULL) data_->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_data();
}
inline const ::FromCs::sKBuiltinBufferT& UploadMsgImgRequest::data() const {
  // @@protoc_insertion_point(field_get:FromCs.UploadMsgImgRequest.Data)
  return data_ != NULL ? *data_
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* UploadMsgImgRequest::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    data_ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.UploadMsgImgRequest.Data)
  return data_;
}
inline ::FromCs::sKBuiltinBufferT* UploadMsgImgRequest::release_data() {
  // @@protoc_insertion_point(field_release:FromCs.UploadMsgImgRequest.Data)
  clear_has_data();
  ::FromCs::sKBuiltinBufferT* temp = data_;
  data_ = NULL;
  return temp;
}
inline void UploadMsgImgRequest::set_allocated_data(::FromCs::sKBuiltinBufferT* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.UploadMsgImgRequest.Data)
}

// optional int32 MsgType = 9;
inline bool UploadMsgImgRequest::has_msgtype() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void UploadMsgImgRequest::set_has_msgtype() {
  _has_bits_[0] |= 0x00008000u;
}
inline void UploadMsgImgRequest::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void UploadMsgImgRequest::clear_msgtype() {
  msgtype_ = 0;
  clear_has_msgtype();
}
inline ::google::protobuf::int32 UploadMsgImgRequest::msgtype() const {
  // @@protoc_insertion_point(field_get:FromCs.UploadMsgImgRequest.MsgType)
  return msgtype_;
}
inline void UploadMsgImgRequest::set_msgtype(::google::protobuf::int32 value) {
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:FromCs.UploadMsgImgRequest.MsgType)
}

// optional string MsgSource = 10;
inline bool UploadMsgImgRequest::has_msgsource() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UploadMsgImgRequest::set_has_msgsource() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UploadMsgImgRequest::clear_has_msgsource() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UploadMsgImgRequest::clear_msgsource() {
  msgsource_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msgsource();
}
inline const ::std::string& UploadMsgImgRequest::msgsource() const {
  // @@protoc_insertion_point(field_get:FromCs.UploadMsgImgRequest.MsgSource)
  return msgsource_.GetNoArena();
}
inline void UploadMsgImgRequest::set_msgsource(const ::std::string& value) {
  set_has_msgsource();
  msgsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.UploadMsgImgRequest.MsgSource)
}
#if LANG_CXX11
inline void UploadMsgImgRequest::set_msgsource(::std::string&& value) {
  set_has_msgsource();
  msgsource_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.UploadMsgImgRequest.MsgSource)
}
#endif
inline void UploadMsgImgRequest::set_msgsource(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msgsource();
  msgsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.UploadMsgImgRequest.MsgSource)
}
inline void UploadMsgImgRequest::set_msgsource(const char* value, size_t size) {
  set_has_msgsource();
  msgsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.UploadMsgImgRequest.MsgSource)
}
inline ::std::string* UploadMsgImgRequest::mutable_msgsource() {
  set_has_msgsource();
  // @@protoc_insertion_point(field_mutable:FromCs.UploadMsgImgRequest.MsgSource)
  return msgsource_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadMsgImgRequest::release_msgsource() {
  // @@protoc_insertion_point(field_release:FromCs.UploadMsgImgRequest.MsgSource)
  clear_has_msgsource();
  return msgsource_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadMsgImgRequest::set_allocated_msgsource(::std::string* msgsource) {
  if (msgsource != NULL) {
    set_has_msgsource();
  } else {
    clear_has_msgsource();
  }
  msgsource_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgsource);
  // @@protoc_insertion_point(field_set_allocated:FromCs.UploadMsgImgRequest.MsgSource)
}

// optional int32 CompressType = 11;
inline bool UploadMsgImgRequest::has_compresstype() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void UploadMsgImgRequest::set_has_compresstype() {
  _has_bits_[0] |= 0x00010000u;
}
inline void UploadMsgImgRequest::clear_has_compresstype() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void UploadMsgImgRequest::clear_compresstype() {
  compresstype_ = 0;
  clear_has_compresstype();
}
inline ::google::protobuf::int32 UploadMsgImgRequest::compresstype() const {
  // @@protoc_insertion_point(field_get:FromCs.UploadMsgImgRequest.CompressType)
  return compresstype_;
}
inline void UploadMsgImgRequest::set_compresstype(::google::protobuf::int32 value) {
  set_has_compresstype();
  compresstype_ = value;
  // @@protoc_insertion_point(field_set:FromCs.UploadMsgImgRequest.CompressType)
}

// optional int32 NetType = 12;
inline bool UploadMsgImgRequest::has_nettype() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void UploadMsgImgRequest::set_has_nettype() {
  _has_bits_[0] |= 0x00020000u;
}
inline void UploadMsgImgRequest::clear_has_nettype() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void UploadMsgImgRequest::clear_nettype() {
  nettype_ = 0;
  clear_has_nettype();
}
inline ::google::protobuf::int32 UploadMsgImgRequest::nettype() const {
  // @@protoc_insertion_point(field_get:FromCs.UploadMsgImgRequest.NetType)
  return nettype_;
}
inline void UploadMsgImgRequest::set_nettype(::google::protobuf::int32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:FromCs.UploadMsgImgRequest.NetType)
}

// optional int32 PhotoFrom = 13;
inline bool UploadMsgImgRequest::has_photofrom() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void UploadMsgImgRequest::set_has_photofrom() {
  _has_bits_[0] |= 0x00040000u;
}
inline void UploadMsgImgRequest::clear_has_photofrom() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void UploadMsgImgRequest::clear_photofrom() {
  photofrom_ = 0;
  clear_has_photofrom();
}
inline ::google::protobuf::int32 UploadMsgImgRequest::photofrom() const {
  // @@protoc_insertion_point(field_get:FromCs.UploadMsgImgRequest.PhotoFrom)
  return photofrom_;
}
inline void UploadMsgImgRequest::set_photofrom(::google::protobuf::int32 value) {
  set_has_photofrom();
  photofrom_ = value;
  // @@protoc_insertion_point(field_set:FromCs.UploadMsgImgRequest.PhotoFrom)
}

// optional string MediaId = 14;
inline bool UploadMsgImgRequest::has_mediaid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UploadMsgImgRequest::set_has_mediaid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UploadMsgImgRequest::clear_has_mediaid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UploadMsgImgRequest::clear_mediaid() {
  mediaid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mediaid();
}
inline const ::std::string& UploadMsgImgRequest::mediaid() const {
  // @@protoc_insertion_point(field_get:FromCs.UploadMsgImgRequest.MediaId)
  return mediaid_.GetNoArena();
}
inline void UploadMsgImgRequest::set_mediaid(const ::std::string& value) {
  set_has_mediaid();
  mediaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.UploadMsgImgRequest.MediaId)
}
#if LANG_CXX11
inline void UploadMsgImgRequest::set_mediaid(::std::string&& value) {
  set_has_mediaid();
  mediaid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.UploadMsgImgRequest.MediaId)
}
#endif
inline void UploadMsgImgRequest::set_mediaid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mediaid();
  mediaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.UploadMsgImgRequest.MediaId)
}
inline void UploadMsgImgRequest::set_mediaid(const char* value, size_t size) {
  set_has_mediaid();
  mediaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.UploadMsgImgRequest.MediaId)
}
inline ::std::string* UploadMsgImgRequest::mutable_mediaid() {
  set_has_mediaid();
  // @@protoc_insertion_point(field_mutable:FromCs.UploadMsgImgRequest.MediaId)
  return mediaid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadMsgImgRequest::release_mediaid() {
  // @@protoc_insertion_point(field_release:FromCs.UploadMsgImgRequest.MediaId)
  clear_has_mediaid();
  return mediaid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadMsgImgRequest::set_allocated_mediaid(::std::string* mediaid) {
  if (mediaid != NULL) {
    set_has_mediaid();
  } else {
    clear_has_mediaid();
  }
  mediaid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mediaid);
  // @@protoc_insertion_point(field_set_allocated:FromCs.UploadMsgImgRequest.MediaId)
}

// optional string CDNBigImgUrl = 15;
inline bool UploadMsgImgRequest::has_cdnbigimgurl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UploadMsgImgRequest::set_has_cdnbigimgurl() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UploadMsgImgRequest::clear_has_cdnbigimgurl() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UploadMsgImgRequest::clear_cdnbigimgurl() {
  cdnbigimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cdnbigimgurl();
}
inline const ::std::string& UploadMsgImgRequest::cdnbigimgurl() const {
  // @@protoc_insertion_point(field_get:FromCs.UploadMsgImgRequest.CDNBigImgUrl)
  return cdnbigimgurl_.GetNoArena();
}
inline void UploadMsgImgRequest::set_cdnbigimgurl(const ::std::string& value) {
  set_has_cdnbigimgurl();
  cdnbigimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.UploadMsgImgRequest.CDNBigImgUrl)
}
#if LANG_CXX11
inline void UploadMsgImgRequest::set_cdnbigimgurl(::std::string&& value) {
  set_has_cdnbigimgurl();
  cdnbigimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.UploadMsgImgRequest.CDNBigImgUrl)
}
#endif
inline void UploadMsgImgRequest::set_cdnbigimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cdnbigimgurl();
  cdnbigimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.UploadMsgImgRequest.CDNBigImgUrl)
}
inline void UploadMsgImgRequest::set_cdnbigimgurl(const char* value, size_t size) {
  set_has_cdnbigimgurl();
  cdnbigimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.UploadMsgImgRequest.CDNBigImgUrl)
}
inline ::std::string* UploadMsgImgRequest::mutable_cdnbigimgurl() {
  set_has_cdnbigimgurl();
  // @@protoc_insertion_point(field_mutable:FromCs.UploadMsgImgRequest.CDNBigImgUrl)
  return cdnbigimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadMsgImgRequest::release_cdnbigimgurl() {
  // @@protoc_insertion_point(field_release:FromCs.UploadMsgImgRequest.CDNBigImgUrl)
  clear_has_cdnbigimgurl();
  return cdnbigimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadMsgImgRequest::set_allocated_cdnbigimgurl(::std::string* cdnbigimgurl) {
  if (cdnbigimgurl != NULL) {
    set_has_cdnbigimgurl();
  } else {
    clear_has_cdnbigimgurl();
  }
  cdnbigimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cdnbigimgurl);
  // @@protoc_insertion_point(field_set_allocated:FromCs.UploadMsgImgRequest.CDNBigImgUrl)
}

// optional string CDNMidImgUrl = 16;
inline bool UploadMsgImgRequest::has_cdnmidimgurl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UploadMsgImgRequest::set_has_cdnmidimgurl() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UploadMsgImgRequest::clear_has_cdnmidimgurl() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UploadMsgImgRequest::clear_cdnmidimgurl() {
  cdnmidimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cdnmidimgurl();
}
inline const ::std::string& UploadMsgImgRequest::cdnmidimgurl() const {
  // @@protoc_insertion_point(field_get:FromCs.UploadMsgImgRequest.CDNMidImgUrl)
  return cdnmidimgurl_.GetNoArena();
}
inline void UploadMsgImgRequest::set_cdnmidimgurl(const ::std::string& value) {
  set_has_cdnmidimgurl();
  cdnmidimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.UploadMsgImgRequest.CDNMidImgUrl)
}
#if LANG_CXX11
inline void UploadMsgImgRequest::set_cdnmidimgurl(::std::string&& value) {
  set_has_cdnmidimgurl();
  cdnmidimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.UploadMsgImgRequest.CDNMidImgUrl)
}
#endif
inline void UploadMsgImgRequest::set_cdnmidimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cdnmidimgurl();
  cdnmidimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.UploadMsgImgRequest.CDNMidImgUrl)
}
inline void UploadMsgImgRequest::set_cdnmidimgurl(const char* value, size_t size) {
  set_has_cdnmidimgurl();
  cdnmidimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.UploadMsgImgRequest.CDNMidImgUrl)
}
inline ::std::string* UploadMsgImgRequest::mutable_cdnmidimgurl() {
  set_has_cdnmidimgurl();
  // @@protoc_insertion_point(field_mutable:FromCs.UploadMsgImgRequest.CDNMidImgUrl)
  return cdnmidimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadMsgImgRequest::release_cdnmidimgurl() {
  // @@protoc_insertion_point(field_release:FromCs.UploadMsgImgRequest.CDNMidImgUrl)
  clear_has_cdnmidimgurl();
  return cdnmidimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadMsgImgRequest::set_allocated_cdnmidimgurl(::std::string* cdnmidimgurl) {
  if (cdnmidimgurl != NULL) {
    set_has_cdnmidimgurl();
  } else {
    clear_has_cdnmidimgurl();
  }
  cdnmidimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cdnmidimgurl);
  // @@protoc_insertion_point(field_set_allocated:FromCs.UploadMsgImgRequest.CDNMidImgUrl)
}

// optional string AESKey = 17;
inline bool UploadMsgImgRequest::has_aeskey() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UploadMsgImgRequest::set_has_aeskey() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UploadMsgImgRequest::clear_has_aeskey() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UploadMsgImgRequest::clear_aeskey() {
  aeskey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_aeskey();
}
inline const ::std::string& UploadMsgImgRequest::aeskey() const {
  // @@protoc_insertion_point(field_get:FromCs.UploadMsgImgRequest.AESKey)
  return aeskey_.GetNoArena();
}
inline void UploadMsgImgRequest::set_aeskey(const ::std::string& value) {
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.UploadMsgImgRequest.AESKey)
}
#if LANG_CXX11
inline void UploadMsgImgRequest::set_aeskey(::std::string&& value) {
  set_has_aeskey();
  aeskey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.UploadMsgImgRequest.AESKey)
}
#endif
inline void UploadMsgImgRequest::set_aeskey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.UploadMsgImgRequest.AESKey)
}
inline void UploadMsgImgRequest::set_aeskey(const char* value, size_t size) {
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.UploadMsgImgRequest.AESKey)
}
inline ::std::string* UploadMsgImgRequest::mutable_aeskey() {
  set_has_aeskey();
  // @@protoc_insertion_point(field_mutable:FromCs.UploadMsgImgRequest.AESKey)
  return aeskey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadMsgImgRequest::release_aeskey() {
  // @@protoc_insertion_point(field_release:FromCs.UploadMsgImgRequest.AESKey)
  clear_has_aeskey();
  return aeskey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadMsgImgRequest::set_allocated_aeskey(::std::string* aeskey) {
  if (aeskey != NULL) {
    set_has_aeskey();
  } else {
    clear_has_aeskey();
  }
  aeskey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), aeskey);
  // @@protoc_insertion_point(field_set_allocated:FromCs.UploadMsgImgRequest.AESKey)
}

// optional int32 EncryVer = 18;
inline bool UploadMsgImgRequest::has_encryver() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void UploadMsgImgRequest::set_has_encryver() {
  _has_bits_[0] |= 0x00080000u;
}
inline void UploadMsgImgRequest::clear_has_encryver() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void UploadMsgImgRequest::clear_encryver() {
  encryver_ = 0;
  clear_has_encryver();
}
inline ::google::protobuf::int32 UploadMsgImgRequest::encryver() const {
  // @@protoc_insertion_point(field_get:FromCs.UploadMsgImgRequest.EncryVer)
  return encryver_;
}
inline void UploadMsgImgRequest::set_encryver(::google::protobuf::int32 value) {
  set_has_encryver();
  encryver_ = value;
  // @@protoc_insertion_point(field_set:FromCs.UploadMsgImgRequest.EncryVer)
}

// optional int32 CDNBigImgSize = 19;
inline bool UploadMsgImgRequest::has_cdnbigimgsize() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void UploadMsgImgRequest::set_has_cdnbigimgsize() {
  _has_bits_[0] |= 0x00100000u;
}
inline void UploadMsgImgRequest::clear_has_cdnbigimgsize() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void UploadMsgImgRequest::clear_cdnbigimgsize() {
  cdnbigimgsize_ = 0;
  clear_has_cdnbigimgsize();
}
inline ::google::protobuf::int32 UploadMsgImgRequest::cdnbigimgsize() const {
  // @@protoc_insertion_point(field_get:FromCs.UploadMsgImgRequest.CDNBigImgSize)
  return cdnbigimgsize_;
}
inline void UploadMsgImgRequest::set_cdnbigimgsize(::google::protobuf::int32 value) {
  set_has_cdnbigimgsize();
  cdnbigimgsize_ = value;
  // @@protoc_insertion_point(field_set:FromCs.UploadMsgImgRequest.CDNBigImgSize)
}

// optional int32 CDNMidImgSize = 20;
inline bool UploadMsgImgRequest::has_cdnmidimgsize() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void UploadMsgImgRequest::set_has_cdnmidimgsize() {
  _has_bits_[0] |= 0x00200000u;
}
inline void UploadMsgImgRequest::clear_has_cdnmidimgsize() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void UploadMsgImgRequest::clear_cdnmidimgsize() {
  cdnmidimgsize_ = 0;
  clear_has_cdnmidimgsize();
}
inline ::google::protobuf::int32 UploadMsgImgRequest::cdnmidimgsize() const {
  // @@protoc_insertion_point(field_get:FromCs.UploadMsgImgRequest.CDNMidImgSize)
  return cdnmidimgsize_;
}
inline void UploadMsgImgRequest::set_cdnmidimgsize(::google::protobuf::int32 value) {
  set_has_cdnmidimgsize();
  cdnmidimgsize_ = value;
  // @@protoc_insertion_point(field_set:FromCs.UploadMsgImgRequest.CDNMidImgSize)
}

// optional string CDNThumbImgUrl = 21;
inline bool UploadMsgImgRequest::has_cdnthumbimgurl() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UploadMsgImgRequest::set_has_cdnthumbimgurl() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UploadMsgImgRequest::clear_has_cdnthumbimgurl() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UploadMsgImgRequest::clear_cdnthumbimgurl() {
  cdnthumbimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cdnthumbimgurl();
}
inline const ::std::string& UploadMsgImgRequest::cdnthumbimgurl() const {
  // @@protoc_insertion_point(field_get:FromCs.UploadMsgImgRequest.CDNThumbImgUrl)
  return cdnthumbimgurl_.GetNoArena();
}
inline void UploadMsgImgRequest::set_cdnthumbimgurl(const ::std::string& value) {
  set_has_cdnthumbimgurl();
  cdnthumbimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.UploadMsgImgRequest.CDNThumbImgUrl)
}
#if LANG_CXX11
inline void UploadMsgImgRequest::set_cdnthumbimgurl(::std::string&& value) {
  set_has_cdnthumbimgurl();
  cdnthumbimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.UploadMsgImgRequest.CDNThumbImgUrl)
}
#endif
inline void UploadMsgImgRequest::set_cdnthumbimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cdnthumbimgurl();
  cdnthumbimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.UploadMsgImgRequest.CDNThumbImgUrl)
}
inline void UploadMsgImgRequest::set_cdnthumbimgurl(const char* value, size_t size) {
  set_has_cdnthumbimgurl();
  cdnthumbimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.UploadMsgImgRequest.CDNThumbImgUrl)
}
inline ::std::string* UploadMsgImgRequest::mutable_cdnthumbimgurl() {
  set_has_cdnthumbimgurl();
  // @@protoc_insertion_point(field_mutable:FromCs.UploadMsgImgRequest.CDNThumbImgUrl)
  return cdnthumbimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadMsgImgRequest::release_cdnthumbimgurl() {
  // @@protoc_insertion_point(field_release:FromCs.UploadMsgImgRequest.CDNThumbImgUrl)
  clear_has_cdnthumbimgurl();
  return cdnthumbimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadMsgImgRequest::set_allocated_cdnthumbimgurl(::std::string* cdnthumbimgurl) {
  if (cdnthumbimgurl != NULL) {
    set_has_cdnthumbimgurl();
  } else {
    clear_has_cdnthumbimgurl();
  }
  cdnthumbimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cdnthumbimgurl);
  // @@protoc_insertion_point(field_set_allocated:FromCs.UploadMsgImgRequest.CDNThumbImgUrl)
}

// optional int32 CDNThumbImgSize = 22;
inline bool UploadMsgImgRequest::has_cdnthumbimgsize() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void UploadMsgImgRequest::set_has_cdnthumbimgsize() {
  _has_bits_[0] |= 0x00400000u;
}
inline void UploadMsgImgRequest::clear_has_cdnthumbimgsize() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void UploadMsgImgRequest::clear_cdnthumbimgsize() {
  cdnthumbimgsize_ = 0;
  clear_has_cdnthumbimgsize();
}
inline ::google::protobuf::int32 UploadMsgImgRequest::cdnthumbimgsize() const {
  // @@protoc_insertion_point(field_get:FromCs.UploadMsgImgRequest.CDNThumbImgSize)
  return cdnthumbimgsize_;
}
inline void UploadMsgImgRequest::set_cdnthumbimgsize(::google::protobuf::int32 value) {
  set_has_cdnthumbimgsize();
  cdnthumbimgsize_ = value;
  // @@protoc_insertion_point(field_set:FromCs.UploadMsgImgRequest.CDNThumbImgSize)
}

// optional int32 CDNThumbImgHeight = 23;
inline bool UploadMsgImgRequest::has_cdnthumbimgheight() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void UploadMsgImgRequest::set_has_cdnthumbimgheight() {
  _has_bits_[0] |= 0x00800000u;
}
inline void UploadMsgImgRequest::clear_has_cdnthumbimgheight() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void UploadMsgImgRequest::clear_cdnthumbimgheight() {
  cdnthumbimgheight_ = 0;
  clear_has_cdnthumbimgheight();
}
inline ::google::protobuf::int32 UploadMsgImgRequest::cdnthumbimgheight() const {
  // @@protoc_insertion_point(field_get:FromCs.UploadMsgImgRequest.CDNThumbImgHeight)
  return cdnthumbimgheight_;
}
inline void UploadMsgImgRequest::set_cdnthumbimgheight(::google::protobuf::int32 value) {
  set_has_cdnthumbimgheight();
  cdnthumbimgheight_ = value;
  // @@protoc_insertion_point(field_set:FromCs.UploadMsgImgRequest.CDNThumbImgHeight)
}

// optional int32 CDNThumbImgWidth = 24;
inline bool UploadMsgImgRequest::has_cdnthumbimgwidth() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void UploadMsgImgRequest::set_has_cdnthumbimgwidth() {
  _has_bits_[0] |= 0x01000000u;
}
inline void UploadMsgImgRequest::clear_has_cdnthumbimgwidth() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void UploadMsgImgRequest::clear_cdnthumbimgwidth() {
  cdnthumbimgwidth_ = 0;
  clear_has_cdnthumbimgwidth();
}
inline ::google::protobuf::int32 UploadMsgImgRequest::cdnthumbimgwidth() const {
  // @@protoc_insertion_point(field_get:FromCs.UploadMsgImgRequest.CDNThumbImgWidth)
  return cdnthumbimgwidth_;
}
inline void UploadMsgImgRequest::set_cdnthumbimgwidth(::google::protobuf::int32 value) {
  set_has_cdnthumbimgwidth();
  cdnthumbimgwidth_ = value;
  // @@protoc_insertion_point(field_set:FromCs.UploadMsgImgRequest.CDNThumbImgWidth)
}

// optional string CDNThumbAESKey = 25;
inline bool UploadMsgImgRequest::has_cdnthumbaeskey() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UploadMsgImgRequest::set_has_cdnthumbaeskey() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UploadMsgImgRequest::clear_has_cdnthumbaeskey() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UploadMsgImgRequest::clear_cdnthumbaeskey() {
  cdnthumbaeskey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cdnthumbaeskey();
}
inline const ::std::string& UploadMsgImgRequest::cdnthumbaeskey() const {
  // @@protoc_insertion_point(field_get:FromCs.UploadMsgImgRequest.CDNThumbAESKey)
  return cdnthumbaeskey_.GetNoArena();
}
inline void UploadMsgImgRequest::set_cdnthumbaeskey(const ::std::string& value) {
  set_has_cdnthumbaeskey();
  cdnthumbaeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.UploadMsgImgRequest.CDNThumbAESKey)
}
#if LANG_CXX11
inline void UploadMsgImgRequest::set_cdnthumbaeskey(::std::string&& value) {
  set_has_cdnthumbaeskey();
  cdnthumbaeskey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.UploadMsgImgRequest.CDNThumbAESKey)
}
#endif
inline void UploadMsgImgRequest::set_cdnthumbaeskey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cdnthumbaeskey();
  cdnthumbaeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.UploadMsgImgRequest.CDNThumbAESKey)
}
inline void UploadMsgImgRequest::set_cdnthumbaeskey(const char* value, size_t size) {
  set_has_cdnthumbaeskey();
  cdnthumbaeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.UploadMsgImgRequest.CDNThumbAESKey)
}
inline ::std::string* UploadMsgImgRequest::mutable_cdnthumbaeskey() {
  set_has_cdnthumbaeskey();
  // @@protoc_insertion_point(field_mutable:FromCs.UploadMsgImgRequest.CDNThumbAESKey)
  return cdnthumbaeskey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadMsgImgRequest::release_cdnthumbaeskey() {
  // @@protoc_insertion_point(field_release:FromCs.UploadMsgImgRequest.CDNThumbAESKey)
  clear_has_cdnthumbaeskey();
  return cdnthumbaeskey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadMsgImgRequest::set_allocated_cdnthumbaeskey(::std::string* cdnthumbaeskey) {
  if (cdnthumbaeskey != NULL) {
    set_has_cdnthumbaeskey();
  } else {
    clear_has_cdnthumbaeskey();
  }
  cdnthumbaeskey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cdnthumbaeskey);
  // @@protoc_insertion_point(field_set_allocated:FromCs.UploadMsgImgRequest.CDNThumbAESKey)
}

// -------------------------------------------------------------------

// UploadMsgImgResponse

// required .FromCs.BaseResponse base = 1;
inline bool UploadMsgImgResponse::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UploadMsgImgResponse::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UploadMsgImgResponse::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UploadMsgImgResponse::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseResponse::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseResponse& UploadMsgImgResponse::base() const {
  // @@protoc_insertion_point(field_get:FromCs.UploadMsgImgResponse.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseResponse::internal_default_instance();
}
inline ::FromCs::BaseResponse* UploadMsgImgResponse::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.UploadMsgImgResponse.base)
  return base_;
}
inline ::FromCs::BaseResponse* UploadMsgImgResponse::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.UploadMsgImgResponse.base)
  clear_has_base();
  ::FromCs::BaseResponse* temp = base_;
  base_ = NULL;
  return temp;
}
inline void UploadMsgImgResponse::set_allocated_base(::FromCs::BaseResponse* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.UploadMsgImgResponse.base)
}

// required int32 MsgId = 2;
inline bool UploadMsgImgResponse::has_msgid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UploadMsgImgResponse::set_has_msgid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UploadMsgImgResponse::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UploadMsgImgResponse::clear_msgid() {
  msgid_ = 0;
  clear_has_msgid();
}
inline ::google::protobuf::int32 UploadMsgImgResponse::msgid() const {
  // @@protoc_insertion_point(field_get:FromCs.UploadMsgImgResponse.MsgId)
  return msgid_;
}
inline void UploadMsgImgResponse::set_msgid(::google::protobuf::int32 value) {
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:FromCs.UploadMsgImgResponse.MsgId)
}

// required .FromCs.sKBuiltinstringT ClientImgId = 3;
inline bool UploadMsgImgResponse::has_clientimgid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UploadMsgImgResponse::set_has_clientimgid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UploadMsgImgResponse::clear_has_clientimgid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UploadMsgImgResponse::clear_clientimgid() {
  if (clientimgid_ != NULL) clientimgid_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_clientimgid();
}
inline const ::FromCs::sKBuiltinstringT& UploadMsgImgResponse::clientimgid() const {
  // @@protoc_insertion_point(field_get:FromCs.UploadMsgImgResponse.ClientImgId)
  return clientimgid_ != NULL ? *clientimgid_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* UploadMsgImgResponse::mutable_clientimgid() {
  set_has_clientimgid();
  if (clientimgid_ == NULL) {
    clientimgid_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.UploadMsgImgResponse.ClientImgId)
  return clientimgid_;
}
inline ::FromCs::sKBuiltinstringT* UploadMsgImgResponse::release_clientimgid() {
  // @@protoc_insertion_point(field_release:FromCs.UploadMsgImgResponse.ClientImgId)
  clear_has_clientimgid();
  ::FromCs::sKBuiltinstringT* temp = clientimgid_;
  clientimgid_ = NULL;
  return temp;
}
inline void UploadMsgImgResponse::set_allocated_clientimgid(::FromCs::sKBuiltinstringT* clientimgid) {
  delete clientimgid_;
  clientimgid_ = clientimgid;
  if (clientimgid) {
    set_has_clientimgid();
  } else {
    clear_has_clientimgid();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.UploadMsgImgResponse.ClientImgId)
}

// required .FromCs.sKBuiltinstringT FromUserName = 4;
inline bool UploadMsgImgResponse::has_fromusername() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UploadMsgImgResponse::set_has_fromusername() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UploadMsgImgResponse::clear_has_fromusername() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UploadMsgImgResponse::clear_fromusername() {
  if (fromusername_ != NULL) fromusername_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_fromusername();
}
inline const ::FromCs::sKBuiltinstringT& UploadMsgImgResponse::fromusername() const {
  // @@protoc_insertion_point(field_get:FromCs.UploadMsgImgResponse.FromUserName)
  return fromusername_ != NULL ? *fromusername_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* UploadMsgImgResponse::mutable_fromusername() {
  set_has_fromusername();
  if (fromusername_ == NULL) {
    fromusername_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.UploadMsgImgResponse.FromUserName)
  return fromusername_;
}
inline ::FromCs::sKBuiltinstringT* UploadMsgImgResponse::release_fromusername() {
  // @@protoc_insertion_point(field_release:FromCs.UploadMsgImgResponse.FromUserName)
  clear_has_fromusername();
  ::FromCs::sKBuiltinstringT* temp = fromusername_;
  fromusername_ = NULL;
  return temp;
}
inline void UploadMsgImgResponse::set_allocated_fromusername(::FromCs::sKBuiltinstringT* fromusername) {
  delete fromusername_;
  fromusername_ = fromusername;
  if (fromusername) {
    set_has_fromusername();
  } else {
    clear_has_fromusername();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.UploadMsgImgResponse.FromUserName)
}

// required .FromCs.sKBuiltinstringT ToUserName = 5;
inline bool UploadMsgImgResponse::has_tousername() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UploadMsgImgResponse::set_has_tousername() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UploadMsgImgResponse::clear_has_tousername() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UploadMsgImgResponse::clear_tousername() {
  if (tousername_ != NULL) tousername_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_tousername();
}
inline const ::FromCs::sKBuiltinstringT& UploadMsgImgResponse::tousername() const {
  // @@protoc_insertion_point(field_get:FromCs.UploadMsgImgResponse.ToUserName)
  return tousername_ != NULL ? *tousername_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* UploadMsgImgResponse::mutable_tousername() {
  set_has_tousername();
  if (tousername_ == NULL) {
    tousername_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.UploadMsgImgResponse.ToUserName)
  return tousername_;
}
inline ::FromCs::sKBuiltinstringT* UploadMsgImgResponse::release_tousername() {
  // @@protoc_insertion_point(field_release:FromCs.UploadMsgImgResponse.ToUserName)
  clear_has_tousername();
  ::FromCs::sKBuiltinstringT* temp = tousername_;
  tousername_ = NULL;
  return temp;
}
inline void UploadMsgImgResponse::set_allocated_tousername(::FromCs::sKBuiltinstringT* tousername) {
  delete tousername_;
  tousername_ = tousername;
  if (tousername) {
    set_has_tousername();
  } else {
    clear_has_tousername();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.UploadMsgImgResponse.ToUserName)
}

// required int32 TotalLen = 6;
inline bool UploadMsgImgResponse::has_totallen() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UploadMsgImgResponse::set_has_totallen() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UploadMsgImgResponse::clear_has_totallen() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UploadMsgImgResponse::clear_totallen() {
  totallen_ = 0;
  clear_has_totallen();
}
inline ::google::protobuf::int32 UploadMsgImgResponse::totallen() const {
  // @@protoc_insertion_point(field_get:FromCs.UploadMsgImgResponse.TotalLen)
  return totallen_;
}
inline void UploadMsgImgResponse::set_totallen(::google::protobuf::int32 value) {
  set_has_totallen();
  totallen_ = value;
  // @@protoc_insertion_point(field_set:FromCs.UploadMsgImgResponse.TotalLen)
}

// required int32 StartPos = 7;
inline bool UploadMsgImgResponse::has_startpos() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UploadMsgImgResponse::set_has_startpos() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UploadMsgImgResponse::clear_has_startpos() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UploadMsgImgResponse::clear_startpos() {
  startpos_ = 0;
  clear_has_startpos();
}
inline ::google::protobuf::int32 UploadMsgImgResponse::startpos() const {
  // @@protoc_insertion_point(field_get:FromCs.UploadMsgImgResponse.StartPos)
  return startpos_;
}
inline void UploadMsgImgResponse::set_startpos(::google::protobuf::int32 value) {
  set_has_startpos();
  startpos_ = value;
  // @@protoc_insertion_point(field_set:FromCs.UploadMsgImgResponse.StartPos)
}

// required int32 DataLen = 8;
inline bool UploadMsgImgResponse::has_datalen() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UploadMsgImgResponse::set_has_datalen() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UploadMsgImgResponse::clear_has_datalen() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UploadMsgImgResponse::clear_datalen() {
  datalen_ = 0;
  clear_has_datalen();
}
inline ::google::protobuf::int32 UploadMsgImgResponse::datalen() const {
  // @@protoc_insertion_point(field_get:FromCs.UploadMsgImgResponse.DataLen)
  return datalen_;
}
inline void UploadMsgImgResponse::set_datalen(::google::protobuf::int32 value) {
  set_has_datalen();
  datalen_ = value;
  // @@protoc_insertion_point(field_set:FromCs.UploadMsgImgResponse.DataLen)
}

// required int32 CreateTime = 9;
inline bool UploadMsgImgResponse::has_createtime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UploadMsgImgResponse::set_has_createtime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UploadMsgImgResponse::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UploadMsgImgResponse::clear_createtime() {
  createtime_ = 0;
  clear_has_createtime();
}
inline ::google::protobuf::int32 UploadMsgImgResponse::createtime() const {
  // @@protoc_insertion_point(field_get:FromCs.UploadMsgImgResponse.CreateTime)
  return createtime_;
}
inline void UploadMsgImgResponse::set_createtime(::google::protobuf::int32 value) {
  set_has_createtime();
  createtime_ = value;
  // @@protoc_insertion_point(field_set:FromCs.UploadMsgImgResponse.CreateTime)
}

// -------------------------------------------------------------------

// GeneralSetRequest

// required .FromCs.BaseRequest base = 1;
inline bool GeneralSetRequest::has_base() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GeneralSetRequest::set_has_base() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GeneralSetRequest::clear_has_base() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GeneralSetRequest::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseRequest::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseRequest& GeneralSetRequest::base() const {
  // @@protoc_insertion_point(field_get:FromCs.GeneralSetRequest.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseRequest::internal_default_instance();
}
inline ::FromCs::BaseRequest* GeneralSetRequest::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.GeneralSetRequest.base)
  return base_;
}
inline ::FromCs::BaseRequest* GeneralSetRequest::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.GeneralSetRequest.base)
  clear_has_base();
  ::FromCs::BaseRequest* temp = base_;
  base_ = NULL;
  return temp;
}
inline void GeneralSetRequest::set_allocated_base(::FromCs::BaseRequest* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.GeneralSetRequest.base)
}

// required int32 SetType = 2;
inline bool GeneralSetRequest::has_settype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GeneralSetRequest::set_has_settype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GeneralSetRequest::clear_has_settype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GeneralSetRequest::clear_settype() {
  settype_ = 0;
  clear_has_settype();
}
inline ::google::protobuf::int32 GeneralSetRequest::settype() const {
  // @@protoc_insertion_point(field_get:FromCs.GeneralSetRequest.SetType)
  return settype_;
}
inline void GeneralSetRequest::set_settype(::google::protobuf::int32 value) {
  set_has_settype();
  settype_ = value;
  // @@protoc_insertion_point(field_set:FromCs.GeneralSetRequest.SetType)
}

// optional string SetValue = 3;
inline bool GeneralSetRequest::has_setvalue() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GeneralSetRequest::set_has_setvalue() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GeneralSetRequest::clear_has_setvalue() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GeneralSetRequest::clear_setvalue() {
  setvalue_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_setvalue();
}
inline const ::std::string& GeneralSetRequest::setvalue() const {
  // @@protoc_insertion_point(field_get:FromCs.GeneralSetRequest.SetValue)
  return setvalue_.GetNoArena();
}
inline void GeneralSetRequest::set_setvalue(const ::std::string& value) {
  set_has_setvalue();
  setvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.GeneralSetRequest.SetValue)
}
#if LANG_CXX11
inline void GeneralSetRequest::set_setvalue(::std::string&& value) {
  set_has_setvalue();
  setvalue_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.GeneralSetRequest.SetValue)
}
#endif
inline void GeneralSetRequest::set_setvalue(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_setvalue();
  setvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.GeneralSetRequest.SetValue)
}
inline void GeneralSetRequest::set_setvalue(const char* value, size_t size) {
  set_has_setvalue();
  setvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.GeneralSetRequest.SetValue)
}
inline ::std::string* GeneralSetRequest::mutable_setvalue() {
  set_has_setvalue();
  // @@protoc_insertion_point(field_mutable:FromCs.GeneralSetRequest.SetValue)
  return setvalue_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GeneralSetRequest::release_setvalue() {
  // @@protoc_insertion_point(field_release:FromCs.GeneralSetRequest.SetValue)
  clear_has_setvalue();
  return setvalue_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GeneralSetRequest::set_allocated_setvalue(::std::string* setvalue) {
  if (setvalue != NULL) {
    set_has_setvalue();
  } else {
    clear_has_setvalue();
  }
  setvalue_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), setvalue);
  // @@protoc_insertion_point(field_set_allocated:FromCs.GeneralSetRequest.SetValue)
}

// -------------------------------------------------------------------

// GeneralSetResponse

// required .FromCs.BaseResponse base = 1;
inline bool GeneralSetResponse::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GeneralSetResponse::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GeneralSetResponse::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GeneralSetResponse::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseResponse::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseResponse& GeneralSetResponse::base() const {
  // @@protoc_insertion_point(field_get:FromCs.GeneralSetResponse.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseResponse::internal_default_instance();
}
inline ::FromCs::BaseResponse* GeneralSetResponse::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.GeneralSetResponse.base)
  return base_;
}
inline ::FromCs::BaseResponse* GeneralSetResponse::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.GeneralSetResponse.base)
  clear_has_base();
  ::FromCs::BaseResponse* temp = base_;
  base_ = NULL;
  return temp;
}
inline void GeneralSetResponse::set_allocated_base(::FromCs::BaseResponse* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.GeneralSetResponse.base)
}

// -------------------------------------------------------------------

// UnbindqqRequest

// required .FromCs.BaseRequest base = 1;
inline bool UnbindqqRequest::has_base() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UnbindqqRequest::set_has_base() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UnbindqqRequest::clear_has_base() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UnbindqqRequest::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseRequest::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseRequest& UnbindqqRequest::base() const {
  // @@protoc_insertion_point(field_get:FromCs.UnbindqqRequest.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseRequest::internal_default_instance();
}
inline ::FromCs::BaseRequest* UnbindqqRequest::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.UnbindqqRequest.base)
  return base_;
}
inline ::FromCs::BaseRequest* UnbindqqRequest::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.UnbindqqRequest.base)
  clear_has_base();
  ::FromCs::BaseRequest* temp = base_;
  base_ = NULL;
  return temp;
}
inline void UnbindqqRequest::set_allocated_base(::FromCs::BaseRequest* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.UnbindqqRequest.base)
}

// optional string Ticket = 2;
inline bool UnbindqqRequest::has_ticket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnbindqqRequest::set_has_ticket() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnbindqqRequest::clear_has_ticket() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnbindqqRequest::clear_ticket() {
  ticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ticket();
}
inline const ::std::string& UnbindqqRequest::ticket() const {
  // @@protoc_insertion_point(field_get:FromCs.UnbindqqRequest.Ticket)
  return ticket_.GetNoArena();
}
inline void UnbindqqRequest::set_ticket(const ::std::string& value) {
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.UnbindqqRequest.Ticket)
}
#if LANG_CXX11
inline void UnbindqqRequest::set_ticket(::std::string&& value) {
  set_has_ticket();
  ticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.UnbindqqRequest.Ticket)
}
#endif
inline void UnbindqqRequest::set_ticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.UnbindqqRequest.Ticket)
}
inline void UnbindqqRequest::set_ticket(const char* value, size_t size) {
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.UnbindqqRequest.Ticket)
}
inline ::std::string* UnbindqqRequest::mutable_ticket() {
  set_has_ticket();
  // @@protoc_insertion_point(field_mutable:FromCs.UnbindqqRequest.Ticket)
  return ticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UnbindqqRequest::release_ticket() {
  // @@protoc_insertion_point(field_release:FromCs.UnbindqqRequest.Ticket)
  clear_has_ticket();
  return ticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnbindqqRequest::set_allocated_ticket(::std::string* ticket) {
  if (ticket != NULL) {
    set_has_ticket();
  } else {
    clear_has_ticket();
  }
  ticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ticket);
  // @@protoc_insertion_point(field_set_allocated:FromCs.UnbindqqRequest.Ticket)
}

// -------------------------------------------------------------------

// UnbindqqResponse

// required .FromCs.BaseResponse base = 1;
inline bool UnbindqqResponse::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnbindqqResponse::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnbindqqResponse::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnbindqqResponse::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseResponse::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseResponse& UnbindqqResponse::base() const {
  // @@protoc_insertion_point(field_get:FromCs.UnbindqqResponse.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseResponse::internal_default_instance();
}
inline ::FromCs::BaseResponse* UnbindqqResponse::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.UnbindqqResponse.base)
  return base_;
}
inline ::FromCs::BaseResponse* UnbindqqResponse::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.UnbindqqResponse.base)
  clear_has_base();
  ::FromCs::BaseResponse* temp = base_;
  base_ = NULL;
  return temp;
}
inline void UnbindqqResponse::set_allocated_base(::FromCs::BaseResponse* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.UnbindqqResponse.base)
}

// -------------------------------------------------------------------

// SendAppMsgRequest

// required .FromCs.BaseRequest base = 1;
inline bool SendAppMsgRequest::has_base() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SendAppMsgRequest::set_has_base() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SendAppMsgRequest::clear_has_base() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SendAppMsgRequest::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseRequest::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseRequest& SendAppMsgRequest::base() const {
  // @@protoc_insertion_point(field_get:FromCs.SendAppMsgRequest.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseRequest::internal_default_instance();
}
inline ::FromCs::BaseRequest* SendAppMsgRequest::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.SendAppMsgRequest.base)
  return base_;
}
inline ::FromCs::BaseRequest* SendAppMsgRequest::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.SendAppMsgRequest.base)
  clear_has_base();
  ::FromCs::BaseRequest* temp = base_;
  base_ = NULL;
  return temp;
}
inline void SendAppMsgRequest::set_allocated_base(::FromCs::BaseRequest* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.SendAppMsgRequest.base)
}

// required .FromCs.AppMsgObject Msg = 2;
inline bool SendAppMsgRequest::has_msg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SendAppMsgRequest::set_has_msg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SendAppMsgRequest::clear_has_msg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SendAppMsgRequest::clear_msg() {
  if (msg_ != NULL) msg_->::FromCs::AppMsgObject::Clear();
  clear_has_msg();
}
inline const ::FromCs::AppMsgObject& SendAppMsgRequest::msg() const {
  // @@protoc_insertion_point(field_get:FromCs.SendAppMsgRequest.Msg)
  return msg_ != NULL ? *msg_
                         : *::FromCs::AppMsgObject::internal_default_instance();
}
inline ::FromCs::AppMsgObject* SendAppMsgRequest::mutable_msg() {
  set_has_msg();
  if (msg_ == NULL) {
    msg_ = new ::FromCs::AppMsgObject;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.SendAppMsgRequest.Msg)
  return msg_;
}
inline ::FromCs::AppMsgObject* SendAppMsgRequest::release_msg() {
  // @@protoc_insertion_point(field_release:FromCs.SendAppMsgRequest.Msg)
  clear_has_msg();
  ::FromCs::AppMsgObject* temp = msg_;
  msg_ = NULL;
  return temp;
}
inline void SendAppMsgRequest::set_allocated_msg(::FromCs::AppMsgObject* msg) {
  delete msg_;
  msg_ = msg;
  if (msg) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.SendAppMsgRequest.Msg)
}

// optional string CommentUrl = 3;
inline bool SendAppMsgRequest::has_commenturl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SendAppMsgRequest::set_has_commenturl() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SendAppMsgRequest::clear_has_commenturl() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SendAppMsgRequest::clear_commenturl() {
  commenturl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_commenturl();
}
inline const ::std::string& SendAppMsgRequest::commenturl() const {
  // @@protoc_insertion_point(field_get:FromCs.SendAppMsgRequest.CommentUrl)
  return commenturl_.GetNoArena();
}
inline void SendAppMsgRequest::set_commenturl(const ::std::string& value) {
  set_has_commenturl();
  commenturl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.SendAppMsgRequest.CommentUrl)
}
#if LANG_CXX11
inline void SendAppMsgRequest::set_commenturl(::std::string&& value) {
  set_has_commenturl();
  commenturl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.SendAppMsgRequest.CommentUrl)
}
#endif
inline void SendAppMsgRequest::set_commenturl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_commenturl();
  commenturl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.SendAppMsgRequest.CommentUrl)
}
inline void SendAppMsgRequest::set_commenturl(const char* value, size_t size) {
  set_has_commenturl();
  commenturl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.SendAppMsgRequest.CommentUrl)
}
inline ::std::string* SendAppMsgRequest::mutable_commenturl() {
  set_has_commenturl();
  // @@protoc_insertion_point(field_mutable:FromCs.SendAppMsgRequest.CommentUrl)
  return commenturl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendAppMsgRequest::release_commenturl() {
  // @@protoc_insertion_point(field_release:FromCs.SendAppMsgRequest.CommentUrl)
  clear_has_commenturl();
  return commenturl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendAppMsgRequest::set_allocated_commenturl(::std::string* commenturl) {
  if (commenturl != NULL) {
    set_has_commenturl();
  } else {
    clear_has_commenturl();
  }
  commenturl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), commenturl);
  // @@protoc_insertion_point(field_set_allocated:FromCs.SendAppMsgRequest.CommentUrl)
}

// -------------------------------------------------------------------

// SendAppMsgResponse

// required .FromCs.BaseResponse base = 1;
inline bool SendAppMsgResponse::has_base() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SendAppMsgResponse::set_has_base() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SendAppMsgResponse::clear_has_base() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SendAppMsgResponse::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseResponse::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseResponse& SendAppMsgResponse::base() const {
  // @@protoc_insertion_point(field_get:FromCs.SendAppMsgResponse.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseResponse::internal_default_instance();
}
inline ::FromCs::BaseResponse* SendAppMsgResponse::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.SendAppMsgResponse.base)
  return base_;
}
inline ::FromCs::BaseResponse* SendAppMsgResponse::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.SendAppMsgResponse.base)
  clear_has_base();
  ::FromCs::BaseResponse* temp = base_;
  base_ = NULL;
  return temp;
}
inline void SendAppMsgResponse::set_allocated_base(::FromCs::BaseResponse* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.SendAppMsgResponse.base)
}

// optional string AppId = 2;
inline bool SendAppMsgResponse::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SendAppMsgResponse::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SendAppMsgResponse::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SendAppMsgResponse::clear_appid() {
  appid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_appid();
}
inline const ::std::string& SendAppMsgResponse::appid() const {
  // @@protoc_insertion_point(field_get:FromCs.SendAppMsgResponse.AppId)
  return appid_.GetNoArena();
}
inline void SendAppMsgResponse::set_appid(const ::std::string& value) {
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.SendAppMsgResponse.AppId)
}
#if LANG_CXX11
inline void SendAppMsgResponse::set_appid(::std::string&& value) {
  set_has_appid();
  appid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.SendAppMsgResponse.AppId)
}
#endif
inline void SendAppMsgResponse::set_appid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.SendAppMsgResponse.AppId)
}
inline void SendAppMsgResponse::set_appid(const char* value, size_t size) {
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.SendAppMsgResponse.AppId)
}
inline ::std::string* SendAppMsgResponse::mutable_appid() {
  set_has_appid();
  // @@protoc_insertion_point(field_mutable:FromCs.SendAppMsgResponse.AppId)
  return appid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendAppMsgResponse::release_appid() {
  // @@protoc_insertion_point(field_release:FromCs.SendAppMsgResponse.AppId)
  clear_has_appid();
  return appid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendAppMsgResponse::set_allocated_appid(::std::string* appid) {
  if (appid != NULL) {
    set_has_appid();
  } else {
    clear_has_appid();
  }
  appid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appid);
  // @@protoc_insertion_point(field_set_allocated:FromCs.SendAppMsgResponse.AppId)
}

// optional string FromUserName = 3;
inline bool SendAppMsgResponse::has_fromusername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SendAppMsgResponse::set_has_fromusername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SendAppMsgResponse::clear_has_fromusername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SendAppMsgResponse::clear_fromusername() {
  fromusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fromusername();
}
inline const ::std::string& SendAppMsgResponse::fromusername() const {
  // @@protoc_insertion_point(field_get:FromCs.SendAppMsgResponse.FromUserName)
  return fromusername_.GetNoArena();
}
inline void SendAppMsgResponse::set_fromusername(const ::std::string& value) {
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.SendAppMsgResponse.FromUserName)
}
#if LANG_CXX11
inline void SendAppMsgResponse::set_fromusername(::std::string&& value) {
  set_has_fromusername();
  fromusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.SendAppMsgResponse.FromUserName)
}
#endif
inline void SendAppMsgResponse::set_fromusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.SendAppMsgResponse.FromUserName)
}
inline void SendAppMsgResponse::set_fromusername(const char* value, size_t size) {
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.SendAppMsgResponse.FromUserName)
}
inline ::std::string* SendAppMsgResponse::mutable_fromusername() {
  set_has_fromusername();
  // @@protoc_insertion_point(field_mutable:FromCs.SendAppMsgResponse.FromUserName)
  return fromusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendAppMsgResponse::release_fromusername() {
  // @@protoc_insertion_point(field_release:FromCs.SendAppMsgResponse.FromUserName)
  clear_has_fromusername();
  return fromusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendAppMsgResponse::set_allocated_fromusername(::std::string* fromusername) {
  if (fromusername != NULL) {
    set_has_fromusername();
  } else {
    clear_has_fromusername();
  }
  fromusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fromusername);
  // @@protoc_insertion_point(field_set_allocated:FromCs.SendAppMsgResponse.FromUserName)
}

// optional string ToUserName = 4;
inline bool SendAppMsgResponse::has_tousername() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SendAppMsgResponse::set_has_tousername() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SendAppMsgResponse::clear_has_tousername() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SendAppMsgResponse::clear_tousername() {
  tousername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tousername();
}
inline const ::std::string& SendAppMsgResponse::tousername() const {
  // @@protoc_insertion_point(field_get:FromCs.SendAppMsgResponse.ToUserName)
  return tousername_.GetNoArena();
}
inline void SendAppMsgResponse::set_tousername(const ::std::string& value) {
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.SendAppMsgResponse.ToUserName)
}
#if LANG_CXX11
inline void SendAppMsgResponse::set_tousername(::std::string&& value) {
  set_has_tousername();
  tousername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.SendAppMsgResponse.ToUserName)
}
#endif
inline void SendAppMsgResponse::set_tousername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.SendAppMsgResponse.ToUserName)
}
inline void SendAppMsgResponse::set_tousername(const char* value, size_t size) {
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.SendAppMsgResponse.ToUserName)
}
inline ::std::string* SendAppMsgResponse::mutable_tousername() {
  set_has_tousername();
  // @@protoc_insertion_point(field_mutable:FromCs.SendAppMsgResponse.ToUserName)
  return tousername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendAppMsgResponse::release_tousername() {
  // @@protoc_insertion_point(field_release:FromCs.SendAppMsgResponse.ToUserName)
  clear_has_tousername();
  return tousername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendAppMsgResponse::set_allocated_tousername(::std::string* tousername) {
  if (tousername != NULL) {
    set_has_tousername();
  } else {
    clear_has_tousername();
  }
  tousername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tousername);
  // @@protoc_insertion_point(field_set_allocated:FromCs.SendAppMsgResponse.ToUserName)
}

// required int32 MsgId = 5;
inline bool SendAppMsgResponse::has_msgid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SendAppMsgResponse::set_has_msgid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SendAppMsgResponse::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SendAppMsgResponse::clear_msgid() {
  msgid_ = 0;
  clear_has_msgid();
}
inline ::google::protobuf::int32 SendAppMsgResponse::msgid() const {
  // @@protoc_insertion_point(field_get:FromCs.SendAppMsgResponse.MsgId)
  return msgid_;
}
inline void SendAppMsgResponse::set_msgid(::google::protobuf::int32 value) {
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:FromCs.SendAppMsgResponse.MsgId)
}

// optional string ClientMsgId = 6;
inline bool SendAppMsgResponse::has_clientmsgid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SendAppMsgResponse::set_has_clientmsgid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SendAppMsgResponse::clear_has_clientmsgid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SendAppMsgResponse::clear_clientmsgid() {
  clientmsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientmsgid();
}
inline const ::std::string& SendAppMsgResponse::clientmsgid() const {
  // @@protoc_insertion_point(field_get:FromCs.SendAppMsgResponse.ClientMsgId)
  return clientmsgid_.GetNoArena();
}
inline void SendAppMsgResponse::set_clientmsgid(const ::std::string& value) {
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.SendAppMsgResponse.ClientMsgId)
}
#if LANG_CXX11
inline void SendAppMsgResponse::set_clientmsgid(::std::string&& value) {
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.SendAppMsgResponse.ClientMsgId)
}
#endif
inline void SendAppMsgResponse::set_clientmsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.SendAppMsgResponse.ClientMsgId)
}
inline void SendAppMsgResponse::set_clientmsgid(const char* value, size_t size) {
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.SendAppMsgResponse.ClientMsgId)
}
inline ::std::string* SendAppMsgResponse::mutable_clientmsgid() {
  set_has_clientmsgid();
  // @@protoc_insertion_point(field_mutable:FromCs.SendAppMsgResponse.ClientMsgId)
  return clientmsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendAppMsgResponse::release_clientmsgid() {
  // @@protoc_insertion_point(field_release:FromCs.SendAppMsgResponse.ClientMsgId)
  clear_has_clientmsgid();
  return clientmsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendAppMsgResponse::set_allocated_clientmsgid(::std::string* clientmsgid) {
  if (clientmsgid != NULL) {
    set_has_clientmsgid();
  } else {
    clear_has_clientmsgid();
  }
  clientmsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientmsgid);
  // @@protoc_insertion_point(field_set_allocated:FromCs.SendAppMsgResponse.ClientMsgId)
}

// required int32 CreateTime = 7;
inline bool SendAppMsgResponse::has_createtime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SendAppMsgResponse::set_has_createtime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SendAppMsgResponse::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SendAppMsgResponse::clear_createtime() {
  createtime_ = 0;
  clear_has_createtime();
}
inline ::google::protobuf::int32 SendAppMsgResponse::createtime() const {
  // @@protoc_insertion_point(field_get:FromCs.SendAppMsgResponse.CreateTime)
  return createtime_;
}
inline void SendAppMsgResponse::set_createtime(::google::protobuf::int32 value) {
  set_has_createtime();
  createtime_ = value;
  // @@protoc_insertion_point(field_set:FromCs.SendAppMsgResponse.CreateTime)
}

// optional int32 Type = 8;
inline bool SendAppMsgResponse::has_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SendAppMsgResponse::set_has_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SendAppMsgResponse::clear_has_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SendAppMsgResponse::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 SendAppMsgResponse::type() const {
  // @@protoc_insertion_point(field_get:FromCs.SendAppMsgResponse.Type)
  return type_;
}
inline void SendAppMsgResponse::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:FromCs.SendAppMsgResponse.Type)
}

// -------------------------------------------------------------------

// BindOpMobileRequest

// required .FromCs.BaseRequest base = 1;
inline bool BindOpMobileRequest::has_base() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BindOpMobileRequest::set_has_base() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BindOpMobileRequest::clear_has_base() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BindOpMobileRequest::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseRequest::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseRequest& BindOpMobileRequest::base() const {
  // @@protoc_insertion_point(field_get:FromCs.BindOpMobileRequest.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseRequest::internal_default_instance();
}
inline ::FromCs::BaseRequest* BindOpMobileRequest::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.BindOpMobileRequest.base)
  return base_;
}
inline ::FromCs::BaseRequest* BindOpMobileRequest::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.BindOpMobileRequest.base)
  clear_has_base();
  ::FromCs::BaseRequest* temp = base_;
  base_ = NULL;
  return temp;
}
inline void BindOpMobileRequest::set_allocated_base(::FromCs::BaseRequest* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.BindOpMobileRequest.base)
}

// optional string UserName = 2;
inline bool BindOpMobileRequest::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BindOpMobileRequest::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BindOpMobileRequest::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BindOpMobileRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& BindOpMobileRequest::username() const {
  // @@protoc_insertion_point(field_get:FromCs.BindOpMobileRequest.UserName)
  return username_.GetNoArena();
}
inline void BindOpMobileRequest::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.BindOpMobileRequest.UserName)
}
#if LANG_CXX11
inline void BindOpMobileRequest::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.BindOpMobileRequest.UserName)
}
#endif
inline void BindOpMobileRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.BindOpMobileRequest.UserName)
}
inline void BindOpMobileRequest::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.BindOpMobileRequest.UserName)
}
inline ::std::string* BindOpMobileRequest::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:FromCs.BindOpMobileRequest.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BindOpMobileRequest::release_username() {
  // @@protoc_insertion_point(field_release:FromCs.BindOpMobileRequest.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BindOpMobileRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:FromCs.BindOpMobileRequest.UserName)
}

// optional string Mobile = 3;
inline bool BindOpMobileRequest::has_mobile() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BindOpMobileRequest::set_has_mobile() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BindOpMobileRequest::clear_has_mobile() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BindOpMobileRequest::clear_mobile() {
  mobile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mobile();
}
inline const ::std::string& BindOpMobileRequest::mobile() const {
  // @@protoc_insertion_point(field_get:FromCs.BindOpMobileRequest.Mobile)
  return mobile_.GetNoArena();
}
inline void BindOpMobileRequest::set_mobile(const ::std::string& value) {
  set_has_mobile();
  mobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.BindOpMobileRequest.Mobile)
}
#if LANG_CXX11
inline void BindOpMobileRequest::set_mobile(::std::string&& value) {
  set_has_mobile();
  mobile_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.BindOpMobileRequest.Mobile)
}
#endif
inline void BindOpMobileRequest::set_mobile(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mobile();
  mobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.BindOpMobileRequest.Mobile)
}
inline void BindOpMobileRequest::set_mobile(const char* value, size_t size) {
  set_has_mobile();
  mobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.BindOpMobileRequest.Mobile)
}
inline ::std::string* BindOpMobileRequest::mutable_mobile() {
  set_has_mobile();
  // @@protoc_insertion_point(field_mutable:FromCs.BindOpMobileRequest.Mobile)
  return mobile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BindOpMobileRequest::release_mobile() {
  // @@protoc_insertion_point(field_release:FromCs.BindOpMobileRequest.Mobile)
  clear_has_mobile();
  return mobile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BindOpMobileRequest::set_allocated_mobile(::std::string* mobile) {
  if (mobile != NULL) {
    set_has_mobile();
  } else {
    clear_has_mobile();
  }
  mobile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mobile);
  // @@protoc_insertion_point(field_set_allocated:FromCs.BindOpMobileRequest.Mobile)
}

// required int32 Opcode = 4;
inline bool BindOpMobileRequest::has_opcode() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BindOpMobileRequest::set_has_opcode() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BindOpMobileRequest::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BindOpMobileRequest::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
inline ::google::protobuf::int32 BindOpMobileRequest::opcode() const {
  // @@protoc_insertion_point(field_get:FromCs.BindOpMobileRequest.Opcode)
  return opcode_;
}
inline void BindOpMobileRequest::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
  // @@protoc_insertion_point(field_set:FromCs.BindOpMobileRequest.Opcode)
}

// optional string Verifycode = 5;
inline bool BindOpMobileRequest::has_verifycode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BindOpMobileRequest::set_has_verifycode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BindOpMobileRequest::clear_has_verifycode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BindOpMobileRequest::clear_verifycode() {
  verifycode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_verifycode();
}
inline const ::std::string& BindOpMobileRequest::verifycode() const {
  // @@protoc_insertion_point(field_get:FromCs.BindOpMobileRequest.Verifycode)
  return verifycode_.GetNoArena();
}
inline void BindOpMobileRequest::set_verifycode(const ::std::string& value) {
  set_has_verifycode();
  verifycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.BindOpMobileRequest.Verifycode)
}
#if LANG_CXX11
inline void BindOpMobileRequest::set_verifycode(::std::string&& value) {
  set_has_verifycode();
  verifycode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.BindOpMobileRequest.Verifycode)
}
#endif
inline void BindOpMobileRequest::set_verifycode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_verifycode();
  verifycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.BindOpMobileRequest.Verifycode)
}
inline void BindOpMobileRequest::set_verifycode(const char* value, size_t size) {
  set_has_verifycode();
  verifycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.BindOpMobileRequest.Verifycode)
}
inline ::std::string* BindOpMobileRequest::mutable_verifycode() {
  set_has_verifycode();
  // @@protoc_insertion_point(field_mutable:FromCs.BindOpMobileRequest.Verifycode)
  return verifycode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BindOpMobileRequest::release_verifycode() {
  // @@protoc_insertion_point(field_release:FromCs.BindOpMobileRequest.Verifycode)
  clear_has_verifycode();
  return verifycode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BindOpMobileRequest::set_allocated_verifycode(::std::string* verifycode) {
  if (verifycode != NULL) {
    set_has_verifycode();
  } else {
    clear_has_verifycode();
  }
  verifycode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verifycode);
  // @@protoc_insertion_point(field_set_allocated:FromCs.BindOpMobileRequest.Verifycode)
}

// optional int32 DialFlag = 6;
inline bool BindOpMobileRequest::has_dialflag() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BindOpMobileRequest::set_has_dialflag() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BindOpMobileRequest::clear_has_dialflag() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BindOpMobileRequest::clear_dialflag() {
  dialflag_ = 0;
  clear_has_dialflag();
}
inline ::google::protobuf::int32 BindOpMobileRequest::dialflag() const {
  // @@protoc_insertion_point(field_get:FromCs.BindOpMobileRequest.DialFlag)
  return dialflag_;
}
inline void BindOpMobileRequest::set_dialflag(::google::protobuf::int32 value) {
  set_has_dialflag();
  dialflag_ = value;
  // @@protoc_insertion_point(field_set:FromCs.BindOpMobileRequest.DialFlag)
}

// optional string DialLang = 7;
inline bool BindOpMobileRequest::has_diallang() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BindOpMobileRequest::set_has_diallang() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BindOpMobileRequest::clear_has_diallang() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BindOpMobileRequest::clear_diallang() {
  diallang_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_diallang();
}
inline const ::std::string& BindOpMobileRequest::diallang() const {
  // @@protoc_insertion_point(field_get:FromCs.BindOpMobileRequest.DialLang)
  return diallang_.GetNoArena();
}
inline void BindOpMobileRequest::set_diallang(const ::std::string& value) {
  set_has_diallang();
  diallang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.BindOpMobileRequest.DialLang)
}
#if LANG_CXX11
inline void BindOpMobileRequest::set_diallang(::std::string&& value) {
  set_has_diallang();
  diallang_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.BindOpMobileRequest.DialLang)
}
#endif
inline void BindOpMobileRequest::set_diallang(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_diallang();
  diallang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.BindOpMobileRequest.DialLang)
}
inline void BindOpMobileRequest::set_diallang(const char* value, size_t size) {
  set_has_diallang();
  diallang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.BindOpMobileRequest.DialLang)
}
inline ::std::string* BindOpMobileRequest::mutable_diallang() {
  set_has_diallang();
  // @@protoc_insertion_point(field_mutable:FromCs.BindOpMobileRequest.DialLang)
  return diallang_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BindOpMobileRequest::release_diallang() {
  // @@protoc_insertion_point(field_release:FromCs.BindOpMobileRequest.DialLang)
  clear_has_diallang();
  return diallang_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BindOpMobileRequest::set_allocated_diallang(::std::string* diallang) {
  if (diallang != NULL) {
    set_has_diallang();
  } else {
    clear_has_diallang();
  }
  diallang_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), diallang);
  // @@protoc_insertion_point(field_set_allocated:FromCs.BindOpMobileRequest.DialLang)
}

// optional string AuthTicket = 8;
inline bool BindOpMobileRequest::has_authticket() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BindOpMobileRequest::set_has_authticket() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BindOpMobileRequest::clear_has_authticket() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BindOpMobileRequest::clear_authticket() {
  authticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_authticket();
}
inline const ::std::string& BindOpMobileRequest::authticket() const {
  // @@protoc_insertion_point(field_get:FromCs.BindOpMobileRequest.AuthTicket)
  return authticket_.GetNoArena();
}
inline void BindOpMobileRequest::set_authticket(const ::std::string& value) {
  set_has_authticket();
  authticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.BindOpMobileRequest.AuthTicket)
}
#if LANG_CXX11
inline void BindOpMobileRequest::set_authticket(::std::string&& value) {
  set_has_authticket();
  authticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.BindOpMobileRequest.AuthTicket)
}
#endif
inline void BindOpMobileRequest::set_authticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_authticket();
  authticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.BindOpMobileRequest.AuthTicket)
}
inline void BindOpMobileRequest::set_authticket(const char* value, size_t size) {
  set_has_authticket();
  authticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.BindOpMobileRequest.AuthTicket)
}
inline ::std::string* BindOpMobileRequest::mutable_authticket() {
  set_has_authticket();
  // @@protoc_insertion_point(field_mutable:FromCs.BindOpMobileRequest.AuthTicket)
  return authticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BindOpMobileRequest::release_authticket() {
  // @@protoc_insertion_point(field_release:FromCs.BindOpMobileRequest.AuthTicket)
  clear_has_authticket();
  return authticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BindOpMobileRequest::set_allocated_authticket(::std::string* authticket) {
  if (authticket != NULL) {
    set_has_authticket();
  } else {
    clear_has_authticket();
  }
  authticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), authticket);
  // @@protoc_insertion_point(field_set_allocated:FromCs.BindOpMobileRequest.AuthTicket)
}

// optional int32 ForceReg = 9;
inline bool BindOpMobileRequest::has_forcereg() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BindOpMobileRequest::set_has_forcereg() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BindOpMobileRequest::clear_has_forcereg() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BindOpMobileRequest::clear_forcereg() {
  forcereg_ = 0;
  clear_has_forcereg();
}
inline ::google::protobuf::int32 BindOpMobileRequest::forcereg() const {
  // @@protoc_insertion_point(field_get:FromCs.BindOpMobileRequest.ForceReg)
  return forcereg_;
}
inline void BindOpMobileRequest::set_forcereg(::google::protobuf::int32 value) {
  set_has_forcereg();
  forcereg_ = value;
  // @@protoc_insertion_point(field_set:FromCs.BindOpMobileRequest.ForceReg)
}

// optional string SafeDeviceName = 10;
inline bool BindOpMobileRequest::has_safedevicename() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BindOpMobileRequest::set_has_safedevicename() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BindOpMobileRequest::clear_has_safedevicename() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BindOpMobileRequest::clear_safedevicename() {
  safedevicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_safedevicename();
}
inline const ::std::string& BindOpMobileRequest::safedevicename() const {
  // @@protoc_insertion_point(field_get:FromCs.BindOpMobileRequest.SafeDeviceName)
  return safedevicename_.GetNoArena();
}
inline void BindOpMobileRequest::set_safedevicename(const ::std::string& value) {
  set_has_safedevicename();
  safedevicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.BindOpMobileRequest.SafeDeviceName)
}
#if LANG_CXX11
inline void BindOpMobileRequest::set_safedevicename(::std::string&& value) {
  set_has_safedevicename();
  safedevicename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.BindOpMobileRequest.SafeDeviceName)
}
#endif
inline void BindOpMobileRequest::set_safedevicename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_safedevicename();
  safedevicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.BindOpMobileRequest.SafeDeviceName)
}
inline void BindOpMobileRequest::set_safedevicename(const char* value, size_t size) {
  set_has_safedevicename();
  safedevicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.BindOpMobileRequest.SafeDeviceName)
}
inline ::std::string* BindOpMobileRequest::mutable_safedevicename() {
  set_has_safedevicename();
  // @@protoc_insertion_point(field_mutable:FromCs.BindOpMobileRequest.SafeDeviceName)
  return safedevicename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BindOpMobileRequest::release_safedevicename() {
  // @@protoc_insertion_point(field_release:FromCs.BindOpMobileRequest.SafeDeviceName)
  clear_has_safedevicename();
  return safedevicename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BindOpMobileRequest::set_allocated_safedevicename(::std::string* safedevicename) {
  if (safedevicename != NULL) {
    set_has_safedevicename();
  } else {
    clear_has_safedevicename();
  }
  safedevicename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), safedevicename);
  // @@protoc_insertion_point(field_set_allocated:FromCs.BindOpMobileRequest.SafeDeviceName)
}

// optional string SafeDeviceType = 11;
inline bool BindOpMobileRequest::has_safedevicetype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BindOpMobileRequest::set_has_safedevicetype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BindOpMobileRequest::clear_has_safedevicetype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BindOpMobileRequest::clear_safedevicetype() {
  safedevicetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_safedevicetype();
}
inline const ::std::string& BindOpMobileRequest::safedevicetype() const {
  // @@protoc_insertion_point(field_get:FromCs.BindOpMobileRequest.SafeDeviceType)
  return safedevicetype_.GetNoArena();
}
inline void BindOpMobileRequest::set_safedevicetype(const ::std::string& value) {
  set_has_safedevicetype();
  safedevicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.BindOpMobileRequest.SafeDeviceType)
}
#if LANG_CXX11
inline void BindOpMobileRequest::set_safedevicetype(::std::string&& value) {
  set_has_safedevicetype();
  safedevicetype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.BindOpMobileRequest.SafeDeviceType)
}
#endif
inline void BindOpMobileRequest::set_safedevicetype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_safedevicetype();
  safedevicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.BindOpMobileRequest.SafeDeviceType)
}
inline void BindOpMobileRequest::set_safedevicetype(const char* value, size_t size) {
  set_has_safedevicetype();
  safedevicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.BindOpMobileRequest.SafeDeviceType)
}
inline ::std::string* BindOpMobileRequest::mutable_safedevicetype() {
  set_has_safedevicetype();
  // @@protoc_insertion_point(field_mutable:FromCs.BindOpMobileRequest.SafeDeviceType)
  return safedevicetype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BindOpMobileRequest::release_safedevicetype() {
  // @@protoc_insertion_point(field_release:FromCs.BindOpMobileRequest.SafeDeviceType)
  clear_has_safedevicetype();
  return safedevicetype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BindOpMobileRequest::set_allocated_safedevicetype(::std::string* safedevicetype) {
  if (safedevicetype != NULL) {
    set_has_safedevicetype();
  } else {
    clear_has_safedevicetype();
  }
  safedevicetype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), safedevicetype);
  // @@protoc_insertion_point(field_set_allocated:FromCs.BindOpMobileRequest.SafeDeviceType)
}

// optional .FromCs.sKBuiltinBufferT RandomEncryKey = 12;
inline bool BindOpMobileRequest::has_randomencrykey() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BindOpMobileRequest::set_has_randomencrykey() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BindOpMobileRequest::clear_has_randomencrykey() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BindOpMobileRequest::clear_randomencrykey() {
  if (randomencrykey_ != NULL) randomencrykey_->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_randomencrykey();
}
inline const ::FromCs::sKBuiltinBufferT& BindOpMobileRequest::randomencrykey() const {
  // @@protoc_insertion_point(field_get:FromCs.BindOpMobileRequest.RandomEncryKey)
  return randomencrykey_ != NULL ? *randomencrykey_
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* BindOpMobileRequest::mutable_randomencrykey() {
  set_has_randomencrykey();
  if (randomencrykey_ == NULL) {
    randomencrykey_ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.BindOpMobileRequest.RandomEncryKey)
  return randomencrykey_;
}
inline ::FromCs::sKBuiltinBufferT* BindOpMobileRequest::release_randomencrykey() {
  // @@protoc_insertion_point(field_release:FromCs.BindOpMobileRequest.RandomEncryKey)
  clear_has_randomencrykey();
  ::FromCs::sKBuiltinBufferT* temp = randomencrykey_;
  randomencrykey_ = NULL;
  return temp;
}
inline void BindOpMobileRequest::set_allocated_randomencrykey(::FromCs::sKBuiltinBufferT* randomencrykey) {
  delete randomencrykey_;
  randomencrykey_ = randomencrykey;
  if (randomencrykey) {
    set_has_randomencrykey();
  } else {
    clear_has_randomencrykey();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.BindOpMobileRequest.RandomEncryKey)
}

// -------------------------------------------------------------------

// BindOpMobileResponse

// required .FromCs.BaseResponse base = 1;
inline bool BindOpMobileResponse::has_base() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BindOpMobileResponse::set_has_base() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BindOpMobileResponse::clear_has_base() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BindOpMobileResponse::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseResponse::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseResponse& BindOpMobileResponse::base() const {
  // @@protoc_insertion_point(field_get:FromCs.BindOpMobileResponse.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseResponse::internal_default_instance();
}
inline ::FromCs::BaseResponse* BindOpMobileResponse::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.BindOpMobileResponse.base)
  return base_;
}
inline ::FromCs::BaseResponse* BindOpMobileResponse::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.BindOpMobileResponse.base)
  clear_has_base();
  ::FromCs::BaseResponse* temp = base_;
  base_ = NULL;
  return temp;
}
inline void BindOpMobileResponse::set_allocated_base(::FromCs::BaseResponse* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.BindOpMobileResponse.base)
}

// optional string ticket = 2;
inline bool BindOpMobileResponse::has_ticket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BindOpMobileResponse::set_has_ticket() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BindOpMobileResponse::clear_has_ticket() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BindOpMobileResponse::clear_ticket() {
  ticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ticket();
}
inline const ::std::string& BindOpMobileResponse::ticket() const {
  // @@protoc_insertion_point(field_get:FromCs.BindOpMobileResponse.ticket)
  return ticket_.GetNoArena();
}
inline void BindOpMobileResponse::set_ticket(const ::std::string& value) {
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.BindOpMobileResponse.ticket)
}
#if LANG_CXX11
inline void BindOpMobileResponse::set_ticket(::std::string&& value) {
  set_has_ticket();
  ticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.BindOpMobileResponse.ticket)
}
#endif
inline void BindOpMobileResponse::set_ticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.BindOpMobileResponse.ticket)
}
inline void BindOpMobileResponse::set_ticket(const char* value, size_t size) {
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.BindOpMobileResponse.ticket)
}
inline ::std::string* BindOpMobileResponse::mutable_ticket() {
  set_has_ticket();
  // @@protoc_insertion_point(field_mutable:FromCs.BindOpMobileResponse.ticket)
  return ticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BindOpMobileResponse::release_ticket() {
  // @@protoc_insertion_point(field_release:FromCs.BindOpMobileResponse.ticket)
  clear_has_ticket();
  return ticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BindOpMobileResponse::set_allocated_ticket(::std::string* ticket) {
  if (ticket != NULL) {
    set_has_ticket();
  } else {
    clear_has_ticket();
  }
  ticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ticket);
  // @@protoc_insertion_point(field_set_allocated:FromCs.BindOpMobileResponse.ticket)
}

// optional string SmsNo = 3;
inline bool BindOpMobileResponse::has_smsno() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BindOpMobileResponse::set_has_smsno() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BindOpMobileResponse::clear_has_smsno() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BindOpMobileResponse::clear_smsno() {
  smsno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_smsno();
}
inline const ::std::string& BindOpMobileResponse::smsno() const {
  // @@protoc_insertion_point(field_get:FromCs.BindOpMobileResponse.SmsNo)
  return smsno_.GetNoArena();
}
inline void BindOpMobileResponse::set_smsno(const ::std::string& value) {
  set_has_smsno();
  smsno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.BindOpMobileResponse.SmsNo)
}
#if LANG_CXX11
inline void BindOpMobileResponse::set_smsno(::std::string&& value) {
  set_has_smsno();
  smsno_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.BindOpMobileResponse.SmsNo)
}
#endif
inline void BindOpMobileResponse::set_smsno(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_smsno();
  smsno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.BindOpMobileResponse.SmsNo)
}
inline void BindOpMobileResponse::set_smsno(const char* value, size_t size) {
  set_has_smsno();
  smsno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.BindOpMobileResponse.SmsNo)
}
inline ::std::string* BindOpMobileResponse::mutable_smsno() {
  set_has_smsno();
  // @@protoc_insertion_point(field_mutable:FromCs.BindOpMobileResponse.SmsNo)
  return smsno_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BindOpMobileResponse::release_smsno() {
  // @@protoc_insertion_point(field_release:FromCs.BindOpMobileResponse.SmsNo)
  clear_has_smsno();
  return smsno_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BindOpMobileResponse::set_allocated_smsno(::std::string* smsno) {
  if (smsno != NULL) {
    set_has_smsno();
  } else {
    clear_has_smsno();
  }
  smsno_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsno);
  // @@protoc_insertion_point(field_set_allocated:FromCs.BindOpMobileResponse.SmsNo)
}

// optional int32 NeedSetPwd = 4;
inline bool BindOpMobileResponse::has_needsetpwd() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BindOpMobileResponse::set_has_needsetpwd() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BindOpMobileResponse::clear_has_needsetpwd() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BindOpMobileResponse::clear_needsetpwd() {
  needsetpwd_ = 0;
  clear_has_needsetpwd();
}
inline ::google::protobuf::int32 BindOpMobileResponse::needsetpwd() const {
  // @@protoc_insertion_point(field_get:FromCs.BindOpMobileResponse.NeedSetPwd)
  return needsetpwd_;
}
inline void BindOpMobileResponse::set_needsetpwd(::google::protobuf::int32 value) {
  set_has_needsetpwd();
  needsetpwd_ = value;
  // @@protoc_insertion_point(field_set:FromCs.BindOpMobileResponse.NeedSetPwd)
}

// optional string Pwd = 5;
inline bool BindOpMobileResponse::has_pwd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BindOpMobileResponse::set_has_pwd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BindOpMobileResponse::clear_has_pwd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BindOpMobileResponse::clear_pwd() {
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pwd();
}
inline const ::std::string& BindOpMobileResponse::pwd() const {
  // @@protoc_insertion_point(field_get:FromCs.BindOpMobileResponse.Pwd)
  return pwd_.GetNoArena();
}
inline void BindOpMobileResponse::set_pwd(const ::std::string& value) {
  set_has_pwd();
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.BindOpMobileResponse.Pwd)
}
#if LANG_CXX11
inline void BindOpMobileResponse::set_pwd(::std::string&& value) {
  set_has_pwd();
  pwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.BindOpMobileResponse.Pwd)
}
#endif
inline void BindOpMobileResponse::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pwd();
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.BindOpMobileResponse.Pwd)
}
inline void BindOpMobileResponse::set_pwd(const char* value, size_t size) {
  set_has_pwd();
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.BindOpMobileResponse.Pwd)
}
inline ::std::string* BindOpMobileResponse::mutable_pwd() {
  set_has_pwd();
  // @@protoc_insertion_point(field_mutable:FromCs.BindOpMobileResponse.Pwd)
  return pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BindOpMobileResponse::release_pwd() {
  // @@protoc_insertion_point(field_release:FromCs.BindOpMobileResponse.Pwd)
  clear_has_pwd();
  return pwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BindOpMobileResponse::set_allocated_pwd(::std::string* pwd) {
  if (pwd != NULL) {
    set_has_pwd();
  } else {
    clear_has_pwd();
  }
  pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd);
  // @@protoc_insertion_point(field_set_allocated:FromCs.BindOpMobileResponse.Pwd)
}

// optional string Username = 6;
inline bool BindOpMobileResponse::has_username() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BindOpMobileResponse::set_has_username() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BindOpMobileResponse::clear_has_username() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BindOpMobileResponse::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& BindOpMobileResponse::username() const {
  // @@protoc_insertion_point(field_get:FromCs.BindOpMobileResponse.Username)
  return username_.GetNoArena();
}
inline void BindOpMobileResponse::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.BindOpMobileResponse.Username)
}
#if LANG_CXX11
inline void BindOpMobileResponse::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.BindOpMobileResponse.Username)
}
#endif
inline void BindOpMobileResponse::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.BindOpMobileResponse.Username)
}
inline void BindOpMobileResponse::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.BindOpMobileResponse.Username)
}
inline ::std::string* BindOpMobileResponse::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:FromCs.BindOpMobileResponse.Username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BindOpMobileResponse::release_username() {
  // @@protoc_insertion_point(field_release:FromCs.BindOpMobileResponse.Username)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BindOpMobileResponse::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:FromCs.BindOpMobileResponse.Username)
}

// optional .FromCs.NewHostListType NewHostList = 7;
inline bool BindOpMobileResponse::has_newhostlist() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BindOpMobileResponse::set_has_newhostlist() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BindOpMobileResponse::clear_has_newhostlist() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BindOpMobileResponse::clear_newhostlist() {
  if (newhostlist_ != NULL) newhostlist_->::FromCs::NewHostListType::Clear();
  clear_has_newhostlist();
}
inline const ::FromCs::NewHostListType& BindOpMobileResponse::newhostlist() const {
  // @@protoc_insertion_point(field_get:FromCs.BindOpMobileResponse.NewHostList)
  return newhostlist_ != NULL ? *newhostlist_
                         : *::FromCs::NewHostListType::internal_default_instance();
}
inline ::FromCs::NewHostListType* BindOpMobileResponse::mutable_newhostlist() {
  set_has_newhostlist();
  if (newhostlist_ == NULL) {
    newhostlist_ = new ::FromCs::NewHostListType;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.BindOpMobileResponse.NewHostList)
  return newhostlist_;
}
inline ::FromCs::NewHostListType* BindOpMobileResponse::release_newhostlist() {
  // @@protoc_insertion_point(field_release:FromCs.BindOpMobileResponse.NewHostList)
  clear_has_newhostlist();
  ::FromCs::NewHostListType* temp = newhostlist_;
  newhostlist_ = NULL;
  return temp;
}
inline void BindOpMobileResponse::set_allocated_newhostlist(::FromCs::NewHostListType* newhostlist) {
  delete newhostlist_;
  newhostlist_ = newhostlist;
  if (newhostlist) {
    set_has_newhostlist();
  } else {
    clear_has_newhostlist();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.BindOpMobileResponse.NewHostList)
}

// optional .FromCs.iPList BuiltinIPList = 8;
inline bool BindOpMobileResponse::has_builtiniplist() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BindOpMobileResponse::set_has_builtiniplist() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BindOpMobileResponse::clear_has_builtiniplist() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BindOpMobileResponse::clear_builtiniplist() {
  if (builtiniplist_ != NULL) builtiniplist_->::FromCs::iPList::Clear();
  clear_has_builtiniplist();
}
inline const ::FromCs::iPList& BindOpMobileResponse::builtiniplist() const {
  // @@protoc_insertion_point(field_get:FromCs.BindOpMobileResponse.BuiltinIPList)
  return builtiniplist_ != NULL ? *builtiniplist_
                         : *::FromCs::iPList::internal_default_instance();
}
inline ::FromCs::iPList* BindOpMobileResponse::mutable_builtiniplist() {
  set_has_builtiniplist();
  if (builtiniplist_ == NULL) {
    builtiniplist_ = new ::FromCs::iPList;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.BindOpMobileResponse.BuiltinIPList)
  return builtiniplist_;
}
inline ::FromCs::iPList* BindOpMobileResponse::release_builtiniplist() {
  // @@protoc_insertion_point(field_release:FromCs.BindOpMobileResponse.BuiltinIPList)
  clear_has_builtiniplist();
  ::FromCs::iPList* temp = builtiniplist_;
  builtiniplist_ = NULL;
  return temp;
}
inline void BindOpMobileResponse::set_allocated_builtiniplist(::FromCs::iPList* builtiniplist) {
  delete builtiniplist_;
  builtiniplist_ = builtiniplist;
  if (builtiniplist) {
    set_has_builtiniplist();
  } else {
    clear_has_builtiniplist();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.BindOpMobileResponse.BuiltinIPList)
}

// optional .FromCs.NetworkControlType NetworkControl = 9;
inline bool BindOpMobileResponse::has_networkcontrol() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BindOpMobileResponse::set_has_networkcontrol() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BindOpMobileResponse::clear_has_networkcontrol() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BindOpMobileResponse::clear_networkcontrol() {
  if (networkcontrol_ != NULL) networkcontrol_->::FromCs::NetworkControlType::Clear();
  clear_has_networkcontrol();
}
inline const ::FromCs::NetworkControlType& BindOpMobileResponse::networkcontrol() const {
  // @@protoc_insertion_point(field_get:FromCs.BindOpMobileResponse.NetworkControl)
  return networkcontrol_ != NULL ? *networkcontrol_
                         : *::FromCs::NetworkControlType::internal_default_instance();
}
inline ::FromCs::NetworkControlType* BindOpMobileResponse::mutable_networkcontrol() {
  set_has_networkcontrol();
  if (networkcontrol_ == NULL) {
    networkcontrol_ = new ::FromCs::NetworkControlType;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.BindOpMobileResponse.NetworkControl)
  return networkcontrol_;
}
inline ::FromCs::NetworkControlType* BindOpMobileResponse::release_networkcontrol() {
  // @@protoc_insertion_point(field_release:FromCs.BindOpMobileResponse.NetworkControl)
  clear_has_networkcontrol();
  ::FromCs::NetworkControlType* temp = networkcontrol_;
  networkcontrol_ = NULL;
  return temp;
}
inline void BindOpMobileResponse::set_allocated_networkcontrol(::FromCs::NetworkControlType* networkcontrol) {
  delete networkcontrol_;
  networkcontrol_ = networkcontrol;
  if (networkcontrol) {
    set_has_networkcontrol();
  } else {
    clear_has_networkcontrol();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.BindOpMobileResponse.NetworkControl)
}

// optional string AuthTicket = 10;
inline bool BindOpMobileResponse::has_authticket() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BindOpMobileResponse::set_has_authticket() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BindOpMobileResponse::clear_has_authticket() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BindOpMobileResponse::clear_authticket() {
  authticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_authticket();
}
inline const ::std::string& BindOpMobileResponse::authticket() const {
  // @@protoc_insertion_point(field_get:FromCs.BindOpMobileResponse.AuthTicket)
  return authticket_.GetNoArena();
}
inline void BindOpMobileResponse::set_authticket(const ::std::string& value) {
  set_has_authticket();
  authticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.BindOpMobileResponse.AuthTicket)
}
#if LANG_CXX11
inline void BindOpMobileResponse::set_authticket(::std::string&& value) {
  set_has_authticket();
  authticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.BindOpMobileResponse.AuthTicket)
}
#endif
inline void BindOpMobileResponse::set_authticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_authticket();
  authticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.BindOpMobileResponse.AuthTicket)
}
inline void BindOpMobileResponse::set_authticket(const char* value, size_t size) {
  set_has_authticket();
  authticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.BindOpMobileResponse.AuthTicket)
}
inline ::std::string* BindOpMobileResponse::mutable_authticket() {
  set_has_authticket();
  // @@protoc_insertion_point(field_mutable:FromCs.BindOpMobileResponse.AuthTicket)
  return authticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BindOpMobileResponse::release_authticket() {
  // @@protoc_insertion_point(field_release:FromCs.BindOpMobileResponse.AuthTicket)
  clear_has_authticket();
  return authticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BindOpMobileResponse::set_allocated_authticket(::std::string* authticket) {
  if (authticket != NULL) {
    set_has_authticket();
  } else {
    clear_has_authticket();
  }
  authticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), authticket);
  // @@protoc_insertion_point(field_set_allocated:FromCs.BindOpMobileResponse.AuthTicket)
}

// optional int32 SafeDevice = 11;
inline bool BindOpMobileResponse::has_safedevice() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BindOpMobileResponse::set_has_safedevice() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BindOpMobileResponse::clear_has_safedevice() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BindOpMobileResponse::clear_safedevice() {
  safedevice_ = 0;
  clear_has_safedevice();
}
inline ::google::protobuf::int32 BindOpMobileResponse::safedevice() const {
  // @@protoc_insertion_point(field_get:FromCs.BindOpMobileResponse.SafeDevice)
  return safedevice_;
}
inline void BindOpMobileResponse::set_safedevice(::google::protobuf::int32 value) {
  set_has_safedevice();
  safedevice_ = value;
  // @@protoc_insertion_point(field_set:FromCs.BindOpMobileResponse.SafeDevice)
}

// optional string MainAcct = 12;
inline bool BindOpMobileResponse::has_mainacct() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BindOpMobileResponse::set_has_mainacct() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BindOpMobileResponse::clear_has_mainacct() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BindOpMobileResponse::clear_mainacct() {
  mainacct_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mainacct();
}
inline const ::std::string& BindOpMobileResponse::mainacct() const {
  // @@protoc_insertion_point(field_get:FromCs.BindOpMobileResponse.MainAcct)
  return mainacct_.GetNoArena();
}
inline void BindOpMobileResponse::set_mainacct(const ::std::string& value) {
  set_has_mainacct();
  mainacct_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.BindOpMobileResponse.MainAcct)
}
#if LANG_CXX11
inline void BindOpMobileResponse::set_mainacct(::std::string&& value) {
  set_has_mainacct();
  mainacct_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.BindOpMobileResponse.MainAcct)
}
#endif
inline void BindOpMobileResponse::set_mainacct(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mainacct();
  mainacct_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.BindOpMobileResponse.MainAcct)
}
inline void BindOpMobileResponse::set_mainacct(const char* value, size_t size) {
  set_has_mainacct();
  mainacct_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.BindOpMobileResponse.MainAcct)
}
inline ::std::string* BindOpMobileResponse::mutable_mainacct() {
  set_has_mainacct();
  // @@protoc_insertion_point(field_mutable:FromCs.BindOpMobileResponse.MainAcct)
  return mainacct_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BindOpMobileResponse::release_mainacct() {
  // @@protoc_insertion_point(field_release:FromCs.BindOpMobileResponse.MainAcct)
  clear_has_mainacct();
  return mainacct_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BindOpMobileResponse::set_allocated_mainacct(::std::string* mainacct) {
  if (mainacct != NULL) {
    set_has_mainacct();
  } else {
    clear_has_mainacct();
  }
  mainacct_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mainacct);
  // @@protoc_insertion_point(field_set_allocated:FromCs.BindOpMobileResponse.MainAcct)
}

// optional int32 MainAcctType = 13;
inline bool BindOpMobileResponse::has_mainaccttype() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BindOpMobileResponse::set_has_mainaccttype() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BindOpMobileResponse::clear_has_mainaccttype() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BindOpMobileResponse::clear_mainaccttype() {
  mainaccttype_ = 0;
  clear_has_mainaccttype();
}
inline ::google::protobuf::int32 BindOpMobileResponse::mainaccttype() const {
  // @@protoc_insertion_point(field_get:FromCs.BindOpMobileResponse.MainAcctType)
  return mainaccttype_;
}
inline void BindOpMobileResponse::set_mainaccttype(::google::protobuf::int32 value) {
  set_has_mainaccttype();
  mainaccttype_ = value;
  // @@protoc_insertion_point(field_set:FromCs.BindOpMobileResponse.MainAcctType)
}

// optional .FromCs.SafeDevice SafeDeviceList = 14;
inline bool BindOpMobileResponse::has_safedevicelist() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BindOpMobileResponse::set_has_safedevicelist() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BindOpMobileResponse::clear_has_safedevicelist() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BindOpMobileResponse::clear_safedevicelist() {
  if (safedevicelist_ != NULL) safedevicelist_->::FromCs::SafeDevice::Clear();
  clear_has_safedevicelist();
}
inline const ::FromCs::SafeDevice& BindOpMobileResponse::safedevicelist() const {
  // @@protoc_insertion_point(field_get:FromCs.BindOpMobileResponse.SafeDeviceList)
  return safedevicelist_ != NULL ? *safedevicelist_
                         : *::FromCs::SafeDevice::internal_default_instance();
}
inline ::FromCs::SafeDevice* BindOpMobileResponse::mutable_safedevicelist() {
  set_has_safedevicelist();
  if (safedevicelist_ == NULL) {
    safedevicelist_ = new ::FromCs::SafeDevice;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.BindOpMobileResponse.SafeDeviceList)
  return safedevicelist_;
}
inline ::FromCs::SafeDevice* BindOpMobileResponse::release_safedevicelist() {
  // @@protoc_insertion_point(field_release:FromCs.BindOpMobileResponse.SafeDeviceList)
  clear_has_safedevicelist();
  ::FromCs::SafeDevice* temp = safedevicelist_;
  safedevicelist_ = NULL;
  return temp;
}
inline void BindOpMobileResponse::set_allocated_safedevicelist(::FromCs::SafeDevice* safedevicelist) {
  delete safedevicelist_;
  safedevicelist_ = safedevicelist;
  if (safedevicelist) {
    set_has_safedevicelist();
  } else {
    clear_has_safedevicelist();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.BindOpMobileResponse.SafeDeviceList)
}

// -------------------------------------------------------------------

// BindQQRequest

// required .FromCs.BaseRequest base = 1;
inline bool BindQQRequest::has_base() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BindQQRequest::set_has_base() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BindQQRequest::clear_has_base() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BindQQRequest::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseRequest::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseRequest& BindQQRequest::base() const {
  // @@protoc_insertion_point(field_get:FromCs.BindQQRequest.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseRequest::internal_default_instance();
}
inline ::FromCs::BaseRequest* BindQQRequest::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.BindQQRequest.base)
  return base_;
}
inline ::FromCs::BaseRequest* BindQQRequest::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.BindQQRequest.base)
  clear_has_base();
  ::FromCs::BaseRequest* temp = base_;
  base_ = NULL;
  return temp;
}
inline void BindQQRequest::set_allocated_base(::FromCs::BaseRequest* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.BindQQRequest.base)
}

// required int32 QQ = 2;
inline bool BindQQRequest::has_qq() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BindQQRequest::set_has_qq() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BindQQRequest::clear_has_qq() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BindQQRequest::clear_qq() {
  qq_ = 0;
  clear_has_qq();
}
inline ::google::protobuf::int32 BindQQRequest::qq() const {
  // @@protoc_insertion_point(field_get:FromCs.BindQQRequest.QQ)
  return qq_;
}
inline void BindQQRequest::set_qq(::google::protobuf::int32 value) {
  set_has_qq();
  qq_ = value;
  // @@protoc_insertion_point(field_set:FromCs.BindQQRequest.QQ)
}

// optional string Pwd = 3;
inline bool BindQQRequest::has_pwd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BindQQRequest::set_has_pwd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BindQQRequest::clear_has_pwd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BindQQRequest::clear_pwd() {
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pwd();
}
inline const ::std::string& BindQQRequest::pwd() const {
  // @@protoc_insertion_point(field_get:FromCs.BindQQRequest.Pwd)
  return pwd_.GetNoArena();
}
inline void BindQQRequest::set_pwd(const ::std::string& value) {
  set_has_pwd();
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.BindQQRequest.Pwd)
}
#if LANG_CXX11
inline void BindQQRequest::set_pwd(::std::string&& value) {
  set_has_pwd();
  pwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.BindQQRequest.Pwd)
}
#endif
inline void BindQQRequest::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pwd();
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.BindQQRequest.Pwd)
}
inline void BindQQRequest::set_pwd(const char* value, size_t size) {
  set_has_pwd();
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.BindQQRequest.Pwd)
}
inline ::std::string* BindQQRequest::mutable_pwd() {
  set_has_pwd();
  // @@protoc_insertion_point(field_mutable:FromCs.BindQQRequest.Pwd)
  return pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BindQQRequest::release_pwd() {
  // @@protoc_insertion_point(field_release:FromCs.BindQQRequest.Pwd)
  clear_has_pwd();
  return pwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BindQQRequest::set_allocated_pwd(::std::string* pwd) {
  if (pwd != NULL) {
    set_has_pwd();
  } else {
    clear_has_pwd();
  }
  pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd);
  // @@protoc_insertion_point(field_set_allocated:FromCs.BindQQRequest.Pwd)
}

// optional string Pwd2 = 4;
inline bool BindQQRequest::has_pwd2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BindQQRequest::set_has_pwd2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BindQQRequest::clear_has_pwd2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BindQQRequest::clear_pwd2() {
  pwd2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pwd2();
}
inline const ::std::string& BindQQRequest::pwd2() const {
  // @@protoc_insertion_point(field_get:FromCs.BindQQRequest.Pwd2)
  return pwd2_.GetNoArena();
}
inline void BindQQRequest::set_pwd2(const ::std::string& value) {
  set_has_pwd2();
  pwd2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.BindQQRequest.Pwd2)
}
#if LANG_CXX11
inline void BindQQRequest::set_pwd2(::std::string&& value) {
  set_has_pwd2();
  pwd2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.BindQQRequest.Pwd2)
}
#endif
inline void BindQQRequest::set_pwd2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pwd2();
  pwd2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.BindQQRequest.Pwd2)
}
inline void BindQQRequest::set_pwd2(const char* value, size_t size) {
  set_has_pwd2();
  pwd2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.BindQQRequest.Pwd2)
}
inline ::std::string* BindQQRequest::mutable_pwd2() {
  set_has_pwd2();
  // @@protoc_insertion_point(field_mutable:FromCs.BindQQRequest.Pwd2)
  return pwd2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BindQQRequest::release_pwd2() {
  // @@protoc_insertion_point(field_release:FromCs.BindQQRequest.Pwd2)
  clear_has_pwd2();
  return pwd2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BindQQRequest::set_allocated_pwd2(::std::string* pwd2) {
  if (pwd2 != NULL) {
    set_has_pwd2();
  } else {
    clear_has_pwd2();
  }
  pwd2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd2);
  // @@protoc_insertion_point(field_set_allocated:FromCs.BindQQRequest.Pwd2)
}

// optional string ImgSid = 5;
inline bool BindQQRequest::has_imgsid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BindQQRequest::set_has_imgsid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BindQQRequest::clear_has_imgsid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BindQQRequest::clear_imgsid() {
  imgsid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_imgsid();
}
inline const ::std::string& BindQQRequest::imgsid() const {
  // @@protoc_insertion_point(field_get:FromCs.BindQQRequest.ImgSid)
  return imgsid_.GetNoArena();
}
inline void BindQQRequest::set_imgsid(const ::std::string& value) {
  set_has_imgsid();
  imgsid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.BindQQRequest.ImgSid)
}
#if LANG_CXX11
inline void BindQQRequest::set_imgsid(::std::string&& value) {
  set_has_imgsid();
  imgsid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.BindQQRequest.ImgSid)
}
#endif
inline void BindQQRequest::set_imgsid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_imgsid();
  imgsid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.BindQQRequest.ImgSid)
}
inline void BindQQRequest::set_imgsid(const char* value, size_t size) {
  set_has_imgsid();
  imgsid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.BindQQRequest.ImgSid)
}
inline ::std::string* BindQQRequest::mutable_imgsid() {
  set_has_imgsid();
  // @@protoc_insertion_point(field_mutable:FromCs.BindQQRequest.ImgSid)
  return imgsid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BindQQRequest::release_imgsid() {
  // @@protoc_insertion_point(field_release:FromCs.BindQQRequest.ImgSid)
  clear_has_imgsid();
  return imgsid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BindQQRequest::set_allocated_imgsid(::std::string* imgsid) {
  if (imgsid != NULL) {
    set_has_imgsid();
  } else {
    clear_has_imgsid();
  }
  imgsid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imgsid);
  // @@protoc_insertion_point(field_set_allocated:FromCs.BindQQRequest.ImgSid)
}

// optional string ImgCode = 6;
inline bool BindQQRequest::has_imgcode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BindQQRequest::set_has_imgcode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BindQQRequest::clear_has_imgcode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BindQQRequest::clear_imgcode() {
  imgcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_imgcode();
}
inline const ::std::string& BindQQRequest::imgcode() const {
  // @@protoc_insertion_point(field_get:FromCs.BindQQRequest.ImgCode)
  return imgcode_.GetNoArena();
}
inline void BindQQRequest::set_imgcode(const ::std::string& value) {
  set_has_imgcode();
  imgcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.BindQQRequest.ImgCode)
}
#if LANG_CXX11
inline void BindQQRequest::set_imgcode(::std::string&& value) {
  set_has_imgcode();
  imgcode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.BindQQRequest.ImgCode)
}
#endif
inline void BindQQRequest::set_imgcode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_imgcode();
  imgcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.BindQQRequest.ImgCode)
}
inline void BindQQRequest::set_imgcode(const char* value, size_t size) {
  set_has_imgcode();
  imgcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.BindQQRequest.ImgCode)
}
inline ::std::string* BindQQRequest::mutable_imgcode() {
  set_has_imgcode();
  // @@protoc_insertion_point(field_mutable:FromCs.BindQQRequest.ImgCode)
  return imgcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BindQQRequest::release_imgcode() {
  // @@protoc_insertion_point(field_release:FromCs.BindQQRequest.ImgCode)
  clear_has_imgcode();
  return imgcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BindQQRequest::set_allocated_imgcode(::std::string* imgcode) {
  if (imgcode != NULL) {
    set_has_imgcode();
  } else {
    clear_has_imgcode();
  }
  imgcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imgcode);
  // @@protoc_insertion_point(field_set_allocated:FromCs.BindQQRequest.ImgCode)
}

// required int32 OPCode = 7;
inline bool BindQQRequest::has_opcode() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BindQQRequest::set_has_opcode() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BindQQRequest::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BindQQRequest::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
inline ::google::protobuf::int32 BindQQRequest::opcode() const {
  // @@protoc_insertion_point(field_get:FromCs.BindQQRequest.OPCode)
  return opcode_;
}
inline void BindQQRequest::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
  // @@protoc_insertion_point(field_set:FromCs.BindQQRequest.OPCode)
}

// optional .FromCs.sKBuiltinstringT ImgEncryptKey = 8;
inline bool BindQQRequest::has_imgencryptkey() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BindQQRequest::set_has_imgencryptkey() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BindQQRequest::clear_has_imgencryptkey() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BindQQRequest::clear_imgencryptkey() {
  if (imgencryptkey_ != NULL) imgencryptkey_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_imgencryptkey();
}
inline const ::FromCs::sKBuiltinstringT& BindQQRequest::imgencryptkey() const {
  // @@protoc_insertion_point(field_get:FromCs.BindQQRequest.ImgEncryptKey)
  return imgencryptkey_ != NULL ? *imgencryptkey_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* BindQQRequest::mutable_imgencryptkey() {
  set_has_imgencryptkey();
  if (imgencryptkey_ == NULL) {
    imgencryptkey_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.BindQQRequest.ImgEncryptKey)
  return imgencryptkey_;
}
inline ::FromCs::sKBuiltinstringT* BindQQRequest::release_imgencryptkey() {
  // @@protoc_insertion_point(field_release:FromCs.BindQQRequest.ImgEncryptKey)
  clear_has_imgencryptkey();
  ::FromCs::sKBuiltinstringT* temp = imgencryptkey_;
  imgencryptkey_ = NULL;
  return temp;
}
inline void BindQQRequest::set_allocated_imgencryptkey(::FromCs::sKBuiltinstringT* imgencryptkey) {
  delete imgencryptkey_;
  imgencryptkey_ = imgencryptkey;
  if (imgencryptkey) {
    set_has_imgencryptkey();
  } else {
    clear_has_imgencryptkey();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.BindQQRequest.ImgEncryptKey)
}

// optional .FromCs.sKBuiltinBufferT KSid = 9;
inline bool BindQQRequest::has_ksid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BindQQRequest::set_has_ksid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BindQQRequest::clear_has_ksid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BindQQRequest::clear_ksid() {
  if (ksid_ != NULL) ksid_->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_ksid();
}
inline const ::FromCs::sKBuiltinBufferT& BindQQRequest::ksid() const {
  // @@protoc_insertion_point(field_get:FromCs.BindQQRequest.KSid)
  return ksid_ != NULL ? *ksid_
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* BindQQRequest::mutable_ksid() {
  set_has_ksid();
  if (ksid_ == NULL) {
    ksid_ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.BindQQRequest.KSid)
  return ksid_;
}
inline ::FromCs::sKBuiltinBufferT* BindQQRequest::release_ksid() {
  // @@protoc_insertion_point(field_release:FromCs.BindQQRequest.KSid)
  clear_has_ksid();
  ::FromCs::sKBuiltinBufferT* temp = ksid_;
  ksid_ = NULL;
  return temp;
}
inline void BindQQRequest::set_allocated_ksid(::FromCs::sKBuiltinBufferT* ksid) {
  delete ksid_;
  ksid_ = ksid;
  if (ksid) {
    set_has_ksid();
  } else {
    clear_has_ksid();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.BindQQRequest.KSid)
}

// optional int32 SetAsMainAcct = 10;
inline bool BindQQRequest::has_setasmainacct() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BindQQRequest::set_has_setasmainacct() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BindQQRequest::clear_has_setasmainacct() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BindQQRequest::clear_setasmainacct() {
  setasmainacct_ = 0;
  clear_has_setasmainacct();
}
inline ::google::protobuf::int32 BindQQRequest::setasmainacct() const {
  // @@protoc_insertion_point(field_get:FromCs.BindQQRequest.SetAsMainAcct)
  return setasmainacct_;
}
inline void BindQQRequest::set_setasmainacct(::google::protobuf::int32 value) {
  set_has_setasmainacct();
  setasmainacct_ = value;
  // @@protoc_insertion_point(field_set:FromCs.BindQQRequest.SetAsMainAcct)
}

// optional string SafeDeviceName = 11;
inline bool BindQQRequest::has_safedevicename() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BindQQRequest::set_has_safedevicename() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BindQQRequest::clear_has_safedevicename() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BindQQRequest::clear_safedevicename() {
  safedevicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_safedevicename();
}
inline const ::std::string& BindQQRequest::safedevicename() const {
  // @@protoc_insertion_point(field_get:FromCs.BindQQRequest.SafeDeviceName)
  return safedevicename_.GetNoArena();
}
inline void BindQQRequest::set_safedevicename(const ::std::string& value) {
  set_has_safedevicename();
  safedevicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.BindQQRequest.SafeDeviceName)
}
#if LANG_CXX11
inline void BindQQRequest::set_safedevicename(::std::string&& value) {
  set_has_safedevicename();
  safedevicename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.BindQQRequest.SafeDeviceName)
}
#endif
inline void BindQQRequest::set_safedevicename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_safedevicename();
  safedevicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.BindQQRequest.SafeDeviceName)
}
inline void BindQQRequest::set_safedevicename(const char* value, size_t size) {
  set_has_safedevicename();
  safedevicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.BindQQRequest.SafeDeviceName)
}
inline ::std::string* BindQQRequest::mutable_safedevicename() {
  set_has_safedevicename();
  // @@protoc_insertion_point(field_mutable:FromCs.BindQQRequest.SafeDeviceName)
  return safedevicename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BindQQRequest::release_safedevicename() {
  // @@protoc_insertion_point(field_release:FromCs.BindQQRequest.SafeDeviceName)
  clear_has_safedevicename();
  return safedevicename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BindQQRequest::set_allocated_safedevicename(::std::string* safedevicename) {
  if (safedevicename != NULL) {
    set_has_safedevicename();
  } else {
    clear_has_safedevicename();
  }
  safedevicename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), safedevicename);
  // @@protoc_insertion_point(field_set_allocated:FromCs.BindQQRequest.SafeDeviceName)
}

// optional string SafeDeviceType = 12;
inline bool BindQQRequest::has_safedevicetype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BindQQRequest::set_has_safedevicetype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BindQQRequest::clear_has_safedevicetype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BindQQRequest::clear_safedevicetype() {
  safedevicetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_safedevicetype();
}
inline const ::std::string& BindQQRequest::safedevicetype() const {
  // @@protoc_insertion_point(field_get:FromCs.BindQQRequest.SafeDeviceType)
  return safedevicetype_.GetNoArena();
}
inline void BindQQRequest::set_safedevicetype(const ::std::string& value) {
  set_has_safedevicetype();
  safedevicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.BindQQRequest.SafeDeviceType)
}
#if LANG_CXX11
inline void BindQQRequest::set_safedevicetype(::std::string&& value) {
  set_has_safedevicetype();
  safedevicetype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.BindQQRequest.SafeDeviceType)
}
#endif
inline void BindQQRequest::set_safedevicetype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_safedevicetype();
  safedevicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.BindQQRequest.SafeDeviceType)
}
inline void BindQQRequest::set_safedevicetype(const char* value, size_t size) {
  set_has_safedevicetype();
  safedevicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.BindQQRequest.SafeDeviceType)
}
inline ::std::string* BindQQRequest::mutable_safedevicetype() {
  set_has_safedevicetype();
  // @@protoc_insertion_point(field_mutable:FromCs.BindQQRequest.SafeDeviceType)
  return safedevicetype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BindQQRequest::release_safedevicetype() {
  // @@protoc_insertion_point(field_release:FromCs.BindQQRequest.SafeDeviceType)
  clear_has_safedevicetype();
  return safedevicetype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BindQQRequest::set_allocated_safedevicetype(::std::string* safedevicetype) {
  if (safedevicetype != NULL) {
    set_has_safedevicetype();
  } else {
    clear_has_safedevicetype();
  }
  safedevicetype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), safedevicetype);
  // @@protoc_insertion_point(field_set_allocated:FromCs.BindQQRequest.SafeDeviceType)
}

// -------------------------------------------------------------------

// BindQQResponse

// required .FromCs.BaseResponse base = 1;
inline bool BindQQResponse::has_base() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BindQQResponse::set_has_base() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BindQQResponse::clear_has_base() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BindQQResponse::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseResponse::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseResponse& BindQQResponse::base() const {
  // @@protoc_insertion_point(field_get:FromCs.BindQQResponse.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseResponse::internal_default_instance();
}
inline ::FromCs::BaseResponse* BindQQResponse::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.BindQQResponse.base)
  return base_;
}
inline ::FromCs::BaseResponse* BindQQResponse::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.BindQQResponse.base)
  clear_has_base();
  ::FromCs::BaseResponse* temp = base_;
  base_ = NULL;
  return temp;
}
inline void BindQQResponse::set_allocated_base(::FromCs::BaseResponse* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.BindQQResponse.base)
}

// optional string ImgSid = 2;
inline bool BindQQResponse::has_imgsid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BindQQResponse::set_has_imgsid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BindQQResponse::clear_has_imgsid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BindQQResponse::clear_imgsid() {
  imgsid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_imgsid();
}
inline const ::std::string& BindQQResponse::imgsid() const {
  // @@protoc_insertion_point(field_get:FromCs.BindQQResponse.ImgSid)
  return imgsid_.GetNoArena();
}
inline void BindQQResponse::set_imgsid(const ::std::string& value) {
  set_has_imgsid();
  imgsid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.BindQQResponse.ImgSid)
}
#if LANG_CXX11
inline void BindQQResponse::set_imgsid(::std::string&& value) {
  set_has_imgsid();
  imgsid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.BindQQResponse.ImgSid)
}
#endif
inline void BindQQResponse::set_imgsid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_imgsid();
  imgsid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.BindQQResponse.ImgSid)
}
inline void BindQQResponse::set_imgsid(const char* value, size_t size) {
  set_has_imgsid();
  imgsid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.BindQQResponse.ImgSid)
}
inline ::std::string* BindQQResponse::mutable_imgsid() {
  set_has_imgsid();
  // @@protoc_insertion_point(field_mutable:FromCs.BindQQResponse.ImgSid)
  return imgsid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BindQQResponse::release_imgsid() {
  // @@protoc_insertion_point(field_release:FromCs.BindQQResponse.ImgSid)
  clear_has_imgsid();
  return imgsid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BindQQResponse::set_allocated_imgsid(::std::string* imgsid) {
  if (imgsid != NULL) {
    set_has_imgsid();
  } else {
    clear_has_imgsid();
  }
  imgsid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imgsid);
  // @@protoc_insertion_point(field_set_allocated:FromCs.BindQQResponse.ImgSid)
}

// required .FromCs.sKBuiltinBufferT ImgBuf = 3;
inline bool BindQQResponse::has_imgbuf() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BindQQResponse::set_has_imgbuf() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BindQQResponse::clear_has_imgbuf() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BindQQResponse::clear_imgbuf() {
  if (imgbuf_ != NULL) imgbuf_->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_imgbuf();
}
inline const ::FromCs::sKBuiltinBufferT& BindQQResponse::imgbuf() const {
  // @@protoc_insertion_point(field_get:FromCs.BindQQResponse.ImgBuf)
  return imgbuf_ != NULL ? *imgbuf_
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* BindQQResponse::mutable_imgbuf() {
  set_has_imgbuf();
  if (imgbuf_ == NULL) {
    imgbuf_ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.BindQQResponse.ImgBuf)
  return imgbuf_;
}
inline ::FromCs::sKBuiltinBufferT* BindQQResponse::release_imgbuf() {
  // @@protoc_insertion_point(field_release:FromCs.BindQQResponse.ImgBuf)
  clear_has_imgbuf();
  ::FromCs::sKBuiltinBufferT* temp = imgbuf_;
  imgbuf_ = NULL;
  return temp;
}
inline void BindQQResponse::set_allocated_imgbuf(::FromCs::sKBuiltinBufferT* imgbuf) {
  delete imgbuf_;
  imgbuf_ = imgbuf;
  if (imgbuf) {
    set_has_imgbuf();
  } else {
    clear_has_imgbuf();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.BindQQResponse.ImgBuf)
}

// optional int32 PushMailStatus = 4;
inline bool BindQQResponse::has_pushmailstatus() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BindQQResponse::set_has_pushmailstatus() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BindQQResponse::clear_has_pushmailstatus() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BindQQResponse::clear_pushmailstatus() {
  pushmailstatus_ = 0;
  clear_has_pushmailstatus();
}
inline ::google::protobuf::int32 BindQQResponse::pushmailstatus() const {
  // @@protoc_insertion_point(field_get:FromCs.BindQQResponse.PushMailStatus)
  return pushmailstatus_;
}
inline void BindQQResponse::set_pushmailstatus(::google::protobuf::int32 value) {
  set_has_pushmailstatus();
  pushmailstatus_ = value;
  // @@protoc_insertion_point(field_set:FromCs.BindQQResponse.PushMailStatus)
}

// optional int32 PrivateMsgStatus = 5;
inline bool BindQQResponse::has_privatemsgstatus() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BindQQResponse::set_has_privatemsgstatus() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BindQQResponse::clear_has_privatemsgstatus() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BindQQResponse::clear_privatemsgstatus() {
  privatemsgstatus_ = 0;
  clear_has_privatemsgstatus();
}
inline ::google::protobuf::int32 BindQQResponse::privatemsgstatus() const {
  // @@protoc_insertion_point(field_get:FromCs.BindQQResponse.PrivateMsgStatus)
  return privatemsgstatus_;
}
inline void BindQQResponse::set_privatemsgstatus(::google::protobuf::int32 value) {
  set_has_privatemsgstatus();
  privatemsgstatus_ = value;
  // @@protoc_insertion_point(field_set:FromCs.BindQQResponse.PrivateMsgStatus)
}

// optional string MicroBlogName = 6;
inline bool BindQQResponse::has_microblogname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BindQQResponse::set_has_microblogname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BindQQResponse::clear_has_microblogname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BindQQResponse::clear_microblogname() {
  microblogname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_microblogname();
}
inline const ::std::string& BindQQResponse::microblogname() const {
  // @@protoc_insertion_point(field_get:FromCs.BindQQResponse.MicroBlogName)
  return microblogname_.GetNoArena();
}
inline void BindQQResponse::set_microblogname(const ::std::string& value) {
  set_has_microblogname();
  microblogname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.BindQQResponse.MicroBlogName)
}
#if LANG_CXX11
inline void BindQQResponse::set_microblogname(::std::string&& value) {
  set_has_microblogname();
  microblogname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.BindQQResponse.MicroBlogName)
}
#endif
inline void BindQQResponse::set_microblogname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_microblogname();
  microblogname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.BindQQResponse.MicroBlogName)
}
inline void BindQQResponse::set_microblogname(const char* value, size_t size) {
  set_has_microblogname();
  microblogname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.BindQQResponse.MicroBlogName)
}
inline ::std::string* BindQQResponse::mutable_microblogname() {
  set_has_microblogname();
  // @@protoc_insertion_point(field_mutable:FromCs.BindQQResponse.MicroBlogName)
  return microblogname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BindQQResponse::release_microblogname() {
  // @@protoc_insertion_point(field_release:FromCs.BindQQResponse.MicroBlogName)
  clear_has_microblogname();
  return microblogname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BindQQResponse::set_allocated_microblogname(::std::string* microblogname) {
  if (microblogname != NULL) {
    set_has_microblogname();
  } else {
    clear_has_microblogname();
  }
  microblogname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), microblogname);
  // @@protoc_insertion_point(field_set_allocated:FromCs.BindQQResponse.MicroBlogName)
}

// optional int32 Status = 7;
inline bool BindQQResponse::has_status() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BindQQResponse::set_has_status() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BindQQResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BindQQResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 BindQQResponse::status() const {
  // @@protoc_insertion_point(field_get:FromCs.BindQQResponse.Status)
  return status_;
}
inline void BindQQResponse::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:FromCs.BindQQResponse.Status)
}

// optional string QQMailSkey = 8;
inline bool BindQQResponse::has_qqmailskey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BindQQResponse::set_has_qqmailskey() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BindQQResponse::clear_has_qqmailskey() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BindQQResponse::clear_qqmailskey() {
  qqmailskey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_qqmailskey();
}
inline const ::std::string& BindQQResponse::qqmailskey() const {
  // @@protoc_insertion_point(field_get:FromCs.BindQQResponse.QQMailSkey)
  return qqmailskey_.GetNoArena();
}
inline void BindQQResponse::set_qqmailskey(const ::std::string& value) {
  set_has_qqmailskey();
  qqmailskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.BindQQResponse.QQMailSkey)
}
#if LANG_CXX11
inline void BindQQResponse::set_qqmailskey(::std::string&& value) {
  set_has_qqmailskey();
  qqmailskey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.BindQQResponse.QQMailSkey)
}
#endif
inline void BindQQResponse::set_qqmailskey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_qqmailskey();
  qqmailskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.BindQQResponse.QQMailSkey)
}
inline void BindQQResponse::set_qqmailskey(const char* value, size_t size) {
  set_has_qqmailskey();
  qqmailskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.BindQQResponse.QQMailSkey)
}
inline ::std::string* BindQQResponse::mutable_qqmailskey() {
  set_has_qqmailskey();
  // @@protoc_insertion_point(field_mutable:FromCs.BindQQResponse.QQMailSkey)
  return qqmailskey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BindQQResponse::release_qqmailskey() {
  // @@protoc_insertion_point(field_release:FromCs.BindQQResponse.QQMailSkey)
  clear_has_qqmailskey();
  return qqmailskey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BindQQResponse::set_allocated_qqmailskey(::std::string* qqmailskey) {
  if (qqmailskey != NULL) {
    set_has_qqmailskey();
  } else {
    clear_has_qqmailskey();
  }
  qqmailskey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), qqmailskey);
  // @@protoc_insertion_point(field_set_allocated:FromCs.BindQQResponse.QQMailSkey)
}

// optional .FromCs.sKBuiltinstringT ImgEncryptKey = 9;
inline bool BindQQResponse::has_imgencryptkey() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BindQQResponse::set_has_imgencryptkey() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BindQQResponse::clear_has_imgencryptkey() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BindQQResponse::clear_imgencryptkey() {
  if (imgencryptkey_ != NULL) imgencryptkey_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_imgencryptkey();
}
inline const ::FromCs::sKBuiltinstringT& BindQQResponse::imgencryptkey() const {
  // @@protoc_insertion_point(field_get:FromCs.BindQQResponse.ImgEncryptKey)
  return imgencryptkey_ != NULL ? *imgencryptkey_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* BindQQResponse::mutable_imgencryptkey() {
  set_has_imgencryptkey();
  if (imgencryptkey_ == NULL) {
    imgencryptkey_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.BindQQResponse.ImgEncryptKey)
  return imgencryptkey_;
}
inline ::FromCs::sKBuiltinstringT* BindQQResponse::release_imgencryptkey() {
  // @@protoc_insertion_point(field_release:FromCs.BindQQResponse.ImgEncryptKey)
  clear_has_imgencryptkey();
  ::FromCs::sKBuiltinstringT* temp = imgencryptkey_;
  imgencryptkey_ = NULL;
  return temp;
}
inline void BindQQResponse::set_allocated_imgencryptkey(::FromCs::sKBuiltinstringT* imgencryptkey) {
  delete imgencryptkey_;
  imgencryptkey_ = imgencryptkey;
  if (imgencryptkey) {
    set_has_imgencryptkey();
  } else {
    clear_has_imgencryptkey();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.BindQQResponse.ImgEncryptKey)
}

// optional .FromCs.sKBuiltinBufferT A2Key = 10;
inline bool BindQQResponse::has_a2key() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BindQQResponse::set_has_a2key() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BindQQResponse::clear_has_a2key() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BindQQResponse::clear_a2key() {
  if (a2key_ != NULL) a2key_->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_a2key();
}
inline const ::FromCs::sKBuiltinBufferT& BindQQResponse::a2key() const {
  // @@protoc_insertion_point(field_get:FromCs.BindQQResponse.A2Key)
  return a2key_ != NULL ? *a2key_
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* BindQQResponse::mutable_a2key() {
  set_has_a2key();
  if (a2key_ == NULL) {
    a2key_ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.BindQQResponse.A2Key)
  return a2key_;
}
inline ::FromCs::sKBuiltinBufferT* BindQQResponse::release_a2key() {
  // @@protoc_insertion_point(field_release:FromCs.BindQQResponse.A2Key)
  clear_has_a2key();
  ::FromCs::sKBuiltinBufferT* temp = a2key_;
  a2key_ = NULL;
  return temp;
}
inline void BindQQResponse::set_allocated_a2key(::FromCs::sKBuiltinBufferT* a2key) {
  delete a2key_;
  a2key_ = a2key;
  if (a2key) {
    set_has_a2key();
  } else {
    clear_has_a2key();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.BindQQResponse.A2Key)
}

// optional .FromCs.sKBuiltinBufferT KSid = 11;
inline bool BindQQResponse::has_ksid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BindQQResponse::set_has_ksid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BindQQResponse::clear_has_ksid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BindQQResponse::clear_ksid() {
  if (ksid_ != NULL) ksid_->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_ksid();
}
inline const ::FromCs::sKBuiltinBufferT& BindQQResponse::ksid() const {
  // @@protoc_insertion_point(field_get:FromCs.BindQQResponse.KSid)
  return ksid_ != NULL ? *ksid_
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* BindQQResponse::mutable_ksid() {
  set_has_ksid();
  if (ksid_ == NULL) {
    ksid_ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.BindQQResponse.KSid)
  return ksid_;
}
inline ::FromCs::sKBuiltinBufferT* BindQQResponse::release_ksid() {
  // @@protoc_insertion_point(field_release:FromCs.BindQQResponse.KSid)
  clear_has_ksid();
  ::FromCs::sKBuiltinBufferT* temp = ksid_;
  ksid_ = NULL;
  return temp;
}
inline void BindQQResponse::set_allocated_ksid(::FromCs::sKBuiltinBufferT* ksid) {
  delete ksid_;
  ksid_ = ksid;
  if (ksid) {
    set_has_ksid();
  } else {
    clear_has_ksid();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.BindQQResponse.KSid)
}

// optional .FromCs.SafeDevice SafeDeviceList = 12;
inline bool BindQQResponse::has_safedevicelist() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BindQQResponse::set_has_safedevicelist() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BindQQResponse::clear_has_safedevicelist() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BindQQResponse::clear_safedevicelist() {
  if (safedevicelist_ != NULL) safedevicelist_->::FromCs::SafeDevice::Clear();
  clear_has_safedevicelist();
}
inline const ::FromCs::SafeDevice& BindQQResponse::safedevicelist() const {
  // @@protoc_insertion_point(field_get:FromCs.BindQQResponse.SafeDeviceList)
  return safedevicelist_ != NULL ? *safedevicelist_
                         : *::FromCs::SafeDevice::internal_default_instance();
}
inline ::FromCs::SafeDevice* BindQQResponse::mutable_safedevicelist() {
  set_has_safedevicelist();
  if (safedevicelist_ == NULL) {
    safedevicelist_ = new ::FromCs::SafeDevice;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.BindQQResponse.SafeDeviceList)
  return safedevicelist_;
}
inline ::FromCs::SafeDevice* BindQQResponse::release_safedevicelist() {
  // @@protoc_insertion_point(field_release:FromCs.BindQQResponse.SafeDeviceList)
  clear_has_safedevicelist();
  ::FromCs::SafeDevice* temp = safedevicelist_;
  safedevicelist_ = NULL;
  return temp;
}
inline void BindQQResponse::set_allocated_safedevicelist(::FromCs::SafeDevice* safedevicelist) {
  delete safedevicelist_;
  safedevicelist_ = safedevicelist;
  if (safedevicelist) {
    set_has_safedevicelist();
  } else {
    clear_has_safedevicelist();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.BindQQResponse.SafeDeviceList)
}

// optional int32 SafeDevice = 13;
inline bool BindQQResponse::has_safedevice() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BindQQResponse::set_has_safedevice() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BindQQResponse::clear_has_safedevice() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BindQQResponse::clear_safedevice() {
  safedevice_ = 0;
  clear_has_safedevice();
}
inline ::google::protobuf::int32 BindQQResponse::safedevice() const {
  // @@protoc_insertion_point(field_get:FromCs.BindQQResponse.SafeDevice)
  return safedevice_;
}
inline void BindQQResponse::set_safedevice(::google::protobuf::int32 value) {
  set_has_safedevice();
  safedevice_ = value;
  // @@protoc_insertion_point(field_set:FromCs.BindQQResponse.SafeDevice)
}

// -------------------------------------------------------------------

// ThrowBottleRequest

// required .FromCs.BaseRequest base = 1;
inline bool ThrowBottleRequest::has_base() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ThrowBottleRequest::set_has_base() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ThrowBottleRequest::clear_has_base() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ThrowBottleRequest::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseRequest::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseRequest& ThrowBottleRequest::base() const {
  // @@protoc_insertion_point(field_get:FromCs.ThrowBottleRequest.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseRequest::internal_default_instance();
}
inline ::FromCs::BaseRequest* ThrowBottleRequest::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.ThrowBottleRequest.base)
  return base_;
}
inline ::FromCs::BaseRequest* ThrowBottleRequest::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.ThrowBottleRequest.base)
  clear_has_base();
  ::FromCs::BaseRequest* temp = base_;
  base_ = NULL;
  return temp;
}
inline void ThrowBottleRequest::set_allocated_base(::FromCs::BaseRequest* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.ThrowBottleRequest.base)
}

// required int32 MsgType = 2;
inline bool ThrowBottleRequest::has_msgtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ThrowBottleRequest::set_has_msgtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ThrowBottleRequest::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ThrowBottleRequest::clear_msgtype() {
  msgtype_ = 0;
  clear_has_msgtype();
}
inline ::google::protobuf::int32 ThrowBottleRequest::msgtype() const {
  // @@protoc_insertion_point(field_get:FromCs.ThrowBottleRequest.MsgType)
  return msgtype_;
}
inline void ThrowBottleRequest::set_msgtype(::google::protobuf::int32 value) {
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ThrowBottleRequest.MsgType)
}

// required int32 BottleType = 3;
inline bool ThrowBottleRequest::has_bottletype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ThrowBottleRequest::set_has_bottletype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ThrowBottleRequest::clear_has_bottletype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ThrowBottleRequest::clear_bottletype() {
  bottletype_ = 0;
  clear_has_bottletype();
}
inline ::google::protobuf::int32 ThrowBottleRequest::bottletype() const {
  // @@protoc_insertion_point(field_get:FromCs.ThrowBottleRequest.BottleType)
  return bottletype_;
}
inline void ThrowBottleRequest::set_bottletype(::google::protobuf::int32 value) {
  set_has_bottletype();
  bottletype_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ThrowBottleRequest.BottleType)
}

// required .FromCs.sKBuiltinBufferT Content = 4;
inline bool ThrowBottleRequest::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ThrowBottleRequest::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ThrowBottleRequest::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ThrowBottleRequest::clear_content() {
  if (content_ != NULL) content_->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_content();
}
inline const ::FromCs::sKBuiltinBufferT& ThrowBottleRequest::content() const {
  // @@protoc_insertion_point(field_get:FromCs.ThrowBottleRequest.Content)
  return content_ != NULL ? *content_
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* ThrowBottleRequest::mutable_content() {
  set_has_content();
  if (content_ == NULL) {
    content_ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.ThrowBottleRequest.Content)
  return content_;
}
inline ::FromCs::sKBuiltinBufferT* ThrowBottleRequest::release_content() {
  // @@protoc_insertion_point(field_release:FromCs.ThrowBottleRequest.Content)
  clear_has_content();
  ::FromCs::sKBuiltinBufferT* temp = content_;
  content_ = NULL;
  return temp;
}
inline void ThrowBottleRequest::set_allocated_content(::FromCs::sKBuiltinBufferT* content) {
  delete content_;
  content_ = content;
  if (content) {
    set_has_content();
  } else {
    clear_has_content();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.ThrowBottleRequest.Content)
}

// required int32 StartPos = 5;
inline bool ThrowBottleRequest::has_startpos() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ThrowBottleRequest::set_has_startpos() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ThrowBottleRequest::clear_has_startpos() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ThrowBottleRequest::clear_startpos() {
  startpos_ = 0;
  clear_has_startpos();
}
inline ::google::protobuf::int32 ThrowBottleRequest::startpos() const {
  // @@protoc_insertion_point(field_get:FromCs.ThrowBottleRequest.StartPos)
  return startpos_;
}
inline void ThrowBottleRequest::set_startpos(::google::protobuf::int32 value) {
  set_has_startpos();
  startpos_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ThrowBottleRequest.StartPos)
}

// required int32 TotalLen = 6;
inline bool ThrowBottleRequest::has_totallen() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ThrowBottleRequest::set_has_totallen() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ThrowBottleRequest::clear_has_totallen() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ThrowBottleRequest::clear_totallen() {
  totallen_ = 0;
  clear_has_totallen();
}
inline ::google::protobuf::int32 ThrowBottleRequest::totallen() const {
  // @@protoc_insertion_point(field_get:FromCs.ThrowBottleRequest.TotalLen)
  return totallen_;
}
inline void ThrowBottleRequest::set_totallen(::google::protobuf::int32 value) {
  set_has_totallen();
  totallen_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ThrowBottleRequest.TotalLen)
}

// optional string ClientID = 7;
inline bool ThrowBottleRequest::has_clientid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ThrowBottleRequest::set_has_clientid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ThrowBottleRequest::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ThrowBottleRequest::clear_clientid() {
  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientid();
}
inline const ::std::string& ThrowBottleRequest::clientid() const {
  // @@protoc_insertion_point(field_get:FromCs.ThrowBottleRequest.ClientID)
  return clientid_.GetNoArena();
}
inline void ThrowBottleRequest::set_clientid(const ::std::string& value) {
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ThrowBottleRequest.ClientID)
}
#if LANG_CXX11
inline void ThrowBottleRequest::set_clientid(::std::string&& value) {
  set_has_clientid();
  clientid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ThrowBottleRequest.ClientID)
}
#endif
inline void ThrowBottleRequest::set_clientid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ThrowBottleRequest.ClientID)
}
inline void ThrowBottleRequest::set_clientid(const char* value, size_t size) {
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ThrowBottleRequest.ClientID)
}
inline ::std::string* ThrowBottleRequest::mutable_clientid() {
  set_has_clientid();
  // @@protoc_insertion_point(field_mutable:FromCs.ThrowBottleRequest.ClientID)
  return clientid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ThrowBottleRequest::release_clientid() {
  // @@protoc_insertion_point(field_release:FromCs.ThrowBottleRequest.ClientID)
  clear_has_clientid();
  return clientid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ThrowBottleRequest::set_allocated_clientid(::std::string* clientid) {
  if (clientid != NULL) {
    set_has_clientid();
  } else {
    clear_has_clientid();
  }
  clientid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientid);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ThrowBottleRequest.ClientID)
}

// optional int32 VoiceLength = 8;
inline bool ThrowBottleRequest::has_voicelength() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ThrowBottleRequest::set_has_voicelength() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ThrowBottleRequest::clear_has_voicelength() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ThrowBottleRequest::clear_voicelength() {
  voicelength_ = 0;
  clear_has_voicelength();
}
inline ::google::protobuf::int32 ThrowBottleRequest::voicelength() const {
  // @@protoc_insertion_point(field_get:FromCs.ThrowBottleRequest.VoiceLength)
  return voicelength_;
}
inline void ThrowBottleRequest::set_voicelength(::google::protobuf::int32 value) {
  set_has_voicelength();
  voicelength_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ThrowBottleRequest.VoiceLength)
}

// -------------------------------------------------------------------

// ThrowBottleResponse

// required .FromCs.BaseResponse base = 1;
inline bool ThrowBottleResponse::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ThrowBottleResponse::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ThrowBottleResponse::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ThrowBottleResponse::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseResponse::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseResponse& ThrowBottleResponse::base() const {
  // @@protoc_insertion_point(field_get:FromCs.ThrowBottleResponse.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseResponse::internal_default_instance();
}
inline ::FromCs::BaseResponse* ThrowBottleResponse::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.ThrowBottleResponse.base)
  return base_;
}
inline ::FromCs::BaseResponse* ThrowBottleResponse::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.ThrowBottleResponse.base)
  clear_has_base();
  ::FromCs::BaseResponse* temp = base_;
  base_ = NULL;
  return temp;
}
inline void ThrowBottleResponse::set_allocated_base(::FromCs::BaseResponse* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.ThrowBottleResponse.base)
}

// required int32 StartPos = 2;
inline bool ThrowBottleResponse::has_startpos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ThrowBottleResponse::set_has_startpos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ThrowBottleResponse::clear_has_startpos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ThrowBottleResponse::clear_startpos() {
  startpos_ = 0;
  clear_has_startpos();
}
inline ::google::protobuf::int32 ThrowBottleResponse::startpos() const {
  // @@protoc_insertion_point(field_get:FromCs.ThrowBottleResponse.StartPos)
  return startpos_;
}
inline void ThrowBottleResponse::set_startpos(::google::protobuf::int32 value) {
  set_has_startpos();
  startpos_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ThrowBottleResponse.StartPos)
}

// required int32 TotalLen = 3;
inline bool ThrowBottleResponse::has_totallen() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ThrowBottleResponse::set_has_totallen() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ThrowBottleResponse::clear_has_totallen() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ThrowBottleResponse::clear_totallen() {
  totallen_ = 0;
  clear_has_totallen();
}
inline ::google::protobuf::int32 ThrowBottleResponse::totallen() const {
  // @@protoc_insertion_point(field_get:FromCs.ThrowBottleResponse.TotalLen)
  return totallen_;
}
inline void ThrowBottleResponse::set_totallen(::google::protobuf::int32 value) {
  set_has_totallen();
  totallen_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ThrowBottleResponse.TotalLen)
}

// required int32 ThrowCount = 4;
inline bool ThrowBottleResponse::has_throwcount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ThrowBottleResponse::set_has_throwcount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ThrowBottleResponse::clear_has_throwcount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ThrowBottleResponse::clear_throwcount() {
  throwcount_ = 0;
  clear_has_throwcount();
}
inline ::google::protobuf::int32 ThrowBottleResponse::throwcount() const {
  // @@protoc_insertion_point(field_get:FromCs.ThrowBottleResponse.ThrowCount)
  return throwcount_;
}
inline void ThrowBottleResponse::set_throwcount(::google::protobuf::int32 value) {
  set_has_throwcount();
  throwcount_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ThrowBottleResponse.ThrowCount)
}

// required int32 PickCount = 5;
inline bool ThrowBottleResponse::has_pickcount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ThrowBottleResponse::set_has_pickcount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ThrowBottleResponse::clear_has_pickcount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ThrowBottleResponse::clear_pickcount() {
  pickcount_ = 0;
  clear_has_pickcount();
}
inline ::google::protobuf::int32 ThrowBottleResponse::pickcount() const {
  // @@protoc_insertion_point(field_get:FromCs.ThrowBottleResponse.PickCount)
  return pickcount_;
}
inline void ThrowBottleResponse::set_pickcount(::google::protobuf::int32 value) {
  set_has_pickcount();
  pickcount_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ThrowBottleResponse.PickCount)
}

// required int32 BottleListNumb = 6;
inline bool ThrowBottleResponse::has_bottlelistnumb() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ThrowBottleResponse::set_has_bottlelistnumb() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ThrowBottleResponse::clear_has_bottlelistnumb() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ThrowBottleResponse::clear_bottlelistnumb() {
  bottlelistnumb_ = 0;
  clear_has_bottlelistnumb();
}
inline ::google::protobuf::int32 ThrowBottleResponse::bottlelistnumb() const {
  // @@protoc_insertion_point(field_get:FromCs.ThrowBottleResponse.BottleListNumb)
  return bottlelistnumb_;
}
inline void ThrowBottleResponse::set_bottlelistnumb(::google::protobuf::int32 value) {
  set_has_bottlelistnumb();
  bottlelistnumb_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ThrowBottleResponse.BottleListNumb)
}

// repeated .FromCs.sKBuiltinstringT BottleList = 7;
inline int ThrowBottleResponse::bottlelist_size() const {
  return bottlelist_.size();
}
inline void ThrowBottleResponse::clear_bottlelist() {
  bottlelist_.Clear();
}
inline const ::FromCs::sKBuiltinstringT& ThrowBottleResponse::bottlelist(int index) const {
  // @@protoc_insertion_point(field_get:FromCs.ThrowBottleResponse.BottleList)
  return bottlelist_.Get(index);
}
inline ::FromCs::sKBuiltinstringT* ThrowBottleResponse::mutable_bottlelist(int index) {
  // @@protoc_insertion_point(field_mutable:FromCs.ThrowBottleResponse.BottleList)
  return bottlelist_.Mutable(index);
}
inline ::FromCs::sKBuiltinstringT* ThrowBottleResponse::add_bottlelist() {
  // @@protoc_insertion_point(field_add:FromCs.ThrowBottleResponse.BottleList)
  return bottlelist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::FromCs::sKBuiltinstringT >*
ThrowBottleResponse::mutable_bottlelist() {
  // @@protoc_insertion_point(field_mutable_list:FromCs.ThrowBottleResponse.BottleList)
  return &bottlelist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::FromCs::sKBuiltinstringT >&
ThrowBottleResponse::bottlelist() const {
  // @@protoc_insertion_point(field_list:FromCs.ThrowBottleResponse.BottleList)
  return bottlelist_;
}

// required int32 Distance = 8;
inline bool ThrowBottleResponse::has_distance() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ThrowBottleResponse::set_has_distance() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ThrowBottleResponse::clear_has_distance() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ThrowBottleResponse::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
inline ::google::protobuf::int32 ThrowBottleResponse::distance() const {
  // @@protoc_insertion_point(field_get:FromCs.ThrowBottleResponse.Distance)
  return distance_;
}
inline void ThrowBottleResponse::set_distance(::google::protobuf::int32 value) {
  set_has_distance();
  distance_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ThrowBottleResponse.Distance)
}

// -------------------------------------------------------------------

// ShakereportRequest

// required .FromCs.BaseRequest base = 1;
inline bool ShakereportRequest::has_base() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ShakereportRequest::set_has_base() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ShakereportRequest::clear_has_base() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ShakereportRequest::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseRequest::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseRequest& ShakereportRequest::base() const {
  // @@protoc_insertion_point(field_get:FromCs.ShakereportRequest.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseRequest::internal_default_instance();
}
inline ::FromCs::BaseRequest* ShakereportRequest::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.ShakereportRequest.base)
  return base_;
}
inline ::FromCs::BaseRequest* ShakereportRequest::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.ShakereportRequest.base)
  clear_has_base();
  ::FromCs::BaseRequest* temp = base_;
  base_ = NULL;
  return temp;
}
inline void ShakereportRequest::set_allocated_base(::FromCs::BaseRequest* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.ShakereportRequest.base)
}

// required int32 OpCode = 2;
inline bool ShakereportRequest::has_opcode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ShakereportRequest::set_has_opcode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ShakereportRequest::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ShakereportRequest::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
inline ::google::protobuf::int32 ShakereportRequest::opcode() const {
  // @@protoc_insertion_point(field_get:FromCs.ShakereportRequest.OpCode)
  return opcode_;
}
inline void ShakereportRequest::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ShakereportRequest.OpCode)
}

// required float Longitude = 3;
inline bool ShakereportRequest::has_longitude() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ShakereportRequest::set_has_longitude() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ShakereportRequest::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ShakereportRequest::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline float ShakereportRequest::longitude() const {
  // @@protoc_insertion_point(field_get:FromCs.ShakereportRequest.Longitude)
  return longitude_;
}
inline void ShakereportRequest::set_longitude(float value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ShakereportRequest.Longitude)
}

// required float Latitude = 4;
inline bool ShakereportRequest::has_latitude() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ShakereportRequest::set_has_latitude() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ShakereportRequest::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ShakereportRequest::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline float ShakereportRequest::latitude() const {
  // @@protoc_insertion_point(field_get:FromCs.ShakereportRequest.Latitude)
  return latitude_;
}
inline void ShakereportRequest::set_latitude(float value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ShakereportRequest.Latitude)
}

// required int32 Precision = 5;
inline bool ShakereportRequest::has_precision() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ShakereportRequest::set_has_precision() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ShakereportRequest::clear_has_precision() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ShakereportRequest::clear_precision() {
  precision_ = 0;
  clear_has_precision();
}
inline ::google::protobuf::int32 ShakereportRequest::precision() const {
  // @@protoc_insertion_point(field_get:FromCs.ShakereportRequest.Precision)
  return precision_;
}
inline void ShakereportRequest::set_precision(::google::protobuf::int32 value) {
  set_has_precision();
  precision_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ShakereportRequest.Precision)
}

// optional string MacAddr = 6;
inline bool ShakereportRequest::has_macaddr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShakereportRequest::set_has_macaddr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShakereportRequest::clear_has_macaddr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShakereportRequest::clear_macaddr() {
  macaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_macaddr();
}
inline const ::std::string& ShakereportRequest::macaddr() const {
  // @@protoc_insertion_point(field_get:FromCs.ShakereportRequest.MacAddr)
  return macaddr_.GetNoArena();
}
inline void ShakereportRequest::set_macaddr(const ::std::string& value) {
  set_has_macaddr();
  macaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ShakereportRequest.MacAddr)
}
#if LANG_CXX11
inline void ShakereportRequest::set_macaddr(::std::string&& value) {
  set_has_macaddr();
  macaddr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ShakereportRequest.MacAddr)
}
#endif
inline void ShakereportRequest::set_macaddr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_macaddr();
  macaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ShakereportRequest.MacAddr)
}
inline void ShakereportRequest::set_macaddr(const char* value, size_t size) {
  set_has_macaddr();
  macaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ShakereportRequest.MacAddr)
}
inline ::std::string* ShakereportRequest::mutable_macaddr() {
  set_has_macaddr();
  // @@protoc_insertion_point(field_mutable:FromCs.ShakereportRequest.MacAddr)
  return macaddr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShakereportRequest::release_macaddr() {
  // @@protoc_insertion_point(field_release:FromCs.ShakereportRequest.MacAddr)
  clear_has_macaddr();
  return macaddr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShakereportRequest::set_allocated_macaddr(::std::string* macaddr) {
  if (macaddr != NULL) {
    set_has_macaddr();
  } else {
    clear_has_macaddr();
  }
  macaddr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), macaddr);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ShakereportRequest.MacAddr)
}

// optional string CellId = 7;
inline bool ShakereportRequest::has_cellid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShakereportRequest::set_has_cellid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShakereportRequest::clear_has_cellid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShakereportRequest::clear_cellid() {
  cellid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cellid();
}
inline const ::std::string& ShakereportRequest::cellid() const {
  // @@protoc_insertion_point(field_get:FromCs.ShakereportRequest.CellId)
  return cellid_.GetNoArena();
}
inline void ShakereportRequest::set_cellid(const ::std::string& value) {
  set_has_cellid();
  cellid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ShakereportRequest.CellId)
}
#if LANG_CXX11
inline void ShakereportRequest::set_cellid(::std::string&& value) {
  set_has_cellid();
  cellid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ShakereportRequest.CellId)
}
#endif
inline void ShakereportRequest::set_cellid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cellid();
  cellid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ShakereportRequest.CellId)
}
inline void ShakereportRequest::set_cellid(const char* value, size_t size) {
  set_has_cellid();
  cellid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ShakereportRequest.CellId)
}
inline ::std::string* ShakereportRequest::mutable_cellid() {
  set_has_cellid();
  // @@protoc_insertion_point(field_mutable:FromCs.ShakereportRequest.CellId)
  return cellid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShakereportRequest::release_cellid() {
  // @@protoc_insertion_point(field_release:FromCs.ShakereportRequest.CellId)
  clear_has_cellid();
  return cellid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShakereportRequest::set_allocated_cellid(::std::string* cellid) {
  if (cellid != NULL) {
    set_has_cellid();
  } else {
    clear_has_cellid();
  }
  cellid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cellid);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ShakereportRequest.CellId)
}

// required int32 ImgId = 8;
inline bool ShakereportRequest::has_imgid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ShakereportRequest::set_has_imgid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ShakereportRequest::clear_has_imgid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ShakereportRequest::clear_imgid() {
  imgid_ = 0;
  clear_has_imgid();
}
inline ::google::protobuf::int32 ShakereportRequest::imgid() const {
  // @@protoc_insertion_point(field_get:FromCs.ShakereportRequest.ImgId)
  return imgid_;
}
inline void ShakereportRequest::set_imgid(::google::protobuf::int32 value) {
  set_has_imgid();
  imgid_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ShakereportRequest.ImgId)
}

// required int32 Times = 9;
inline bool ShakereportRequest::has_times() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ShakereportRequest::set_has_times() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ShakereportRequest::clear_has_times() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ShakereportRequest::clear_times() {
  times_ = 0;
  clear_has_times();
}
inline ::google::protobuf::int32 ShakereportRequest::times() const {
  // @@protoc_insertion_point(field_get:FromCs.ShakereportRequest.Times)
  return times_;
}
inline void ShakereportRequest::set_times(::google::protobuf::int32 value) {
  set_has_times();
  times_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ShakereportRequest.Times)
}

// optional int32 GPSSource = 10;
inline bool ShakereportRequest::has_gpssource() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ShakereportRequest::set_has_gpssource() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ShakereportRequest::clear_has_gpssource() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ShakereportRequest::clear_gpssource() {
  gpssource_ = 0;
  clear_has_gpssource();
}
inline ::google::protobuf::int32 ShakereportRequest::gpssource() const {
  // @@protoc_insertion_point(field_get:FromCs.ShakereportRequest.GPSSource)
  return gpssource_;
}
inline void ShakereportRequest::set_gpssource(::google::protobuf::int32 value) {
  set_has_gpssource();
  gpssource_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ShakereportRequest.GPSSource)
}

// -------------------------------------------------------------------

// ShakereportResponse

// required .FromCs.BaseResponse base = 1;
inline bool ShakereportResponse::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShakereportResponse::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShakereportResponse::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShakereportResponse::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseResponse::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseResponse& ShakereportResponse::base() const {
  // @@protoc_insertion_point(field_get:FromCs.ShakereportResponse.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseResponse::internal_default_instance();
}
inline ::FromCs::BaseResponse* ShakereportResponse::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.ShakereportResponse.base)
  return base_;
}
inline ::FromCs::BaseResponse* ShakereportResponse::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.ShakereportResponse.base)
  clear_has_base();
  ::FromCs::BaseResponse* temp = base_;
  base_ = NULL;
  return temp;
}
inline void ShakereportResponse::set_allocated_base(::FromCs::BaseResponse* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.ShakereportResponse.base)
}

// required .FromCs.sKBuiltinBufferT Buffer = 2;
inline bool ShakereportResponse::has_buffer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShakereportResponse::set_has_buffer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShakereportResponse::clear_has_buffer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShakereportResponse::clear_buffer() {
  if (buffer_ != NULL) buffer_->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_buffer();
}
inline const ::FromCs::sKBuiltinBufferT& ShakereportResponse::buffer() const {
  // @@protoc_insertion_point(field_get:FromCs.ShakereportResponse.Buffer)
  return buffer_ != NULL ? *buffer_
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* ShakereportResponse::mutable_buffer() {
  set_has_buffer();
  if (buffer_ == NULL) {
    buffer_ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.ShakereportResponse.Buffer)
  return buffer_;
}
inline ::FromCs::sKBuiltinBufferT* ShakereportResponse::release_buffer() {
  // @@protoc_insertion_point(field_release:FromCs.ShakereportResponse.Buffer)
  clear_has_buffer();
  ::FromCs::sKBuiltinBufferT* temp = buffer_;
  buffer_ = NULL;
  return temp;
}
inline void ShakereportResponse::set_allocated_buffer(::FromCs::sKBuiltinBufferT* buffer) {
  delete buffer_;
  buffer_ = buffer;
  if (buffer) {
    set_has_buffer();
  } else {
    clear_has_buffer();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.ShakereportResponse.Buffer)
}

// required int32 Ret = 3;
inline bool ShakereportResponse::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ShakereportResponse::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ShakereportResponse::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ShakereportResponse::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 ShakereportResponse::ret() const {
  // @@protoc_insertion_point(field_get:FromCs.ShakereportResponse.Ret)
  return ret_;
}
inline void ShakereportResponse::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ShakereportResponse.Ret)
}

// required int32 ImgId = 4;
inline bool ShakereportResponse::has_imgid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ShakereportResponse::set_has_imgid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ShakereportResponse::clear_has_imgid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ShakereportResponse::clear_imgid() {
  imgid_ = 0;
  clear_has_imgid();
}
inline ::google::protobuf::int32 ShakereportResponse::imgid() const {
  // @@protoc_insertion_point(field_get:FromCs.ShakereportResponse.ImgId)
  return imgid_;
}
inline void ShakereportResponse::set_imgid(::google::protobuf::int32 value) {
  set_has_imgid();
  imgid_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ShakereportResponse.ImgId)
}

// optional int32 ImgTotoalLen = 5;
inline bool ShakereportResponse::has_imgtotoallen() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ShakereportResponse::set_has_imgtotoallen() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ShakereportResponse::clear_has_imgtotoallen() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ShakereportResponse::clear_imgtotoallen() {
  imgtotoallen_ = 0;
  clear_has_imgtotoallen();
}
inline ::google::protobuf::int32 ShakereportResponse::imgtotoallen() const {
  // @@protoc_insertion_point(field_get:FromCs.ShakereportResponse.ImgTotoalLen)
  return imgtotoallen_;
}
inline void ShakereportResponse::set_imgtotoallen(::google::protobuf::int32 value) {
  set_has_imgtotoallen();
  imgtotoallen_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ShakereportResponse.ImgTotoalLen)
}

// -------------------------------------------------------------------

// ShakegetRequest

// required .FromCs.BaseRequest base = 1;
inline bool ShakegetRequest::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShakegetRequest::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShakegetRequest::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShakegetRequest::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseRequest::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseRequest& ShakegetRequest::base() const {
  // @@protoc_insertion_point(field_get:FromCs.ShakegetRequest.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseRequest::internal_default_instance();
}
inline ::FromCs::BaseRequest* ShakegetRequest::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.ShakegetRequest.base)
  return base_;
}
inline ::FromCs::BaseRequest* ShakegetRequest::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.ShakegetRequest.base)
  clear_has_base();
  ::FromCs::BaseRequest* temp = base_;
  base_ = NULL;
  return temp;
}
inline void ShakegetRequest::set_allocated_base(::FromCs::BaseRequest* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.ShakegetRequest.base)
}

// required .FromCs.sKBuiltinBufferT Buffer = 2;
inline bool ShakegetRequest::has_buffer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShakegetRequest::set_has_buffer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShakegetRequest::clear_has_buffer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShakegetRequest::clear_buffer() {
  if (buffer_ != NULL) buffer_->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_buffer();
}
inline const ::FromCs::sKBuiltinBufferT& ShakegetRequest::buffer() const {
  // @@protoc_insertion_point(field_get:FromCs.ShakegetRequest.Buffer)
  return buffer_ != NULL ? *buffer_
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* ShakegetRequest::mutable_buffer() {
  set_has_buffer();
  if (buffer_ == NULL) {
    buffer_ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.ShakegetRequest.Buffer)
  return buffer_;
}
inline ::FromCs::sKBuiltinBufferT* ShakegetRequest::release_buffer() {
  // @@protoc_insertion_point(field_release:FromCs.ShakegetRequest.Buffer)
  clear_has_buffer();
  ::FromCs::sKBuiltinBufferT* temp = buffer_;
  buffer_ = NULL;
  return temp;
}
inline void ShakegetRequest::set_allocated_buffer(::FromCs::sKBuiltinBufferT* buffer) {
  delete buffer_;
  buffer_ = buffer;
  if (buffer) {
    set_has_buffer();
  } else {
    clear_has_buffer();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.ShakegetRequest.Buffer)
}

// optional int32 IsNewVerson = 3;
inline bool ShakegetRequest::has_isnewverson() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ShakegetRequest::set_has_isnewverson() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ShakegetRequest::clear_has_isnewverson() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ShakegetRequest::clear_isnewverson() {
  isnewverson_ = 0;
  clear_has_isnewverson();
}
inline ::google::protobuf::int32 ShakegetRequest::isnewverson() const {
  // @@protoc_insertion_point(field_get:FromCs.ShakegetRequest.IsNewVerson)
  return isnewverson_;
}
inline void ShakegetRequest::set_isnewverson(::google::protobuf::int32 value) {
  set_has_isnewverson();
  isnewverson_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ShakegetRequest.IsNewVerson)
}

// -------------------------------------------------------------------

// ShakegetResponse

// required .FromCs.BaseResponse base = 1;
inline bool ShakegetResponse::has_base() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShakegetResponse::set_has_base() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShakegetResponse::clear_has_base() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShakegetResponse::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseResponse::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseResponse& ShakegetResponse::base() const {
  // @@protoc_insertion_point(field_get:FromCs.ShakegetResponse.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseResponse::internal_default_instance();
}
inline ::FromCs::BaseResponse* ShakegetResponse::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.ShakegetResponse.base)
  return base_;
}
inline ::FromCs::BaseResponse* ShakegetResponse::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.ShakegetResponse.base)
  clear_has_base();
  ::FromCs::BaseResponse* temp = base_;
  base_ = NULL;
  return temp;
}
inline void ShakegetResponse::set_allocated_base(::FromCs::BaseResponse* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.ShakegetResponse.base)
}

// required int32 Count = 2;
inline bool ShakegetResponse::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ShakegetResponse::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ShakegetResponse::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ShakegetResponse::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 ShakegetResponse::count() const {
  // @@protoc_insertion_point(field_get:FromCs.ShakegetResponse.Count)
  return count_;
}
inline void ShakegetResponse::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ShakegetResponse.Count)
}

// repeated .FromCs.ShakeGetObj ShakeGetList = 3;
inline int ShakegetResponse::shakegetlist_size() const {
  return shakegetlist_.size();
}
inline void ShakegetResponse::clear_shakegetlist() {
  shakegetlist_.Clear();
}
inline const ::FromCs::ShakeGetObj& ShakegetResponse::shakegetlist(int index) const {
  // @@protoc_insertion_point(field_get:FromCs.ShakegetResponse.ShakeGetList)
  return shakegetlist_.Get(index);
}
inline ::FromCs::ShakeGetObj* ShakegetResponse::mutable_shakegetlist(int index) {
  // @@protoc_insertion_point(field_mutable:FromCs.ShakegetResponse.ShakeGetList)
  return shakegetlist_.Mutable(index);
}
inline ::FromCs::ShakeGetObj* ShakegetResponse::add_shakegetlist() {
  // @@protoc_insertion_point(field_add:FromCs.ShakegetResponse.ShakeGetList)
  return shakegetlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::FromCs::ShakeGetObj >*
ShakegetResponse::mutable_shakegetlist() {
  // @@protoc_insertion_point(field_mutable_list:FromCs.ShakegetResponse.ShakeGetList)
  return &shakegetlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::FromCs::ShakeGetObj >&
ShakegetResponse::shakegetlist() const {
  // @@protoc_insertion_point(field_list:FromCs.ShakegetResponse.ShakeGetList)
  return shakegetlist_;
}

// optional string Tips = 4;
inline bool ShakegetResponse::has_tips() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShakegetResponse::set_has_tips() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShakegetResponse::clear_has_tips() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShakegetResponse::clear_tips() {
  tips_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tips();
}
inline const ::std::string& ShakegetResponse::tips() const {
  // @@protoc_insertion_point(field_get:FromCs.ShakegetResponse.Tips)
  return tips_.GetNoArena();
}
inline void ShakegetResponse::set_tips(const ::std::string& value) {
  set_has_tips();
  tips_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ShakegetResponse.Tips)
}
#if LANG_CXX11
inline void ShakegetResponse::set_tips(::std::string&& value) {
  set_has_tips();
  tips_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ShakegetResponse.Tips)
}
#endif
inline void ShakegetResponse::set_tips(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tips();
  tips_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ShakegetResponse.Tips)
}
inline void ShakegetResponse::set_tips(const char* value, size_t size) {
  set_has_tips();
  tips_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ShakegetResponse.Tips)
}
inline ::std::string* ShakegetResponse::mutable_tips() {
  set_has_tips();
  // @@protoc_insertion_point(field_mutable:FromCs.ShakegetResponse.Tips)
  return tips_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShakegetResponse::release_tips() {
  // @@protoc_insertion_point(field_release:FromCs.ShakegetResponse.Tips)
  clear_has_tips();
  return tips_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShakegetResponse::set_allocated_tips(::std::string* tips) {
  if (tips != NULL) {
    set_has_tips();
  } else {
    clear_has_tips();
  }
  tips_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tips);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ShakegetResponse.Tips)
}

// required int32 Scence = 5;
inline bool ShakegetResponse::has_scence() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ShakegetResponse::set_has_scence() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ShakegetResponse::clear_has_scence() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ShakegetResponse::clear_scence() {
  scence_ = 0;
  clear_has_scence();
}
inline ::google::protobuf::int32 ShakegetResponse::scence() const {
  // @@protoc_insertion_point(field_get:FromCs.ShakegetResponse.Scence)
  return scence_;
}
inline void ShakegetResponse::set_scence(::google::protobuf::int32 value) {
  set_has_scence();
  scence_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ShakegetResponse.Scence)
}

// required int32 Ret = 6;
inline bool ShakegetResponse::has_ret() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ShakegetResponse::set_has_ret() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ShakegetResponse::clear_has_ret() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ShakegetResponse::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 ShakegetResponse::ret() const {
  // @@protoc_insertion_point(field_get:FromCs.ShakegetResponse.Ret)
  return ret_;
}
inline void ShakegetResponse::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ShakegetResponse.Ret)
}

// -------------------------------------------------------------------

// ManualAuthRequest

// required .FromCs.BaseRequest base = 1;
inline bool ManualAuthRequest::has_base() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ManualAuthRequest::set_has_base() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ManualAuthRequest::clear_has_base() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ManualAuthRequest::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseRequest::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseRequest& ManualAuthRequest::base() const {
  // @@protoc_insertion_point(field_get:FromCs.ManualAuthRequest.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseRequest::internal_default_instance();
}
inline ::FromCs::BaseRequest* ManualAuthRequest::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.ManualAuthRequest.base)
  return base_;
}
inline ::FromCs::BaseRequest* ManualAuthRequest::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.ManualAuthRequest.base)
  clear_has_base();
  ::FromCs::BaseRequest* temp = base_;
  base_ = NULL;
  return temp;
}
inline void ManualAuthRequest::set_allocated_base(::FromCs::BaseRequest* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.ManualAuthRequest.base)
}

// optional .FromCs.ExtData BaseReqInfo = 2;
inline bool ManualAuthRequest::has_basereqinfo() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ManualAuthRequest::set_has_basereqinfo() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ManualAuthRequest::clear_has_basereqinfo() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ManualAuthRequest::clear_basereqinfo() {
  if (basereqinfo_ != NULL) basereqinfo_->::FromCs::ExtData::Clear();
  clear_has_basereqinfo();
}
inline const ::FromCs::ExtData& ManualAuthRequest::basereqinfo() const {
  // @@protoc_insertion_point(field_get:FromCs.ManualAuthRequest.BaseReqInfo)
  return basereqinfo_ != NULL ? *basereqinfo_
                         : *::FromCs::ExtData::internal_default_instance();
}
inline ::FromCs::ExtData* ManualAuthRequest::mutable_basereqinfo() {
  set_has_basereqinfo();
  if (basereqinfo_ == NULL) {
    basereqinfo_ = new ::FromCs::ExtData;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.ManualAuthRequest.BaseReqInfo)
  return basereqinfo_;
}
inline ::FromCs::ExtData* ManualAuthRequest::release_basereqinfo() {
  // @@protoc_insertion_point(field_release:FromCs.ManualAuthRequest.BaseReqInfo)
  clear_has_basereqinfo();
  ::FromCs::ExtData* temp = basereqinfo_;
  basereqinfo_ = NULL;
  return temp;
}
inline void ManualAuthRequest::set_allocated_basereqinfo(::FromCs::ExtData* basereqinfo) {
  delete basereqinfo_;
  basereqinfo_ = basereqinfo;
  if (basereqinfo) {
    set_has_basereqinfo();
  } else {
    clear_has_basereqinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.ManualAuthRequest.BaseReqInfo)
}

// optional string IMEI = 3;
inline bool ManualAuthRequest::has_imei() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ManualAuthRequest::set_has_imei() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ManualAuthRequest::clear_has_imei() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ManualAuthRequest::clear_imei() {
  imei_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_imei();
}
inline const ::std::string& ManualAuthRequest::imei() const {
  // @@protoc_insertion_point(field_get:FromCs.ManualAuthRequest.IMEI)
  return imei_.GetNoArena();
}
inline void ManualAuthRequest::set_imei(const ::std::string& value) {
  set_has_imei();
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ManualAuthRequest.IMEI)
}
#if LANG_CXX11
inline void ManualAuthRequest::set_imei(::std::string&& value) {
  set_has_imei();
  imei_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ManualAuthRequest.IMEI)
}
#endif
inline void ManualAuthRequest::set_imei(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_imei();
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ManualAuthRequest.IMEI)
}
inline void ManualAuthRequest::set_imei(const char* value, size_t size) {
  set_has_imei();
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ManualAuthRequest.IMEI)
}
inline ::std::string* ManualAuthRequest::mutable_imei() {
  set_has_imei();
  // @@protoc_insertion_point(field_mutable:FromCs.ManualAuthRequest.IMEI)
  return imei_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ManualAuthRequest::release_imei() {
  // @@protoc_insertion_point(field_release:FromCs.ManualAuthRequest.IMEI)
  clear_has_imei();
  return imei_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ManualAuthRequest::set_allocated_imei(::std::string* imei) {
  if (imei != NULL) {
    set_has_imei();
  } else {
    clear_has_imei();
  }
  imei_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imei);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ManualAuthRequest.IMEI)
}

// optional string SoftType = 4;
inline bool ManualAuthRequest::has_softtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ManualAuthRequest::set_has_softtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ManualAuthRequest::clear_has_softtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ManualAuthRequest::clear_softtype() {
  softtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_softtype();
}
inline const ::std::string& ManualAuthRequest::softtype() const {
  // @@protoc_insertion_point(field_get:FromCs.ManualAuthRequest.SoftType)
  return softtype_.GetNoArena();
}
inline void ManualAuthRequest::set_softtype(const ::std::string& value) {
  set_has_softtype();
  softtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ManualAuthRequest.SoftType)
}
#if LANG_CXX11
inline void ManualAuthRequest::set_softtype(::std::string&& value) {
  set_has_softtype();
  softtype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ManualAuthRequest.SoftType)
}
#endif
inline void ManualAuthRequest::set_softtype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_softtype();
  softtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ManualAuthRequest.SoftType)
}
inline void ManualAuthRequest::set_softtype(const char* value, size_t size) {
  set_has_softtype();
  softtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ManualAuthRequest.SoftType)
}
inline ::std::string* ManualAuthRequest::mutable_softtype() {
  set_has_softtype();
  // @@protoc_insertion_point(field_mutable:FromCs.ManualAuthRequest.SoftType)
  return softtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ManualAuthRequest::release_softtype() {
  // @@protoc_insertion_point(field_release:FromCs.ManualAuthRequest.SoftType)
  clear_has_softtype();
  return softtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ManualAuthRequest::set_allocated_softtype(::std::string* softtype) {
  if (softtype != NULL) {
    set_has_softtype();
  } else {
    clear_has_softtype();
  }
  softtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), softtype);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ManualAuthRequest.SoftType)
}

// optional int32 builtinIpseq = 5;
inline bool ManualAuthRequest::has_builtinipseq() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ManualAuthRequest::set_has_builtinipseq() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ManualAuthRequest::clear_has_builtinipseq() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ManualAuthRequest::clear_builtinipseq() {
  builtinipseq_ = 0;
  clear_has_builtinipseq();
}
inline ::google::protobuf::int32 ManualAuthRequest::builtinipseq() const {
  // @@protoc_insertion_point(field_get:FromCs.ManualAuthRequest.builtinIpseq)
  return builtinipseq_;
}
inline void ManualAuthRequest::set_builtinipseq(::google::protobuf::int32 value) {
  set_has_builtinipseq();
  builtinipseq_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ManualAuthRequest.builtinIpseq)
}

// optional string ClientSeqId = 6;
inline bool ManualAuthRequest::has_clientseqid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ManualAuthRequest::set_has_clientseqid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ManualAuthRequest::clear_has_clientseqid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ManualAuthRequest::clear_clientseqid() {
  clientseqid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientseqid();
}
inline const ::std::string& ManualAuthRequest::clientseqid() const {
  // @@protoc_insertion_point(field_get:FromCs.ManualAuthRequest.ClientSeqId)
  return clientseqid_.GetNoArena();
}
inline void ManualAuthRequest::set_clientseqid(const ::std::string& value) {
  set_has_clientseqid();
  clientseqid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ManualAuthRequest.ClientSeqId)
}
#if LANG_CXX11
inline void ManualAuthRequest::set_clientseqid(::std::string&& value) {
  set_has_clientseqid();
  clientseqid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ManualAuthRequest.ClientSeqId)
}
#endif
inline void ManualAuthRequest::set_clientseqid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientseqid();
  clientseqid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ManualAuthRequest.ClientSeqId)
}
inline void ManualAuthRequest::set_clientseqid(const char* value, size_t size) {
  set_has_clientseqid();
  clientseqid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ManualAuthRequest.ClientSeqId)
}
inline ::std::string* ManualAuthRequest::mutable_clientseqid() {
  set_has_clientseqid();
  // @@protoc_insertion_point(field_mutable:FromCs.ManualAuthRequest.ClientSeqId)
  return clientseqid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ManualAuthRequest::release_clientseqid() {
  // @@protoc_insertion_point(field_release:FromCs.ManualAuthRequest.ClientSeqId)
  clear_has_clientseqid();
  return clientseqid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ManualAuthRequest::set_allocated_clientseqid(::std::string* clientseqid) {
  if (clientseqid != NULL) {
    set_has_clientseqid();
  } else {
    clear_has_clientseqid();
  }
  clientseqid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientseqid);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ManualAuthRequest.ClientSeqId)
}

// optional string Signature = 7;
inline bool ManualAuthRequest::has_signature() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ManualAuthRequest::set_has_signature() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ManualAuthRequest::clear_has_signature() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ManualAuthRequest::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_signature();
}
inline const ::std::string& ManualAuthRequest::signature() const {
  // @@protoc_insertion_point(field_get:FromCs.ManualAuthRequest.Signature)
  return signature_.GetNoArena();
}
inline void ManualAuthRequest::set_signature(const ::std::string& value) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ManualAuthRequest.Signature)
}
#if LANG_CXX11
inline void ManualAuthRequest::set_signature(::std::string&& value) {
  set_has_signature();
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ManualAuthRequest.Signature)
}
#endif
inline void ManualAuthRequest::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ManualAuthRequest.Signature)
}
inline void ManualAuthRequest::set_signature(const char* value, size_t size) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ManualAuthRequest.Signature)
}
inline ::std::string* ManualAuthRequest::mutable_signature() {
  set_has_signature();
  // @@protoc_insertion_point(field_mutable:FromCs.ManualAuthRequest.Signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ManualAuthRequest::release_signature() {
  // @@protoc_insertion_point(field_release:FromCs.ManualAuthRequest.Signature)
  clear_has_signature();
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ManualAuthRequest::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ManualAuthRequest.Signature)
}

// optional string DeviceName = 8;
inline bool ManualAuthRequest::has_devicename() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ManualAuthRequest::set_has_devicename() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ManualAuthRequest::clear_has_devicename() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ManualAuthRequest::clear_devicename() {
  devicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_devicename();
}
inline const ::std::string& ManualAuthRequest::devicename() const {
  // @@protoc_insertion_point(field_get:FromCs.ManualAuthRequest.DeviceName)
  return devicename_.GetNoArena();
}
inline void ManualAuthRequest::set_devicename(const ::std::string& value) {
  set_has_devicename();
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ManualAuthRequest.DeviceName)
}
#if LANG_CXX11
inline void ManualAuthRequest::set_devicename(::std::string&& value) {
  set_has_devicename();
  devicename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ManualAuthRequest.DeviceName)
}
#endif
inline void ManualAuthRequest::set_devicename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_devicename();
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ManualAuthRequest.DeviceName)
}
inline void ManualAuthRequest::set_devicename(const char* value, size_t size) {
  set_has_devicename();
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ManualAuthRequest.DeviceName)
}
inline ::std::string* ManualAuthRequest::mutable_devicename() {
  set_has_devicename();
  // @@protoc_insertion_point(field_mutable:FromCs.ManualAuthRequest.DeviceName)
  return devicename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ManualAuthRequest::release_devicename() {
  // @@protoc_insertion_point(field_release:FromCs.ManualAuthRequest.DeviceName)
  clear_has_devicename();
  return devicename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ManualAuthRequest::set_allocated_devicename(::std::string* devicename) {
  if (devicename != NULL) {
    set_has_devicename();
  } else {
    clear_has_devicename();
  }
  devicename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicename);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ManualAuthRequest.DeviceName)
}

// optional string DeviceType = 9;
inline bool ManualAuthRequest::has_devicetype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ManualAuthRequest::set_has_devicetype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ManualAuthRequest::clear_has_devicetype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ManualAuthRequest::clear_devicetype() {
  devicetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_devicetype();
}
inline const ::std::string& ManualAuthRequest::devicetype() const {
  // @@protoc_insertion_point(field_get:FromCs.ManualAuthRequest.DeviceType)
  return devicetype_.GetNoArena();
}
inline void ManualAuthRequest::set_devicetype(const ::std::string& value) {
  set_has_devicetype();
  devicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ManualAuthRequest.DeviceType)
}
#if LANG_CXX11
inline void ManualAuthRequest::set_devicetype(::std::string&& value) {
  set_has_devicetype();
  devicetype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ManualAuthRequest.DeviceType)
}
#endif
inline void ManualAuthRequest::set_devicetype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_devicetype();
  devicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ManualAuthRequest.DeviceType)
}
inline void ManualAuthRequest::set_devicetype(const char* value, size_t size) {
  set_has_devicetype();
  devicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ManualAuthRequest.DeviceType)
}
inline ::std::string* ManualAuthRequest::mutable_devicetype() {
  set_has_devicetype();
  // @@protoc_insertion_point(field_mutable:FromCs.ManualAuthRequest.DeviceType)
  return devicetype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ManualAuthRequest::release_devicetype() {
  // @@protoc_insertion_point(field_release:FromCs.ManualAuthRequest.DeviceType)
  clear_has_devicetype();
  return devicetype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ManualAuthRequest::set_allocated_devicetype(::std::string* devicetype) {
  if (devicetype != NULL) {
    set_has_devicetype();
  } else {
    clear_has_devicetype();
  }
  devicetype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicetype);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ManualAuthRequest.DeviceType)
}

// optional string Language = 10;
inline bool ManualAuthRequest::has_language() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ManualAuthRequest::set_has_language() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ManualAuthRequest::clear_has_language() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ManualAuthRequest::clear_language() {
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_language();
}
inline const ::std::string& ManualAuthRequest::language() const {
  // @@protoc_insertion_point(field_get:FromCs.ManualAuthRequest.Language)
  return language_.GetNoArena();
}
inline void ManualAuthRequest::set_language(const ::std::string& value) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ManualAuthRequest.Language)
}
#if LANG_CXX11
inline void ManualAuthRequest::set_language(::std::string&& value) {
  set_has_language();
  language_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ManualAuthRequest.Language)
}
#endif
inline void ManualAuthRequest::set_language(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ManualAuthRequest.Language)
}
inline void ManualAuthRequest::set_language(const char* value, size_t size) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ManualAuthRequest.Language)
}
inline ::std::string* ManualAuthRequest::mutable_language() {
  set_has_language();
  // @@protoc_insertion_point(field_mutable:FromCs.ManualAuthRequest.Language)
  return language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ManualAuthRequest::release_language() {
  // @@protoc_insertion_point(field_release:FromCs.ManualAuthRequest.Language)
  clear_has_language();
  return language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ManualAuthRequest::set_allocated_language(::std::string* language) {
  if (language != NULL) {
    set_has_language();
  } else {
    clear_has_language();
  }
  language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ManualAuthRequest.Language)
}

// optional string TimeZone = 11;
inline bool ManualAuthRequest::has_timezone() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ManualAuthRequest::set_has_timezone() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ManualAuthRequest::clear_has_timezone() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ManualAuthRequest::clear_timezone() {
  timezone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_timezone();
}
inline const ::std::string& ManualAuthRequest::timezone() const {
  // @@protoc_insertion_point(field_get:FromCs.ManualAuthRequest.TimeZone)
  return timezone_.GetNoArena();
}
inline void ManualAuthRequest::set_timezone(const ::std::string& value) {
  set_has_timezone();
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ManualAuthRequest.TimeZone)
}
#if LANG_CXX11
inline void ManualAuthRequest::set_timezone(::std::string&& value) {
  set_has_timezone();
  timezone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ManualAuthRequest.TimeZone)
}
#endif
inline void ManualAuthRequest::set_timezone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_timezone();
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ManualAuthRequest.TimeZone)
}
inline void ManualAuthRequest::set_timezone(const char* value, size_t size) {
  set_has_timezone();
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ManualAuthRequest.TimeZone)
}
inline ::std::string* ManualAuthRequest::mutable_timezone() {
  set_has_timezone();
  // @@protoc_insertion_point(field_mutable:FromCs.ManualAuthRequest.TimeZone)
  return timezone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ManualAuthRequest::release_timezone() {
  // @@protoc_insertion_point(field_release:FromCs.ManualAuthRequest.TimeZone)
  clear_has_timezone();
  return timezone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ManualAuthRequest::set_allocated_timezone(::std::string* timezone) {
  if (timezone != NULL) {
    set_has_timezone();
  } else {
    clear_has_timezone();
  }
  timezone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timezone);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ManualAuthRequest.TimeZone)
}

// optional int32 Channel = 13;
inline bool ManualAuthRequest::has_channel() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ManualAuthRequest::set_has_channel() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ManualAuthRequest::clear_has_channel() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ManualAuthRequest::clear_channel() {
  channel_ = 0;
  clear_has_channel();
}
inline ::google::protobuf::int32 ManualAuthRequest::channel() const {
  // @@protoc_insertion_point(field_get:FromCs.ManualAuthRequest.Channel)
  return channel_;
}
inline void ManualAuthRequest::set_channel(::google::protobuf::int32 value) {
  set_has_channel();
  channel_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ManualAuthRequest.Channel)
}

// required int32 TimeStamp = 14;
inline bool ManualAuthRequest::has_timestamp() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ManualAuthRequest::set_has_timestamp() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ManualAuthRequest::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ManualAuthRequest::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline ::google::protobuf::int32 ManualAuthRequest::timestamp() const {
  // @@protoc_insertion_point(field_get:FromCs.ManualAuthRequest.TimeStamp)
  return timestamp_;
}
inline void ManualAuthRequest::set_timestamp(::google::protobuf::int32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ManualAuthRequest.TimeStamp)
}

// optional string DeviceBrand = 15;
inline bool ManualAuthRequest::has_devicebrand() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ManualAuthRequest::set_has_devicebrand() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ManualAuthRequest::clear_has_devicebrand() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ManualAuthRequest::clear_devicebrand() {
  devicebrand_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_devicebrand();
}
inline const ::std::string& ManualAuthRequest::devicebrand() const {
  // @@protoc_insertion_point(field_get:FromCs.ManualAuthRequest.DeviceBrand)
  return devicebrand_.GetNoArena();
}
inline void ManualAuthRequest::set_devicebrand(const ::std::string& value) {
  set_has_devicebrand();
  devicebrand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ManualAuthRequest.DeviceBrand)
}
#if LANG_CXX11
inline void ManualAuthRequest::set_devicebrand(::std::string&& value) {
  set_has_devicebrand();
  devicebrand_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ManualAuthRequest.DeviceBrand)
}
#endif
inline void ManualAuthRequest::set_devicebrand(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_devicebrand();
  devicebrand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ManualAuthRequest.DeviceBrand)
}
inline void ManualAuthRequest::set_devicebrand(const char* value, size_t size) {
  set_has_devicebrand();
  devicebrand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ManualAuthRequest.DeviceBrand)
}
inline ::std::string* ManualAuthRequest::mutable_devicebrand() {
  set_has_devicebrand();
  // @@protoc_insertion_point(field_mutable:FromCs.ManualAuthRequest.DeviceBrand)
  return devicebrand_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ManualAuthRequest::release_devicebrand() {
  // @@protoc_insertion_point(field_release:FromCs.ManualAuthRequest.DeviceBrand)
  clear_has_devicebrand();
  return devicebrand_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ManualAuthRequest::set_allocated_devicebrand(::std::string* devicebrand) {
  if (devicebrand != NULL) {
    set_has_devicebrand();
  } else {
    clear_has_devicebrand();
  }
  devicebrand_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicebrand);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ManualAuthRequest.DeviceBrand)
}

// optional string DeviceModel = 16;
inline bool ManualAuthRequest::has_devicemodel() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ManualAuthRequest::set_has_devicemodel() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ManualAuthRequest::clear_has_devicemodel() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ManualAuthRequest::clear_devicemodel() {
  devicemodel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_devicemodel();
}
inline const ::std::string& ManualAuthRequest::devicemodel() const {
  // @@protoc_insertion_point(field_get:FromCs.ManualAuthRequest.DeviceModel)
  return devicemodel_.GetNoArena();
}
inline void ManualAuthRequest::set_devicemodel(const ::std::string& value) {
  set_has_devicemodel();
  devicemodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ManualAuthRequest.DeviceModel)
}
#if LANG_CXX11
inline void ManualAuthRequest::set_devicemodel(::std::string&& value) {
  set_has_devicemodel();
  devicemodel_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ManualAuthRequest.DeviceModel)
}
#endif
inline void ManualAuthRequest::set_devicemodel(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_devicemodel();
  devicemodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ManualAuthRequest.DeviceModel)
}
inline void ManualAuthRequest::set_devicemodel(const char* value, size_t size) {
  set_has_devicemodel();
  devicemodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ManualAuthRequest.DeviceModel)
}
inline ::std::string* ManualAuthRequest::mutable_devicemodel() {
  set_has_devicemodel();
  // @@protoc_insertion_point(field_mutable:FromCs.ManualAuthRequest.DeviceModel)
  return devicemodel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ManualAuthRequest::release_devicemodel() {
  // @@protoc_insertion_point(field_release:FromCs.ManualAuthRequest.DeviceModel)
  clear_has_devicemodel();
  return devicemodel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ManualAuthRequest::set_allocated_devicemodel(::std::string* devicemodel) {
  if (devicemodel != NULL) {
    set_has_devicemodel();
  } else {
    clear_has_devicemodel();
  }
  devicemodel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicemodel);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ManualAuthRequest.DeviceModel)
}

// optional string OSType = 17;
inline bool ManualAuthRequest::has_ostype() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ManualAuthRequest::set_has_ostype() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ManualAuthRequest::clear_has_ostype() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ManualAuthRequest::clear_ostype() {
  ostype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ostype();
}
inline const ::std::string& ManualAuthRequest::ostype() const {
  // @@protoc_insertion_point(field_get:FromCs.ManualAuthRequest.OSType)
  return ostype_.GetNoArena();
}
inline void ManualAuthRequest::set_ostype(const ::std::string& value) {
  set_has_ostype();
  ostype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ManualAuthRequest.OSType)
}
#if LANG_CXX11
inline void ManualAuthRequest::set_ostype(::std::string&& value) {
  set_has_ostype();
  ostype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ManualAuthRequest.OSType)
}
#endif
inline void ManualAuthRequest::set_ostype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ostype();
  ostype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ManualAuthRequest.OSType)
}
inline void ManualAuthRequest::set_ostype(const char* value, size_t size) {
  set_has_ostype();
  ostype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ManualAuthRequest.OSType)
}
inline ::std::string* ManualAuthRequest::mutable_ostype() {
  set_has_ostype();
  // @@protoc_insertion_point(field_mutable:FromCs.ManualAuthRequest.OSType)
  return ostype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ManualAuthRequest::release_ostype() {
  // @@protoc_insertion_point(field_release:FromCs.ManualAuthRequest.OSType)
  clear_has_ostype();
  return ostype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ManualAuthRequest::set_allocated_ostype(::std::string* ostype) {
  if (ostype != NULL) {
    set_has_ostype();
  } else {
    clear_has_ostype();
  }
  ostype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ostype);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ManualAuthRequest.OSType)
}

// optional string CountryCode = 18;
inline bool ManualAuthRequest::has_countrycode() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ManualAuthRequest::set_has_countrycode() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ManualAuthRequest::clear_has_countrycode() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ManualAuthRequest::clear_countrycode() {
  countrycode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_countrycode();
}
inline const ::std::string& ManualAuthRequest::countrycode() const {
  // @@protoc_insertion_point(field_get:FromCs.ManualAuthRequest.CountryCode)
  return countrycode_.GetNoArena();
}
inline void ManualAuthRequest::set_countrycode(const ::std::string& value) {
  set_has_countrycode();
  countrycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ManualAuthRequest.CountryCode)
}
#if LANG_CXX11
inline void ManualAuthRequest::set_countrycode(::std::string&& value) {
  set_has_countrycode();
  countrycode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ManualAuthRequest.CountryCode)
}
#endif
inline void ManualAuthRequest::set_countrycode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_countrycode();
  countrycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ManualAuthRequest.CountryCode)
}
inline void ManualAuthRequest::set_countrycode(const char* value, size_t size) {
  set_has_countrycode();
  countrycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ManualAuthRequest.CountryCode)
}
inline ::std::string* ManualAuthRequest::mutable_countrycode() {
  set_has_countrycode();
  // @@protoc_insertion_point(field_mutable:FromCs.ManualAuthRequest.CountryCode)
  return countrycode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ManualAuthRequest::release_countrycode() {
  // @@protoc_insertion_point(field_release:FromCs.ManualAuthRequest.CountryCode)
  clear_has_countrycode();
  return countrycode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ManualAuthRequest::set_allocated_countrycode(::std::string* countrycode) {
  if (countrycode != NULL) {
    set_has_countrycode();
  } else {
    clear_has_countrycode();
  }
  countrycode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), countrycode);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ManualAuthRequest.CountryCode)
}

// optional string BundleId = 19;
inline bool ManualAuthRequest::has_bundleid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ManualAuthRequest::set_has_bundleid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ManualAuthRequest::clear_has_bundleid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ManualAuthRequest::clear_bundleid() {
  bundleid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bundleid();
}
inline const ::std::string& ManualAuthRequest::bundleid() const {
  // @@protoc_insertion_point(field_get:FromCs.ManualAuthRequest.BundleId)
  return bundleid_.GetNoArena();
}
inline void ManualAuthRequest::set_bundleid(const ::std::string& value) {
  set_has_bundleid();
  bundleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ManualAuthRequest.BundleId)
}
#if LANG_CXX11
inline void ManualAuthRequest::set_bundleid(::std::string&& value) {
  set_has_bundleid();
  bundleid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ManualAuthRequest.BundleId)
}
#endif
inline void ManualAuthRequest::set_bundleid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bundleid();
  bundleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ManualAuthRequest.BundleId)
}
inline void ManualAuthRequest::set_bundleid(const char* value, size_t size) {
  set_has_bundleid();
  bundleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ManualAuthRequest.BundleId)
}
inline ::std::string* ManualAuthRequest::mutable_bundleid() {
  set_has_bundleid();
  // @@protoc_insertion_point(field_mutable:FromCs.ManualAuthRequest.BundleId)
  return bundleid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ManualAuthRequest::release_bundleid() {
  // @@protoc_insertion_point(field_release:FromCs.ManualAuthRequest.BundleId)
  clear_has_bundleid();
  return bundleid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ManualAuthRequest::set_allocated_bundleid(::std::string* bundleid) {
  if (bundleid != NULL) {
    set_has_bundleid();
  } else {
    clear_has_bundleid();
  }
  bundleid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bundleid);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ManualAuthRequest.BundleId)
}

// optional string ADSource = 20;
inline bool ManualAuthRequest::has_adsource() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ManualAuthRequest::set_has_adsource() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ManualAuthRequest::clear_has_adsource() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ManualAuthRequest::clear_adsource() {
  adsource_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_adsource();
}
inline const ::std::string& ManualAuthRequest::adsource() const {
  // @@protoc_insertion_point(field_get:FromCs.ManualAuthRequest.ADSource)
  return adsource_.GetNoArena();
}
inline void ManualAuthRequest::set_adsource(const ::std::string& value) {
  set_has_adsource();
  adsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ManualAuthRequest.ADSource)
}
#if LANG_CXX11
inline void ManualAuthRequest::set_adsource(::std::string&& value) {
  set_has_adsource();
  adsource_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ManualAuthRequest.ADSource)
}
#endif
inline void ManualAuthRequest::set_adsource(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_adsource();
  adsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ManualAuthRequest.ADSource)
}
inline void ManualAuthRequest::set_adsource(const char* value, size_t size) {
  set_has_adsource();
  adsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ManualAuthRequest.ADSource)
}
inline ::std::string* ManualAuthRequest::mutable_adsource() {
  set_has_adsource();
  // @@protoc_insertion_point(field_mutable:FromCs.ManualAuthRequest.ADSource)
  return adsource_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ManualAuthRequest::release_adsource() {
  // @@protoc_insertion_point(field_release:FromCs.ManualAuthRequest.ADSource)
  clear_has_adsource();
  return adsource_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ManualAuthRequest::set_allocated_adsource(::std::string* adsource) {
  if (adsource != NULL) {
    set_has_adsource();
  } else {
    clear_has_adsource();
  }
  adsource_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), adsource);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ManualAuthRequest.ADSource)
}

// optional string IphoneVer = 21;
inline bool ManualAuthRequest::has_iphonever() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ManualAuthRequest::set_has_iphonever() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ManualAuthRequest::clear_has_iphonever() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ManualAuthRequest::clear_iphonever() {
  iphonever_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_iphonever();
}
inline const ::std::string& ManualAuthRequest::iphonever() const {
  // @@protoc_insertion_point(field_get:FromCs.ManualAuthRequest.IphoneVer)
  return iphonever_.GetNoArena();
}
inline void ManualAuthRequest::set_iphonever(const ::std::string& value) {
  set_has_iphonever();
  iphonever_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ManualAuthRequest.IphoneVer)
}
#if LANG_CXX11
inline void ManualAuthRequest::set_iphonever(::std::string&& value) {
  set_has_iphonever();
  iphonever_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ManualAuthRequest.IphoneVer)
}
#endif
inline void ManualAuthRequest::set_iphonever(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_iphonever();
  iphonever_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ManualAuthRequest.IphoneVer)
}
inline void ManualAuthRequest::set_iphonever(const char* value, size_t size) {
  set_has_iphonever();
  iphonever_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ManualAuthRequest.IphoneVer)
}
inline ::std::string* ManualAuthRequest::mutable_iphonever() {
  set_has_iphonever();
  // @@protoc_insertion_point(field_mutable:FromCs.ManualAuthRequest.IphoneVer)
  return iphonever_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ManualAuthRequest::release_iphonever() {
  // @@protoc_insertion_point(field_release:FromCs.ManualAuthRequest.IphoneVer)
  clear_has_iphonever();
  return iphonever_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ManualAuthRequest::set_allocated_iphonever(::std::string* iphonever) {
  if (iphonever != NULL) {
    set_has_iphonever();
  } else {
    clear_has_iphonever();
  }
  iphonever_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), iphonever);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ManualAuthRequest.IphoneVer)
}

// optional int32 InputType = 22;
inline bool ManualAuthRequest::has_inputtype() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ManualAuthRequest::set_has_inputtype() {
  _has_bits_[0] |= 0x00100000u;
}
inline void ManualAuthRequest::clear_has_inputtype() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void ManualAuthRequest::clear_inputtype() {
  inputtype_ = 0;
  clear_has_inputtype();
}
inline ::google::protobuf::int32 ManualAuthRequest::inputtype() const {
  // @@protoc_insertion_point(field_get:FromCs.ManualAuthRequest.InputType)
  return inputtype_;
}
inline void ManualAuthRequest::set_inputtype(::google::protobuf::int32 value) {
  set_has_inputtype();
  inputtype_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ManualAuthRequest.InputType)
}

// -------------------------------------------------------------------

// AutoAuthRequest

// required .FromCs.BaseRequest base = 1;
inline bool AutoAuthRequest::has_base() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AutoAuthRequest::set_has_base() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AutoAuthRequest::clear_has_base() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AutoAuthRequest::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseRequest::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseRequest& AutoAuthRequest::base() const {
  // @@protoc_insertion_point(field_get:FromCs.AutoAuthRequest.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseRequest::internal_default_instance();
}
inline ::FromCs::BaseRequest* AutoAuthRequest::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.AutoAuthRequest.base)
  return base_;
}
inline ::FromCs::BaseRequest* AutoAuthRequest::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.AutoAuthRequest.base)
  clear_has_base();
  ::FromCs::BaseRequest* temp = base_;
  base_ = NULL;
  return temp;
}
inline void AutoAuthRequest::set_allocated_base(::FromCs::BaseRequest* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.AutoAuthRequest.base)
}

// optional .FromCs.ExtData BaseReqInfo = 2;
inline bool AutoAuthRequest::has_basereqinfo() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void AutoAuthRequest::set_has_basereqinfo() {
  _has_bits_[0] |= 0x00000200u;
}
inline void AutoAuthRequest::clear_has_basereqinfo() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void AutoAuthRequest::clear_basereqinfo() {
  if (basereqinfo_ != NULL) basereqinfo_->::FromCs::ExtData::Clear();
  clear_has_basereqinfo();
}
inline const ::FromCs::ExtData& AutoAuthRequest::basereqinfo() const {
  // @@protoc_insertion_point(field_get:FromCs.AutoAuthRequest.BaseReqInfo)
  return basereqinfo_ != NULL ? *basereqinfo_
                         : *::FromCs::ExtData::internal_default_instance();
}
inline ::FromCs::ExtData* AutoAuthRequest::mutable_basereqinfo() {
  set_has_basereqinfo();
  if (basereqinfo_ == NULL) {
    basereqinfo_ = new ::FromCs::ExtData;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.AutoAuthRequest.BaseReqInfo)
  return basereqinfo_;
}
inline ::FromCs::ExtData* AutoAuthRequest::release_basereqinfo() {
  // @@protoc_insertion_point(field_release:FromCs.AutoAuthRequest.BaseReqInfo)
  clear_has_basereqinfo();
  ::FromCs::ExtData* temp = basereqinfo_;
  basereqinfo_ = NULL;
  return temp;
}
inline void AutoAuthRequest::set_allocated_basereqinfo(::FromCs::ExtData* basereqinfo) {
  delete basereqinfo_;
  basereqinfo_ = basereqinfo;
  if (basereqinfo) {
    set_has_basereqinfo();
  } else {
    clear_has_basereqinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.AutoAuthRequest.BaseReqInfo)
}

// optional .FromCs.sKBuiltinBufferT AutoAuthKey = 3;
inline bool AutoAuthRequest::has_autoauthkey() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void AutoAuthRequest::set_has_autoauthkey() {
  _has_bits_[0] |= 0x00000400u;
}
inline void AutoAuthRequest::clear_has_autoauthkey() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void AutoAuthRequest::clear_autoauthkey() {
  if (autoauthkey_ != NULL) autoauthkey_->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_autoauthkey();
}
inline const ::FromCs::sKBuiltinBufferT& AutoAuthRequest::autoauthkey() const {
  // @@protoc_insertion_point(field_get:FromCs.AutoAuthRequest.AutoAuthKey)
  return autoauthkey_ != NULL ? *autoauthkey_
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* AutoAuthRequest::mutable_autoauthkey() {
  set_has_autoauthkey();
  if (autoauthkey_ == NULL) {
    autoauthkey_ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.AutoAuthRequest.AutoAuthKey)
  return autoauthkey_;
}
inline ::FromCs::sKBuiltinBufferT* AutoAuthRequest::release_autoauthkey() {
  // @@protoc_insertion_point(field_release:FromCs.AutoAuthRequest.AutoAuthKey)
  clear_has_autoauthkey();
  ::FromCs::sKBuiltinBufferT* temp = autoauthkey_;
  autoauthkey_ = NULL;
  return temp;
}
inline void AutoAuthRequest::set_allocated_autoauthkey(::FromCs::sKBuiltinBufferT* autoauthkey) {
  delete autoauthkey_;
  autoauthkey_ = autoauthkey;
  if (autoauthkey) {
    set_has_autoauthkey();
  } else {
    clear_has_autoauthkey();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.AutoAuthRequest.AutoAuthKey)
}

// optional string IMEI = 4;
inline bool AutoAuthRequest::has_imei() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AutoAuthRequest::set_has_imei() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AutoAuthRequest::clear_has_imei() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AutoAuthRequest::clear_imei() {
  imei_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_imei();
}
inline const ::std::string& AutoAuthRequest::imei() const {
  // @@protoc_insertion_point(field_get:FromCs.AutoAuthRequest.IMEI)
  return imei_.GetNoArena();
}
inline void AutoAuthRequest::set_imei(const ::std::string& value) {
  set_has_imei();
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.AutoAuthRequest.IMEI)
}
#if LANG_CXX11
inline void AutoAuthRequest::set_imei(::std::string&& value) {
  set_has_imei();
  imei_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.AutoAuthRequest.IMEI)
}
#endif
inline void AutoAuthRequest::set_imei(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_imei();
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.AutoAuthRequest.IMEI)
}
inline void AutoAuthRequest::set_imei(const char* value, size_t size) {
  set_has_imei();
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.AutoAuthRequest.IMEI)
}
inline ::std::string* AutoAuthRequest::mutable_imei() {
  set_has_imei();
  // @@protoc_insertion_point(field_mutable:FromCs.AutoAuthRequest.IMEI)
  return imei_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AutoAuthRequest::release_imei() {
  // @@protoc_insertion_point(field_release:FromCs.AutoAuthRequest.IMEI)
  clear_has_imei();
  return imei_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AutoAuthRequest::set_allocated_imei(::std::string* imei) {
  if (imei != NULL) {
    set_has_imei();
  } else {
    clear_has_imei();
  }
  imei_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imei);
  // @@protoc_insertion_point(field_set_allocated:FromCs.AutoAuthRequest.IMEI)
}

// optional string SoftType = 5;
inline bool AutoAuthRequest::has_softtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AutoAuthRequest::set_has_softtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AutoAuthRequest::clear_has_softtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AutoAuthRequest::clear_softtype() {
  softtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_softtype();
}
inline const ::std::string& AutoAuthRequest::softtype() const {
  // @@protoc_insertion_point(field_get:FromCs.AutoAuthRequest.SoftType)
  return softtype_.GetNoArena();
}
inline void AutoAuthRequest::set_softtype(const ::std::string& value) {
  set_has_softtype();
  softtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.AutoAuthRequest.SoftType)
}
#if LANG_CXX11
inline void AutoAuthRequest::set_softtype(::std::string&& value) {
  set_has_softtype();
  softtype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.AutoAuthRequest.SoftType)
}
#endif
inline void AutoAuthRequest::set_softtype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_softtype();
  softtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.AutoAuthRequest.SoftType)
}
inline void AutoAuthRequest::set_softtype(const char* value, size_t size) {
  set_has_softtype();
  softtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.AutoAuthRequest.SoftType)
}
inline ::std::string* AutoAuthRequest::mutable_softtype() {
  set_has_softtype();
  // @@protoc_insertion_point(field_mutable:FromCs.AutoAuthRequest.SoftType)
  return softtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AutoAuthRequest::release_softtype() {
  // @@protoc_insertion_point(field_release:FromCs.AutoAuthRequest.SoftType)
  clear_has_softtype();
  return softtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AutoAuthRequest::set_allocated_softtype(::std::string* softtype) {
  if (softtype != NULL) {
    set_has_softtype();
  } else {
    clear_has_softtype();
  }
  softtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), softtype);
  // @@protoc_insertion_point(field_set_allocated:FromCs.AutoAuthRequest.SoftType)
}

// required int32 builtinIpseq = 6;
inline bool AutoAuthRequest::has_builtinipseq() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void AutoAuthRequest::set_has_builtinipseq() {
  _has_bits_[0] |= 0x00000800u;
}
inline void AutoAuthRequest::clear_has_builtinipseq() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void AutoAuthRequest::clear_builtinipseq() {
  builtinipseq_ = 0;
  clear_has_builtinipseq();
}
inline ::google::protobuf::int32 AutoAuthRequest::builtinipseq() const {
  // @@protoc_insertion_point(field_get:FromCs.AutoAuthRequest.builtinIpseq)
  return builtinipseq_;
}
inline void AutoAuthRequest::set_builtinipseq(::google::protobuf::int32 value) {
  set_has_builtinipseq();
  builtinipseq_ = value;
  // @@protoc_insertion_point(field_set:FromCs.AutoAuthRequest.builtinIpseq)
}

// optional string ClientSeqId = 7;
inline bool AutoAuthRequest::has_clientseqid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AutoAuthRequest::set_has_clientseqid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AutoAuthRequest::clear_has_clientseqid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AutoAuthRequest::clear_clientseqid() {
  clientseqid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientseqid();
}
inline const ::std::string& AutoAuthRequest::clientseqid() const {
  // @@protoc_insertion_point(field_get:FromCs.AutoAuthRequest.ClientSeqId)
  return clientseqid_.GetNoArena();
}
inline void AutoAuthRequest::set_clientseqid(const ::std::string& value) {
  set_has_clientseqid();
  clientseqid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.AutoAuthRequest.ClientSeqId)
}
#if LANG_CXX11
inline void AutoAuthRequest::set_clientseqid(::std::string&& value) {
  set_has_clientseqid();
  clientseqid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.AutoAuthRequest.ClientSeqId)
}
#endif
inline void AutoAuthRequest::set_clientseqid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientseqid();
  clientseqid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.AutoAuthRequest.ClientSeqId)
}
inline void AutoAuthRequest::set_clientseqid(const char* value, size_t size) {
  set_has_clientseqid();
  clientseqid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.AutoAuthRequest.ClientSeqId)
}
inline ::std::string* AutoAuthRequest::mutable_clientseqid() {
  set_has_clientseqid();
  // @@protoc_insertion_point(field_mutable:FromCs.AutoAuthRequest.ClientSeqId)
  return clientseqid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AutoAuthRequest::release_clientseqid() {
  // @@protoc_insertion_point(field_release:FromCs.AutoAuthRequest.ClientSeqId)
  clear_has_clientseqid();
  return clientseqid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AutoAuthRequest::set_allocated_clientseqid(::std::string* clientseqid) {
  if (clientseqid != NULL) {
    set_has_clientseqid();
  } else {
    clear_has_clientseqid();
  }
  clientseqid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientseqid);
  // @@protoc_insertion_point(field_set_allocated:FromCs.AutoAuthRequest.ClientSeqId)
}

// optional string Signature = 8;
inline bool AutoAuthRequest::has_signature() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AutoAuthRequest::set_has_signature() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AutoAuthRequest::clear_has_signature() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AutoAuthRequest::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_signature();
}
inline const ::std::string& AutoAuthRequest::signature() const {
  // @@protoc_insertion_point(field_get:FromCs.AutoAuthRequest.Signature)
  return signature_.GetNoArena();
}
inline void AutoAuthRequest::set_signature(const ::std::string& value) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.AutoAuthRequest.Signature)
}
#if LANG_CXX11
inline void AutoAuthRequest::set_signature(::std::string&& value) {
  set_has_signature();
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.AutoAuthRequest.Signature)
}
#endif
inline void AutoAuthRequest::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.AutoAuthRequest.Signature)
}
inline void AutoAuthRequest::set_signature(const char* value, size_t size) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.AutoAuthRequest.Signature)
}
inline ::std::string* AutoAuthRequest::mutable_signature() {
  set_has_signature();
  // @@protoc_insertion_point(field_mutable:FromCs.AutoAuthRequest.Signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AutoAuthRequest::release_signature() {
  // @@protoc_insertion_point(field_release:FromCs.AutoAuthRequest.Signature)
  clear_has_signature();
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AutoAuthRequest::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:FromCs.AutoAuthRequest.Signature)
}

// optional string DeviceName = 9;
inline bool AutoAuthRequest::has_devicename() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AutoAuthRequest::set_has_devicename() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AutoAuthRequest::clear_has_devicename() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AutoAuthRequest::clear_devicename() {
  devicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_devicename();
}
inline const ::std::string& AutoAuthRequest::devicename() const {
  // @@protoc_insertion_point(field_get:FromCs.AutoAuthRequest.DeviceName)
  return devicename_.GetNoArena();
}
inline void AutoAuthRequest::set_devicename(const ::std::string& value) {
  set_has_devicename();
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.AutoAuthRequest.DeviceName)
}
#if LANG_CXX11
inline void AutoAuthRequest::set_devicename(::std::string&& value) {
  set_has_devicename();
  devicename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.AutoAuthRequest.DeviceName)
}
#endif
inline void AutoAuthRequest::set_devicename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_devicename();
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.AutoAuthRequest.DeviceName)
}
inline void AutoAuthRequest::set_devicename(const char* value, size_t size) {
  set_has_devicename();
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.AutoAuthRequest.DeviceName)
}
inline ::std::string* AutoAuthRequest::mutable_devicename() {
  set_has_devicename();
  // @@protoc_insertion_point(field_mutable:FromCs.AutoAuthRequest.DeviceName)
  return devicename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AutoAuthRequest::release_devicename() {
  // @@protoc_insertion_point(field_release:FromCs.AutoAuthRequest.DeviceName)
  clear_has_devicename();
  return devicename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AutoAuthRequest::set_allocated_devicename(::std::string* devicename) {
  if (devicename != NULL) {
    set_has_devicename();
  } else {
    clear_has_devicename();
  }
  devicename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicename);
  // @@protoc_insertion_point(field_set_allocated:FromCs.AutoAuthRequest.DeviceName)
}

// optional string DeviceType = 10;
inline bool AutoAuthRequest::has_devicetype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AutoAuthRequest::set_has_devicetype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AutoAuthRequest::clear_has_devicetype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AutoAuthRequest::clear_devicetype() {
  devicetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_devicetype();
}
inline const ::std::string& AutoAuthRequest::devicetype() const {
  // @@protoc_insertion_point(field_get:FromCs.AutoAuthRequest.DeviceType)
  return devicetype_.GetNoArena();
}
inline void AutoAuthRequest::set_devicetype(const ::std::string& value) {
  set_has_devicetype();
  devicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.AutoAuthRequest.DeviceType)
}
#if LANG_CXX11
inline void AutoAuthRequest::set_devicetype(::std::string&& value) {
  set_has_devicetype();
  devicetype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.AutoAuthRequest.DeviceType)
}
#endif
inline void AutoAuthRequest::set_devicetype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_devicetype();
  devicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.AutoAuthRequest.DeviceType)
}
inline void AutoAuthRequest::set_devicetype(const char* value, size_t size) {
  set_has_devicetype();
  devicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.AutoAuthRequest.DeviceType)
}
inline ::std::string* AutoAuthRequest::mutable_devicetype() {
  set_has_devicetype();
  // @@protoc_insertion_point(field_mutable:FromCs.AutoAuthRequest.DeviceType)
  return devicetype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AutoAuthRequest::release_devicetype() {
  // @@protoc_insertion_point(field_release:FromCs.AutoAuthRequest.DeviceType)
  clear_has_devicetype();
  return devicetype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AutoAuthRequest::set_allocated_devicetype(::std::string* devicetype) {
  if (devicetype != NULL) {
    set_has_devicetype();
  } else {
    clear_has_devicetype();
  }
  devicetype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicetype);
  // @@protoc_insertion_point(field_set_allocated:FromCs.AutoAuthRequest.DeviceType)
}

// optional string Language = 11;
inline bool AutoAuthRequest::has_language() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AutoAuthRequest::set_has_language() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AutoAuthRequest::clear_has_language() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AutoAuthRequest::clear_language() {
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_language();
}
inline const ::std::string& AutoAuthRequest::language() const {
  // @@protoc_insertion_point(field_get:FromCs.AutoAuthRequest.Language)
  return language_.GetNoArena();
}
inline void AutoAuthRequest::set_language(const ::std::string& value) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.AutoAuthRequest.Language)
}
#if LANG_CXX11
inline void AutoAuthRequest::set_language(::std::string&& value) {
  set_has_language();
  language_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.AutoAuthRequest.Language)
}
#endif
inline void AutoAuthRequest::set_language(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.AutoAuthRequest.Language)
}
inline void AutoAuthRequest::set_language(const char* value, size_t size) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.AutoAuthRequest.Language)
}
inline ::std::string* AutoAuthRequest::mutable_language() {
  set_has_language();
  // @@protoc_insertion_point(field_mutable:FromCs.AutoAuthRequest.Language)
  return language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AutoAuthRequest::release_language() {
  // @@protoc_insertion_point(field_release:FromCs.AutoAuthRequest.Language)
  clear_has_language();
  return language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AutoAuthRequest::set_allocated_language(::std::string* language) {
  if (language != NULL) {
    set_has_language();
  } else {
    clear_has_language();
  }
  language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:FromCs.AutoAuthRequest.Language)
}

// optional string TimeZone = 12;
inline bool AutoAuthRequest::has_timezone() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AutoAuthRequest::set_has_timezone() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AutoAuthRequest::clear_has_timezone() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AutoAuthRequest::clear_timezone() {
  timezone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_timezone();
}
inline const ::std::string& AutoAuthRequest::timezone() const {
  // @@protoc_insertion_point(field_get:FromCs.AutoAuthRequest.TimeZone)
  return timezone_.GetNoArena();
}
inline void AutoAuthRequest::set_timezone(const ::std::string& value) {
  set_has_timezone();
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.AutoAuthRequest.TimeZone)
}
#if LANG_CXX11
inline void AutoAuthRequest::set_timezone(::std::string&& value) {
  set_has_timezone();
  timezone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.AutoAuthRequest.TimeZone)
}
#endif
inline void AutoAuthRequest::set_timezone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_timezone();
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.AutoAuthRequest.TimeZone)
}
inline void AutoAuthRequest::set_timezone(const char* value, size_t size) {
  set_has_timezone();
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.AutoAuthRequest.TimeZone)
}
inline ::std::string* AutoAuthRequest::mutable_timezone() {
  set_has_timezone();
  // @@protoc_insertion_point(field_mutable:FromCs.AutoAuthRequest.TimeZone)
  return timezone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AutoAuthRequest::release_timezone() {
  // @@protoc_insertion_point(field_release:FromCs.AutoAuthRequest.TimeZone)
  clear_has_timezone();
  return timezone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AutoAuthRequest::set_allocated_timezone(::std::string* timezone) {
  if (timezone != NULL) {
    set_has_timezone();
  } else {
    clear_has_timezone();
  }
  timezone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timezone);
  // @@protoc_insertion_point(field_set_allocated:FromCs.AutoAuthRequest.TimeZone)
}

// -------------------------------------------------------------------

// GetLoginQRCodeRequest

// required .FromCs.BaseRequest base = 1;
inline bool GetLoginQRCodeRequest::has_base() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetLoginQRCodeRequest::set_has_base() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetLoginQRCodeRequest::clear_has_base() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetLoginQRCodeRequest::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseRequest::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseRequest& GetLoginQRCodeRequest::base() const {
  // @@protoc_insertion_point(field_get:FromCs.GetLoginQRCodeRequest.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseRequest::internal_default_instance();
}
inline ::FromCs::BaseRequest* GetLoginQRCodeRequest::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.GetLoginQRCodeRequest.base)
  return base_;
}
inline ::FromCs::BaseRequest* GetLoginQRCodeRequest::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.GetLoginQRCodeRequest.base)
  clear_has_base();
  ::FromCs::BaseRequest* temp = base_;
  base_ = NULL;
  return temp;
}
inline void GetLoginQRCodeRequest::set_allocated_base(::FromCs::BaseRequest* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.GetLoginQRCodeRequest.base)
}

// required .FromCs.sKBuiltinBufferT randomEncryKey = 2;
inline bool GetLoginQRCodeRequest::has_randomencrykey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetLoginQRCodeRequest::set_has_randomencrykey() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetLoginQRCodeRequest::clear_has_randomencrykey() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetLoginQRCodeRequest::clear_randomencrykey() {
  if (randomencrykey_ != NULL) randomencrykey_->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_randomencrykey();
}
inline const ::FromCs::sKBuiltinBufferT& GetLoginQRCodeRequest::randomencrykey() const {
  // @@protoc_insertion_point(field_get:FromCs.GetLoginQRCodeRequest.randomEncryKey)
  return randomencrykey_ != NULL ? *randomencrykey_
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* GetLoginQRCodeRequest::mutable_randomencrykey() {
  set_has_randomencrykey();
  if (randomencrykey_ == NULL) {
    randomencrykey_ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.GetLoginQRCodeRequest.randomEncryKey)
  return randomencrykey_;
}
inline ::FromCs::sKBuiltinBufferT* GetLoginQRCodeRequest::release_randomencrykey() {
  // @@protoc_insertion_point(field_release:FromCs.GetLoginQRCodeRequest.randomEncryKey)
  clear_has_randomencrykey();
  ::FromCs::sKBuiltinBufferT* temp = randomencrykey_;
  randomencrykey_ = NULL;
  return temp;
}
inline void GetLoginQRCodeRequest::set_allocated_randomencrykey(::FromCs::sKBuiltinBufferT* randomencrykey) {
  delete randomencrykey_;
  randomencrykey_ = randomencrykey;
  if (randomencrykey) {
    set_has_randomencrykey();
  } else {
    clear_has_randomencrykey();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.GetLoginQRCodeRequest.randomEncryKey)
}

// required string uuid = 3;
inline bool GetLoginQRCodeRequest::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetLoginQRCodeRequest::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetLoginQRCodeRequest::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetLoginQRCodeRequest::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uuid();
}
inline const ::std::string& GetLoginQRCodeRequest::uuid() const {
  // @@protoc_insertion_point(field_get:FromCs.GetLoginQRCodeRequest.uuid)
  return uuid_.GetNoArena();
}
inline void GetLoginQRCodeRequest::set_uuid(const ::std::string& value) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.GetLoginQRCodeRequest.uuid)
}
#if LANG_CXX11
inline void GetLoginQRCodeRequest::set_uuid(::std::string&& value) {
  set_has_uuid();
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.GetLoginQRCodeRequest.uuid)
}
#endif
inline void GetLoginQRCodeRequest::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.GetLoginQRCodeRequest.uuid)
}
inline void GetLoginQRCodeRequest::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.GetLoginQRCodeRequest.uuid)
}
inline ::std::string* GetLoginQRCodeRequest::mutable_uuid() {
  set_has_uuid();
  // @@protoc_insertion_point(field_mutable:FromCs.GetLoginQRCodeRequest.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetLoginQRCodeRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:FromCs.GetLoginQRCodeRequest.uuid)
  clear_has_uuid();
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetLoginQRCodeRequest::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    set_has_uuid();
  } else {
    clear_has_uuid();
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:FromCs.GetLoginQRCodeRequest.uuid)
}

// required int32 timestamp = 4;
inline bool GetLoginQRCodeRequest::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetLoginQRCodeRequest::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetLoginQRCodeRequest::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetLoginQRCodeRequest::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline ::google::protobuf::int32 GetLoginQRCodeRequest::timestamp() const {
  // @@protoc_insertion_point(field_get:FromCs.GetLoginQRCodeRequest.timestamp)
  return timestamp_;
}
inline void GetLoginQRCodeRequest::set_timestamp(::google::protobuf::int32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:FromCs.GetLoginQRCodeRequest.timestamp)
}

// required int32 opcode = 5;
inline bool GetLoginQRCodeRequest::has_opcode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GetLoginQRCodeRequest::set_has_opcode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GetLoginQRCodeRequest::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GetLoginQRCodeRequest::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
inline ::google::protobuf::int32 GetLoginQRCodeRequest::opcode() const {
  // @@protoc_insertion_point(field_get:FromCs.GetLoginQRCodeRequest.opcode)
  return opcode_;
}
inline void GetLoginQRCodeRequest::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
  // @@protoc_insertion_point(field_set:FromCs.GetLoginQRCodeRequest.opcode)
}

// -------------------------------------------------------------------

// GetLoginQRCodeResponse

// required .FromCs.BaseResponse Base = 1;
inline bool GetLoginQRCodeResponse::has_base() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetLoginQRCodeResponse::set_has_base() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetLoginQRCodeResponse::clear_has_base() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetLoginQRCodeResponse::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseResponse::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseResponse& GetLoginQRCodeResponse::base() const {
  // @@protoc_insertion_point(field_get:FromCs.GetLoginQRCodeResponse.Base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseResponse::internal_default_instance();
}
inline ::FromCs::BaseResponse* GetLoginQRCodeResponse::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.GetLoginQRCodeResponse.Base)
  return base_;
}
inline ::FromCs::BaseResponse* GetLoginQRCodeResponse::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.GetLoginQRCodeResponse.Base)
  clear_has_base();
  ::FromCs::BaseResponse* temp = base_;
  base_ = NULL;
  return temp;
}
inline void GetLoginQRCodeResponse::set_allocated_base(::FromCs::BaseResponse* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.GetLoginQRCodeResponse.Base)
}

// required .FromCs.sKBuiltinBufferT QRCode = 2;
inline bool GetLoginQRCodeResponse::has_qrcode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetLoginQRCodeResponse::set_has_qrcode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetLoginQRCodeResponse::clear_has_qrcode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetLoginQRCodeResponse::clear_qrcode() {
  if (qrcode_ != NULL) qrcode_->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_qrcode();
}
inline const ::FromCs::sKBuiltinBufferT& GetLoginQRCodeResponse::qrcode() const {
  // @@protoc_insertion_point(field_get:FromCs.GetLoginQRCodeResponse.QRCode)
  return qrcode_ != NULL ? *qrcode_
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* GetLoginQRCodeResponse::mutable_qrcode() {
  set_has_qrcode();
  if (qrcode_ == NULL) {
    qrcode_ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.GetLoginQRCodeResponse.QRCode)
  return qrcode_;
}
inline ::FromCs::sKBuiltinBufferT* GetLoginQRCodeResponse::release_qrcode() {
  // @@protoc_insertion_point(field_release:FromCs.GetLoginQRCodeResponse.QRCode)
  clear_has_qrcode();
  ::FromCs::sKBuiltinBufferT* temp = qrcode_;
  qrcode_ = NULL;
  return temp;
}
inline void GetLoginQRCodeResponse::set_allocated_qrcode(::FromCs::sKBuiltinBufferT* qrcode) {
  delete qrcode_;
  qrcode_ = qrcode;
  if (qrcode) {
    set_has_qrcode();
  } else {
    clear_has_qrcode();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.GetLoginQRCodeResponse.QRCode)
}

// required string UUID = 3;
inline bool GetLoginQRCodeResponse::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetLoginQRCodeResponse::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetLoginQRCodeResponse::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetLoginQRCodeResponse::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uuid();
}
inline const ::std::string& GetLoginQRCodeResponse::uuid() const {
  // @@protoc_insertion_point(field_get:FromCs.GetLoginQRCodeResponse.UUID)
  return uuid_.GetNoArena();
}
inline void GetLoginQRCodeResponse::set_uuid(const ::std::string& value) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.GetLoginQRCodeResponse.UUID)
}
#if LANG_CXX11
inline void GetLoginQRCodeResponse::set_uuid(::std::string&& value) {
  set_has_uuid();
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.GetLoginQRCodeResponse.UUID)
}
#endif
inline void GetLoginQRCodeResponse::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.GetLoginQRCodeResponse.UUID)
}
inline void GetLoginQRCodeResponse::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.GetLoginQRCodeResponse.UUID)
}
inline ::std::string* GetLoginQRCodeResponse::mutable_uuid() {
  set_has_uuid();
  // @@protoc_insertion_point(field_mutable:FromCs.GetLoginQRCodeResponse.UUID)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetLoginQRCodeResponse::release_uuid() {
  // @@protoc_insertion_point(field_release:FromCs.GetLoginQRCodeResponse.UUID)
  clear_has_uuid();
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetLoginQRCodeResponse::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    set_has_uuid();
  } else {
    clear_has_uuid();
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:FromCs.GetLoginQRCodeResponse.UUID)
}

// required int32 CheckTime = 4;
inline bool GetLoginQRCodeResponse::has_checktime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GetLoginQRCodeResponse::set_has_checktime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GetLoginQRCodeResponse::clear_has_checktime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GetLoginQRCodeResponse::clear_checktime() {
  checktime_ = 0;
  clear_has_checktime();
}
inline ::google::protobuf::int32 GetLoginQRCodeResponse::checktime() const {
  // @@protoc_insertion_point(field_get:FromCs.GetLoginQRCodeResponse.CheckTime)
  return checktime_;
}
inline void GetLoginQRCodeResponse::set_checktime(::google::protobuf::int32 value) {
  set_has_checktime();
  checktime_ = value;
  // @@protoc_insertion_point(field_set:FromCs.GetLoginQRCodeResponse.CheckTime)
}

// optional .FromCs.sKBuiltinBufferT NotifyKey = 5;
inline bool GetLoginQRCodeResponse::has_notifykey() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GetLoginQRCodeResponse::set_has_notifykey() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GetLoginQRCodeResponse::clear_has_notifykey() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GetLoginQRCodeResponse::clear_notifykey() {
  if (notifykey_ != NULL) notifykey_->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_notifykey();
}
inline const ::FromCs::sKBuiltinBufferT& GetLoginQRCodeResponse::notifykey() const {
  // @@protoc_insertion_point(field_get:FromCs.GetLoginQRCodeResponse.NotifyKey)
  return notifykey_ != NULL ? *notifykey_
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* GetLoginQRCodeResponse::mutable_notifykey() {
  set_has_notifykey();
  if (notifykey_ == NULL) {
    notifykey_ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.GetLoginQRCodeResponse.NotifyKey)
  return notifykey_;
}
inline ::FromCs::sKBuiltinBufferT* GetLoginQRCodeResponse::release_notifykey() {
  // @@protoc_insertion_point(field_release:FromCs.GetLoginQRCodeResponse.NotifyKey)
  clear_has_notifykey();
  ::FromCs::sKBuiltinBufferT* temp = notifykey_;
  notifykey_ = NULL;
  return temp;
}
inline void GetLoginQRCodeResponse::set_allocated_notifykey(::FromCs::sKBuiltinBufferT* notifykey) {
  delete notifykey_;
  notifykey_ = notifykey;
  if (notifykey) {
    set_has_notifykey();
  } else {
    clear_has_notifykey();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.GetLoginQRCodeResponse.NotifyKey)
}

// optional int32 ExpiredTime = 6;
inline bool GetLoginQRCodeResponse::has_expiredtime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GetLoginQRCodeResponse::set_has_expiredtime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GetLoginQRCodeResponse::clear_has_expiredtime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GetLoginQRCodeResponse::clear_expiredtime() {
  expiredtime_ = 0;
  clear_has_expiredtime();
}
inline ::google::protobuf::int32 GetLoginQRCodeResponse::expiredtime() const {
  // @@protoc_insertion_point(field_get:FromCs.GetLoginQRCodeResponse.ExpiredTime)
  return expiredtime_;
}
inline void GetLoginQRCodeResponse::set_expiredtime(::google::protobuf::int32 value) {
  set_has_expiredtime();
  expiredtime_ = value;
  // @@protoc_insertion_point(field_set:FromCs.GetLoginQRCodeResponse.ExpiredTime)
}

// optional string BlueToothBroadCastUuid = 7;
inline bool GetLoginQRCodeResponse::has_bluetoothbroadcastuuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetLoginQRCodeResponse::set_has_bluetoothbroadcastuuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetLoginQRCodeResponse::clear_has_bluetoothbroadcastuuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetLoginQRCodeResponse::clear_bluetoothbroadcastuuid() {
  bluetoothbroadcastuuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bluetoothbroadcastuuid();
}
inline const ::std::string& GetLoginQRCodeResponse::bluetoothbroadcastuuid() const {
  // @@protoc_insertion_point(field_get:FromCs.GetLoginQRCodeResponse.BlueToothBroadCastUuid)
  return bluetoothbroadcastuuid_.GetNoArena();
}
inline void GetLoginQRCodeResponse::set_bluetoothbroadcastuuid(const ::std::string& value) {
  set_has_bluetoothbroadcastuuid();
  bluetoothbroadcastuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.GetLoginQRCodeResponse.BlueToothBroadCastUuid)
}
#if LANG_CXX11
inline void GetLoginQRCodeResponse::set_bluetoothbroadcastuuid(::std::string&& value) {
  set_has_bluetoothbroadcastuuid();
  bluetoothbroadcastuuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.GetLoginQRCodeResponse.BlueToothBroadCastUuid)
}
#endif
inline void GetLoginQRCodeResponse::set_bluetoothbroadcastuuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bluetoothbroadcastuuid();
  bluetoothbroadcastuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.GetLoginQRCodeResponse.BlueToothBroadCastUuid)
}
inline void GetLoginQRCodeResponse::set_bluetoothbroadcastuuid(const char* value, size_t size) {
  set_has_bluetoothbroadcastuuid();
  bluetoothbroadcastuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.GetLoginQRCodeResponse.BlueToothBroadCastUuid)
}
inline ::std::string* GetLoginQRCodeResponse::mutable_bluetoothbroadcastuuid() {
  set_has_bluetoothbroadcastuuid();
  // @@protoc_insertion_point(field_mutable:FromCs.GetLoginQRCodeResponse.BlueToothBroadCastUuid)
  return bluetoothbroadcastuuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetLoginQRCodeResponse::release_bluetoothbroadcastuuid() {
  // @@protoc_insertion_point(field_release:FromCs.GetLoginQRCodeResponse.BlueToothBroadCastUuid)
  clear_has_bluetoothbroadcastuuid();
  return bluetoothbroadcastuuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetLoginQRCodeResponse::set_allocated_bluetoothbroadcastuuid(::std::string* bluetoothbroadcastuuid) {
  if (bluetoothbroadcastuuid != NULL) {
    set_has_bluetoothbroadcastuuid();
  } else {
    clear_has_bluetoothbroadcastuuid();
  }
  bluetoothbroadcastuuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bluetoothbroadcastuuid);
  // @@protoc_insertion_point(field_set_allocated:FromCs.GetLoginQRCodeResponse.BlueToothBroadCastUuid)
}

// optional .FromCs.sKBuiltinBufferT BlueToothBroadCastContent = 8;
inline bool GetLoginQRCodeResponse::has_bluetoothbroadcastcontent() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GetLoginQRCodeResponse::set_has_bluetoothbroadcastcontent() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GetLoginQRCodeResponse::clear_has_bluetoothbroadcastcontent() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GetLoginQRCodeResponse::clear_bluetoothbroadcastcontent() {
  if (bluetoothbroadcastcontent_ != NULL) bluetoothbroadcastcontent_->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_bluetoothbroadcastcontent();
}
inline const ::FromCs::sKBuiltinBufferT& GetLoginQRCodeResponse::bluetoothbroadcastcontent() const {
  // @@protoc_insertion_point(field_get:FromCs.GetLoginQRCodeResponse.BlueToothBroadCastContent)
  return bluetoothbroadcastcontent_ != NULL ? *bluetoothbroadcastcontent_
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* GetLoginQRCodeResponse::mutable_bluetoothbroadcastcontent() {
  set_has_bluetoothbroadcastcontent();
  if (bluetoothbroadcastcontent_ == NULL) {
    bluetoothbroadcastcontent_ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.GetLoginQRCodeResponse.BlueToothBroadCastContent)
  return bluetoothbroadcastcontent_;
}
inline ::FromCs::sKBuiltinBufferT* GetLoginQRCodeResponse::release_bluetoothbroadcastcontent() {
  // @@protoc_insertion_point(field_release:FromCs.GetLoginQRCodeResponse.BlueToothBroadCastContent)
  clear_has_bluetoothbroadcastcontent();
  ::FromCs::sKBuiltinBufferT* temp = bluetoothbroadcastcontent_;
  bluetoothbroadcastcontent_ = NULL;
  return temp;
}
inline void GetLoginQRCodeResponse::set_allocated_bluetoothbroadcastcontent(::FromCs::sKBuiltinBufferT* bluetoothbroadcastcontent) {
  delete bluetoothbroadcastcontent_;
  bluetoothbroadcastcontent_ = bluetoothbroadcastcontent;
  if (bluetoothbroadcastcontent) {
    set_has_bluetoothbroadcastcontent();
  } else {
    clear_has_bluetoothbroadcastcontent();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.GetLoginQRCodeResponse.BlueToothBroadCastContent)
}

// -------------------------------------------------------------------

// NewAuthResponse

// required .FromCs.BaseResponse base = 1;
inline bool NewAuthResponse::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NewAuthResponse::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NewAuthResponse::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NewAuthResponse::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseResponse::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseResponse& NewAuthResponse::base() const {
  // @@protoc_insertion_point(field_get:FromCs.NewAuthResponse.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseResponse::internal_default_instance();
}
inline ::FromCs::BaseResponse* NewAuthResponse::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.NewAuthResponse.base)
  return base_;
}
inline ::FromCs::BaseResponse* NewAuthResponse::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.NewAuthResponse.base)
  clear_has_base();
  ::FromCs::BaseResponse* temp = base_;
  base_ = NULL;
  return temp;
}
inline void NewAuthResponse::set_allocated_base(::FromCs::BaseResponse* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewAuthResponse.base)
}

// optional int32 int2 = 2;
inline bool NewAuthResponse::has_int2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NewAuthResponse::set_has_int2() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NewAuthResponse::clear_has_int2() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NewAuthResponse::clear_int2() {
  int2_ = 0;
  clear_has_int2();
}
inline ::google::protobuf::int32 NewAuthResponse::int2() const {
  // @@protoc_insertion_point(field_get:FromCs.NewAuthResponse.int2)
  return int2_;
}
inline void NewAuthResponse::set_int2(::google::protobuf::int32 value) {
  set_has_int2();
  int2_ = value;
  // @@protoc_insertion_point(field_set:FromCs.NewAuthResponse.int2)
}

// optional .FromCs.AuthData Auth = 3;
inline bool NewAuthResponse::has_auth() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NewAuthResponse::set_has_auth() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NewAuthResponse::clear_has_auth() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NewAuthResponse::clear_auth() {
  if (auth_ != NULL) auth_->::FromCs::AuthData::Clear();
  clear_has_auth();
}
inline const ::FromCs::AuthData& NewAuthResponse::auth() const {
  // @@protoc_insertion_point(field_get:FromCs.NewAuthResponse.Auth)
  return auth_ != NULL ? *auth_
                         : *::FromCs::AuthData::internal_default_instance();
}
inline ::FromCs::AuthData* NewAuthResponse::mutable_auth() {
  set_has_auth();
  if (auth_ == NULL) {
    auth_ = new ::FromCs::AuthData;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.NewAuthResponse.Auth)
  return auth_;
}
inline ::FromCs::AuthData* NewAuthResponse::release_auth() {
  // @@protoc_insertion_point(field_release:FromCs.NewAuthResponse.Auth)
  clear_has_auth();
  ::FromCs::AuthData* temp = auth_;
  auth_ = NULL;
  return temp;
}
inline void NewAuthResponse::set_allocated_auth(::FromCs::AuthData* auth) {
  delete auth_;
  auth_ = auth;
  if (auth) {
    set_has_auth();
  } else {
    clear_has_auth();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewAuthResponse.Auth)
}

// optional .FromCs.AccountInfo User = 4;
inline bool NewAuthResponse::has_user() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NewAuthResponse::set_has_user() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NewAuthResponse::clear_has_user() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NewAuthResponse::clear_user() {
  if (user_ != NULL) user_->::FromCs::AccountInfo::Clear();
  clear_has_user();
}
inline const ::FromCs::AccountInfo& NewAuthResponse::user() const {
  // @@protoc_insertion_point(field_get:FromCs.NewAuthResponse.User)
  return user_ != NULL ? *user_
                         : *::FromCs::AccountInfo::internal_default_instance();
}
inline ::FromCs::AccountInfo* NewAuthResponse::mutable_user() {
  set_has_user();
  if (user_ == NULL) {
    user_ = new ::FromCs::AccountInfo;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.NewAuthResponse.User)
  return user_;
}
inline ::FromCs::AccountInfo* NewAuthResponse::release_user() {
  // @@protoc_insertion_point(field_release:FromCs.NewAuthResponse.User)
  clear_has_user();
  ::FromCs::AccountInfo* temp = user_;
  user_ = NULL;
  return temp;
}
inline void NewAuthResponse::set_allocated_user(::FromCs::AccountInfo* user) {
  delete user_;
  user_ = user;
  if (user) {
    set_has_user();
  } else {
    clear_has_user();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewAuthResponse.User)
}

// optional .FromCs.ServerInfo Server = 5;
inline bool NewAuthResponse::has_server() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NewAuthResponse::set_has_server() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NewAuthResponse::clear_has_server() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NewAuthResponse::clear_server() {
  if (server_ != NULL) server_->::FromCs::ServerInfo::Clear();
  clear_has_server();
}
inline const ::FromCs::ServerInfo& NewAuthResponse::server() const {
  // @@protoc_insertion_point(field_get:FromCs.NewAuthResponse.Server)
  return server_ != NULL ? *server_
                         : *::FromCs::ServerInfo::internal_default_instance();
}
inline ::FromCs::ServerInfo* NewAuthResponse::mutable_server() {
  set_has_server();
  if (server_ == NULL) {
    server_ = new ::FromCs::ServerInfo;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.NewAuthResponse.Server)
  return server_;
}
inline ::FromCs::ServerInfo* NewAuthResponse::release_server() {
  // @@protoc_insertion_point(field_release:FromCs.NewAuthResponse.Server)
  clear_has_server();
  ::FromCs::ServerInfo* temp = server_;
  server_ = NULL;
  return temp;
}
inline void NewAuthResponse::set_allocated_server(::FromCs::ServerInfo* server) {
  delete server_;
  server_ = server;
  if (server) {
    set_has_server();
  } else {
    clear_has_server();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewAuthResponse.Server)
}

// -------------------------------------------------------------------

// CheckLoginQRCodeRequest

// required .FromCs.BaseRequest base = 1;
inline bool CheckLoginQRCodeRequest::has_base() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CheckLoginQRCodeRequest::set_has_base() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CheckLoginQRCodeRequest::clear_has_base() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CheckLoginQRCodeRequest::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseRequest::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseRequest& CheckLoginQRCodeRequest::base() const {
  // @@protoc_insertion_point(field_get:FromCs.CheckLoginQRCodeRequest.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseRequest::internal_default_instance();
}
inline ::FromCs::BaseRequest* CheckLoginQRCodeRequest::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.CheckLoginQRCodeRequest.base)
  return base_;
}
inline ::FromCs::BaseRequest* CheckLoginQRCodeRequest::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.CheckLoginQRCodeRequest.base)
  clear_has_base();
  ::FromCs::BaseRequest* temp = base_;
  base_ = NULL;
  return temp;
}
inline void CheckLoginQRCodeRequest::set_allocated_base(::FromCs::BaseRequest* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.CheckLoginQRCodeRequest.base)
}

// required .FromCs.sKBuiltinBufferT randomEncryKey = 2;
inline bool CheckLoginQRCodeRequest::has_randomencrykey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CheckLoginQRCodeRequest::set_has_randomencrykey() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CheckLoginQRCodeRequest::clear_has_randomencrykey() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CheckLoginQRCodeRequest::clear_randomencrykey() {
  if (randomencrykey_ != NULL) randomencrykey_->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_randomencrykey();
}
inline const ::FromCs::sKBuiltinBufferT& CheckLoginQRCodeRequest::randomencrykey() const {
  // @@protoc_insertion_point(field_get:FromCs.CheckLoginQRCodeRequest.randomEncryKey)
  return randomencrykey_ != NULL ? *randomencrykey_
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* CheckLoginQRCodeRequest::mutable_randomencrykey() {
  set_has_randomencrykey();
  if (randomencrykey_ == NULL) {
    randomencrykey_ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.CheckLoginQRCodeRequest.randomEncryKey)
  return randomencrykey_;
}
inline ::FromCs::sKBuiltinBufferT* CheckLoginQRCodeRequest::release_randomencrykey() {
  // @@protoc_insertion_point(field_release:FromCs.CheckLoginQRCodeRequest.randomEncryKey)
  clear_has_randomencrykey();
  ::FromCs::sKBuiltinBufferT* temp = randomencrykey_;
  randomencrykey_ = NULL;
  return temp;
}
inline void CheckLoginQRCodeRequest::set_allocated_randomencrykey(::FromCs::sKBuiltinBufferT* randomencrykey) {
  delete randomencrykey_;
  randomencrykey_ = randomencrykey;
  if (randomencrykey) {
    set_has_randomencrykey();
  } else {
    clear_has_randomencrykey();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.CheckLoginQRCodeRequest.randomEncryKey)
}

// required string uuid = 3;
inline bool CheckLoginQRCodeRequest::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CheckLoginQRCodeRequest::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CheckLoginQRCodeRequest::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CheckLoginQRCodeRequest::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uuid();
}
inline const ::std::string& CheckLoginQRCodeRequest::uuid() const {
  // @@protoc_insertion_point(field_get:FromCs.CheckLoginQRCodeRequest.uuid)
  return uuid_.GetNoArena();
}
inline void CheckLoginQRCodeRequest::set_uuid(const ::std::string& value) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.CheckLoginQRCodeRequest.uuid)
}
#if LANG_CXX11
inline void CheckLoginQRCodeRequest::set_uuid(::std::string&& value) {
  set_has_uuid();
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.CheckLoginQRCodeRequest.uuid)
}
#endif
inline void CheckLoginQRCodeRequest::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.CheckLoginQRCodeRequest.uuid)
}
inline void CheckLoginQRCodeRequest::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.CheckLoginQRCodeRequest.uuid)
}
inline ::std::string* CheckLoginQRCodeRequest::mutable_uuid() {
  set_has_uuid();
  // @@protoc_insertion_point(field_mutable:FromCs.CheckLoginQRCodeRequest.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckLoginQRCodeRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:FromCs.CheckLoginQRCodeRequest.uuid)
  clear_has_uuid();
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckLoginQRCodeRequest::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    set_has_uuid();
  } else {
    clear_has_uuid();
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:FromCs.CheckLoginQRCodeRequest.uuid)
}

// required int32 timeStamp = 4;
inline bool CheckLoginQRCodeRequest::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CheckLoginQRCodeRequest::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CheckLoginQRCodeRequest::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CheckLoginQRCodeRequest::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline ::google::protobuf::int32 CheckLoginQRCodeRequest::timestamp() const {
  // @@protoc_insertion_point(field_get:FromCs.CheckLoginQRCodeRequest.timeStamp)
  return timestamp_;
}
inline void CheckLoginQRCodeRequest::set_timestamp(::google::protobuf::int32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:FromCs.CheckLoginQRCodeRequest.timeStamp)
}

// required int32 opcode = 5;
inline bool CheckLoginQRCodeRequest::has_opcode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CheckLoginQRCodeRequest::set_has_opcode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CheckLoginQRCodeRequest::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CheckLoginQRCodeRequest::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
inline ::google::protobuf::int32 CheckLoginQRCodeRequest::opcode() const {
  // @@protoc_insertion_point(field_get:FromCs.CheckLoginQRCodeRequest.opcode)
  return opcode_;
}
inline void CheckLoginQRCodeRequest::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
  // @@protoc_insertion_point(field_set:FromCs.CheckLoginQRCodeRequest.opcode)
}

// -------------------------------------------------------------------

// CheckLoginQRCodeResponse

// required .FromCs.BaseResponse base = 1;
inline bool CheckLoginQRCodeResponse::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CheckLoginQRCodeResponse::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CheckLoginQRCodeResponse::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CheckLoginQRCodeResponse::clear_base() {
  if (base_ != NULL) base_->::FromCs::BaseResponse::Clear();
  clear_has_base();
}
inline const ::FromCs::BaseResponse& CheckLoginQRCodeResponse::base() const {
  // @@protoc_insertion_point(field_get:FromCs.CheckLoginQRCodeResponse.base)
  return base_ != NULL ? *base_
                         : *::FromCs::BaseResponse::internal_default_instance();
}
inline ::FromCs::BaseResponse* CheckLoginQRCodeResponse::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::FromCs::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.CheckLoginQRCodeResponse.base)
  return base_;
}
inline ::FromCs::BaseResponse* CheckLoginQRCodeResponse::release_base() {
  // @@protoc_insertion_point(field_release:FromCs.CheckLoginQRCodeResponse.base)
  clear_has_base();
  ::FromCs::BaseResponse* temp = base_;
  base_ = NULL;
  return temp;
}
inline void CheckLoginQRCodeResponse::set_allocated_base(::FromCs::BaseResponse* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.CheckLoginQRCodeResponse.base)
}

// optional .FromCs.LoginQRCodeNotifyPkg notifyPkg = 3;
inline bool CheckLoginQRCodeResponse::has_notifypkg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CheckLoginQRCodeResponse::set_has_notifypkg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CheckLoginQRCodeResponse::clear_has_notifypkg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CheckLoginQRCodeResponse::clear_notifypkg() {
  if (notifypkg_ != NULL) notifypkg_->::FromCs::LoginQRCodeNotifyPkg::Clear();
  clear_has_notifypkg();
}
inline const ::FromCs::LoginQRCodeNotifyPkg& CheckLoginQRCodeResponse::notifypkg() const {
  // @@protoc_insertion_point(field_get:FromCs.CheckLoginQRCodeResponse.notifyPkg)
  return notifypkg_ != NULL ? *notifypkg_
                         : *::FromCs::LoginQRCodeNotifyPkg::internal_default_instance();
}
inline ::FromCs::LoginQRCodeNotifyPkg* CheckLoginQRCodeResponse::mutable_notifypkg() {
  set_has_notifypkg();
  if (notifypkg_ == NULL) {
    notifypkg_ = new ::FromCs::LoginQRCodeNotifyPkg;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.CheckLoginQRCodeResponse.notifyPkg)
  return notifypkg_;
}
inline ::FromCs::LoginQRCodeNotifyPkg* CheckLoginQRCodeResponse::release_notifypkg() {
  // @@protoc_insertion_point(field_release:FromCs.CheckLoginQRCodeResponse.notifyPkg)
  clear_has_notifypkg();
  ::FromCs::LoginQRCodeNotifyPkg* temp = notifypkg_;
  notifypkg_ = NULL;
  return temp;
}
inline void CheckLoginQRCodeResponse::set_allocated_notifypkg(::FromCs::LoginQRCodeNotifyPkg* notifypkg) {
  delete notifypkg_;
  notifypkg_ = notifypkg;
  if (notifypkg) {
    set_has_notifypkg();
  } else {
    clear_has_notifypkg();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.CheckLoginQRCodeResponse.notifyPkg)
}

// -------------------------------------------------------------------

// sKBuiltinstringT

// optional string string = 1;
inline bool sKBuiltinstringT::has_string() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sKBuiltinstringT::set_has_string() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sKBuiltinstringT::clear_has_string() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sKBuiltinstringT::clear_string() {
  string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_string();
}
inline const ::std::string& sKBuiltinstringT::string() const {
  // @@protoc_insertion_point(field_get:FromCs.sKBuiltinstringT.string)
  return string_.GetNoArena();
}
inline void sKBuiltinstringT::set_string(const ::std::string& value) {
  set_has_string();
  string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.sKBuiltinstringT.string)
}
#if LANG_CXX11
inline void sKBuiltinstringT::set_string(::std::string&& value) {
  set_has_string();
  string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.sKBuiltinstringT.string)
}
#endif
inline void sKBuiltinstringT::set_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_string();
  string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.sKBuiltinstringT.string)
}
inline void sKBuiltinstringT::set_string(const char* value, size_t size) {
  set_has_string();
  string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.sKBuiltinstringT.string)
}
inline ::std::string* sKBuiltinstringT::mutable_string() {
  set_has_string();
  // @@protoc_insertion_point(field_mutable:FromCs.sKBuiltinstringT.string)
  return string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* sKBuiltinstringT::release_string() {
  // @@protoc_insertion_point(field_release:FromCs.sKBuiltinstringT.string)
  clear_has_string();
  return string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void sKBuiltinstringT::set_allocated_string(::std::string* string) {
  if (string != NULL) {
    set_has_string();
  } else {
    clear_has_string();
  }
  string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), string);
  // @@protoc_insertion_point(field_set_allocated:FromCs.sKBuiltinstringT.string)
}

// -------------------------------------------------------------------

// sKBuiltinBufferT

// optional int32 ILen = 1;
inline bool sKBuiltinBufferT::has_ilen() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sKBuiltinBufferT::set_has_ilen() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sKBuiltinBufferT::clear_has_ilen() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sKBuiltinBufferT::clear_ilen() {
  ilen_ = 0;
  clear_has_ilen();
}
inline ::google::protobuf::int32 sKBuiltinBufferT::ilen() const {
  // @@protoc_insertion_point(field_get:FromCs.sKBuiltinBufferT.ILen)
  return ilen_;
}
inline void sKBuiltinBufferT::set_ilen(::google::protobuf::int32 value) {
  set_has_ilen();
  ilen_ = value;
  // @@protoc_insertion_point(field_set:FromCs.sKBuiltinBufferT.ILen)
}

// optional bytes Buffer = 2;
inline bool sKBuiltinBufferT::has_buffer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sKBuiltinBufferT::set_has_buffer() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sKBuiltinBufferT::clear_has_buffer() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sKBuiltinBufferT::clear_buffer() {
  buffer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_buffer();
}
inline const ::std::string& sKBuiltinBufferT::buffer() const {
  // @@protoc_insertion_point(field_get:FromCs.sKBuiltinBufferT.Buffer)
  return buffer_.GetNoArena();
}
inline void sKBuiltinBufferT::set_buffer(const ::std::string& value) {
  set_has_buffer();
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.sKBuiltinBufferT.Buffer)
}
#if LANG_CXX11
inline void sKBuiltinBufferT::set_buffer(::std::string&& value) {
  set_has_buffer();
  buffer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.sKBuiltinBufferT.Buffer)
}
#endif
inline void sKBuiltinBufferT::set_buffer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_buffer();
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.sKBuiltinBufferT.Buffer)
}
inline void sKBuiltinBufferT::set_buffer(const void* value, size_t size) {
  set_has_buffer();
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.sKBuiltinBufferT.Buffer)
}
inline ::std::string* sKBuiltinBufferT::mutable_buffer() {
  set_has_buffer();
  // @@protoc_insertion_point(field_mutable:FromCs.sKBuiltinBufferT.Buffer)
  return buffer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* sKBuiltinBufferT::release_buffer() {
  // @@protoc_insertion_point(field_release:FromCs.sKBuiltinBufferT.Buffer)
  clear_has_buffer();
  return buffer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void sKBuiltinBufferT::set_allocated_buffer(::std::string* buffer) {
  if (buffer != NULL) {
    set_has_buffer();
  } else {
    clear_has_buffer();
  }
  buffer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buffer);
  // @@protoc_insertion_point(field_set_allocated:FromCs.sKBuiltinBufferT.Buffer)
}

// -------------------------------------------------------------------

// BaseRequest

// optional bytes SessionKey = 1;
inline bool BaseRequest::has_sessionkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BaseRequest::set_has_sessionkey() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BaseRequest::clear_has_sessionkey() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BaseRequest::clear_sessionkey() {
  sessionkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sessionkey();
}
inline const ::std::string& BaseRequest::sessionkey() const {
  // @@protoc_insertion_point(field_get:FromCs.BaseRequest.SessionKey)
  return sessionkey_.GetNoArena();
}
inline void BaseRequest::set_sessionkey(const ::std::string& value) {
  set_has_sessionkey();
  sessionkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.BaseRequest.SessionKey)
}
#if LANG_CXX11
inline void BaseRequest::set_sessionkey(::std::string&& value) {
  set_has_sessionkey();
  sessionkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.BaseRequest.SessionKey)
}
#endif
inline void BaseRequest::set_sessionkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sessionkey();
  sessionkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.BaseRequest.SessionKey)
}
inline void BaseRequest::set_sessionkey(const void* value, size_t size) {
  set_has_sessionkey();
  sessionkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.BaseRequest.SessionKey)
}
inline ::std::string* BaseRequest::mutable_sessionkey() {
  set_has_sessionkey();
  // @@protoc_insertion_point(field_mutable:FromCs.BaseRequest.SessionKey)
  return sessionkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BaseRequest::release_sessionkey() {
  // @@protoc_insertion_point(field_release:FromCs.BaseRequest.SessionKey)
  clear_has_sessionkey();
  return sessionkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BaseRequest::set_allocated_sessionkey(::std::string* sessionkey) {
  if (sessionkey != NULL) {
    set_has_sessionkey();
  } else {
    clear_has_sessionkey();
  }
  sessionkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionkey);
  // @@protoc_insertion_point(field_set_allocated:FromCs.BaseRequest.SessionKey)
}

// optional int32 Uin = 2;
inline bool BaseRequest::has_uin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BaseRequest::set_has_uin() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BaseRequest::clear_has_uin() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BaseRequest::clear_uin() {
  uin_ = 0;
  clear_has_uin();
}
inline ::google::protobuf::int32 BaseRequest::uin() const {
  // @@protoc_insertion_point(field_get:FromCs.BaseRequest.Uin)
  return uin_;
}
inline void BaseRequest::set_uin(::google::protobuf::int32 value) {
  set_has_uin();
  uin_ = value;
  // @@protoc_insertion_point(field_set:FromCs.BaseRequest.Uin)
}

// optional bytes DeviceID = 3;
inline bool BaseRequest::has_deviceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BaseRequest::set_has_deviceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BaseRequest::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BaseRequest::clear_deviceid() {
  deviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_deviceid();
}
inline const ::std::string& BaseRequest::deviceid() const {
  // @@protoc_insertion_point(field_get:FromCs.BaseRequest.DeviceID)
  return deviceid_.GetNoArena();
}
inline void BaseRequest::set_deviceid(const ::std::string& value) {
  set_has_deviceid();
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.BaseRequest.DeviceID)
}
#if LANG_CXX11
inline void BaseRequest::set_deviceid(::std::string&& value) {
  set_has_deviceid();
  deviceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.BaseRequest.DeviceID)
}
#endif
inline void BaseRequest::set_deviceid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_deviceid();
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.BaseRequest.DeviceID)
}
inline void BaseRequest::set_deviceid(const void* value, size_t size) {
  set_has_deviceid();
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.BaseRequest.DeviceID)
}
inline ::std::string* BaseRequest::mutable_deviceid() {
  set_has_deviceid();
  // @@protoc_insertion_point(field_mutable:FromCs.BaseRequest.DeviceID)
  return deviceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BaseRequest::release_deviceid() {
  // @@protoc_insertion_point(field_release:FromCs.BaseRequest.DeviceID)
  clear_has_deviceid();
  return deviceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BaseRequest::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid != NULL) {
    set_has_deviceid();
  } else {
    clear_has_deviceid();
  }
  deviceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deviceid);
  // @@protoc_insertion_point(field_set_allocated:FromCs.BaseRequest.DeviceID)
}

// optional int32 ClientVersion = 4;
inline bool BaseRequest::has_clientversion() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BaseRequest::set_has_clientversion() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BaseRequest::clear_has_clientversion() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BaseRequest::clear_clientversion() {
  clientversion_ = 0;
  clear_has_clientversion();
}
inline ::google::protobuf::int32 BaseRequest::clientversion() const {
  // @@protoc_insertion_point(field_get:FromCs.BaseRequest.ClientVersion)
  return clientversion_;
}
inline void BaseRequest::set_clientversion(::google::protobuf::int32 value) {
  set_has_clientversion();
  clientversion_ = value;
  // @@protoc_insertion_point(field_set:FromCs.BaseRequest.ClientVersion)
}

// optional bytes DeviceType = 5;
inline bool BaseRequest::has_devicetype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BaseRequest::set_has_devicetype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BaseRequest::clear_has_devicetype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BaseRequest::clear_devicetype() {
  devicetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_devicetype();
}
inline const ::std::string& BaseRequest::devicetype() const {
  // @@protoc_insertion_point(field_get:FromCs.BaseRequest.DeviceType)
  return devicetype_.GetNoArena();
}
inline void BaseRequest::set_devicetype(const ::std::string& value) {
  set_has_devicetype();
  devicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.BaseRequest.DeviceType)
}
#if LANG_CXX11
inline void BaseRequest::set_devicetype(::std::string&& value) {
  set_has_devicetype();
  devicetype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.BaseRequest.DeviceType)
}
#endif
inline void BaseRequest::set_devicetype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_devicetype();
  devicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.BaseRequest.DeviceType)
}
inline void BaseRequest::set_devicetype(const void* value, size_t size) {
  set_has_devicetype();
  devicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.BaseRequest.DeviceType)
}
inline ::std::string* BaseRequest::mutable_devicetype() {
  set_has_devicetype();
  // @@protoc_insertion_point(field_mutable:FromCs.BaseRequest.DeviceType)
  return devicetype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BaseRequest::release_devicetype() {
  // @@protoc_insertion_point(field_release:FromCs.BaseRequest.DeviceType)
  clear_has_devicetype();
  return devicetype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BaseRequest::set_allocated_devicetype(::std::string* devicetype) {
  if (devicetype != NULL) {
    set_has_devicetype();
  } else {
    clear_has_devicetype();
  }
  devicetype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicetype);
  // @@protoc_insertion_point(field_set_allocated:FromCs.BaseRequest.DeviceType)
}

// optional int32 Scene = 6;
inline bool BaseRequest::has_scene() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BaseRequest::set_has_scene() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BaseRequest::clear_has_scene() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BaseRequest::clear_scene() {
  scene_ = 0;
  clear_has_scene();
}
inline ::google::protobuf::int32 BaseRequest::scene() const {
  // @@protoc_insertion_point(field_get:FromCs.BaseRequest.Scene)
  return scene_;
}
inline void BaseRequest::set_scene(::google::protobuf::int32 value) {
  set_has_scene();
  scene_ = value;
  // @@protoc_insertion_point(field_set:FromCs.BaseRequest.Scene)
}

// -------------------------------------------------------------------

// BaseResponse

// optional int32 Ret = 1;
inline bool BaseResponse::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BaseResponse::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BaseResponse::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BaseResponse::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 BaseResponse::ret() const {
  // @@protoc_insertion_point(field_get:FromCs.BaseResponse.Ret)
  return ret_;
}
inline void BaseResponse::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:FromCs.BaseResponse.Ret)
}

// optional .FromCs.sKBuiltinstringT ErrMsg = 2;
inline bool BaseResponse::has_errmsg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BaseResponse::set_has_errmsg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BaseResponse::clear_has_errmsg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BaseResponse::clear_errmsg() {
  if (errmsg_ != NULL) errmsg_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_errmsg();
}
inline const ::FromCs::sKBuiltinstringT& BaseResponse::errmsg() const {
  // @@protoc_insertion_point(field_get:FromCs.BaseResponse.ErrMsg)
  return errmsg_ != NULL ? *errmsg_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* BaseResponse::mutable_errmsg() {
  set_has_errmsg();
  if (errmsg_ == NULL) {
    errmsg_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.BaseResponse.ErrMsg)
  return errmsg_;
}
inline ::FromCs::sKBuiltinstringT* BaseResponse::release_errmsg() {
  // @@protoc_insertion_point(field_release:FromCs.BaseResponse.ErrMsg)
  clear_has_errmsg();
  ::FromCs::sKBuiltinstringT* temp = errmsg_;
  errmsg_ = NULL;
  return temp;
}
inline void BaseResponse::set_allocated_errmsg(::FromCs::sKBuiltinstringT* errmsg) {
  delete errmsg_;
  errmsg_ = errmsg;
  if (errmsg) {
    set_has_errmsg();
  } else {
    clear_has_errmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.BaseResponse.ErrMsg)
}

// -------------------------------------------------------------------

// DnsInfoType

// optional int32 Ver = 1;
inline bool DnsInfoType::has_ver() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DnsInfoType::set_has_ver() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DnsInfoType::clear_has_ver() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DnsInfoType::clear_ver() {
  ver_ = 0;
  clear_has_ver();
}
inline ::google::protobuf::int32 DnsInfoType::ver() const {
  // @@protoc_insertion_point(field_get:FromCs.DnsInfoType.Ver)
  return ver_;
}
inline void DnsInfoType::set_ver(::google::protobuf::int32 value) {
  set_has_ver();
  ver_ = value;
  // @@protoc_insertion_point(field_set:FromCs.DnsInfoType.Ver)
}

// optional int32 Uin = 2;
inline bool DnsInfoType::has_uin() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DnsInfoType::set_has_uin() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DnsInfoType::clear_has_uin() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DnsInfoType::clear_uin() {
  uin_ = 0;
  clear_has_uin();
}
inline ::google::protobuf::int32 DnsInfoType::uin() const {
  // @@protoc_insertion_point(field_get:FromCs.DnsInfoType.Uin)
  return uin_;
}
inline void DnsInfoType::set_uin(::google::protobuf::int32 value) {
  set_has_uin();
  uin_ = value;
  // @@protoc_insertion_point(field_set:FromCs.DnsInfoType.Uin)
}

// optional int32 ExpireTime = 3;
inline bool DnsInfoType::has_expiretime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DnsInfoType::set_has_expiretime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DnsInfoType::clear_has_expiretime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DnsInfoType::clear_expiretime() {
  expiretime_ = 0;
  clear_has_expiretime();
}
inline ::google::protobuf::int32 DnsInfoType::expiretime() const {
  // @@protoc_insertion_point(field_get:FromCs.DnsInfoType.ExpireTime)
  return expiretime_;
}
inline void DnsInfoType::set_expiretime(::google::protobuf::int32 value) {
  set_has_expiretime();
  expiretime_ = value;
  // @@protoc_insertion_point(field_set:FromCs.DnsInfoType.ExpireTime)
}

// optional int32 FrontID = 4;
inline bool DnsInfoType::has_frontid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DnsInfoType::set_has_frontid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DnsInfoType::clear_has_frontid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DnsInfoType::clear_frontid() {
  frontid_ = 0;
  clear_has_frontid();
}
inline ::google::protobuf::int32 DnsInfoType::frontid() const {
  // @@protoc_insertion_point(field_get:FromCs.DnsInfoType.FrontID)
  return frontid_;
}
inline void DnsInfoType::set_frontid(::google::protobuf::int32 value) {
  set_has_frontid();
  frontid_ = value;
  // @@protoc_insertion_point(field_set:FromCs.DnsInfoType.FrontID)
}

// optional int32 FrontIPCount = 5;
inline bool DnsInfoType::has_frontipcount() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DnsInfoType::set_has_frontipcount() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DnsInfoType::clear_has_frontipcount() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DnsInfoType::clear_frontipcount() {
  frontipcount_ = 0;
  clear_has_frontipcount();
}
inline ::google::protobuf::int32 DnsInfoType::frontipcount() const {
  // @@protoc_insertion_point(field_get:FromCs.DnsInfoType.FrontIPCount)
  return frontipcount_;
}
inline void DnsInfoType::set_frontipcount(::google::protobuf::int32 value) {
  set_has_frontipcount();
  frontipcount_ = value;
  // @@protoc_insertion_point(field_set:FromCs.DnsInfoType.FrontIPCount)
}

// optional .FromCs.sKBuiltinstringT frontIPList_ = 6;
inline bool DnsInfoType::has_frontiplist_() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DnsInfoType::set_has_frontiplist_() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DnsInfoType::clear_has_frontiplist_() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DnsInfoType::clear_frontiplist_() {
  if (frontiplist__ != NULL) frontiplist__->::FromCs::sKBuiltinstringT::Clear();
  clear_has_frontiplist_();
}
inline const ::FromCs::sKBuiltinstringT& DnsInfoType::frontiplist_() const {
  // @@protoc_insertion_point(field_get:FromCs.DnsInfoType.frontIPList_)
  return frontiplist__ != NULL ? *frontiplist__
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* DnsInfoType::mutable_frontiplist_() {
  set_has_frontiplist_();
  if (frontiplist__ == NULL) {
    frontiplist__ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.DnsInfoType.frontIPList_)
  return frontiplist__;
}
inline ::FromCs::sKBuiltinstringT* DnsInfoType::release_frontiplist_() {
  // @@protoc_insertion_point(field_release:FromCs.DnsInfoType.frontIPList_)
  clear_has_frontiplist_();
  ::FromCs::sKBuiltinstringT* temp = frontiplist__;
  frontiplist__ = NULL;
  return temp;
}
inline void DnsInfoType::set_allocated_frontiplist_(::FromCs::sKBuiltinstringT* frontiplist_) {
  delete frontiplist__;
  frontiplist__ = frontiplist_;
  if (frontiplist_) {
    set_has_frontiplist_();
  } else {
    clear_has_frontiplist_();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.DnsInfoType.frontIPList_)
}

// optional string ZoneDomain = 7;
inline bool DnsInfoType::has_zonedomain() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DnsInfoType::set_has_zonedomain() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DnsInfoType::clear_has_zonedomain() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DnsInfoType::clear_zonedomain() {
  zonedomain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_zonedomain();
}
inline const ::std::string& DnsInfoType::zonedomain() const {
  // @@protoc_insertion_point(field_get:FromCs.DnsInfoType.ZoneDomain)
  return zonedomain_.GetNoArena();
}
inline void DnsInfoType::set_zonedomain(const ::std::string& value) {
  set_has_zonedomain();
  zonedomain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.DnsInfoType.ZoneDomain)
}
#if LANG_CXX11
inline void DnsInfoType::set_zonedomain(::std::string&& value) {
  set_has_zonedomain();
  zonedomain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.DnsInfoType.ZoneDomain)
}
#endif
inline void DnsInfoType::set_zonedomain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_zonedomain();
  zonedomain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.DnsInfoType.ZoneDomain)
}
inline void DnsInfoType::set_zonedomain(const char* value, size_t size) {
  set_has_zonedomain();
  zonedomain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.DnsInfoType.ZoneDomain)
}
inline ::std::string* DnsInfoType::mutable_zonedomain() {
  set_has_zonedomain();
  // @@protoc_insertion_point(field_mutable:FromCs.DnsInfoType.ZoneDomain)
  return zonedomain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DnsInfoType::release_zonedomain() {
  // @@protoc_insertion_point(field_release:FromCs.DnsInfoType.ZoneDomain)
  clear_has_zonedomain();
  return zonedomain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DnsInfoType::set_allocated_zonedomain(::std::string* zonedomain) {
  if (zonedomain != NULL) {
    set_has_zonedomain();
  } else {
    clear_has_zonedomain();
  }
  zonedomain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zonedomain);
  // @@protoc_insertion_point(field_set_allocated:FromCs.DnsInfoType.ZoneDomain)
}

// optional .FromCs.sKBuiltinstringT AuthKey = 8;
inline bool DnsInfoType::has_authkey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DnsInfoType::set_has_authkey() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DnsInfoType::clear_has_authkey() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DnsInfoType::clear_authkey() {
  if (authkey_ != NULL) authkey_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_authkey();
}
inline const ::FromCs::sKBuiltinstringT& DnsInfoType::authkey() const {
  // @@protoc_insertion_point(field_get:FromCs.DnsInfoType.AuthKey)
  return authkey_ != NULL ? *authkey_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* DnsInfoType::mutable_authkey() {
  set_has_authkey();
  if (authkey_ == NULL) {
    authkey_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.DnsInfoType.AuthKey)
  return authkey_;
}
inline ::FromCs::sKBuiltinstringT* DnsInfoType::release_authkey() {
  // @@protoc_insertion_point(field_release:FromCs.DnsInfoType.AuthKey)
  clear_has_authkey();
  ::FromCs::sKBuiltinstringT* temp = authkey_;
  authkey_ = NULL;
  return temp;
}
inline void DnsInfoType::set_allocated_authkey(::FromCs::sKBuiltinstringT* authkey) {
  delete authkey_;
  authkey_ = authkey;
  if (authkey) {
    set_has_authkey();
  } else {
    clear_has_authkey();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.DnsInfoType.AuthKey)
}

// optional int32 ZoneID = 9;
inline bool DnsInfoType::has_zoneid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DnsInfoType::set_has_zoneid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DnsInfoType::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DnsInfoType::clear_zoneid() {
  zoneid_ = 0;
  clear_has_zoneid();
}
inline ::google::protobuf::int32 DnsInfoType::zoneid() const {
  // @@protoc_insertion_point(field_get:FromCs.DnsInfoType.ZoneID)
  return zoneid_;
}
inline void DnsInfoType::set_zoneid(::google::protobuf::int32 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:FromCs.DnsInfoType.ZoneID)
}

// optional int32 ZoneIPCount = 10;
inline bool DnsInfoType::has_zoneipcount() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DnsInfoType::set_has_zoneipcount() {
  _has_bits_[0] |= 0x00000400u;
}
inline void DnsInfoType::clear_has_zoneipcount() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void DnsInfoType::clear_zoneipcount() {
  zoneipcount_ = 0;
  clear_has_zoneipcount();
}
inline ::google::protobuf::int32 DnsInfoType::zoneipcount() const {
  // @@protoc_insertion_point(field_get:FromCs.DnsInfoType.ZoneIPCount)
  return zoneipcount_;
}
inline void DnsInfoType::set_zoneipcount(::google::protobuf::int32 value) {
  set_has_zoneipcount();
  zoneipcount_ = value;
  // @@protoc_insertion_point(field_set:FromCs.DnsInfoType.ZoneIPCount)
}

// optional .FromCs.sKBuiltinstringT zoneIPList_ = 11;
inline bool DnsInfoType::has_zoneiplist_() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DnsInfoType::set_has_zoneiplist_() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DnsInfoType::clear_has_zoneiplist_() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DnsInfoType::clear_zoneiplist_() {
  if (zoneiplist__ != NULL) zoneiplist__->::FromCs::sKBuiltinstringT::Clear();
  clear_has_zoneiplist_();
}
inline const ::FromCs::sKBuiltinstringT& DnsInfoType::zoneiplist_() const {
  // @@protoc_insertion_point(field_get:FromCs.DnsInfoType.zoneIPList_)
  return zoneiplist__ != NULL ? *zoneiplist__
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* DnsInfoType::mutable_zoneiplist_() {
  set_has_zoneiplist_();
  if (zoneiplist__ == NULL) {
    zoneiplist__ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.DnsInfoType.zoneIPList_)
  return zoneiplist__;
}
inline ::FromCs::sKBuiltinstringT* DnsInfoType::release_zoneiplist_() {
  // @@protoc_insertion_point(field_release:FromCs.DnsInfoType.zoneIPList_)
  clear_has_zoneiplist_();
  ::FromCs::sKBuiltinstringT* temp = zoneiplist__;
  zoneiplist__ = NULL;
  return temp;
}
inline void DnsInfoType::set_allocated_zoneiplist_(::FromCs::sKBuiltinstringT* zoneiplist_) {
  delete zoneiplist__;
  zoneiplist__ = zoneiplist_;
  if (zoneiplist_) {
    set_has_zoneiplist_();
  } else {
    clear_has_zoneiplist_();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.DnsInfoType.zoneIPList_)
}

// -------------------------------------------------------------------

// NewHostListType

// optional int32 Count = 1;
inline bool NewHostListType::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NewHostListType::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NewHostListType::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NewHostListType::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 NewHostListType::count() const {
  // @@protoc_insertion_point(field_get:FromCs.NewHostListType.Count)
  return count_;
}
inline void NewHostListType::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:FromCs.NewHostListType.Count)
}

// optional .FromCs.sKBuiltinstringT list_ = 2;
inline bool NewHostListType::has_list_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NewHostListType::set_has_list_() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NewHostListType::clear_has_list_() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NewHostListType::clear_list_() {
  if (list__ != NULL) list__->::FromCs::sKBuiltinstringT::Clear();
  clear_has_list_();
}
inline const ::FromCs::sKBuiltinstringT& NewHostListType::list_() const {
  // @@protoc_insertion_point(field_get:FromCs.NewHostListType.list_)
  return list__ != NULL ? *list__
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* NewHostListType::mutable_list_() {
  set_has_list_();
  if (list__ == NULL) {
    list__ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.NewHostListType.list_)
  return list__;
}
inline ::FromCs::sKBuiltinstringT* NewHostListType::release_list_() {
  // @@protoc_insertion_point(field_release:FromCs.NewHostListType.list_)
  clear_has_list_();
  ::FromCs::sKBuiltinstringT* temp = list__;
  list__ = NULL;
  return temp;
}
inline void NewHostListType::set_allocated_list_(::FromCs::sKBuiltinstringT* list_) {
  delete list__;
  list__ = list_;
  if (list_) {
    set_has_list_();
  } else {
    clear_has_list_();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewHostListType.list_)
}

// -------------------------------------------------------------------

// NewHost

// optional string Origin = 1;
inline bool NewHost::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NewHost::set_has_origin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NewHost::clear_has_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NewHost::clear_origin() {
  origin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_origin();
}
inline const ::std::string& NewHost::origin() const {
  // @@protoc_insertion_point(field_get:FromCs.NewHost.Origin)
  return origin_.GetNoArena();
}
inline void NewHost::set_origin(const ::std::string& value) {
  set_has_origin();
  origin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.NewHost.Origin)
}
#if LANG_CXX11
inline void NewHost::set_origin(::std::string&& value) {
  set_has_origin();
  origin_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.NewHost.Origin)
}
#endif
inline void NewHost::set_origin(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_origin();
  origin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.NewHost.Origin)
}
inline void NewHost::set_origin(const char* value, size_t size) {
  set_has_origin();
  origin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.NewHost.Origin)
}
inline ::std::string* NewHost::mutable_origin() {
  set_has_origin();
  // @@protoc_insertion_point(field_mutable:FromCs.NewHost.Origin)
  return origin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewHost::release_origin() {
  // @@protoc_insertion_point(field_release:FromCs.NewHost.Origin)
  clear_has_origin();
  return origin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewHost::set_allocated_origin(::std::string* origin) {
  if (origin != NULL) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  origin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), origin);
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewHost.Origin)
}

// optional string Substitute = 2;
inline bool NewHost::has_substitute() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NewHost::set_has_substitute() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NewHost::clear_has_substitute() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NewHost::clear_substitute() {
  substitute_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_substitute();
}
inline const ::std::string& NewHost::substitute() const {
  // @@protoc_insertion_point(field_get:FromCs.NewHost.Substitute)
  return substitute_.GetNoArena();
}
inline void NewHost::set_substitute(const ::std::string& value) {
  set_has_substitute();
  substitute_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.NewHost.Substitute)
}
#if LANG_CXX11
inline void NewHost::set_substitute(::std::string&& value) {
  set_has_substitute();
  substitute_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.NewHost.Substitute)
}
#endif
inline void NewHost::set_substitute(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_substitute();
  substitute_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.NewHost.Substitute)
}
inline void NewHost::set_substitute(const char* value, size_t size) {
  set_has_substitute();
  substitute_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.NewHost.Substitute)
}
inline ::std::string* NewHost::mutable_substitute() {
  set_has_substitute();
  // @@protoc_insertion_point(field_mutable:FromCs.NewHost.Substitute)
  return substitute_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewHost::release_substitute() {
  // @@protoc_insertion_point(field_release:FromCs.NewHost.Substitute)
  clear_has_substitute();
  return substitute_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewHost::set_allocated_substitute(::std::string* substitute) {
  if (substitute != NULL) {
    set_has_substitute();
  } else {
    clear_has_substitute();
  }
  substitute_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), substitute);
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewHost.Substitute)
}

// optional int32 Type = 3;
inline bool NewHost::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NewHost::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NewHost::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NewHost::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 NewHost::type() const {
  // @@protoc_insertion_point(field_get:FromCs.NewHost.Type)
  return type_;
}
inline void NewHost::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:FromCs.NewHost.Type)
}

// -------------------------------------------------------------------

// PluginKeyListType

// optional int32 Count = 1;
inline bool PluginKeyListType::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PluginKeyListType::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PluginKeyListType::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PluginKeyListType::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 PluginKeyListType::count() const {
  // @@protoc_insertion_point(field_get:FromCs.PluginKeyListType.Count)
  return count_;
}
inline void PluginKeyListType::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:FromCs.PluginKeyListType.Count)
}

// optional .FromCs.sKBuiltinstringT list_ = 2;
inline bool PluginKeyListType::has_list_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PluginKeyListType::set_has_list_() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PluginKeyListType::clear_has_list_() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PluginKeyListType::clear_list_() {
  if (list__ != NULL) list__->::FromCs::sKBuiltinstringT::Clear();
  clear_has_list_();
}
inline const ::FromCs::sKBuiltinstringT& PluginKeyListType::list_() const {
  // @@protoc_insertion_point(field_get:FromCs.PluginKeyListType.list_)
  return list__ != NULL ? *list__
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* PluginKeyListType::mutable_list_() {
  set_has_list_();
  if (list__ == NULL) {
    list__ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.PluginKeyListType.list_)
  return list__;
}
inline ::FromCs::sKBuiltinstringT* PluginKeyListType::release_list_() {
  // @@protoc_insertion_point(field_release:FromCs.PluginKeyListType.list_)
  clear_has_list_();
  ::FromCs::sKBuiltinstringT* temp = list__;
  list__ = NULL;
  return temp;
}
inline void PluginKeyListType::set_allocated_list_(::FromCs::sKBuiltinstringT* list_) {
  delete list__;
  list__ = list_;
  if (list_) {
    set_has_list_();
  } else {
    clear_has_list_();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.PluginKeyListType.list_)
}

// -------------------------------------------------------------------

// PluginKey

// optional string Key = 1;
inline bool PluginKey::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PluginKey::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PluginKey::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PluginKey::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& PluginKey::key() const {
  // @@protoc_insertion_point(field_get:FromCs.PluginKey.Key)
  return key_.GetNoArena();
}
inline void PluginKey::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.PluginKey.Key)
}
#if LANG_CXX11
inline void PluginKey::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.PluginKey.Key)
}
#endif
inline void PluginKey::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.PluginKey.Key)
}
inline void PluginKey::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.PluginKey.Key)
}
inline ::std::string* PluginKey::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:FromCs.PluginKey.Key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PluginKey::release_key() {
  // @@protoc_insertion_point(field_release:FromCs.PluginKey.Key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PluginKey::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:FromCs.PluginKey.Key)
}

// optional int32 Id = 2;
inline bool PluginKey::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PluginKey::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PluginKey::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PluginKey::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PluginKey::id() const {
  // @@protoc_insertion_point(field_get:FromCs.PluginKey.Id)
  return id_;
}
inline void PluginKey::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:FromCs.PluginKey.Id)
}

// -------------------------------------------------------------------

// NetworkControlType

// optional string PortList = 1;
inline bool NetworkControlType::has_portlist() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetworkControlType::set_has_portlist() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetworkControlType::clear_has_portlist() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetworkControlType::clear_portlist() {
  portlist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_portlist();
}
inline const ::std::string& NetworkControlType::portlist() const {
  // @@protoc_insertion_point(field_get:FromCs.NetworkControlType.PortList)
  return portlist_.GetNoArena();
}
inline void NetworkControlType::set_portlist(const ::std::string& value) {
  set_has_portlist();
  portlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.NetworkControlType.PortList)
}
#if LANG_CXX11
inline void NetworkControlType::set_portlist(::std::string&& value) {
  set_has_portlist();
  portlist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.NetworkControlType.PortList)
}
#endif
inline void NetworkControlType::set_portlist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_portlist();
  portlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.NetworkControlType.PortList)
}
inline void NetworkControlType::set_portlist(const char* value, size_t size) {
  set_has_portlist();
  portlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.NetworkControlType.PortList)
}
inline ::std::string* NetworkControlType::mutable_portlist() {
  set_has_portlist();
  // @@protoc_insertion_point(field_mutable:FromCs.NetworkControlType.PortList)
  return portlist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkControlType::release_portlist() {
  // @@protoc_insertion_point(field_release:FromCs.NetworkControlType.PortList)
  clear_has_portlist();
  return portlist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkControlType::set_allocated_portlist(::std::string* portlist) {
  if (portlist != NULL) {
    set_has_portlist();
  } else {
    clear_has_portlist();
  }
  portlist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), portlist);
  // @@protoc_insertion_point(field_set_allocated:FromCs.NetworkControlType.PortList)
}

// optional string TimeoutList = 2;
inline bool NetworkControlType::has_timeoutlist() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetworkControlType::set_has_timeoutlist() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetworkControlType::clear_has_timeoutlist() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetworkControlType::clear_timeoutlist() {
  timeoutlist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_timeoutlist();
}
inline const ::std::string& NetworkControlType::timeoutlist() const {
  // @@protoc_insertion_point(field_get:FromCs.NetworkControlType.TimeoutList)
  return timeoutlist_.GetNoArena();
}
inline void NetworkControlType::set_timeoutlist(const ::std::string& value) {
  set_has_timeoutlist();
  timeoutlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.NetworkControlType.TimeoutList)
}
#if LANG_CXX11
inline void NetworkControlType::set_timeoutlist(::std::string&& value) {
  set_has_timeoutlist();
  timeoutlist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.NetworkControlType.TimeoutList)
}
#endif
inline void NetworkControlType::set_timeoutlist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_timeoutlist();
  timeoutlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.NetworkControlType.TimeoutList)
}
inline void NetworkControlType::set_timeoutlist(const char* value, size_t size) {
  set_has_timeoutlist();
  timeoutlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.NetworkControlType.TimeoutList)
}
inline ::std::string* NetworkControlType::mutable_timeoutlist() {
  set_has_timeoutlist();
  // @@protoc_insertion_point(field_mutable:FromCs.NetworkControlType.TimeoutList)
  return timeoutlist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkControlType::release_timeoutlist() {
  // @@protoc_insertion_point(field_release:FromCs.NetworkControlType.TimeoutList)
  clear_has_timeoutlist();
  return timeoutlist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkControlType::set_allocated_timeoutlist(::std::string* timeoutlist) {
  if (timeoutlist != NULL) {
    set_has_timeoutlist();
  } else {
    clear_has_timeoutlist();
  }
  timeoutlist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timeoutlist);
  // @@protoc_insertion_point(field_set_allocated:FromCs.NetworkControlType.TimeoutList)
}

// optional int32 MinNoopInterval = 3;
inline bool NetworkControlType::has_minnoopinterval() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetworkControlType::set_has_minnoopinterval() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetworkControlType::clear_has_minnoopinterval() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetworkControlType::clear_minnoopinterval() {
  minnoopinterval_ = 0;
  clear_has_minnoopinterval();
}
inline ::google::protobuf::int32 NetworkControlType::minnoopinterval() const {
  // @@protoc_insertion_point(field_get:FromCs.NetworkControlType.MinNoopInterval)
  return minnoopinterval_;
}
inline void NetworkControlType::set_minnoopinterval(::google::protobuf::int32 value) {
  set_has_minnoopinterval();
  minnoopinterval_ = value;
  // @@protoc_insertion_point(field_set:FromCs.NetworkControlType.MinNoopInterval)
}

// optional int32 MaxNoopInterval = 4;
inline bool NetworkControlType::has_maxnoopinterval() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetworkControlType::set_has_maxnoopinterval() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetworkControlType::clear_has_maxnoopinterval() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetworkControlType::clear_maxnoopinterval() {
  maxnoopinterval_ = 0;
  clear_has_maxnoopinterval();
}
inline ::google::protobuf::int32 NetworkControlType::maxnoopinterval() const {
  // @@protoc_insertion_point(field_get:FromCs.NetworkControlType.MaxNoopInterval)
  return maxnoopinterval_;
}
inline void NetworkControlType::set_maxnoopinterval(::google::protobuf::int32 value) {
  set_has_maxnoopinterval();
  maxnoopinterval_ = value;
  // @@protoc_insertion_point(field_set:FromCs.NetworkControlType.MaxNoopInterval)
}

// optional int32 Int5 = 5;
inline bool NetworkControlType::has_int5() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NetworkControlType::set_has_int5() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NetworkControlType::clear_has_int5() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NetworkControlType::clear_int5() {
  int5_ = 0;
  clear_has_int5();
}
inline ::google::protobuf::int32 NetworkControlType::int5() const {
  // @@protoc_insertion_point(field_get:FromCs.NetworkControlType.Int5)
  return int5_;
}
inline void NetworkControlType::set_int5(::google::protobuf::int32 value) {
  set_has_int5();
  int5_ = value;
  // @@protoc_insertion_point(field_set:FromCs.NetworkControlType.Int5)
}

// optional int32 Int6 = 6;
inline bool NetworkControlType::has_int6() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NetworkControlType::set_has_int6() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NetworkControlType::clear_has_int6() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NetworkControlType::clear_int6() {
  int6_ = 0;
  clear_has_int6();
}
inline ::google::protobuf::int32 NetworkControlType::int6() const {
  // @@protoc_insertion_point(field_get:FromCs.NetworkControlType.Int6)
  return int6_;
}
inline void NetworkControlType::set_int6(::google::protobuf::int32 value) {
  set_has_int6();
  int6_ = value;
  // @@protoc_insertion_point(field_set:FromCs.NetworkControlType.Int6)
}

// -------------------------------------------------------------------

// iPList

// optional int32 LongConnectIPCount = 1;
inline bool iPList::has_longconnectipcount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void iPList::set_has_longconnectipcount() {
  _has_bits_[0] |= 0x00000001u;
}
inline void iPList::clear_has_longconnectipcount() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void iPList::clear_longconnectipcount() {
  longconnectipcount_ = 0;
  clear_has_longconnectipcount();
}
inline ::google::protobuf::int32 iPList::longconnectipcount() const {
  // @@protoc_insertion_point(field_get:FromCs.iPList.LongConnectIPCount)
  return longconnectipcount_;
}
inline void iPList::set_longconnectipcount(::google::protobuf::int32 value) {
  set_has_longconnectipcount();
  longconnectipcount_ = value;
  // @@protoc_insertion_point(field_set:FromCs.iPList.LongConnectIPCount)
}

// optional int32 ShortConnectIPCount = 2;
inline bool iPList::has_shortconnectipcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void iPList::set_has_shortconnectipcount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void iPList::clear_has_shortconnectipcount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void iPList::clear_shortconnectipcount() {
  shortconnectipcount_ = 0;
  clear_has_shortconnectipcount();
}
inline ::google::protobuf::int32 iPList::shortconnectipcount() const {
  // @@protoc_insertion_point(field_get:FromCs.iPList.ShortConnectIPCount)
  return shortconnectipcount_;
}
inline void iPList::set_shortconnectipcount(::google::protobuf::int32 value) {
  set_has_shortconnectipcount();
  shortconnectipcount_ = value;
  // @@protoc_insertion_point(field_set:FromCs.iPList.ShortConnectIPCount)
}

// repeated .FromCs.iPEnd longCionnectIPList_ = 3;
inline int iPList::longcionnectiplist__size() const {
  return longcionnectiplist__.size();
}
inline void iPList::clear_longcionnectiplist_() {
  longcionnectiplist__.Clear();
}
inline const ::FromCs::iPEnd& iPList::longcionnectiplist_(int index) const {
  // @@protoc_insertion_point(field_get:FromCs.iPList.longCionnectIPList_)
  return longcionnectiplist__.Get(index);
}
inline ::FromCs::iPEnd* iPList::mutable_longcionnectiplist_(int index) {
  // @@protoc_insertion_point(field_mutable:FromCs.iPList.longCionnectIPList_)
  return longcionnectiplist__.Mutable(index);
}
inline ::FromCs::iPEnd* iPList::add_longcionnectiplist_() {
  // @@protoc_insertion_point(field_add:FromCs.iPList.longCionnectIPList_)
  return longcionnectiplist__.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::FromCs::iPEnd >*
iPList::mutable_longcionnectiplist_() {
  // @@protoc_insertion_point(field_mutable_list:FromCs.iPList.longCionnectIPList_)
  return &longcionnectiplist__;
}
inline const ::google::protobuf::RepeatedPtrField< ::FromCs::iPEnd >&
iPList::longcionnectiplist_() const {
  // @@protoc_insertion_point(field_list:FromCs.iPList.longCionnectIPList_)
  return longcionnectiplist__;
}

// repeated .FromCs.iPEnd shortConnectIPList_ = 4;
inline int iPList::shortconnectiplist__size() const {
  return shortconnectiplist__.size();
}
inline void iPList::clear_shortconnectiplist_() {
  shortconnectiplist__.Clear();
}
inline const ::FromCs::iPEnd& iPList::shortconnectiplist_(int index) const {
  // @@protoc_insertion_point(field_get:FromCs.iPList.shortConnectIPList_)
  return shortconnectiplist__.Get(index);
}
inline ::FromCs::iPEnd* iPList::mutable_shortconnectiplist_(int index) {
  // @@protoc_insertion_point(field_mutable:FromCs.iPList.shortConnectIPList_)
  return shortconnectiplist__.Mutable(index);
}
inline ::FromCs::iPEnd* iPList::add_shortconnectiplist_() {
  // @@protoc_insertion_point(field_add:FromCs.iPList.shortConnectIPList_)
  return shortconnectiplist__.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::FromCs::iPEnd >*
iPList::mutable_shortconnectiplist_() {
  // @@protoc_insertion_point(field_mutable_list:FromCs.iPList.shortConnectIPList_)
  return &shortconnectiplist__;
}
inline const ::google::protobuf::RepeatedPtrField< ::FromCs::iPEnd >&
iPList::shortconnectiplist_() const {
  // @@protoc_insertion_point(field_list:FromCs.iPList.shortConnectIPList_)
  return shortconnectiplist__;
}

// optional int32 Seq = 5;
inline bool iPList::has_seq() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void iPList::set_has_seq() {
  _has_bits_[0] |= 0x00000004u;
}
inline void iPList::clear_has_seq() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void iPList::clear_seq() {
  seq_ = 0;
  clear_has_seq();
}
inline ::google::protobuf::int32 iPList::seq() const {
  // @@protoc_insertion_point(field_get:FromCs.iPList.Seq)
  return seq_;
}
inline void iPList::set_seq(::google::protobuf::int32 value) {
  set_has_seq();
  seq_ = value;
  // @@protoc_insertion_point(field_set:FromCs.iPList.Seq)
}

// -------------------------------------------------------------------

// iPEnd

// optional int32 Type = 1;
inline bool iPEnd::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void iPEnd::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void iPEnd::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void iPEnd::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 iPEnd::type() const {
  // @@protoc_insertion_point(field_get:FromCs.iPEnd.Type)
  return type_;
}
inline void iPEnd::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:FromCs.iPEnd.Type)
}

// optional int32 Port = 2;
inline bool iPEnd::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void iPEnd::set_has_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void iPEnd::clear_has_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void iPEnd::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 iPEnd::port() const {
  // @@protoc_insertion_point(field_get:FromCs.iPEnd.Port)
  return port_;
}
inline void iPEnd::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:FromCs.iPEnd.Port)
}

// optional bytes IP = 3;
inline bool iPEnd::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void iPEnd::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void iPEnd::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void iPEnd::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
inline const ::std::string& iPEnd::ip() const {
  // @@protoc_insertion_point(field_get:FromCs.iPEnd.IP)
  return ip_.GetNoArena();
}
inline void iPEnd::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.iPEnd.IP)
}
#if LANG_CXX11
inline void iPEnd::set_ip(::std::string&& value) {
  set_has_ip();
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.iPEnd.IP)
}
#endif
inline void iPEnd::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.iPEnd.IP)
}
inline void iPEnd::set_ip(const void* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.iPEnd.IP)
}
inline ::std::string* iPEnd::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:FromCs.iPEnd.IP)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* iPEnd::release_ip() {
  // @@protoc_insertion_point(field_release:FromCs.iPEnd.IP)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void iPEnd::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:FromCs.iPEnd.IP)
}

// optional bytes Host = 4;
inline bool iPEnd::has_host() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void iPEnd::set_has_host() {
  _has_bits_[0] |= 0x00000002u;
}
inline void iPEnd::clear_has_host() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void iPEnd::clear_host() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_host();
}
inline const ::std::string& iPEnd::host() const {
  // @@protoc_insertion_point(field_get:FromCs.iPEnd.Host)
  return host_.GetNoArena();
}
inline void iPEnd::set_host(const ::std::string& value) {
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.iPEnd.Host)
}
#if LANG_CXX11
inline void iPEnd::set_host(::std::string&& value) {
  set_has_host();
  host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.iPEnd.Host)
}
#endif
inline void iPEnd::set_host(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.iPEnd.Host)
}
inline void iPEnd::set_host(const void* value, size_t size) {
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.iPEnd.Host)
}
inline ::std::string* iPEnd::mutable_host() {
  set_has_host();
  // @@protoc_insertion_point(field_mutable:FromCs.iPEnd.Host)
  return host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* iPEnd::release_host() {
  // @@protoc_insertion_point(field_release:FromCs.iPEnd.Host)
  clear_has_host();
  return host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void iPEnd::set_allocated_host(::std::string* host) {
  if (host != NULL) {
    set_has_host();
  } else {
    clear_has_host();
  }
  host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:FromCs.iPEnd.Host)
}

// -------------------------------------------------------------------

// NewMsgResponseBody

// optional int32 Ret = 1;
inline bool NewMsgResponseBody::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NewMsgResponseBody::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NewMsgResponseBody::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NewMsgResponseBody::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 NewMsgResponseBody::ret() const {
  // @@protoc_insertion_point(field_get:FromCs.NewMsgResponseBody.Ret)
  return ret_;
}
inline void NewMsgResponseBody::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:FromCs.NewMsgResponseBody.Ret)
}

// optional .FromCs.sKBuiltinstringT ToUserName = 2;
inline bool NewMsgResponseBody::has_tousername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NewMsgResponseBody::set_has_tousername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NewMsgResponseBody::clear_has_tousername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NewMsgResponseBody::clear_tousername() {
  if (tousername_ != NULL) tousername_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_tousername();
}
inline const ::FromCs::sKBuiltinstringT& NewMsgResponseBody::tousername() const {
  // @@protoc_insertion_point(field_get:FromCs.NewMsgResponseBody.ToUserName)
  return tousername_ != NULL ? *tousername_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* NewMsgResponseBody::mutable_tousername() {
  set_has_tousername();
  if (tousername_ == NULL) {
    tousername_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.NewMsgResponseBody.ToUserName)
  return tousername_;
}
inline ::FromCs::sKBuiltinstringT* NewMsgResponseBody::release_tousername() {
  // @@protoc_insertion_point(field_release:FromCs.NewMsgResponseBody.ToUserName)
  clear_has_tousername();
  ::FromCs::sKBuiltinstringT* temp = tousername_;
  tousername_ = NULL;
  return temp;
}
inline void NewMsgResponseBody::set_allocated_tousername(::FromCs::sKBuiltinstringT* tousername) {
  delete tousername_;
  tousername_ = tousername;
  if (tousername) {
    set_has_tousername();
  } else {
    clear_has_tousername();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewMsgResponseBody.ToUserName)
}

// optional int32 MsgId = 3;
inline bool NewMsgResponseBody::has_msgid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NewMsgResponseBody::set_has_msgid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NewMsgResponseBody::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NewMsgResponseBody::clear_msgid() {
  msgid_ = 0;
  clear_has_msgid();
}
inline ::google::protobuf::int32 NewMsgResponseBody::msgid() const {
  // @@protoc_insertion_point(field_get:FromCs.NewMsgResponseBody.MsgId)
  return msgid_;
}
inline void NewMsgResponseBody::set_msgid(::google::protobuf::int32 value) {
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:FromCs.NewMsgResponseBody.MsgId)
}

// optional int32 ClientMsgId = 4;
inline bool NewMsgResponseBody::has_clientmsgid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NewMsgResponseBody::set_has_clientmsgid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NewMsgResponseBody::clear_has_clientmsgid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NewMsgResponseBody::clear_clientmsgid() {
  clientmsgid_ = 0;
  clear_has_clientmsgid();
}
inline ::google::protobuf::int32 NewMsgResponseBody::clientmsgid() const {
  // @@protoc_insertion_point(field_get:FromCs.NewMsgResponseBody.ClientMsgId)
  return clientmsgid_;
}
inline void NewMsgResponseBody::set_clientmsgid(::google::protobuf::int32 value) {
  set_has_clientmsgid();
  clientmsgid_ = value;
  // @@protoc_insertion_point(field_set:FromCs.NewMsgResponseBody.ClientMsgId)
}

// optional int32 CreateTime = 5;
inline bool NewMsgResponseBody::has_createtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NewMsgResponseBody::set_has_createtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NewMsgResponseBody::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NewMsgResponseBody::clear_createtime() {
  createtime_ = 0;
  clear_has_createtime();
}
inline ::google::protobuf::int32 NewMsgResponseBody::createtime() const {
  // @@protoc_insertion_point(field_get:FromCs.NewMsgResponseBody.CreateTime)
  return createtime_;
}
inline void NewMsgResponseBody::set_createtime(::google::protobuf::int32 value) {
  set_has_createtime();
  createtime_ = value;
  // @@protoc_insertion_point(field_set:FromCs.NewMsgResponseBody.CreateTime)
}

// optional int32 ServerTime = 6;
inline bool NewMsgResponseBody::has_servertime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NewMsgResponseBody::set_has_servertime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NewMsgResponseBody::clear_has_servertime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NewMsgResponseBody::clear_servertime() {
  servertime_ = 0;
  clear_has_servertime();
}
inline ::google::protobuf::int32 NewMsgResponseBody::servertime() const {
  // @@protoc_insertion_point(field_get:FromCs.NewMsgResponseBody.ServerTime)
  return servertime_;
}
inline void NewMsgResponseBody::set_servertime(::google::protobuf::int32 value) {
  set_has_servertime();
  servertime_ = value;
  // @@protoc_insertion_point(field_set:FromCs.NewMsgResponseBody.ServerTime)
}

// optional int32 Type = 7;
inline bool NewMsgResponseBody::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NewMsgResponseBody::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NewMsgResponseBody::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NewMsgResponseBody::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 NewMsgResponseBody::type() const {
  // @@protoc_insertion_point(field_get:FromCs.NewMsgResponseBody.Type)
  return type_;
}
inline void NewMsgResponseBody::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:FromCs.NewMsgResponseBody.Type)
}

// optional int64 NewMsgID = 8;
inline bool NewMsgResponseBody::has_newmsgid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NewMsgResponseBody::set_has_newmsgid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void NewMsgResponseBody::clear_has_newmsgid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void NewMsgResponseBody::clear_newmsgid() {
  newmsgid_ = GOOGLE_LONGLONG(0);
  clear_has_newmsgid();
}
inline ::google::protobuf::int64 NewMsgResponseBody::newmsgid() const {
  // @@protoc_insertion_point(field_get:FromCs.NewMsgResponseBody.NewMsgID)
  return newmsgid_;
}
inline void NewMsgResponseBody::set_newmsgid(::google::protobuf::int64 value) {
  set_has_newmsgid();
  newmsgid_ = value;
  // @@protoc_insertion_point(field_set:FromCs.NewMsgResponseBody.NewMsgID)
}

// -------------------------------------------------------------------

// NewMsgRequestBody

// optional .FromCs.sKBuiltinstringT ToUserName = 1;
inline bool NewMsgRequestBody::has_tousername() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NewMsgRequestBody::set_has_tousername() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NewMsgRequestBody::clear_has_tousername() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NewMsgRequestBody::clear_tousername() {
  if (tousername_ != NULL) tousername_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_tousername();
}
inline const ::FromCs::sKBuiltinstringT& NewMsgRequestBody::tousername() const {
  // @@protoc_insertion_point(field_get:FromCs.NewMsgRequestBody.ToUserName)
  return tousername_ != NULL ? *tousername_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* NewMsgRequestBody::mutable_tousername() {
  set_has_tousername();
  if (tousername_ == NULL) {
    tousername_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.NewMsgRequestBody.ToUserName)
  return tousername_;
}
inline ::FromCs::sKBuiltinstringT* NewMsgRequestBody::release_tousername() {
  // @@protoc_insertion_point(field_release:FromCs.NewMsgRequestBody.ToUserName)
  clear_has_tousername();
  ::FromCs::sKBuiltinstringT* temp = tousername_;
  tousername_ = NULL;
  return temp;
}
inline void NewMsgRequestBody::set_allocated_tousername(::FromCs::sKBuiltinstringT* tousername) {
  delete tousername_;
  tousername_ = tousername;
  if (tousername) {
    set_has_tousername();
  } else {
    clear_has_tousername();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewMsgRequestBody.ToUserName)
}

// optional string Content = 2;
inline bool NewMsgRequestBody::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NewMsgRequestBody::set_has_content() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NewMsgRequestBody::clear_has_content() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NewMsgRequestBody::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
inline const ::std::string& NewMsgRequestBody::content() const {
  // @@protoc_insertion_point(field_get:FromCs.NewMsgRequestBody.Content)
  return content_.GetNoArena();
}
inline void NewMsgRequestBody::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.NewMsgRequestBody.Content)
}
#if LANG_CXX11
inline void NewMsgRequestBody::set_content(::std::string&& value) {
  set_has_content();
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.NewMsgRequestBody.Content)
}
#endif
inline void NewMsgRequestBody::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.NewMsgRequestBody.Content)
}
inline void NewMsgRequestBody::set_content(const char* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.NewMsgRequestBody.Content)
}
inline ::std::string* NewMsgRequestBody::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:FromCs.NewMsgRequestBody.Content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewMsgRequestBody::release_content() {
  // @@protoc_insertion_point(field_release:FromCs.NewMsgRequestBody.Content)
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewMsgRequestBody::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewMsgRequestBody.Content)
}

// optional int32 Type = 3;
inline bool NewMsgRequestBody::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NewMsgRequestBody::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NewMsgRequestBody::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NewMsgRequestBody::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 NewMsgRequestBody::type() const {
  // @@protoc_insertion_point(field_get:FromCs.NewMsgRequestBody.Type)
  return type_;
}
inline void NewMsgRequestBody::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:FromCs.NewMsgRequestBody.Type)
}

// optional int32 CreateTime = 4;
inline bool NewMsgRequestBody::has_createtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NewMsgRequestBody::set_has_createtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NewMsgRequestBody::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NewMsgRequestBody::clear_createtime() {
  createtime_ = 0;
  clear_has_createtime();
}
inline ::google::protobuf::int32 NewMsgRequestBody::createtime() const {
  // @@protoc_insertion_point(field_get:FromCs.NewMsgRequestBody.CreateTime)
  return createtime_;
}
inline void NewMsgRequestBody::set_createtime(::google::protobuf::int32 value) {
  set_has_createtime();
  createtime_ = value;
  // @@protoc_insertion_point(field_set:FromCs.NewMsgRequestBody.CreateTime)
}

// optional int32 ClientMsgId = 5;
inline bool NewMsgRequestBody::has_clientmsgid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NewMsgRequestBody::set_has_clientmsgid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NewMsgRequestBody::clear_has_clientmsgid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NewMsgRequestBody::clear_clientmsgid() {
  clientmsgid_ = 0;
  clear_has_clientmsgid();
}
inline ::google::protobuf::int32 NewMsgRequestBody::clientmsgid() const {
  // @@protoc_insertion_point(field_get:FromCs.NewMsgRequestBody.ClientMsgId)
  return clientmsgid_;
}
inline void NewMsgRequestBody::set_clientmsgid(::google::protobuf::int32 value) {
  set_has_clientmsgid();
  clientmsgid_ = value;
  // @@protoc_insertion_point(field_set:FromCs.NewMsgRequestBody.ClientMsgId)
}

// optional string MsgSource = 6;
inline bool NewMsgRequestBody::has_msgsource() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NewMsgRequestBody::set_has_msgsource() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NewMsgRequestBody::clear_has_msgsource() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NewMsgRequestBody::clear_msgsource() {
  msgsource_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msgsource();
}
inline const ::std::string& NewMsgRequestBody::msgsource() const {
  // @@protoc_insertion_point(field_get:FromCs.NewMsgRequestBody.MsgSource)
  return msgsource_.GetNoArena();
}
inline void NewMsgRequestBody::set_msgsource(const ::std::string& value) {
  set_has_msgsource();
  msgsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.NewMsgRequestBody.MsgSource)
}
#if LANG_CXX11
inline void NewMsgRequestBody::set_msgsource(::std::string&& value) {
  set_has_msgsource();
  msgsource_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.NewMsgRequestBody.MsgSource)
}
#endif
inline void NewMsgRequestBody::set_msgsource(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msgsource();
  msgsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.NewMsgRequestBody.MsgSource)
}
inline void NewMsgRequestBody::set_msgsource(const char* value, size_t size) {
  set_has_msgsource();
  msgsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.NewMsgRequestBody.MsgSource)
}
inline ::std::string* NewMsgRequestBody::mutable_msgsource() {
  set_has_msgsource();
  // @@protoc_insertion_point(field_mutable:FromCs.NewMsgRequestBody.MsgSource)
  return msgsource_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewMsgRequestBody::release_msgsource() {
  // @@protoc_insertion_point(field_release:FromCs.NewMsgRequestBody.MsgSource)
  clear_has_msgsource();
  return msgsource_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewMsgRequestBody::set_allocated_msgsource(::std::string* msgsource) {
  if (msgsource != NULL) {
    set_has_msgsource();
  } else {
    clear_has_msgsource();
  }
  msgsource_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgsource);
  // @@protoc_insertion_point(field_set_allocated:FromCs.NewMsgRequestBody.MsgSource)
}

// optional int32 CtrlBit = 7;
inline bool NewMsgRequestBody::has_ctrlbit() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NewMsgRequestBody::set_has_ctrlbit() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NewMsgRequestBody::clear_has_ctrlbit() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NewMsgRequestBody::clear_ctrlbit() {
  ctrlbit_ = 0;
  clear_has_ctrlbit();
}
inline ::google::protobuf::int32 NewMsgRequestBody::ctrlbit() const {
  // @@protoc_insertion_point(field_get:FromCs.NewMsgRequestBody.CtrlBit)
  return ctrlbit_;
}
inline void NewMsgRequestBody::set_ctrlbit(::google::protobuf::int32 value) {
  set_has_ctrlbit();
  ctrlbit_ = value;
  // @@protoc_insertion_point(field_set:FromCs.NewMsgRequestBody.CtrlBit)
}

// -------------------------------------------------------------------

// MsgResponseBody

// optional int32 Ret = 1;
inline bool MsgResponseBody::has_ret() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgResponseBody::set_has_ret() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgResponseBody::clear_has_ret() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgResponseBody::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 MsgResponseBody::ret() const {
  // @@protoc_insertion_point(field_get:FromCs.MsgResponseBody.Ret)
  return ret_;
}
inline void MsgResponseBody::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:FromCs.MsgResponseBody.Ret)
}

// optional .FromCs.sKBuiltinstringT FromUserName = 2;
inline bool MsgResponseBody::has_fromusername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgResponseBody::set_has_fromusername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgResponseBody::clear_has_fromusername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgResponseBody::clear_fromusername() {
  if (fromusername_ != NULL) fromusername_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_fromusername();
}
inline const ::FromCs::sKBuiltinstringT& MsgResponseBody::fromusername() const {
  // @@protoc_insertion_point(field_get:FromCs.MsgResponseBody.FromUserName)
  return fromusername_ != NULL ? *fromusername_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* MsgResponseBody::mutable_fromusername() {
  set_has_fromusername();
  if (fromusername_ == NULL) {
    fromusername_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.MsgResponseBody.FromUserName)
  return fromusername_;
}
inline ::FromCs::sKBuiltinstringT* MsgResponseBody::release_fromusername() {
  // @@protoc_insertion_point(field_release:FromCs.MsgResponseBody.FromUserName)
  clear_has_fromusername();
  ::FromCs::sKBuiltinstringT* temp = fromusername_;
  fromusername_ = NULL;
  return temp;
}
inline void MsgResponseBody::set_allocated_fromusername(::FromCs::sKBuiltinstringT* fromusername) {
  delete fromusername_;
  fromusername_ = fromusername;
  if (fromusername) {
    set_has_fromusername();
  } else {
    clear_has_fromusername();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.MsgResponseBody.FromUserName)
}

// optional .FromCs.sKBuiltinstringT ToUserName = 3;
inline bool MsgResponseBody::has_tousername() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgResponseBody::set_has_tousername() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgResponseBody::clear_has_tousername() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgResponseBody::clear_tousername() {
  if (tousername_ != NULL) tousername_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_tousername();
}
inline const ::FromCs::sKBuiltinstringT& MsgResponseBody::tousername() const {
  // @@protoc_insertion_point(field_get:FromCs.MsgResponseBody.ToUserName)
  return tousername_ != NULL ? *tousername_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* MsgResponseBody::mutable_tousername() {
  set_has_tousername();
  if (tousername_ == NULL) {
    tousername_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.MsgResponseBody.ToUserName)
  return tousername_;
}
inline ::FromCs::sKBuiltinstringT* MsgResponseBody::release_tousername() {
  // @@protoc_insertion_point(field_release:FromCs.MsgResponseBody.ToUserName)
  clear_has_tousername();
  ::FromCs::sKBuiltinstringT* temp = tousername_;
  tousername_ = NULL;
  return temp;
}
inline void MsgResponseBody::set_allocated_tousername(::FromCs::sKBuiltinstringT* tousername) {
  delete tousername_;
  tousername_ = tousername;
  if (tousername) {
    set_has_tousername();
  } else {
    clear_has_tousername();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.MsgResponseBody.ToUserName)
}

// optional int32 MsgId = 4;
inline bool MsgResponseBody::has_msgid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MsgResponseBody::set_has_msgid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MsgResponseBody::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MsgResponseBody::clear_msgid() {
  msgid_ = 0;
  clear_has_msgid();
}
inline ::google::protobuf::int32 MsgResponseBody::msgid() const {
  // @@protoc_insertion_point(field_get:FromCs.MsgResponseBody.MsgId)
  return msgid_;
}
inline void MsgResponseBody::set_msgid(::google::protobuf::int32 value) {
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:FromCs.MsgResponseBody.MsgId)
}

// optional string ClientMsgId = 5;
inline bool MsgResponseBody::has_clientmsgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgResponseBody::set_has_clientmsgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgResponseBody::clear_has_clientmsgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgResponseBody::clear_clientmsgid() {
  clientmsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientmsgid();
}
inline const ::std::string& MsgResponseBody::clientmsgid() const {
  // @@protoc_insertion_point(field_get:FromCs.MsgResponseBody.ClientMsgId)
  return clientmsgid_.GetNoArena();
}
inline void MsgResponseBody::set_clientmsgid(const ::std::string& value) {
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.MsgResponseBody.ClientMsgId)
}
#if LANG_CXX11
inline void MsgResponseBody::set_clientmsgid(::std::string&& value) {
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.MsgResponseBody.ClientMsgId)
}
#endif
inline void MsgResponseBody::set_clientmsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.MsgResponseBody.ClientMsgId)
}
inline void MsgResponseBody::set_clientmsgid(const char* value, size_t size) {
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.MsgResponseBody.ClientMsgId)
}
inline ::std::string* MsgResponseBody::mutable_clientmsgid() {
  set_has_clientmsgid();
  // @@protoc_insertion_point(field_mutable:FromCs.MsgResponseBody.ClientMsgId)
  return clientmsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MsgResponseBody::release_clientmsgid() {
  // @@protoc_insertion_point(field_release:FromCs.MsgResponseBody.ClientMsgId)
  clear_has_clientmsgid();
  return clientmsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MsgResponseBody::set_allocated_clientmsgid(::std::string* clientmsgid) {
  if (clientmsgid != NULL) {
    set_has_clientmsgid();
  } else {
    clear_has_clientmsgid();
  }
  clientmsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientmsgid);
  // @@protoc_insertion_point(field_set_allocated:FromCs.MsgResponseBody.ClientMsgId)
}

// optional int32 CreateTime = 6;
inline bool MsgResponseBody::has_createtime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MsgResponseBody::set_has_createtime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MsgResponseBody::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MsgResponseBody::clear_createtime() {
  createtime_ = 0;
  clear_has_createtime();
}
inline ::google::protobuf::int32 MsgResponseBody::createtime() const {
  // @@protoc_insertion_point(field_get:FromCs.MsgResponseBody.CreateTime)
  return createtime_;
}
inline void MsgResponseBody::set_createtime(::google::protobuf::int32 value) {
  set_has_createtime();
  createtime_ = value;
  // @@protoc_insertion_point(field_set:FromCs.MsgResponseBody.CreateTime)
}

// optional int32 Type = 7;
inline bool MsgResponseBody::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MsgResponseBody::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MsgResponseBody::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MsgResponseBody::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 MsgResponseBody::type() const {
  // @@protoc_insertion_point(field_get:FromCs.MsgResponseBody.Type)
  return type_;
}
inline void MsgResponseBody::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:FromCs.MsgResponseBody.Type)
}

// -------------------------------------------------------------------

// MsgRequestBody

// optional .FromCs.sKBuiltinstringT FromUserName = 1;
inline bool MsgRequestBody::has_fromusername() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgRequestBody::set_has_fromusername() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgRequestBody::clear_has_fromusername() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgRequestBody::clear_fromusername() {
  if (fromusername_ != NULL) fromusername_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_fromusername();
}
inline const ::FromCs::sKBuiltinstringT& MsgRequestBody::fromusername() const {
  // @@protoc_insertion_point(field_get:FromCs.MsgRequestBody.FromUserName)
  return fromusername_ != NULL ? *fromusername_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* MsgRequestBody::mutable_fromusername() {
  set_has_fromusername();
  if (fromusername_ == NULL) {
    fromusername_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.MsgRequestBody.FromUserName)
  return fromusername_;
}
inline ::FromCs::sKBuiltinstringT* MsgRequestBody::release_fromusername() {
  // @@protoc_insertion_point(field_release:FromCs.MsgRequestBody.FromUserName)
  clear_has_fromusername();
  ::FromCs::sKBuiltinstringT* temp = fromusername_;
  fromusername_ = NULL;
  return temp;
}
inline void MsgRequestBody::set_allocated_fromusername(::FromCs::sKBuiltinstringT* fromusername) {
  delete fromusername_;
  fromusername_ = fromusername;
  if (fromusername) {
    set_has_fromusername();
  } else {
    clear_has_fromusername();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.MsgRequestBody.FromUserName)
}

// optional .FromCs.sKBuiltinstringT ToUserName = 2;
inline bool MsgRequestBody::has_tousername() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MsgRequestBody::set_has_tousername() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MsgRequestBody::clear_has_tousername() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MsgRequestBody::clear_tousername() {
  if (tousername_ != NULL) tousername_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_tousername();
}
inline const ::FromCs::sKBuiltinstringT& MsgRequestBody::tousername() const {
  // @@protoc_insertion_point(field_get:FromCs.MsgRequestBody.ToUserName)
  return tousername_ != NULL ? *tousername_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* MsgRequestBody::mutable_tousername() {
  set_has_tousername();
  if (tousername_ == NULL) {
    tousername_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.MsgRequestBody.ToUserName)
  return tousername_;
}
inline ::FromCs::sKBuiltinstringT* MsgRequestBody::release_tousername() {
  // @@protoc_insertion_point(field_release:FromCs.MsgRequestBody.ToUserName)
  clear_has_tousername();
  ::FromCs::sKBuiltinstringT* temp = tousername_;
  tousername_ = NULL;
  return temp;
}
inline void MsgRequestBody::set_allocated_tousername(::FromCs::sKBuiltinstringT* tousername) {
  delete tousername_;
  tousername_ = tousername;
  if (tousername) {
    set_has_tousername();
  } else {
    clear_has_tousername();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.MsgRequestBody.ToUserName)
}

// optional int32 Type = 3;
inline bool MsgRequestBody::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MsgRequestBody::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MsgRequestBody::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MsgRequestBody::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 MsgRequestBody::type() const {
  // @@protoc_insertion_point(field_get:FromCs.MsgRequestBody.Type)
  return type_;
}
inline void MsgRequestBody::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:FromCs.MsgRequestBody.Type)
}

// optional string Content = 4;
inline bool MsgRequestBody::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgRequestBody::set_has_content() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgRequestBody::clear_has_content() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgRequestBody::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
inline const ::std::string& MsgRequestBody::content() const {
  // @@protoc_insertion_point(field_get:FromCs.MsgRequestBody.Content)
  return content_.GetNoArena();
}
inline void MsgRequestBody::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.MsgRequestBody.Content)
}
#if LANG_CXX11
inline void MsgRequestBody::set_content(::std::string&& value) {
  set_has_content();
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.MsgRequestBody.Content)
}
#endif
inline void MsgRequestBody::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.MsgRequestBody.Content)
}
inline void MsgRequestBody::set_content(const char* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.MsgRequestBody.Content)
}
inline ::std::string* MsgRequestBody::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:FromCs.MsgRequestBody.Content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MsgRequestBody::release_content() {
  // @@protoc_insertion_point(field_release:FromCs.MsgRequestBody.Content)
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MsgRequestBody::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:FromCs.MsgRequestBody.Content)
}

// optional int32 CreateTime = 5;
inline bool MsgRequestBody::has_createtime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MsgRequestBody::set_has_createtime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MsgRequestBody::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MsgRequestBody::clear_createtime() {
  createtime_ = 0;
  clear_has_createtime();
}
inline ::google::protobuf::int32 MsgRequestBody::createtime() const {
  // @@protoc_insertion_point(field_get:FromCs.MsgRequestBody.CreateTime)
  return createtime_;
}
inline void MsgRequestBody::set_createtime(::google::protobuf::int32 value) {
  set_has_createtime();
  createtime_ = value;
  // @@protoc_insertion_point(field_set:FromCs.MsgRequestBody.CreateTime)
}

// optional string ClientMsgId = 6;
inline bool MsgRequestBody::has_clientmsgid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgRequestBody::set_has_clientmsgid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgRequestBody::clear_has_clientmsgid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgRequestBody::clear_clientmsgid() {
  clientmsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientmsgid();
}
inline const ::std::string& MsgRequestBody::clientmsgid() const {
  // @@protoc_insertion_point(field_get:FromCs.MsgRequestBody.ClientMsgId)
  return clientmsgid_.GetNoArena();
}
inline void MsgRequestBody::set_clientmsgid(const ::std::string& value) {
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.MsgRequestBody.ClientMsgId)
}
#if LANG_CXX11
inline void MsgRequestBody::set_clientmsgid(::std::string&& value) {
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.MsgRequestBody.ClientMsgId)
}
#endif
inline void MsgRequestBody::set_clientmsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.MsgRequestBody.ClientMsgId)
}
inline void MsgRequestBody::set_clientmsgid(const char* value, size_t size) {
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.MsgRequestBody.ClientMsgId)
}
inline ::std::string* MsgRequestBody::mutable_clientmsgid() {
  set_has_clientmsgid();
  // @@protoc_insertion_point(field_mutable:FromCs.MsgRequestBody.ClientMsgId)
  return clientmsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MsgRequestBody::release_clientmsgid() {
  // @@protoc_insertion_point(field_release:FromCs.MsgRequestBody.ClientMsgId)
  clear_has_clientmsgid();
  return clientmsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MsgRequestBody::set_allocated_clientmsgid(::std::string* clientmsgid) {
  if (clientmsgid != NULL) {
    set_has_clientmsgid();
  } else {
    clear_has_clientmsgid();
  }
  clientmsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientmsgid);
  // @@protoc_insertion_point(field_set_allocated:FromCs.MsgRequestBody.ClientMsgId)
}

// optional string MsgSource = 7;
inline bool MsgRequestBody::has_msgsource() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgRequestBody::set_has_msgsource() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgRequestBody::clear_has_msgsource() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgRequestBody::clear_msgsource() {
  msgsource_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msgsource();
}
inline const ::std::string& MsgRequestBody::msgsource() const {
  // @@protoc_insertion_point(field_get:FromCs.MsgRequestBody.MsgSource)
  return msgsource_.GetNoArena();
}
inline void MsgRequestBody::set_msgsource(const ::std::string& value) {
  set_has_msgsource();
  msgsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.MsgRequestBody.MsgSource)
}
#if LANG_CXX11
inline void MsgRequestBody::set_msgsource(::std::string&& value) {
  set_has_msgsource();
  msgsource_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.MsgRequestBody.MsgSource)
}
#endif
inline void MsgRequestBody::set_msgsource(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msgsource();
  msgsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.MsgRequestBody.MsgSource)
}
inline void MsgRequestBody::set_msgsource(const char* value, size_t size) {
  set_has_msgsource();
  msgsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.MsgRequestBody.MsgSource)
}
inline ::std::string* MsgRequestBody::mutable_msgsource() {
  set_has_msgsource();
  // @@protoc_insertion_point(field_mutable:FromCs.MsgRequestBody.MsgSource)
  return msgsource_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MsgRequestBody::release_msgsource() {
  // @@protoc_insertion_point(field_release:FromCs.MsgRequestBody.MsgSource)
  clear_has_msgsource();
  return msgsource_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MsgRequestBody::set_allocated_msgsource(::std::string* msgsource) {
  if (msgsource != NULL) {
    set_has_msgsource();
  } else {
    clear_has_msgsource();
  }
  msgsource_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgsource);
  // @@protoc_insertion_point(field_set_allocated:FromCs.MsgRequestBody.MsgSource)
}

// optional int32 EmojiFlag = 8;
inline bool MsgRequestBody::has_emojiflag() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MsgRequestBody::set_has_emojiflag() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MsgRequestBody::clear_has_emojiflag() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MsgRequestBody::clear_emojiflag() {
  emojiflag_ = 0;
  clear_has_emojiflag();
}
inline ::google::protobuf::int32 MsgRequestBody::emojiflag() const {
  // @@protoc_insertion_point(field_get:FromCs.MsgRequestBody.EmojiFlag)
  return emojiflag_;
}
inline void MsgRequestBody::set_emojiflag(::google::protobuf::int32 value) {
  set_has_emojiflag();
  emojiflag_ = value;
  // @@protoc_insertion_point(field_set:FromCs.MsgRequestBody.EmojiFlag)
}

// -------------------------------------------------------------------

// CmdList

// optional int32 Count = 1;
inline bool CmdList::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdList::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdList::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdList::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 CmdList::count() const {
  // @@protoc_insertion_point(field_get:FromCs.CmdList.Count)
  return count_;
}
inline void CmdList::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:FromCs.CmdList.Count)
}

// optional .FromCs.sKBuiltinstringT list_ = 2;
inline bool CmdList::has_list_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdList::set_has_list_() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdList::clear_has_list_() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdList::clear_list_() {
  if (list__ != NULL) list__->::FromCs::sKBuiltinstringT::Clear();
  clear_has_list_();
}
inline const ::FromCs::sKBuiltinstringT& CmdList::list_() const {
  // @@protoc_insertion_point(field_get:FromCs.CmdList.list_)
  return list__ != NULL ? *list__
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* CmdList::mutable_list_() {
  set_has_list_();
  if (list__ == NULL) {
    list__ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.CmdList.list_)
  return list__;
}
inline ::FromCs::sKBuiltinstringT* CmdList::release_list_() {
  // @@protoc_insertion_point(field_release:FromCs.CmdList.list_)
  clear_has_list_();
  ::FromCs::sKBuiltinstringT* temp = list__;
  list__ = NULL;
  return temp;
}
inline void CmdList::set_allocated_list_(::FromCs::sKBuiltinstringT* list_) {
  delete list__;
  list__ = list_;
  if (list_) {
    set_has_list_();
  } else {
    clear_has_list_();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.CmdList.list_)
}

// -------------------------------------------------------------------

// SyncKey

// optional int32 KeyNumb = 1;
inline bool SyncKey::has_keynumb() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SyncKey::set_has_keynumb() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SyncKey::clear_has_keynumb() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SyncKey::clear_keynumb() {
  keynumb_ = 0;
  clear_has_keynumb();
}
inline ::google::protobuf::int32 SyncKey::keynumb() const {
  // @@protoc_insertion_point(field_get:FromCs.SyncKey.KeyNumb)
  return keynumb_;
}
inline void SyncKey::set_keynumb(::google::protobuf::int32 value) {
  set_has_keynumb();
  keynumb_ = value;
  // @@protoc_insertion_point(field_set:FromCs.SyncKey.KeyNumb)
}

// optional .FromCs.sKBuiltinstringT key_ = 2;
inline bool SyncKey::has_key_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SyncKey::set_has_key_() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SyncKey::clear_has_key_() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SyncKey::clear_key_() {
  if (key__ != NULL) key__->::FromCs::sKBuiltinstringT::Clear();
  clear_has_key_();
}
inline const ::FromCs::sKBuiltinstringT& SyncKey::key_() const {
  // @@protoc_insertion_point(field_get:FromCs.SyncKey.key_)
  return key__ != NULL ? *key__
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* SyncKey::mutable_key_() {
  set_has_key_();
  if (key__ == NULL) {
    key__ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.SyncKey.key_)
  return key__;
}
inline ::FromCs::sKBuiltinstringT* SyncKey::release_key_() {
  // @@protoc_insertion_point(field_release:FromCs.SyncKey.key_)
  clear_has_key_();
  ::FromCs::sKBuiltinstringT* temp = key__;
  key__ = NULL;
  return temp;
}
inline void SyncKey::set_allocated_key_(::FromCs::sKBuiltinstringT* key_) {
  delete key__;
  key__ = key_;
  if (key_) {
    set_has_key_();
  } else {
    clear_has_key_();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.SyncKey.key_)
}

// -------------------------------------------------------------------

// keyValPair

// optional int32 Key = 1;
inline bool keyValPair::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void keyValPair::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void keyValPair::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void keyValPair::clear_key() {
  key_ = 0;
  clear_has_key();
}
inline ::google::protobuf::int32 keyValPair::key() const {
  // @@protoc_insertion_point(field_get:FromCs.keyValPair.Key)
  return key_;
}
inline void keyValPair::set_key(::google::protobuf::int32 value) {
  set_has_key();
  key_ = value;
  // @@protoc_insertion_point(field_set:FromCs.keyValPair.Key)
}

// optional int32 Val = 2;
inline bool keyValPair::has_val() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void keyValPair::set_has_val() {
  _has_bits_[0] |= 0x00000002u;
}
inline void keyValPair::clear_has_val() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void keyValPair::clear_val() {
  val_ = 0;
  clear_has_val();
}
inline ::google::protobuf::int32 keyValPair::val() const {
  // @@protoc_insertion_point(field_get:FromCs.keyValPair.Val)
  return val_;
}
inline void keyValPair::set_val(::google::protobuf::int32 value) {
  set_has_val();
  val_ = value;
  // @@protoc_insertion_point(field_set:FromCs.keyValPair.Val)
}

// -------------------------------------------------------------------

// CmdItem

// optional int32 CmdId = 1;
inline bool CmdItem::has_cmdid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdItem::set_has_cmdid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdItem::clear_has_cmdid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdItem::clear_cmdid() {
  cmdid_ = 0;
  clear_has_cmdid();
}
inline ::google::protobuf::int32 CmdItem::cmdid() const {
  // @@protoc_insertion_point(field_get:FromCs.CmdItem.CmdId)
  return cmdid_;
}
inline void CmdItem::set_cmdid(::google::protobuf::int32 value) {
  set_has_cmdid();
  cmdid_ = value;
  // @@protoc_insertion_point(field_set:FromCs.CmdItem.CmdId)
}

// optional .FromCs.sKBuiltinstringT CmdBuf = 2;
inline bool CmdItem::has_cmdbuf() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdItem::set_has_cmdbuf() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdItem::clear_has_cmdbuf() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdItem::clear_cmdbuf() {
  if (cmdbuf_ != NULL) cmdbuf_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_cmdbuf();
}
inline const ::FromCs::sKBuiltinstringT& CmdItem::cmdbuf() const {
  // @@protoc_insertion_point(field_get:FromCs.CmdItem.CmdBuf)
  return cmdbuf_ != NULL ? *cmdbuf_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* CmdItem::mutable_cmdbuf() {
  set_has_cmdbuf();
  if (cmdbuf_ == NULL) {
    cmdbuf_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.CmdItem.CmdBuf)
  return cmdbuf_;
}
inline ::FromCs::sKBuiltinstringT* CmdItem::release_cmdbuf() {
  // @@protoc_insertion_point(field_release:FromCs.CmdItem.CmdBuf)
  clear_has_cmdbuf();
  ::FromCs::sKBuiltinstringT* temp = cmdbuf_;
  cmdbuf_ = NULL;
  return temp;
}
inline void CmdItem::set_allocated_cmdbuf(::FromCs::sKBuiltinstringT* cmdbuf) {
  delete cmdbuf_;
  cmdbuf_ = cmdbuf;
  if (cmdbuf) {
    set_has_cmdbuf();
  } else {
    clear_has_cmdbuf();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.CmdItem.CmdBuf)
}

// -------------------------------------------------------------------

// ParsePacket

// -------------------------------------------------------------------

// ContactObject

// optional string UserName = 1;
inline bool ContactObject::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContactObject::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ContactObject::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ContactObject::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& ContactObject::username() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactObject.UserName)
  return username_.GetNoArena();
}
inline void ContactObject::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ContactObject.UserName)
}
#if LANG_CXX11
inline void ContactObject::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ContactObject.UserName)
}
#endif
inline void ContactObject::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ContactObject.UserName)
}
inline void ContactObject::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ContactObject.UserName)
}
inline ::std::string* ContactObject::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:FromCs.ContactObject.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactObject::release_username() {
  // @@protoc_insertion_point(field_release:FromCs.ContactObject.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactObject::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ContactObject.UserName)
}

// optional string NickName = 2;
inline bool ContactObject::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ContactObject::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ContactObject::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ContactObject::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
inline const ::std::string& ContactObject::nickname() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactObject.NickName)
  return nickname_.GetNoArena();
}
inline void ContactObject::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ContactObject.NickName)
}
#if LANG_CXX11
inline void ContactObject::set_nickname(::std::string&& value) {
  set_has_nickname();
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ContactObject.NickName)
}
#endif
inline void ContactObject::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ContactObject.NickName)
}
inline void ContactObject::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ContactObject.NickName)
}
inline ::std::string* ContactObject::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:FromCs.ContactObject.NickName)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactObject::release_nickname() {
  // @@protoc_insertion_point(field_release:FromCs.ContactObject.NickName)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactObject::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ContactObject.NickName)
}

// optional string Province = 3;
inline bool ContactObject::has_province() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ContactObject::set_has_province() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ContactObject::clear_has_province() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ContactObject::clear_province() {
  province_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_province();
}
inline const ::std::string& ContactObject::province() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactObject.Province)
  return province_.GetNoArena();
}
inline void ContactObject::set_province(const ::std::string& value) {
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ContactObject.Province)
}
#if LANG_CXX11
inline void ContactObject::set_province(::std::string&& value) {
  set_has_province();
  province_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ContactObject.Province)
}
#endif
inline void ContactObject::set_province(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ContactObject.Province)
}
inline void ContactObject::set_province(const char* value, size_t size) {
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ContactObject.Province)
}
inline ::std::string* ContactObject::mutable_province() {
  set_has_province();
  // @@protoc_insertion_point(field_mutable:FromCs.ContactObject.Province)
  return province_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactObject::release_province() {
  // @@protoc_insertion_point(field_release:FromCs.ContactObject.Province)
  clear_has_province();
  return province_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactObject::set_allocated_province(::std::string* province) {
  if (province != NULL) {
    set_has_province();
  } else {
    clear_has_province();
  }
  province_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), province);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ContactObject.Province)
}

// optional string City = 4;
inline bool ContactObject::has_city() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ContactObject::set_has_city() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ContactObject::clear_has_city() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ContactObject::clear_city() {
  city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_city();
}
inline const ::std::string& ContactObject::city() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactObject.City)
  return city_.GetNoArena();
}
inline void ContactObject::set_city(const ::std::string& value) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ContactObject.City)
}
#if LANG_CXX11
inline void ContactObject::set_city(::std::string&& value) {
  set_has_city();
  city_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ContactObject.City)
}
#endif
inline void ContactObject::set_city(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ContactObject.City)
}
inline void ContactObject::set_city(const char* value, size_t size) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ContactObject.City)
}
inline ::std::string* ContactObject::mutable_city() {
  set_has_city();
  // @@protoc_insertion_point(field_mutable:FromCs.ContactObject.City)
  return city_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactObject::release_city() {
  // @@protoc_insertion_point(field_release:FromCs.ContactObject.City)
  clear_has_city();
  return city_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactObject::set_allocated_city(::std::string* city) {
  if (city != NULL) {
    set_has_city();
  } else {
    clear_has_city();
  }
  city_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ContactObject.City)
}

// optional string Signature = 5;
inline bool ContactObject::has_signature() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ContactObject::set_has_signature() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ContactObject::clear_has_signature() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ContactObject::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_signature();
}
inline const ::std::string& ContactObject::signature() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactObject.Signature)
  return signature_.GetNoArena();
}
inline void ContactObject::set_signature(const ::std::string& value) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ContactObject.Signature)
}
#if LANG_CXX11
inline void ContactObject::set_signature(::std::string&& value) {
  set_has_signature();
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ContactObject.Signature)
}
#endif
inline void ContactObject::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ContactObject.Signature)
}
inline void ContactObject::set_signature(const char* value, size_t size) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ContactObject.Signature)
}
inline ::std::string* ContactObject::mutable_signature() {
  set_has_signature();
  // @@protoc_insertion_point(field_mutable:FromCs.ContactObject.Signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactObject::release_signature() {
  // @@protoc_insertion_point(field_release:FromCs.ContactObject.Signature)
  clear_has_signature();
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactObject::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ContactObject.Signature)
}

// optional string Distance = 6;
inline bool ContactObject::has_distance() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ContactObject::set_has_distance() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ContactObject::clear_has_distance() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ContactObject::clear_distance() {
  distance_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_distance();
}
inline const ::std::string& ContactObject::distance() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactObject.Distance)
  return distance_.GetNoArena();
}
inline void ContactObject::set_distance(const ::std::string& value) {
  set_has_distance();
  distance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ContactObject.Distance)
}
#if LANG_CXX11
inline void ContactObject::set_distance(::std::string&& value) {
  set_has_distance();
  distance_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ContactObject.Distance)
}
#endif
inline void ContactObject::set_distance(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_distance();
  distance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ContactObject.Distance)
}
inline void ContactObject::set_distance(const char* value, size_t size) {
  set_has_distance();
  distance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ContactObject.Distance)
}
inline ::std::string* ContactObject::mutable_distance() {
  set_has_distance();
  // @@protoc_insertion_point(field_mutable:FromCs.ContactObject.Distance)
  return distance_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactObject::release_distance() {
  // @@protoc_insertion_point(field_release:FromCs.ContactObject.Distance)
  clear_has_distance();
  return distance_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactObject::set_allocated_distance(::std::string* distance) {
  if (distance != NULL) {
    set_has_distance();
  } else {
    clear_has_distance();
  }
  distance_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), distance);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ContactObject.Distance)
}

// optional int32 Sex = 7;
inline bool ContactObject::has_sex() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ContactObject::set_has_sex() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ContactObject::clear_has_sex() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ContactObject::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 ContactObject::sex() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactObject.Sex)
  return sex_;
}
inline void ContactObject::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ContactObject.Sex)
}

// optional int32 ImgStatus = 8;
inline bool ContactObject::has_imgstatus() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ContactObject::set_has_imgstatus() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ContactObject::clear_has_imgstatus() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ContactObject::clear_imgstatus() {
  imgstatus_ = 0;
  clear_has_imgstatus();
}
inline ::google::protobuf::int32 ContactObject::imgstatus() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactObject.ImgStatus)
  return imgstatus_;
}
inline void ContactObject::set_imgstatus(::google::protobuf::int32 value) {
  set_has_imgstatus();
  imgstatus_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ContactObject.ImgStatus)
}

// optional int32 VerifyFlag = 9;
inline bool ContactObject::has_verifyflag() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ContactObject::set_has_verifyflag() {
  _has_bits_[0] |= 0x00100000u;
}
inline void ContactObject::clear_has_verifyflag() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void ContactObject::clear_verifyflag() {
  verifyflag_ = 0;
  clear_has_verifyflag();
}
inline ::google::protobuf::int32 ContactObject::verifyflag() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactObject.VerifyFlag)
  return verifyflag_;
}
inline void ContactObject::set_verifyflag(::google::protobuf::int32 value) {
  set_has_verifyflag();
  verifyflag_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ContactObject.VerifyFlag)
}

// optional string VerifyInfo = 10;
inline bool ContactObject::has_verifyinfo() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ContactObject::set_has_verifyinfo() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ContactObject::clear_has_verifyinfo() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ContactObject::clear_verifyinfo() {
  verifyinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_verifyinfo();
}
inline const ::std::string& ContactObject::verifyinfo() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactObject.VerifyInfo)
  return verifyinfo_.GetNoArena();
}
inline void ContactObject::set_verifyinfo(const ::std::string& value) {
  set_has_verifyinfo();
  verifyinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ContactObject.VerifyInfo)
}
#if LANG_CXX11
inline void ContactObject::set_verifyinfo(::std::string&& value) {
  set_has_verifyinfo();
  verifyinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ContactObject.VerifyInfo)
}
#endif
inline void ContactObject::set_verifyinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_verifyinfo();
  verifyinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ContactObject.VerifyInfo)
}
inline void ContactObject::set_verifyinfo(const char* value, size_t size) {
  set_has_verifyinfo();
  verifyinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ContactObject.VerifyInfo)
}
inline ::std::string* ContactObject::mutable_verifyinfo() {
  set_has_verifyinfo();
  // @@protoc_insertion_point(field_mutable:FromCs.ContactObject.VerifyInfo)
  return verifyinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactObject::release_verifyinfo() {
  // @@protoc_insertion_point(field_release:FromCs.ContactObject.VerifyInfo)
  clear_has_verifyinfo();
  return verifyinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactObject::set_allocated_verifyinfo(::std::string* verifyinfo) {
  if (verifyinfo != NULL) {
    set_has_verifyinfo();
  } else {
    clear_has_verifyinfo();
  }
  verifyinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verifyinfo);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ContactObject.VerifyInfo)
}

// optional string VerifyContent = 11;
inline bool ContactObject::has_verifycontent() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ContactObject::set_has_verifycontent() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ContactObject::clear_has_verifycontent() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ContactObject::clear_verifycontent() {
  verifycontent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_verifycontent();
}
inline const ::std::string& ContactObject::verifycontent() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactObject.VerifyContent)
  return verifycontent_.GetNoArena();
}
inline void ContactObject::set_verifycontent(const ::std::string& value) {
  set_has_verifycontent();
  verifycontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ContactObject.VerifyContent)
}
#if LANG_CXX11
inline void ContactObject::set_verifycontent(::std::string&& value) {
  set_has_verifycontent();
  verifycontent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ContactObject.VerifyContent)
}
#endif
inline void ContactObject::set_verifycontent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_verifycontent();
  verifycontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ContactObject.VerifyContent)
}
inline void ContactObject::set_verifycontent(const char* value, size_t size) {
  set_has_verifycontent();
  verifycontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ContactObject.VerifyContent)
}
inline ::std::string* ContactObject::mutable_verifycontent() {
  set_has_verifycontent();
  // @@protoc_insertion_point(field_mutable:FromCs.ContactObject.VerifyContent)
  return verifycontent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactObject::release_verifycontent() {
  // @@protoc_insertion_point(field_release:FromCs.ContactObject.VerifyContent)
  clear_has_verifycontent();
  return verifycontent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactObject::set_allocated_verifycontent(::std::string* verifycontent) {
  if (verifycontent != NULL) {
    set_has_verifycontent();
  } else {
    clear_has_verifycontent();
  }
  verifycontent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verifycontent);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ContactObject.VerifyContent)
}

// optional string Alias = 12;
inline bool ContactObject::has_alias() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ContactObject::set_has_alias() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ContactObject::clear_has_alias() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ContactObject::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_alias();
}
inline const ::std::string& ContactObject::alias() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactObject.Alias)
  return alias_.GetNoArena();
}
inline void ContactObject::set_alias(const ::std::string& value) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ContactObject.Alias)
}
#if LANG_CXX11
inline void ContactObject::set_alias(::std::string&& value) {
  set_has_alias();
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ContactObject.Alias)
}
#endif
inline void ContactObject::set_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ContactObject.Alias)
}
inline void ContactObject::set_alias(const char* value, size_t size) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ContactObject.Alias)
}
inline ::std::string* ContactObject::mutable_alias() {
  set_has_alias();
  // @@protoc_insertion_point(field_mutable:FromCs.ContactObject.Alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactObject::release_alias() {
  // @@protoc_insertion_point(field_release:FromCs.ContactObject.Alias)
  clear_has_alias();
  return alias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactObject::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    set_has_alias();
  } else {
    clear_has_alias();
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ContactObject.Alias)
}

// optional string Weibo = 13;
inline bool ContactObject::has_weibo() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ContactObject::set_has_weibo() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ContactObject::clear_has_weibo() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ContactObject::clear_weibo() {
  weibo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_weibo();
}
inline const ::std::string& ContactObject::weibo() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactObject.Weibo)
  return weibo_.GetNoArena();
}
inline void ContactObject::set_weibo(const ::std::string& value) {
  set_has_weibo();
  weibo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ContactObject.Weibo)
}
#if LANG_CXX11
inline void ContactObject::set_weibo(::std::string&& value) {
  set_has_weibo();
  weibo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ContactObject.Weibo)
}
#endif
inline void ContactObject::set_weibo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_weibo();
  weibo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ContactObject.Weibo)
}
inline void ContactObject::set_weibo(const char* value, size_t size) {
  set_has_weibo();
  weibo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ContactObject.Weibo)
}
inline ::std::string* ContactObject::mutable_weibo() {
  set_has_weibo();
  // @@protoc_insertion_point(field_mutable:FromCs.ContactObject.Weibo)
  return weibo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactObject::release_weibo() {
  // @@protoc_insertion_point(field_release:FromCs.ContactObject.Weibo)
  clear_has_weibo();
  return weibo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactObject::set_allocated_weibo(::std::string* weibo) {
  if (weibo != NULL) {
    set_has_weibo();
  } else {
    clear_has_weibo();
  }
  weibo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), weibo);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ContactObject.Weibo)
}

// optional string WeiboNickname = 14;
inline bool ContactObject::has_weibonickname() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ContactObject::set_has_weibonickname() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ContactObject::clear_has_weibonickname() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ContactObject::clear_weibonickname() {
  weibonickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_weibonickname();
}
inline const ::std::string& ContactObject::weibonickname() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactObject.WeiboNickname)
  return weibonickname_.GetNoArena();
}
inline void ContactObject::set_weibonickname(const ::std::string& value) {
  set_has_weibonickname();
  weibonickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ContactObject.WeiboNickname)
}
#if LANG_CXX11
inline void ContactObject::set_weibonickname(::std::string&& value) {
  set_has_weibonickname();
  weibonickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ContactObject.WeiboNickname)
}
#endif
inline void ContactObject::set_weibonickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_weibonickname();
  weibonickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ContactObject.WeiboNickname)
}
inline void ContactObject::set_weibonickname(const char* value, size_t size) {
  set_has_weibonickname();
  weibonickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ContactObject.WeiboNickname)
}
inline ::std::string* ContactObject::mutable_weibonickname() {
  set_has_weibonickname();
  // @@protoc_insertion_point(field_mutable:FromCs.ContactObject.WeiboNickname)
  return weibonickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactObject::release_weibonickname() {
  // @@protoc_insertion_point(field_release:FromCs.ContactObject.WeiboNickname)
  clear_has_weibonickname();
  return weibonickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactObject::set_allocated_weibonickname(::std::string* weibonickname) {
  if (weibonickname != NULL) {
    set_has_weibonickname();
  } else {
    clear_has_weibonickname();
  }
  weibonickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), weibonickname);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ContactObject.WeiboNickname)
}

// optional int32 WeiboFlag = 15;
inline bool ContactObject::has_weiboflag() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void ContactObject::set_has_weiboflag() {
  _has_bits_[0] |= 0x00200000u;
}
inline void ContactObject::clear_has_weiboflag() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void ContactObject::clear_weiboflag() {
  weiboflag_ = 0;
  clear_has_weiboflag();
}
inline ::google::protobuf::int32 ContactObject::weiboflag() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactObject.WeiboFlag)
  return weiboflag_;
}
inline void ContactObject::set_weiboflag(::google::protobuf::int32 value) {
  set_has_weiboflag();
  weiboflag_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ContactObject.WeiboFlag)
}

// optional int32 HeadImgVersion = 19;
inline bool ContactObject::has_headimgversion() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void ContactObject::set_has_headimgversion() {
  _has_bits_[0] |= 0x00400000u;
}
inline void ContactObject::clear_has_headimgversion() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void ContactObject::clear_headimgversion() {
  headimgversion_ = 0;
  clear_has_headimgversion();
}
inline ::google::protobuf::int32 ContactObject::headimgversion() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactObject.HeadImgVersion)
  return headimgversion_;
}
inline void ContactObject::set_headimgversion(::google::protobuf::int32 value) {
  set_has_headimgversion();
  headimgversion_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ContactObject.HeadImgVersion)
}

// optional .FromCs.sKBuiltinstringT SnsUserInfo = 20;
inline bool ContactObject::has_snsuserinfo() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ContactObject::set_has_snsuserinfo() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ContactObject::clear_has_snsuserinfo() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ContactObject::clear_snsuserinfo() {
  if (snsuserinfo_ != NULL) snsuserinfo_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_snsuserinfo();
}
inline const ::FromCs::sKBuiltinstringT& ContactObject::snsuserinfo() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactObject.SnsUserInfo)
  return snsuserinfo_ != NULL ? *snsuserinfo_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* ContactObject::mutable_snsuserinfo() {
  set_has_snsuserinfo();
  if (snsuserinfo_ == NULL) {
    snsuserinfo_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.ContactObject.SnsUserInfo)
  return snsuserinfo_;
}
inline ::FromCs::sKBuiltinstringT* ContactObject::release_snsuserinfo() {
  // @@protoc_insertion_point(field_release:FromCs.ContactObject.SnsUserInfo)
  clear_has_snsuserinfo();
  ::FromCs::sKBuiltinstringT* temp = snsuserinfo_;
  snsuserinfo_ = NULL;
  return temp;
}
inline void ContactObject::set_allocated_snsuserinfo(::FromCs::sKBuiltinstringT* snsuserinfo) {
  delete snsuserinfo_;
  snsuserinfo_ = snsuserinfo;
  if (snsuserinfo) {
    set_has_snsuserinfo();
  } else {
    clear_has_snsuserinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.ContactObject.SnsUserInfo)
}

// optional string Country = 21;
inline bool ContactObject::has_country() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ContactObject::set_has_country() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ContactObject::clear_has_country() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ContactObject::clear_country() {
  country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country();
}
inline const ::std::string& ContactObject::country() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactObject.Country)
  return country_.GetNoArena();
}
inline void ContactObject::set_country(const ::std::string& value) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ContactObject.Country)
}
#if LANG_CXX11
inline void ContactObject::set_country(::std::string&& value) {
  set_has_country();
  country_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ContactObject.Country)
}
#endif
inline void ContactObject::set_country(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ContactObject.Country)
}
inline void ContactObject::set_country(const char* value, size_t size) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ContactObject.Country)
}
inline ::std::string* ContactObject::mutable_country() {
  set_has_country();
  // @@protoc_insertion_point(field_mutable:FromCs.ContactObject.Country)
  return country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactObject::release_country() {
  // @@protoc_insertion_point(field_release:FromCs.ContactObject.Country)
  clear_has_country();
  return country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactObject::set_allocated_country(::std::string* country) {
  if (country != NULL) {
    set_has_country();
  } else {
    clear_has_country();
  }
  country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ContactObject.Country)
}

// optional string BigHeadImgUrl = 22;
inline bool ContactObject::has_bigheadimgurl() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ContactObject::set_has_bigheadimgurl() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ContactObject::clear_has_bigheadimgurl() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ContactObject::clear_bigheadimgurl() {
  bigheadimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bigheadimgurl();
}
inline const ::std::string& ContactObject::bigheadimgurl() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactObject.BigHeadImgUrl)
  return bigheadimgurl_.GetNoArena();
}
inline void ContactObject::set_bigheadimgurl(const ::std::string& value) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ContactObject.BigHeadImgUrl)
}
#if LANG_CXX11
inline void ContactObject::set_bigheadimgurl(::std::string&& value) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ContactObject.BigHeadImgUrl)
}
#endif
inline void ContactObject::set_bigheadimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ContactObject.BigHeadImgUrl)
}
inline void ContactObject::set_bigheadimgurl(const char* value, size_t size) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ContactObject.BigHeadImgUrl)
}
inline ::std::string* ContactObject::mutable_bigheadimgurl() {
  set_has_bigheadimgurl();
  // @@protoc_insertion_point(field_mutable:FromCs.ContactObject.BigHeadImgUrl)
  return bigheadimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactObject::release_bigheadimgurl() {
  // @@protoc_insertion_point(field_release:FromCs.ContactObject.BigHeadImgUrl)
  clear_has_bigheadimgurl();
  return bigheadimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactObject::set_allocated_bigheadimgurl(::std::string* bigheadimgurl) {
  if (bigheadimgurl != NULL) {
    set_has_bigheadimgurl();
  } else {
    clear_has_bigheadimgurl();
  }
  bigheadimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bigheadimgurl);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ContactObject.BigHeadImgUrl)
}

// optional string SmallHeadImgUrl = 23;
inline bool ContactObject::has_smallheadimgurl() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ContactObject::set_has_smallheadimgurl() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ContactObject::clear_has_smallheadimgurl() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ContactObject::clear_smallheadimgurl() {
  smallheadimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_smallheadimgurl();
}
inline const ::std::string& ContactObject::smallheadimgurl() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactObject.SmallHeadImgUrl)
  return smallheadimgurl_.GetNoArena();
}
inline void ContactObject::set_smallheadimgurl(const ::std::string& value) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ContactObject.SmallHeadImgUrl)
}
#if LANG_CXX11
inline void ContactObject::set_smallheadimgurl(::std::string&& value) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ContactObject.SmallHeadImgUrl)
}
#endif
inline void ContactObject::set_smallheadimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ContactObject.SmallHeadImgUrl)
}
inline void ContactObject::set_smallheadimgurl(const char* value, size_t size) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ContactObject.SmallHeadImgUrl)
}
inline ::std::string* ContactObject::mutable_smallheadimgurl() {
  set_has_smallheadimgurl();
  // @@protoc_insertion_point(field_mutable:FromCs.ContactObject.SmallHeadImgUrl)
  return smallheadimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactObject::release_smallheadimgurl() {
  // @@protoc_insertion_point(field_release:FromCs.ContactObject.SmallHeadImgUrl)
  clear_has_smallheadimgurl();
  return smallheadimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactObject::set_allocated_smallheadimgurl(::std::string* smallheadimgurl) {
  if (smallheadimgurl != NULL) {
    set_has_smallheadimgurl();
  } else {
    clear_has_smallheadimgurl();
  }
  smallheadimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smallheadimgurl);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ContactObject.SmallHeadImgUrl)
}

// optional string MyBrandList = 24;
inline bool ContactObject::has_mybrandlist() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ContactObject::set_has_mybrandlist() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ContactObject::clear_has_mybrandlist() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ContactObject::clear_mybrandlist() {
  mybrandlist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mybrandlist();
}
inline const ::std::string& ContactObject::mybrandlist() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactObject.MyBrandList)
  return mybrandlist_.GetNoArena();
}
inline void ContactObject::set_mybrandlist(const ::std::string& value) {
  set_has_mybrandlist();
  mybrandlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ContactObject.MyBrandList)
}
#if LANG_CXX11
inline void ContactObject::set_mybrandlist(::std::string&& value) {
  set_has_mybrandlist();
  mybrandlist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ContactObject.MyBrandList)
}
#endif
inline void ContactObject::set_mybrandlist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mybrandlist();
  mybrandlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ContactObject.MyBrandList)
}
inline void ContactObject::set_mybrandlist(const char* value, size_t size) {
  set_has_mybrandlist();
  mybrandlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ContactObject.MyBrandList)
}
inline ::std::string* ContactObject::mutable_mybrandlist() {
  set_has_mybrandlist();
  // @@protoc_insertion_point(field_mutable:FromCs.ContactObject.MyBrandList)
  return mybrandlist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactObject::release_mybrandlist() {
  // @@protoc_insertion_point(field_release:FromCs.ContactObject.MyBrandList)
  clear_has_mybrandlist();
  return mybrandlist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactObject::set_allocated_mybrandlist(::std::string* mybrandlist) {
  if (mybrandlist != NULL) {
    set_has_mybrandlist();
  } else {
    clear_has_mybrandlist();
  }
  mybrandlist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mybrandlist);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ContactObject.MyBrandList)
}

// optional .FromCs.sKBuiltinstringT CustomizedInfo = 25;
inline bool ContactObject::has_customizedinfo() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ContactObject::set_has_customizedinfo() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ContactObject::clear_has_customizedinfo() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ContactObject::clear_customizedinfo() {
  if (customizedinfo_ != NULL) customizedinfo_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_customizedinfo();
}
inline const ::FromCs::sKBuiltinstringT& ContactObject::customizedinfo() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactObject.CustomizedInfo)
  return customizedinfo_ != NULL ? *customizedinfo_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* ContactObject::mutable_customizedinfo() {
  set_has_customizedinfo();
  if (customizedinfo_ == NULL) {
    customizedinfo_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.ContactObject.CustomizedInfo)
  return customizedinfo_;
}
inline ::FromCs::sKBuiltinstringT* ContactObject::release_customizedinfo() {
  // @@protoc_insertion_point(field_release:FromCs.ContactObject.CustomizedInfo)
  clear_has_customizedinfo();
  ::FromCs::sKBuiltinstringT* temp = customizedinfo_;
  customizedinfo_ = NULL;
  return temp;
}
inline void ContactObject::set_allocated_customizedinfo(::FromCs::sKBuiltinstringT* customizedinfo) {
  delete customizedinfo_;
  customizedinfo_ = customizedinfo;
  if (customizedinfo) {
    set_has_customizedinfo();
  } else {
    clear_has_customizedinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.ContactObject.CustomizedInfo)
}

// optional string AntispamTicket = 26;
inline bool ContactObject::has_antispamticket() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ContactObject::set_has_antispamticket() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ContactObject::clear_has_antispamticket() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ContactObject::clear_antispamticket() {
  antispamticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_antispamticket();
}
inline const ::std::string& ContactObject::antispamticket() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactObject.AntispamTicket)
  return antispamticket_.GetNoArena();
}
inline void ContactObject::set_antispamticket(const ::std::string& value) {
  set_has_antispamticket();
  antispamticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ContactObject.AntispamTicket)
}
#if LANG_CXX11
inline void ContactObject::set_antispamticket(::std::string&& value) {
  set_has_antispamticket();
  antispamticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ContactObject.AntispamTicket)
}
#endif
inline void ContactObject::set_antispamticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_antispamticket();
  antispamticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ContactObject.AntispamTicket)
}
inline void ContactObject::set_antispamticket(const char* value, size_t size) {
  set_has_antispamticket();
  antispamticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ContactObject.AntispamTicket)
}
inline ::std::string* ContactObject::mutable_antispamticket() {
  set_has_antispamticket();
  // @@protoc_insertion_point(field_mutable:FromCs.ContactObject.AntispamTicket)
  return antispamticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactObject::release_antispamticket() {
  // @@protoc_insertion_point(field_release:FromCs.ContactObject.AntispamTicket)
  clear_has_antispamticket();
  return antispamticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactObject::set_allocated_antispamticket(::std::string* antispamticket) {
  if (antispamticket != NULL) {
    set_has_antispamticket();
  } else {
    clear_has_antispamticket();
  }
  antispamticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), antispamticket);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ContactObject.AntispamTicket)
}

// -------------------------------------------------------------------

// SnsUser

// optional int32 SnsFlag = 1;
inline bool SnsUser::has_snsflag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SnsUser::set_has_snsflag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SnsUser::clear_has_snsflag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SnsUser::clear_snsflag() {
  snsflag_ = 0;
  clear_has_snsflag();
}
inline ::google::protobuf::int32 SnsUser::snsflag() const {
  // @@protoc_insertion_point(field_get:FromCs.SnsUser.SnsFlag)
  return snsflag_;
}
inline void SnsUser::set_snsflag(::google::protobuf::int32 value) {
  set_has_snsflag();
  snsflag_ = value;
  // @@protoc_insertion_point(field_set:FromCs.SnsUser.SnsFlag)
}

// optional string SnsBGImgID = 2;
inline bool SnsUser::has_snsbgimgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SnsUser::set_has_snsbgimgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SnsUser::clear_has_snsbgimgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SnsUser::clear_snsbgimgid() {
  snsbgimgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_snsbgimgid();
}
inline const ::std::string& SnsUser::snsbgimgid() const {
  // @@protoc_insertion_point(field_get:FromCs.SnsUser.SnsBGImgID)
  return snsbgimgid_.GetNoArena();
}
inline void SnsUser::set_snsbgimgid(const ::std::string& value) {
  set_has_snsbgimgid();
  snsbgimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.SnsUser.SnsBGImgID)
}
#if LANG_CXX11
inline void SnsUser::set_snsbgimgid(::std::string&& value) {
  set_has_snsbgimgid();
  snsbgimgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.SnsUser.SnsBGImgID)
}
#endif
inline void SnsUser::set_snsbgimgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_snsbgimgid();
  snsbgimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.SnsUser.SnsBGImgID)
}
inline void SnsUser::set_snsbgimgid(const char* value, size_t size) {
  set_has_snsbgimgid();
  snsbgimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.SnsUser.SnsBGImgID)
}
inline ::std::string* SnsUser::mutable_snsbgimgid() {
  set_has_snsbgimgid();
  // @@protoc_insertion_point(field_mutable:FromCs.SnsUser.SnsBGImgID)
  return snsbgimgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SnsUser::release_snsbgimgid() {
  // @@protoc_insertion_point(field_release:FromCs.SnsUser.SnsBGImgID)
  clear_has_snsbgimgid();
  return snsbgimgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SnsUser::set_allocated_snsbgimgid(::std::string* snsbgimgid) {
  if (snsbgimgid != NULL) {
    set_has_snsbgimgid();
  } else {
    clear_has_snsbgimgid();
  }
  snsbgimgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), snsbgimgid);
  // @@protoc_insertion_point(field_set_allocated:FromCs.SnsUser.SnsBGImgID)
}

// optional int64 SnsBGObjectID = 3;
inline bool SnsUser::has_snsbgobjectid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SnsUser::set_has_snsbgobjectid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SnsUser::clear_has_snsbgobjectid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SnsUser::clear_snsbgobjectid() {
  snsbgobjectid_ = GOOGLE_LONGLONG(0);
  clear_has_snsbgobjectid();
}
inline ::google::protobuf::int64 SnsUser::snsbgobjectid() const {
  // @@protoc_insertion_point(field_get:FromCs.SnsUser.SnsBGObjectID)
  return snsbgobjectid_;
}
inline void SnsUser::set_snsbgobjectid(::google::protobuf::int64 value) {
  set_has_snsbgobjectid();
  snsbgobjectid_ = value;
  // @@protoc_insertion_point(field_set:FromCs.SnsUser.SnsBGObjectID)
}

// optional int32 SnsFlagEx = 4;
inline bool SnsUser::has_snsflagex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SnsUser::set_has_snsflagex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SnsUser::clear_has_snsflagex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SnsUser::clear_snsflagex() {
  snsflagex_ = 0;
  clear_has_snsflagex();
}
inline ::google::protobuf::int32 SnsUser::snsflagex() const {
  // @@protoc_insertion_point(field_get:FromCs.SnsUser.SnsFlagEx)
  return snsflagex_;
}
inline void SnsUser::set_snsflagex(::google::protobuf::int32 value) {
  set_has_snsflagex();
  snsflagex_ = value;
  // @@protoc_insertion_point(field_set:FromCs.SnsUser.SnsFlagEx)
}

// -------------------------------------------------------------------

// CustomInfo

// optional int32 BrandFlag = 1;
inline bool CustomInfo::has_brandflag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CustomInfo::set_has_brandflag() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CustomInfo::clear_has_brandflag() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CustomInfo::clear_brandflag() {
  brandflag_ = 0;
  clear_has_brandflag();
}
inline ::google::protobuf::int32 CustomInfo::brandflag() const {
  // @@protoc_insertion_point(field_get:FromCs.CustomInfo.BrandFlag)
  return brandflag_;
}
inline void CustomInfo::set_brandflag(::google::protobuf::int32 value) {
  set_has_brandflag();
  brandflag_ = value;
  // @@protoc_insertion_point(field_set:FromCs.CustomInfo.BrandFlag)
}

// optional string ExternalInfo = 2;
inline bool CustomInfo::has_externalinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CustomInfo::set_has_externalinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CustomInfo::clear_has_externalinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CustomInfo::clear_externalinfo() {
  externalinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_externalinfo();
}
inline const ::std::string& CustomInfo::externalinfo() const {
  // @@protoc_insertion_point(field_get:FromCs.CustomInfo.ExternalInfo)
  return externalinfo_.GetNoArena();
}
inline void CustomInfo::set_externalinfo(const ::std::string& value) {
  set_has_externalinfo();
  externalinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.CustomInfo.ExternalInfo)
}
#if LANG_CXX11
inline void CustomInfo::set_externalinfo(::std::string&& value) {
  set_has_externalinfo();
  externalinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.CustomInfo.ExternalInfo)
}
#endif
inline void CustomInfo::set_externalinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_externalinfo();
  externalinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.CustomInfo.ExternalInfo)
}
inline void CustomInfo::set_externalinfo(const char* value, size_t size) {
  set_has_externalinfo();
  externalinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.CustomInfo.ExternalInfo)
}
inline ::std::string* CustomInfo::mutable_externalinfo() {
  set_has_externalinfo();
  // @@protoc_insertion_point(field_mutable:FromCs.CustomInfo.ExternalInfo)
  return externalinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CustomInfo::release_externalinfo() {
  // @@protoc_insertion_point(field_release:FromCs.CustomInfo.ExternalInfo)
  clear_has_externalinfo();
  return externalinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CustomInfo::set_allocated_externalinfo(::std::string* externalinfo) {
  if (externalinfo != NULL) {
    set_has_externalinfo();
  } else {
    clear_has_externalinfo();
  }
  externalinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), externalinfo);
  // @@protoc_insertion_point(field_set_allocated:FromCs.CustomInfo.ExternalInfo)
}

// optional string BrandInfo = 3;
inline bool CustomInfo::has_brandinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CustomInfo::set_has_brandinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CustomInfo::clear_has_brandinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CustomInfo::clear_brandinfo() {
  brandinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_brandinfo();
}
inline const ::std::string& CustomInfo::brandinfo() const {
  // @@protoc_insertion_point(field_get:FromCs.CustomInfo.BrandInfo)
  return brandinfo_.GetNoArena();
}
inline void CustomInfo::set_brandinfo(const ::std::string& value) {
  set_has_brandinfo();
  brandinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.CustomInfo.BrandInfo)
}
#if LANG_CXX11
inline void CustomInfo::set_brandinfo(::std::string&& value) {
  set_has_brandinfo();
  brandinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.CustomInfo.BrandInfo)
}
#endif
inline void CustomInfo::set_brandinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_brandinfo();
  brandinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.CustomInfo.BrandInfo)
}
inline void CustomInfo::set_brandinfo(const char* value, size_t size) {
  set_has_brandinfo();
  brandinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.CustomInfo.BrandInfo)
}
inline ::std::string* CustomInfo::mutable_brandinfo() {
  set_has_brandinfo();
  // @@protoc_insertion_point(field_mutable:FromCs.CustomInfo.BrandInfo)
  return brandinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CustomInfo::release_brandinfo() {
  // @@protoc_insertion_point(field_release:FromCs.CustomInfo.BrandInfo)
  clear_has_brandinfo();
  return brandinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CustomInfo::set_allocated_brandinfo(::std::string* brandinfo) {
  if (brandinfo != NULL) {
    set_has_brandinfo();
  } else {
    clear_has_brandinfo();
  }
  brandinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brandinfo);
  // @@protoc_insertion_point(field_set_allocated:FromCs.CustomInfo.BrandInfo)
}

// optional string BrandIconURL = 4;
inline bool CustomInfo::has_brandiconurl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CustomInfo::set_has_brandiconurl() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CustomInfo::clear_has_brandiconurl() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CustomInfo::clear_brandiconurl() {
  brandiconurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_brandiconurl();
}
inline const ::std::string& CustomInfo::brandiconurl() const {
  // @@protoc_insertion_point(field_get:FromCs.CustomInfo.BrandIconURL)
  return brandiconurl_.GetNoArena();
}
inline void CustomInfo::set_brandiconurl(const ::std::string& value) {
  set_has_brandiconurl();
  brandiconurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.CustomInfo.BrandIconURL)
}
#if LANG_CXX11
inline void CustomInfo::set_brandiconurl(::std::string&& value) {
  set_has_brandiconurl();
  brandiconurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.CustomInfo.BrandIconURL)
}
#endif
inline void CustomInfo::set_brandiconurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_brandiconurl();
  brandiconurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.CustomInfo.BrandIconURL)
}
inline void CustomInfo::set_brandiconurl(const char* value, size_t size) {
  set_has_brandiconurl();
  brandiconurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.CustomInfo.BrandIconURL)
}
inline ::std::string* CustomInfo::mutable_brandiconurl() {
  set_has_brandiconurl();
  // @@protoc_insertion_point(field_mutable:FromCs.CustomInfo.BrandIconURL)
  return brandiconurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CustomInfo::release_brandiconurl() {
  // @@protoc_insertion_point(field_release:FromCs.CustomInfo.BrandIconURL)
  clear_has_brandiconurl();
  return brandiconurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CustomInfo::set_allocated_brandiconurl(::std::string* brandiconurl) {
  if (brandiconurl != NULL) {
    set_has_brandiconurl();
  } else {
    clear_has_brandiconurl();
  }
  brandiconurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brandiconurl);
  // @@protoc_insertion_point(field_set_allocated:FromCs.CustomInfo.BrandIconURL)
}

// -------------------------------------------------------------------

// userProfile

// optional int32 BitFlag = 1;
inline bool userProfile::has_bitflag() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void userProfile::set_has_bitflag() {
  _has_bits_[0] |= 0x00040000u;
}
inline void userProfile::clear_has_bitflag() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void userProfile::clear_bitflag() {
  bitflag_ = 0;
  clear_has_bitflag();
}
inline ::google::protobuf::int32 userProfile::bitflag() const {
  // @@protoc_insertion_point(field_get:FromCs.userProfile.BitFlag)
  return bitflag_;
}
inline void userProfile::set_bitflag(::google::protobuf::int32 value) {
  set_has_bitflag();
  bitflag_ = value;
  // @@protoc_insertion_point(field_set:FromCs.userProfile.BitFlag)
}

// optional .FromCs.sKBuiltinstringT UserName = 2;
inline bool userProfile::has_username() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void userProfile::set_has_username() {
  _has_bits_[0] |= 0x00001000u;
}
inline void userProfile::clear_has_username() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void userProfile::clear_username() {
  if (username_ != NULL) username_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_username();
}
inline const ::FromCs::sKBuiltinstringT& userProfile::username() const {
  // @@protoc_insertion_point(field_get:FromCs.userProfile.UserName)
  return username_ != NULL ? *username_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* userProfile::mutable_username() {
  set_has_username();
  if (username_ == NULL) {
    username_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.userProfile.UserName)
  return username_;
}
inline ::FromCs::sKBuiltinstringT* userProfile::release_username() {
  // @@protoc_insertion_point(field_release:FromCs.userProfile.UserName)
  clear_has_username();
  ::FromCs::sKBuiltinstringT* temp = username_;
  username_ = NULL;
  return temp;
}
inline void userProfile::set_allocated_username(::FromCs::sKBuiltinstringT* username) {
  delete username_;
  username_ = username;
  if (username) {
    set_has_username();
  } else {
    clear_has_username();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.userProfile.UserName)
}

// optional .FromCs.sKBuiltinstringT NickName = 3;
inline bool userProfile::has_nickname() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void userProfile::set_has_nickname() {
  _has_bits_[0] |= 0x00002000u;
}
inline void userProfile::clear_has_nickname() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void userProfile::clear_nickname() {
  if (nickname_ != NULL) nickname_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_nickname();
}
inline const ::FromCs::sKBuiltinstringT& userProfile::nickname() const {
  // @@protoc_insertion_point(field_get:FromCs.userProfile.NickName)
  return nickname_ != NULL ? *nickname_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* userProfile::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == NULL) {
    nickname_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.userProfile.NickName)
  return nickname_;
}
inline ::FromCs::sKBuiltinstringT* userProfile::release_nickname() {
  // @@protoc_insertion_point(field_release:FromCs.userProfile.NickName)
  clear_has_nickname();
  ::FromCs::sKBuiltinstringT* temp = nickname_;
  nickname_ = NULL;
  return temp;
}
inline void userProfile::set_allocated_nickname(::FromCs::sKBuiltinstringT* nickname) {
  delete nickname_;
  nickname_ = nickname;
  if (nickname) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.userProfile.NickName)
}

// optional int32 BindUin = 4;
inline bool userProfile::has_binduin() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void userProfile::set_has_binduin() {
  _has_bits_[0] |= 0x00080000u;
}
inline void userProfile::clear_has_binduin() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void userProfile::clear_binduin() {
  binduin_ = 0;
  clear_has_binduin();
}
inline ::google::protobuf::int32 userProfile::binduin() const {
  // @@protoc_insertion_point(field_get:FromCs.userProfile.BindUin)
  return binduin_;
}
inline void userProfile::set_binduin(::google::protobuf::int32 value) {
  set_has_binduin();
  binduin_ = value;
  // @@protoc_insertion_point(field_set:FromCs.userProfile.BindUin)
}

// optional .FromCs.sKBuiltinstringT BindEmail = 5;
inline bool userProfile::has_bindemail() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void userProfile::set_has_bindemail() {
  _has_bits_[0] |= 0x00004000u;
}
inline void userProfile::clear_has_bindemail() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void userProfile::clear_bindemail() {
  if (bindemail_ != NULL) bindemail_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_bindemail();
}
inline const ::FromCs::sKBuiltinstringT& userProfile::bindemail() const {
  // @@protoc_insertion_point(field_get:FromCs.userProfile.BindEmail)
  return bindemail_ != NULL ? *bindemail_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* userProfile::mutable_bindemail() {
  set_has_bindemail();
  if (bindemail_ == NULL) {
    bindemail_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.userProfile.BindEmail)
  return bindemail_;
}
inline ::FromCs::sKBuiltinstringT* userProfile::release_bindemail() {
  // @@protoc_insertion_point(field_release:FromCs.userProfile.BindEmail)
  clear_has_bindemail();
  ::FromCs::sKBuiltinstringT* temp = bindemail_;
  bindemail_ = NULL;
  return temp;
}
inline void userProfile::set_allocated_bindemail(::FromCs::sKBuiltinstringT* bindemail) {
  delete bindemail_;
  bindemail_ = bindemail;
  if (bindemail) {
    set_has_bindemail();
  } else {
    clear_has_bindemail();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.userProfile.BindEmail)
}

// optional .FromCs.sKBuiltinstringT BindMobile = 6;
inline bool userProfile::has_bindmobile() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void userProfile::set_has_bindmobile() {
  _has_bits_[0] |= 0x00008000u;
}
inline void userProfile::clear_has_bindmobile() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void userProfile::clear_bindmobile() {
  if (bindmobile_ != NULL) bindmobile_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_bindmobile();
}
inline const ::FromCs::sKBuiltinstringT& userProfile::bindmobile() const {
  // @@protoc_insertion_point(field_get:FromCs.userProfile.BindMobile)
  return bindmobile_ != NULL ? *bindmobile_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* userProfile::mutable_bindmobile() {
  set_has_bindmobile();
  if (bindmobile_ == NULL) {
    bindmobile_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.userProfile.BindMobile)
  return bindmobile_;
}
inline ::FromCs::sKBuiltinstringT* userProfile::release_bindmobile() {
  // @@protoc_insertion_point(field_release:FromCs.userProfile.BindMobile)
  clear_has_bindmobile();
  ::FromCs::sKBuiltinstringT* temp = bindmobile_;
  bindmobile_ = NULL;
  return temp;
}
inline void userProfile::set_allocated_bindmobile(::FromCs::sKBuiltinstringT* bindmobile) {
  delete bindmobile_;
  bindmobile_ = bindmobile;
  if (bindmobile) {
    set_has_bindmobile();
  } else {
    clear_has_bindmobile();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.userProfile.BindMobile)
}

// optional int32 Status = 7;
inline bool userProfile::has_status() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void userProfile::set_has_status() {
  _has_bits_[0] |= 0x00100000u;
}
inline void userProfile::clear_has_status() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void userProfile::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 userProfile::status() const {
  // @@protoc_insertion_point(field_get:FromCs.userProfile.Status)
  return status_;
}
inline void userProfile::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:FromCs.userProfile.Status)
}

// optional int32 ImgLen = 8;
inline bool userProfile::has_imglen() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void userProfile::set_has_imglen() {
  _has_bits_[0] |= 0x00200000u;
}
inline void userProfile::clear_has_imglen() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void userProfile::clear_imglen() {
  imglen_ = 0;
  clear_has_imglen();
}
inline ::google::protobuf::int32 userProfile::imglen() const {
  // @@protoc_insertion_point(field_get:FromCs.userProfile.ImgLen)
  return imglen_;
}
inline void userProfile::set_imglen(::google::protobuf::int32 value) {
  set_has_imglen();
  imglen_ = value;
  // @@protoc_insertion_point(field_set:FromCs.userProfile.ImgLen)
}

// optional bytes ImgBuf = 9;
inline bool userProfile::has_imgbuf() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void userProfile::set_has_imgbuf() {
  _has_bits_[0] |= 0x00000001u;
}
inline void userProfile::clear_has_imgbuf() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void userProfile::clear_imgbuf() {
  imgbuf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_imgbuf();
}
inline const ::std::string& userProfile::imgbuf() const {
  // @@protoc_insertion_point(field_get:FromCs.userProfile.ImgBuf)
  return imgbuf_.GetNoArena();
}
inline void userProfile::set_imgbuf(const ::std::string& value) {
  set_has_imgbuf();
  imgbuf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.userProfile.ImgBuf)
}
#if LANG_CXX11
inline void userProfile::set_imgbuf(::std::string&& value) {
  set_has_imgbuf();
  imgbuf_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.userProfile.ImgBuf)
}
#endif
inline void userProfile::set_imgbuf(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_imgbuf();
  imgbuf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.userProfile.ImgBuf)
}
inline void userProfile::set_imgbuf(const void* value, size_t size) {
  set_has_imgbuf();
  imgbuf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.userProfile.ImgBuf)
}
inline ::std::string* userProfile::mutable_imgbuf() {
  set_has_imgbuf();
  // @@protoc_insertion_point(field_mutable:FromCs.userProfile.ImgBuf)
  return imgbuf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* userProfile::release_imgbuf() {
  // @@protoc_insertion_point(field_release:FromCs.userProfile.ImgBuf)
  clear_has_imgbuf();
  return imgbuf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void userProfile::set_allocated_imgbuf(::std::string* imgbuf) {
  if (imgbuf != NULL) {
    set_has_imgbuf();
  } else {
    clear_has_imgbuf();
  }
  imgbuf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imgbuf);
  // @@protoc_insertion_point(field_set_allocated:FromCs.userProfile.ImgBuf)
}

// optional int32 Sex = 10;
inline bool userProfile::has_sex() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void userProfile::set_has_sex() {
  _has_bits_[0] |= 0x00400000u;
}
inline void userProfile::clear_has_sex() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void userProfile::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 userProfile::sex() const {
  // @@protoc_insertion_point(field_get:FromCs.userProfile.Sex)
  return sex_;
}
inline void userProfile::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:FromCs.userProfile.Sex)
}

// optional string Province = 11;
inline bool userProfile::has_province() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void userProfile::set_has_province() {
  _has_bits_[0] |= 0x00000002u;
}
inline void userProfile::clear_has_province() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void userProfile::clear_province() {
  province_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_province();
}
inline const ::std::string& userProfile::province() const {
  // @@protoc_insertion_point(field_get:FromCs.userProfile.Province)
  return province_.GetNoArena();
}
inline void userProfile::set_province(const ::std::string& value) {
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.userProfile.Province)
}
#if LANG_CXX11
inline void userProfile::set_province(::std::string&& value) {
  set_has_province();
  province_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.userProfile.Province)
}
#endif
inline void userProfile::set_province(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.userProfile.Province)
}
inline void userProfile::set_province(const char* value, size_t size) {
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.userProfile.Province)
}
inline ::std::string* userProfile::mutable_province() {
  set_has_province();
  // @@protoc_insertion_point(field_mutable:FromCs.userProfile.Province)
  return province_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* userProfile::release_province() {
  // @@protoc_insertion_point(field_release:FromCs.userProfile.Province)
  clear_has_province();
  return province_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void userProfile::set_allocated_province(::std::string* province) {
  if (province != NULL) {
    set_has_province();
  } else {
    clear_has_province();
  }
  province_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), province);
  // @@protoc_insertion_point(field_set_allocated:FromCs.userProfile.Province)
}

// optional string City = 12;
inline bool userProfile::has_city() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void userProfile::set_has_city() {
  _has_bits_[0] |= 0x00000004u;
}
inline void userProfile::clear_has_city() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void userProfile::clear_city() {
  city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_city();
}
inline const ::std::string& userProfile::city() const {
  // @@protoc_insertion_point(field_get:FromCs.userProfile.City)
  return city_.GetNoArena();
}
inline void userProfile::set_city(const ::std::string& value) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.userProfile.City)
}
#if LANG_CXX11
inline void userProfile::set_city(::std::string&& value) {
  set_has_city();
  city_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.userProfile.City)
}
#endif
inline void userProfile::set_city(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.userProfile.City)
}
inline void userProfile::set_city(const char* value, size_t size) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.userProfile.City)
}
inline ::std::string* userProfile::mutable_city() {
  set_has_city();
  // @@protoc_insertion_point(field_mutable:FromCs.userProfile.City)
  return city_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* userProfile::release_city() {
  // @@protoc_insertion_point(field_release:FromCs.userProfile.City)
  clear_has_city();
  return city_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void userProfile::set_allocated_city(::std::string* city) {
  if (city != NULL) {
    set_has_city();
  } else {
    clear_has_city();
  }
  city_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:FromCs.userProfile.City)
}

// optional string Signature = 13;
inline bool userProfile::has_signature() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void userProfile::set_has_signature() {
  _has_bits_[0] |= 0x00000008u;
}
inline void userProfile::clear_has_signature() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void userProfile::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_signature();
}
inline const ::std::string& userProfile::signature() const {
  // @@protoc_insertion_point(field_get:FromCs.userProfile.Signature)
  return signature_.GetNoArena();
}
inline void userProfile::set_signature(const ::std::string& value) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.userProfile.Signature)
}
#if LANG_CXX11
inline void userProfile::set_signature(::std::string&& value) {
  set_has_signature();
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.userProfile.Signature)
}
#endif
inline void userProfile::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.userProfile.Signature)
}
inline void userProfile::set_signature(const char* value, size_t size) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.userProfile.Signature)
}
inline ::std::string* userProfile::mutable_signature() {
  set_has_signature();
  // @@protoc_insertion_point(field_mutable:FromCs.userProfile.Signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* userProfile::release_signature() {
  // @@protoc_insertion_point(field_release:FromCs.userProfile.Signature)
  clear_has_signature();
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void userProfile::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:FromCs.userProfile.Signature)
}

// optional int32 PersonalCard = 14;
inline bool userProfile::has_personalcard() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void userProfile::set_has_personalcard() {
  _has_bits_[0] |= 0x00800000u;
}
inline void userProfile::clear_has_personalcard() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void userProfile::clear_personalcard() {
  personalcard_ = 0;
  clear_has_personalcard();
}
inline ::google::protobuf::int32 userProfile::personalcard() const {
  // @@protoc_insertion_point(field_get:FromCs.userProfile.PersonalCard)
  return personalcard_;
}
inline void userProfile::set_personalcard(::google::protobuf::int32 value) {
  set_has_personalcard();
  personalcard_ = value;
  // @@protoc_insertion_point(field_set:FromCs.userProfile.PersonalCard)
}

// optional .FromCs.sKBuiltinstringT DisturbSetting = 15;
inline bool userProfile::has_disturbsetting() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void userProfile::set_has_disturbsetting() {
  _has_bits_[0] |= 0x00010000u;
}
inline void userProfile::clear_has_disturbsetting() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void userProfile::clear_disturbsetting() {
  if (disturbsetting_ != NULL) disturbsetting_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_disturbsetting();
}
inline const ::FromCs::sKBuiltinstringT& userProfile::disturbsetting() const {
  // @@protoc_insertion_point(field_get:FromCs.userProfile.DisturbSetting)
  return disturbsetting_ != NULL ? *disturbsetting_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* userProfile::mutable_disturbsetting() {
  set_has_disturbsetting();
  if (disturbsetting_ == NULL) {
    disturbsetting_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.userProfile.DisturbSetting)
  return disturbsetting_;
}
inline ::FromCs::sKBuiltinstringT* userProfile::release_disturbsetting() {
  // @@protoc_insertion_point(field_release:FromCs.userProfile.DisturbSetting)
  clear_has_disturbsetting();
  ::FromCs::sKBuiltinstringT* temp = disturbsetting_;
  disturbsetting_ = NULL;
  return temp;
}
inline void userProfile::set_allocated_disturbsetting(::FromCs::sKBuiltinstringT* disturbsetting) {
  delete disturbsetting_;
  disturbsetting_ = disturbsetting;
  if (disturbsetting) {
    set_has_disturbsetting();
  } else {
    clear_has_disturbsetting();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.userProfile.DisturbSetting)
}

// optional int32 PluginFlag = 16;
inline bool userProfile::has_pluginflag() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void userProfile::set_has_pluginflag() {
  _has_bits_[0] |= 0x01000000u;
}
inline void userProfile::clear_has_pluginflag() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void userProfile::clear_pluginflag() {
  pluginflag_ = 0;
  clear_has_pluginflag();
}
inline ::google::protobuf::int32 userProfile::pluginflag() const {
  // @@protoc_insertion_point(field_get:FromCs.userProfile.PluginFlag)
  return pluginflag_;
}
inline void userProfile::set_pluginflag(::google::protobuf::int32 value) {
  set_has_pluginflag();
  pluginflag_ = value;
  // @@protoc_insertion_point(field_set:FromCs.userProfile.PluginFlag)
}

// optional int32 VerifyFlag = 17;
inline bool userProfile::has_verifyflag() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void userProfile::set_has_verifyflag() {
  _has_bits_[0] |= 0x02000000u;
}
inline void userProfile::clear_has_verifyflag() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void userProfile::clear_verifyflag() {
  verifyflag_ = 0;
  clear_has_verifyflag();
}
inline ::google::protobuf::int32 userProfile::verifyflag() const {
  // @@protoc_insertion_point(field_get:FromCs.userProfile.VerifyFlag)
  return verifyflag_;
}
inline void userProfile::set_verifyflag(::google::protobuf::int32 value) {
  set_has_verifyflag();
  verifyflag_ = value;
  // @@protoc_insertion_point(field_set:FromCs.userProfile.VerifyFlag)
}

// optional string VerifyInfo = 18;
inline bool userProfile::has_verifyinfo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void userProfile::set_has_verifyinfo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void userProfile::clear_has_verifyinfo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void userProfile::clear_verifyinfo() {
  verifyinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_verifyinfo();
}
inline const ::std::string& userProfile::verifyinfo() const {
  // @@protoc_insertion_point(field_get:FromCs.userProfile.VerifyInfo)
  return verifyinfo_.GetNoArena();
}
inline void userProfile::set_verifyinfo(const ::std::string& value) {
  set_has_verifyinfo();
  verifyinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.userProfile.VerifyInfo)
}
#if LANG_CXX11
inline void userProfile::set_verifyinfo(::std::string&& value) {
  set_has_verifyinfo();
  verifyinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.userProfile.VerifyInfo)
}
#endif
inline void userProfile::set_verifyinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_verifyinfo();
  verifyinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.userProfile.VerifyInfo)
}
inline void userProfile::set_verifyinfo(const char* value, size_t size) {
  set_has_verifyinfo();
  verifyinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.userProfile.VerifyInfo)
}
inline ::std::string* userProfile::mutable_verifyinfo() {
  set_has_verifyinfo();
  // @@protoc_insertion_point(field_mutable:FromCs.userProfile.VerifyInfo)
  return verifyinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* userProfile::release_verifyinfo() {
  // @@protoc_insertion_point(field_release:FromCs.userProfile.VerifyInfo)
  clear_has_verifyinfo();
  return verifyinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void userProfile::set_allocated_verifyinfo(::std::string* verifyinfo) {
  if (verifyinfo != NULL) {
    set_has_verifyinfo();
  } else {
    clear_has_verifyinfo();
  }
  verifyinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verifyinfo);
  // @@protoc_insertion_point(field_set_allocated:FromCs.userProfile.VerifyInfo)
}

// optional int32 Point = 19;
inline bool userProfile::has_point() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void userProfile::set_has_point() {
  _has_bits_[0] |= 0x04000000u;
}
inline void userProfile::clear_has_point() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void userProfile::clear_point() {
  point_ = 0;
  clear_has_point();
}
inline ::google::protobuf::int32 userProfile::point() const {
  // @@protoc_insertion_point(field_get:FromCs.userProfile.Point)
  return point_;
}
inline void userProfile::set_point(::google::protobuf::int32 value) {
  set_has_point();
  point_ = value;
  // @@protoc_insertion_point(field_set:FromCs.userProfile.Point)
}

// optional int32 Experience = 20;
inline bool userProfile::has_experience() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void userProfile::set_has_experience() {
  _has_bits_[0] |= 0x08000000u;
}
inline void userProfile::clear_has_experience() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void userProfile::clear_experience() {
  experience_ = 0;
  clear_has_experience();
}
inline ::google::protobuf::int32 userProfile::experience() const {
  // @@protoc_insertion_point(field_get:FromCs.userProfile.Experience)
  return experience_;
}
inline void userProfile::set_experience(::google::protobuf::int32 value) {
  set_has_experience();
  experience_ = value;
  // @@protoc_insertion_point(field_set:FromCs.userProfile.Experience)
}

// optional int32 Level = 21;
inline bool userProfile::has_level() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void userProfile::set_has_level() {
  _has_bits_[0] |= 0x10000000u;
}
inline void userProfile::clear_has_level() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void userProfile::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 userProfile::level() const {
  // @@protoc_insertion_point(field_get:FromCs.userProfile.Level)
  return level_;
}
inline void userProfile::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:FromCs.userProfile.Level)
}

// optional int32 LevelLowExp = 22;
inline bool userProfile::has_levellowexp() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void userProfile::set_has_levellowexp() {
  _has_bits_[0] |= 0x20000000u;
}
inline void userProfile::clear_has_levellowexp() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void userProfile::clear_levellowexp() {
  levellowexp_ = 0;
  clear_has_levellowexp();
}
inline ::google::protobuf::int32 userProfile::levellowexp() const {
  // @@protoc_insertion_point(field_get:FromCs.userProfile.LevelLowExp)
  return levellowexp_;
}
inline void userProfile::set_levellowexp(::google::protobuf::int32 value) {
  set_has_levellowexp();
  levellowexp_ = value;
  // @@protoc_insertion_point(field_set:FromCs.userProfile.LevelLowExp)
}

// optional int32 LevelHighExp = 23;
inline bool userProfile::has_levelhighexp() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void userProfile::set_has_levelhighexp() {
  _has_bits_[0] |= 0x40000000u;
}
inline void userProfile::clear_has_levelhighexp() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void userProfile::clear_levelhighexp() {
  levelhighexp_ = 0;
  clear_has_levelhighexp();
}
inline ::google::protobuf::int32 userProfile::levelhighexp() const {
  // @@protoc_insertion_point(field_get:FromCs.userProfile.LevelHighExp)
  return levelhighexp_;
}
inline void userProfile::set_levelhighexp(::google::protobuf::int32 value) {
  set_has_levelhighexp();
  levelhighexp_ = value;
  // @@protoc_insertion_point(field_set:FromCs.userProfile.LevelHighExp)
}

// optional string Weibo = 24;
inline bool userProfile::has_weibo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void userProfile::set_has_weibo() {
  _has_bits_[0] |= 0x00000020u;
}
inline void userProfile::clear_has_weibo() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void userProfile::clear_weibo() {
  weibo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_weibo();
}
inline const ::std::string& userProfile::weibo() const {
  // @@protoc_insertion_point(field_get:FromCs.userProfile.Weibo)
  return weibo_.GetNoArena();
}
inline void userProfile::set_weibo(const ::std::string& value) {
  set_has_weibo();
  weibo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.userProfile.Weibo)
}
#if LANG_CXX11
inline void userProfile::set_weibo(::std::string&& value) {
  set_has_weibo();
  weibo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.userProfile.Weibo)
}
#endif
inline void userProfile::set_weibo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_weibo();
  weibo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.userProfile.Weibo)
}
inline void userProfile::set_weibo(const char* value, size_t size) {
  set_has_weibo();
  weibo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.userProfile.Weibo)
}
inline ::std::string* userProfile::mutable_weibo() {
  set_has_weibo();
  // @@protoc_insertion_point(field_mutable:FromCs.userProfile.Weibo)
  return weibo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* userProfile::release_weibo() {
  // @@protoc_insertion_point(field_release:FromCs.userProfile.Weibo)
  clear_has_weibo();
  return weibo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void userProfile::set_allocated_weibo(::std::string* weibo) {
  if (weibo != NULL) {
    set_has_weibo();
  } else {
    clear_has_weibo();
  }
  weibo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), weibo);
  // @@protoc_insertion_point(field_set_allocated:FromCs.userProfile.Weibo)
}

// optional int32 PluginSwitch = 25;
inline bool userProfile::has_pluginswitch() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void userProfile::set_has_pluginswitch() {
  _has_bits_[0] |= 0x80000000u;
}
inline void userProfile::clear_has_pluginswitch() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void userProfile::clear_pluginswitch() {
  pluginswitch_ = 0;
  clear_has_pluginswitch();
}
inline ::google::protobuf::int32 userProfile::pluginswitch() const {
  // @@protoc_insertion_point(field_get:FromCs.userProfile.PluginSwitch)
  return pluginswitch_;
}
inline void userProfile::set_pluginswitch(::google::protobuf::int32 value) {
  set_has_pluginswitch();
  pluginswitch_ = value;
  // @@protoc_insertion_point(field_set:FromCs.userProfile.PluginSwitch)
}

// optional .FromCs.sKBuiltinstringT GmailList = 26;
inline bool userProfile::has_gmaillist() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void userProfile::set_has_gmaillist() {
  _has_bits_[0] |= 0x00020000u;
}
inline void userProfile::clear_has_gmaillist() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void userProfile::clear_gmaillist() {
  if (gmaillist_ != NULL) gmaillist_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_gmaillist();
}
inline const ::FromCs::sKBuiltinstringT& userProfile::gmaillist() const {
  // @@protoc_insertion_point(field_get:FromCs.userProfile.GmailList)
  return gmaillist_ != NULL ? *gmaillist_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* userProfile::mutable_gmaillist() {
  set_has_gmaillist();
  if (gmaillist_ == NULL) {
    gmaillist_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.userProfile.GmailList)
  return gmaillist_;
}
inline ::FromCs::sKBuiltinstringT* userProfile::release_gmaillist() {
  // @@protoc_insertion_point(field_release:FromCs.userProfile.GmailList)
  clear_has_gmaillist();
  ::FromCs::sKBuiltinstringT* temp = gmaillist_;
  gmaillist_ = NULL;
  return temp;
}
inline void userProfile::set_allocated_gmaillist(::FromCs::sKBuiltinstringT* gmaillist) {
  delete gmaillist_;
  gmaillist_ = gmaillist;
  if (gmaillist) {
    set_has_gmaillist();
  } else {
    clear_has_gmaillist();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.userProfile.GmailList)
}

// optional string Alias = 27;
inline bool userProfile::has_alias() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void userProfile::set_has_alias() {
  _has_bits_[0] |= 0x00000040u;
}
inline void userProfile::clear_has_alias() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void userProfile::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_alias();
}
inline const ::std::string& userProfile::alias() const {
  // @@protoc_insertion_point(field_get:FromCs.userProfile.Alias)
  return alias_.GetNoArena();
}
inline void userProfile::set_alias(const ::std::string& value) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.userProfile.Alias)
}
#if LANG_CXX11
inline void userProfile::set_alias(::std::string&& value) {
  set_has_alias();
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.userProfile.Alias)
}
#endif
inline void userProfile::set_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.userProfile.Alias)
}
inline void userProfile::set_alias(const char* value, size_t size) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.userProfile.Alias)
}
inline ::std::string* userProfile::mutable_alias() {
  set_has_alias();
  // @@protoc_insertion_point(field_mutable:FromCs.userProfile.Alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* userProfile::release_alias() {
  // @@protoc_insertion_point(field_release:FromCs.userProfile.Alias)
  clear_has_alias();
  return alias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void userProfile::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    set_has_alias();
  } else {
    clear_has_alias();
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:FromCs.userProfile.Alias)
}

// optional string WeiboNickname = 28;
inline bool userProfile::has_weibonickname() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void userProfile::set_has_weibonickname() {
  _has_bits_[0] |= 0x00000080u;
}
inline void userProfile::clear_has_weibonickname() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void userProfile::clear_weibonickname() {
  weibonickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_weibonickname();
}
inline const ::std::string& userProfile::weibonickname() const {
  // @@protoc_insertion_point(field_get:FromCs.userProfile.WeiboNickname)
  return weibonickname_.GetNoArena();
}
inline void userProfile::set_weibonickname(const ::std::string& value) {
  set_has_weibonickname();
  weibonickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.userProfile.WeiboNickname)
}
#if LANG_CXX11
inline void userProfile::set_weibonickname(::std::string&& value) {
  set_has_weibonickname();
  weibonickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.userProfile.WeiboNickname)
}
#endif
inline void userProfile::set_weibonickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_weibonickname();
  weibonickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.userProfile.WeiboNickname)
}
inline void userProfile::set_weibonickname(const char* value, size_t size) {
  set_has_weibonickname();
  weibonickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.userProfile.WeiboNickname)
}
inline ::std::string* userProfile::mutable_weibonickname() {
  set_has_weibonickname();
  // @@protoc_insertion_point(field_mutable:FromCs.userProfile.WeiboNickname)
  return weibonickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* userProfile::release_weibonickname() {
  // @@protoc_insertion_point(field_release:FromCs.userProfile.WeiboNickname)
  clear_has_weibonickname();
  return weibonickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void userProfile::set_allocated_weibonickname(::std::string* weibonickname) {
  if (weibonickname != NULL) {
    set_has_weibonickname();
  } else {
    clear_has_weibonickname();
  }
  weibonickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), weibonickname);
  // @@protoc_insertion_point(field_set_allocated:FromCs.userProfile.WeiboNickname)
}

// optional int32 WeiboFlag = 29;
inline bool userProfile::has_weiboflag() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void userProfile::set_has_weiboflag() {
  _has_bits_[1] |= 0x00000001u;
}
inline void userProfile::clear_has_weiboflag() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void userProfile::clear_weiboflag() {
  weiboflag_ = 0;
  clear_has_weiboflag();
}
inline ::google::protobuf::int32 userProfile::weiboflag() const {
  // @@protoc_insertion_point(field_get:FromCs.userProfile.WeiboFlag)
  return weiboflag_;
}
inline void userProfile::set_weiboflag(::google::protobuf::int32 value) {
  set_has_weiboflag();
  weiboflag_ = value;
  // @@protoc_insertion_point(field_set:FromCs.userProfile.WeiboFlag)
}

// optional int32 FaceBookFlag = 30;
inline bool userProfile::has_facebookflag() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void userProfile::set_has_facebookflag() {
  _has_bits_[1] |= 0x00000002u;
}
inline void userProfile::clear_has_facebookflag() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void userProfile::clear_facebookflag() {
  facebookflag_ = 0;
  clear_has_facebookflag();
}
inline ::google::protobuf::int32 userProfile::facebookflag() const {
  // @@protoc_insertion_point(field_get:FromCs.userProfile.FaceBookFlag)
  return facebookflag_;
}
inline void userProfile::set_facebookflag(::google::protobuf::int32 value) {
  set_has_facebookflag();
  facebookflag_ = value;
  // @@protoc_insertion_point(field_set:FromCs.userProfile.FaceBookFlag)
}

// optional int64 FBUserID = 31;
inline bool userProfile::has_fbuserid() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void userProfile::set_has_fbuserid() {
  _has_bits_[1] |= 0x00000004u;
}
inline void userProfile::clear_has_fbuserid() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void userProfile::clear_fbuserid() {
  fbuserid_ = GOOGLE_LONGLONG(0);
  clear_has_fbuserid();
}
inline ::google::protobuf::int64 userProfile::fbuserid() const {
  // @@protoc_insertion_point(field_get:FromCs.userProfile.FBUserID)
  return fbuserid_;
}
inline void userProfile::set_fbuserid(::google::protobuf::int64 value) {
  set_has_fbuserid();
  fbuserid_ = value;
  // @@protoc_insertion_point(field_set:FromCs.userProfile.FBUserID)
}

// optional string FBUserName = 32;
inline bool userProfile::has_fbusername() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void userProfile::set_has_fbusername() {
  _has_bits_[0] |= 0x00000100u;
}
inline void userProfile::clear_has_fbusername() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void userProfile::clear_fbusername() {
  fbusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fbusername();
}
inline const ::std::string& userProfile::fbusername() const {
  // @@protoc_insertion_point(field_get:FromCs.userProfile.FBUserName)
  return fbusername_.GetNoArena();
}
inline void userProfile::set_fbusername(const ::std::string& value) {
  set_has_fbusername();
  fbusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.userProfile.FBUserName)
}
#if LANG_CXX11
inline void userProfile::set_fbusername(::std::string&& value) {
  set_has_fbusername();
  fbusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.userProfile.FBUserName)
}
#endif
inline void userProfile::set_fbusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fbusername();
  fbusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.userProfile.FBUserName)
}
inline void userProfile::set_fbusername(const char* value, size_t size) {
  set_has_fbusername();
  fbusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.userProfile.FBUserName)
}
inline ::std::string* userProfile::mutable_fbusername() {
  set_has_fbusername();
  // @@protoc_insertion_point(field_mutable:FromCs.userProfile.FBUserName)
  return fbusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* userProfile::release_fbusername() {
  // @@protoc_insertion_point(field_release:FromCs.userProfile.FBUserName)
  clear_has_fbusername();
  return fbusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void userProfile::set_allocated_fbusername(::std::string* fbusername) {
  if (fbusername != NULL) {
    set_has_fbusername();
  } else {
    clear_has_fbusername();
  }
  fbusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fbusername);
  // @@protoc_insertion_point(field_set_allocated:FromCs.userProfile.FBUserName)
}

// optional int32 AlbumStyle = 33;
inline bool userProfile::has_albumstyle() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void userProfile::set_has_albumstyle() {
  _has_bits_[1] |= 0x00000008u;
}
inline void userProfile::clear_has_albumstyle() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void userProfile::clear_albumstyle() {
  albumstyle_ = 0;
  clear_has_albumstyle();
}
inline ::google::protobuf::int32 userProfile::albumstyle() const {
  // @@protoc_insertion_point(field_get:FromCs.userProfile.AlbumStyle)
  return albumstyle_;
}
inline void userProfile::set_albumstyle(::google::protobuf::int32 value) {
  set_has_albumstyle();
  albumstyle_ = value;
  // @@protoc_insertion_point(field_set:FromCs.userProfile.AlbumStyle)
}

// optional int32 AlbumFlag = 34;
inline bool userProfile::has_albumflag() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void userProfile::set_has_albumflag() {
  _has_bits_[1] |= 0x00000010u;
}
inline void userProfile::clear_has_albumflag() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void userProfile::clear_albumflag() {
  albumflag_ = 0;
  clear_has_albumflag();
}
inline ::google::protobuf::int32 userProfile::albumflag() const {
  // @@protoc_insertion_point(field_get:FromCs.userProfile.AlbumFlag)
  return albumflag_;
}
inline void userProfile::set_albumflag(::google::protobuf::int32 value) {
  set_has_albumflag();
  albumflag_ = value;
  // @@protoc_insertion_point(field_set:FromCs.userProfile.AlbumFlag)
}

// optional string AlbumBGImgID = 35;
inline bool userProfile::has_albumbgimgid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void userProfile::set_has_albumbgimgid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void userProfile::clear_has_albumbgimgid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void userProfile::clear_albumbgimgid() {
  albumbgimgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_albumbgimgid();
}
inline const ::std::string& userProfile::albumbgimgid() const {
  // @@protoc_insertion_point(field_get:FromCs.userProfile.AlbumBGImgID)
  return albumbgimgid_.GetNoArena();
}
inline void userProfile::set_albumbgimgid(const ::std::string& value) {
  set_has_albumbgimgid();
  albumbgimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.userProfile.AlbumBGImgID)
}
#if LANG_CXX11
inline void userProfile::set_albumbgimgid(::std::string&& value) {
  set_has_albumbgimgid();
  albumbgimgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.userProfile.AlbumBGImgID)
}
#endif
inline void userProfile::set_albumbgimgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_albumbgimgid();
  albumbgimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.userProfile.AlbumBGImgID)
}
inline void userProfile::set_albumbgimgid(const char* value, size_t size) {
  set_has_albumbgimgid();
  albumbgimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.userProfile.AlbumBGImgID)
}
inline ::std::string* userProfile::mutable_albumbgimgid() {
  set_has_albumbgimgid();
  // @@protoc_insertion_point(field_mutable:FromCs.userProfile.AlbumBGImgID)
  return albumbgimgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* userProfile::release_albumbgimgid() {
  // @@protoc_insertion_point(field_release:FromCs.userProfile.AlbumBGImgID)
  clear_has_albumbgimgid();
  return albumbgimgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void userProfile::set_allocated_albumbgimgid(::std::string* albumbgimgid) {
  if (albumbgimgid != NULL) {
    set_has_albumbgimgid();
  } else {
    clear_has_albumbgimgid();
  }
  albumbgimgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), albumbgimgid);
  // @@protoc_insertion_point(field_set_allocated:FromCs.userProfile.AlbumBGImgID)
}

// optional int32 TXNewsCategory = 36;
inline bool userProfile::has_txnewscategory() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void userProfile::set_has_txnewscategory() {
  _has_bits_[1] |= 0x00000020u;
}
inline void userProfile::clear_has_txnewscategory() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void userProfile::clear_txnewscategory() {
  txnewscategory_ = 0;
  clear_has_txnewscategory();
}
inline ::google::protobuf::int32 userProfile::txnewscategory() const {
  // @@protoc_insertion_point(field_get:FromCs.userProfile.TXNewsCategory)
  return txnewscategory_;
}
inline void userProfile::set_txnewscategory(::google::protobuf::int32 value) {
  set_has_txnewscategory();
  txnewscategory_ = value;
  // @@protoc_insertion_point(field_set:FromCs.userProfile.TXNewsCategory)
}

// optional string FBToken = 37;
inline bool userProfile::has_fbtoken() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void userProfile::set_has_fbtoken() {
  _has_bits_[0] |= 0x00000400u;
}
inline void userProfile::clear_has_fbtoken() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void userProfile::clear_fbtoken() {
  fbtoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fbtoken();
}
inline const ::std::string& userProfile::fbtoken() const {
  // @@protoc_insertion_point(field_get:FromCs.userProfile.FBToken)
  return fbtoken_.GetNoArena();
}
inline void userProfile::set_fbtoken(const ::std::string& value) {
  set_has_fbtoken();
  fbtoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.userProfile.FBToken)
}
#if LANG_CXX11
inline void userProfile::set_fbtoken(::std::string&& value) {
  set_has_fbtoken();
  fbtoken_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.userProfile.FBToken)
}
#endif
inline void userProfile::set_fbtoken(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fbtoken();
  fbtoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.userProfile.FBToken)
}
inline void userProfile::set_fbtoken(const char* value, size_t size) {
  set_has_fbtoken();
  fbtoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.userProfile.FBToken)
}
inline ::std::string* userProfile::mutable_fbtoken() {
  set_has_fbtoken();
  // @@protoc_insertion_point(field_mutable:FromCs.userProfile.FBToken)
  return fbtoken_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* userProfile::release_fbtoken() {
  // @@protoc_insertion_point(field_release:FromCs.userProfile.FBToken)
  clear_has_fbtoken();
  return fbtoken_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void userProfile::set_allocated_fbtoken(::std::string* fbtoken) {
  if (fbtoken != NULL) {
    set_has_fbtoken();
  } else {
    clear_has_fbtoken();
  }
  fbtoken_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fbtoken);
  // @@protoc_insertion_point(field_set_allocated:FromCs.userProfile.FBToken)
}

// optional string Country = 38;
inline bool userProfile::has_country() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void userProfile::set_has_country() {
  _has_bits_[0] |= 0x00000800u;
}
inline void userProfile::clear_has_country() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void userProfile::clear_country() {
  country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country();
}
inline const ::std::string& userProfile::country() const {
  // @@protoc_insertion_point(field_get:FromCs.userProfile.Country)
  return country_.GetNoArena();
}
inline void userProfile::set_country(const ::std::string& value) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.userProfile.Country)
}
#if LANG_CXX11
inline void userProfile::set_country(::std::string&& value) {
  set_has_country();
  country_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.userProfile.Country)
}
#endif
inline void userProfile::set_country(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.userProfile.Country)
}
inline void userProfile::set_country(const char* value, size_t size) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.userProfile.Country)
}
inline ::std::string* userProfile::mutable_country() {
  set_has_country();
  // @@protoc_insertion_point(field_mutable:FromCs.userProfile.Country)
  return country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* userProfile::release_country() {
  // @@protoc_insertion_point(field_release:FromCs.userProfile.Country)
  clear_has_country();
  return country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void userProfile::set_allocated_country(::std::string* country) {
  if (country != NULL) {
    set_has_country();
  } else {
    clear_has_country();
  }
  country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:FromCs.userProfile.Country)
}

// -------------------------------------------------------------------

// DisturbSetting

// optional int32 NightSetting = 1;
inline bool DisturbSetting::has_nightsetting() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DisturbSetting::set_has_nightsetting() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DisturbSetting::clear_has_nightsetting() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DisturbSetting::clear_nightsetting() {
  nightsetting_ = 0;
  clear_has_nightsetting();
}
inline ::google::protobuf::int32 DisturbSetting::nightsetting() const {
  // @@protoc_insertion_point(field_get:FromCs.DisturbSetting.NightSetting)
  return nightsetting_;
}
inline void DisturbSetting::set_nightsetting(::google::protobuf::int32 value) {
  set_has_nightsetting();
  nightsetting_ = value;
  // @@protoc_insertion_point(field_set:FromCs.DisturbSetting.NightSetting)
}

// optional .FromCs.sKBuiltinstringT NightTime = 2;
inline bool DisturbSetting::has_nighttime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DisturbSetting::set_has_nighttime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DisturbSetting::clear_has_nighttime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DisturbSetting::clear_nighttime() {
  if (nighttime_ != NULL) nighttime_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_nighttime();
}
inline const ::FromCs::sKBuiltinstringT& DisturbSetting::nighttime() const {
  // @@protoc_insertion_point(field_get:FromCs.DisturbSetting.NightTime)
  return nighttime_ != NULL ? *nighttime_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* DisturbSetting::mutable_nighttime() {
  set_has_nighttime();
  if (nighttime_ == NULL) {
    nighttime_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.DisturbSetting.NightTime)
  return nighttime_;
}
inline ::FromCs::sKBuiltinstringT* DisturbSetting::release_nighttime() {
  // @@protoc_insertion_point(field_release:FromCs.DisturbSetting.NightTime)
  clear_has_nighttime();
  ::FromCs::sKBuiltinstringT* temp = nighttime_;
  nighttime_ = NULL;
  return temp;
}
inline void DisturbSetting::set_allocated_nighttime(::FromCs::sKBuiltinstringT* nighttime) {
  delete nighttime_;
  nighttime_ = nighttime;
  if (nighttime) {
    set_has_nighttime();
  } else {
    clear_has_nighttime();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.DisturbSetting.NightTime)
}

// optional int32 AllDaySetting = 3;
inline bool DisturbSetting::has_alldaysetting() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DisturbSetting::set_has_alldaysetting() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DisturbSetting::clear_has_alldaysetting() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DisturbSetting::clear_alldaysetting() {
  alldaysetting_ = 0;
  clear_has_alldaysetting();
}
inline ::google::protobuf::int32 DisturbSetting::alldaysetting() const {
  // @@protoc_insertion_point(field_get:FromCs.DisturbSetting.AllDaySetting)
  return alldaysetting_;
}
inline void DisturbSetting::set_alldaysetting(::google::protobuf::int32 value) {
  set_has_alldaysetting();
  alldaysetting_ = value;
  // @@protoc_insertion_point(field_set:FromCs.DisturbSetting.AllDaySetting)
}

// optional .FromCs.sKBuiltinstringT AllDayTime = 4;
inline bool DisturbSetting::has_alldaytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DisturbSetting::set_has_alldaytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DisturbSetting::clear_has_alldaytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DisturbSetting::clear_alldaytime() {
  if (alldaytime_ != NULL) alldaytime_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_alldaytime();
}
inline const ::FromCs::sKBuiltinstringT& DisturbSetting::alldaytime() const {
  // @@protoc_insertion_point(field_get:FromCs.DisturbSetting.AllDayTime)
  return alldaytime_ != NULL ? *alldaytime_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* DisturbSetting::mutable_alldaytime() {
  set_has_alldaytime();
  if (alldaytime_ == NULL) {
    alldaytime_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.DisturbSetting.AllDayTime)
  return alldaytime_;
}
inline ::FromCs::sKBuiltinstringT* DisturbSetting::release_alldaytime() {
  // @@protoc_insertion_point(field_release:FromCs.DisturbSetting.AllDayTime)
  clear_has_alldaytime();
  ::FromCs::sKBuiltinstringT* temp = alldaytime_;
  alldaytime_ = NULL;
  return temp;
}
inline void DisturbSetting::set_allocated_alldaytime(::FromCs::sKBuiltinstringT* alldaytime) {
  delete alldaytime_;
  alldaytime_ = alldaytime;
  if (alldaytime) {
    set_has_alldaytime();
  } else {
    clear_has_alldaytime();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.DisturbSetting.AllDayTime)
}

// -------------------------------------------------------------------

// TimeSpan

// optional int32 BeginTime = 1;
inline bool TimeSpan::has_begintime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TimeSpan::set_has_begintime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TimeSpan::clear_has_begintime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TimeSpan::clear_begintime() {
  begintime_ = 0;
  clear_has_begintime();
}
inline ::google::protobuf::int32 TimeSpan::begintime() const {
  // @@protoc_insertion_point(field_get:FromCs.TimeSpan.BeginTime)
  return begintime_;
}
inline void TimeSpan::set_begintime(::google::protobuf::int32 value) {
  set_has_begintime();
  begintime_ = value;
  // @@protoc_insertion_point(field_set:FromCs.TimeSpan.BeginTime)
}

// optional int32 EndTime = 2;
inline bool TimeSpan::has_endtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TimeSpan::set_has_endtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TimeSpan::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TimeSpan::clear_endtime() {
  endtime_ = 0;
  clear_has_endtime();
}
inline ::google::protobuf::int32 TimeSpan::endtime() const {
  // @@protoc_insertion_point(field_get:FromCs.TimeSpan.EndTime)
  return endtime_;
}
inline void TimeSpan::set_endtime(::google::protobuf::int32 value) {
  set_has_endtime();
  endtime_ = value;
  // @@protoc_insertion_point(field_set:FromCs.TimeSpan.EndTime)
}

// -------------------------------------------------------------------

// GMailList

// optional int32 Count = 1;
inline bool GMailList::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GMailList::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GMailList::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GMailList::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 GMailList::count() const {
  // @@protoc_insertion_point(field_get:FromCs.GMailList.Count)
  return count_;
}
inline void GMailList::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:FromCs.GMailList.Count)
}

// optional .FromCs.sKBuiltinstringT list_ = 2;
inline bool GMailList::has_list_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GMailList::set_has_list_() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GMailList::clear_has_list_() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GMailList::clear_list_() {
  if (list__ != NULL) list__->::FromCs::sKBuiltinstringT::Clear();
  clear_has_list_();
}
inline const ::FromCs::sKBuiltinstringT& GMailList::list_() const {
  // @@protoc_insertion_point(field_get:FromCs.GMailList.list_)
  return list__ != NULL ? *list__
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* GMailList::mutable_list_() {
  set_has_list_();
  if (list__ == NULL) {
    list__ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.GMailList.list_)
  return list__;
}
inline ::FromCs::sKBuiltinstringT* GMailList::release_list_() {
  // @@protoc_insertion_point(field_release:FromCs.GMailList.list_)
  clear_has_list_();
  ::FromCs::sKBuiltinstringT* temp = list__;
  list__ = NULL;
  return temp;
}
inline void GMailList::set_allocated_list_(::FromCs::sKBuiltinstringT* list_) {
  delete list__;
  list__ = list_;
  if (list_) {
    set_has_list_();
  } else {
    clear_has_list_();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.GMailList.list_)
}

// -------------------------------------------------------------------

// GMailObj

// optional string GmailAcct = 1;
inline bool GMailObj::has_gmailacct() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GMailObj::set_has_gmailacct() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GMailObj::clear_has_gmailacct() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GMailObj::clear_gmailacct() {
  gmailacct_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gmailacct();
}
inline const ::std::string& GMailObj::gmailacct() const {
  // @@protoc_insertion_point(field_get:FromCs.GMailObj.GmailAcct)
  return gmailacct_.GetNoArena();
}
inline void GMailObj::set_gmailacct(const ::std::string& value) {
  set_has_gmailacct();
  gmailacct_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.GMailObj.GmailAcct)
}
#if LANG_CXX11
inline void GMailObj::set_gmailacct(::std::string&& value) {
  set_has_gmailacct();
  gmailacct_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.GMailObj.GmailAcct)
}
#endif
inline void GMailObj::set_gmailacct(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gmailacct();
  gmailacct_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.GMailObj.GmailAcct)
}
inline void GMailObj::set_gmailacct(const char* value, size_t size) {
  set_has_gmailacct();
  gmailacct_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.GMailObj.GmailAcct)
}
inline ::std::string* GMailObj::mutable_gmailacct() {
  set_has_gmailacct();
  // @@protoc_insertion_point(field_mutable:FromCs.GMailObj.GmailAcct)
  return gmailacct_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GMailObj::release_gmailacct() {
  // @@protoc_insertion_point(field_release:FromCs.GMailObj.GmailAcct)
  clear_has_gmailacct();
  return gmailacct_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GMailObj::set_allocated_gmailacct(::std::string* gmailacct) {
  if (gmailacct != NULL) {
    set_has_gmailacct();
  } else {
    clear_has_gmailacct();
  }
  gmailacct_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gmailacct);
  // @@protoc_insertion_point(field_set_allocated:FromCs.GMailObj.GmailAcct)
}

// optional int32 GmailSwitch = 2;
inline bool GMailObj::has_gmailswitch() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GMailObj::set_has_gmailswitch() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GMailObj::clear_has_gmailswitch() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GMailObj::clear_gmailswitch() {
  gmailswitch_ = 0;
  clear_has_gmailswitch();
}
inline ::google::protobuf::int32 GMailObj::gmailswitch() const {
  // @@protoc_insertion_point(field_get:FromCs.GMailObj.GmailSwitch)
  return gmailswitch_;
}
inline void GMailObj::set_gmailswitch(::google::protobuf::int32 value) {
  set_has_gmailswitch();
  gmailswitch_ = value;
  // @@protoc_insertion_point(field_set:FromCs.GMailObj.GmailSwitch)
}

// optional int32 GmailErrCode = 3;
inline bool GMailObj::has_gmailerrcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GMailObj::set_has_gmailerrcode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GMailObj::clear_has_gmailerrcode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GMailObj::clear_gmailerrcode() {
  gmailerrcode_ = 0;
  clear_has_gmailerrcode();
}
inline ::google::protobuf::int32 GMailObj::gmailerrcode() const {
  // @@protoc_insertion_point(field_get:FromCs.GMailObj.GmailErrCode)
  return gmailerrcode_;
}
inline void GMailObj::set_gmailerrcode(::google::protobuf::int32 value) {
  set_has_gmailerrcode();
  gmailerrcode_ = value;
  // @@protoc_insertion_point(field_set:FromCs.GMailObj.GmailErrCode)
}

// -------------------------------------------------------------------

// VerifyUserObj

// optional string Value = 1;
inline bool VerifyUserObj::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VerifyUserObj::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VerifyUserObj::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VerifyUserObj::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& VerifyUserObj::value() const {
  // @@protoc_insertion_point(field_get:FromCs.VerifyUserObj.Value)
  return value_.GetNoArena();
}
inline void VerifyUserObj::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.VerifyUserObj.Value)
}
#if LANG_CXX11
inline void VerifyUserObj::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.VerifyUserObj.Value)
}
#endif
inline void VerifyUserObj::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.VerifyUserObj.Value)
}
inline void VerifyUserObj::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.VerifyUserObj.Value)
}
inline ::std::string* VerifyUserObj::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:FromCs.VerifyUserObj.Value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VerifyUserObj::release_value() {
  // @@protoc_insertion_point(field_release:FromCs.VerifyUserObj.Value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VerifyUserObj::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:FromCs.VerifyUserObj.Value)
}

// optional string VerifyUserTicket = 2;
inline bool VerifyUserObj::has_verifyuserticket() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VerifyUserObj::set_has_verifyuserticket() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VerifyUserObj::clear_has_verifyuserticket() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VerifyUserObj::clear_verifyuserticket() {
  verifyuserticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_verifyuserticket();
}
inline const ::std::string& VerifyUserObj::verifyuserticket() const {
  // @@protoc_insertion_point(field_get:FromCs.VerifyUserObj.VerifyUserTicket)
  return verifyuserticket_.GetNoArena();
}
inline void VerifyUserObj::set_verifyuserticket(const ::std::string& value) {
  set_has_verifyuserticket();
  verifyuserticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.VerifyUserObj.VerifyUserTicket)
}
#if LANG_CXX11
inline void VerifyUserObj::set_verifyuserticket(::std::string&& value) {
  set_has_verifyuserticket();
  verifyuserticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.VerifyUserObj.VerifyUserTicket)
}
#endif
inline void VerifyUserObj::set_verifyuserticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_verifyuserticket();
  verifyuserticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.VerifyUserObj.VerifyUserTicket)
}
inline void VerifyUserObj::set_verifyuserticket(const char* value, size_t size) {
  set_has_verifyuserticket();
  verifyuserticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.VerifyUserObj.VerifyUserTicket)
}
inline ::std::string* VerifyUserObj::mutable_verifyuserticket() {
  set_has_verifyuserticket();
  // @@protoc_insertion_point(field_mutable:FromCs.VerifyUserObj.VerifyUserTicket)
  return verifyuserticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VerifyUserObj::release_verifyuserticket() {
  // @@protoc_insertion_point(field_release:FromCs.VerifyUserObj.VerifyUserTicket)
  clear_has_verifyuserticket();
  return verifyuserticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VerifyUserObj::set_allocated_verifyuserticket(::std::string* verifyuserticket) {
  if (verifyuserticket != NULL) {
    set_has_verifyuserticket();
  } else {
    clear_has_verifyuserticket();
  }
  verifyuserticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verifyuserticket);
  // @@protoc_insertion_point(field_set_allocated:FromCs.VerifyUserObj.VerifyUserTicket)
}

// optional string AntiSpamTicket = 3;
inline bool VerifyUserObj::has_antispamticket() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VerifyUserObj::set_has_antispamticket() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VerifyUserObj::clear_has_antispamticket() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VerifyUserObj::clear_antispamticket() {
  antispamticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_antispamticket();
}
inline const ::std::string& VerifyUserObj::antispamticket() const {
  // @@protoc_insertion_point(field_get:FromCs.VerifyUserObj.AntiSpamTicket)
  return antispamticket_.GetNoArena();
}
inline void VerifyUserObj::set_antispamticket(const ::std::string& value) {
  set_has_antispamticket();
  antispamticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.VerifyUserObj.AntiSpamTicket)
}
#if LANG_CXX11
inline void VerifyUserObj::set_antispamticket(::std::string&& value) {
  set_has_antispamticket();
  antispamticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.VerifyUserObj.AntiSpamTicket)
}
#endif
inline void VerifyUserObj::set_antispamticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_antispamticket();
  antispamticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.VerifyUserObj.AntiSpamTicket)
}
inline void VerifyUserObj::set_antispamticket(const char* value, size_t size) {
  set_has_antispamticket();
  antispamticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.VerifyUserObj.AntiSpamTicket)
}
inline ::std::string* VerifyUserObj::mutable_antispamticket() {
  set_has_antispamticket();
  // @@protoc_insertion_point(field_mutable:FromCs.VerifyUserObj.AntiSpamTicket)
  return antispamticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VerifyUserObj::release_antispamticket() {
  // @@protoc_insertion_point(field_release:FromCs.VerifyUserObj.AntiSpamTicket)
  clear_has_antispamticket();
  return antispamticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VerifyUserObj::set_allocated_antispamticket(::std::string* antispamticket) {
  if (antispamticket != NULL) {
    set_has_antispamticket();
  } else {
    clear_has_antispamticket();
  }
  antispamticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), antispamticket);
  // @@protoc_insertion_point(field_set_allocated:FromCs.VerifyUserObj.AntiSpamTicket)
}

// optional int32 FriendFlag = 4;
inline bool VerifyUserObj::has_friendflag() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VerifyUserObj::set_has_friendflag() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VerifyUserObj::clear_has_friendflag() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VerifyUserObj::clear_friendflag() {
  friendflag_ = 0;
  clear_has_friendflag();
}
inline ::google::protobuf::int32 VerifyUserObj::friendflag() const {
  // @@protoc_insertion_point(field_get:FromCs.VerifyUserObj.FriendFlag)
  return friendflag_;
}
inline void VerifyUserObj::set_friendflag(::google::protobuf::int32 value) {
  set_has_friendflag();
  friendflag_ = value;
  // @@protoc_insertion_point(field_set:FromCs.VerifyUserObj.FriendFlag)
}

// optional string ChatRoomUserName = 5;
inline bool VerifyUserObj::has_chatroomusername() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VerifyUserObj::set_has_chatroomusername() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VerifyUserObj::clear_has_chatroomusername() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VerifyUserObj::clear_chatroomusername() {
  chatroomusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chatroomusername();
}
inline const ::std::string& VerifyUserObj::chatroomusername() const {
  // @@protoc_insertion_point(field_get:FromCs.VerifyUserObj.ChatRoomUserName)
  return chatroomusername_.GetNoArena();
}
inline void VerifyUserObj::set_chatroomusername(const ::std::string& value) {
  set_has_chatroomusername();
  chatroomusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.VerifyUserObj.ChatRoomUserName)
}
#if LANG_CXX11
inline void VerifyUserObj::set_chatroomusername(::std::string&& value) {
  set_has_chatroomusername();
  chatroomusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.VerifyUserObj.ChatRoomUserName)
}
#endif
inline void VerifyUserObj::set_chatroomusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_chatroomusername();
  chatroomusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.VerifyUserObj.ChatRoomUserName)
}
inline void VerifyUserObj::set_chatroomusername(const char* value, size_t size) {
  set_has_chatroomusername();
  chatroomusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.VerifyUserObj.ChatRoomUserName)
}
inline ::std::string* VerifyUserObj::mutable_chatroomusername() {
  set_has_chatroomusername();
  // @@protoc_insertion_point(field_mutable:FromCs.VerifyUserObj.ChatRoomUserName)
  return chatroomusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VerifyUserObj::release_chatroomusername() {
  // @@protoc_insertion_point(field_release:FromCs.VerifyUserObj.ChatRoomUserName)
  clear_has_chatroomusername();
  return chatroomusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VerifyUserObj::set_allocated_chatroomusername(::std::string* chatroomusername) {
  if (chatroomusername != NULL) {
    set_has_chatroomusername();
  } else {
    clear_has_chatroomusername();
  }
  chatroomusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chatroomusername);
  // @@protoc_insertion_point(field_set_allocated:FromCs.VerifyUserObj.ChatRoomUserName)
}

// optional string SourceUserName = 6;
inline bool VerifyUserObj::has_sourceusername() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VerifyUserObj::set_has_sourceusername() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VerifyUserObj::clear_has_sourceusername() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VerifyUserObj::clear_sourceusername() {
  sourceusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sourceusername();
}
inline const ::std::string& VerifyUserObj::sourceusername() const {
  // @@protoc_insertion_point(field_get:FromCs.VerifyUserObj.SourceUserName)
  return sourceusername_.GetNoArena();
}
inline void VerifyUserObj::set_sourceusername(const ::std::string& value) {
  set_has_sourceusername();
  sourceusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.VerifyUserObj.SourceUserName)
}
#if LANG_CXX11
inline void VerifyUserObj::set_sourceusername(::std::string&& value) {
  set_has_sourceusername();
  sourceusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.VerifyUserObj.SourceUserName)
}
#endif
inline void VerifyUserObj::set_sourceusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sourceusername();
  sourceusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.VerifyUserObj.SourceUserName)
}
inline void VerifyUserObj::set_sourceusername(const char* value, size_t size) {
  set_has_sourceusername();
  sourceusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.VerifyUserObj.SourceUserName)
}
inline ::std::string* VerifyUserObj::mutable_sourceusername() {
  set_has_sourceusername();
  // @@protoc_insertion_point(field_mutable:FromCs.VerifyUserObj.SourceUserName)
  return sourceusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VerifyUserObj::release_sourceusername() {
  // @@protoc_insertion_point(field_release:FromCs.VerifyUserObj.SourceUserName)
  clear_has_sourceusername();
  return sourceusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VerifyUserObj::set_allocated_sourceusername(::std::string* sourceusername) {
  if (sourceusername != NULL) {
    set_has_sourceusername();
  } else {
    clear_has_sourceusername();
  }
  sourceusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sourceusername);
  // @@protoc_insertion_point(field_set_allocated:FromCs.VerifyUserObj.SourceUserName)
}

// optional string SourceNickName = 7;
inline bool VerifyUserObj::has_sourcenickname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VerifyUserObj::set_has_sourcenickname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VerifyUserObj::clear_has_sourcenickname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VerifyUserObj::clear_sourcenickname() {
  sourcenickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sourcenickname();
}
inline const ::std::string& VerifyUserObj::sourcenickname() const {
  // @@protoc_insertion_point(field_get:FromCs.VerifyUserObj.SourceNickName)
  return sourcenickname_.GetNoArena();
}
inline void VerifyUserObj::set_sourcenickname(const ::std::string& value) {
  set_has_sourcenickname();
  sourcenickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.VerifyUserObj.SourceNickName)
}
#if LANG_CXX11
inline void VerifyUserObj::set_sourcenickname(::std::string&& value) {
  set_has_sourcenickname();
  sourcenickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.VerifyUserObj.SourceNickName)
}
#endif
inline void VerifyUserObj::set_sourcenickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sourcenickname();
  sourcenickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.VerifyUserObj.SourceNickName)
}
inline void VerifyUserObj::set_sourcenickname(const char* value, size_t size) {
  set_has_sourcenickname();
  sourcenickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.VerifyUserObj.SourceNickName)
}
inline ::std::string* VerifyUserObj::mutable_sourcenickname() {
  set_has_sourcenickname();
  // @@protoc_insertion_point(field_mutable:FromCs.VerifyUserObj.SourceNickName)
  return sourcenickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VerifyUserObj::release_sourcenickname() {
  // @@protoc_insertion_point(field_release:FromCs.VerifyUserObj.SourceNickName)
  clear_has_sourcenickname();
  return sourcenickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VerifyUserObj::set_allocated_sourcenickname(::std::string* sourcenickname) {
  if (sourcenickname != NULL) {
    set_has_sourcenickname();
  } else {
    clear_has_sourcenickname();
  }
  sourcenickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sourcenickname);
  // @@protoc_insertion_point(field_set_allocated:FromCs.VerifyUserObj.SourceNickName)
}

// -------------------------------------------------------------------

// CustomizedInfoObj

// optional int32 BrandFlag = 1;
inline bool CustomizedInfoObj::has_brandflag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CustomizedInfoObj::set_has_brandflag() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CustomizedInfoObj::clear_has_brandflag() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CustomizedInfoObj::clear_brandflag() {
  brandflag_ = 0;
  clear_has_brandflag();
}
inline ::google::protobuf::int32 CustomizedInfoObj::brandflag() const {
  // @@protoc_insertion_point(field_get:FromCs.CustomizedInfoObj.BrandFlag)
  return brandflag_;
}
inline void CustomizedInfoObj::set_brandflag(::google::protobuf::int32 value) {
  set_has_brandflag();
  brandflag_ = value;
  // @@protoc_insertion_point(field_set:FromCs.CustomizedInfoObj.BrandFlag)
}

// optional string ExternalInfo = 2;
inline bool CustomizedInfoObj::has_externalinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CustomizedInfoObj::set_has_externalinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CustomizedInfoObj::clear_has_externalinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CustomizedInfoObj::clear_externalinfo() {
  externalinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_externalinfo();
}
inline const ::std::string& CustomizedInfoObj::externalinfo() const {
  // @@protoc_insertion_point(field_get:FromCs.CustomizedInfoObj.ExternalInfo)
  return externalinfo_.GetNoArena();
}
inline void CustomizedInfoObj::set_externalinfo(const ::std::string& value) {
  set_has_externalinfo();
  externalinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.CustomizedInfoObj.ExternalInfo)
}
#if LANG_CXX11
inline void CustomizedInfoObj::set_externalinfo(::std::string&& value) {
  set_has_externalinfo();
  externalinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.CustomizedInfoObj.ExternalInfo)
}
#endif
inline void CustomizedInfoObj::set_externalinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_externalinfo();
  externalinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.CustomizedInfoObj.ExternalInfo)
}
inline void CustomizedInfoObj::set_externalinfo(const char* value, size_t size) {
  set_has_externalinfo();
  externalinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.CustomizedInfoObj.ExternalInfo)
}
inline ::std::string* CustomizedInfoObj::mutable_externalinfo() {
  set_has_externalinfo();
  // @@protoc_insertion_point(field_mutable:FromCs.CustomizedInfoObj.ExternalInfo)
  return externalinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CustomizedInfoObj::release_externalinfo() {
  // @@protoc_insertion_point(field_release:FromCs.CustomizedInfoObj.ExternalInfo)
  clear_has_externalinfo();
  return externalinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CustomizedInfoObj::set_allocated_externalinfo(::std::string* externalinfo) {
  if (externalinfo != NULL) {
    set_has_externalinfo();
  } else {
    clear_has_externalinfo();
  }
  externalinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), externalinfo);
  // @@protoc_insertion_point(field_set_allocated:FromCs.CustomizedInfoObj.ExternalInfo)
}

// optional string BrandInfo = 3;
inline bool CustomizedInfoObj::has_brandinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CustomizedInfoObj::set_has_brandinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CustomizedInfoObj::clear_has_brandinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CustomizedInfoObj::clear_brandinfo() {
  brandinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_brandinfo();
}
inline const ::std::string& CustomizedInfoObj::brandinfo() const {
  // @@protoc_insertion_point(field_get:FromCs.CustomizedInfoObj.BrandInfo)
  return brandinfo_.GetNoArena();
}
inline void CustomizedInfoObj::set_brandinfo(const ::std::string& value) {
  set_has_brandinfo();
  brandinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.CustomizedInfoObj.BrandInfo)
}
#if LANG_CXX11
inline void CustomizedInfoObj::set_brandinfo(::std::string&& value) {
  set_has_brandinfo();
  brandinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.CustomizedInfoObj.BrandInfo)
}
#endif
inline void CustomizedInfoObj::set_brandinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_brandinfo();
  brandinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.CustomizedInfoObj.BrandInfo)
}
inline void CustomizedInfoObj::set_brandinfo(const char* value, size_t size) {
  set_has_brandinfo();
  brandinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.CustomizedInfoObj.BrandInfo)
}
inline ::std::string* CustomizedInfoObj::mutable_brandinfo() {
  set_has_brandinfo();
  // @@protoc_insertion_point(field_mutable:FromCs.CustomizedInfoObj.BrandInfo)
  return brandinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CustomizedInfoObj::release_brandinfo() {
  // @@protoc_insertion_point(field_release:FromCs.CustomizedInfoObj.BrandInfo)
  clear_has_brandinfo();
  return brandinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CustomizedInfoObj::set_allocated_brandinfo(::std::string* brandinfo) {
  if (brandinfo != NULL) {
    set_has_brandinfo();
  } else {
    clear_has_brandinfo();
  }
  brandinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brandinfo);
  // @@protoc_insertion_point(field_set_allocated:FromCs.CustomizedInfoObj.BrandInfo)
}

// optional string BrandIconURL = 4;
inline bool CustomizedInfoObj::has_brandiconurl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CustomizedInfoObj::set_has_brandiconurl() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CustomizedInfoObj::clear_has_brandiconurl() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CustomizedInfoObj::clear_brandiconurl() {
  brandiconurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_brandiconurl();
}
inline const ::std::string& CustomizedInfoObj::brandiconurl() const {
  // @@protoc_insertion_point(field_get:FromCs.CustomizedInfoObj.BrandIconURL)
  return brandiconurl_.GetNoArena();
}
inline void CustomizedInfoObj::set_brandiconurl(const ::std::string& value) {
  set_has_brandiconurl();
  brandiconurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.CustomizedInfoObj.BrandIconURL)
}
#if LANG_CXX11
inline void CustomizedInfoObj::set_brandiconurl(::std::string&& value) {
  set_has_brandiconurl();
  brandiconurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.CustomizedInfoObj.BrandIconURL)
}
#endif
inline void CustomizedInfoObj::set_brandiconurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_brandiconurl();
  brandiconurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.CustomizedInfoObj.BrandIconURL)
}
inline void CustomizedInfoObj::set_brandiconurl(const char* value, size_t size) {
  set_has_brandiconurl();
  brandiconurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.CustomizedInfoObj.BrandIconURL)
}
inline ::std::string* CustomizedInfoObj::mutable_brandiconurl() {
  set_has_brandiconurl();
  // @@protoc_insertion_point(field_mutable:FromCs.CustomizedInfoObj.BrandIconURL)
  return brandiconurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CustomizedInfoObj::release_brandiconurl() {
  // @@protoc_insertion_point(field_release:FromCs.CustomizedInfoObj.BrandIconURL)
  clear_has_brandiconurl();
  return brandiconurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CustomizedInfoObj::set_allocated_brandiconurl(::std::string* brandiconurl) {
  if (brandiconurl != NULL) {
    set_has_brandiconurl();
  } else {
    clear_has_brandiconurl();
  }
  brandiconurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brandiconurl);
  // @@protoc_insertion_point(field_set_allocated:FromCs.CustomizedInfoObj.BrandIconURL)
}

// -------------------------------------------------------------------

// roomInfo

// optional .FromCs.sKBuiltinstringT UserName = 1;
inline bool roomInfo::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void roomInfo::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void roomInfo::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void roomInfo::clear_username() {
  if (username_ != NULL) username_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_username();
}
inline const ::FromCs::sKBuiltinstringT& roomInfo::username() const {
  // @@protoc_insertion_point(field_get:FromCs.roomInfo.UserName)
  return username_ != NULL ? *username_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* roomInfo::mutable_username() {
  set_has_username();
  if (username_ == NULL) {
    username_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.roomInfo.UserName)
  return username_;
}
inline ::FromCs::sKBuiltinstringT* roomInfo::release_username() {
  // @@protoc_insertion_point(field_release:FromCs.roomInfo.UserName)
  clear_has_username();
  ::FromCs::sKBuiltinstringT* temp = username_;
  username_ = NULL;
  return temp;
}
inline void roomInfo::set_allocated_username(::FromCs::sKBuiltinstringT* username) {
  delete username_;
  username_ = username;
  if (username) {
    set_has_username();
  } else {
    clear_has_username();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.roomInfo.UserName)
}

// optional .FromCs.sKBuiltinstringT NickName = 2;
inline bool roomInfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void roomInfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void roomInfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void roomInfo::clear_nickname() {
  if (nickname_ != NULL) nickname_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_nickname();
}
inline const ::FromCs::sKBuiltinstringT& roomInfo::nickname() const {
  // @@protoc_insertion_point(field_get:FromCs.roomInfo.NickName)
  return nickname_ != NULL ? *nickname_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* roomInfo::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == NULL) {
    nickname_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.roomInfo.NickName)
  return nickname_;
}
inline ::FromCs::sKBuiltinstringT* roomInfo::release_nickname() {
  // @@protoc_insertion_point(field_release:FromCs.roomInfo.NickName)
  clear_has_nickname();
  ::FromCs::sKBuiltinstringT* temp = nickname_;
  nickname_ = NULL;
  return temp;
}
inline void roomInfo::set_allocated_nickname(::FromCs::sKBuiltinstringT* nickname) {
  delete nickname_;
  nickname_ = nickname;
  if (nickname) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.roomInfo.NickName)
}

// -------------------------------------------------------------------

// ContactProfile

// optional .FromCs.sKBuiltinstringT UserName = 1;
inline bool ContactProfile::has_username() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ContactProfile::set_has_username() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ContactProfile::clear_has_username() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ContactProfile::clear_username() {
  if (username_ != NULL) username_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_username();
}
inline const ::FromCs::sKBuiltinstringT& ContactProfile::username() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactProfile.UserName)
  return username_ != NULL ? *username_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* ContactProfile::mutable_username() {
  set_has_username();
  if (username_ == NULL) {
    username_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.ContactProfile.UserName)
  return username_;
}
inline ::FromCs::sKBuiltinstringT* ContactProfile::release_username() {
  // @@protoc_insertion_point(field_release:FromCs.ContactProfile.UserName)
  clear_has_username();
  ::FromCs::sKBuiltinstringT* temp = username_;
  username_ = NULL;
  return temp;
}
inline void ContactProfile::set_allocated_username(::FromCs::sKBuiltinstringT* username) {
  delete username_;
  username_ = username;
  if (username) {
    set_has_username();
  } else {
    clear_has_username();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.ContactProfile.UserName)
}

// optional .FromCs.sKBuiltinstringT NickName = 2;
inline bool ContactProfile::has_nickname() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ContactProfile::set_has_nickname() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ContactProfile::clear_has_nickname() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ContactProfile::clear_nickname() {
  if (nickname_ != NULL) nickname_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_nickname();
}
inline const ::FromCs::sKBuiltinstringT& ContactProfile::nickname() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactProfile.NickName)
  return nickname_ != NULL ? *nickname_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* ContactProfile::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == NULL) {
    nickname_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.ContactProfile.NickName)
  return nickname_;
}
inline ::FromCs::sKBuiltinstringT* ContactProfile::release_nickname() {
  // @@protoc_insertion_point(field_release:FromCs.ContactProfile.NickName)
  clear_has_nickname();
  ::FromCs::sKBuiltinstringT* temp = nickname_;
  nickname_ = NULL;
  return temp;
}
inline void ContactProfile::set_allocated_nickname(::FromCs::sKBuiltinstringT* nickname) {
  delete nickname_;
  nickname_ = nickname;
  if (nickname) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.ContactProfile.NickName)
}

// optional .FromCs.sKBuiltinstringT PYInitial = 3;
inline bool ContactProfile::has_pyinitial() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ContactProfile::set_has_pyinitial() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ContactProfile::clear_has_pyinitial() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ContactProfile::clear_pyinitial() {
  if (pyinitial_ != NULL) pyinitial_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_pyinitial();
}
inline const ::FromCs::sKBuiltinstringT& ContactProfile::pyinitial() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactProfile.PYInitial)
  return pyinitial_ != NULL ? *pyinitial_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* ContactProfile::mutable_pyinitial() {
  set_has_pyinitial();
  if (pyinitial_ == NULL) {
    pyinitial_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.ContactProfile.PYInitial)
  return pyinitial_;
}
inline ::FromCs::sKBuiltinstringT* ContactProfile::release_pyinitial() {
  // @@protoc_insertion_point(field_release:FromCs.ContactProfile.PYInitial)
  clear_has_pyinitial();
  ::FromCs::sKBuiltinstringT* temp = pyinitial_;
  pyinitial_ = NULL;
  return temp;
}
inline void ContactProfile::set_allocated_pyinitial(::FromCs::sKBuiltinstringT* pyinitial) {
  delete pyinitial_;
  pyinitial_ = pyinitial;
  if (pyinitial) {
    set_has_pyinitial();
  } else {
    clear_has_pyinitial();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.ContactProfile.PYInitial)
}

// optional .FromCs.sKBuiltinstringT QuanPin = 4;
inline bool ContactProfile::has_quanpin() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ContactProfile::set_has_quanpin() {
  _has_bits_[0] |= 0x00100000u;
}
inline void ContactProfile::clear_has_quanpin() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void ContactProfile::clear_quanpin() {
  if (quanpin_ != NULL) quanpin_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_quanpin();
}
inline const ::FromCs::sKBuiltinstringT& ContactProfile::quanpin() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactProfile.QuanPin)
  return quanpin_ != NULL ? *quanpin_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* ContactProfile::mutable_quanpin() {
  set_has_quanpin();
  if (quanpin_ == NULL) {
    quanpin_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.ContactProfile.QuanPin)
  return quanpin_;
}
inline ::FromCs::sKBuiltinstringT* ContactProfile::release_quanpin() {
  // @@protoc_insertion_point(field_release:FromCs.ContactProfile.QuanPin)
  clear_has_quanpin();
  ::FromCs::sKBuiltinstringT* temp = quanpin_;
  quanpin_ = NULL;
  return temp;
}
inline void ContactProfile::set_allocated_quanpin(::FromCs::sKBuiltinstringT* quanpin) {
  delete quanpin_;
  quanpin_ = quanpin;
  if (quanpin) {
    set_has_quanpin();
  } else {
    clear_has_quanpin();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.ContactProfile.QuanPin)
}

// optional int32 Sex = 5;
inline bool ContactProfile::has_sex() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void ContactProfile::set_has_sex() {
  _has_bits_[0] |= 0x20000000u;
}
inline void ContactProfile::clear_has_sex() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void ContactProfile::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 ContactProfile::sex() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactProfile.Sex)
  return sex_;
}
inline void ContactProfile::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ContactProfile.Sex)
}

// optional .FromCs.sKBuiltinstringT ImgBuf = 6;
inline bool ContactProfile::has_imgbuf() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void ContactProfile::set_has_imgbuf() {
  _has_bits_[0] |= 0x00200000u;
}
inline void ContactProfile::clear_has_imgbuf() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void ContactProfile::clear_imgbuf() {
  if (imgbuf_ != NULL) imgbuf_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_imgbuf();
}
inline const ::FromCs::sKBuiltinstringT& ContactProfile::imgbuf() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactProfile.ImgBuf)
  return imgbuf_ != NULL ? *imgbuf_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* ContactProfile::mutable_imgbuf() {
  set_has_imgbuf();
  if (imgbuf_ == NULL) {
    imgbuf_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.ContactProfile.ImgBuf)
  return imgbuf_;
}
inline ::FromCs::sKBuiltinstringT* ContactProfile::release_imgbuf() {
  // @@protoc_insertion_point(field_release:FromCs.ContactProfile.ImgBuf)
  clear_has_imgbuf();
  ::FromCs::sKBuiltinstringT* temp = imgbuf_;
  imgbuf_ = NULL;
  return temp;
}
inline void ContactProfile::set_allocated_imgbuf(::FromCs::sKBuiltinstringT* imgbuf) {
  delete imgbuf_;
  imgbuf_ = imgbuf;
  if (imgbuf) {
    set_has_imgbuf();
  } else {
    clear_has_imgbuf();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.ContactProfile.ImgBuf)
}

// optional int32 BitMask = 7;
inline bool ContactProfile::has_bitmask() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void ContactProfile::set_has_bitmask() {
  _has_bits_[0] |= 0x40000000u;
}
inline void ContactProfile::clear_has_bitmask() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void ContactProfile::clear_bitmask() {
  bitmask_ = 0;
  clear_has_bitmask();
}
inline ::google::protobuf::int32 ContactProfile::bitmask() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactProfile.BitMask)
  return bitmask_;
}
inline void ContactProfile::set_bitmask(::google::protobuf::int32 value) {
  set_has_bitmask();
  bitmask_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ContactProfile.BitMask)
}

// optional int32 BitVal = 8;
inline bool ContactProfile::has_bitval() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void ContactProfile::set_has_bitval() {
  _has_bits_[0] |= 0x80000000u;
}
inline void ContactProfile::clear_has_bitval() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void ContactProfile::clear_bitval() {
  bitval_ = 0;
  clear_has_bitval();
}
inline ::google::protobuf::int32 ContactProfile::bitval() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactProfile.BitVal)
  return bitval_;
}
inline void ContactProfile::set_bitval(::google::protobuf::int32 value) {
  set_has_bitval();
  bitval_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ContactProfile.BitVal)
}

// optional int32 ImgFlag = 9;
inline bool ContactProfile::has_imgflag() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void ContactProfile::set_has_imgflag() {
  _has_bits_[1] |= 0x00000001u;
}
inline void ContactProfile::clear_has_imgflag() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void ContactProfile::clear_imgflag() {
  imgflag_ = 0;
  clear_has_imgflag();
}
inline ::google::protobuf::int32 ContactProfile::imgflag() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactProfile.ImgFlag)
  return imgflag_;
}
inline void ContactProfile::set_imgflag(::google::protobuf::int32 value) {
  set_has_imgflag();
  imgflag_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ContactProfile.ImgFlag)
}

// optional .FromCs.sKBuiltinstringT Remark = 10;
inline bool ContactProfile::has_remark() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void ContactProfile::set_has_remark() {
  _has_bits_[0] |= 0x00400000u;
}
inline void ContactProfile::clear_has_remark() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void ContactProfile::clear_remark() {
  if (remark_ != NULL) remark_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_remark();
}
inline const ::FromCs::sKBuiltinstringT& ContactProfile::remark() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactProfile.Remark)
  return remark_ != NULL ? *remark_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* ContactProfile::mutable_remark() {
  set_has_remark();
  if (remark_ == NULL) {
    remark_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.ContactProfile.Remark)
  return remark_;
}
inline ::FromCs::sKBuiltinstringT* ContactProfile::release_remark() {
  // @@protoc_insertion_point(field_release:FromCs.ContactProfile.Remark)
  clear_has_remark();
  ::FromCs::sKBuiltinstringT* temp = remark_;
  remark_ = NULL;
  return temp;
}
inline void ContactProfile::set_allocated_remark(::FromCs::sKBuiltinstringT* remark) {
  delete remark_;
  remark_ = remark;
  if (remark) {
    set_has_remark();
  } else {
    clear_has_remark();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.ContactProfile.Remark)
}

// optional .FromCs.sKBuiltinstringT RemarkPYInitial = 11;
inline bool ContactProfile::has_remarkpyinitial() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void ContactProfile::set_has_remarkpyinitial() {
  _has_bits_[0] |= 0x00800000u;
}
inline void ContactProfile::clear_has_remarkpyinitial() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void ContactProfile::clear_remarkpyinitial() {
  if (remarkpyinitial_ != NULL) remarkpyinitial_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_remarkpyinitial();
}
inline const ::FromCs::sKBuiltinstringT& ContactProfile::remarkpyinitial() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactProfile.RemarkPYInitial)
  return remarkpyinitial_ != NULL ? *remarkpyinitial_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* ContactProfile::mutable_remarkpyinitial() {
  set_has_remarkpyinitial();
  if (remarkpyinitial_ == NULL) {
    remarkpyinitial_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.ContactProfile.RemarkPYInitial)
  return remarkpyinitial_;
}
inline ::FromCs::sKBuiltinstringT* ContactProfile::release_remarkpyinitial() {
  // @@protoc_insertion_point(field_release:FromCs.ContactProfile.RemarkPYInitial)
  clear_has_remarkpyinitial();
  ::FromCs::sKBuiltinstringT* temp = remarkpyinitial_;
  remarkpyinitial_ = NULL;
  return temp;
}
inline void ContactProfile::set_allocated_remarkpyinitial(::FromCs::sKBuiltinstringT* remarkpyinitial) {
  delete remarkpyinitial_;
  remarkpyinitial_ = remarkpyinitial;
  if (remarkpyinitial) {
    set_has_remarkpyinitial();
  } else {
    clear_has_remarkpyinitial();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.ContactProfile.RemarkPYInitial)
}

// optional .FromCs.sKBuiltinstringT RemarkQuanPin = 12;
inline bool ContactProfile::has_remarkquanpin() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void ContactProfile::set_has_remarkquanpin() {
  _has_bits_[0] |= 0x01000000u;
}
inline void ContactProfile::clear_has_remarkquanpin() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void ContactProfile::clear_remarkquanpin() {
  if (remarkquanpin_ != NULL) remarkquanpin_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_remarkquanpin();
}
inline const ::FromCs::sKBuiltinstringT& ContactProfile::remarkquanpin() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactProfile.RemarkQuanPin)
  return remarkquanpin_ != NULL ? *remarkquanpin_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* ContactProfile::mutable_remarkquanpin() {
  set_has_remarkquanpin();
  if (remarkquanpin_ == NULL) {
    remarkquanpin_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.ContactProfile.RemarkQuanPin)
  return remarkquanpin_;
}
inline ::FromCs::sKBuiltinstringT* ContactProfile::release_remarkquanpin() {
  // @@protoc_insertion_point(field_release:FromCs.ContactProfile.RemarkQuanPin)
  clear_has_remarkquanpin();
  ::FromCs::sKBuiltinstringT* temp = remarkquanpin_;
  remarkquanpin_ = NULL;
  return temp;
}
inline void ContactProfile::set_allocated_remarkquanpin(::FromCs::sKBuiltinstringT* remarkquanpin) {
  delete remarkquanpin_;
  remarkquanpin_ = remarkquanpin;
  if (remarkquanpin) {
    set_has_remarkquanpin();
  } else {
    clear_has_remarkquanpin();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.ContactProfile.RemarkQuanPin)
}

// optional int32 ContactType = 13;
inline bool ContactProfile::has_contacttype() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void ContactProfile::set_has_contacttype() {
  _has_bits_[1] |= 0x00000002u;
}
inline void ContactProfile::clear_has_contacttype() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void ContactProfile::clear_contacttype() {
  contacttype_ = 0;
  clear_has_contacttype();
}
inline ::google::protobuf::int32 ContactProfile::contacttype() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactProfile.ContactType)
  return contacttype_;
}
inline void ContactProfile::set_contacttype(::google::protobuf::int32 value) {
  set_has_contacttype();
  contacttype_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ContactProfile.ContactType)
}

// optional int32 RoomInfoCount = 14;
inline bool ContactProfile::has_roominfocount() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void ContactProfile::set_has_roominfocount() {
  _has_bits_[1] |= 0x00000004u;
}
inline void ContactProfile::clear_has_roominfocount() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void ContactProfile::clear_roominfocount() {
  roominfocount_ = 0;
  clear_has_roominfocount();
}
inline ::google::protobuf::int32 ContactProfile::roominfocount() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactProfile.RoomInfoCount)
  return roominfocount_;
}
inline void ContactProfile::set_roominfocount(::google::protobuf::int32 value) {
  set_has_roominfocount();
  roominfocount_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ContactProfile.RoomInfoCount)
}

// optional .FromCs.sKBuiltinstringT roomInfoList_ = 15;
inline bool ContactProfile::has_roominfolist_() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void ContactProfile::set_has_roominfolist_() {
  _has_bits_[0] |= 0x02000000u;
}
inline void ContactProfile::clear_has_roominfolist_() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void ContactProfile::clear_roominfolist_() {
  if (roominfolist__ != NULL) roominfolist__->::FromCs::sKBuiltinstringT::Clear();
  clear_has_roominfolist_();
}
inline const ::FromCs::sKBuiltinstringT& ContactProfile::roominfolist_() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactProfile.roomInfoList_)
  return roominfolist__ != NULL ? *roominfolist__
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* ContactProfile::mutable_roominfolist_() {
  set_has_roominfolist_();
  if (roominfolist__ == NULL) {
    roominfolist__ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.ContactProfile.roomInfoList_)
  return roominfolist__;
}
inline ::FromCs::sKBuiltinstringT* ContactProfile::release_roominfolist_() {
  // @@protoc_insertion_point(field_release:FromCs.ContactProfile.roomInfoList_)
  clear_has_roominfolist_();
  ::FromCs::sKBuiltinstringT* temp = roominfolist__;
  roominfolist__ = NULL;
  return temp;
}
inline void ContactProfile::set_allocated_roominfolist_(::FromCs::sKBuiltinstringT* roominfolist_) {
  delete roominfolist__;
  roominfolist__ = roominfolist_;
  if (roominfolist_) {
    set_has_roominfolist_();
  } else {
    clear_has_roominfolist_();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.ContactProfile.roomInfoList_)
}

// optional .FromCs.sKBuiltinstringT DomainList = 16;
inline bool ContactProfile::has_domainlist() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void ContactProfile::set_has_domainlist() {
  _has_bits_[0] |= 0x04000000u;
}
inline void ContactProfile::clear_has_domainlist() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void ContactProfile::clear_domainlist() {
  if (domainlist_ != NULL) domainlist_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_domainlist();
}
inline const ::FromCs::sKBuiltinstringT& ContactProfile::domainlist() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactProfile.DomainList)
  return domainlist_ != NULL ? *domainlist_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* ContactProfile::mutable_domainlist() {
  set_has_domainlist();
  if (domainlist_ == NULL) {
    domainlist_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.ContactProfile.DomainList)
  return domainlist_;
}
inline ::FromCs::sKBuiltinstringT* ContactProfile::release_domainlist() {
  // @@protoc_insertion_point(field_release:FromCs.ContactProfile.DomainList)
  clear_has_domainlist();
  ::FromCs::sKBuiltinstringT* temp = domainlist_;
  domainlist_ = NULL;
  return temp;
}
inline void ContactProfile::set_allocated_domainlist(::FromCs::sKBuiltinstringT* domainlist) {
  delete domainlist_;
  domainlist_ = domainlist;
  if (domainlist) {
    set_has_domainlist();
  } else {
    clear_has_domainlist();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.ContactProfile.DomainList)
}

// optional int32 ChatRoomNotify = 17;
inline bool ContactProfile::has_chatroomnotify() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void ContactProfile::set_has_chatroomnotify() {
  _has_bits_[1] |= 0x00000008u;
}
inline void ContactProfile::clear_has_chatroomnotify() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void ContactProfile::clear_chatroomnotify() {
  chatroomnotify_ = 0;
  clear_has_chatroomnotify();
}
inline ::google::protobuf::int32 ContactProfile::chatroomnotify() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactProfile.ChatRoomNotify)
  return chatroomnotify_;
}
inline void ContactProfile::set_chatroomnotify(::google::protobuf::int32 value) {
  set_has_chatroomnotify();
  chatroomnotify_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ContactProfile.ChatRoomNotify)
}

// optional int32 AddContactScene = 18;
inline bool ContactProfile::has_addcontactscene() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void ContactProfile::set_has_addcontactscene() {
  _has_bits_[1] |= 0x00000010u;
}
inline void ContactProfile::clear_has_addcontactscene() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void ContactProfile::clear_addcontactscene() {
  addcontactscene_ = 0;
  clear_has_addcontactscene();
}
inline ::google::protobuf::int32 ContactProfile::addcontactscene() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactProfile.AddContactScene)
  return addcontactscene_;
}
inline void ContactProfile::set_addcontactscene(::google::protobuf::int32 value) {
  set_has_addcontactscene();
  addcontactscene_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ContactProfile.AddContactScene)
}

// optional string Province = 19;
inline bool ContactProfile::has_province() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContactProfile::set_has_province() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ContactProfile::clear_has_province() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ContactProfile::clear_province() {
  province_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_province();
}
inline const ::std::string& ContactProfile::province() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactProfile.Province)
  return province_.GetNoArena();
}
inline void ContactProfile::set_province(const ::std::string& value) {
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ContactProfile.Province)
}
#if LANG_CXX11
inline void ContactProfile::set_province(::std::string&& value) {
  set_has_province();
  province_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ContactProfile.Province)
}
#endif
inline void ContactProfile::set_province(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ContactProfile.Province)
}
inline void ContactProfile::set_province(const char* value, size_t size) {
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ContactProfile.Province)
}
inline ::std::string* ContactProfile::mutable_province() {
  set_has_province();
  // @@protoc_insertion_point(field_mutable:FromCs.ContactProfile.Province)
  return province_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactProfile::release_province() {
  // @@protoc_insertion_point(field_release:FromCs.ContactProfile.Province)
  clear_has_province();
  return province_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactProfile::set_allocated_province(::std::string* province) {
  if (province != NULL) {
    set_has_province();
  } else {
    clear_has_province();
  }
  province_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), province);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ContactProfile.Province)
}

// optional string City = 20;
inline bool ContactProfile::has_city() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ContactProfile::set_has_city() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ContactProfile::clear_has_city() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ContactProfile::clear_city() {
  city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_city();
}
inline const ::std::string& ContactProfile::city() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactProfile.City)
  return city_.GetNoArena();
}
inline void ContactProfile::set_city(const ::std::string& value) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ContactProfile.City)
}
#if LANG_CXX11
inline void ContactProfile::set_city(::std::string&& value) {
  set_has_city();
  city_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ContactProfile.City)
}
#endif
inline void ContactProfile::set_city(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ContactProfile.City)
}
inline void ContactProfile::set_city(const char* value, size_t size) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ContactProfile.City)
}
inline ::std::string* ContactProfile::mutable_city() {
  set_has_city();
  // @@protoc_insertion_point(field_mutable:FromCs.ContactProfile.City)
  return city_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactProfile::release_city() {
  // @@protoc_insertion_point(field_release:FromCs.ContactProfile.City)
  clear_has_city();
  return city_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactProfile::set_allocated_city(::std::string* city) {
  if (city != NULL) {
    set_has_city();
  } else {
    clear_has_city();
  }
  city_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ContactProfile.City)
}

// optional string Signature = 21;
inline bool ContactProfile::has_signature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ContactProfile::set_has_signature() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ContactProfile::clear_has_signature() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ContactProfile::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_signature();
}
inline const ::std::string& ContactProfile::signature() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactProfile.Signature)
  return signature_.GetNoArena();
}
inline void ContactProfile::set_signature(const ::std::string& value) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ContactProfile.Signature)
}
#if LANG_CXX11
inline void ContactProfile::set_signature(::std::string&& value) {
  set_has_signature();
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ContactProfile.Signature)
}
#endif
inline void ContactProfile::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ContactProfile.Signature)
}
inline void ContactProfile::set_signature(const char* value, size_t size) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ContactProfile.Signature)
}
inline ::std::string* ContactProfile::mutable_signature() {
  set_has_signature();
  // @@protoc_insertion_point(field_mutable:FromCs.ContactProfile.Signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactProfile::release_signature() {
  // @@protoc_insertion_point(field_release:FromCs.ContactProfile.Signature)
  clear_has_signature();
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactProfile::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ContactProfile.Signature)
}

// optional int32 PersonalCard = 22;
inline bool ContactProfile::has_personalcard() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void ContactProfile::set_has_personalcard() {
  _has_bits_[1] |= 0x00000020u;
}
inline void ContactProfile::clear_has_personalcard() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void ContactProfile::clear_personalcard() {
  personalcard_ = 0;
  clear_has_personalcard();
}
inline ::google::protobuf::int32 ContactProfile::personalcard() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactProfile.PersonalCard)
  return personalcard_;
}
inline void ContactProfile::set_personalcard(::google::protobuf::int32 value) {
  set_has_personalcard();
  personalcard_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ContactProfile.PersonalCard)
}

// optional int32 HasWeiXinHdHeadImg = 23;
inline bool ContactProfile::has_hasweixinhdheadimg() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void ContactProfile::set_has_hasweixinhdheadimg() {
  _has_bits_[1] |= 0x00000040u;
}
inline void ContactProfile::clear_has_hasweixinhdheadimg() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void ContactProfile::clear_hasweixinhdheadimg() {
  hasweixinhdheadimg_ = 0;
  clear_has_hasweixinhdheadimg();
}
inline ::google::protobuf::int32 ContactProfile::hasweixinhdheadimg() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactProfile.HasWeiXinHdHeadImg)
  return hasweixinhdheadimg_;
}
inline void ContactProfile::set_hasweixinhdheadimg(::google::protobuf::int32 value) {
  set_has_hasweixinhdheadimg();
  hasweixinhdheadimg_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ContactProfile.HasWeiXinHdHeadImg)
}

// optional int32 VerifyFlag = 24;
inline bool ContactProfile::has_verifyflag() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void ContactProfile::set_has_verifyflag() {
  _has_bits_[1] |= 0x00000080u;
}
inline void ContactProfile::clear_has_verifyflag() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void ContactProfile::clear_verifyflag() {
  verifyflag_ = 0;
  clear_has_verifyflag();
}
inline ::google::protobuf::int32 ContactProfile::verifyflag() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactProfile.VerifyFlag)
  return verifyflag_;
}
inline void ContactProfile::set_verifyflag(::google::protobuf::int32 value) {
  set_has_verifyflag();
  verifyflag_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ContactProfile.VerifyFlag)
}

// optional string VerifyInfo = 25;
inline bool ContactProfile::has_verifyinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ContactProfile::set_has_verifyinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ContactProfile::clear_has_verifyinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ContactProfile::clear_verifyinfo() {
  verifyinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_verifyinfo();
}
inline const ::std::string& ContactProfile::verifyinfo() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactProfile.VerifyInfo)
  return verifyinfo_.GetNoArena();
}
inline void ContactProfile::set_verifyinfo(const ::std::string& value) {
  set_has_verifyinfo();
  verifyinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ContactProfile.VerifyInfo)
}
#if LANG_CXX11
inline void ContactProfile::set_verifyinfo(::std::string&& value) {
  set_has_verifyinfo();
  verifyinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ContactProfile.VerifyInfo)
}
#endif
inline void ContactProfile::set_verifyinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_verifyinfo();
  verifyinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ContactProfile.VerifyInfo)
}
inline void ContactProfile::set_verifyinfo(const char* value, size_t size) {
  set_has_verifyinfo();
  verifyinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ContactProfile.VerifyInfo)
}
inline ::std::string* ContactProfile::mutable_verifyinfo() {
  set_has_verifyinfo();
  // @@protoc_insertion_point(field_mutable:FromCs.ContactProfile.VerifyInfo)
  return verifyinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactProfile::release_verifyinfo() {
  // @@protoc_insertion_point(field_release:FromCs.ContactProfile.VerifyInfo)
  clear_has_verifyinfo();
  return verifyinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactProfile::set_allocated_verifyinfo(::std::string* verifyinfo) {
  if (verifyinfo != NULL) {
    set_has_verifyinfo();
  } else {
    clear_has_verifyinfo();
  }
  verifyinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verifyinfo);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ContactProfile.VerifyInfo)
}

// optional int32 Level = 26;
inline bool ContactProfile::has_level() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void ContactProfile::set_has_level() {
  _has_bits_[1] |= 0x00000100u;
}
inline void ContactProfile::clear_has_level() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void ContactProfile::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 ContactProfile::level() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactProfile.Level)
  return level_;
}
inline void ContactProfile::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ContactProfile.Level)
}

// optional int32 Source = 27;
inline bool ContactProfile::has_source() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void ContactProfile::set_has_source() {
  _has_bits_[1] |= 0x00000200u;
}
inline void ContactProfile::clear_has_source() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void ContactProfile::clear_source() {
  source_ = 0;
  clear_has_source();
}
inline ::google::protobuf::int32 ContactProfile::source() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactProfile.Source)
  return source_;
}
inline void ContactProfile::set_source(::google::protobuf::int32 value) {
  set_has_source();
  source_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ContactProfile.Source)
}

// optional string Weibo = 28;
inline bool ContactProfile::has_weibo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ContactProfile::set_has_weibo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ContactProfile::clear_has_weibo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ContactProfile::clear_weibo() {
  weibo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_weibo();
}
inline const ::std::string& ContactProfile::weibo() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactProfile.Weibo)
  return weibo_.GetNoArena();
}
inline void ContactProfile::set_weibo(const ::std::string& value) {
  set_has_weibo();
  weibo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ContactProfile.Weibo)
}
#if LANG_CXX11
inline void ContactProfile::set_weibo(::std::string&& value) {
  set_has_weibo();
  weibo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ContactProfile.Weibo)
}
#endif
inline void ContactProfile::set_weibo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_weibo();
  weibo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ContactProfile.Weibo)
}
inline void ContactProfile::set_weibo(const char* value, size_t size) {
  set_has_weibo();
  weibo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ContactProfile.Weibo)
}
inline ::std::string* ContactProfile::mutable_weibo() {
  set_has_weibo();
  // @@protoc_insertion_point(field_mutable:FromCs.ContactProfile.Weibo)
  return weibo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactProfile::release_weibo() {
  // @@protoc_insertion_point(field_release:FromCs.ContactProfile.Weibo)
  clear_has_weibo();
  return weibo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactProfile::set_allocated_weibo(::std::string* weibo) {
  if (weibo != NULL) {
    set_has_weibo();
  } else {
    clear_has_weibo();
  }
  weibo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), weibo);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ContactProfile.Weibo)
}

// optional string VerifyContent = 29;
inline bool ContactProfile::has_verifycontent() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ContactProfile::set_has_verifycontent() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ContactProfile::clear_has_verifycontent() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ContactProfile::clear_verifycontent() {
  verifycontent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_verifycontent();
}
inline const ::std::string& ContactProfile::verifycontent() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactProfile.VerifyContent)
  return verifycontent_.GetNoArena();
}
inline void ContactProfile::set_verifycontent(const ::std::string& value) {
  set_has_verifycontent();
  verifycontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ContactProfile.VerifyContent)
}
#if LANG_CXX11
inline void ContactProfile::set_verifycontent(::std::string&& value) {
  set_has_verifycontent();
  verifycontent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ContactProfile.VerifyContent)
}
#endif
inline void ContactProfile::set_verifycontent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_verifycontent();
  verifycontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ContactProfile.VerifyContent)
}
inline void ContactProfile::set_verifycontent(const char* value, size_t size) {
  set_has_verifycontent();
  verifycontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ContactProfile.VerifyContent)
}
inline ::std::string* ContactProfile::mutable_verifycontent() {
  set_has_verifycontent();
  // @@protoc_insertion_point(field_mutable:FromCs.ContactProfile.VerifyContent)
  return verifycontent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactProfile::release_verifycontent() {
  // @@protoc_insertion_point(field_release:FromCs.ContactProfile.VerifyContent)
  clear_has_verifycontent();
  return verifycontent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactProfile::set_allocated_verifycontent(::std::string* verifycontent) {
  if (verifycontent != NULL) {
    set_has_verifycontent();
  } else {
    clear_has_verifycontent();
  }
  verifycontent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verifycontent);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ContactProfile.VerifyContent)
}

// optional string Alias = 30;
inline bool ContactProfile::has_alias() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ContactProfile::set_has_alias() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ContactProfile::clear_has_alias() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ContactProfile::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_alias();
}
inline const ::std::string& ContactProfile::alias() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactProfile.Alias)
  return alias_.GetNoArena();
}
inline void ContactProfile::set_alias(const ::std::string& value) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ContactProfile.Alias)
}
#if LANG_CXX11
inline void ContactProfile::set_alias(::std::string&& value) {
  set_has_alias();
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ContactProfile.Alias)
}
#endif
inline void ContactProfile::set_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ContactProfile.Alias)
}
inline void ContactProfile::set_alias(const char* value, size_t size) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ContactProfile.Alias)
}
inline ::std::string* ContactProfile::mutable_alias() {
  set_has_alias();
  // @@protoc_insertion_point(field_mutable:FromCs.ContactProfile.Alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactProfile::release_alias() {
  // @@protoc_insertion_point(field_release:FromCs.ContactProfile.Alias)
  clear_has_alias();
  return alias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactProfile::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    set_has_alias();
  } else {
    clear_has_alias();
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ContactProfile.Alias)
}

// optional string ChatRoomOwner = 31;
inline bool ContactProfile::has_chatroomowner() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ContactProfile::set_has_chatroomowner() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ContactProfile::clear_has_chatroomowner() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ContactProfile::clear_chatroomowner() {
  chatroomowner_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chatroomowner();
}
inline const ::std::string& ContactProfile::chatroomowner() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactProfile.ChatRoomOwner)
  return chatroomowner_.GetNoArena();
}
inline void ContactProfile::set_chatroomowner(const ::std::string& value) {
  set_has_chatroomowner();
  chatroomowner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ContactProfile.ChatRoomOwner)
}
#if LANG_CXX11
inline void ContactProfile::set_chatroomowner(::std::string&& value) {
  set_has_chatroomowner();
  chatroomowner_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ContactProfile.ChatRoomOwner)
}
#endif
inline void ContactProfile::set_chatroomowner(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_chatroomowner();
  chatroomowner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ContactProfile.ChatRoomOwner)
}
inline void ContactProfile::set_chatroomowner(const char* value, size_t size) {
  set_has_chatroomowner();
  chatroomowner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ContactProfile.ChatRoomOwner)
}
inline ::std::string* ContactProfile::mutable_chatroomowner() {
  set_has_chatroomowner();
  // @@protoc_insertion_point(field_mutable:FromCs.ContactProfile.ChatRoomOwner)
  return chatroomowner_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactProfile::release_chatroomowner() {
  // @@protoc_insertion_point(field_release:FromCs.ContactProfile.ChatRoomOwner)
  clear_has_chatroomowner();
  return chatroomowner_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactProfile::set_allocated_chatroomowner(::std::string* chatroomowner) {
  if (chatroomowner != NULL) {
    set_has_chatroomowner();
  } else {
    clear_has_chatroomowner();
  }
  chatroomowner_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chatroomowner);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ContactProfile.ChatRoomOwner)
}

// optional string WeiboNickname = 32;
inline bool ContactProfile::has_weibonickname() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ContactProfile::set_has_weibonickname() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ContactProfile::clear_has_weibonickname() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ContactProfile::clear_weibonickname() {
  weibonickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_weibonickname();
}
inline const ::std::string& ContactProfile::weibonickname() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactProfile.WeiboNickname)
  return weibonickname_.GetNoArena();
}
inline void ContactProfile::set_weibonickname(const ::std::string& value) {
  set_has_weibonickname();
  weibonickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ContactProfile.WeiboNickname)
}
#if LANG_CXX11
inline void ContactProfile::set_weibonickname(::std::string&& value) {
  set_has_weibonickname();
  weibonickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ContactProfile.WeiboNickname)
}
#endif
inline void ContactProfile::set_weibonickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_weibonickname();
  weibonickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ContactProfile.WeiboNickname)
}
inline void ContactProfile::set_weibonickname(const char* value, size_t size) {
  set_has_weibonickname();
  weibonickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ContactProfile.WeiboNickname)
}
inline ::std::string* ContactProfile::mutable_weibonickname() {
  set_has_weibonickname();
  // @@protoc_insertion_point(field_mutable:FromCs.ContactProfile.WeiboNickname)
  return weibonickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactProfile::release_weibonickname() {
  // @@protoc_insertion_point(field_release:FromCs.ContactProfile.WeiboNickname)
  clear_has_weibonickname();
  return weibonickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactProfile::set_allocated_weibonickname(::std::string* weibonickname) {
  if (weibonickname != NULL) {
    set_has_weibonickname();
  } else {
    clear_has_weibonickname();
  }
  weibonickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), weibonickname);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ContactProfile.WeiboNickname)
}

// optional int32 WeiboFlag = 33;
inline bool ContactProfile::has_weiboflag() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void ContactProfile::set_has_weiboflag() {
  _has_bits_[1] |= 0x00000400u;
}
inline void ContactProfile::clear_has_weiboflag() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void ContactProfile::clear_weiboflag() {
  weiboflag_ = 0;
  clear_has_weiboflag();
}
inline ::google::protobuf::int32 ContactProfile::weiboflag() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactProfile.WeiboFlag)
  return weiboflag_;
}
inline void ContactProfile::set_weiboflag(::google::protobuf::int32 value) {
  set_has_weiboflag();
  weiboflag_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ContactProfile.WeiboFlag)
}

// optional int32 AlbumStyle = 34;
inline bool ContactProfile::has_albumstyle() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void ContactProfile::set_has_albumstyle() {
  _has_bits_[1] |= 0x00000800u;
}
inline void ContactProfile::clear_has_albumstyle() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void ContactProfile::clear_albumstyle() {
  albumstyle_ = 0;
  clear_has_albumstyle();
}
inline ::google::protobuf::int32 ContactProfile::albumstyle() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactProfile.AlbumStyle)
  return albumstyle_;
}
inline void ContactProfile::set_albumstyle(::google::protobuf::int32 value) {
  set_has_albumstyle();
  albumstyle_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ContactProfile.AlbumStyle)
}

// optional int32 AlbumFlag = 35;
inline bool ContactProfile::has_albumflag() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void ContactProfile::set_has_albumflag() {
  _has_bits_[1] |= 0x00001000u;
}
inline void ContactProfile::clear_has_albumflag() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void ContactProfile::clear_albumflag() {
  albumflag_ = 0;
  clear_has_albumflag();
}
inline ::google::protobuf::int32 ContactProfile::albumflag() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactProfile.AlbumFlag)
  return albumflag_;
}
inline void ContactProfile::set_albumflag(::google::protobuf::int32 value) {
  set_has_albumflag();
  albumflag_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ContactProfile.AlbumFlag)
}

// optional string AlbumBGImgID = 36;
inline bool ContactProfile::has_albumbgimgid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ContactProfile::set_has_albumbgimgid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ContactProfile::clear_has_albumbgimgid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ContactProfile::clear_albumbgimgid() {
  albumbgimgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_albumbgimgid();
}
inline const ::std::string& ContactProfile::albumbgimgid() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactProfile.AlbumBGImgID)
  return albumbgimgid_.GetNoArena();
}
inline void ContactProfile::set_albumbgimgid(const ::std::string& value) {
  set_has_albumbgimgid();
  albumbgimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ContactProfile.AlbumBGImgID)
}
#if LANG_CXX11
inline void ContactProfile::set_albumbgimgid(::std::string&& value) {
  set_has_albumbgimgid();
  albumbgimgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ContactProfile.AlbumBGImgID)
}
#endif
inline void ContactProfile::set_albumbgimgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_albumbgimgid();
  albumbgimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ContactProfile.AlbumBGImgID)
}
inline void ContactProfile::set_albumbgimgid(const char* value, size_t size) {
  set_has_albumbgimgid();
  albumbgimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ContactProfile.AlbumBGImgID)
}
inline ::std::string* ContactProfile::mutable_albumbgimgid() {
  set_has_albumbgimgid();
  // @@protoc_insertion_point(field_mutable:FromCs.ContactProfile.AlbumBGImgID)
  return albumbgimgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactProfile::release_albumbgimgid() {
  // @@protoc_insertion_point(field_release:FromCs.ContactProfile.AlbumBGImgID)
  clear_has_albumbgimgid();
  return albumbgimgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactProfile::set_allocated_albumbgimgid(::std::string* albumbgimgid) {
  if (albumbgimgid != NULL) {
    set_has_albumbgimgid();
  } else {
    clear_has_albumbgimgid();
  }
  albumbgimgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), albumbgimgid);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ContactProfile.AlbumBGImgID)
}

// optional .FromCs.sKBuiltinstringT SnsUserInfo = 37;
inline bool ContactProfile::has_snsuserinfo() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void ContactProfile::set_has_snsuserinfo() {
  _has_bits_[0] |= 0x08000000u;
}
inline void ContactProfile::clear_has_snsuserinfo() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void ContactProfile::clear_snsuserinfo() {
  if (snsuserinfo_ != NULL) snsuserinfo_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_snsuserinfo();
}
inline const ::FromCs::sKBuiltinstringT& ContactProfile::snsuserinfo() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactProfile.SnsUserInfo)
  return snsuserinfo_ != NULL ? *snsuserinfo_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* ContactProfile::mutable_snsuserinfo() {
  set_has_snsuserinfo();
  if (snsuserinfo_ == NULL) {
    snsuserinfo_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.ContactProfile.SnsUserInfo)
  return snsuserinfo_;
}
inline ::FromCs::sKBuiltinstringT* ContactProfile::release_snsuserinfo() {
  // @@protoc_insertion_point(field_release:FromCs.ContactProfile.SnsUserInfo)
  clear_has_snsuserinfo();
  ::FromCs::sKBuiltinstringT* temp = snsuserinfo_;
  snsuserinfo_ = NULL;
  return temp;
}
inline void ContactProfile::set_allocated_snsuserinfo(::FromCs::sKBuiltinstringT* snsuserinfo) {
  delete snsuserinfo_;
  snsuserinfo_ = snsuserinfo;
  if (snsuserinfo) {
    set_has_snsuserinfo();
  } else {
    clear_has_snsuserinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.ContactProfile.SnsUserInfo)
}

// optional string Country = 38;
inline bool ContactProfile::has_country() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ContactProfile::set_has_country() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ContactProfile::clear_has_country() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ContactProfile::clear_country() {
  country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country();
}
inline const ::std::string& ContactProfile::country() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactProfile.Country)
  return country_.GetNoArena();
}
inline void ContactProfile::set_country(const ::std::string& value) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ContactProfile.Country)
}
#if LANG_CXX11
inline void ContactProfile::set_country(::std::string&& value) {
  set_has_country();
  country_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ContactProfile.Country)
}
#endif
inline void ContactProfile::set_country(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ContactProfile.Country)
}
inline void ContactProfile::set_country(const char* value, size_t size) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ContactProfile.Country)
}
inline ::std::string* ContactProfile::mutable_country() {
  set_has_country();
  // @@protoc_insertion_point(field_mutable:FromCs.ContactProfile.Country)
  return country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactProfile::release_country() {
  // @@protoc_insertion_point(field_release:FromCs.ContactProfile.Country)
  clear_has_country();
  return country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactProfile::set_allocated_country(::std::string* country) {
  if (country != NULL) {
    set_has_country();
  } else {
    clear_has_country();
  }
  country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ContactProfile.Country)
}

// optional string BigHeadImgUrl = 39;
inline bool ContactProfile::has_bigheadimgurl() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ContactProfile::set_has_bigheadimgurl() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ContactProfile::clear_has_bigheadimgurl() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ContactProfile::clear_bigheadimgurl() {
  bigheadimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bigheadimgurl();
}
inline const ::std::string& ContactProfile::bigheadimgurl() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactProfile.BigHeadImgUrl)
  return bigheadimgurl_.GetNoArena();
}
inline void ContactProfile::set_bigheadimgurl(const ::std::string& value) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ContactProfile.BigHeadImgUrl)
}
#if LANG_CXX11
inline void ContactProfile::set_bigheadimgurl(::std::string&& value) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ContactProfile.BigHeadImgUrl)
}
#endif
inline void ContactProfile::set_bigheadimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ContactProfile.BigHeadImgUrl)
}
inline void ContactProfile::set_bigheadimgurl(const char* value, size_t size) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ContactProfile.BigHeadImgUrl)
}
inline ::std::string* ContactProfile::mutable_bigheadimgurl() {
  set_has_bigheadimgurl();
  // @@protoc_insertion_point(field_mutable:FromCs.ContactProfile.BigHeadImgUrl)
  return bigheadimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactProfile::release_bigheadimgurl() {
  // @@protoc_insertion_point(field_release:FromCs.ContactProfile.BigHeadImgUrl)
  clear_has_bigheadimgurl();
  return bigheadimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactProfile::set_allocated_bigheadimgurl(::std::string* bigheadimgurl) {
  if (bigheadimgurl != NULL) {
    set_has_bigheadimgurl();
  } else {
    clear_has_bigheadimgurl();
  }
  bigheadimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bigheadimgurl);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ContactProfile.BigHeadImgUrl)
}

// optional string SmallHeadImgUrl = 40;
inline bool ContactProfile::has_smallheadimgurl() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ContactProfile::set_has_smallheadimgurl() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ContactProfile::clear_has_smallheadimgurl() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ContactProfile::clear_smallheadimgurl() {
  smallheadimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_smallheadimgurl();
}
inline const ::std::string& ContactProfile::smallheadimgurl() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactProfile.SmallHeadImgUrl)
  return smallheadimgurl_.GetNoArena();
}
inline void ContactProfile::set_smallheadimgurl(const ::std::string& value) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ContactProfile.SmallHeadImgUrl)
}
#if LANG_CXX11
inline void ContactProfile::set_smallheadimgurl(::std::string&& value) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ContactProfile.SmallHeadImgUrl)
}
#endif
inline void ContactProfile::set_smallheadimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ContactProfile.SmallHeadImgUrl)
}
inline void ContactProfile::set_smallheadimgurl(const char* value, size_t size) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ContactProfile.SmallHeadImgUrl)
}
inline ::std::string* ContactProfile::mutable_smallheadimgurl() {
  set_has_smallheadimgurl();
  // @@protoc_insertion_point(field_mutable:FromCs.ContactProfile.SmallHeadImgUrl)
  return smallheadimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactProfile::release_smallheadimgurl() {
  // @@protoc_insertion_point(field_release:FromCs.ContactProfile.SmallHeadImgUrl)
  clear_has_smallheadimgurl();
  return smallheadimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactProfile::set_allocated_smallheadimgurl(::std::string* smallheadimgurl) {
  if (smallheadimgurl != NULL) {
    set_has_smallheadimgurl();
  } else {
    clear_has_smallheadimgurl();
  }
  smallheadimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smallheadimgurl);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ContactProfile.SmallHeadImgUrl)
}

// optional string MyBrandList = 41;
inline bool ContactProfile::has_mybrandlist() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ContactProfile::set_has_mybrandlist() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ContactProfile::clear_has_mybrandlist() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ContactProfile::clear_mybrandlist() {
  mybrandlist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mybrandlist();
}
inline const ::std::string& ContactProfile::mybrandlist() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactProfile.MyBrandList)
  return mybrandlist_.GetNoArena();
}
inline void ContactProfile::set_mybrandlist(const ::std::string& value) {
  set_has_mybrandlist();
  mybrandlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ContactProfile.MyBrandList)
}
#if LANG_CXX11
inline void ContactProfile::set_mybrandlist(::std::string&& value) {
  set_has_mybrandlist();
  mybrandlist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ContactProfile.MyBrandList)
}
#endif
inline void ContactProfile::set_mybrandlist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mybrandlist();
  mybrandlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ContactProfile.MyBrandList)
}
inline void ContactProfile::set_mybrandlist(const char* value, size_t size) {
  set_has_mybrandlist();
  mybrandlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ContactProfile.MyBrandList)
}
inline ::std::string* ContactProfile::mutable_mybrandlist() {
  set_has_mybrandlist();
  // @@protoc_insertion_point(field_mutable:FromCs.ContactProfile.MyBrandList)
  return mybrandlist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactProfile::release_mybrandlist() {
  // @@protoc_insertion_point(field_release:FromCs.ContactProfile.MyBrandList)
  clear_has_mybrandlist();
  return mybrandlist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactProfile::set_allocated_mybrandlist(::std::string* mybrandlist) {
  if (mybrandlist != NULL) {
    set_has_mybrandlist();
  } else {
    clear_has_mybrandlist();
  }
  mybrandlist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mybrandlist);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ContactProfile.MyBrandList)
}

// optional .FromCs.sKBuiltinstringT CustomizedInfo = 42;
inline bool ContactProfile::has_customizedinfo() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void ContactProfile::set_has_customizedinfo() {
  _has_bits_[0] |= 0x10000000u;
}
inline void ContactProfile::clear_has_customizedinfo() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void ContactProfile::clear_customizedinfo() {
  if (customizedinfo_ != NULL) customizedinfo_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_customizedinfo();
}
inline const ::FromCs::sKBuiltinstringT& ContactProfile::customizedinfo() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactProfile.CustomizedInfo)
  return customizedinfo_ != NULL ? *customizedinfo_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* ContactProfile::mutable_customizedinfo() {
  set_has_customizedinfo();
  if (customizedinfo_ == NULL) {
    customizedinfo_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.ContactProfile.CustomizedInfo)
  return customizedinfo_;
}
inline ::FromCs::sKBuiltinstringT* ContactProfile::release_customizedinfo() {
  // @@protoc_insertion_point(field_release:FromCs.ContactProfile.CustomizedInfo)
  clear_has_customizedinfo();
  ::FromCs::sKBuiltinstringT* temp = customizedinfo_;
  customizedinfo_ = NULL;
  return temp;
}
inline void ContactProfile::set_allocated_customizedinfo(::FromCs::sKBuiltinstringT* customizedinfo) {
  delete customizedinfo_;
  customizedinfo_ = customizedinfo;
  if (customizedinfo) {
    set_has_customizedinfo();
  } else {
    clear_has_customizedinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.ContactProfile.CustomizedInfo)
}

// optional string ChatRoomData = 43;
inline bool ContactProfile::has_chatroomdata() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ContactProfile::set_has_chatroomdata() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ContactProfile::clear_has_chatroomdata() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ContactProfile::clear_chatroomdata() {
  chatroomdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chatroomdata();
}
inline const ::std::string& ContactProfile::chatroomdata() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactProfile.ChatRoomData)
  return chatroomdata_.GetNoArena();
}
inline void ContactProfile::set_chatroomdata(const ::std::string& value) {
  set_has_chatroomdata();
  chatroomdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ContactProfile.ChatRoomData)
}
#if LANG_CXX11
inline void ContactProfile::set_chatroomdata(::std::string&& value) {
  set_has_chatroomdata();
  chatroomdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ContactProfile.ChatRoomData)
}
#endif
inline void ContactProfile::set_chatroomdata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_chatroomdata();
  chatroomdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ContactProfile.ChatRoomData)
}
inline void ContactProfile::set_chatroomdata(const char* value, size_t size) {
  set_has_chatroomdata();
  chatroomdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ContactProfile.ChatRoomData)
}
inline ::std::string* ContactProfile::mutable_chatroomdata() {
  set_has_chatroomdata();
  // @@protoc_insertion_point(field_mutable:FromCs.ContactProfile.ChatRoomData)
  return chatroomdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactProfile::release_chatroomdata() {
  // @@protoc_insertion_point(field_release:FromCs.ContactProfile.ChatRoomData)
  clear_has_chatroomdata();
  return chatroomdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactProfile::set_allocated_chatroomdata(::std::string* chatroomdata) {
  if (chatroomdata != NULL) {
    set_has_chatroomdata();
  } else {
    clear_has_chatroomdata();
  }
  chatroomdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chatroomdata);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ContactProfile.ChatRoomData)
}

// optional string HeadImgMd5 = 44;
inline bool ContactProfile::has_headimgmd5() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ContactProfile::set_has_headimgmd5() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ContactProfile::clear_has_headimgmd5() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ContactProfile::clear_headimgmd5() {
  headimgmd5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_headimgmd5();
}
inline const ::std::string& ContactProfile::headimgmd5() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactProfile.HeadImgMd5)
  return headimgmd5_.GetNoArena();
}
inline void ContactProfile::set_headimgmd5(const ::std::string& value) {
  set_has_headimgmd5();
  headimgmd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ContactProfile.HeadImgMd5)
}
#if LANG_CXX11
inline void ContactProfile::set_headimgmd5(::std::string&& value) {
  set_has_headimgmd5();
  headimgmd5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ContactProfile.HeadImgMd5)
}
#endif
inline void ContactProfile::set_headimgmd5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_headimgmd5();
  headimgmd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ContactProfile.HeadImgMd5)
}
inline void ContactProfile::set_headimgmd5(const char* value, size_t size) {
  set_has_headimgmd5();
  headimgmd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ContactProfile.HeadImgMd5)
}
inline ::std::string* ContactProfile::mutable_headimgmd5() {
  set_has_headimgmd5();
  // @@protoc_insertion_point(field_mutable:FromCs.ContactProfile.HeadImgMd5)
  return headimgmd5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactProfile::release_headimgmd5() {
  // @@protoc_insertion_point(field_release:FromCs.ContactProfile.HeadImgMd5)
  clear_has_headimgmd5();
  return headimgmd5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactProfile::set_allocated_headimgmd5(::std::string* headimgmd5) {
  if (headimgmd5 != NULL) {
    set_has_headimgmd5();
  } else {
    clear_has_headimgmd5();
  }
  headimgmd5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), headimgmd5);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ContactProfile.HeadImgMd5)
}

// optional string EncryptUserName = 45;
inline bool ContactProfile::has_encryptusername() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ContactProfile::set_has_encryptusername() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ContactProfile::clear_has_encryptusername() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ContactProfile::clear_encryptusername() {
  encryptusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_encryptusername();
}
inline const ::std::string& ContactProfile::encryptusername() const {
  // @@protoc_insertion_point(field_get:FromCs.ContactProfile.EncryptUserName)
  return encryptusername_.GetNoArena();
}
inline void ContactProfile::set_encryptusername(const ::std::string& value) {
  set_has_encryptusername();
  encryptusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ContactProfile.EncryptUserName)
}
#if LANG_CXX11
inline void ContactProfile::set_encryptusername(::std::string&& value) {
  set_has_encryptusername();
  encryptusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ContactProfile.EncryptUserName)
}
#endif
inline void ContactProfile::set_encryptusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_encryptusername();
  encryptusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ContactProfile.EncryptUserName)
}
inline void ContactProfile::set_encryptusername(const char* value, size_t size) {
  set_has_encryptusername();
  encryptusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ContactProfile.EncryptUserName)
}
inline ::std::string* ContactProfile::mutable_encryptusername() {
  set_has_encryptusername();
  // @@protoc_insertion_point(field_mutable:FromCs.ContactProfile.EncryptUserName)
  return encryptusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContactProfile::release_encryptusername() {
  // @@protoc_insertion_point(field_release:FromCs.ContactProfile.EncryptUserName)
  clear_has_encryptusername();
  return encryptusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContactProfile::set_allocated_encryptusername(::std::string* encryptusername) {
  if (encryptusername != NULL) {
    set_has_encryptusername();
  } else {
    clear_has_encryptusername();
  }
  encryptusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), encryptusername);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ContactProfile.EncryptUserName)
}

// -------------------------------------------------------------------

// MsgTip

// optional int32 MsgId = 1;
inline bool MsgTip::has_msgid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgTip::set_has_msgid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgTip::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgTip::clear_msgid() {
  msgid_ = 0;
  clear_has_msgid();
}
inline ::google::protobuf::int32 MsgTip::msgid() const {
  // @@protoc_insertion_point(field_get:FromCs.MsgTip.MsgId)
  return msgid_;
}
inline void MsgTip::set_msgid(::google::protobuf::int32 value) {
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:FromCs.MsgTip.MsgId)
}

// optional .FromCs.sKBuiltinstringT FromUserName = 2;
inline bool MsgTip::has_fromusername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgTip::set_has_fromusername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgTip::clear_has_fromusername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgTip::clear_fromusername() {
  if (fromusername_ != NULL) fromusername_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_fromusername();
}
inline const ::FromCs::sKBuiltinstringT& MsgTip::fromusername() const {
  // @@protoc_insertion_point(field_get:FromCs.MsgTip.FromUserName)
  return fromusername_ != NULL ? *fromusername_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* MsgTip::mutable_fromusername() {
  set_has_fromusername();
  if (fromusername_ == NULL) {
    fromusername_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.MsgTip.FromUserName)
  return fromusername_;
}
inline ::FromCs::sKBuiltinstringT* MsgTip::release_fromusername() {
  // @@protoc_insertion_point(field_release:FromCs.MsgTip.FromUserName)
  clear_has_fromusername();
  ::FromCs::sKBuiltinstringT* temp = fromusername_;
  fromusername_ = NULL;
  return temp;
}
inline void MsgTip::set_allocated_fromusername(::FromCs::sKBuiltinstringT* fromusername) {
  delete fromusername_;
  fromusername_ = fromusername;
  if (fromusername) {
    set_has_fromusername();
  } else {
    clear_has_fromusername();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.MsgTip.FromUserName)
}

// optional .FromCs.sKBuiltinstringT ToUserName = 3;
inline bool MsgTip::has_tousername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgTip::set_has_tousername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgTip::clear_has_tousername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgTip::clear_tousername() {
  if (tousername_ != NULL) tousername_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_tousername();
}
inline const ::FromCs::sKBuiltinstringT& MsgTip::tousername() const {
  // @@protoc_insertion_point(field_get:FromCs.MsgTip.ToUserName)
  return tousername_ != NULL ? *tousername_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* MsgTip::mutable_tousername() {
  set_has_tousername();
  if (tousername_ == NULL) {
    tousername_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.MsgTip.ToUserName)
  return tousername_;
}
inline ::FromCs::sKBuiltinstringT* MsgTip::release_tousername() {
  // @@protoc_insertion_point(field_release:FromCs.MsgTip.ToUserName)
  clear_has_tousername();
  ::FromCs::sKBuiltinstringT* temp = tousername_;
  tousername_ = NULL;
  return temp;
}
inline void MsgTip::set_allocated_tousername(::FromCs::sKBuiltinstringT* tousername) {
  delete tousername_;
  tousername_ = tousername;
  if (tousername) {
    set_has_tousername();
  } else {
    clear_has_tousername();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.MsgTip.ToUserName)
}

// optional int32 Status = 4;
inline bool MsgTip::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgTip::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgTip::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgTip::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 MsgTip::status() const {
  // @@protoc_insertion_point(field_get:FromCs.MsgTip.Status)
  return status_;
}
inline void MsgTip::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:FromCs.MsgTip.Status)
}

// -------------------------------------------------------------------

// MsgTip2

// optional .FromCs.sKBuiltinstringT SnsUserInfo = 1;
inline bool MsgTip2::has_snsuserinfo() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MsgTip2::set_has_snsuserinfo() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MsgTip2::clear_has_snsuserinfo() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MsgTip2::clear_snsuserinfo() {
  if (snsuserinfo_ != NULL) snsuserinfo_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_snsuserinfo();
}
inline const ::FromCs::sKBuiltinstringT& MsgTip2::snsuserinfo() const {
  // @@protoc_insertion_point(field_get:FromCs.MsgTip2.SnsUserInfo)
  return snsuserinfo_ != NULL ? *snsuserinfo_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* MsgTip2::mutable_snsuserinfo() {
  set_has_snsuserinfo();
  if (snsuserinfo_ == NULL) {
    snsuserinfo_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.MsgTip2.SnsUserInfo)
  return snsuserinfo_;
}
inline ::FromCs::sKBuiltinstringT* MsgTip2::release_snsuserinfo() {
  // @@protoc_insertion_point(field_release:FromCs.MsgTip2.SnsUserInfo)
  clear_has_snsuserinfo();
  ::FromCs::sKBuiltinstringT* temp = snsuserinfo_;
  snsuserinfo_ = NULL;
  return temp;
}
inline void MsgTip2::set_allocated_snsuserinfo(::FromCs::sKBuiltinstringT* snsuserinfo) {
  delete snsuserinfo_;
  snsuserinfo_ = snsuserinfo;
  if (snsuserinfo) {
    set_has_snsuserinfo();
  } else {
    clear_has_snsuserinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.MsgTip2.SnsUserInfo)
}

// optional string MyBrandList = 2;
inline bool MsgTip2::has_mybrandlist() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgTip2::set_has_mybrandlist() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgTip2::clear_has_mybrandlist() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgTip2::clear_mybrandlist() {
  mybrandlist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mybrandlist();
}
inline const ::std::string& MsgTip2::mybrandlist() const {
  // @@protoc_insertion_point(field_get:FromCs.MsgTip2.MyBrandList)
  return mybrandlist_.GetNoArena();
}
inline void MsgTip2::set_mybrandlist(const ::std::string& value) {
  set_has_mybrandlist();
  mybrandlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.MsgTip2.MyBrandList)
}
#if LANG_CXX11
inline void MsgTip2::set_mybrandlist(::std::string&& value) {
  set_has_mybrandlist();
  mybrandlist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.MsgTip2.MyBrandList)
}
#endif
inline void MsgTip2::set_mybrandlist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mybrandlist();
  mybrandlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.MsgTip2.MyBrandList)
}
inline void MsgTip2::set_mybrandlist(const char* value, size_t size) {
  set_has_mybrandlist();
  mybrandlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.MsgTip2.MyBrandList)
}
inline ::std::string* MsgTip2::mutable_mybrandlist() {
  set_has_mybrandlist();
  // @@protoc_insertion_point(field_mutable:FromCs.MsgTip2.MyBrandList)
  return mybrandlist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MsgTip2::release_mybrandlist() {
  // @@protoc_insertion_point(field_release:FromCs.MsgTip2.MyBrandList)
  clear_has_mybrandlist();
  return mybrandlist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MsgTip2::set_allocated_mybrandlist(::std::string* mybrandlist) {
  if (mybrandlist != NULL) {
    set_has_mybrandlist();
  } else {
    clear_has_mybrandlist();
  }
  mybrandlist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mybrandlist);
  // @@protoc_insertion_point(field_set_allocated:FromCs.MsgTip2.MyBrandList)
}

// optional string MsgPushSound = 3;
inline bool MsgTip2::has_msgpushsound() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgTip2::set_has_msgpushsound() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgTip2::clear_has_msgpushsound() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgTip2::clear_msgpushsound() {
  msgpushsound_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msgpushsound();
}
inline const ::std::string& MsgTip2::msgpushsound() const {
  // @@protoc_insertion_point(field_get:FromCs.MsgTip2.MsgPushSound)
  return msgpushsound_.GetNoArena();
}
inline void MsgTip2::set_msgpushsound(const ::std::string& value) {
  set_has_msgpushsound();
  msgpushsound_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.MsgTip2.MsgPushSound)
}
#if LANG_CXX11
inline void MsgTip2::set_msgpushsound(::std::string&& value) {
  set_has_msgpushsound();
  msgpushsound_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.MsgTip2.MsgPushSound)
}
#endif
inline void MsgTip2::set_msgpushsound(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msgpushsound();
  msgpushsound_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.MsgTip2.MsgPushSound)
}
inline void MsgTip2::set_msgpushsound(const char* value, size_t size) {
  set_has_msgpushsound();
  msgpushsound_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.MsgTip2.MsgPushSound)
}
inline ::std::string* MsgTip2::mutable_msgpushsound() {
  set_has_msgpushsound();
  // @@protoc_insertion_point(field_mutable:FromCs.MsgTip2.MsgPushSound)
  return msgpushsound_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MsgTip2::release_msgpushsound() {
  // @@protoc_insertion_point(field_release:FromCs.MsgTip2.MsgPushSound)
  clear_has_msgpushsound();
  return msgpushsound_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MsgTip2::set_allocated_msgpushsound(::std::string* msgpushsound) {
  if (msgpushsound != NULL) {
    set_has_msgpushsound();
  } else {
    clear_has_msgpushsound();
  }
  msgpushsound_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgpushsound);
  // @@protoc_insertion_point(field_set_allocated:FromCs.MsgTip2.MsgPushSound)
}

// optional string VoipPushSound = 4;
inline bool MsgTip2::has_voippushsound() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgTip2::set_has_voippushsound() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgTip2::clear_has_voippushsound() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgTip2::clear_voippushsound() {
  voippushsound_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_voippushsound();
}
inline const ::std::string& MsgTip2::voippushsound() const {
  // @@protoc_insertion_point(field_get:FromCs.MsgTip2.VoipPushSound)
  return voippushsound_.GetNoArena();
}
inline void MsgTip2::set_voippushsound(const ::std::string& value) {
  set_has_voippushsound();
  voippushsound_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.MsgTip2.VoipPushSound)
}
#if LANG_CXX11
inline void MsgTip2::set_voippushsound(::std::string&& value) {
  set_has_voippushsound();
  voippushsound_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.MsgTip2.VoipPushSound)
}
#endif
inline void MsgTip2::set_voippushsound(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_voippushsound();
  voippushsound_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.MsgTip2.VoipPushSound)
}
inline void MsgTip2::set_voippushsound(const char* value, size_t size) {
  set_has_voippushsound();
  voippushsound_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.MsgTip2.VoipPushSound)
}
inline ::std::string* MsgTip2::mutable_voippushsound() {
  set_has_voippushsound();
  // @@protoc_insertion_point(field_mutable:FromCs.MsgTip2.VoipPushSound)
  return voippushsound_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MsgTip2::release_voippushsound() {
  // @@protoc_insertion_point(field_release:FromCs.MsgTip2.VoipPushSound)
  clear_has_voippushsound();
  return voippushsound_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MsgTip2::set_allocated_voippushsound(::std::string* voippushsound) {
  if (voippushsound != NULL) {
    set_has_voippushsound();
  } else {
    clear_has_voippushsound();
  }
  voippushsound_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), voippushsound);
  // @@protoc_insertion_point(field_set_allocated:FromCs.MsgTip2.VoipPushSound)
}

// optional int32 BigChatRoomSize = 5;
inline bool MsgTip2::has_bigchatroomsize() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MsgTip2::set_has_bigchatroomsize() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MsgTip2::clear_has_bigchatroomsize() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MsgTip2::clear_bigchatroomsize() {
  bigchatroomsize_ = 0;
  clear_has_bigchatroomsize();
}
inline ::google::protobuf::int32 MsgTip2::bigchatroomsize() const {
  // @@protoc_insertion_point(field_get:FromCs.MsgTip2.BigChatRoomSize)
  return bigchatroomsize_;
}
inline void MsgTip2::set_bigchatroomsize(::google::protobuf::int32 value) {
  set_has_bigchatroomsize();
  bigchatroomsize_ = value;
  // @@protoc_insertion_point(field_set:FromCs.MsgTip2.BigChatRoomSize)
}

// optional int32 BigChatRoomQuota = 6;
inline bool MsgTip2::has_bigchatroomquota() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MsgTip2::set_has_bigchatroomquota() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MsgTip2::clear_has_bigchatroomquota() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MsgTip2::clear_bigchatroomquota() {
  bigchatroomquota_ = 0;
  clear_has_bigchatroomquota();
}
inline ::google::protobuf::int32 MsgTip2::bigchatroomquota() const {
  // @@protoc_insertion_point(field_get:FromCs.MsgTip2.BigChatRoomQuota)
  return bigchatroomquota_;
}
inline void MsgTip2::set_bigchatroomquota(::google::protobuf::int32 value) {
  set_has_bigchatroomquota();
  bigchatroomquota_ = value;
  // @@protoc_insertion_point(field_set:FromCs.MsgTip2.BigChatRoomQuota)
}

// optional int32 BigChatRoomInvite = 7;
inline bool MsgTip2::has_bigchatroominvite() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MsgTip2::set_has_bigchatroominvite() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MsgTip2::clear_has_bigchatroominvite() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MsgTip2::clear_bigchatroominvite() {
  bigchatroominvite_ = 0;
  clear_has_bigchatroominvite();
}
inline ::google::protobuf::int32 MsgTip2::bigchatroominvite() const {
  // @@protoc_insertion_point(field_get:FromCs.MsgTip2.BigChatRoomInvite)
  return bigchatroominvite_;
}
inline void MsgTip2::set_bigchatroominvite(::google::protobuf::int32 value) {
  set_has_bigchatroominvite();
  bigchatroominvite_ = value;
  // @@protoc_insertion_point(field_set:FromCs.MsgTip2.BigChatRoomInvite)
}

// optional string SafeMobile = 8;
inline bool MsgTip2::has_safemobile() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgTip2::set_has_safemobile() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgTip2::clear_has_safemobile() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgTip2::clear_safemobile() {
  safemobile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_safemobile();
}
inline const ::std::string& MsgTip2::safemobile() const {
  // @@protoc_insertion_point(field_get:FromCs.MsgTip2.SafeMobile)
  return safemobile_.GetNoArena();
}
inline void MsgTip2::set_safemobile(const ::std::string& value) {
  set_has_safemobile();
  safemobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.MsgTip2.SafeMobile)
}
#if LANG_CXX11
inline void MsgTip2::set_safemobile(::std::string&& value) {
  set_has_safemobile();
  safemobile_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.MsgTip2.SafeMobile)
}
#endif
inline void MsgTip2::set_safemobile(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_safemobile();
  safemobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.MsgTip2.SafeMobile)
}
inline void MsgTip2::set_safemobile(const char* value, size_t size) {
  set_has_safemobile();
  safemobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.MsgTip2.SafeMobile)
}
inline ::std::string* MsgTip2::mutable_safemobile() {
  set_has_safemobile();
  // @@protoc_insertion_point(field_mutable:FromCs.MsgTip2.SafeMobile)
  return safemobile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MsgTip2::release_safemobile() {
  // @@protoc_insertion_point(field_release:FromCs.MsgTip2.SafeMobile)
  clear_has_safemobile();
  return safemobile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MsgTip2::set_allocated_safemobile(::std::string* safemobile) {
  if (safemobile != NULL) {
    set_has_safemobile();
  } else {
    clear_has_safemobile();
  }
  safemobile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), safemobile);
  // @@protoc_insertion_point(field_set_allocated:FromCs.MsgTip2.SafeMobile)
}

// optional string BigHeadImgUrl = 9;
inline bool MsgTip2::has_bigheadimgurl() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MsgTip2::set_has_bigheadimgurl() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MsgTip2::clear_has_bigheadimgurl() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MsgTip2::clear_bigheadimgurl() {
  bigheadimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bigheadimgurl();
}
inline const ::std::string& MsgTip2::bigheadimgurl() const {
  // @@protoc_insertion_point(field_get:FromCs.MsgTip2.BigHeadImgUrl)
  return bigheadimgurl_.GetNoArena();
}
inline void MsgTip2::set_bigheadimgurl(const ::std::string& value) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.MsgTip2.BigHeadImgUrl)
}
#if LANG_CXX11
inline void MsgTip2::set_bigheadimgurl(::std::string&& value) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.MsgTip2.BigHeadImgUrl)
}
#endif
inline void MsgTip2::set_bigheadimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.MsgTip2.BigHeadImgUrl)
}
inline void MsgTip2::set_bigheadimgurl(const char* value, size_t size) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.MsgTip2.BigHeadImgUrl)
}
inline ::std::string* MsgTip2::mutable_bigheadimgurl() {
  set_has_bigheadimgurl();
  // @@protoc_insertion_point(field_mutable:FromCs.MsgTip2.BigHeadImgUrl)
  return bigheadimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MsgTip2::release_bigheadimgurl() {
  // @@protoc_insertion_point(field_release:FromCs.MsgTip2.BigHeadImgUrl)
  clear_has_bigheadimgurl();
  return bigheadimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MsgTip2::set_allocated_bigheadimgurl(::std::string* bigheadimgurl) {
  if (bigheadimgurl != NULL) {
    set_has_bigheadimgurl();
  } else {
    clear_has_bigheadimgurl();
  }
  bigheadimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bigheadimgurl);
  // @@protoc_insertion_point(field_set_allocated:FromCs.MsgTip2.BigHeadImgUrl)
}

// optional string SmallHeadImgUrl = 10;
inline bool MsgTip2::has_smallheadimgurl() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MsgTip2::set_has_smallheadimgurl() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MsgTip2::clear_has_smallheadimgurl() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MsgTip2::clear_smallheadimgurl() {
  smallheadimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_smallheadimgurl();
}
inline const ::std::string& MsgTip2::smallheadimgurl() const {
  // @@protoc_insertion_point(field_get:FromCs.MsgTip2.SmallHeadImgUrl)
  return smallheadimgurl_.GetNoArena();
}
inline void MsgTip2::set_smallheadimgurl(const ::std::string& value) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.MsgTip2.SmallHeadImgUrl)
}
#if LANG_CXX11
inline void MsgTip2::set_smallheadimgurl(::std::string&& value) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.MsgTip2.SmallHeadImgUrl)
}
#endif
inline void MsgTip2::set_smallheadimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.MsgTip2.SmallHeadImgUrl)
}
inline void MsgTip2::set_smallheadimgurl(const char* value, size_t size) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.MsgTip2.SmallHeadImgUrl)
}
inline ::std::string* MsgTip2::mutable_smallheadimgurl() {
  set_has_smallheadimgurl();
  // @@protoc_insertion_point(field_mutable:FromCs.MsgTip2.SmallHeadImgUrl)
  return smallheadimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MsgTip2::release_smallheadimgurl() {
  // @@protoc_insertion_point(field_release:FromCs.MsgTip2.SmallHeadImgUrl)
  clear_has_smallheadimgurl();
  return smallheadimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MsgTip2::set_allocated_smallheadimgurl(::std::string* smallheadimgurl) {
  if (smallheadimgurl != NULL) {
    set_has_smallheadimgurl();
  } else {
    clear_has_smallheadimgurl();
  }
  smallheadimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smallheadimgurl);
  // @@protoc_insertion_point(field_set_allocated:FromCs.MsgTip2.SmallHeadImgUrl)
}

// optional int32 MainAcctType = 11;
inline bool MsgTip2::has_mainaccttype() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MsgTip2::set_has_mainaccttype() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MsgTip2::clear_has_mainaccttype() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MsgTip2::clear_mainaccttype() {
  mainaccttype_ = 0;
  clear_has_mainaccttype();
}
inline ::google::protobuf::int32 MsgTip2::mainaccttype() const {
  // @@protoc_insertion_point(field_get:FromCs.MsgTip2.MainAcctType)
  return mainaccttype_;
}
inline void MsgTip2::set_mainaccttype(::google::protobuf::int32 value) {
  set_has_mainaccttype();
  mainaccttype_ = value;
  // @@protoc_insertion_point(field_set:FromCs.MsgTip2.MainAcctType)
}

// optional .FromCs.sKBuiltinstringT ExtXml = 12;
inline bool MsgTip2::has_extxml() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MsgTip2::set_has_extxml() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MsgTip2::clear_has_extxml() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MsgTip2::clear_extxml() {
  if (extxml_ != NULL) extxml_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_extxml();
}
inline const ::FromCs::sKBuiltinstringT& MsgTip2::extxml() const {
  // @@protoc_insertion_point(field_get:FromCs.MsgTip2.ExtXml)
  return extxml_ != NULL ? *extxml_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* MsgTip2::mutable_extxml() {
  set_has_extxml();
  if (extxml_ == NULL) {
    extxml_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.MsgTip2.ExtXml)
  return extxml_;
}
inline ::FromCs::sKBuiltinstringT* MsgTip2::release_extxml() {
  // @@protoc_insertion_point(field_release:FromCs.MsgTip2.ExtXml)
  clear_has_extxml();
  ::FromCs::sKBuiltinstringT* temp = extxml_;
  extxml_ = NULL;
  return temp;
}
inline void MsgTip2::set_allocated_extxml(::FromCs::sKBuiltinstringT* extxml) {
  delete extxml_;
  extxml_ = extxml;
  if (extxml) {
    set_has_extxml();
  } else {
    clear_has_extxml();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.MsgTip2.ExtXml)
}

// optional .FromCs.sKBuiltinstringT SafeDeviceList = 13;
inline bool MsgTip2::has_safedevicelist() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MsgTip2::set_has_safedevicelist() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MsgTip2::clear_has_safedevicelist() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MsgTip2::clear_safedevicelist() {
  if (safedevicelist_ != NULL) safedevicelist_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_safedevicelist();
}
inline const ::FromCs::sKBuiltinstringT& MsgTip2::safedevicelist() const {
  // @@protoc_insertion_point(field_get:FromCs.MsgTip2.SafeDeviceList)
  return safedevicelist_ != NULL ? *safedevicelist_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* MsgTip2::mutable_safedevicelist() {
  set_has_safedevicelist();
  if (safedevicelist_ == NULL) {
    safedevicelist_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.MsgTip2.SafeDeviceList)
  return safedevicelist_;
}
inline ::FromCs::sKBuiltinstringT* MsgTip2::release_safedevicelist() {
  // @@protoc_insertion_point(field_release:FromCs.MsgTip2.SafeDeviceList)
  clear_has_safedevicelist();
  ::FromCs::sKBuiltinstringT* temp = safedevicelist_;
  safedevicelist_ = NULL;
  return temp;
}
inline void MsgTip2::set_allocated_safedevicelist(::FromCs::sKBuiltinstringT* safedevicelist) {
  delete safedevicelist_;
  safedevicelist_ = safedevicelist;
  if (safedevicelist) {
    set_has_safedevicelist();
  } else {
    clear_has_safedevicelist();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.MsgTip2.SafeDeviceList)
}

// optional int32 SafeDevice = 14;
inline bool MsgTip2::has_safedevice() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MsgTip2::set_has_safedevice() {
  _has_bits_[0] |= 0x00002000u;
}
inline void MsgTip2::clear_has_safedevice() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void MsgTip2::clear_safedevice() {
  safedevice_ = 0;
  clear_has_safedevice();
}
inline ::google::protobuf::int32 MsgTip2::safedevice() const {
  // @@protoc_insertion_point(field_get:FromCs.MsgTip2.SafeDevice)
  return safedevice_;
}
inline void MsgTip2::set_safedevice(::google::protobuf::int32 value) {
  set_has_safedevice();
  safedevice_ = value;
  // @@protoc_insertion_point(field_set:FromCs.MsgTip2.SafeDevice)
}

// optional int32 GrayscaleFlag = 15;
inline bool MsgTip2::has_grayscaleflag() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void MsgTip2::set_has_grayscaleflag() {
  _has_bits_[0] |= 0x00004000u;
}
inline void MsgTip2::clear_has_grayscaleflag() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void MsgTip2::clear_grayscaleflag() {
  grayscaleflag_ = 0;
  clear_has_grayscaleflag();
}
inline ::google::protobuf::int32 MsgTip2::grayscaleflag() const {
  // @@protoc_insertion_point(field_get:FromCs.MsgTip2.GrayscaleFlag)
  return grayscaleflag_;
}
inline void MsgTip2::set_grayscaleflag(::google::protobuf::int32 value) {
  set_has_grayscaleflag();
  grayscaleflag_ = value;
  // @@protoc_insertion_point(field_set:FromCs.MsgTip2.GrayscaleFlag)
}

// -------------------------------------------------------------------

// SafeDevice

// optional int32 Count = 1;
inline bool SafeDevice::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SafeDevice::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SafeDevice::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SafeDevice::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 SafeDevice::count() const {
  // @@protoc_insertion_point(field_get:FromCs.SafeDevice.Count)
  return count_;
}
inline void SafeDevice::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:FromCs.SafeDevice.Count)
}

// optional .FromCs.sKBuiltinstringT list_ = 2;
inline bool SafeDevice::has_list_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SafeDevice::set_has_list_() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SafeDevice::clear_has_list_() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SafeDevice::clear_list_() {
  if (list__ != NULL) list__->::FromCs::sKBuiltinstringT::Clear();
  clear_has_list_();
}
inline const ::FromCs::sKBuiltinstringT& SafeDevice::list_() const {
  // @@protoc_insertion_point(field_get:FromCs.SafeDevice.list_)
  return list__ != NULL ? *list__
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* SafeDevice::mutable_list_() {
  set_has_list_();
  if (list__ == NULL) {
    list__ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.SafeDevice.list_)
  return list__;
}
inline ::FromCs::sKBuiltinstringT* SafeDevice::release_list_() {
  // @@protoc_insertion_point(field_release:FromCs.SafeDevice.list_)
  clear_has_list_();
  ::FromCs::sKBuiltinstringT* temp = list__;
  list__ = NULL;
  return temp;
}
inline void SafeDevice::set_allocated_list_(::FromCs::sKBuiltinstringT* list_) {
  delete list__;
  list__ = list_;
  if (list_) {
    set_has_list_();
  } else {
    clear_has_list_();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.SafeDevice.list_)
}

// -------------------------------------------------------------------

// SafeDeviceObj

// optional string Name = 1;
inline bool SafeDeviceObj::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SafeDeviceObj::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SafeDeviceObj::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SafeDeviceObj::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& SafeDeviceObj::name() const {
  // @@protoc_insertion_point(field_get:FromCs.SafeDeviceObj.Name)
  return name_.GetNoArena();
}
inline void SafeDeviceObj::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.SafeDeviceObj.Name)
}
#if LANG_CXX11
inline void SafeDeviceObj::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.SafeDeviceObj.Name)
}
#endif
inline void SafeDeviceObj::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.SafeDeviceObj.Name)
}
inline void SafeDeviceObj::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.SafeDeviceObj.Name)
}
inline ::std::string* SafeDeviceObj::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:FromCs.SafeDeviceObj.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SafeDeviceObj::release_name() {
  // @@protoc_insertion_point(field_release:FromCs.SafeDeviceObj.Name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SafeDeviceObj::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:FromCs.SafeDeviceObj.Name)
}

// optional string Uuid = 2;
inline bool SafeDeviceObj::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SafeDeviceObj::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SafeDeviceObj::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SafeDeviceObj::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uuid();
}
inline const ::std::string& SafeDeviceObj::uuid() const {
  // @@protoc_insertion_point(field_get:FromCs.SafeDeviceObj.Uuid)
  return uuid_.GetNoArena();
}
inline void SafeDeviceObj::set_uuid(const ::std::string& value) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.SafeDeviceObj.Uuid)
}
#if LANG_CXX11
inline void SafeDeviceObj::set_uuid(::std::string&& value) {
  set_has_uuid();
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.SafeDeviceObj.Uuid)
}
#endif
inline void SafeDeviceObj::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.SafeDeviceObj.Uuid)
}
inline void SafeDeviceObj::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.SafeDeviceObj.Uuid)
}
inline ::std::string* SafeDeviceObj::mutable_uuid() {
  set_has_uuid();
  // @@protoc_insertion_point(field_mutable:FromCs.SafeDeviceObj.Uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SafeDeviceObj::release_uuid() {
  // @@protoc_insertion_point(field_release:FromCs.SafeDeviceObj.Uuid)
  clear_has_uuid();
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SafeDeviceObj::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    set_has_uuid();
  } else {
    clear_has_uuid();
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:FromCs.SafeDeviceObj.Uuid)
}

// optional string DeviceType = 3;
inline bool SafeDeviceObj::has_devicetype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SafeDeviceObj::set_has_devicetype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SafeDeviceObj::clear_has_devicetype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SafeDeviceObj::clear_devicetype() {
  devicetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_devicetype();
}
inline const ::std::string& SafeDeviceObj::devicetype() const {
  // @@protoc_insertion_point(field_get:FromCs.SafeDeviceObj.DeviceType)
  return devicetype_.GetNoArena();
}
inline void SafeDeviceObj::set_devicetype(const ::std::string& value) {
  set_has_devicetype();
  devicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.SafeDeviceObj.DeviceType)
}
#if LANG_CXX11
inline void SafeDeviceObj::set_devicetype(::std::string&& value) {
  set_has_devicetype();
  devicetype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.SafeDeviceObj.DeviceType)
}
#endif
inline void SafeDeviceObj::set_devicetype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_devicetype();
  devicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.SafeDeviceObj.DeviceType)
}
inline void SafeDeviceObj::set_devicetype(const char* value, size_t size) {
  set_has_devicetype();
  devicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.SafeDeviceObj.DeviceType)
}
inline ::std::string* SafeDeviceObj::mutable_devicetype() {
  set_has_devicetype();
  // @@protoc_insertion_point(field_mutable:FromCs.SafeDeviceObj.DeviceType)
  return devicetype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SafeDeviceObj::release_devicetype() {
  // @@protoc_insertion_point(field_release:FromCs.SafeDeviceObj.DeviceType)
  clear_has_devicetype();
  return devicetype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SafeDeviceObj::set_allocated_devicetype(::std::string* devicetype) {
  if (devicetype != NULL) {
    set_has_devicetype();
  } else {
    clear_has_devicetype();
  }
  devicetype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicetype);
  // @@protoc_insertion_point(field_set_allocated:FromCs.SafeDeviceObj.DeviceType)
}

// optional int32 CreateTime = 4;
inline bool SafeDeviceObj::has_createtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SafeDeviceObj::set_has_createtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SafeDeviceObj::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SafeDeviceObj::clear_createtime() {
  createtime_ = 0;
  clear_has_createtime();
}
inline ::google::protobuf::int32 SafeDeviceObj::createtime() const {
  // @@protoc_insertion_point(field_get:FromCs.SafeDeviceObj.CreateTime)
  return createtime_;
}
inline void SafeDeviceObj::set_createtime(::google::protobuf::int32 value) {
  set_has_createtime();
  createtime_ = value;
  // @@protoc_insertion_point(field_set:FromCs.SafeDeviceObj.CreateTime)
}

// -------------------------------------------------------------------

// Msg

// optional int32 MsgId = 1;
inline bool Msg::has_msgid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Msg::set_has_msgid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Msg::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Msg::clear_msgid() {
  msgid_ = 0;
  clear_has_msgid();
}
inline ::google::protobuf::int32 Msg::msgid() const {
  // @@protoc_insertion_point(field_get:FromCs.Msg.MsgId)
  return msgid_;
}
inline void Msg::set_msgid(::google::protobuf::int32 value) {
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:FromCs.Msg.MsgId)
}

// optional .FromCs.sKBuiltinstringT FromUserName = 2;
inline bool Msg::has_fromusername() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Msg::set_has_fromusername() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Msg::clear_has_fromusername() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Msg::clear_fromusername() {
  if (fromusername_ != NULL) fromusername_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_fromusername();
}
inline const ::FromCs::sKBuiltinstringT& Msg::fromusername() const {
  // @@protoc_insertion_point(field_get:FromCs.Msg.FromUserName)
  return fromusername_ != NULL ? *fromusername_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* Msg::mutable_fromusername() {
  set_has_fromusername();
  if (fromusername_ == NULL) {
    fromusername_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.Msg.FromUserName)
  return fromusername_;
}
inline ::FromCs::sKBuiltinstringT* Msg::release_fromusername() {
  // @@protoc_insertion_point(field_release:FromCs.Msg.FromUserName)
  clear_has_fromusername();
  ::FromCs::sKBuiltinstringT* temp = fromusername_;
  fromusername_ = NULL;
  return temp;
}
inline void Msg::set_allocated_fromusername(::FromCs::sKBuiltinstringT* fromusername) {
  delete fromusername_;
  fromusername_ = fromusername;
  if (fromusername) {
    set_has_fromusername();
  } else {
    clear_has_fromusername();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.Msg.FromUserName)
}

// optional .FromCs.sKBuiltinstringT ToUserName = 3;
inline bool Msg::has_tousername() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Msg::set_has_tousername() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Msg::clear_has_tousername() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Msg::clear_tousername() {
  if (tousername_ != NULL) tousername_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_tousername();
}
inline const ::FromCs::sKBuiltinstringT& Msg::tousername() const {
  // @@protoc_insertion_point(field_get:FromCs.Msg.ToUserName)
  return tousername_ != NULL ? *tousername_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* Msg::mutable_tousername() {
  set_has_tousername();
  if (tousername_ == NULL) {
    tousername_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.Msg.ToUserName)
  return tousername_;
}
inline ::FromCs::sKBuiltinstringT* Msg::release_tousername() {
  // @@protoc_insertion_point(field_release:FromCs.Msg.ToUserName)
  clear_has_tousername();
  ::FromCs::sKBuiltinstringT* temp = tousername_;
  tousername_ = NULL;
  return temp;
}
inline void Msg::set_allocated_tousername(::FromCs::sKBuiltinstringT* tousername) {
  delete tousername_;
  tousername_ = tousername;
  if (tousername) {
    set_has_tousername();
  } else {
    clear_has_tousername();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.Msg.ToUserName)
}

// optional int32 MsgType = 4;
inline bool Msg::has_msgtype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Msg::set_has_msgtype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Msg::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Msg::clear_msgtype() {
  msgtype_ = 0;
  clear_has_msgtype();
}
inline ::google::protobuf::int32 Msg::msgtype() const {
  // @@protoc_insertion_point(field_get:FromCs.Msg.MsgType)
  return msgtype_;
}
inline void Msg::set_msgtype(::google::protobuf::int32 value) {
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:FromCs.Msg.MsgType)
}

// optional .FromCs.sKBuiltinstringT Content = 5;
inline bool Msg::has_content() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Msg::set_has_content() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Msg::clear_has_content() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Msg::clear_content() {
  if (content_ != NULL) content_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_content();
}
inline const ::FromCs::sKBuiltinstringT& Msg::content() const {
  // @@protoc_insertion_point(field_get:FromCs.Msg.Content)
  return content_ != NULL ? *content_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* Msg::mutable_content() {
  set_has_content();
  if (content_ == NULL) {
    content_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.Msg.Content)
  return content_;
}
inline ::FromCs::sKBuiltinstringT* Msg::release_content() {
  // @@protoc_insertion_point(field_release:FromCs.Msg.Content)
  clear_has_content();
  ::FromCs::sKBuiltinstringT* temp = content_;
  content_ = NULL;
  return temp;
}
inline void Msg::set_allocated_content(::FromCs::sKBuiltinstringT* content) {
  delete content_;
  content_ = content;
  if (content) {
    set_has_content();
  } else {
    clear_has_content();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.Msg.Content)
}

// optional int32 Status = 6;
inline bool Msg::has_status() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Msg::set_has_status() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Msg::clear_has_status() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Msg::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 Msg::status() const {
  // @@protoc_insertion_point(field_get:FromCs.Msg.Status)
  return status_;
}
inline void Msg::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:FromCs.Msg.Status)
}

// optional int32 ImgStatus = 7;
inline bool Msg::has_imgstatus() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Msg::set_has_imgstatus() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Msg::clear_has_imgstatus() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Msg::clear_imgstatus() {
  imgstatus_ = 0;
  clear_has_imgstatus();
}
inline ::google::protobuf::int32 Msg::imgstatus() const {
  // @@protoc_insertion_point(field_get:FromCs.Msg.ImgStatus)
  return imgstatus_;
}
inline void Msg::set_imgstatus(::google::protobuf::int32 value) {
  set_has_imgstatus();
  imgstatus_ = value;
  // @@protoc_insertion_point(field_set:FromCs.Msg.ImgStatus)
}

// optional .FromCs.sKBuiltinstringT ImgBuf = 8;
inline bool Msg::has_imgbuf() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Msg::set_has_imgbuf() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Msg::clear_has_imgbuf() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Msg::clear_imgbuf() {
  if (imgbuf_ != NULL) imgbuf_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_imgbuf();
}
inline const ::FromCs::sKBuiltinstringT& Msg::imgbuf() const {
  // @@protoc_insertion_point(field_get:FromCs.Msg.ImgBuf)
  return imgbuf_ != NULL ? *imgbuf_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* Msg::mutable_imgbuf() {
  set_has_imgbuf();
  if (imgbuf_ == NULL) {
    imgbuf_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.Msg.ImgBuf)
  return imgbuf_;
}
inline ::FromCs::sKBuiltinstringT* Msg::release_imgbuf() {
  // @@protoc_insertion_point(field_release:FromCs.Msg.ImgBuf)
  clear_has_imgbuf();
  ::FromCs::sKBuiltinstringT* temp = imgbuf_;
  imgbuf_ = NULL;
  return temp;
}
inline void Msg::set_allocated_imgbuf(::FromCs::sKBuiltinstringT* imgbuf) {
  delete imgbuf_;
  imgbuf_ = imgbuf;
  if (imgbuf) {
    set_has_imgbuf();
  } else {
    clear_has_imgbuf();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.Msg.ImgBuf)
}

// optional int32 CreateTime = 9;
inline bool Msg::has_createtime() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Msg::set_has_createtime() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Msg::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Msg::clear_createtime() {
  createtime_ = 0;
  clear_has_createtime();
}
inline ::google::protobuf::int32 Msg::createtime() const {
  // @@protoc_insertion_point(field_get:FromCs.Msg.CreateTime)
  return createtime_;
}
inline void Msg::set_createtime(::google::protobuf::int32 value) {
  set_has_createtime();
  createtime_ = value;
  // @@protoc_insertion_point(field_set:FromCs.Msg.CreateTime)
}

// optional string MsgSource = 10;
inline bool Msg::has_msgsource() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg::set_has_msgsource() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Msg::clear_has_msgsource() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Msg::clear_msgsource() {
  msgsource_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msgsource();
}
inline const ::std::string& Msg::msgsource() const {
  // @@protoc_insertion_point(field_get:FromCs.Msg.MsgSource)
  return msgsource_.GetNoArena();
}
inline void Msg::set_msgsource(const ::std::string& value) {
  set_has_msgsource();
  msgsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.Msg.MsgSource)
}
#if LANG_CXX11
inline void Msg::set_msgsource(::std::string&& value) {
  set_has_msgsource();
  msgsource_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.Msg.MsgSource)
}
#endif
inline void Msg::set_msgsource(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msgsource();
  msgsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.Msg.MsgSource)
}
inline void Msg::set_msgsource(const char* value, size_t size) {
  set_has_msgsource();
  msgsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.Msg.MsgSource)
}
inline ::std::string* Msg::mutable_msgsource() {
  set_has_msgsource();
  // @@protoc_insertion_point(field_mutable:FromCs.Msg.MsgSource)
  return msgsource_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Msg::release_msgsource() {
  // @@protoc_insertion_point(field_release:FromCs.Msg.MsgSource)
  clear_has_msgsource();
  return msgsource_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Msg::set_allocated_msgsource(::std::string* msgsource) {
  if (msgsource != NULL) {
    set_has_msgsource();
  } else {
    clear_has_msgsource();
  }
  msgsource_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgsource);
  // @@protoc_insertion_point(field_set_allocated:FromCs.Msg.MsgSource)
}

// optional string PushContent = 11;
inline bool Msg::has_pushcontent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Msg::set_has_pushcontent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Msg::clear_has_pushcontent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Msg::clear_pushcontent() {
  pushcontent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pushcontent();
}
inline const ::std::string& Msg::pushcontent() const {
  // @@protoc_insertion_point(field_get:FromCs.Msg.PushContent)
  return pushcontent_.GetNoArena();
}
inline void Msg::set_pushcontent(const ::std::string& value) {
  set_has_pushcontent();
  pushcontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.Msg.PushContent)
}
#if LANG_CXX11
inline void Msg::set_pushcontent(::std::string&& value) {
  set_has_pushcontent();
  pushcontent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.Msg.PushContent)
}
#endif
inline void Msg::set_pushcontent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pushcontent();
  pushcontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.Msg.PushContent)
}
inline void Msg::set_pushcontent(const char* value, size_t size) {
  set_has_pushcontent();
  pushcontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.Msg.PushContent)
}
inline ::std::string* Msg::mutable_pushcontent() {
  set_has_pushcontent();
  // @@protoc_insertion_point(field_mutable:FromCs.Msg.PushContent)
  return pushcontent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Msg::release_pushcontent() {
  // @@protoc_insertion_point(field_release:FromCs.Msg.PushContent)
  clear_has_pushcontent();
  return pushcontent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Msg::set_allocated_pushcontent(::std::string* pushcontent) {
  if (pushcontent != NULL) {
    set_has_pushcontent();
  } else {
    clear_has_pushcontent();
  }
  pushcontent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pushcontent);
  // @@protoc_insertion_point(field_set_allocated:FromCs.Msg.PushContent)
}

// -------------------------------------------------------------------

// HeadImg

// optional int32 ImgType = 1;
inline bool HeadImg::has_imgtype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HeadImg::set_has_imgtype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HeadImg::clear_has_imgtype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HeadImg::clear_imgtype() {
  imgtype_ = 0;
  clear_has_imgtype();
}
inline ::google::protobuf::int32 HeadImg::imgtype() const {
  // @@protoc_insertion_point(field_get:FromCs.HeadImg.ImgType)
  return imgtype_;
}
inline void HeadImg::set_imgtype(::google::protobuf::int32 value) {
  set_has_imgtype();
  imgtype_ = value;
  // @@protoc_insertion_point(field_set:FromCs.HeadImg.ImgType)
}

// optional int32 ImgLen = 2;
inline bool HeadImg::has_imglen() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void HeadImg::set_has_imglen() {
  _has_bits_[0] |= 0x00000020u;
}
inline void HeadImg::clear_has_imglen() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void HeadImg::clear_imglen() {
  imglen_ = 0;
  clear_has_imglen();
}
inline ::google::protobuf::int32 HeadImg::imglen() const {
  // @@protoc_insertion_point(field_get:FromCs.HeadImg.ImgLen)
  return imglen_;
}
inline void HeadImg::set_imglen(::google::protobuf::int32 value) {
  set_has_imglen();
  imglen_ = value;
  // @@protoc_insertion_point(field_set:FromCs.HeadImg.ImgLen)
}

// optional bytes ImgBuf = 3;
inline bool HeadImg::has_imgbuf() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeadImg::set_has_imgbuf() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeadImg::clear_has_imgbuf() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeadImg::clear_imgbuf() {
  imgbuf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_imgbuf();
}
inline const ::std::string& HeadImg::imgbuf() const {
  // @@protoc_insertion_point(field_get:FromCs.HeadImg.ImgBuf)
  return imgbuf_.GetNoArena();
}
inline void HeadImg::set_imgbuf(const ::std::string& value) {
  set_has_imgbuf();
  imgbuf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.HeadImg.ImgBuf)
}
#if LANG_CXX11
inline void HeadImg::set_imgbuf(::std::string&& value) {
  set_has_imgbuf();
  imgbuf_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.HeadImg.ImgBuf)
}
#endif
inline void HeadImg::set_imgbuf(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_imgbuf();
  imgbuf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.HeadImg.ImgBuf)
}
inline void HeadImg::set_imgbuf(const void* value, size_t size) {
  set_has_imgbuf();
  imgbuf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.HeadImg.ImgBuf)
}
inline ::std::string* HeadImg::mutable_imgbuf() {
  set_has_imgbuf();
  // @@protoc_insertion_point(field_mutable:FromCs.HeadImg.ImgBuf)
  return imgbuf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HeadImg::release_imgbuf() {
  // @@protoc_insertion_point(field_release:FromCs.HeadImg.ImgBuf)
  clear_has_imgbuf();
  return imgbuf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeadImg::set_allocated_imgbuf(::std::string* imgbuf) {
  if (imgbuf != NULL) {
    set_has_imgbuf();
  } else {
    clear_has_imgbuf();
  }
  imgbuf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imgbuf);
  // @@protoc_insertion_point(field_set_allocated:FromCs.HeadImg.ImgBuf)
}

// optional string ImgMd5 = 4;
inline bool HeadImg::has_imgmd5() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HeadImg::set_has_imgmd5() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HeadImg::clear_has_imgmd5() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HeadImg::clear_imgmd5() {
  imgmd5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_imgmd5();
}
inline const ::std::string& HeadImg::imgmd5() const {
  // @@protoc_insertion_point(field_get:FromCs.HeadImg.ImgMd5)
  return imgmd5_.GetNoArena();
}
inline void HeadImg::set_imgmd5(const ::std::string& value) {
  set_has_imgmd5();
  imgmd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.HeadImg.ImgMd5)
}
#if LANG_CXX11
inline void HeadImg::set_imgmd5(::std::string&& value) {
  set_has_imgmd5();
  imgmd5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.HeadImg.ImgMd5)
}
#endif
inline void HeadImg::set_imgmd5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_imgmd5();
  imgmd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.HeadImg.ImgMd5)
}
inline void HeadImg::set_imgmd5(const char* value, size_t size) {
  set_has_imgmd5();
  imgmd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.HeadImg.ImgMd5)
}
inline ::std::string* HeadImg::mutable_imgmd5() {
  set_has_imgmd5();
  // @@protoc_insertion_point(field_mutable:FromCs.HeadImg.ImgMd5)
  return imgmd5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HeadImg::release_imgmd5() {
  // @@protoc_insertion_point(field_release:FromCs.HeadImg.ImgMd5)
  clear_has_imgmd5();
  return imgmd5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeadImg::set_allocated_imgmd5(::std::string* imgmd5) {
  if (imgmd5 != NULL) {
    set_has_imgmd5();
  } else {
    clear_has_imgmd5();
  }
  imgmd5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imgmd5);
  // @@protoc_insertion_point(field_set_allocated:FromCs.HeadImg.ImgMd5)
}

// optional string BigHeadImgUrl = 5;
inline bool HeadImg::has_bigheadimgurl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HeadImg::set_has_bigheadimgurl() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HeadImg::clear_has_bigheadimgurl() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HeadImg::clear_bigheadimgurl() {
  bigheadimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bigheadimgurl();
}
inline const ::std::string& HeadImg::bigheadimgurl() const {
  // @@protoc_insertion_point(field_get:FromCs.HeadImg.BigHeadImgUrl)
  return bigheadimgurl_.GetNoArena();
}
inline void HeadImg::set_bigheadimgurl(const ::std::string& value) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.HeadImg.BigHeadImgUrl)
}
#if LANG_CXX11
inline void HeadImg::set_bigheadimgurl(::std::string&& value) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.HeadImg.BigHeadImgUrl)
}
#endif
inline void HeadImg::set_bigheadimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.HeadImg.BigHeadImgUrl)
}
inline void HeadImg::set_bigheadimgurl(const char* value, size_t size) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.HeadImg.BigHeadImgUrl)
}
inline ::std::string* HeadImg::mutable_bigheadimgurl() {
  set_has_bigheadimgurl();
  // @@protoc_insertion_point(field_mutable:FromCs.HeadImg.BigHeadImgUrl)
  return bigheadimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HeadImg::release_bigheadimgurl() {
  // @@protoc_insertion_point(field_release:FromCs.HeadImg.BigHeadImgUrl)
  clear_has_bigheadimgurl();
  return bigheadimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeadImg::set_allocated_bigheadimgurl(::std::string* bigheadimgurl) {
  if (bigheadimgurl != NULL) {
    set_has_bigheadimgurl();
  } else {
    clear_has_bigheadimgurl();
  }
  bigheadimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bigheadimgurl);
  // @@protoc_insertion_point(field_set_allocated:FromCs.HeadImg.BigHeadImgUrl)
}

// optional string SmallHeadImgUrl = 6;
inline bool HeadImg::has_smallheadimgurl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HeadImg::set_has_smallheadimgurl() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HeadImg::clear_has_smallheadimgurl() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HeadImg::clear_smallheadimgurl() {
  smallheadimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_smallheadimgurl();
}
inline const ::std::string& HeadImg::smallheadimgurl() const {
  // @@protoc_insertion_point(field_get:FromCs.HeadImg.SmallHeadImgUrl)
  return smallheadimgurl_.GetNoArena();
}
inline void HeadImg::set_smallheadimgurl(const ::std::string& value) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.HeadImg.SmallHeadImgUrl)
}
#if LANG_CXX11
inline void HeadImg::set_smallheadimgurl(::std::string&& value) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.HeadImg.SmallHeadImgUrl)
}
#endif
inline void HeadImg::set_smallheadimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.HeadImg.SmallHeadImgUrl)
}
inline void HeadImg::set_smallheadimgurl(const char* value, size_t size) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.HeadImg.SmallHeadImgUrl)
}
inline ::std::string* HeadImg::mutable_smallheadimgurl() {
  set_has_smallheadimgurl();
  // @@protoc_insertion_point(field_mutable:FromCs.HeadImg.SmallHeadImgUrl)
  return smallheadimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HeadImg::release_smallheadimgurl() {
  // @@protoc_insertion_point(field_release:FromCs.HeadImg.SmallHeadImgUrl)
  clear_has_smallheadimgurl();
  return smallheadimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeadImg::set_allocated_smallheadimgurl(::std::string* smallheadimgurl) {
  if (smallheadimgurl != NULL) {
    set_has_smallheadimgurl();
  } else {
    clear_has_smallheadimgurl();
  }
  smallheadimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smallheadimgurl);
  // @@protoc_insertion_point(field_set_allocated:FromCs.HeadImg.SmallHeadImgUrl)
}

// -------------------------------------------------------------------

// updateSomething

// optional int32 FunctionId = 1;
inline bool updateSomething::has_functionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void updateSomething::set_has_functionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void updateSomething::clear_has_functionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void updateSomething::clear_functionid() {
  functionid_ = 0;
  clear_has_functionid();
}
inline ::google::protobuf::int32 updateSomething::functionid() const {
  // @@protoc_insertion_point(field_get:FromCs.updateSomething.FunctionId)
  return functionid_;
}
inline void updateSomething::set_functionid(::google::protobuf::int32 value) {
  set_has_functionid();
  functionid_ = value;
  // @@protoc_insertion_point(field_set:FromCs.updateSomething.FunctionId)
}

// optional int32 SwitchValue = 2;
inline bool updateSomething::has_switchvalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void updateSomething::set_has_switchvalue() {
  _has_bits_[0] |= 0x00000002u;
}
inline void updateSomething::clear_has_switchvalue() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void updateSomething::clear_switchvalue() {
  switchvalue_ = 0;
  clear_has_switchvalue();
}
inline ::google::protobuf::int32 updateSomething::switchvalue() const {
  // @@protoc_insertion_point(field_get:FromCs.updateSomething.SwitchValue)
  return switchvalue_;
}
inline void updateSomething::set_switchvalue(::google::protobuf::int32 value) {
  set_has_switchvalue();
  switchvalue_ = value;
  // @@protoc_insertion_point(field_set:FromCs.updateSomething.SwitchValue)
}

// -------------------------------------------------------------------

// keyValuePairstring

// optional int32 Key = 1;
inline bool keyValuePairstring::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void keyValuePairstring::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void keyValuePairstring::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void keyValuePairstring::clear_key() {
  key_ = 0;
  clear_has_key();
}
inline ::google::protobuf::int32 keyValuePairstring::key() const {
  // @@protoc_insertion_point(field_get:FromCs.keyValuePairstring.Key)
  return key_;
}
inline void keyValuePairstring::set_key(::google::protobuf::int32 value) {
  set_has_key();
  key_ = value;
  // @@protoc_insertion_point(field_set:FromCs.keyValuePairstring.Key)
}

// optional string Value = 2;
inline bool keyValuePairstring::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void keyValuePairstring::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void keyValuePairstring::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void keyValuePairstring::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& keyValuePairstring::value() const {
  // @@protoc_insertion_point(field_get:FromCs.keyValuePairstring.Value)
  return value_.GetNoArena();
}
inline void keyValuePairstring::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.keyValuePairstring.Value)
}
#if LANG_CXX11
inline void keyValuePairstring::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.keyValuePairstring.Value)
}
#endif
inline void keyValuePairstring::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.keyValuePairstring.Value)
}
inline void keyValuePairstring::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.keyValuePairstring.Value)
}
inline ::std::string* keyValuePairstring::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:FromCs.keyValuePairstring.Value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* keyValuePairstring::release_value() {
  // @@protoc_insertion_point(field_release:FromCs.keyValuePairstring.Value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void keyValuePairstring::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:FromCs.keyValuePairstring.Value)
}

// -------------------------------------------------------------------

// optionItem

// optional int32 Count = 1;
inline bool optionItem::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void optionItem::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void optionItem::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void optionItem::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 optionItem::count() const {
  // @@protoc_insertion_point(field_get:FromCs.optionItem.Count)
  return count_;
}
inline void optionItem::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:FromCs.optionItem.Count)
}

// optional .FromCs.sKBuiltinstringT list_ = 2;
inline bool optionItem::has_list_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void optionItem::set_has_list_() {
  _has_bits_[0] |= 0x00000001u;
}
inline void optionItem::clear_has_list_() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void optionItem::clear_list_() {
  if (list__ != NULL) list__->::FromCs::sKBuiltinstringT::Clear();
  clear_has_list_();
}
inline const ::FromCs::sKBuiltinstringT& optionItem::list_() const {
  // @@protoc_insertion_point(field_get:FromCs.optionItem.list_)
  return list__ != NULL ? *list__
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* optionItem::mutable_list_() {
  set_has_list_();
  if (list__ == NULL) {
    list__ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.optionItem.list_)
  return list__;
}
inline ::FromCs::sKBuiltinstringT* optionItem::release_list_() {
  // @@protoc_insertion_point(field_release:FromCs.optionItem.list_)
  clear_has_list_();
  ::FromCs::sKBuiltinstringT* temp = list__;
  list__ = NULL;
  return temp;
}
inline void optionItem::set_allocated_list_(::FromCs::sKBuiltinstringT* list_) {
  delete list__;
  list__ = list_;
  if (list_) {
    set_has_list_();
  } else {
    clear_has_list_();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.optionItem.list_)
}

// -------------------------------------------------------------------

// PackegeInfo

// optional int32 Id = 1;
inline bool PackegeInfo::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PackegeInfo::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PackegeInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PackegeInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PackegeInfo::id() const {
  // @@protoc_insertion_point(field_get:FromCs.PackegeInfo.Id)
  return id_;
}
inline void PackegeInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:FromCs.PackegeInfo.Id)
}

// optional int32 Version = 2;
inline bool PackegeInfo::has_version() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PackegeInfo::set_has_version() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PackegeInfo::clear_has_version() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PackegeInfo::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 PackegeInfo::version() const {
  // @@protoc_insertion_point(field_get:FromCs.PackegeInfo.Version)
  return version_;
}
inline void PackegeInfo::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:FromCs.PackegeInfo.Version)
}

// optional string Name = 3;
inline bool PackegeInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PackegeInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PackegeInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PackegeInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& PackegeInfo::name() const {
  // @@protoc_insertion_point(field_get:FromCs.PackegeInfo.Name)
  return name_.GetNoArena();
}
inline void PackegeInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.PackegeInfo.Name)
}
#if LANG_CXX11
inline void PackegeInfo::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.PackegeInfo.Name)
}
#endif
inline void PackegeInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.PackegeInfo.Name)
}
inline void PackegeInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.PackegeInfo.Name)
}
inline ::std::string* PackegeInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:FromCs.PackegeInfo.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PackegeInfo::release_name() {
  // @@protoc_insertion_point(field_release:FromCs.PackegeInfo.Name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PackegeInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:FromCs.PackegeInfo.Name)
}

// optional int32 Size = 4;
inline bool PackegeInfo::has_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PackegeInfo::set_has_size() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PackegeInfo::clear_has_size() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PackegeInfo::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 PackegeInfo::size() const {
  // @@protoc_insertion_point(field_get:FromCs.PackegeInfo.Size)
  return size_;
}
inline void PackegeInfo::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:FromCs.PackegeInfo.Size)
}

// optional .FromCs.sKBuiltinstringT Thumb = 5;
inline bool PackegeInfo::has_thumb() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PackegeInfo::set_has_thumb() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PackegeInfo::clear_has_thumb() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PackegeInfo::clear_thumb() {
  if (thumb_ != NULL) thumb_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_thumb();
}
inline const ::FromCs::sKBuiltinstringT& PackegeInfo::thumb() const {
  // @@protoc_insertion_point(field_get:FromCs.PackegeInfo.Thumb)
  return thumb_ != NULL ? *thumb_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* PackegeInfo::mutable_thumb() {
  set_has_thumb();
  if (thumb_ == NULL) {
    thumb_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.PackegeInfo.Thumb)
  return thumb_;
}
inline ::FromCs::sKBuiltinstringT* PackegeInfo::release_thumb() {
  // @@protoc_insertion_point(field_release:FromCs.PackegeInfo.Thumb)
  clear_has_thumb();
  ::FromCs::sKBuiltinstringT* temp = thumb_;
  thumb_ = NULL;
  return temp;
}
inline void PackegeInfo::set_allocated_thumb(::FromCs::sKBuiltinstringT* thumb) {
  delete thumb_;
  thumb_ = thumb;
  if (thumb) {
    set_has_thumb();
  } else {
    clear_has_thumb();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.PackegeInfo.Thumb)
}

// optional string PackName = 6;
inline bool PackegeInfo::has_packname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PackegeInfo::set_has_packname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PackegeInfo::clear_has_packname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PackegeInfo::clear_packname() {
  packname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_packname();
}
inline const ::std::string& PackegeInfo::packname() const {
  // @@protoc_insertion_point(field_get:FromCs.PackegeInfo.PackName)
  return packname_.GetNoArena();
}
inline void PackegeInfo::set_packname(const ::std::string& value) {
  set_has_packname();
  packname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.PackegeInfo.PackName)
}
#if LANG_CXX11
inline void PackegeInfo::set_packname(::std::string&& value) {
  set_has_packname();
  packname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.PackegeInfo.PackName)
}
#endif
inline void PackegeInfo::set_packname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_packname();
  packname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.PackegeInfo.PackName)
}
inline void PackegeInfo::set_packname(const char* value, size_t size) {
  set_has_packname();
  packname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.PackegeInfo.PackName)
}
inline ::std::string* PackegeInfo::mutable_packname() {
  set_has_packname();
  // @@protoc_insertion_point(field_mutable:FromCs.PackegeInfo.PackName)
  return packname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PackegeInfo::release_packname() {
  // @@protoc_insertion_point(field_release:FromCs.PackegeInfo.PackName)
  clear_has_packname();
  return packname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PackegeInfo::set_allocated_packname(::std::string* packname) {
  if (packname != NULL) {
    set_has_packname();
  } else {
    clear_has_packname();
  }
  packname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), packname);
  // @@protoc_insertion_point(field_set_allocated:FromCs.PackegeInfo.PackName)
}

// optional .FromCs.sKBuiltinstringT Ext = 7;
inline bool PackegeInfo::has_ext() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PackegeInfo::set_has_ext() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PackegeInfo::clear_has_ext() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PackegeInfo::clear_ext() {
  if (ext_ != NULL) ext_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_ext();
}
inline const ::FromCs::sKBuiltinstringT& PackegeInfo::ext() const {
  // @@protoc_insertion_point(field_get:FromCs.PackegeInfo.Ext)
  return ext_ != NULL ? *ext_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* PackegeInfo::mutable_ext() {
  set_has_ext();
  if (ext_ == NULL) {
    ext_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.PackegeInfo.Ext)
  return ext_;
}
inline ::FromCs::sKBuiltinstringT* PackegeInfo::release_ext() {
  // @@protoc_insertion_point(field_release:FromCs.PackegeInfo.Ext)
  clear_has_ext();
  ::FromCs::sKBuiltinstringT* temp = ext_;
  ext_ = NULL;
  return temp;
}
inline void PackegeInfo::set_allocated_ext(::FromCs::sKBuiltinstringT* ext) {
  delete ext_;
  ext_ = ext;
  if (ext) {
    set_has_ext();
  } else {
    clear_has_ext();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.PackegeInfo.Ext)
}

// -------------------------------------------------------------------

// VUserInfo

// optional int32 ID = 1;
inline bool VUserInfo::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VUserInfo::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VUserInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VUserInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 VUserInfo::id() const {
  // @@protoc_insertion_point(field_get:FromCs.VUserInfo.ID)
  return id_;
}
inline void VUserInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:FromCs.VUserInfo.ID)
}

// optional string Desc = 2;
inline bool VUserInfo::has_desc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VUserInfo::set_has_desc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VUserInfo::clear_has_desc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VUserInfo::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_desc();
}
inline const ::std::string& VUserInfo::desc() const {
  // @@protoc_insertion_point(field_get:FromCs.VUserInfo.Desc)
  return desc_.GetNoArena();
}
inline void VUserInfo::set_desc(const ::std::string& value) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.VUserInfo.Desc)
}
#if LANG_CXX11
inline void VUserInfo::set_desc(::std::string&& value) {
  set_has_desc();
  desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.VUserInfo.Desc)
}
#endif
inline void VUserInfo::set_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.VUserInfo.Desc)
}
inline void VUserInfo::set_desc(const char* value, size_t size) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.VUserInfo.Desc)
}
inline ::std::string* VUserInfo::mutable_desc() {
  set_has_desc();
  // @@protoc_insertion_point(field_mutable:FromCs.VUserInfo.Desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VUserInfo::release_desc() {
  // @@protoc_insertion_point(field_release:FromCs.VUserInfo.Desc)
  clear_has_desc();
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VUserInfo::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    set_has_desc();
  } else {
    clear_has_desc();
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:FromCs.VUserInfo.Desc)
}

// optional .FromCs.sKBuiltinstringT Icon = 3;
inline bool VUserInfo::has_icon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VUserInfo::set_has_icon() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VUserInfo::clear_has_icon() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VUserInfo::clear_icon() {
  if (icon_ != NULL) icon_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_icon();
}
inline const ::FromCs::sKBuiltinstringT& VUserInfo::icon() const {
  // @@protoc_insertion_point(field_get:FromCs.VUserInfo.Icon)
  return icon_ != NULL ? *icon_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* VUserInfo::mutable_icon() {
  set_has_icon();
  if (icon_ == NULL) {
    icon_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.VUserInfo.Icon)
  return icon_;
}
inline ::FromCs::sKBuiltinstringT* VUserInfo::release_icon() {
  // @@protoc_insertion_point(field_release:FromCs.VUserInfo.Icon)
  clear_has_icon();
  ::FromCs::sKBuiltinstringT* temp = icon_;
  icon_ = NULL;
  return temp;
}
inline void VUserInfo::set_allocated_icon(::FromCs::sKBuiltinstringT* icon) {
  delete icon_;
  icon_ = icon;
  if (icon) {
    set_has_icon();
  } else {
    clear_has_icon();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.VUserInfo.Icon)
}

// optional .FromCs.sKBuiltinstringT HDIcon = 4;
inline bool VUserInfo::has_hdicon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VUserInfo::set_has_hdicon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VUserInfo::clear_has_hdicon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VUserInfo::clear_hdicon() {
  if (hdicon_ != NULL) hdicon_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_hdicon();
}
inline const ::FromCs::sKBuiltinstringT& VUserInfo::hdicon() const {
  // @@protoc_insertion_point(field_get:FromCs.VUserInfo.HDIcon)
  return hdicon_ != NULL ? *hdicon_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* VUserInfo::mutable_hdicon() {
  set_has_hdicon();
  if (hdicon_ == NULL) {
    hdicon_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.VUserInfo.HDIcon)
  return hdicon_;
}
inline ::FromCs::sKBuiltinstringT* VUserInfo::release_hdicon() {
  // @@protoc_insertion_point(field_release:FromCs.VUserInfo.HDIcon)
  clear_has_hdicon();
  ::FromCs::sKBuiltinstringT* temp = hdicon_;
  hdicon_ = NULL;
  return temp;
}
inline void VUserInfo::set_allocated_hdicon(::FromCs::sKBuiltinstringT* hdicon) {
  delete hdicon_;
  hdicon_ = hdicon;
  if (hdicon) {
    set_has_hdicon();
  } else {
    clear_has_hdicon();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.VUserInfo.HDIcon)
}

// -------------------------------------------------------------------

// FBInfo

// optional int64 ID = 1;
inline bool FBInfo::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FBInfo::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FBInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FBInfo::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 FBInfo::id() const {
  // @@protoc_insertion_point(field_get:FromCs.FBInfo.ID)
  return id_;
}
inline void FBInfo::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:FromCs.FBInfo.ID)
}

// optional string Name = 2;
inline bool FBInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FBInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FBInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FBInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& FBInfo::name() const {
  // @@protoc_insertion_point(field_get:FromCs.FBInfo.Name)
  return name_.GetNoArena();
}
inline void FBInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.FBInfo.Name)
}
#if LANG_CXX11
inline void FBInfo::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.FBInfo.Name)
}
#endif
inline void FBInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.FBInfo.Name)
}
inline void FBInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.FBInfo.Name)
}
inline ::std::string* FBInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:FromCs.FBInfo.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FBInfo::release_name() {
  // @@protoc_insertion_point(field_release:FromCs.FBInfo.Name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FBInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:FromCs.FBInfo.Name)
}

// optional int32 ImgKey = 3;
inline bool FBInfo::has_imgkey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FBInfo::set_has_imgkey() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FBInfo::clear_has_imgkey() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FBInfo::clear_imgkey() {
  imgkey_ = 0;
  clear_has_imgkey();
}
inline ::google::protobuf::int32 FBInfo::imgkey() const {
  // @@protoc_insertion_point(field_get:FromCs.FBInfo.ImgKey)
  return imgkey_;
}
inline void FBInfo::set_imgkey(::google::protobuf::int32 value) {
  set_has_imgkey();
  imgkey_ = value;
  // @@protoc_insertion_point(field_set:FromCs.FBInfo.ImgKey)
}

// -------------------------------------------------------------------

// FriendObj

// optional string Username = 1;
inline bool FriendObj::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendObj::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendObj::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendObj::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& FriendObj::username() const {
  // @@protoc_insertion_point(field_get:FromCs.FriendObj.Username)
  return username_.GetNoArena();
}
inline void FriendObj::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.FriendObj.Username)
}
#if LANG_CXX11
inline void FriendObj::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.FriendObj.Username)
}
#endif
inline void FriendObj::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.FriendObj.Username)
}
inline void FriendObj::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.FriendObj.Username)
}
inline ::std::string* FriendObj::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:FromCs.FriendObj.Username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendObj::release_username() {
  // @@protoc_insertion_point(field_release:FromCs.FriendObj.Username)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendObj::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:FromCs.FriendObj.Username)
}

// optional string Nickname = 2;
inline bool FriendObj::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FriendObj::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FriendObj::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FriendObj::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
inline const ::std::string& FriendObj::nickname() const {
  // @@protoc_insertion_point(field_get:FromCs.FriendObj.Nickname)
  return nickname_.GetNoArena();
}
inline void FriendObj::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.FriendObj.Nickname)
}
#if LANG_CXX11
inline void FriendObj::set_nickname(::std::string&& value) {
  set_has_nickname();
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.FriendObj.Nickname)
}
#endif
inline void FriendObj::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.FriendObj.Nickname)
}
inline void FriendObj::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.FriendObj.Nickname)
}
inline ::std::string* FriendObj::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:FromCs.FriendObj.Nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendObj::release_nickname() {
  // @@protoc_insertion_point(field_release:FromCs.FriendObj.Nickname)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendObj::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:FromCs.FriendObj.Nickname)
}

// optional string MobileMD5 = 3;
inline bool FriendObj::has_mobilemd5() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FriendObj::set_has_mobilemd5() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FriendObj::clear_has_mobilemd5() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FriendObj::clear_mobilemd5() {
  mobilemd5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mobilemd5();
}
inline const ::std::string& FriendObj::mobilemd5() const {
  // @@protoc_insertion_point(field_get:FromCs.FriendObj.MobileMD5)
  return mobilemd5_.GetNoArena();
}
inline void FriendObj::set_mobilemd5(const ::std::string& value) {
  set_has_mobilemd5();
  mobilemd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.FriendObj.MobileMD5)
}
#if LANG_CXX11
inline void FriendObj::set_mobilemd5(::std::string&& value) {
  set_has_mobilemd5();
  mobilemd5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.FriendObj.MobileMD5)
}
#endif
inline void FriendObj::set_mobilemd5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mobilemd5();
  mobilemd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.FriendObj.MobileMD5)
}
inline void FriendObj::set_mobilemd5(const char* value, size_t size) {
  set_has_mobilemd5();
  mobilemd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.FriendObj.MobileMD5)
}
inline ::std::string* FriendObj::mutable_mobilemd5() {
  set_has_mobilemd5();
  // @@protoc_insertion_point(field_mutable:FromCs.FriendObj.MobileMD5)
  return mobilemd5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendObj::release_mobilemd5() {
  // @@protoc_insertion_point(field_release:FromCs.FriendObj.MobileMD5)
  clear_has_mobilemd5();
  return mobilemd5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendObj::set_allocated_mobilemd5(::std::string* mobilemd5) {
  if (mobilemd5 != NULL) {
    set_has_mobilemd5();
  } else {
    clear_has_mobilemd5();
  }
  mobilemd5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mobilemd5);
  // @@protoc_insertion_point(field_set_allocated:FromCs.FriendObj.MobileMD5)
}

// optional int32 Sex = 4;
inline bool FriendObj::has_sex() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void FriendObj::set_has_sex() {
  _has_bits_[0] |= 0x00040000u;
}
inline void FriendObj::clear_has_sex() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void FriendObj::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 FriendObj::sex() const {
  // @@protoc_insertion_point(field_get:FromCs.FriendObj.Sex)
  return sex_;
}
inline void FriendObj::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:FromCs.FriendObj.Sex)
}

// optional string Province = 5;
inline bool FriendObj::has_province() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FriendObj::set_has_province() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FriendObj::clear_has_province() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FriendObj::clear_province() {
  province_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_province();
}
inline const ::std::string& FriendObj::province() const {
  // @@protoc_insertion_point(field_get:FromCs.FriendObj.Province)
  return province_.GetNoArena();
}
inline void FriendObj::set_province(const ::std::string& value) {
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.FriendObj.Province)
}
#if LANG_CXX11
inline void FriendObj::set_province(::std::string&& value) {
  set_has_province();
  province_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.FriendObj.Province)
}
#endif
inline void FriendObj::set_province(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.FriendObj.Province)
}
inline void FriendObj::set_province(const char* value, size_t size) {
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.FriendObj.Province)
}
inline ::std::string* FriendObj::mutable_province() {
  set_has_province();
  // @@protoc_insertion_point(field_mutable:FromCs.FriendObj.Province)
  return province_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendObj::release_province() {
  // @@protoc_insertion_point(field_release:FromCs.FriendObj.Province)
  clear_has_province();
  return province_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendObj::set_allocated_province(::std::string* province) {
  if (province != NULL) {
    set_has_province();
  } else {
    clear_has_province();
  }
  province_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), province);
  // @@protoc_insertion_point(field_set_allocated:FromCs.FriendObj.Province)
}

// optional string City = 6;
inline bool FriendObj::has_city() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FriendObj::set_has_city() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FriendObj::clear_has_city() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FriendObj::clear_city() {
  city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_city();
}
inline const ::std::string& FriendObj::city() const {
  // @@protoc_insertion_point(field_get:FromCs.FriendObj.City)
  return city_.GetNoArena();
}
inline void FriendObj::set_city(const ::std::string& value) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.FriendObj.City)
}
#if LANG_CXX11
inline void FriendObj::set_city(::std::string&& value) {
  set_has_city();
  city_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.FriendObj.City)
}
#endif
inline void FriendObj::set_city(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.FriendObj.City)
}
inline void FriendObj::set_city(const char* value, size_t size) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.FriendObj.City)
}
inline ::std::string* FriendObj::mutable_city() {
  set_has_city();
  // @@protoc_insertion_point(field_mutable:FromCs.FriendObj.City)
  return city_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendObj::release_city() {
  // @@protoc_insertion_point(field_release:FromCs.FriendObj.City)
  clear_has_city();
  return city_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendObj::set_allocated_city(::std::string* city) {
  if (city != NULL) {
    set_has_city();
  } else {
    clear_has_city();
  }
  city_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:FromCs.FriendObj.City)
}

// optional string Signature = 7;
inline bool FriendObj::has_signature() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FriendObj::set_has_signature() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FriendObj::clear_has_signature() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FriendObj::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_signature();
}
inline const ::std::string& FriendObj::signature() const {
  // @@protoc_insertion_point(field_get:FromCs.FriendObj.Signature)
  return signature_.GetNoArena();
}
inline void FriendObj::set_signature(const ::std::string& value) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.FriendObj.Signature)
}
#if LANG_CXX11
inline void FriendObj::set_signature(::std::string&& value) {
  set_has_signature();
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.FriendObj.Signature)
}
#endif
inline void FriendObj::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.FriendObj.Signature)
}
inline void FriendObj::set_signature(const char* value, size_t size) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.FriendObj.Signature)
}
inline ::std::string* FriendObj::mutable_signature() {
  set_has_signature();
  // @@protoc_insertion_point(field_mutable:FromCs.FriendObj.Signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendObj::release_signature() {
  // @@protoc_insertion_point(field_release:FromCs.FriendObj.Signature)
  clear_has_signature();
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendObj::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:FromCs.FriendObj.Signature)
}

// optional int32 PersonalCard = 8;
inline bool FriendObj::has_personalcard() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void FriendObj::set_has_personalcard() {
  _has_bits_[0] |= 0x00080000u;
}
inline void FriendObj::clear_has_personalcard() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void FriendObj::clear_personalcard() {
  personalcard_ = 0;
  clear_has_personalcard();
}
inline ::google::protobuf::int32 FriendObj::personalcard() const {
  // @@protoc_insertion_point(field_get:FromCs.FriendObj.PersonalCard)
  return personalcard_;
}
inline void FriendObj::set_personalcard(::google::protobuf::int32 value) {
  set_has_personalcard();
  personalcard_ = value;
  // @@protoc_insertion_point(field_set:FromCs.FriendObj.PersonalCard)
}

// optional string Alias = 9;
inline bool FriendObj::has_alias() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FriendObj::set_has_alias() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FriendObj::clear_has_alias() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FriendObj::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_alias();
}
inline const ::std::string& FriendObj::alias() const {
  // @@protoc_insertion_point(field_get:FromCs.FriendObj.Alias)
  return alias_.GetNoArena();
}
inline void FriendObj::set_alias(const ::std::string& value) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.FriendObj.Alias)
}
#if LANG_CXX11
inline void FriendObj::set_alias(::std::string&& value) {
  set_has_alias();
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.FriendObj.Alias)
}
#endif
inline void FriendObj::set_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.FriendObj.Alias)
}
inline void FriendObj::set_alias(const char* value, size_t size) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.FriendObj.Alias)
}
inline ::std::string* FriendObj::mutable_alias() {
  set_has_alias();
  // @@protoc_insertion_point(field_mutable:FromCs.FriendObj.Alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendObj::release_alias() {
  // @@protoc_insertion_point(field_release:FromCs.FriendObj.Alias)
  clear_has_alias();
  return alias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendObj::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    set_has_alias();
  } else {
    clear_has_alias();
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:FromCs.FriendObj.Alias)
}

// optional .FromCs.sKBuiltinstringT FBInfos = 10;
inline bool FriendObj::has_fbinfos() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void FriendObj::set_has_fbinfos() {
  _has_bits_[0] |= 0x00008000u;
}
inline void FriendObj::clear_has_fbinfos() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void FriendObj::clear_fbinfos() {
  if (fbinfos_ != NULL) fbinfos_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_fbinfos();
}
inline const ::FromCs::sKBuiltinstringT& FriendObj::fbinfos() const {
  // @@protoc_insertion_point(field_get:FromCs.FriendObj.FBInfos)
  return fbinfos_ != NULL ? *fbinfos_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* FriendObj::mutable_fbinfos() {
  set_has_fbinfos();
  if (fbinfos_ == NULL) {
    fbinfos_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.FriendObj.FBInfos)
  return fbinfos_;
}
inline ::FromCs::sKBuiltinstringT* FriendObj::release_fbinfos() {
  // @@protoc_insertion_point(field_release:FromCs.FriendObj.FBInfos)
  clear_has_fbinfos();
  ::FromCs::sKBuiltinstringT* temp = fbinfos_;
  fbinfos_ = NULL;
  return temp;
}
inline void FriendObj::set_allocated_fbinfos(::FromCs::sKBuiltinstringT* fbinfos) {
  delete fbinfos_;
  fbinfos_ = fbinfos;
  if (fbinfos) {
    set_has_fbinfos();
  } else {
    clear_has_fbinfos();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.FriendObj.FBInfos)
}

// optional int32 AlbumFlag = 11;
inline bool FriendObj::has_albumflag() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void FriendObj::set_has_albumflag() {
  _has_bits_[0] |= 0x00100000u;
}
inline void FriendObj::clear_has_albumflag() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void FriendObj::clear_albumflag() {
  albumflag_ = 0;
  clear_has_albumflag();
}
inline ::google::protobuf::int32 FriendObj::albumflag() const {
  // @@protoc_insertion_point(field_get:FromCs.FriendObj.AlbumFlag)
  return albumflag_;
}
inline void FriendObj::set_albumflag(::google::protobuf::int32 value) {
  set_has_albumflag();
  albumflag_ = value;
  // @@protoc_insertion_point(field_set:FromCs.FriendObj.AlbumFlag)
}

// optional int32 AlbumStyle = 12;
inline bool FriendObj::has_albumstyle() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void FriendObj::set_has_albumstyle() {
  _has_bits_[0] |= 0x00200000u;
}
inline void FriendObj::clear_has_albumstyle() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void FriendObj::clear_albumstyle() {
  albumstyle_ = 0;
  clear_has_albumstyle();
}
inline ::google::protobuf::int32 FriendObj::albumstyle() const {
  // @@protoc_insertion_point(field_get:FromCs.FriendObj.AlbumStyle)
  return albumstyle_;
}
inline void FriendObj::set_albumstyle(::google::protobuf::int32 value) {
  set_has_albumstyle();
  albumstyle_ = value;
  // @@protoc_insertion_point(field_set:FromCs.FriendObj.AlbumStyle)
}

// optional string AlbumBGImgID = 13;
inline bool FriendObj::has_albumbgimgid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FriendObj::set_has_albumbgimgid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FriendObj::clear_has_albumbgimgid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FriendObj::clear_albumbgimgid() {
  albumbgimgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_albumbgimgid();
}
inline const ::std::string& FriendObj::albumbgimgid() const {
  // @@protoc_insertion_point(field_get:FromCs.FriendObj.AlbumBGImgID)
  return albumbgimgid_.GetNoArena();
}
inline void FriendObj::set_albumbgimgid(const ::std::string& value) {
  set_has_albumbgimgid();
  albumbgimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.FriendObj.AlbumBGImgID)
}
#if LANG_CXX11
inline void FriendObj::set_albumbgimgid(::std::string&& value) {
  set_has_albumbgimgid();
  albumbgimgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.FriendObj.AlbumBGImgID)
}
#endif
inline void FriendObj::set_albumbgimgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_albumbgimgid();
  albumbgimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.FriendObj.AlbumBGImgID)
}
inline void FriendObj::set_albumbgimgid(const char* value, size_t size) {
  set_has_albumbgimgid();
  albumbgimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.FriendObj.AlbumBGImgID)
}
inline ::std::string* FriendObj::mutable_albumbgimgid() {
  set_has_albumbgimgid();
  // @@protoc_insertion_point(field_mutable:FromCs.FriendObj.AlbumBGImgID)
  return albumbgimgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendObj::release_albumbgimgid() {
  // @@protoc_insertion_point(field_release:FromCs.FriendObj.AlbumBGImgID)
  clear_has_albumbgimgid();
  return albumbgimgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendObj::set_allocated_albumbgimgid(::std::string* albumbgimgid) {
  if (albumbgimgid != NULL) {
    set_has_albumbgimgid();
  } else {
    clear_has_albumbgimgid();
  }
  albumbgimgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), albumbgimgid);
  // @@protoc_insertion_point(field_set_allocated:FromCs.FriendObj.AlbumBGImgID)
}

// optional .FromCs.sKBuiltinstringT SnsUserInfo = 14;
inline bool FriendObj::has_snsuserinfo() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void FriendObj::set_has_snsuserinfo() {
  _has_bits_[0] |= 0x00010000u;
}
inline void FriendObj::clear_has_snsuserinfo() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void FriendObj::clear_snsuserinfo() {
  if (snsuserinfo_ != NULL) snsuserinfo_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_snsuserinfo();
}
inline const ::FromCs::sKBuiltinstringT& FriendObj::snsuserinfo() const {
  // @@protoc_insertion_point(field_get:FromCs.FriendObj.SnsUserInfo)
  return snsuserinfo_ != NULL ? *snsuserinfo_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* FriendObj::mutable_snsuserinfo() {
  set_has_snsuserinfo();
  if (snsuserinfo_ == NULL) {
    snsuserinfo_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.FriendObj.SnsUserInfo)
  return snsuserinfo_;
}
inline ::FromCs::sKBuiltinstringT* FriendObj::release_snsuserinfo() {
  // @@protoc_insertion_point(field_release:FromCs.FriendObj.SnsUserInfo)
  clear_has_snsuserinfo();
  ::FromCs::sKBuiltinstringT* temp = snsuserinfo_;
  snsuserinfo_ = NULL;
  return temp;
}
inline void FriendObj::set_allocated_snsuserinfo(::FromCs::sKBuiltinstringT* snsuserinfo) {
  delete snsuserinfo_;
  snsuserinfo_ = snsuserinfo;
  if (snsuserinfo) {
    set_has_snsuserinfo();
  } else {
    clear_has_snsuserinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.FriendObj.SnsUserInfo)
}

// optional string Country = 15;
inline bool FriendObj::has_country() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FriendObj::set_has_country() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FriendObj::clear_has_country() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FriendObj::clear_country() {
  country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country();
}
inline const ::std::string& FriendObj::country() const {
  // @@protoc_insertion_point(field_get:FromCs.FriendObj.Country)
  return country_.GetNoArena();
}
inline void FriendObj::set_country(const ::std::string& value) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.FriendObj.Country)
}
#if LANG_CXX11
inline void FriendObj::set_country(::std::string&& value) {
  set_has_country();
  country_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.FriendObj.Country)
}
#endif
inline void FriendObj::set_country(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.FriendObj.Country)
}
inline void FriendObj::set_country(const char* value, size_t size) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.FriendObj.Country)
}
inline ::std::string* FriendObj::mutable_country() {
  set_has_country();
  // @@protoc_insertion_point(field_mutable:FromCs.FriendObj.Country)
  return country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendObj::release_country() {
  // @@protoc_insertion_point(field_release:FromCs.FriendObj.Country)
  clear_has_country();
  return country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendObj::set_allocated_country(::std::string* country) {
  if (country != NULL) {
    set_has_country();
  } else {
    clear_has_country();
  }
  country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:FromCs.FriendObj.Country)
}

// optional string MyBrandList = 16;
inline bool FriendObj::has_mybrandlist() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FriendObj::set_has_mybrandlist() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FriendObj::clear_has_mybrandlist() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FriendObj::clear_mybrandlist() {
  mybrandlist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mybrandlist();
}
inline const ::std::string& FriendObj::mybrandlist() const {
  // @@protoc_insertion_point(field_get:FromCs.FriendObj.MyBrandList)
  return mybrandlist_.GetNoArena();
}
inline void FriendObj::set_mybrandlist(const ::std::string& value) {
  set_has_mybrandlist();
  mybrandlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.FriendObj.MyBrandList)
}
#if LANG_CXX11
inline void FriendObj::set_mybrandlist(::std::string&& value) {
  set_has_mybrandlist();
  mybrandlist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.FriendObj.MyBrandList)
}
#endif
inline void FriendObj::set_mybrandlist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mybrandlist();
  mybrandlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.FriendObj.MyBrandList)
}
inline void FriendObj::set_mybrandlist(const char* value, size_t size) {
  set_has_mybrandlist();
  mybrandlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.FriendObj.MyBrandList)
}
inline ::std::string* FriendObj::mutable_mybrandlist() {
  set_has_mybrandlist();
  // @@protoc_insertion_point(field_mutable:FromCs.FriendObj.MyBrandList)
  return mybrandlist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendObj::release_mybrandlist() {
  // @@protoc_insertion_point(field_release:FromCs.FriendObj.MyBrandList)
  clear_has_mybrandlist();
  return mybrandlist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendObj::set_allocated_mybrandlist(::std::string* mybrandlist) {
  if (mybrandlist != NULL) {
    set_has_mybrandlist();
  } else {
    clear_has_mybrandlist();
  }
  mybrandlist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mybrandlist);
  // @@protoc_insertion_point(field_set_allocated:FromCs.FriendObj.MyBrandList)
}

// optional .FromCs.sKBuiltinstringT CustomizedInfo = 17;
inline bool FriendObj::has_customizedinfo() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void FriendObj::set_has_customizedinfo() {
  _has_bits_[0] |= 0x00020000u;
}
inline void FriendObj::clear_has_customizedinfo() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void FriendObj::clear_customizedinfo() {
  if (customizedinfo_ != NULL) customizedinfo_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_customizedinfo();
}
inline const ::FromCs::sKBuiltinstringT& FriendObj::customizedinfo() const {
  // @@protoc_insertion_point(field_get:FromCs.FriendObj.CustomizedInfo)
  return customizedinfo_ != NULL ? *customizedinfo_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* FriendObj::mutable_customizedinfo() {
  set_has_customizedinfo();
  if (customizedinfo_ == NULL) {
    customizedinfo_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.FriendObj.CustomizedInfo)
  return customizedinfo_;
}
inline ::FromCs::sKBuiltinstringT* FriendObj::release_customizedinfo() {
  // @@protoc_insertion_point(field_release:FromCs.FriendObj.CustomizedInfo)
  clear_has_customizedinfo();
  ::FromCs::sKBuiltinstringT* temp = customizedinfo_;
  customizedinfo_ = NULL;
  return temp;
}
inline void FriendObj::set_allocated_customizedinfo(::FromCs::sKBuiltinstringT* customizedinfo) {
  delete customizedinfo_;
  customizedinfo_ = customizedinfo;
  if (customizedinfo) {
    set_has_customizedinfo();
  } else {
    clear_has_customizedinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.FriendObj.CustomizedInfo)
}

// optional string BigHeadImgUrl = 18;
inline bool FriendObj::has_bigheadimgurl() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FriendObj::set_has_bigheadimgurl() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FriendObj::clear_has_bigheadimgurl() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FriendObj::clear_bigheadimgurl() {
  bigheadimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bigheadimgurl();
}
inline const ::std::string& FriendObj::bigheadimgurl() const {
  // @@protoc_insertion_point(field_get:FromCs.FriendObj.BigHeadImgUrl)
  return bigheadimgurl_.GetNoArena();
}
inline void FriendObj::set_bigheadimgurl(const ::std::string& value) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.FriendObj.BigHeadImgUrl)
}
#if LANG_CXX11
inline void FriendObj::set_bigheadimgurl(::std::string&& value) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.FriendObj.BigHeadImgUrl)
}
#endif
inline void FriendObj::set_bigheadimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.FriendObj.BigHeadImgUrl)
}
inline void FriendObj::set_bigheadimgurl(const char* value, size_t size) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.FriendObj.BigHeadImgUrl)
}
inline ::std::string* FriendObj::mutable_bigheadimgurl() {
  set_has_bigheadimgurl();
  // @@protoc_insertion_point(field_mutable:FromCs.FriendObj.BigHeadImgUrl)
  return bigheadimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendObj::release_bigheadimgurl() {
  // @@protoc_insertion_point(field_release:FromCs.FriendObj.BigHeadImgUrl)
  clear_has_bigheadimgurl();
  return bigheadimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendObj::set_allocated_bigheadimgurl(::std::string* bigheadimgurl) {
  if (bigheadimgurl != NULL) {
    set_has_bigheadimgurl();
  } else {
    clear_has_bigheadimgurl();
  }
  bigheadimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bigheadimgurl);
  // @@protoc_insertion_point(field_set_allocated:FromCs.FriendObj.BigHeadImgUrl)
}

// optional string SmallHeadImgUrl = 19;
inline bool FriendObj::has_smallheadimgurl() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void FriendObj::set_has_smallheadimgurl() {
  _has_bits_[0] |= 0x00000800u;
}
inline void FriendObj::clear_has_smallheadimgurl() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void FriendObj::clear_smallheadimgurl() {
  smallheadimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_smallheadimgurl();
}
inline const ::std::string& FriendObj::smallheadimgurl() const {
  // @@protoc_insertion_point(field_get:FromCs.FriendObj.SmallHeadImgUrl)
  return smallheadimgurl_.GetNoArena();
}
inline void FriendObj::set_smallheadimgurl(const ::std::string& value) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.FriendObj.SmallHeadImgUrl)
}
#if LANG_CXX11
inline void FriendObj::set_smallheadimgurl(::std::string&& value) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.FriendObj.SmallHeadImgUrl)
}
#endif
inline void FriendObj::set_smallheadimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.FriendObj.SmallHeadImgUrl)
}
inline void FriendObj::set_smallheadimgurl(const char* value, size_t size) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.FriendObj.SmallHeadImgUrl)
}
inline ::std::string* FriendObj::mutable_smallheadimgurl() {
  set_has_smallheadimgurl();
  // @@protoc_insertion_point(field_mutable:FromCs.FriendObj.SmallHeadImgUrl)
  return smallheadimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendObj::release_smallheadimgurl() {
  // @@protoc_insertion_point(field_release:FromCs.FriendObj.SmallHeadImgUrl)
  clear_has_smallheadimgurl();
  return smallheadimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendObj::set_allocated_smallheadimgurl(::std::string* smallheadimgurl) {
  if (smallheadimgurl != NULL) {
    set_has_smallheadimgurl();
  } else {
    clear_has_smallheadimgurl();
  }
  smallheadimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smallheadimgurl);
  // @@protoc_insertion_point(field_set_allocated:FromCs.FriendObj.SmallHeadImgUrl)
}

// optional string Str20 = 20;
inline bool FriendObj::has_str20() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void FriendObj::set_has_str20() {
  _has_bits_[0] |= 0x00001000u;
}
inline void FriendObj::clear_has_str20() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void FriendObj::clear_str20() {
  str20_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_str20();
}
inline const ::std::string& FriendObj::str20() const {
  // @@protoc_insertion_point(field_get:FromCs.FriendObj.Str20)
  return str20_.GetNoArena();
}
inline void FriendObj::set_str20(const ::std::string& value) {
  set_has_str20();
  str20_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.FriendObj.Str20)
}
#if LANG_CXX11
inline void FriendObj::set_str20(::std::string&& value) {
  set_has_str20();
  str20_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.FriendObj.Str20)
}
#endif
inline void FriendObj::set_str20(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_str20();
  str20_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.FriendObj.Str20)
}
inline void FriendObj::set_str20(const char* value, size_t size) {
  set_has_str20();
  str20_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.FriendObj.Str20)
}
inline ::std::string* FriendObj::mutable_str20() {
  set_has_str20();
  // @@protoc_insertion_point(field_mutable:FromCs.FriendObj.Str20)
  return str20_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendObj::release_str20() {
  // @@protoc_insertion_point(field_release:FromCs.FriendObj.Str20)
  clear_has_str20();
  return str20_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendObj::set_allocated_str20(::std::string* str20) {
  if (str20 != NULL) {
    set_has_str20();
  } else {
    clear_has_str20();
  }
  str20_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str20);
  // @@protoc_insertion_point(field_set_allocated:FromCs.FriendObj.Str20)
}

// optional string Str21 = 21;
inline bool FriendObj::has_str21() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void FriendObj::set_has_str21() {
  _has_bits_[0] |= 0x00002000u;
}
inline void FriendObj::clear_has_str21() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void FriendObj::clear_str21() {
  str21_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_str21();
}
inline const ::std::string& FriendObj::str21() const {
  // @@protoc_insertion_point(field_get:FromCs.FriendObj.Str21)
  return str21_.GetNoArena();
}
inline void FriendObj::set_str21(const ::std::string& value) {
  set_has_str21();
  str21_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.FriendObj.Str21)
}
#if LANG_CXX11
inline void FriendObj::set_str21(::std::string&& value) {
  set_has_str21();
  str21_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.FriendObj.Str21)
}
#endif
inline void FriendObj::set_str21(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_str21();
  str21_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.FriendObj.Str21)
}
inline void FriendObj::set_str21(const char* value, size_t size) {
  set_has_str21();
  str21_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.FriendObj.Str21)
}
inline ::std::string* FriendObj::mutable_str21() {
  set_has_str21();
  // @@protoc_insertion_point(field_mutable:FromCs.FriendObj.Str21)
  return str21_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendObj::release_str21() {
  // @@protoc_insertion_point(field_release:FromCs.FriendObj.Str21)
  clear_has_str21();
  return str21_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendObj::set_allocated_str21(::std::string* str21) {
  if (str21 != NULL) {
    set_has_str21();
  } else {
    clear_has_str21();
  }
  str21_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str21);
  // @@protoc_insertion_point(field_set_allocated:FromCs.FriendObj.Str21)
}

// optional string Str22 = 22;
inline bool FriendObj::has_str22() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void FriendObj::set_has_str22() {
  _has_bits_[0] |= 0x00004000u;
}
inline void FriendObj::clear_has_str22() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void FriendObj::clear_str22() {
  str22_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_str22();
}
inline const ::std::string& FriendObj::str22() const {
  // @@protoc_insertion_point(field_get:FromCs.FriendObj.Str22)
  return str22_.GetNoArena();
}
inline void FriendObj::set_str22(const ::std::string& value) {
  set_has_str22();
  str22_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.FriendObj.Str22)
}
#if LANG_CXX11
inline void FriendObj::set_str22(::std::string&& value) {
  set_has_str22();
  str22_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.FriendObj.Str22)
}
#endif
inline void FriendObj::set_str22(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_str22();
  str22_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.FriendObj.Str22)
}
inline void FriendObj::set_str22(const char* value, size_t size) {
  set_has_str22();
  str22_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.FriendObj.Str22)
}
inline ::std::string* FriendObj::mutable_str22() {
  set_has_str22();
  // @@protoc_insertion_point(field_mutable:FromCs.FriendObj.Str22)
  return str22_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendObj::release_str22() {
  // @@protoc_insertion_point(field_release:FromCs.FriendObj.Str22)
  clear_has_str22();
  return str22_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendObj::set_allocated_str22(::std::string* str22) {
  if (str22 != NULL) {
    set_has_str22();
  } else {
    clear_has_str22();
  }
  str22_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str22);
  // @@protoc_insertion_point(field_set_allocated:FromCs.FriendObj.Str22)
}

// -------------------------------------------------------------------

// userObject

// optional string Username = 1;
inline bool userObject::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void userObject::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void userObject::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void userObject::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& userObject::username() const {
  // @@protoc_insertion_point(field_get:FromCs.userObject.Username)
  return username_.GetNoArena();
}
inline void userObject::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.userObject.Username)
}
#if LANG_CXX11
inline void userObject::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.userObject.Username)
}
#endif
inline void userObject::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.userObject.Username)
}
inline void userObject::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.userObject.Username)
}
inline ::std::string* userObject::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:FromCs.userObject.Username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* userObject::release_username() {
  // @@protoc_insertion_point(field_release:FromCs.userObject.Username)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void userObject::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:FromCs.userObject.Username)
}

// optional string Nickname = 2;
inline bool userObject::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void userObject::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void userObject::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void userObject::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
inline const ::std::string& userObject::nickname() const {
  // @@protoc_insertion_point(field_get:FromCs.userObject.Nickname)
  return nickname_.GetNoArena();
}
inline void userObject::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.userObject.Nickname)
}
#if LANG_CXX11
inline void userObject::set_nickname(::std::string&& value) {
  set_has_nickname();
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.userObject.Nickname)
}
#endif
inline void userObject::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.userObject.Nickname)
}
inline void userObject::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.userObject.Nickname)
}
inline ::std::string* userObject::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:FromCs.userObject.Nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* userObject::release_nickname() {
  // @@protoc_insertion_point(field_release:FromCs.userObject.Nickname)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void userObject::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:FromCs.userObject.Nickname)
}

// optional int32 Source = 3;
inline bool userObject::has_source() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void userObject::set_has_source() {
  _has_bits_[0] |= 0x00000010u;
}
inline void userObject::clear_has_source() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void userObject::clear_source() {
  source_ = 0;
  clear_has_source();
}
inline ::google::protobuf::int32 userObject::source() const {
  // @@protoc_insertion_point(field_get:FromCs.userObject.Source)
  return source_;
}
inline void userObject::set_source(::google::protobuf::int32 value) {
  set_has_source();
  source_ = value;
  // @@protoc_insertion_point(field_set:FromCs.userObject.Source)
}

// optional int32 Type = 4;
inline bool userObject::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void userObject::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void userObject::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void userObject::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 userObject::type() const {
  // @@protoc_insertion_point(field_get:FromCs.userObject.Type)
  return type_;
}
inline void userObject::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:FromCs.userObject.Type)
}

// optional string Content = 5;
inline bool userObject::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void userObject::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void userObject::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void userObject::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
inline const ::std::string& userObject::content() const {
  // @@protoc_insertion_point(field_get:FromCs.userObject.Content)
  return content_.GetNoArena();
}
inline void userObject::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.userObject.Content)
}
#if LANG_CXX11
inline void userObject::set_content(::std::string&& value) {
  set_has_content();
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.userObject.Content)
}
#endif
inline void userObject::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.userObject.Content)
}
inline void userObject::set_content(const char* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.userObject.Content)
}
inline ::std::string* userObject::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:FromCs.userObject.Content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* userObject::release_content() {
  // @@protoc_insertion_point(field_release:FromCs.userObject.Content)
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void userObject::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:FromCs.userObject.Content)
}

// optional int32 CreateTime = 6;
inline bool userObject::has_createtime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void userObject::set_has_createtime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void userObject::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void userObject::clear_createtime() {
  createtime_ = 0;
  clear_has_createtime();
}
inline ::google::protobuf::int32 userObject::createtime() const {
  // @@protoc_insertion_point(field_get:FromCs.userObject.CreateTime)
  return createtime_;
}
inline void userObject::set_createtime(::google::protobuf::int32 value) {
  set_has_createtime();
  createtime_ = value;
  // @@protoc_insertion_point(field_set:FromCs.userObject.CreateTime)
}

// optional int32 CommentId = 7;
inline bool userObject::has_commentid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void userObject::set_has_commentid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void userObject::clear_has_commentid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void userObject::clear_commentid() {
  commentid_ = 0;
  clear_has_commentid();
}
inline ::google::protobuf::int32 userObject::commentid() const {
  // @@protoc_insertion_point(field_get:FromCs.userObject.CommentId)
  return commentid_;
}
inline void userObject::set_commentid(::google::protobuf::int32 value) {
  set_has_commentid();
  commentid_ = value;
  // @@protoc_insertion_point(field_set:FromCs.userObject.CommentId)
}

// optional int32 ReplyCommentId = 8;
inline bool userObject::has_replycommentid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void userObject::set_has_replycommentid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void userObject::clear_has_replycommentid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void userObject::clear_replycommentid() {
  replycommentid_ = 0;
  clear_has_replycommentid();
}
inline ::google::protobuf::int32 userObject::replycommentid() const {
  // @@protoc_insertion_point(field_get:FromCs.userObject.ReplyCommentId)
  return replycommentid_;
}
inline void userObject::set_replycommentid(::google::protobuf::int32 value) {
  set_has_replycommentid();
  replycommentid_ = value;
  // @@protoc_insertion_point(field_set:FromCs.userObject.ReplyCommentId)
}

// optional string ReplyUsername = 9;
inline bool userObject::has_replyusername() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void userObject::set_has_replyusername() {
  _has_bits_[0] |= 0x00000008u;
}
inline void userObject::clear_has_replyusername() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void userObject::clear_replyusername() {
  replyusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_replyusername();
}
inline const ::std::string& userObject::replyusername() const {
  // @@protoc_insertion_point(field_get:FromCs.userObject.ReplyUsername)
  return replyusername_.GetNoArena();
}
inline void userObject::set_replyusername(const ::std::string& value) {
  set_has_replyusername();
  replyusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.userObject.ReplyUsername)
}
#if LANG_CXX11
inline void userObject::set_replyusername(::std::string&& value) {
  set_has_replyusername();
  replyusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.userObject.ReplyUsername)
}
#endif
inline void userObject::set_replyusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_replyusername();
  replyusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.userObject.ReplyUsername)
}
inline void userObject::set_replyusername(const char* value, size_t size) {
  set_has_replyusername();
  replyusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.userObject.ReplyUsername)
}
inline ::std::string* userObject::mutable_replyusername() {
  set_has_replyusername();
  // @@protoc_insertion_point(field_mutable:FromCs.userObject.ReplyUsername)
  return replyusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* userObject::release_replyusername() {
  // @@protoc_insertion_point(field_release:FromCs.userObject.ReplyUsername)
  clear_has_replyusername();
  return replyusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void userObject::set_allocated_replyusername(::std::string* replyusername) {
  if (replyusername != NULL) {
    set_has_replyusername();
  } else {
    clear_has_replyusername();
  }
  replyusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), replyusername);
  // @@protoc_insertion_point(field_set_allocated:FromCs.userObject.ReplyUsername)
}

// optional int32 IsNotRichText = 10;
inline bool userObject::has_isnotrichtext() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void userObject::set_has_isnotrichtext() {
  _has_bits_[0] |= 0x00000200u;
}
inline void userObject::clear_has_isnotrichtext() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void userObject::clear_isnotrichtext() {
  isnotrichtext_ = 0;
  clear_has_isnotrichtext();
}
inline ::google::protobuf::int32 userObject::isnotrichtext() const {
  // @@protoc_insertion_point(field_get:FromCs.userObject.IsNotRichText)
  return isnotrichtext_;
}
inline void userObject::set_isnotrichtext(::google::protobuf::int32 value) {
  set_has_isnotrichtext();
  isnotrichtext_ = value;
  // @@protoc_insertion_point(field_set:FromCs.userObject.IsNotRichText)
}

// -------------------------------------------------------------------

// GroupObject

// optional int64 GroupId = 1;
inline bool GroupObject::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GroupObject::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GroupObject::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GroupObject::clear_groupid() {
  groupid_ = GOOGLE_LONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::int64 GroupObject::groupid() const {
  // @@protoc_insertion_point(field_get:FromCs.GroupObject.GroupId)
  return groupid_;
}
inline void GroupObject::set_groupid(::google::protobuf::int64 value) {
  set_has_groupid();
  groupid_ = value;
  // @@protoc_insertion_point(field_set:FromCs.GroupObject.GroupId)
}

// -------------------------------------------------------------------

// PageObject

// optional int64 Id = 1;
inline bool PageObject::has_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PageObject::set_has_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PageObject::clear_has_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PageObject::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 PageObject::id() const {
  // @@protoc_insertion_point(field_get:FromCs.PageObject.Id)
  return id_;
}
inline void PageObject::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:FromCs.PageObject.Id)
}

// optional string Username = 2;
inline bool PageObject::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PageObject::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PageObject::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PageObject::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& PageObject::username() const {
  // @@protoc_insertion_point(field_get:FromCs.PageObject.Username)
  return username_.GetNoArena();
}
inline void PageObject::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.PageObject.Username)
}
#if LANG_CXX11
inline void PageObject::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.PageObject.Username)
}
#endif
inline void PageObject::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.PageObject.Username)
}
inline void PageObject::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.PageObject.Username)
}
inline ::std::string* PageObject::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:FromCs.PageObject.Username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PageObject::release_username() {
  // @@protoc_insertion_point(field_release:FromCs.PageObject.Username)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PageObject::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:FromCs.PageObject.Username)
}

// optional string Nickname = 3;
inline bool PageObject::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PageObject::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PageObject::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PageObject::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
inline const ::std::string& PageObject::nickname() const {
  // @@protoc_insertion_point(field_get:FromCs.PageObject.Nickname)
  return nickname_.GetNoArena();
}
inline void PageObject::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.PageObject.Nickname)
}
#if LANG_CXX11
inline void PageObject::set_nickname(::std::string&& value) {
  set_has_nickname();
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.PageObject.Nickname)
}
#endif
inline void PageObject::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.PageObject.Nickname)
}
inline void PageObject::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.PageObject.Nickname)
}
inline ::std::string* PageObject::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:FromCs.PageObject.Nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PageObject::release_nickname() {
  // @@protoc_insertion_point(field_release:FromCs.PageObject.Nickname)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PageObject::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:FromCs.PageObject.Nickname)
}

// optional int32 CreateTime = 4;
inline bool PageObject::has_createtime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PageObject::set_has_createtime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PageObject::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PageObject::clear_createtime() {
  createtime_ = 0;
  clear_has_createtime();
}
inline ::google::protobuf::int32 PageObject::createtime() const {
  // @@protoc_insertion_point(field_get:FromCs.PageObject.CreateTime)
  return createtime_;
}
inline void PageObject::set_createtime(::google::protobuf::int32 value) {
  set_has_createtime();
  createtime_ = value;
  // @@protoc_insertion_point(field_set:FromCs.PageObject.CreateTime)
}

// optional .FromCs.sKBuiltinstringT ObjectDesc = 5;
inline bool PageObject::has_objectdesc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PageObject::set_has_objectdesc() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PageObject::clear_has_objectdesc() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PageObject::clear_objectdesc() {
  if (objectdesc_ != NULL) objectdesc_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_objectdesc();
}
inline const ::FromCs::sKBuiltinstringT& PageObject::objectdesc() const {
  // @@protoc_insertion_point(field_get:FromCs.PageObject.ObjectDesc)
  return objectdesc_ != NULL ? *objectdesc_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* PageObject::mutable_objectdesc() {
  set_has_objectdesc();
  if (objectdesc_ == NULL) {
    objectdesc_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.PageObject.ObjectDesc)
  return objectdesc_;
}
inline ::FromCs::sKBuiltinstringT* PageObject::release_objectdesc() {
  // @@protoc_insertion_point(field_release:FromCs.PageObject.ObjectDesc)
  clear_has_objectdesc();
  ::FromCs::sKBuiltinstringT* temp = objectdesc_;
  objectdesc_ = NULL;
  return temp;
}
inline void PageObject::set_allocated_objectdesc(::FromCs::sKBuiltinstringT* objectdesc) {
  delete objectdesc_;
  objectdesc_ = objectdesc;
  if (objectdesc) {
    set_has_objectdesc();
  } else {
    clear_has_objectdesc();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.PageObject.ObjectDesc)
}

// optional int32 LikeFlag = 6;
inline bool PageObject::has_likeflag() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PageObject::set_has_likeflag() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PageObject::clear_has_likeflag() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PageObject::clear_likeflag() {
  likeflag_ = 0;
  clear_has_likeflag();
}
inline ::google::protobuf::int32 PageObject::likeflag() const {
  // @@protoc_insertion_point(field_get:FromCs.PageObject.LikeFlag)
  return likeflag_;
}
inline void PageObject::set_likeflag(::google::protobuf::int32 value) {
  set_has_likeflag();
  likeflag_ = value;
  // @@protoc_insertion_point(field_set:FromCs.PageObject.LikeFlag)
}

// optional int32 LikeCount = 7;
inline bool PageObject::has_likecount() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PageObject::set_has_likecount() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PageObject::clear_has_likecount() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PageObject::clear_likecount() {
  likecount_ = 0;
  clear_has_likecount();
}
inline ::google::protobuf::int32 PageObject::likecount() const {
  // @@protoc_insertion_point(field_get:FromCs.PageObject.LikeCount)
  return likecount_;
}
inline void PageObject::set_likecount(::google::protobuf::int32 value) {
  set_has_likecount();
  likecount_ = value;
  // @@protoc_insertion_point(field_set:FromCs.PageObject.LikeCount)
}

// optional int32 LikeUserListCount = 8;
inline bool PageObject::has_likeuserlistcount() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PageObject::set_has_likeuserlistcount() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PageObject::clear_has_likeuserlistcount() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PageObject::clear_likeuserlistcount() {
  likeuserlistcount_ = 0;
  clear_has_likeuserlistcount();
}
inline ::google::protobuf::int32 PageObject::likeuserlistcount() const {
  // @@protoc_insertion_point(field_get:FromCs.PageObject.LikeUserListCount)
  return likeuserlistcount_;
}
inline void PageObject::set_likeuserlistcount(::google::protobuf::int32 value) {
  set_has_likeuserlistcount();
  likeuserlistcount_ = value;
  // @@protoc_insertion_point(field_set:FromCs.PageObject.LikeUserListCount)
}

// optional .FromCs.sKBuiltinstringT likeUser_ = 9;
inline bool PageObject::has_likeuser_() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PageObject::set_has_likeuser_() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PageObject::clear_has_likeuser_() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PageObject::clear_likeuser_() {
  if (likeuser__ != NULL) likeuser__->::FromCs::sKBuiltinstringT::Clear();
  clear_has_likeuser_();
}
inline const ::FromCs::sKBuiltinstringT& PageObject::likeuser_() const {
  // @@protoc_insertion_point(field_get:FromCs.PageObject.likeUser_)
  return likeuser__ != NULL ? *likeuser__
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* PageObject::mutable_likeuser_() {
  set_has_likeuser_();
  if (likeuser__ == NULL) {
    likeuser__ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.PageObject.likeUser_)
  return likeuser__;
}
inline ::FromCs::sKBuiltinstringT* PageObject::release_likeuser_() {
  // @@protoc_insertion_point(field_release:FromCs.PageObject.likeUser_)
  clear_has_likeuser_();
  ::FromCs::sKBuiltinstringT* temp = likeuser__;
  likeuser__ = NULL;
  return temp;
}
inline void PageObject::set_allocated_likeuser_(::FromCs::sKBuiltinstringT* likeuser_) {
  delete likeuser__;
  likeuser__ = likeuser_;
  if (likeuser_) {
    set_has_likeuser_();
  } else {
    clear_has_likeuser_();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.PageObject.likeUser_)
}

// optional int32 CommentCount = 10;
inline bool PageObject::has_commentcount() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PageObject::set_has_commentcount() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PageObject::clear_has_commentcount() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PageObject::clear_commentcount() {
  commentcount_ = 0;
  clear_has_commentcount();
}
inline ::google::protobuf::int32 PageObject::commentcount() const {
  // @@protoc_insertion_point(field_get:FromCs.PageObject.CommentCount)
  return commentcount_;
}
inline void PageObject::set_commentcount(::google::protobuf::int32 value) {
  set_has_commentcount();
  commentcount_ = value;
  // @@protoc_insertion_point(field_set:FromCs.PageObject.CommentCount)
}

// optional int32 CommentUserListCount = 11;
inline bool PageObject::has_commentuserlistcount() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PageObject::set_has_commentuserlistcount() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PageObject::clear_has_commentuserlistcount() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PageObject::clear_commentuserlistcount() {
  commentuserlistcount_ = 0;
  clear_has_commentuserlistcount();
}
inline ::google::protobuf::int32 PageObject::commentuserlistcount() const {
  // @@protoc_insertion_point(field_get:FromCs.PageObject.CommentUserListCount)
  return commentuserlistcount_;
}
inline void PageObject::set_commentuserlistcount(::google::protobuf::int32 value) {
  set_has_commentuserlistcount();
  commentuserlistcount_ = value;
  // @@protoc_insertion_point(field_set:FromCs.PageObject.CommentUserListCount)
}

// optional .FromCs.sKBuiltinstringT commentUser_ = 12;
inline bool PageObject::has_commentuser_() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PageObject::set_has_commentuser_() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PageObject::clear_has_commentuser_() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PageObject::clear_commentuser_() {
  if (commentuser__ != NULL) commentuser__->::FromCs::sKBuiltinstringT::Clear();
  clear_has_commentuser_();
}
inline const ::FromCs::sKBuiltinstringT& PageObject::commentuser_() const {
  // @@protoc_insertion_point(field_get:FromCs.PageObject.commentUser_)
  return commentuser__ != NULL ? *commentuser__
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* PageObject::mutable_commentuser_() {
  set_has_commentuser_();
  if (commentuser__ == NULL) {
    commentuser__ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.PageObject.commentUser_)
  return commentuser__;
}
inline ::FromCs::sKBuiltinstringT* PageObject::release_commentuser_() {
  // @@protoc_insertion_point(field_release:FromCs.PageObject.commentUser_)
  clear_has_commentuser_();
  ::FromCs::sKBuiltinstringT* temp = commentuser__;
  commentuser__ = NULL;
  return temp;
}
inline void PageObject::set_allocated_commentuser_(::FromCs::sKBuiltinstringT* commentuser_) {
  delete commentuser__;
  commentuser__ = commentuser_;
  if (commentuser_) {
    set_has_commentuser_();
  } else {
    clear_has_commentuser_();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.PageObject.commentUser_)
}

// optional int32 WithUserNumb = 13;
inline bool PageObject::has_withusernumb() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PageObject::set_has_withusernumb() {
  _has_bits_[0] |= 0x00008000u;
}
inline void PageObject::clear_has_withusernumb() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void PageObject::clear_withusernumb() {
  withusernumb_ = 0;
  clear_has_withusernumb();
}
inline ::google::protobuf::int32 PageObject::withusernumb() const {
  // @@protoc_insertion_point(field_get:FromCs.PageObject.WithUserNumb)
  return withusernumb_;
}
inline void PageObject::set_withusernumb(::google::protobuf::int32 value) {
  set_has_withusernumb();
  withusernumb_ = value;
  // @@protoc_insertion_point(field_set:FromCs.PageObject.WithUserNumb)
}

// optional int32 WithUserListCount = 14;
inline bool PageObject::has_withuserlistcount() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void PageObject::set_has_withuserlistcount() {
  _has_bits_[0] |= 0x00010000u;
}
inline void PageObject::clear_has_withuserlistcount() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void PageObject::clear_withuserlistcount() {
  withuserlistcount_ = 0;
  clear_has_withuserlistcount();
}
inline ::google::protobuf::int32 PageObject::withuserlistcount() const {
  // @@protoc_insertion_point(field_get:FromCs.PageObject.WithUserListCount)
  return withuserlistcount_;
}
inline void PageObject::set_withuserlistcount(::google::protobuf::int32 value) {
  set_has_withuserlistcount();
  withuserlistcount_ = value;
  // @@protoc_insertion_point(field_set:FromCs.PageObject.WithUserListCount)
}

// optional .FromCs.sKBuiltinstringT withUser_ = 15;
inline bool PageObject::has_withuser_() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PageObject::set_has_withuser_() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PageObject::clear_has_withuser_() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PageObject::clear_withuser_() {
  if (withuser__ != NULL) withuser__->::FromCs::sKBuiltinstringT::Clear();
  clear_has_withuser_();
}
inline const ::FromCs::sKBuiltinstringT& PageObject::withuser_() const {
  // @@protoc_insertion_point(field_get:FromCs.PageObject.withUser_)
  return withuser__ != NULL ? *withuser__
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* PageObject::mutable_withuser_() {
  set_has_withuser_();
  if (withuser__ == NULL) {
    withuser__ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.PageObject.withUser_)
  return withuser__;
}
inline ::FromCs::sKBuiltinstringT* PageObject::release_withuser_() {
  // @@protoc_insertion_point(field_release:FromCs.PageObject.withUser_)
  clear_has_withuser_();
  ::FromCs::sKBuiltinstringT* temp = withuser__;
  withuser__ = NULL;
  return temp;
}
inline void PageObject::set_allocated_withuser_(::FromCs::sKBuiltinstringT* withuser_) {
  delete withuser__;
  withuser__ = withuser_;
  if (withuser_) {
    set_has_withuser_();
  } else {
    clear_has_withuser_();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.PageObject.withUser_)
}

// optional int32 ExtFlag = 16;
inline bool PageObject::has_extflag() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void PageObject::set_has_extflag() {
  _has_bits_[0] |= 0x00020000u;
}
inline void PageObject::clear_has_extflag() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void PageObject::clear_extflag() {
  extflag_ = 0;
  clear_has_extflag();
}
inline ::google::protobuf::int32 PageObject::extflag() const {
  // @@protoc_insertion_point(field_get:FromCs.PageObject.ExtFlag)
  return extflag_;
}
inline void PageObject::set_extflag(::google::protobuf::int32 value) {
  set_has_extflag();
  extflag_ = value;
  // @@protoc_insertion_point(field_set:FromCs.PageObject.ExtFlag)
}

// optional int32 NoChange = 17;
inline bool PageObject::has_nochange() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void PageObject::set_has_nochange() {
  _has_bits_[0] |= 0x00040000u;
}
inline void PageObject::clear_has_nochange() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void PageObject::clear_nochange() {
  nochange_ = 0;
  clear_has_nochange();
}
inline ::google::protobuf::int32 PageObject::nochange() const {
  // @@protoc_insertion_point(field_get:FromCs.PageObject.NoChange)
  return nochange_;
}
inline void PageObject::set_nochange(::google::protobuf::int32 value) {
  set_has_nochange();
  nochange_ = value;
  // @@protoc_insertion_point(field_set:FromCs.PageObject.NoChange)
}

// optional int32 GroupNumb = 18;
inline bool PageObject::has_groupnumb() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void PageObject::set_has_groupnumb() {
  _has_bits_[0] |= 0x00080000u;
}
inline void PageObject::clear_has_groupnumb() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void PageObject::clear_groupnumb() {
  groupnumb_ = 0;
  clear_has_groupnumb();
}
inline ::google::protobuf::int32 PageObject::groupnumb() const {
  // @@protoc_insertion_point(field_get:FromCs.PageObject.GroupNumb)
  return groupnumb_;
}
inline void PageObject::set_groupnumb(::google::protobuf::int32 value) {
  set_has_groupnumb();
  groupnumb_ = value;
  // @@protoc_insertion_point(field_set:FromCs.PageObject.GroupNumb)
}

// optional .FromCs.sKBuiltinstringT group_ = 19;
inline bool PageObject::has_group_() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PageObject::set_has_group_() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PageObject::clear_has_group_() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PageObject::clear_group_() {
  if (group__ != NULL) group__->::FromCs::sKBuiltinstringT::Clear();
  clear_has_group_();
}
inline const ::FromCs::sKBuiltinstringT& PageObject::group_() const {
  // @@protoc_insertion_point(field_get:FromCs.PageObject.group_)
  return group__ != NULL ? *group__
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* PageObject::mutable_group_() {
  set_has_group_();
  if (group__ == NULL) {
    group__ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.PageObject.group_)
  return group__;
}
inline ::FromCs::sKBuiltinstringT* PageObject::release_group_() {
  // @@protoc_insertion_point(field_release:FromCs.PageObject.group_)
  clear_has_group_();
  ::FromCs::sKBuiltinstringT* temp = group__;
  group__ = NULL;
  return temp;
}
inline void PageObject::set_allocated_group_(::FromCs::sKBuiltinstringT* group_) {
  delete group__;
  group__ = group_;
  if (group_) {
    set_has_group_();
  } else {
    clear_has_group_();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.PageObject.group_)
}

// optional int32 IsNotRichText = 20;
inline bool PageObject::has_isnotrichtext() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void PageObject::set_has_isnotrichtext() {
  _has_bits_[0] |= 0x00100000u;
}
inline void PageObject::clear_has_isnotrichtext() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void PageObject::clear_isnotrichtext() {
  isnotrichtext_ = 0;
  clear_has_isnotrichtext();
}
inline ::google::protobuf::int32 PageObject::isnotrichtext() const {
  // @@protoc_insertion_point(field_get:FromCs.PageObject.IsNotRichText)
  return isnotrichtext_;
}
inline void PageObject::set_isnotrichtext(::google::protobuf::int32 value) {
  set_has_isnotrichtext();
  isnotrichtext_ = value;
  // @@protoc_insertion_point(field_set:FromCs.PageObject.IsNotRichText)
}

// optional string ReferUsername = 21;
inline bool PageObject::has_referusername() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PageObject::set_has_referusername() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PageObject::clear_has_referusername() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PageObject::clear_referusername() {
  referusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_referusername();
}
inline const ::std::string& PageObject::referusername() const {
  // @@protoc_insertion_point(field_get:FromCs.PageObject.ReferUsername)
  return referusername_.GetNoArena();
}
inline void PageObject::set_referusername(const ::std::string& value) {
  set_has_referusername();
  referusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.PageObject.ReferUsername)
}
#if LANG_CXX11
inline void PageObject::set_referusername(::std::string&& value) {
  set_has_referusername();
  referusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.PageObject.ReferUsername)
}
#endif
inline void PageObject::set_referusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_referusername();
  referusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.PageObject.ReferUsername)
}
inline void PageObject::set_referusername(const char* value, size_t size) {
  set_has_referusername();
  referusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.PageObject.ReferUsername)
}
inline ::std::string* PageObject::mutable_referusername() {
  set_has_referusername();
  // @@protoc_insertion_point(field_mutable:FromCs.PageObject.ReferUsername)
  return referusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PageObject::release_referusername() {
  // @@protoc_insertion_point(field_release:FromCs.PageObject.ReferUsername)
  clear_has_referusername();
  return referusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PageObject::set_allocated_referusername(::std::string* referusername) {
  if (referusername != NULL) {
    set_has_referusername();
  } else {
    clear_has_referusername();
  }
  referusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), referusername);
  // @@protoc_insertion_point(field_set_allocated:FromCs.PageObject.ReferUsername)
}

// optional int64 ReferId = 22;
inline bool PageObject::has_referid() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void PageObject::set_has_referid() {
  _has_bits_[0] |= 0x00200000u;
}
inline void PageObject::clear_has_referid() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void PageObject::clear_referid() {
  referid_ = GOOGLE_LONGLONG(0);
  clear_has_referid();
}
inline ::google::protobuf::int64 PageObject::referid() const {
  // @@protoc_insertion_point(field_get:FromCs.PageObject.ReferId)
  return referid_;
}
inline void PageObject::set_referid(::google::protobuf::int64 value) {
  set_has_referid();
  referid_ = value;
  // @@protoc_insertion_point(field_set:FromCs.PageObject.ReferId)
}

// -------------------------------------------------------------------

// GeneralControlBitSet

// optional int32 BitValue = 1;
inline bool GeneralControlBitSet::has_bitvalue() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GeneralControlBitSet::set_has_bitvalue() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GeneralControlBitSet::clear_has_bitvalue() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GeneralControlBitSet::clear_bitvalue() {
  bitvalue_ = 0;
  clear_has_bitvalue();
}
inline ::google::protobuf::int32 GeneralControlBitSet::bitvalue() const {
  // @@protoc_insertion_point(field_get:FromCs.GeneralControlBitSet.BitValue)
  return bitvalue_;
}
inline void GeneralControlBitSet::set_bitvalue(::google::protobuf::int32 value) {
  set_has_bitvalue();
  bitvalue_ = value;
  // @@protoc_insertion_point(field_set:FromCs.GeneralControlBitSet.BitValue)
}

// -------------------------------------------------------------------

// JSAPIPermission

// optional int32 BitValue = 1;
inline bool JSAPIPermission::has_bitvalue() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JSAPIPermission::set_has_bitvalue() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JSAPIPermission::clear_has_bitvalue() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JSAPIPermission::clear_bitvalue() {
  bitvalue_ = 0;
  clear_has_bitvalue();
}
inline ::google::protobuf::int32 JSAPIPermission::bitvalue() const {
  // @@protoc_insertion_point(field_get:FromCs.JSAPIPermission.BitValue)
  return bitvalue_;
}
inline void JSAPIPermission::set_bitvalue(::google::protobuf::int32 value) {
  set_has_bitvalue();
  bitvalue_ = value;
  // @@protoc_insertion_point(field_set:FromCs.JSAPIPermission.BitValue)
}

// -------------------------------------------------------------------

// TwitterInfoObj

// optional string OauthToken = 1;
inline bool TwitterInfoObj::has_oauthtoken() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TwitterInfoObj::set_has_oauthtoken() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TwitterInfoObj::clear_has_oauthtoken() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TwitterInfoObj::clear_oauthtoken() {
  oauthtoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_oauthtoken();
}
inline const ::std::string& TwitterInfoObj::oauthtoken() const {
  // @@protoc_insertion_point(field_get:FromCs.TwitterInfoObj.OauthToken)
  return oauthtoken_.GetNoArena();
}
inline void TwitterInfoObj::set_oauthtoken(const ::std::string& value) {
  set_has_oauthtoken();
  oauthtoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.TwitterInfoObj.OauthToken)
}
#if LANG_CXX11
inline void TwitterInfoObj::set_oauthtoken(::std::string&& value) {
  set_has_oauthtoken();
  oauthtoken_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.TwitterInfoObj.OauthToken)
}
#endif
inline void TwitterInfoObj::set_oauthtoken(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_oauthtoken();
  oauthtoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.TwitterInfoObj.OauthToken)
}
inline void TwitterInfoObj::set_oauthtoken(const char* value, size_t size) {
  set_has_oauthtoken();
  oauthtoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.TwitterInfoObj.OauthToken)
}
inline ::std::string* TwitterInfoObj::mutable_oauthtoken() {
  set_has_oauthtoken();
  // @@protoc_insertion_point(field_mutable:FromCs.TwitterInfoObj.OauthToken)
  return oauthtoken_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TwitterInfoObj::release_oauthtoken() {
  // @@protoc_insertion_point(field_release:FromCs.TwitterInfoObj.OauthToken)
  clear_has_oauthtoken();
  return oauthtoken_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TwitterInfoObj::set_allocated_oauthtoken(::std::string* oauthtoken) {
  if (oauthtoken != NULL) {
    set_has_oauthtoken();
  } else {
    clear_has_oauthtoken();
  }
  oauthtoken_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), oauthtoken);
  // @@protoc_insertion_point(field_set_allocated:FromCs.TwitterInfoObj.OauthToken)
}

// optional string OauthTokenSecret = 2;
inline bool TwitterInfoObj::has_oauthtokensecret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TwitterInfoObj::set_has_oauthtokensecret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TwitterInfoObj::clear_has_oauthtokensecret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TwitterInfoObj::clear_oauthtokensecret() {
  oauthtokensecret_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_oauthtokensecret();
}
inline const ::std::string& TwitterInfoObj::oauthtokensecret() const {
  // @@protoc_insertion_point(field_get:FromCs.TwitterInfoObj.OauthTokenSecret)
  return oauthtokensecret_.GetNoArena();
}
inline void TwitterInfoObj::set_oauthtokensecret(const ::std::string& value) {
  set_has_oauthtokensecret();
  oauthtokensecret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.TwitterInfoObj.OauthTokenSecret)
}
#if LANG_CXX11
inline void TwitterInfoObj::set_oauthtokensecret(::std::string&& value) {
  set_has_oauthtokensecret();
  oauthtokensecret_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.TwitterInfoObj.OauthTokenSecret)
}
#endif
inline void TwitterInfoObj::set_oauthtokensecret(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_oauthtokensecret();
  oauthtokensecret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.TwitterInfoObj.OauthTokenSecret)
}
inline void TwitterInfoObj::set_oauthtokensecret(const char* value, size_t size) {
  set_has_oauthtokensecret();
  oauthtokensecret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.TwitterInfoObj.OauthTokenSecret)
}
inline ::std::string* TwitterInfoObj::mutable_oauthtokensecret() {
  set_has_oauthtokensecret();
  // @@protoc_insertion_point(field_mutable:FromCs.TwitterInfoObj.OauthTokenSecret)
  return oauthtokensecret_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TwitterInfoObj::release_oauthtokensecret() {
  // @@protoc_insertion_point(field_release:FromCs.TwitterInfoObj.OauthTokenSecret)
  clear_has_oauthtokensecret();
  return oauthtokensecret_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TwitterInfoObj::set_allocated_oauthtokensecret(::std::string* oauthtokensecret) {
  if (oauthtokensecret != NULL) {
    set_has_oauthtokensecret();
  } else {
    clear_has_oauthtokensecret();
  }
  oauthtokensecret_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), oauthtokensecret);
  // @@protoc_insertion_point(field_set_allocated:FromCs.TwitterInfoObj.OauthTokenSecret)
}

// -------------------------------------------------------------------

// BufferUrlObj

// optional string Url = 1;
inline bool BufferUrlObj::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BufferUrlObj::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BufferUrlObj::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BufferUrlObj::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& BufferUrlObj::url() const {
  // @@protoc_insertion_point(field_get:FromCs.BufferUrlObj.Url)
  return url_.GetNoArena();
}
inline void BufferUrlObj::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.BufferUrlObj.Url)
}
#if LANG_CXX11
inline void BufferUrlObj::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.BufferUrlObj.Url)
}
#endif
inline void BufferUrlObj::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.BufferUrlObj.Url)
}
inline void BufferUrlObj::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.BufferUrlObj.Url)
}
inline ::std::string* BufferUrlObj::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:FromCs.BufferUrlObj.Url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BufferUrlObj::release_url() {
  // @@protoc_insertion_point(field_release:FromCs.BufferUrlObj.Url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BufferUrlObj::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:FromCs.BufferUrlObj.Url)
}

// optional int32 Type = 2;
inline bool BufferUrlObj::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BufferUrlObj::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BufferUrlObj::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BufferUrlObj::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 BufferUrlObj::type() const {
  // @@protoc_insertion_point(field_get:FromCs.BufferUrlObj.Type)
  return type_;
}
inline void BufferUrlObj::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:FromCs.BufferUrlObj.Type)
}

// -------------------------------------------------------------------

// AppMsgObject

// optional string FromUserName = 1;
inline bool AppMsgObject::has_fromusername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AppMsgObject::set_has_fromusername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AppMsgObject::clear_has_fromusername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AppMsgObject::clear_fromusername() {
  fromusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fromusername();
}
inline const ::std::string& AppMsgObject::fromusername() const {
  // @@protoc_insertion_point(field_get:FromCs.AppMsgObject.FromUserName)
  return fromusername_.GetNoArena();
}
inline void AppMsgObject::set_fromusername(const ::std::string& value) {
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.AppMsgObject.FromUserName)
}
#if LANG_CXX11
inline void AppMsgObject::set_fromusername(::std::string&& value) {
  set_has_fromusername();
  fromusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.AppMsgObject.FromUserName)
}
#endif
inline void AppMsgObject::set_fromusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.AppMsgObject.FromUserName)
}
inline void AppMsgObject::set_fromusername(const char* value, size_t size) {
  set_has_fromusername();
  fromusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.AppMsgObject.FromUserName)
}
inline ::std::string* AppMsgObject::mutable_fromusername() {
  set_has_fromusername();
  // @@protoc_insertion_point(field_mutable:FromCs.AppMsgObject.FromUserName)
  return fromusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppMsgObject::release_fromusername() {
  // @@protoc_insertion_point(field_release:FromCs.AppMsgObject.FromUserName)
  clear_has_fromusername();
  return fromusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppMsgObject::set_allocated_fromusername(::std::string* fromusername) {
  if (fromusername != NULL) {
    set_has_fromusername();
  } else {
    clear_has_fromusername();
  }
  fromusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fromusername);
  // @@protoc_insertion_point(field_set_allocated:FromCs.AppMsgObject.FromUserName)
}

// optional string AppId = 2;
inline bool AppMsgObject::has_appid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AppMsgObject::set_has_appid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AppMsgObject::clear_has_appid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AppMsgObject::clear_appid() {
  appid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_appid();
}
inline const ::std::string& AppMsgObject::appid() const {
  // @@protoc_insertion_point(field_get:FromCs.AppMsgObject.AppId)
  return appid_.GetNoArena();
}
inline void AppMsgObject::set_appid(const ::std::string& value) {
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.AppMsgObject.AppId)
}
#if LANG_CXX11
inline void AppMsgObject::set_appid(::std::string&& value) {
  set_has_appid();
  appid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.AppMsgObject.AppId)
}
#endif
inline void AppMsgObject::set_appid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.AppMsgObject.AppId)
}
inline void AppMsgObject::set_appid(const char* value, size_t size) {
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.AppMsgObject.AppId)
}
inline ::std::string* AppMsgObject::mutable_appid() {
  set_has_appid();
  // @@protoc_insertion_point(field_mutable:FromCs.AppMsgObject.AppId)
  return appid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppMsgObject::release_appid() {
  // @@protoc_insertion_point(field_release:FromCs.AppMsgObject.AppId)
  clear_has_appid();
  return appid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppMsgObject::set_allocated_appid(::std::string* appid) {
  if (appid != NULL) {
    set_has_appid();
  } else {
    clear_has_appid();
  }
  appid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appid);
  // @@protoc_insertion_point(field_set_allocated:FromCs.AppMsgObject.AppId)
}

// optional int32 SdkVersion = 3;
inline bool AppMsgObject::has_sdkversion() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AppMsgObject::set_has_sdkversion() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AppMsgObject::clear_has_sdkversion() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AppMsgObject::clear_sdkversion() {
  sdkversion_ = 0;
  clear_has_sdkversion();
}
inline ::google::protobuf::int32 AppMsgObject::sdkversion() const {
  // @@protoc_insertion_point(field_get:FromCs.AppMsgObject.SdkVersion)
  return sdkversion_;
}
inline void AppMsgObject::set_sdkversion(::google::protobuf::int32 value) {
  set_has_sdkversion();
  sdkversion_ = value;
  // @@protoc_insertion_point(field_set:FromCs.AppMsgObject.SdkVersion)
}

// optional string ToUsername = 4;
inline bool AppMsgObject::has_tousername() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AppMsgObject::set_has_tousername() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AppMsgObject::clear_has_tousername() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AppMsgObject::clear_tousername() {
  tousername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tousername();
}
inline const ::std::string& AppMsgObject::tousername() const {
  // @@protoc_insertion_point(field_get:FromCs.AppMsgObject.ToUsername)
  return tousername_.GetNoArena();
}
inline void AppMsgObject::set_tousername(const ::std::string& value) {
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.AppMsgObject.ToUsername)
}
#if LANG_CXX11
inline void AppMsgObject::set_tousername(::std::string&& value) {
  set_has_tousername();
  tousername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.AppMsgObject.ToUsername)
}
#endif
inline void AppMsgObject::set_tousername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.AppMsgObject.ToUsername)
}
inline void AppMsgObject::set_tousername(const char* value, size_t size) {
  set_has_tousername();
  tousername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.AppMsgObject.ToUsername)
}
inline ::std::string* AppMsgObject::mutable_tousername() {
  set_has_tousername();
  // @@protoc_insertion_point(field_mutable:FromCs.AppMsgObject.ToUsername)
  return tousername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppMsgObject::release_tousername() {
  // @@protoc_insertion_point(field_release:FromCs.AppMsgObject.ToUsername)
  clear_has_tousername();
  return tousername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppMsgObject::set_allocated_tousername(::std::string* tousername) {
  if (tousername != NULL) {
    set_has_tousername();
  } else {
    clear_has_tousername();
  }
  tousername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tousername);
  // @@protoc_insertion_point(field_set_allocated:FromCs.AppMsgObject.ToUsername)
}

// optional int32 Type = 5;
inline bool AppMsgObject::has_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AppMsgObject::set_has_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AppMsgObject::clear_has_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AppMsgObject::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 AppMsgObject::type() const {
  // @@protoc_insertion_point(field_get:FromCs.AppMsgObject.Type)
  return type_;
}
inline void AppMsgObject::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:FromCs.AppMsgObject.Type)
}

// optional string Content = 6;
inline bool AppMsgObject::has_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AppMsgObject::set_has_content() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AppMsgObject::clear_has_content() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AppMsgObject::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
inline const ::std::string& AppMsgObject::content() const {
  // @@protoc_insertion_point(field_get:FromCs.AppMsgObject.Content)
  return content_.GetNoArena();
}
inline void AppMsgObject::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.AppMsgObject.Content)
}
#if LANG_CXX11
inline void AppMsgObject::set_content(::std::string&& value) {
  set_has_content();
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.AppMsgObject.Content)
}
#endif
inline void AppMsgObject::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.AppMsgObject.Content)
}
inline void AppMsgObject::set_content(const char* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.AppMsgObject.Content)
}
inline ::std::string* AppMsgObject::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:FromCs.AppMsgObject.Content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppMsgObject::release_content() {
  // @@protoc_insertion_point(field_release:FromCs.AppMsgObject.Content)
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppMsgObject::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:FromCs.AppMsgObject.Content)
}

// optional int32 CreateTime = 7;
inline bool AppMsgObject::has_createtime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void AppMsgObject::set_has_createtime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void AppMsgObject::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void AppMsgObject::clear_createtime() {
  createtime_ = 0;
  clear_has_createtime();
}
inline ::google::protobuf::int32 AppMsgObject::createtime() const {
  // @@protoc_insertion_point(field_get:FromCs.AppMsgObject.CreateTime)
  return createtime_;
}
inline void AppMsgObject::set_createtime(::google::protobuf::int32 value) {
  set_has_createtime();
  createtime_ = value;
  // @@protoc_insertion_point(field_set:FromCs.AppMsgObject.CreateTime)
}

// optional string ClientMsgId = 8;
inline bool AppMsgObject::has_clientmsgid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AppMsgObject::set_has_clientmsgid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AppMsgObject::clear_has_clientmsgid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AppMsgObject::clear_clientmsgid() {
  clientmsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientmsgid();
}
inline const ::std::string& AppMsgObject::clientmsgid() const {
  // @@protoc_insertion_point(field_get:FromCs.AppMsgObject.ClientMsgId)
  return clientmsgid_.GetNoArena();
}
inline void AppMsgObject::set_clientmsgid(const ::std::string& value) {
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.AppMsgObject.ClientMsgId)
}
#if LANG_CXX11
inline void AppMsgObject::set_clientmsgid(::std::string&& value) {
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.AppMsgObject.ClientMsgId)
}
#endif
inline void AppMsgObject::set_clientmsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.AppMsgObject.ClientMsgId)
}
inline void AppMsgObject::set_clientmsgid(const char* value, size_t size) {
  set_has_clientmsgid();
  clientmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.AppMsgObject.ClientMsgId)
}
inline ::std::string* AppMsgObject::mutable_clientmsgid() {
  set_has_clientmsgid();
  // @@protoc_insertion_point(field_mutable:FromCs.AppMsgObject.ClientMsgId)
  return clientmsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppMsgObject::release_clientmsgid() {
  // @@protoc_insertion_point(field_release:FromCs.AppMsgObject.ClientMsgId)
  clear_has_clientmsgid();
  return clientmsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppMsgObject::set_allocated_clientmsgid(::std::string* clientmsgid) {
  if (clientmsgid != NULL) {
    set_has_clientmsgid();
  } else {
    clear_has_clientmsgid();
  }
  clientmsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientmsgid);
  // @@protoc_insertion_point(field_set_allocated:FromCs.AppMsgObject.ClientMsgId)
}

// optional .FromCs.sKBuiltinstringT Thumb = 9;
inline bool AppMsgObject::has_thumb() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AppMsgObject::set_has_thumb() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AppMsgObject::clear_has_thumb() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AppMsgObject::clear_thumb() {
  if (thumb_ != NULL) thumb_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_thumb();
}
inline const ::FromCs::sKBuiltinstringT& AppMsgObject::thumb() const {
  // @@protoc_insertion_point(field_get:FromCs.AppMsgObject.Thumb)
  return thumb_ != NULL ? *thumb_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* AppMsgObject::mutable_thumb() {
  set_has_thumb();
  if (thumb_ == NULL) {
    thumb_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.AppMsgObject.Thumb)
  return thumb_;
}
inline ::FromCs::sKBuiltinstringT* AppMsgObject::release_thumb() {
  // @@protoc_insertion_point(field_release:FromCs.AppMsgObject.Thumb)
  clear_has_thumb();
  ::FromCs::sKBuiltinstringT* temp = thumb_;
  thumb_ = NULL;
  return temp;
}
inline void AppMsgObject::set_allocated_thumb(::FromCs::sKBuiltinstringT* thumb) {
  delete thumb_;
  thumb_ = thumb;
  if (thumb) {
    set_has_thumb();
  } else {
    clear_has_thumb();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.AppMsgObject.Thumb)
}

// optional int32 Source = 10;
inline bool AppMsgObject::has_source() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void AppMsgObject::set_has_source() {
  _has_bits_[0] |= 0x00000400u;
}
inline void AppMsgObject::clear_has_source() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void AppMsgObject::clear_source() {
  source_ = 0;
  clear_has_source();
}
inline ::google::protobuf::int32 AppMsgObject::source() const {
  // @@protoc_insertion_point(field_get:FromCs.AppMsgObject.Source)
  return source_;
}
inline void AppMsgObject::set_source(::google::protobuf::int32 value) {
  set_has_source();
  source_ = value;
  // @@protoc_insertion_point(field_set:FromCs.AppMsgObject.Source)
}

// optional int32 RemindId = 11;
inline bool AppMsgObject::has_remindid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void AppMsgObject::set_has_remindid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void AppMsgObject::clear_has_remindid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void AppMsgObject::clear_remindid() {
  remindid_ = 0;
  clear_has_remindid();
}
inline ::google::protobuf::int32 AppMsgObject::remindid() const {
  // @@protoc_insertion_point(field_get:FromCs.AppMsgObject.RemindId)
  return remindid_;
}
inline void AppMsgObject::set_remindid(::google::protobuf::int32 value) {
  set_has_remindid();
  remindid_ = value;
  // @@protoc_insertion_point(field_set:FromCs.AppMsgObject.RemindId)
}

// optional string MsgSource = 12;
inline bool AppMsgObject::has_msgsource() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AppMsgObject::set_has_msgsource() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AppMsgObject::clear_has_msgsource() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AppMsgObject::clear_msgsource() {
  msgsource_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msgsource();
}
inline const ::std::string& AppMsgObject::msgsource() const {
  // @@protoc_insertion_point(field_get:FromCs.AppMsgObject.MsgSource)
  return msgsource_.GetNoArena();
}
inline void AppMsgObject::set_msgsource(const ::std::string& value) {
  set_has_msgsource();
  msgsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.AppMsgObject.MsgSource)
}
#if LANG_CXX11
inline void AppMsgObject::set_msgsource(::std::string&& value) {
  set_has_msgsource();
  msgsource_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.AppMsgObject.MsgSource)
}
#endif
inline void AppMsgObject::set_msgsource(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msgsource();
  msgsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.AppMsgObject.MsgSource)
}
inline void AppMsgObject::set_msgsource(const char* value, size_t size) {
  set_has_msgsource();
  msgsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.AppMsgObject.MsgSource)
}
inline ::std::string* AppMsgObject::mutable_msgsource() {
  set_has_msgsource();
  // @@protoc_insertion_point(field_mutable:FromCs.AppMsgObject.MsgSource)
  return msgsource_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppMsgObject::release_msgsource() {
  // @@protoc_insertion_point(field_release:FromCs.AppMsgObject.MsgSource)
  clear_has_msgsource();
  return msgsource_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppMsgObject::set_allocated_msgsource(::std::string* msgsource) {
  if (msgsource != NULL) {
    set_has_msgsource();
  } else {
    clear_has_msgsource();
  }
  msgsource_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgsource);
  // @@protoc_insertion_point(field_set_allocated:FromCs.AppMsgObject.MsgSource)
}

// -------------------------------------------------------------------

// removeFriendObject

// optional .FromCs.sKBuiltinstringT UserName = 1;
inline bool removeFriendObject::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void removeFriendObject::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void removeFriendObject::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void removeFriendObject::clear_username() {
  if (username_ != NULL) username_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_username();
}
inline const ::FromCs::sKBuiltinstringT& removeFriendObject::username() const {
  // @@protoc_insertion_point(field_get:FromCs.removeFriendObject.UserName)
  return username_ != NULL ? *username_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* removeFriendObject::mutable_username() {
  set_has_username();
  if (username_ == NULL) {
    username_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.removeFriendObject.UserName)
  return username_;
}
inline ::FromCs::sKBuiltinstringT* removeFriendObject::release_username() {
  // @@protoc_insertion_point(field_release:FromCs.removeFriendObject.UserName)
  clear_has_username();
  ::FromCs::sKBuiltinstringT* temp = username_;
  username_ = NULL;
  return temp;
}
inline void removeFriendObject::set_allocated_username(::FromCs::sKBuiltinstringT* username) {
  delete username_;
  username_ = username;
  if (username) {
    set_has_username();
  } else {
    clear_has_username();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.removeFriendObject.UserName)
}

// -------------------------------------------------------------------

// ShakeGetObj

// optional string UserName = 1;
inline bool ShakeGetObj::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShakeGetObj::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShakeGetObj::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShakeGetObj::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& ShakeGetObj::username() const {
  // @@protoc_insertion_point(field_get:FromCs.ShakeGetObj.UserName)
  return username_.GetNoArena();
}
inline void ShakeGetObj::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ShakeGetObj.UserName)
}
#if LANG_CXX11
inline void ShakeGetObj::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ShakeGetObj.UserName)
}
#endif
inline void ShakeGetObj::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ShakeGetObj.UserName)
}
inline void ShakeGetObj::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ShakeGetObj.UserName)
}
inline ::std::string* ShakeGetObj::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:FromCs.ShakeGetObj.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShakeGetObj::release_username() {
  // @@protoc_insertion_point(field_release:FromCs.ShakeGetObj.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShakeGetObj::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ShakeGetObj.UserName)
}

// optional string NickName = 2;
inline bool ShakeGetObj::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShakeGetObj::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShakeGetObj::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShakeGetObj::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
inline const ::std::string& ShakeGetObj::nickname() const {
  // @@protoc_insertion_point(field_get:FromCs.ShakeGetObj.NickName)
  return nickname_.GetNoArena();
}
inline void ShakeGetObj::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ShakeGetObj.NickName)
}
#if LANG_CXX11
inline void ShakeGetObj::set_nickname(::std::string&& value) {
  set_has_nickname();
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ShakeGetObj.NickName)
}
#endif
inline void ShakeGetObj::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ShakeGetObj.NickName)
}
inline void ShakeGetObj::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ShakeGetObj.NickName)
}
inline ::std::string* ShakeGetObj::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:FromCs.ShakeGetObj.NickName)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShakeGetObj::release_nickname() {
  // @@protoc_insertion_point(field_release:FromCs.ShakeGetObj.NickName)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShakeGetObj::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ShakeGetObj.NickName)
}

// optional string Province = 3;
inline bool ShakeGetObj::has_province() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ShakeGetObj::set_has_province() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ShakeGetObj::clear_has_province() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ShakeGetObj::clear_province() {
  province_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_province();
}
inline const ::std::string& ShakeGetObj::province() const {
  // @@protoc_insertion_point(field_get:FromCs.ShakeGetObj.Province)
  return province_.GetNoArena();
}
inline void ShakeGetObj::set_province(const ::std::string& value) {
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ShakeGetObj.Province)
}
#if LANG_CXX11
inline void ShakeGetObj::set_province(::std::string&& value) {
  set_has_province();
  province_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ShakeGetObj.Province)
}
#endif
inline void ShakeGetObj::set_province(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ShakeGetObj.Province)
}
inline void ShakeGetObj::set_province(const char* value, size_t size) {
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ShakeGetObj.Province)
}
inline ::std::string* ShakeGetObj::mutable_province() {
  set_has_province();
  // @@protoc_insertion_point(field_mutable:FromCs.ShakeGetObj.Province)
  return province_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShakeGetObj::release_province() {
  // @@protoc_insertion_point(field_release:FromCs.ShakeGetObj.Province)
  clear_has_province();
  return province_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShakeGetObj::set_allocated_province(::std::string* province) {
  if (province != NULL) {
    set_has_province();
  } else {
    clear_has_province();
  }
  province_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), province);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ShakeGetObj.Province)
}

// optional string City = 4;
inline bool ShakeGetObj::has_city() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ShakeGetObj::set_has_city() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ShakeGetObj::clear_has_city() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ShakeGetObj::clear_city() {
  city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_city();
}
inline const ::std::string& ShakeGetObj::city() const {
  // @@protoc_insertion_point(field_get:FromCs.ShakeGetObj.City)
  return city_.GetNoArena();
}
inline void ShakeGetObj::set_city(const ::std::string& value) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ShakeGetObj.City)
}
#if LANG_CXX11
inline void ShakeGetObj::set_city(::std::string&& value) {
  set_has_city();
  city_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ShakeGetObj.City)
}
#endif
inline void ShakeGetObj::set_city(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ShakeGetObj.City)
}
inline void ShakeGetObj::set_city(const char* value, size_t size) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ShakeGetObj.City)
}
inline ::std::string* ShakeGetObj::mutable_city() {
  set_has_city();
  // @@protoc_insertion_point(field_mutable:FromCs.ShakeGetObj.City)
  return city_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShakeGetObj::release_city() {
  // @@protoc_insertion_point(field_release:FromCs.ShakeGetObj.City)
  clear_has_city();
  return city_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShakeGetObj::set_allocated_city(::std::string* city) {
  if (city != NULL) {
    set_has_city();
  } else {
    clear_has_city();
  }
  city_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ShakeGetObj.City)
}

// optional string Signature = 5;
inline bool ShakeGetObj::has_signature() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ShakeGetObj::set_has_signature() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ShakeGetObj::clear_has_signature() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ShakeGetObj::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_signature();
}
inline const ::std::string& ShakeGetObj::signature() const {
  // @@protoc_insertion_point(field_get:FromCs.ShakeGetObj.Signature)
  return signature_.GetNoArena();
}
inline void ShakeGetObj::set_signature(const ::std::string& value) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ShakeGetObj.Signature)
}
#if LANG_CXX11
inline void ShakeGetObj::set_signature(::std::string&& value) {
  set_has_signature();
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ShakeGetObj.Signature)
}
#endif
inline void ShakeGetObj::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ShakeGetObj.Signature)
}
inline void ShakeGetObj::set_signature(const char* value, size_t size) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ShakeGetObj.Signature)
}
inline ::std::string* ShakeGetObj::mutable_signature() {
  set_has_signature();
  // @@protoc_insertion_point(field_mutable:FromCs.ShakeGetObj.Signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShakeGetObj::release_signature() {
  // @@protoc_insertion_point(field_release:FromCs.ShakeGetObj.Signature)
  clear_has_signature();
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShakeGetObj::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ShakeGetObj.Signature)
}

// optional string Distance = 6;
inline bool ShakeGetObj::has_distance() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ShakeGetObj::set_has_distance() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ShakeGetObj::clear_has_distance() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ShakeGetObj::clear_distance() {
  distance_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_distance();
}
inline const ::std::string& ShakeGetObj::distance() const {
  // @@protoc_insertion_point(field_get:FromCs.ShakeGetObj.Distance)
  return distance_.GetNoArena();
}
inline void ShakeGetObj::set_distance(const ::std::string& value) {
  set_has_distance();
  distance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ShakeGetObj.Distance)
}
#if LANG_CXX11
inline void ShakeGetObj::set_distance(::std::string&& value) {
  set_has_distance();
  distance_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ShakeGetObj.Distance)
}
#endif
inline void ShakeGetObj::set_distance(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_distance();
  distance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ShakeGetObj.Distance)
}
inline void ShakeGetObj::set_distance(const char* value, size_t size) {
  set_has_distance();
  distance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ShakeGetObj.Distance)
}
inline ::std::string* ShakeGetObj::mutable_distance() {
  set_has_distance();
  // @@protoc_insertion_point(field_mutable:FromCs.ShakeGetObj.Distance)
  return distance_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShakeGetObj::release_distance() {
  // @@protoc_insertion_point(field_release:FromCs.ShakeGetObj.Distance)
  clear_has_distance();
  return distance_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShakeGetObj::set_allocated_distance(::std::string* distance) {
  if (distance != NULL) {
    set_has_distance();
  } else {
    clear_has_distance();
  }
  distance_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), distance);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ShakeGetObj.Distance)
}

// optional int32 Sex = 7;
inline bool ShakeGetObj::has_sex() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ShakeGetObj::set_has_sex() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ShakeGetObj::clear_has_sex() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ShakeGetObj::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 ShakeGetObj::sex() const {
  // @@protoc_insertion_point(field_get:FromCs.ShakeGetObj.Sex)
  return sex_;
}
inline void ShakeGetObj::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ShakeGetObj.Sex)
}

// optional int32 ImgStatus = 8;
inline bool ShakeGetObj::has_imgstatus() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ShakeGetObj::set_has_imgstatus() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ShakeGetObj::clear_has_imgstatus() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ShakeGetObj::clear_imgstatus() {
  imgstatus_ = 0;
  clear_has_imgstatus();
}
inline ::google::protobuf::int32 ShakeGetObj::imgstatus() const {
  // @@protoc_insertion_point(field_get:FromCs.ShakeGetObj.ImgStatus)
  return imgstatus_;
}
inline void ShakeGetObj::set_imgstatus(::google::protobuf::int32 value) {
  set_has_imgstatus();
  imgstatus_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ShakeGetObj.ImgStatus)
}

// optional int32 HasHDImg = 9;
inline bool ShakeGetObj::has_hashdimg() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ShakeGetObj::set_has_hashdimg() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ShakeGetObj::clear_has_hashdimg() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ShakeGetObj::clear_hashdimg() {
  hashdimg_ = 0;
  clear_has_hashdimg();
}
inline ::google::protobuf::int32 ShakeGetObj::hashdimg() const {
  // @@protoc_insertion_point(field_get:FromCs.ShakeGetObj.HasHDImg)
  return hashdimg_;
}
inline void ShakeGetObj::set_hashdimg(::google::protobuf::int32 value) {
  set_has_hashdimg();
  hashdimg_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ShakeGetObj.HasHDImg)
}

// optional .FromCs.sKBuiltinstringT ImgBuffer = 10;
inline bool ShakeGetObj::has_imgbuffer() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ShakeGetObj::set_has_imgbuffer() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ShakeGetObj::clear_has_imgbuffer() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ShakeGetObj::clear_imgbuffer() {
  if (imgbuffer_ != NULL) imgbuffer_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_imgbuffer();
}
inline const ::FromCs::sKBuiltinstringT& ShakeGetObj::imgbuffer() const {
  // @@protoc_insertion_point(field_get:FromCs.ShakeGetObj.ImgBuffer)
  return imgbuffer_ != NULL ? *imgbuffer_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* ShakeGetObj::mutable_imgbuffer() {
  set_has_imgbuffer();
  if (imgbuffer_ == NULL) {
    imgbuffer_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.ShakeGetObj.ImgBuffer)
  return imgbuffer_;
}
inline ::FromCs::sKBuiltinstringT* ShakeGetObj::release_imgbuffer() {
  // @@protoc_insertion_point(field_release:FromCs.ShakeGetObj.ImgBuffer)
  clear_has_imgbuffer();
  ::FromCs::sKBuiltinstringT* temp = imgbuffer_;
  imgbuffer_ = NULL;
  return temp;
}
inline void ShakeGetObj::set_allocated_imgbuffer(::FromCs::sKBuiltinstringT* imgbuffer) {
  delete imgbuffer_;
  imgbuffer_ = imgbuffer;
  if (imgbuffer) {
    set_has_imgbuffer();
  } else {
    clear_has_imgbuffer();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.ShakeGetObj.ImgBuffer)
}

// optional int32 NumDistance = 11;
inline bool ShakeGetObj::has_numdistance() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ShakeGetObj::set_has_numdistance() {
  _has_bits_[0] |= 0x00100000u;
}
inline void ShakeGetObj::clear_has_numdistance() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void ShakeGetObj::clear_numdistance() {
  numdistance_ = 0;
  clear_has_numdistance();
}
inline ::google::protobuf::int32 ShakeGetObj::numdistance() const {
  // @@protoc_insertion_point(field_get:FromCs.ShakeGetObj.NumDistance)
  return numdistance_;
}
inline void ShakeGetObj::set_numdistance(::google::protobuf::int32 value) {
  set_has_numdistance();
  numdistance_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ShakeGetObj.NumDistance)
}

// optional string Weibo = 12;
inline bool ShakeGetObj::has_weibo() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ShakeGetObj::set_has_weibo() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ShakeGetObj::clear_has_weibo() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ShakeGetObj::clear_weibo() {
  weibo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_weibo();
}
inline const ::std::string& ShakeGetObj::weibo() const {
  // @@protoc_insertion_point(field_get:FromCs.ShakeGetObj.Weibo)
  return weibo_.GetNoArena();
}
inline void ShakeGetObj::set_weibo(const ::std::string& value) {
  set_has_weibo();
  weibo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ShakeGetObj.Weibo)
}
#if LANG_CXX11
inline void ShakeGetObj::set_weibo(::std::string&& value) {
  set_has_weibo();
  weibo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ShakeGetObj.Weibo)
}
#endif
inline void ShakeGetObj::set_weibo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_weibo();
  weibo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ShakeGetObj.Weibo)
}
inline void ShakeGetObj::set_weibo(const char* value, size_t size) {
  set_has_weibo();
  weibo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ShakeGetObj.Weibo)
}
inline ::std::string* ShakeGetObj::mutable_weibo() {
  set_has_weibo();
  // @@protoc_insertion_point(field_mutable:FromCs.ShakeGetObj.Weibo)
  return weibo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShakeGetObj::release_weibo() {
  // @@protoc_insertion_point(field_release:FromCs.ShakeGetObj.Weibo)
  clear_has_weibo();
  return weibo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShakeGetObj::set_allocated_weibo(::std::string* weibo) {
  if (weibo != NULL) {
    set_has_weibo();
  } else {
    clear_has_weibo();
  }
  weibo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), weibo);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ShakeGetObj.Weibo)
}

// optional string WeiboNickname = 13;
inline bool ShakeGetObj::has_weibonickname() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ShakeGetObj::set_has_weibonickname() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ShakeGetObj::clear_has_weibonickname() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ShakeGetObj::clear_weibonickname() {
  weibonickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_weibonickname();
}
inline const ::std::string& ShakeGetObj::weibonickname() const {
  // @@protoc_insertion_point(field_get:FromCs.ShakeGetObj.WeiboNickname)
  return weibonickname_.GetNoArena();
}
inline void ShakeGetObj::set_weibonickname(const ::std::string& value) {
  set_has_weibonickname();
  weibonickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ShakeGetObj.WeiboNickname)
}
#if LANG_CXX11
inline void ShakeGetObj::set_weibonickname(::std::string&& value) {
  set_has_weibonickname();
  weibonickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ShakeGetObj.WeiboNickname)
}
#endif
inline void ShakeGetObj::set_weibonickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_weibonickname();
  weibonickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ShakeGetObj.WeiboNickname)
}
inline void ShakeGetObj::set_weibonickname(const char* value, size_t size) {
  set_has_weibonickname();
  weibonickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ShakeGetObj.WeiboNickname)
}
inline ::std::string* ShakeGetObj::mutable_weibonickname() {
  set_has_weibonickname();
  // @@protoc_insertion_point(field_mutable:FromCs.ShakeGetObj.WeiboNickname)
  return weibonickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShakeGetObj::release_weibonickname() {
  // @@protoc_insertion_point(field_release:FromCs.ShakeGetObj.WeiboNickname)
  clear_has_weibonickname();
  return weibonickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShakeGetObj::set_allocated_weibonickname(::std::string* weibonickname) {
  if (weibonickname != NULL) {
    set_has_weibonickname();
  } else {
    clear_has_weibonickname();
  }
  weibonickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), weibonickname);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ShakeGetObj.WeiboNickname)
}

// optional int32 WeiboFlag = 14;
inline bool ShakeGetObj::has_weiboflag() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void ShakeGetObj::set_has_weiboflag() {
  _has_bits_[0] |= 0x00200000u;
}
inline void ShakeGetObj::clear_has_weiboflag() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void ShakeGetObj::clear_weiboflag() {
  weiboflag_ = 0;
  clear_has_weiboflag();
}
inline ::google::protobuf::int32 ShakeGetObj::weiboflag() const {
  // @@protoc_insertion_point(field_get:FromCs.ShakeGetObj.WeiboFlag)
  return weiboflag_;
}
inline void ShakeGetObj::set_weiboflag(::google::protobuf::int32 value) {
  set_has_weiboflag();
  weiboflag_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ShakeGetObj.WeiboFlag)
}

// optional int32 VerifyFlag = 15;
inline bool ShakeGetObj::has_verifyflag() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void ShakeGetObj::set_has_verifyflag() {
  _has_bits_[0] |= 0x00400000u;
}
inline void ShakeGetObj::clear_has_verifyflag() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void ShakeGetObj::clear_verifyflag() {
  verifyflag_ = 0;
  clear_has_verifyflag();
}
inline ::google::protobuf::int32 ShakeGetObj::verifyflag() const {
  // @@protoc_insertion_point(field_get:FromCs.ShakeGetObj.VerifyFlag)
  return verifyflag_;
}
inline void ShakeGetObj::set_verifyflag(::google::protobuf::int32 value) {
  set_has_verifyflag();
  verifyflag_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ShakeGetObj.VerifyFlag)
}

// optional string VerifyInfo = 16;
inline bool ShakeGetObj::has_verifyinfo() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ShakeGetObj::set_has_verifyinfo() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ShakeGetObj::clear_has_verifyinfo() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ShakeGetObj::clear_verifyinfo() {
  verifyinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_verifyinfo();
}
inline const ::std::string& ShakeGetObj::verifyinfo() const {
  // @@protoc_insertion_point(field_get:FromCs.ShakeGetObj.VerifyInfo)
  return verifyinfo_.GetNoArena();
}
inline void ShakeGetObj::set_verifyinfo(const ::std::string& value) {
  set_has_verifyinfo();
  verifyinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ShakeGetObj.VerifyInfo)
}
#if LANG_CXX11
inline void ShakeGetObj::set_verifyinfo(::std::string&& value) {
  set_has_verifyinfo();
  verifyinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ShakeGetObj.VerifyInfo)
}
#endif
inline void ShakeGetObj::set_verifyinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_verifyinfo();
  verifyinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ShakeGetObj.VerifyInfo)
}
inline void ShakeGetObj::set_verifyinfo(const char* value, size_t size) {
  set_has_verifyinfo();
  verifyinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ShakeGetObj.VerifyInfo)
}
inline ::std::string* ShakeGetObj::mutable_verifyinfo() {
  set_has_verifyinfo();
  // @@protoc_insertion_point(field_mutable:FromCs.ShakeGetObj.VerifyInfo)
  return verifyinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShakeGetObj::release_verifyinfo() {
  // @@protoc_insertion_point(field_release:FromCs.ShakeGetObj.VerifyInfo)
  clear_has_verifyinfo();
  return verifyinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShakeGetObj::set_allocated_verifyinfo(::std::string* verifyinfo) {
  if (verifyinfo != NULL) {
    set_has_verifyinfo();
  } else {
    clear_has_verifyinfo();
  }
  verifyinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verifyinfo);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ShakeGetObj.VerifyInfo)
}

// optional string VerifyContent = 17;
inline bool ShakeGetObj::has_verifycontent() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ShakeGetObj::set_has_verifycontent() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ShakeGetObj::clear_has_verifycontent() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ShakeGetObj::clear_verifycontent() {
  verifycontent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_verifycontent();
}
inline const ::std::string& ShakeGetObj::verifycontent() const {
  // @@protoc_insertion_point(field_get:FromCs.ShakeGetObj.VerifyContent)
  return verifycontent_.GetNoArena();
}
inline void ShakeGetObj::set_verifycontent(const ::std::string& value) {
  set_has_verifycontent();
  verifycontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ShakeGetObj.VerifyContent)
}
#if LANG_CXX11
inline void ShakeGetObj::set_verifycontent(::std::string&& value) {
  set_has_verifycontent();
  verifycontent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ShakeGetObj.VerifyContent)
}
#endif
inline void ShakeGetObj::set_verifycontent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_verifycontent();
  verifycontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ShakeGetObj.VerifyContent)
}
inline void ShakeGetObj::set_verifycontent(const char* value, size_t size) {
  set_has_verifycontent();
  verifycontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ShakeGetObj.VerifyContent)
}
inline ::std::string* ShakeGetObj::mutable_verifycontent() {
  set_has_verifycontent();
  // @@protoc_insertion_point(field_mutable:FromCs.ShakeGetObj.VerifyContent)
  return verifycontent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShakeGetObj::release_verifycontent() {
  // @@protoc_insertion_point(field_release:FromCs.ShakeGetObj.VerifyContent)
  clear_has_verifycontent();
  return verifycontent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShakeGetObj::set_allocated_verifycontent(::std::string* verifycontent) {
  if (verifycontent != NULL) {
    set_has_verifycontent();
  } else {
    clear_has_verifycontent();
  }
  verifycontent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verifycontent);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ShakeGetObj.VerifyContent)
}

// optional int32 HeadImgVersion = 21;
inline bool ShakeGetObj::has_headimgversion() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void ShakeGetObj::set_has_headimgversion() {
  _has_bits_[0] |= 0x00800000u;
}
inline void ShakeGetObj::clear_has_headimgversion() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void ShakeGetObj::clear_headimgversion() {
  headimgversion_ = 0;
  clear_has_headimgversion();
}
inline ::google::protobuf::int32 ShakeGetObj::headimgversion() const {
  // @@protoc_insertion_point(field_get:FromCs.ShakeGetObj.HeadImgVersion)
  return headimgversion_;
}
inline void ShakeGetObj::set_headimgversion(::google::protobuf::int32 value) {
  set_has_headimgversion();
  headimgversion_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ShakeGetObj.HeadImgVersion)
}

// optional .FromCs.sKBuiltinstringT SnsUserInfo = 22;
inline bool ShakeGetObj::has_snsuserinfo() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ShakeGetObj::set_has_snsuserinfo() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ShakeGetObj::clear_has_snsuserinfo() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ShakeGetObj::clear_snsuserinfo() {
  if (snsuserinfo_ != NULL) snsuserinfo_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_snsuserinfo();
}
inline const ::FromCs::sKBuiltinstringT& ShakeGetObj::snsuserinfo() const {
  // @@protoc_insertion_point(field_get:FromCs.ShakeGetObj.SnsUserInfo)
  return snsuserinfo_ != NULL ? *snsuserinfo_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* ShakeGetObj::mutable_snsuserinfo() {
  set_has_snsuserinfo();
  if (snsuserinfo_ == NULL) {
    snsuserinfo_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.ShakeGetObj.SnsUserInfo)
  return snsuserinfo_;
}
inline ::FromCs::sKBuiltinstringT* ShakeGetObj::release_snsuserinfo() {
  // @@protoc_insertion_point(field_release:FromCs.ShakeGetObj.SnsUserInfo)
  clear_has_snsuserinfo();
  ::FromCs::sKBuiltinstringT* temp = snsuserinfo_;
  snsuserinfo_ = NULL;
  return temp;
}
inline void ShakeGetObj::set_allocated_snsuserinfo(::FromCs::sKBuiltinstringT* snsuserinfo) {
  delete snsuserinfo_;
  snsuserinfo_ = snsuserinfo;
  if (snsuserinfo) {
    set_has_snsuserinfo();
  } else {
    clear_has_snsuserinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.ShakeGetObj.SnsUserInfo)
}

// optional string Country = 23;
inline bool ShakeGetObj::has_country() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ShakeGetObj::set_has_country() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ShakeGetObj::clear_has_country() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ShakeGetObj::clear_country() {
  country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country();
}
inline const ::std::string& ShakeGetObj::country() const {
  // @@protoc_insertion_point(field_get:FromCs.ShakeGetObj.Country)
  return country_.GetNoArena();
}
inline void ShakeGetObj::set_country(const ::std::string& value) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ShakeGetObj.Country)
}
#if LANG_CXX11
inline void ShakeGetObj::set_country(::std::string&& value) {
  set_has_country();
  country_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ShakeGetObj.Country)
}
#endif
inline void ShakeGetObj::set_country(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ShakeGetObj.Country)
}
inline void ShakeGetObj::set_country(const char* value, size_t size) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ShakeGetObj.Country)
}
inline ::std::string* ShakeGetObj::mutable_country() {
  set_has_country();
  // @@protoc_insertion_point(field_mutable:FromCs.ShakeGetObj.Country)
  return country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShakeGetObj::release_country() {
  // @@protoc_insertion_point(field_release:FromCs.ShakeGetObj.Country)
  clear_has_country();
  return country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShakeGetObj::set_allocated_country(::std::string* country) {
  if (country != NULL) {
    set_has_country();
  } else {
    clear_has_country();
  }
  country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ShakeGetObj.Country)
}

// optional string BigHeadImgUrl = 24;
inline bool ShakeGetObj::has_bigheadimgurl() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ShakeGetObj::set_has_bigheadimgurl() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ShakeGetObj::clear_has_bigheadimgurl() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ShakeGetObj::clear_bigheadimgurl() {
  bigheadimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bigheadimgurl();
}
inline const ::std::string& ShakeGetObj::bigheadimgurl() const {
  // @@protoc_insertion_point(field_get:FromCs.ShakeGetObj.BigHeadImgUrl)
  return bigheadimgurl_.GetNoArena();
}
inline void ShakeGetObj::set_bigheadimgurl(const ::std::string& value) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ShakeGetObj.BigHeadImgUrl)
}
#if LANG_CXX11
inline void ShakeGetObj::set_bigheadimgurl(::std::string&& value) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ShakeGetObj.BigHeadImgUrl)
}
#endif
inline void ShakeGetObj::set_bigheadimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ShakeGetObj.BigHeadImgUrl)
}
inline void ShakeGetObj::set_bigheadimgurl(const char* value, size_t size) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ShakeGetObj.BigHeadImgUrl)
}
inline ::std::string* ShakeGetObj::mutable_bigheadimgurl() {
  set_has_bigheadimgurl();
  // @@protoc_insertion_point(field_mutable:FromCs.ShakeGetObj.BigHeadImgUrl)
  return bigheadimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShakeGetObj::release_bigheadimgurl() {
  // @@protoc_insertion_point(field_release:FromCs.ShakeGetObj.BigHeadImgUrl)
  clear_has_bigheadimgurl();
  return bigheadimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShakeGetObj::set_allocated_bigheadimgurl(::std::string* bigheadimgurl) {
  if (bigheadimgurl != NULL) {
    set_has_bigheadimgurl();
  } else {
    clear_has_bigheadimgurl();
  }
  bigheadimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bigheadimgurl);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ShakeGetObj.BigHeadImgUrl)
}

// optional string SmallHeadImgUrl = 25;
inline bool ShakeGetObj::has_smallheadimgurl() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ShakeGetObj::set_has_smallheadimgurl() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ShakeGetObj::clear_has_smallheadimgurl() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ShakeGetObj::clear_smallheadimgurl() {
  smallheadimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_smallheadimgurl();
}
inline const ::std::string& ShakeGetObj::smallheadimgurl() const {
  // @@protoc_insertion_point(field_get:FromCs.ShakeGetObj.SmallHeadImgUrl)
  return smallheadimgurl_.GetNoArena();
}
inline void ShakeGetObj::set_smallheadimgurl(const ::std::string& value) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ShakeGetObj.SmallHeadImgUrl)
}
#if LANG_CXX11
inline void ShakeGetObj::set_smallheadimgurl(::std::string&& value) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ShakeGetObj.SmallHeadImgUrl)
}
#endif
inline void ShakeGetObj::set_smallheadimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ShakeGetObj.SmallHeadImgUrl)
}
inline void ShakeGetObj::set_smallheadimgurl(const char* value, size_t size) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ShakeGetObj.SmallHeadImgUrl)
}
inline ::std::string* ShakeGetObj::mutable_smallheadimgurl() {
  set_has_smallheadimgurl();
  // @@protoc_insertion_point(field_mutable:FromCs.ShakeGetObj.SmallHeadImgUrl)
  return smallheadimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShakeGetObj::release_smallheadimgurl() {
  // @@protoc_insertion_point(field_release:FromCs.ShakeGetObj.SmallHeadImgUrl)
  clear_has_smallheadimgurl();
  return smallheadimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShakeGetObj::set_allocated_smallheadimgurl(::std::string* smallheadimgurl) {
  if (smallheadimgurl != NULL) {
    set_has_smallheadimgurl();
  } else {
    clear_has_smallheadimgurl();
  }
  smallheadimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smallheadimgurl);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ShakeGetObj.SmallHeadImgUrl)
}

// optional string MyBrandList = 26;
inline bool ShakeGetObj::has_mybrandlist() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ShakeGetObj::set_has_mybrandlist() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ShakeGetObj::clear_has_mybrandlist() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ShakeGetObj::clear_mybrandlist() {
  mybrandlist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mybrandlist();
}
inline const ::std::string& ShakeGetObj::mybrandlist() const {
  // @@protoc_insertion_point(field_get:FromCs.ShakeGetObj.MyBrandList)
  return mybrandlist_.GetNoArena();
}
inline void ShakeGetObj::set_mybrandlist(const ::std::string& value) {
  set_has_mybrandlist();
  mybrandlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ShakeGetObj.MyBrandList)
}
#if LANG_CXX11
inline void ShakeGetObj::set_mybrandlist(::std::string&& value) {
  set_has_mybrandlist();
  mybrandlist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ShakeGetObj.MyBrandList)
}
#endif
inline void ShakeGetObj::set_mybrandlist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mybrandlist();
  mybrandlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ShakeGetObj.MyBrandList)
}
inline void ShakeGetObj::set_mybrandlist(const char* value, size_t size) {
  set_has_mybrandlist();
  mybrandlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ShakeGetObj.MyBrandList)
}
inline ::std::string* ShakeGetObj::mutable_mybrandlist() {
  set_has_mybrandlist();
  // @@protoc_insertion_point(field_mutable:FromCs.ShakeGetObj.MyBrandList)
  return mybrandlist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShakeGetObj::release_mybrandlist() {
  // @@protoc_insertion_point(field_release:FromCs.ShakeGetObj.MyBrandList)
  clear_has_mybrandlist();
  return mybrandlist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShakeGetObj::set_allocated_mybrandlist(::std::string* mybrandlist) {
  if (mybrandlist != NULL) {
    set_has_mybrandlist();
  } else {
    clear_has_mybrandlist();
  }
  mybrandlist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mybrandlist);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ShakeGetObj.MyBrandList)
}

// optional .FromCs.sKBuiltinstringT CustomizedInfo = 27;
inline bool ShakeGetObj::has_customizedinfo() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ShakeGetObj::set_has_customizedinfo() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ShakeGetObj::clear_has_customizedinfo() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ShakeGetObj::clear_customizedinfo() {
  if (customizedinfo_ != NULL) customizedinfo_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_customizedinfo();
}
inline const ::FromCs::sKBuiltinstringT& ShakeGetObj::customizedinfo() const {
  // @@protoc_insertion_point(field_get:FromCs.ShakeGetObj.CustomizedInfo)
  return customizedinfo_ != NULL ? *customizedinfo_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* ShakeGetObj::mutable_customizedinfo() {
  set_has_customizedinfo();
  if (customizedinfo_ == NULL) {
    customizedinfo_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.ShakeGetObj.CustomizedInfo)
  return customizedinfo_;
}
inline ::FromCs::sKBuiltinstringT* ShakeGetObj::release_customizedinfo() {
  // @@protoc_insertion_point(field_release:FromCs.ShakeGetObj.CustomizedInfo)
  clear_has_customizedinfo();
  ::FromCs::sKBuiltinstringT* temp = customizedinfo_;
  customizedinfo_ = NULL;
  return temp;
}
inline void ShakeGetObj::set_allocated_customizedinfo(::FromCs::sKBuiltinstringT* customizedinfo) {
  delete customizedinfo_;
  customizedinfo_ = customizedinfo;
  if (customizedinfo) {
    set_has_customizedinfo();
  } else {
    clear_has_customizedinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.ShakeGetObj.CustomizedInfo)
}

// -------------------------------------------------------------------

// CardInfo

// optional string CardID = 1;
inline bool CardInfo::has_cardid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CardInfo::set_has_cardid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CardInfo::clear_has_cardid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CardInfo::clear_cardid() {
  cardid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cardid();
}
inline const ::std::string& CardInfo::cardid() const {
  // @@protoc_insertion_point(field_get:FromCs.CardInfo.CardID)
  return cardid_.GetNoArena();
}
inline void CardInfo::set_cardid(const ::std::string& value) {
  set_has_cardid();
  cardid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.CardInfo.CardID)
}
#if LANG_CXX11
inline void CardInfo::set_cardid(::std::string&& value) {
  set_has_cardid();
  cardid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.CardInfo.CardID)
}
#endif
inline void CardInfo::set_cardid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cardid();
  cardid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.CardInfo.CardID)
}
inline void CardInfo::set_cardid(const char* value, size_t size) {
  set_has_cardid();
  cardid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.CardInfo.CardID)
}
inline ::std::string* CardInfo::mutable_cardid() {
  set_has_cardid();
  // @@protoc_insertion_point(field_mutable:FromCs.CardInfo.CardID)
  return cardid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CardInfo::release_cardid() {
  // @@protoc_insertion_point(field_release:FromCs.CardInfo.CardID)
  clear_has_cardid();
  return cardid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CardInfo::set_allocated_cardid(::std::string* cardid) {
  if (cardid != NULL) {
    set_has_cardid();
  } else {
    clear_has_cardid();
  }
  cardid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cardid);
  // @@protoc_insertion_point(field_set_allocated:FromCs.CardInfo.CardID)
}

// optional int32 Seq = 2;
inline bool CardInfo::has_seq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CardInfo::set_has_seq() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CardInfo::clear_has_seq() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CardInfo::clear_seq() {
  seq_ = 0;
  clear_has_seq();
}
inline ::google::protobuf::int32 CardInfo::seq() const {
  // @@protoc_insertion_point(field_get:FromCs.CardInfo.Seq)
  return seq_;
}
inline void CardInfo::set_seq(::google::protobuf::int32 value) {
  set_has_seq();
  seq_ = value;
  // @@protoc_insertion_point(field_set:FromCs.CardInfo.Seq)
}

// optional int32 Itme3 = 3;
inline bool CardInfo::has_itme3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CardInfo::set_has_itme3() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CardInfo::clear_has_itme3() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CardInfo::clear_itme3() {
  itme3_ = 0;
  clear_has_itme3();
}
inline ::google::protobuf::int32 CardInfo::itme3() const {
  // @@protoc_insertion_point(field_get:FromCs.CardInfo.Itme3)
  return itme3_;
}
inline void CardInfo::set_itme3(::google::protobuf::int32 value) {
  set_has_itme3();
  itme3_ = value;
  // @@protoc_insertion_point(field_set:FromCs.CardInfo.Itme3)
}

// optional int32 Itme4 = 4;
inline bool CardInfo::has_itme4() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CardInfo::set_has_itme4() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CardInfo::clear_has_itme4() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CardInfo::clear_itme4() {
  itme4_ = 0;
  clear_has_itme4();
}
inline ::google::protobuf::int32 CardInfo::itme4() const {
  // @@protoc_insertion_point(field_get:FromCs.CardInfo.Itme4)
  return itme4_;
}
inline void CardInfo::set_itme4(::google::protobuf::int32 value) {
  set_has_itme4();
  itme4_ = value;
  // @@protoc_insertion_point(field_set:FromCs.CardInfo.Itme4)
}

// optional int32 Itme5 = 5;
inline bool CardInfo::has_itme5() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CardInfo::set_has_itme5() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CardInfo::clear_has_itme5() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CardInfo::clear_itme5() {
  itme5_ = 0;
  clear_has_itme5();
}
inline ::google::protobuf::int32 CardInfo::itme5() const {
  // @@protoc_insertion_point(field_get:FromCs.CardInfo.Itme5)
  return itme5_;
}
inline void CardInfo::set_itme5(::google::protobuf::int32 value) {
  set_has_itme5();
  itme5_ = value;
  // @@protoc_insertion_point(field_set:FromCs.CardInfo.Itme5)
}

// -------------------------------------------------------------------

// ChatRoomItem

// optional .FromCs.sKBuiltinstringT MemberName = 1;
inline bool ChatRoomItem::has_membername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatRoomItem::set_has_membername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatRoomItem::clear_has_membername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatRoomItem::clear_membername() {
  if (membername_ != NULL) membername_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_membername();
}
inline const ::FromCs::sKBuiltinstringT& ChatRoomItem::membername() const {
  // @@protoc_insertion_point(field_get:FromCs.ChatRoomItem.MemberName)
  return membername_ != NULL ? *membername_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* ChatRoomItem::mutable_membername() {
  set_has_membername();
  if (membername_ == NULL) {
    membername_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.ChatRoomItem.MemberName)
  return membername_;
}
inline ::FromCs::sKBuiltinstringT* ChatRoomItem::release_membername() {
  // @@protoc_insertion_point(field_release:FromCs.ChatRoomItem.MemberName)
  clear_has_membername();
  ::FromCs::sKBuiltinstringT* temp = membername_;
  membername_ = NULL;
  return temp;
}
inline void ChatRoomItem::set_allocated_membername(::FromCs::sKBuiltinstringT* membername) {
  delete membername_;
  membername_ = membername;
  if (membername) {
    set_has_membername();
  } else {
    clear_has_membername();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.ChatRoomItem.MemberName)
}

// -------------------------------------------------------------------

// MemberInfo

// optional .FromCs.sKBuiltinstringT MemberName = 1;
inline bool MemberInfo::has_membername() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MemberInfo::set_has_membername() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MemberInfo::clear_has_membername() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MemberInfo::clear_membername() {
  if (membername_ != NULL) membername_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_membername();
}
inline const ::FromCs::sKBuiltinstringT& MemberInfo::membername() const {
  // @@protoc_insertion_point(field_get:FromCs.MemberInfo.MemberName)
  return membername_ != NULL ? *membername_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* MemberInfo::mutable_membername() {
  set_has_membername();
  if (membername_ == NULL) {
    membername_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.MemberInfo.MemberName)
  return membername_;
}
inline ::FromCs::sKBuiltinstringT* MemberInfo::release_membername() {
  // @@protoc_insertion_point(field_release:FromCs.MemberInfo.MemberName)
  clear_has_membername();
  ::FromCs::sKBuiltinstringT* temp = membername_;
  membername_ = NULL;
  return temp;
}
inline void MemberInfo::set_allocated_membername(::FromCs::sKBuiltinstringT* membername) {
  delete membername_;
  membername_ = membername;
  if (membername) {
    set_has_membername();
  } else {
    clear_has_membername();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.MemberInfo.MemberName)
}

// optional int32 MemberStatus = 2;
inline bool MemberInfo::has_memberstatus() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MemberInfo::set_has_memberstatus() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MemberInfo::clear_has_memberstatus() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MemberInfo::clear_memberstatus() {
  memberstatus_ = 0;
  clear_has_memberstatus();
}
inline ::google::protobuf::int32 MemberInfo::memberstatus() const {
  // @@protoc_insertion_point(field_get:FromCs.MemberInfo.MemberStatus)
  return memberstatus_;
}
inline void MemberInfo::set_memberstatus(::google::protobuf::int32 value) {
  set_has_memberstatus();
  memberstatus_ = value;
  // @@protoc_insertion_point(field_set:FromCs.MemberInfo.MemberStatus)
}

// optional .FromCs.sKBuiltinstringT NickName = 3;
inline bool MemberInfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MemberInfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MemberInfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MemberInfo::clear_nickname() {
  if (nickname_ != NULL) nickname_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_nickname();
}
inline const ::FromCs::sKBuiltinstringT& MemberInfo::nickname() const {
  // @@protoc_insertion_point(field_get:FromCs.MemberInfo.NickName)
  return nickname_ != NULL ? *nickname_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* MemberInfo::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == NULL) {
    nickname_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.MemberInfo.NickName)
  return nickname_;
}
inline ::FromCs::sKBuiltinstringT* MemberInfo::release_nickname() {
  // @@protoc_insertion_point(field_release:FromCs.MemberInfo.NickName)
  clear_has_nickname();
  ::FromCs::sKBuiltinstringT* temp = nickname_;
  nickname_ = NULL;
  return temp;
}
inline void MemberInfo::set_allocated_nickname(::FromCs::sKBuiltinstringT* nickname) {
  delete nickname_;
  nickname_ = nickname;
  if (nickname) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.MemberInfo.NickName)
}

// optional .FromCs.sKBuiltinstringT PYInitial = 4;
inline bool MemberInfo::has_pyinitial() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MemberInfo::set_has_pyinitial() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MemberInfo::clear_has_pyinitial() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MemberInfo::clear_pyinitial() {
  if (pyinitial_ != NULL) pyinitial_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_pyinitial();
}
inline const ::FromCs::sKBuiltinstringT& MemberInfo::pyinitial() const {
  // @@protoc_insertion_point(field_get:FromCs.MemberInfo.PYInitial)
  return pyinitial_ != NULL ? *pyinitial_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* MemberInfo::mutable_pyinitial() {
  set_has_pyinitial();
  if (pyinitial_ == NULL) {
    pyinitial_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.MemberInfo.PYInitial)
  return pyinitial_;
}
inline ::FromCs::sKBuiltinstringT* MemberInfo::release_pyinitial() {
  // @@protoc_insertion_point(field_release:FromCs.MemberInfo.PYInitial)
  clear_has_pyinitial();
  ::FromCs::sKBuiltinstringT* temp = pyinitial_;
  pyinitial_ = NULL;
  return temp;
}
inline void MemberInfo::set_allocated_pyinitial(::FromCs::sKBuiltinstringT* pyinitial) {
  delete pyinitial_;
  pyinitial_ = pyinitial;
  if (pyinitial) {
    set_has_pyinitial();
  } else {
    clear_has_pyinitial();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.MemberInfo.PYInitial)
}

// optional .FromCs.sKBuiltinstringT QuanPin = 5;
inline bool MemberInfo::has_quanpin() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MemberInfo::set_has_quanpin() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MemberInfo::clear_has_quanpin() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MemberInfo::clear_quanpin() {
  if (quanpin_ != NULL) quanpin_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_quanpin();
}
inline const ::FromCs::sKBuiltinstringT& MemberInfo::quanpin() const {
  // @@protoc_insertion_point(field_get:FromCs.MemberInfo.QuanPin)
  return quanpin_ != NULL ? *quanpin_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* MemberInfo::mutable_quanpin() {
  set_has_quanpin();
  if (quanpin_ == NULL) {
    quanpin_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.MemberInfo.QuanPin)
  return quanpin_;
}
inline ::FromCs::sKBuiltinstringT* MemberInfo::release_quanpin() {
  // @@protoc_insertion_point(field_release:FromCs.MemberInfo.QuanPin)
  clear_has_quanpin();
  ::FromCs::sKBuiltinstringT* temp = quanpin_;
  quanpin_ = NULL;
  return temp;
}
inline void MemberInfo::set_allocated_quanpin(::FromCs::sKBuiltinstringT* quanpin) {
  delete quanpin_;
  quanpin_ = quanpin;
  if (quanpin) {
    set_has_quanpin();
  } else {
    clear_has_quanpin();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.MemberInfo.QuanPin)
}

// optional int32 Sex = 6;
inline bool MemberInfo::has_sex() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MemberInfo::set_has_sex() {
  _has_bits_[0] |= 0x00002000u;
}
inline void MemberInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void MemberInfo::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 MemberInfo::sex() const {
  // @@protoc_insertion_point(field_get:FromCs.MemberInfo.Sex)
  return sex_;
}
inline void MemberInfo::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:FromCs.MemberInfo.Sex)
}

// optional .FromCs.sKBuiltinstringT Remark = 7;
inline bool MemberInfo::has_remark() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MemberInfo::set_has_remark() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MemberInfo::clear_has_remark() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MemberInfo::clear_remark() {
  if (remark_ != NULL) remark_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_remark();
}
inline const ::FromCs::sKBuiltinstringT& MemberInfo::remark() const {
  // @@protoc_insertion_point(field_get:FromCs.MemberInfo.Remark)
  return remark_ != NULL ? *remark_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* MemberInfo::mutable_remark() {
  set_has_remark();
  if (remark_ == NULL) {
    remark_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.MemberInfo.Remark)
  return remark_;
}
inline ::FromCs::sKBuiltinstringT* MemberInfo::release_remark() {
  // @@protoc_insertion_point(field_release:FromCs.MemberInfo.Remark)
  clear_has_remark();
  ::FromCs::sKBuiltinstringT* temp = remark_;
  remark_ = NULL;
  return temp;
}
inline void MemberInfo::set_allocated_remark(::FromCs::sKBuiltinstringT* remark) {
  delete remark_;
  remark_ = remark;
  if (remark) {
    set_has_remark();
  } else {
    clear_has_remark();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.MemberInfo.Remark)
}

// optional .FromCs.sKBuiltinstringT RemarkPYInitial = 8;
inline bool MemberInfo::has_remarkpyinitial() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MemberInfo::set_has_remarkpyinitial() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MemberInfo::clear_has_remarkpyinitial() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MemberInfo::clear_remarkpyinitial() {
  if (remarkpyinitial_ != NULL) remarkpyinitial_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_remarkpyinitial();
}
inline const ::FromCs::sKBuiltinstringT& MemberInfo::remarkpyinitial() const {
  // @@protoc_insertion_point(field_get:FromCs.MemberInfo.RemarkPYInitial)
  return remarkpyinitial_ != NULL ? *remarkpyinitial_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* MemberInfo::mutable_remarkpyinitial() {
  set_has_remarkpyinitial();
  if (remarkpyinitial_ == NULL) {
    remarkpyinitial_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.MemberInfo.RemarkPYInitial)
  return remarkpyinitial_;
}
inline ::FromCs::sKBuiltinstringT* MemberInfo::release_remarkpyinitial() {
  // @@protoc_insertion_point(field_release:FromCs.MemberInfo.RemarkPYInitial)
  clear_has_remarkpyinitial();
  ::FromCs::sKBuiltinstringT* temp = remarkpyinitial_;
  remarkpyinitial_ = NULL;
  return temp;
}
inline void MemberInfo::set_allocated_remarkpyinitial(::FromCs::sKBuiltinstringT* remarkpyinitial) {
  delete remarkpyinitial_;
  remarkpyinitial_ = remarkpyinitial;
  if (remarkpyinitial) {
    set_has_remarkpyinitial();
  } else {
    clear_has_remarkpyinitial();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.MemberInfo.RemarkPYInitial)
}

// optional .FromCs.sKBuiltinstringT RemarkQuanPin = 9;
inline bool MemberInfo::has_remarkquanpin() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MemberInfo::set_has_remarkquanpin() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MemberInfo::clear_has_remarkquanpin() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MemberInfo::clear_remarkquanpin() {
  if (remarkquanpin_ != NULL) remarkquanpin_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_remarkquanpin();
}
inline const ::FromCs::sKBuiltinstringT& MemberInfo::remarkquanpin() const {
  // @@protoc_insertion_point(field_get:FromCs.MemberInfo.RemarkQuanPin)
  return remarkquanpin_ != NULL ? *remarkquanpin_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* MemberInfo::mutable_remarkquanpin() {
  set_has_remarkquanpin();
  if (remarkquanpin_ == NULL) {
    remarkquanpin_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.MemberInfo.RemarkQuanPin)
  return remarkquanpin_;
}
inline ::FromCs::sKBuiltinstringT* MemberInfo::release_remarkquanpin() {
  // @@protoc_insertion_point(field_release:FromCs.MemberInfo.RemarkQuanPin)
  clear_has_remarkquanpin();
  ::FromCs::sKBuiltinstringT* temp = remarkquanpin_;
  remarkquanpin_ = NULL;
  return temp;
}
inline void MemberInfo::set_allocated_remarkquanpin(::FromCs::sKBuiltinstringT* remarkquanpin) {
  delete remarkquanpin_;
  remarkquanpin_ = remarkquanpin;
  if (remarkquanpin) {
    set_has_remarkquanpin();
  } else {
    clear_has_remarkquanpin();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.MemberInfo.RemarkQuanPin)
}

// optional int32 ContactType = 10;
inline bool MemberInfo::has_contacttype() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void MemberInfo::set_has_contacttype() {
  _has_bits_[0] |= 0x00004000u;
}
inline void MemberInfo::clear_has_contacttype() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void MemberInfo::clear_contacttype() {
  contacttype_ = 0;
  clear_has_contacttype();
}
inline ::google::protobuf::int32 MemberInfo::contacttype() const {
  // @@protoc_insertion_point(field_get:FromCs.MemberInfo.ContactType)
  return contacttype_;
}
inline void MemberInfo::set_contacttype(::google::protobuf::int32 value) {
  set_has_contacttype();
  contacttype_ = value;
  // @@protoc_insertion_point(field_set:FromCs.MemberInfo.ContactType)
}

// optional string Province = 11;
inline bool MemberInfo::has_province() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MemberInfo::set_has_province() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MemberInfo::clear_has_province() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MemberInfo::clear_province() {
  province_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_province();
}
inline const ::std::string& MemberInfo::province() const {
  // @@protoc_insertion_point(field_get:FromCs.MemberInfo.Province)
  return province_.GetNoArena();
}
inline void MemberInfo::set_province(const ::std::string& value) {
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.MemberInfo.Province)
}
#if LANG_CXX11
inline void MemberInfo::set_province(::std::string&& value) {
  set_has_province();
  province_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.MemberInfo.Province)
}
#endif
inline void MemberInfo::set_province(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.MemberInfo.Province)
}
inline void MemberInfo::set_province(const char* value, size_t size) {
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.MemberInfo.Province)
}
inline ::std::string* MemberInfo::mutable_province() {
  set_has_province();
  // @@protoc_insertion_point(field_mutable:FromCs.MemberInfo.Province)
  return province_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MemberInfo::release_province() {
  // @@protoc_insertion_point(field_release:FromCs.MemberInfo.Province)
  clear_has_province();
  return province_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MemberInfo::set_allocated_province(::std::string* province) {
  if (province != NULL) {
    set_has_province();
  } else {
    clear_has_province();
  }
  province_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), province);
  // @@protoc_insertion_point(field_set_allocated:FromCs.MemberInfo.Province)
}

// optional string City = 12;
inline bool MemberInfo::has_city() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MemberInfo::set_has_city() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MemberInfo::clear_has_city() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MemberInfo::clear_city() {
  city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_city();
}
inline const ::std::string& MemberInfo::city() const {
  // @@protoc_insertion_point(field_get:FromCs.MemberInfo.City)
  return city_.GetNoArena();
}
inline void MemberInfo::set_city(const ::std::string& value) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.MemberInfo.City)
}
#if LANG_CXX11
inline void MemberInfo::set_city(::std::string&& value) {
  set_has_city();
  city_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.MemberInfo.City)
}
#endif
inline void MemberInfo::set_city(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.MemberInfo.City)
}
inline void MemberInfo::set_city(const char* value, size_t size) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.MemberInfo.City)
}
inline ::std::string* MemberInfo::mutable_city() {
  set_has_city();
  // @@protoc_insertion_point(field_mutable:FromCs.MemberInfo.City)
  return city_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MemberInfo::release_city() {
  // @@protoc_insertion_point(field_release:FromCs.MemberInfo.City)
  clear_has_city();
  return city_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MemberInfo::set_allocated_city(::std::string* city) {
  if (city != NULL) {
    set_has_city();
  } else {
    clear_has_city();
  }
  city_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:FromCs.MemberInfo.City)
}

// optional string Signature = 13;
inline bool MemberInfo::has_signature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MemberInfo::set_has_signature() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MemberInfo::clear_has_signature() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MemberInfo::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_signature();
}
inline const ::std::string& MemberInfo::signature() const {
  // @@protoc_insertion_point(field_get:FromCs.MemberInfo.Signature)
  return signature_.GetNoArena();
}
inline void MemberInfo::set_signature(const ::std::string& value) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.MemberInfo.Signature)
}
#if LANG_CXX11
inline void MemberInfo::set_signature(::std::string&& value) {
  set_has_signature();
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.MemberInfo.Signature)
}
#endif
inline void MemberInfo::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.MemberInfo.Signature)
}
inline void MemberInfo::set_signature(const char* value, size_t size) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.MemberInfo.Signature)
}
inline ::std::string* MemberInfo::mutable_signature() {
  set_has_signature();
  // @@protoc_insertion_point(field_mutable:FromCs.MemberInfo.Signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MemberInfo::release_signature() {
  // @@protoc_insertion_point(field_release:FromCs.MemberInfo.Signature)
  clear_has_signature();
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MemberInfo::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:FromCs.MemberInfo.Signature)
}

// optional int32 PersonalCard = 14;
inline bool MemberInfo::has_personalcard() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void MemberInfo::set_has_personalcard() {
  _has_bits_[0] |= 0x00008000u;
}
inline void MemberInfo::clear_has_personalcard() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void MemberInfo::clear_personalcard() {
  personalcard_ = 0;
  clear_has_personalcard();
}
inline ::google::protobuf::int32 MemberInfo::personalcard() const {
  // @@protoc_insertion_point(field_get:FromCs.MemberInfo.PersonalCard)
  return personalcard_;
}
inline void MemberInfo::set_personalcard(::google::protobuf::int32 value) {
  set_has_personalcard();
  personalcard_ = value;
  // @@protoc_insertion_point(field_set:FromCs.MemberInfo.PersonalCard)
}

// optional int32 VerifyFlag = 15;
inline bool MemberInfo::has_verifyflag() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void MemberInfo::set_has_verifyflag() {
  _has_bits_[0] |= 0x00010000u;
}
inline void MemberInfo::clear_has_verifyflag() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void MemberInfo::clear_verifyflag() {
  verifyflag_ = 0;
  clear_has_verifyflag();
}
inline ::google::protobuf::int32 MemberInfo::verifyflag() const {
  // @@protoc_insertion_point(field_get:FromCs.MemberInfo.VerifyFlag)
  return verifyflag_;
}
inline void MemberInfo::set_verifyflag(::google::protobuf::int32 value) {
  set_has_verifyflag();
  verifyflag_ = value;
  // @@protoc_insertion_point(field_set:FromCs.MemberInfo.VerifyFlag)
}

// optional string VerifyInfo = 16;
inline bool MemberInfo::has_verifyinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MemberInfo::set_has_verifyinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MemberInfo::clear_has_verifyinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MemberInfo::clear_verifyinfo() {
  verifyinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_verifyinfo();
}
inline const ::std::string& MemberInfo::verifyinfo() const {
  // @@protoc_insertion_point(field_get:FromCs.MemberInfo.VerifyInfo)
  return verifyinfo_.GetNoArena();
}
inline void MemberInfo::set_verifyinfo(const ::std::string& value) {
  set_has_verifyinfo();
  verifyinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.MemberInfo.VerifyInfo)
}
#if LANG_CXX11
inline void MemberInfo::set_verifyinfo(::std::string&& value) {
  set_has_verifyinfo();
  verifyinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.MemberInfo.VerifyInfo)
}
#endif
inline void MemberInfo::set_verifyinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_verifyinfo();
  verifyinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.MemberInfo.VerifyInfo)
}
inline void MemberInfo::set_verifyinfo(const char* value, size_t size) {
  set_has_verifyinfo();
  verifyinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.MemberInfo.VerifyInfo)
}
inline ::std::string* MemberInfo::mutable_verifyinfo() {
  set_has_verifyinfo();
  // @@protoc_insertion_point(field_mutable:FromCs.MemberInfo.VerifyInfo)
  return verifyinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MemberInfo::release_verifyinfo() {
  // @@protoc_insertion_point(field_release:FromCs.MemberInfo.VerifyInfo)
  clear_has_verifyinfo();
  return verifyinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MemberInfo::set_allocated_verifyinfo(::std::string* verifyinfo) {
  if (verifyinfo != NULL) {
    set_has_verifyinfo();
  } else {
    clear_has_verifyinfo();
  }
  verifyinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verifyinfo);
  // @@protoc_insertion_point(field_set_allocated:FromCs.MemberInfo.VerifyInfo)
}

// optional string Country = 17;
inline bool MemberInfo::has_country() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MemberInfo::set_has_country() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MemberInfo::clear_has_country() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MemberInfo::clear_country() {
  country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country();
}
inline const ::std::string& MemberInfo::country() const {
  // @@protoc_insertion_point(field_get:FromCs.MemberInfo.Country)
  return country_.GetNoArena();
}
inline void MemberInfo::set_country(const ::std::string& value) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.MemberInfo.Country)
}
#if LANG_CXX11
inline void MemberInfo::set_country(::std::string&& value) {
  set_has_country();
  country_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.MemberInfo.Country)
}
#endif
inline void MemberInfo::set_country(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.MemberInfo.Country)
}
inline void MemberInfo::set_country(const char* value, size_t size) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.MemberInfo.Country)
}
inline ::std::string* MemberInfo::mutable_country() {
  set_has_country();
  // @@protoc_insertion_point(field_mutable:FromCs.MemberInfo.Country)
  return country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MemberInfo::release_country() {
  // @@protoc_insertion_point(field_release:FromCs.MemberInfo.Country)
  clear_has_country();
  return country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MemberInfo::set_allocated_country(::std::string* country) {
  if (country != NULL) {
    set_has_country();
  } else {
    clear_has_country();
  }
  country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:FromCs.MemberInfo.Country)
}

// -------------------------------------------------------------------

// ECDHKey

// optional int32 NID = 1;
inline bool ECDHKey::has_nid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ECDHKey::set_has_nid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ECDHKey::clear_has_nid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ECDHKey::clear_nid() {
  nid_ = 0;
  clear_has_nid();
}
inline ::google::protobuf::int32 ECDHKey::nid() const {
  // @@protoc_insertion_point(field_get:FromCs.ECDHKey.NID)
  return nid_;
}
inline void ECDHKey::set_nid(::google::protobuf::int32 value) {
  set_has_nid();
  nid_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ECDHKey.NID)
}

// optional .FromCs.sKBuiltinBufferT Key = 2;
inline bool ECDHKey::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ECDHKey::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ECDHKey::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ECDHKey::clear_key() {
  if (key_ != NULL) key_->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_key();
}
inline const ::FromCs::sKBuiltinBufferT& ECDHKey::key() const {
  // @@protoc_insertion_point(field_get:FromCs.ECDHKey.Key)
  return key_ != NULL ? *key_
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* ECDHKey::mutable_key() {
  set_has_key();
  if (key_ == NULL) {
    key_ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.ECDHKey.Key)
  return key_;
}
inline ::FromCs::sKBuiltinBufferT* ECDHKey::release_key() {
  // @@protoc_insertion_point(field_release:FromCs.ECDHKey.Key)
  clear_has_key();
  ::FromCs::sKBuiltinBufferT* temp = key_;
  key_ = NULL;
  return temp;
}
inline void ECDHKey::set_allocated_key(::FromCs::sKBuiltinBufferT* key) {
  delete key_;
  key_ = key;
  if (key) {
    set_has_key();
  } else {
    clear_has_key();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.ECDHKey.Key)
}

// -------------------------------------------------------------------

// initKey

// optional .FromCs.sKBuiltinBufferT RandomEncryKey = 1;
inline bool initKey::has_randomencrykey() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void initKey::set_has_randomencrykey() {
  _has_bits_[0] |= 0x00000008u;
}
inline void initKey::clear_has_randomencrykey() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void initKey::clear_randomencrykey() {
  if (randomencrykey_ != NULL) randomencrykey_->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_randomencrykey();
}
inline const ::FromCs::sKBuiltinBufferT& initKey::randomencrykey() const {
  // @@protoc_insertion_point(field_get:FromCs.initKey.RandomEncryKey)
  return randomencrykey_ != NULL ? *randomencrykey_
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* initKey::mutable_randomencrykey() {
  set_has_randomencrykey();
  if (randomencrykey_ == NULL) {
    randomencrykey_ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.initKey.RandomEncryKey)
  return randomencrykey_;
}
inline ::FromCs::sKBuiltinBufferT* initKey::release_randomencrykey() {
  // @@protoc_insertion_point(field_release:FromCs.initKey.RandomEncryKey)
  clear_has_randomencrykey();
  ::FromCs::sKBuiltinBufferT* temp = randomencrykey_;
  randomencrykey_ = NULL;
  return temp;
}
inline void initKey::set_allocated_randomencrykey(::FromCs::sKBuiltinBufferT* randomencrykey) {
  delete randomencrykey_;
  randomencrykey_ = randomencrykey;
  if (randomencrykey) {
    set_has_randomencrykey();
  } else {
    clear_has_randomencrykey();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.initKey.RandomEncryKey)
}

// optional .FromCs.ECDHKey CliPubECDHKey = 2;
inline bool initKey::has_clipubecdhkey() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void initKey::set_has_clipubecdhkey() {
  _has_bits_[0] |= 0x00000010u;
}
inline void initKey::clear_has_clipubecdhkey() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void initKey::clear_clipubecdhkey() {
  if (clipubecdhkey_ != NULL) clipubecdhkey_->::FromCs::ECDHKey::Clear();
  clear_has_clipubecdhkey();
}
inline const ::FromCs::ECDHKey& initKey::clipubecdhkey() const {
  // @@protoc_insertion_point(field_get:FromCs.initKey.CliPubECDHKey)
  return clipubecdhkey_ != NULL ? *clipubecdhkey_
                         : *::FromCs::ECDHKey::internal_default_instance();
}
inline ::FromCs::ECDHKey* initKey::mutable_clipubecdhkey() {
  set_has_clipubecdhkey();
  if (clipubecdhkey_ == NULL) {
    clipubecdhkey_ = new ::FromCs::ECDHKey;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.initKey.CliPubECDHKey)
  return clipubecdhkey_;
}
inline ::FromCs::ECDHKey* initKey::release_clipubecdhkey() {
  // @@protoc_insertion_point(field_release:FromCs.initKey.CliPubECDHKey)
  clear_has_clipubecdhkey();
  ::FromCs::ECDHKey* temp = clipubecdhkey_;
  clipubecdhkey_ = NULL;
  return temp;
}
inline void initKey::set_allocated_clipubecdhkey(::FromCs::ECDHKey* clipubecdhkey) {
  delete clipubecdhkey_;
  clipubecdhkey_ = clipubecdhkey;
  if (clipubecdhkey) {
    set_has_clipubecdhkey();
  } else {
    clear_has_clipubecdhkey();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.initKey.CliPubECDHKey)
}

// optional string Account = 3;
inline bool initKey::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void initKey::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void initKey::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void initKey::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account();
}
inline const ::std::string& initKey::account() const {
  // @@protoc_insertion_point(field_get:FromCs.initKey.Account)
  return account_.GetNoArena();
}
inline void initKey::set_account(const ::std::string& value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.initKey.Account)
}
#if LANG_CXX11
inline void initKey::set_account(::std::string&& value) {
  set_has_account();
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.initKey.Account)
}
#endif
inline void initKey::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.initKey.Account)
}
inline void initKey::set_account(const char* value, size_t size) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.initKey.Account)
}
inline ::std::string* initKey::mutable_account() {
  set_has_account();
  // @@protoc_insertion_point(field_mutable:FromCs.initKey.Account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* initKey::release_account() {
  // @@protoc_insertion_point(field_release:FromCs.initKey.Account)
  clear_has_account();
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void initKey::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    set_has_account();
  } else {
    clear_has_account();
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:FromCs.initKey.Account)
}

// optional string Pwd = 4;
inline bool initKey::has_pwd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void initKey::set_has_pwd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void initKey::clear_has_pwd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void initKey::clear_pwd() {
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pwd();
}
inline const ::std::string& initKey::pwd() const {
  // @@protoc_insertion_point(field_get:FromCs.initKey.Pwd)
  return pwd_.GetNoArena();
}
inline void initKey::set_pwd(const ::std::string& value) {
  set_has_pwd();
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.initKey.Pwd)
}
#if LANG_CXX11
inline void initKey::set_pwd(::std::string&& value) {
  set_has_pwd();
  pwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.initKey.Pwd)
}
#endif
inline void initKey::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pwd();
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.initKey.Pwd)
}
inline void initKey::set_pwd(const char* value, size_t size) {
  set_has_pwd();
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.initKey.Pwd)
}
inline ::std::string* initKey::mutable_pwd() {
  set_has_pwd();
  // @@protoc_insertion_point(field_mutable:FromCs.initKey.Pwd)
  return pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* initKey::release_pwd() {
  // @@protoc_insertion_point(field_release:FromCs.initKey.Pwd)
  clear_has_pwd();
  return pwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void initKey::set_allocated_pwd(::std::string* pwd) {
  if (pwd != NULL) {
    set_has_pwd();
  } else {
    clear_has_pwd();
  }
  pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd);
  // @@protoc_insertion_point(field_set_allocated:FromCs.initKey.Pwd)
}

// optional string Pwd2 = 5;
inline bool initKey::has_pwd2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void initKey::set_has_pwd2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void initKey::clear_has_pwd2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void initKey::clear_pwd2() {
  pwd2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pwd2();
}
inline const ::std::string& initKey::pwd2() const {
  // @@protoc_insertion_point(field_get:FromCs.initKey.Pwd2)
  return pwd2_.GetNoArena();
}
inline void initKey::set_pwd2(const ::std::string& value) {
  set_has_pwd2();
  pwd2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.initKey.Pwd2)
}
#if LANG_CXX11
inline void initKey::set_pwd2(::std::string&& value) {
  set_has_pwd2();
  pwd2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.initKey.Pwd2)
}
#endif
inline void initKey::set_pwd2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pwd2();
  pwd2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.initKey.Pwd2)
}
inline void initKey::set_pwd2(const char* value, size_t size) {
  set_has_pwd2();
  pwd2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.initKey.Pwd2)
}
inline ::std::string* initKey::mutable_pwd2() {
  set_has_pwd2();
  // @@protoc_insertion_point(field_mutable:FromCs.initKey.Pwd2)
  return pwd2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* initKey::release_pwd2() {
  // @@protoc_insertion_point(field_release:FromCs.initKey.Pwd2)
  clear_has_pwd2();
  return pwd2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void initKey::set_allocated_pwd2(::std::string* pwd2) {
  if (pwd2 != NULL) {
    set_has_pwd2();
  } else {
    clear_has_pwd2();
  }
  pwd2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd2);
  // @@protoc_insertion_point(field_set_allocated:FromCs.initKey.Pwd2)
}

// -------------------------------------------------------------------

// AutoAuthRsaReqData

// optional .FromCs.sKBuiltinBufferT AesEncryptKey = 1;
inline bool AutoAuthRsaReqData::has_aesencryptkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AutoAuthRsaReqData::set_has_aesencryptkey() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AutoAuthRsaReqData::clear_has_aesencryptkey() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AutoAuthRsaReqData::clear_aesencryptkey() {
  if (aesencryptkey_ != NULL) aesencryptkey_->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_aesencryptkey();
}
inline const ::FromCs::sKBuiltinBufferT& AutoAuthRsaReqData::aesencryptkey() const {
  // @@protoc_insertion_point(field_get:FromCs.AutoAuthRsaReqData.AesEncryptKey)
  return aesencryptkey_ != NULL ? *aesencryptkey_
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* AutoAuthRsaReqData::mutable_aesencryptkey() {
  set_has_aesencryptkey();
  if (aesencryptkey_ == NULL) {
    aesencryptkey_ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.AutoAuthRsaReqData.AesEncryptKey)
  return aesencryptkey_;
}
inline ::FromCs::sKBuiltinBufferT* AutoAuthRsaReqData::release_aesencryptkey() {
  // @@protoc_insertion_point(field_release:FromCs.AutoAuthRsaReqData.AesEncryptKey)
  clear_has_aesencryptkey();
  ::FromCs::sKBuiltinBufferT* temp = aesencryptkey_;
  aesencryptkey_ = NULL;
  return temp;
}
inline void AutoAuthRsaReqData::set_allocated_aesencryptkey(::FromCs::sKBuiltinBufferT* aesencryptkey) {
  delete aesencryptkey_;
  aesencryptkey_ = aesencryptkey;
  if (aesencryptkey) {
    set_has_aesencryptkey();
  } else {
    clear_has_aesencryptkey();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.AutoAuthRsaReqData.AesEncryptKey)
}

// optional .FromCs.ECDHKey CliPubECDHKey = 2;
inline bool AutoAuthRsaReqData::has_clipubecdhkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AutoAuthRsaReqData::set_has_clipubecdhkey() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AutoAuthRsaReqData::clear_has_clipubecdhkey() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AutoAuthRsaReqData::clear_clipubecdhkey() {
  if (clipubecdhkey_ != NULL) clipubecdhkey_->::FromCs::ECDHKey::Clear();
  clear_has_clipubecdhkey();
}
inline const ::FromCs::ECDHKey& AutoAuthRsaReqData::clipubecdhkey() const {
  // @@protoc_insertion_point(field_get:FromCs.AutoAuthRsaReqData.CliPubECDHKey)
  return clipubecdhkey_ != NULL ? *clipubecdhkey_
                         : *::FromCs::ECDHKey::internal_default_instance();
}
inline ::FromCs::ECDHKey* AutoAuthRsaReqData::mutable_clipubecdhkey() {
  set_has_clipubecdhkey();
  if (clipubecdhkey_ == NULL) {
    clipubecdhkey_ = new ::FromCs::ECDHKey;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.AutoAuthRsaReqData.CliPubECDHKey)
  return clipubecdhkey_;
}
inline ::FromCs::ECDHKey* AutoAuthRsaReqData::release_clipubecdhkey() {
  // @@protoc_insertion_point(field_release:FromCs.AutoAuthRsaReqData.CliPubECDHKey)
  clear_has_clipubecdhkey();
  ::FromCs::ECDHKey* temp = clipubecdhkey_;
  clipubecdhkey_ = NULL;
  return temp;
}
inline void AutoAuthRsaReqData::set_allocated_clipubecdhkey(::FromCs::ECDHKey* clipubecdhkey) {
  delete clipubecdhkey_;
  clipubecdhkey_ = clipubecdhkey;
  if (clipubecdhkey) {
    set_has_clipubecdhkey();
  } else {
    clear_has_clipubecdhkey();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.AutoAuthRsaReqData.CliPubECDHKey)
}

// -------------------------------------------------------------------

// DataItem

// optional string Str1 = 1;
inline bool DataItem::has_str1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataItem::set_has_str1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataItem::clear_has_str1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataItem::clear_str1() {
  str1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_str1();
}
inline const ::std::string& DataItem::str1() const {
  // @@protoc_insertion_point(field_get:FromCs.DataItem.Str1)
  return str1_.GetNoArena();
}
inline void DataItem::set_str1(const ::std::string& value) {
  set_has_str1();
  str1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.DataItem.Str1)
}
#if LANG_CXX11
inline void DataItem::set_str1(::std::string&& value) {
  set_has_str1();
  str1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.DataItem.Str1)
}
#endif
inline void DataItem::set_str1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_str1();
  str1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.DataItem.Str1)
}
inline void DataItem::set_str1(const char* value, size_t size) {
  set_has_str1();
  str1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.DataItem.Str1)
}
inline ::std::string* DataItem::mutable_str1() {
  set_has_str1();
  // @@protoc_insertion_point(field_mutable:FromCs.DataItem.Str1)
  return str1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataItem::release_str1() {
  // @@protoc_insertion_point(field_release:FromCs.DataItem.Str1)
  clear_has_str1();
  return str1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataItem::set_allocated_str1(::std::string* str1) {
  if (str1 != NULL) {
    set_has_str1();
  } else {
    clear_has_str1();
  }
  str1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str1);
  // @@protoc_insertion_point(field_set_allocated:FromCs.DataItem.Str1)
}

// optional string Str2 = 2;
inline bool DataItem::has_str2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataItem::set_has_str2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataItem::clear_has_str2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataItem::clear_str2() {
  str2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_str2();
}
inline const ::std::string& DataItem::str2() const {
  // @@protoc_insertion_point(field_get:FromCs.DataItem.Str2)
  return str2_.GetNoArena();
}
inline void DataItem::set_str2(const ::std::string& value) {
  set_has_str2();
  str2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.DataItem.Str2)
}
#if LANG_CXX11
inline void DataItem::set_str2(::std::string&& value) {
  set_has_str2();
  str2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.DataItem.Str2)
}
#endif
inline void DataItem::set_str2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_str2();
  str2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.DataItem.Str2)
}
inline void DataItem::set_str2(const char* value, size_t size) {
  set_has_str2();
  str2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.DataItem.Str2)
}
inline ::std::string* DataItem::mutable_str2() {
  set_has_str2();
  // @@protoc_insertion_point(field_mutable:FromCs.DataItem.Str2)
  return str2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataItem::release_str2() {
  // @@protoc_insertion_point(field_release:FromCs.DataItem.Str2)
  clear_has_str2();
  return str2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataItem::set_allocated_str2(::std::string* str2) {
  if (str2 != NULL) {
    set_has_str2();
  } else {
    clear_has_str2();
  }
  str2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str2);
  // @@protoc_insertion_point(field_set_allocated:FromCs.DataItem.Str2)
}

// optional string Str3 = 3;
inline bool DataItem::has_str3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataItem::set_has_str3() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DataItem::clear_has_str3() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DataItem::clear_str3() {
  str3_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_str3();
}
inline const ::std::string& DataItem::str3() const {
  // @@protoc_insertion_point(field_get:FromCs.DataItem.Str3)
  return str3_.GetNoArena();
}
inline void DataItem::set_str3(const ::std::string& value) {
  set_has_str3();
  str3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.DataItem.Str3)
}
#if LANG_CXX11
inline void DataItem::set_str3(::std::string&& value) {
  set_has_str3();
  str3_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.DataItem.Str3)
}
#endif
inline void DataItem::set_str3(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_str3();
  str3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.DataItem.Str3)
}
inline void DataItem::set_str3(const char* value, size_t size) {
  set_has_str3();
  str3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.DataItem.Str3)
}
inline ::std::string* DataItem::mutable_str3() {
  set_has_str3();
  // @@protoc_insertion_point(field_mutable:FromCs.DataItem.Str3)
  return str3_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataItem::release_str3() {
  // @@protoc_insertion_point(field_release:FromCs.DataItem.Str3)
  clear_has_str3();
  return str3_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataItem::set_allocated_str3(::std::string* str3) {
  if (str3 != NULL) {
    set_has_str3();
  } else {
    clear_has_str3();
  }
  str3_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str3);
  // @@protoc_insertion_point(field_set_allocated:FromCs.DataItem.Str3)
}

// optional .FromCs.sKBuiltinstringT KSid = 4;
inline bool DataItem::has_ksid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DataItem::set_has_ksid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DataItem::clear_has_ksid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DataItem::clear_ksid() {
  if (ksid_ != NULL) ksid_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_ksid();
}
inline const ::FromCs::sKBuiltinstringT& DataItem::ksid() const {
  // @@protoc_insertion_point(field_get:FromCs.DataItem.KSid)
  return ksid_ != NULL ? *ksid_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* DataItem::mutable_ksid() {
  set_has_ksid();
  if (ksid_ == NULL) {
    ksid_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.DataItem.KSid)
  return ksid_;
}
inline ::FromCs::sKBuiltinstringT* DataItem::release_ksid() {
  // @@protoc_insertion_point(field_release:FromCs.DataItem.KSid)
  clear_has_ksid();
  ::FromCs::sKBuiltinstringT* temp = ksid_;
  ksid_ = NULL;
  return temp;
}
inline void DataItem::set_allocated_ksid(::FromCs::sKBuiltinstringT* ksid) {
  delete ksid_;
  ksid_ = ksid;
  if (ksid) {
    set_has_ksid();
  } else {
    clear_has_ksid();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.DataItem.KSid)
}

// -------------------------------------------------------------------

// DataItem2

// optional string Str1 = 1;
inline bool DataItem2::has_str1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataItem2::set_has_str1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataItem2::clear_has_str1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataItem2::clear_str1() {
  str1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_str1();
}
inline const ::std::string& DataItem2::str1() const {
  // @@protoc_insertion_point(field_get:FromCs.DataItem2.Str1)
  return str1_.GetNoArena();
}
inline void DataItem2::set_str1(const ::std::string& value) {
  set_has_str1();
  str1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.DataItem2.Str1)
}
#if LANG_CXX11
inline void DataItem2::set_str1(::std::string&& value) {
  set_has_str1();
  str1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.DataItem2.Str1)
}
#endif
inline void DataItem2::set_str1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_str1();
  str1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.DataItem2.Str1)
}
inline void DataItem2::set_str1(const char* value, size_t size) {
  set_has_str1();
  str1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.DataItem2.Str1)
}
inline ::std::string* DataItem2::mutable_str1() {
  set_has_str1();
  // @@protoc_insertion_point(field_mutable:FromCs.DataItem2.Str1)
  return str1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataItem2::release_str1() {
  // @@protoc_insertion_point(field_release:FromCs.DataItem2.Str1)
  clear_has_str1();
  return str1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataItem2::set_allocated_str1(::std::string* str1) {
  if (str1 != NULL) {
    set_has_str1();
  } else {
    clear_has_str1();
  }
  str1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str1);
  // @@protoc_insertion_point(field_set_allocated:FromCs.DataItem2.Str1)
}

// optional string Str2 = 2;
inline bool DataItem2::has_str2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataItem2::set_has_str2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataItem2::clear_has_str2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataItem2::clear_str2() {
  str2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_str2();
}
inline const ::std::string& DataItem2::str2() const {
  // @@protoc_insertion_point(field_get:FromCs.DataItem2.Str2)
  return str2_.GetNoArena();
}
inline void DataItem2::set_str2(const ::std::string& value) {
  set_has_str2();
  str2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.DataItem2.Str2)
}
#if LANG_CXX11
inline void DataItem2::set_str2(::std::string&& value) {
  set_has_str2();
  str2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.DataItem2.Str2)
}
#endif
inline void DataItem2::set_str2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_str2();
  str2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.DataItem2.Str2)
}
inline void DataItem2::set_str2(const char* value, size_t size) {
  set_has_str2();
  str2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.DataItem2.Str2)
}
inline ::std::string* DataItem2::mutable_str2() {
  set_has_str2();
  // @@protoc_insertion_point(field_mutable:FromCs.DataItem2.Str2)
  return str2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataItem2::release_str2() {
  // @@protoc_insertion_point(field_release:FromCs.DataItem2.Str2)
  clear_has_str2();
  return str2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataItem2::set_allocated_str2(::std::string* str2) {
  if (str2 != NULL) {
    set_has_str2();
  } else {
    clear_has_str2();
  }
  str2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str2);
  // @@protoc_insertion_point(field_set_allocated:FromCs.DataItem2.Str2)
}

// -------------------------------------------------------------------

// ExtData

// optional .FromCs.sKBuiltinBufferT Buffer1 = 1;
inline bool ExtData::has_buffer1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExtData::set_has_buffer1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExtData::clear_has_buffer1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExtData::clear_buffer1() {
  if (buffer1_ != NULL) buffer1_->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_buffer1();
}
inline const ::FromCs::sKBuiltinBufferT& ExtData::buffer1() const {
  // @@protoc_insertion_point(field_get:FromCs.ExtData.Buffer1)
  return buffer1_ != NULL ? *buffer1_
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* ExtData::mutable_buffer1() {
  set_has_buffer1();
  if (buffer1_ == NULL) {
    buffer1_ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.ExtData.Buffer1)
  return buffer1_;
}
inline ::FromCs::sKBuiltinBufferT* ExtData::release_buffer1() {
  // @@protoc_insertion_point(field_release:FromCs.ExtData.Buffer1)
  clear_has_buffer1();
  ::FromCs::sKBuiltinBufferT* temp = buffer1_;
  buffer1_ = NULL;
  return temp;
}
inline void ExtData::set_allocated_buffer1(::FromCs::sKBuiltinBufferT* buffer1) {
  delete buffer1_;
  buffer1_ = buffer1;
  if (buffer1) {
    set_has_buffer1();
  } else {
    clear_has_buffer1();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.ExtData.Buffer1)
}

// optional .FromCs.kSidData KSid = 2;
inline bool ExtData::has_ksid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExtData::set_has_ksid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ExtData::clear_has_ksid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ExtData::clear_ksid() {
  if (ksid_ != NULL) ksid_->::FromCs::kSidData::Clear();
  clear_has_ksid();
}
inline const ::FromCs::kSidData& ExtData::ksid() const {
  // @@protoc_insertion_point(field_get:FromCs.ExtData.KSid)
  return ksid_ != NULL ? *ksid_
                         : *::FromCs::kSidData::internal_default_instance();
}
inline ::FromCs::kSidData* ExtData::mutable_ksid() {
  set_has_ksid();
  if (ksid_ == NULL) {
    ksid_ = new ::FromCs::kSidData;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.ExtData.KSid)
  return ksid_;
}
inline ::FromCs::kSidData* ExtData::release_ksid() {
  // @@protoc_insertion_point(field_release:FromCs.ExtData.KSid)
  clear_has_ksid();
  ::FromCs::kSidData* temp = ksid_;
  ksid_ = NULL;
  return temp;
}
inline void ExtData::set_allocated_ksid(::FromCs::kSidData* ksid) {
  delete ksid_;
  ksid_ = ksid;
  if (ksid) {
    set_has_ksid();
  } else {
    clear_has_ksid();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.ExtData.KSid)
}

// optional .FromCs.sKBuiltinBufferT Data3 = 3;
inline bool ExtData::has_data3() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ExtData::set_has_data3() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ExtData::clear_has_data3() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ExtData::clear_data3() {
  if (data3_ != NULL) data3_->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_data3();
}
inline const ::FromCs::sKBuiltinBufferT& ExtData::data3() const {
  // @@protoc_insertion_point(field_get:FromCs.ExtData.Data3)
  return data3_ != NULL ? *data3_
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* ExtData::mutable_data3() {
  set_has_data3();
  if (data3_ == NULL) {
    data3_ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.ExtData.Data3)
  return data3_;
}
inline ::FromCs::sKBuiltinBufferT* ExtData::release_data3() {
  // @@protoc_insertion_point(field_release:FromCs.ExtData.Data3)
  clear_has_data3();
  ::FromCs::sKBuiltinBufferT* temp = data3_;
  data3_ = NULL;
  return temp;
}
inline void ExtData::set_allocated_data3(::FromCs::sKBuiltinBufferT* data3) {
  delete data3_;
  data3_ = data3;
  if (data3) {
    set_has_data3();
  } else {
    clear_has_data3();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.ExtData.Data3)
}

// optional .FromCs.sKBuiltinBufferT Buffer4 = 4;
inline bool ExtData::has_buffer4() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ExtData::set_has_buffer4() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ExtData::clear_has_buffer4() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ExtData::clear_buffer4() {
  if (buffer4_ != NULL) buffer4_->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_buffer4();
}
inline const ::FromCs::sKBuiltinBufferT& ExtData::buffer4() const {
  // @@protoc_insertion_point(field_get:FromCs.ExtData.Buffer4)
  return buffer4_ != NULL ? *buffer4_
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* ExtData::mutable_buffer4() {
  set_has_buffer4();
  if (buffer4_ == NULL) {
    buffer4_ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.ExtData.Buffer4)
  return buffer4_;
}
inline ::FromCs::sKBuiltinBufferT* ExtData::release_buffer4() {
  // @@protoc_insertion_point(field_release:FromCs.ExtData.Buffer4)
  clear_has_buffer4();
  ::FromCs::sKBuiltinBufferT* temp = buffer4_;
  buffer4_ = NULL;
  return temp;
}
inline void ExtData::set_allocated_buffer4(::FromCs::sKBuiltinBufferT* buffer4) {
  delete buffer4_;
  buffer4_ = buffer4;
  if (buffer4) {
    set_has_buffer4();
  } else {
    clear_has_buffer4();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.ExtData.Buffer4)
}

// optional .FromCs.sKBuiltinBufferT Buffer5 = 5;
inline bool ExtData::has_buffer5() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ExtData::set_has_buffer5() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ExtData::clear_has_buffer5() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ExtData::clear_buffer5() {
  if (buffer5_ != NULL) buffer5_->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_buffer5();
}
inline const ::FromCs::sKBuiltinBufferT& ExtData::buffer5() const {
  // @@protoc_insertion_point(field_get:FromCs.ExtData.Buffer5)
  return buffer5_ != NULL ? *buffer5_
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* ExtData::mutable_buffer5() {
  set_has_buffer5();
  if (buffer5_ == NULL) {
    buffer5_ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.ExtData.Buffer5)
  return buffer5_;
}
inline ::FromCs::sKBuiltinBufferT* ExtData::release_buffer5() {
  // @@protoc_insertion_point(field_release:FromCs.ExtData.Buffer5)
  clear_has_buffer5();
  ::FromCs::sKBuiltinBufferT* temp = buffer5_;
  buffer5_ = NULL;
  return temp;
}
inline void ExtData::set_allocated_buffer5(::FromCs::sKBuiltinBufferT* buffer5) {
  delete buffer5_;
  buffer5_ = buffer5;
  if (buffer5) {
    set_has_buffer5();
  } else {
    clear_has_buffer5();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.ExtData.Buffer5)
}

// optional int32 Int6 = 6;
inline bool ExtData::has_int6() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ExtData::set_has_int6() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ExtData::clear_has_int6() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ExtData::clear_int6() {
  int6_ = 0;
  clear_has_int6();
}
inline ::google::protobuf::int32 ExtData::int6() const {
  // @@protoc_insertion_point(field_get:FromCs.ExtData.Int6)
  return int6_;
}
inline void ExtData::set_int6(::google::protobuf::int32 value) {
  set_has_int6();
  int6_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ExtData.Int6)
}

// optional string Str7 = 7;
inline bool ExtData::has_str7() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExtData::set_has_str7() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExtData::clear_has_str7() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExtData::clear_str7() {
  str7_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_str7();
}
inline const ::std::string& ExtData::str7() const {
  // @@protoc_insertion_point(field_get:FromCs.ExtData.Str7)
  return str7_.GetNoArena();
}
inline void ExtData::set_str7(const ::std::string& value) {
  set_has_str7();
  str7_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ExtData.Str7)
}
#if LANG_CXX11
inline void ExtData::set_str7(::std::string&& value) {
  set_has_str7();
  str7_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ExtData.Str7)
}
#endif
inline void ExtData::set_str7(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_str7();
  str7_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ExtData.Str7)
}
inline void ExtData::set_str7(const char* value, size_t size) {
  set_has_str7();
  str7_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ExtData.Str7)
}
inline ::std::string* ExtData::mutable_str7() {
  set_has_str7();
  // @@protoc_insertion_point(field_mutable:FromCs.ExtData.Str7)
  return str7_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExtData::release_str7() {
  // @@protoc_insertion_point(field_release:FromCs.ExtData.Str7)
  clear_has_str7();
  return str7_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExtData::set_allocated_str7(::std::string* str7) {
  if (str7 != NULL) {
    set_has_str7();
  } else {
    clear_has_str7();
  }
  str7_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str7);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ExtData.Str7)
}

// -------------------------------------------------------------------

// kSidData

// optional string Str1 = 1;
inline bool kSidData::has_str1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void kSidData::set_has_str1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void kSidData::clear_has_str1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void kSidData::clear_str1() {
  str1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_str1();
}
inline const ::std::string& kSidData::str1() const {
  // @@protoc_insertion_point(field_get:FromCs.kSidData.Str1)
  return str1_.GetNoArena();
}
inline void kSidData::set_str1(const ::std::string& value) {
  set_has_str1();
  str1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.kSidData.Str1)
}
#if LANG_CXX11
inline void kSidData::set_str1(::std::string&& value) {
  set_has_str1();
  str1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.kSidData.Str1)
}
#endif
inline void kSidData::set_str1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_str1();
  str1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.kSidData.Str1)
}
inline void kSidData::set_str1(const char* value, size_t size) {
  set_has_str1();
  str1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.kSidData.Str1)
}
inline ::std::string* kSidData::mutable_str1() {
  set_has_str1();
  // @@protoc_insertion_point(field_mutable:FromCs.kSidData.Str1)
  return str1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* kSidData::release_str1() {
  // @@protoc_insertion_point(field_release:FromCs.kSidData.Str1)
  clear_has_str1();
  return str1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void kSidData::set_allocated_str1(::std::string* str1) {
  if (str1 != NULL) {
    set_has_str1();
  } else {
    clear_has_str1();
  }
  str1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str1);
  // @@protoc_insertion_point(field_set_allocated:FromCs.kSidData.Str1)
}

// optional string KSid = 2;
inline bool kSidData::has_ksid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void kSidData::set_has_ksid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void kSidData::clear_has_ksid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void kSidData::clear_ksid() {
  ksid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ksid();
}
inline const ::std::string& kSidData::ksid() const {
  // @@protoc_insertion_point(field_get:FromCs.kSidData.KSid)
  return ksid_.GetNoArena();
}
inline void kSidData::set_ksid(const ::std::string& value) {
  set_has_ksid();
  ksid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.kSidData.KSid)
}
#if LANG_CXX11
inline void kSidData::set_ksid(::std::string&& value) {
  set_has_ksid();
  ksid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.kSidData.KSid)
}
#endif
inline void kSidData::set_ksid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ksid();
  ksid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.kSidData.KSid)
}
inline void kSidData::set_ksid(const char* value, size_t size) {
  set_has_ksid();
  ksid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.kSidData.KSid)
}
inline ::std::string* kSidData::mutable_ksid() {
  set_has_ksid();
  // @@protoc_insertion_point(field_mutable:FromCs.kSidData.KSid)
  return ksid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* kSidData::release_ksid() {
  // @@protoc_insertion_point(field_release:FromCs.kSidData.KSid)
  clear_has_ksid();
  return ksid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void kSidData::set_allocated_ksid(::std::string* ksid) {
  if (ksid != NULL) {
    set_has_ksid();
  } else {
    clear_has_ksid();
  }
  ksid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ksid);
  // @@protoc_insertion_point(field_set_allocated:FromCs.kSidData.KSid)
}

// optional string Str3 = 3;
inline bool kSidData::has_str3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void kSidData::set_has_str3() {
  _has_bits_[0] |= 0x00000004u;
}
inline void kSidData::clear_has_str3() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void kSidData::clear_str3() {
  str3_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_str3();
}
inline const ::std::string& kSidData::str3() const {
  // @@protoc_insertion_point(field_get:FromCs.kSidData.Str3)
  return str3_.GetNoArena();
}
inline void kSidData::set_str3(const ::std::string& value) {
  set_has_str3();
  str3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.kSidData.Str3)
}
#if LANG_CXX11
inline void kSidData::set_str3(::std::string&& value) {
  set_has_str3();
  str3_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.kSidData.Str3)
}
#endif
inline void kSidData::set_str3(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_str3();
  str3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.kSidData.Str3)
}
inline void kSidData::set_str3(const char* value, size_t size) {
  set_has_str3();
  str3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.kSidData.Str3)
}
inline ::std::string* kSidData::mutable_str3() {
  set_has_str3();
  // @@protoc_insertion_point(field_mutable:FromCs.kSidData.Str3)
  return str3_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* kSidData::release_str3() {
  // @@protoc_insertion_point(field_release:FromCs.kSidData.Str3)
  clear_has_str3();
  return str3_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void kSidData::set_allocated_str3(::std::string* str3) {
  if (str3 != NULL) {
    set_has_str3();
  } else {
    clear_has_str3();
  }
  str3_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str3);
  // @@protoc_insertion_point(field_set_allocated:FromCs.kSidData.Str3)
}

// optional .FromCs.sKBuiltinBufferT ImgBuf = 4;
inline bool kSidData::has_imgbuf() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void kSidData::set_has_imgbuf() {
  _has_bits_[0] |= 0x00000008u;
}
inline void kSidData::clear_has_imgbuf() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void kSidData::clear_imgbuf() {
  if (imgbuf_ != NULL) imgbuf_->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_imgbuf();
}
inline const ::FromCs::sKBuiltinBufferT& kSidData::imgbuf() const {
  // @@protoc_insertion_point(field_get:FromCs.kSidData.ImgBuf)
  return imgbuf_ != NULL ? *imgbuf_
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* kSidData::mutable_imgbuf() {
  set_has_imgbuf();
  if (imgbuf_ == NULL) {
    imgbuf_ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.kSidData.ImgBuf)
  return imgbuf_;
}
inline ::FromCs::sKBuiltinBufferT* kSidData::release_imgbuf() {
  // @@protoc_insertion_point(field_release:FromCs.kSidData.ImgBuf)
  clear_has_imgbuf();
  ::FromCs::sKBuiltinBufferT* temp = imgbuf_;
  imgbuf_ = NULL;
  return temp;
}
inline void kSidData::set_allocated_imgbuf(::FromCs::sKBuiltinBufferT* imgbuf) {
  delete imgbuf_;
  imgbuf_ = imgbuf;
  if (imgbuf) {
    set_has_imgbuf();
  } else {
    clear_has_imgbuf();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.kSidData.ImgBuf)
}

// -------------------------------------------------------------------

// imgPic

// optional string Data = 1;
inline bool imgPic::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void imgPic::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void imgPic::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void imgPic::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& imgPic::data() const {
  // @@protoc_insertion_point(field_get:FromCs.imgPic.Data)
  return data_.GetNoArena();
}
inline void imgPic::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.imgPic.Data)
}
#if LANG_CXX11
inline void imgPic::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.imgPic.Data)
}
#endif
inline void imgPic::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.imgPic.Data)
}
inline void imgPic::set_data(const char* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.imgPic.Data)
}
inline ::std::string* imgPic::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:FromCs.imgPic.Data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* imgPic::release_data() {
  // @@protoc_insertion_point(field_release:FromCs.imgPic.Data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void imgPic::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:FromCs.imgPic.Data)
}

// optional .FromCs.sKBuiltinBufferT VerifyBuff = 2;
inline bool imgPic::has_verifybuff() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void imgPic::set_has_verifybuff() {
  _has_bits_[0] |= 0x00000002u;
}
inline void imgPic::clear_has_verifybuff() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void imgPic::clear_verifybuff() {
  if (verifybuff_ != NULL) verifybuff_->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_verifybuff();
}
inline const ::FromCs::sKBuiltinBufferT& imgPic::verifybuff() const {
  // @@protoc_insertion_point(field_get:FromCs.imgPic.VerifyBuff)
  return verifybuff_ != NULL ? *verifybuff_
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* imgPic::mutable_verifybuff() {
  set_has_verifybuff();
  if (verifybuff_ == NULL) {
    verifybuff_ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.imgPic.VerifyBuff)
  return verifybuff_;
}
inline ::FromCs::sKBuiltinBufferT* imgPic::release_verifybuff() {
  // @@protoc_insertion_point(field_release:FromCs.imgPic.VerifyBuff)
  clear_has_verifybuff();
  ::FromCs::sKBuiltinBufferT* temp = verifybuff_;
  verifybuff_ = NULL;
  return temp;
}
inline void imgPic::set_allocated_verifybuff(::FromCs::sKBuiltinBufferT* verifybuff) {
  delete verifybuff_;
  verifybuff_ = verifybuff;
  if (verifybuff) {
    set_has_verifybuff();
  } else {
    clear_has_verifybuff();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.imgPic.VerifyBuff)
}

// -------------------------------------------------------------------

// ShowStyleKey

// optional int32 KeyNumb = 1;
inline bool ShowStyleKey::has_keynumb() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShowStyleKey::set_has_keynumb() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShowStyleKey::clear_has_keynumb() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShowStyleKey::clear_keynumb() {
  keynumb_ = 0;
  clear_has_keynumb();
}
inline ::google::protobuf::int32 ShowStyleKey::keynumb() const {
  // @@protoc_insertion_point(field_get:FromCs.ShowStyleKey.KeyNumb)
  return keynumb_;
}
inline void ShowStyleKey::set_keynumb(::google::protobuf::int32 value) {
  set_has_keynumb();
  keynumb_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ShowStyleKey.KeyNumb)
}

// optional .FromCs.sKBuiltinBufferT key_ = 2;
inline bool ShowStyleKey::has_key_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShowStyleKey::set_has_key_() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShowStyleKey::clear_has_key_() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShowStyleKey::clear_key_() {
  if (key__ != NULL) key__->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_key_();
}
inline const ::FromCs::sKBuiltinBufferT& ShowStyleKey::key_() const {
  // @@protoc_insertion_point(field_get:FromCs.ShowStyleKey.key_)
  return key__ != NULL ? *key__
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* ShowStyleKey::mutable_key_() {
  set_has_key_();
  if (key__ == NULL) {
    key__ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.ShowStyleKey.key_)
  return key__;
}
inline ::FromCs::sKBuiltinBufferT* ShowStyleKey::release_key_() {
  // @@protoc_insertion_point(field_release:FromCs.ShowStyleKey.key_)
  clear_has_key_();
  ::FromCs::sKBuiltinBufferT* temp = key__;
  key__ = NULL;
  return temp;
}
inline void ShowStyleKey::set_allocated_key_(::FromCs::sKBuiltinBufferT* key_) {
  delete key__;
  key__ = key_;
  if (key_) {
    set_has_key_();
  } else {
    clear_has_key_();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.ShowStyleKey.key_)
}

// -------------------------------------------------------------------

// StyleKeyItem

// optional int32 Int1 = 1;
inline bool StyleKeyItem::has_int1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StyleKeyItem::set_has_int1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StyleKeyItem::clear_has_int1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StyleKeyItem::clear_int1() {
  int1_ = 0;
  clear_has_int1();
}
inline ::google::protobuf::int32 StyleKeyItem::int1() const {
  // @@protoc_insertion_point(field_get:FromCs.StyleKeyItem.Int1)
  return int1_;
}
inline void StyleKeyItem::set_int1(::google::protobuf::int32 value) {
  set_has_int1();
  int1_ = value;
  // @@protoc_insertion_point(field_set:FromCs.StyleKeyItem.Int1)
}

// optional string Str2 = 2;
inline bool StyleKeyItem::has_str2() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StyleKeyItem::set_has_str2() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StyleKeyItem::clear_has_str2() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StyleKeyItem::clear_str2() {
  str2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_str2();
}
inline const ::std::string& StyleKeyItem::str2() const {
  // @@protoc_insertion_point(field_get:FromCs.StyleKeyItem.Str2)
  return str2_.GetNoArena();
}
inline void StyleKeyItem::set_str2(const ::std::string& value) {
  set_has_str2();
  str2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.StyleKeyItem.Str2)
}
#if LANG_CXX11
inline void StyleKeyItem::set_str2(::std::string&& value) {
  set_has_str2();
  str2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.StyleKeyItem.Str2)
}
#endif
inline void StyleKeyItem::set_str2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_str2();
  str2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.StyleKeyItem.Str2)
}
inline void StyleKeyItem::set_str2(const char* value, size_t size) {
  set_has_str2();
  str2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.StyleKeyItem.Str2)
}
inline ::std::string* StyleKeyItem::mutable_str2() {
  set_has_str2();
  // @@protoc_insertion_point(field_mutable:FromCs.StyleKeyItem.Str2)
  return str2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StyleKeyItem::release_str2() {
  // @@protoc_insertion_point(field_release:FromCs.StyleKeyItem.Str2)
  clear_has_str2();
  return str2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StyleKeyItem::set_allocated_str2(::std::string* str2) {
  if (str2 != NULL) {
    set_has_str2();
  } else {
    clear_has_str2();
  }
  str2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str2);
  // @@protoc_insertion_point(field_set_allocated:FromCs.StyleKeyItem.Str2)
}

// -------------------------------------------------------------------

// AuthData

// optional int32 Uin = 1;
inline bool AuthData::has_uin() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void AuthData::set_has_uin() {
  _has_bits_[0] |= 0x00004000u;
}
inline void AuthData::clear_has_uin() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void AuthData::clear_uin() {
  uin_ = 0;
  clear_has_uin();
}
inline ::google::protobuf::int32 AuthData::uin() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthData.Uin)
  return uin_;
}
inline void AuthData::set_uin(::google::protobuf::int32 value) {
  set_has_uin();
  uin_ = value;
  // @@protoc_insertion_point(field_set:FromCs.AuthData.Uin)
}

// optional .FromCs.ECDHKey SvrPubECDHKey = 2;
inline bool AuthData::has_svrpubecdhkey() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AuthData::set_has_svrpubecdhkey() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AuthData::clear_has_svrpubecdhkey() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AuthData::clear_svrpubecdhkey() {
  if (svrpubecdhkey_ != NULL) svrpubecdhkey_->::FromCs::ECDHKey::Clear();
  clear_has_svrpubecdhkey();
}
inline const ::FromCs::ECDHKey& AuthData::svrpubecdhkey() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthData.SvrPubECDHKey)
  return svrpubecdhkey_ != NULL ? *svrpubecdhkey_
                         : *::FromCs::ECDHKey::internal_default_instance();
}
inline ::FromCs::ECDHKey* AuthData::mutable_svrpubecdhkey() {
  set_has_svrpubecdhkey();
  if (svrpubecdhkey_ == NULL) {
    svrpubecdhkey_ = new ::FromCs::ECDHKey;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.AuthData.SvrPubECDHKey)
  return svrpubecdhkey_;
}
inline ::FromCs::ECDHKey* AuthData::release_svrpubecdhkey() {
  // @@protoc_insertion_point(field_release:FromCs.AuthData.SvrPubECDHKey)
  clear_has_svrpubecdhkey();
  ::FromCs::ECDHKey* temp = svrpubecdhkey_;
  svrpubecdhkey_ = NULL;
  return temp;
}
inline void AuthData::set_allocated_svrpubecdhkey(::FromCs::ECDHKey* svrpubecdhkey) {
  delete svrpubecdhkey_;
  svrpubecdhkey_ = svrpubecdhkey;
  if (svrpubecdhkey) {
    set_has_svrpubecdhkey();
  } else {
    clear_has_svrpubecdhkey();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthData.SvrPubECDHKey)
}

// optional .FromCs.sKBuiltinBufferT SessionKey = 3;
inline bool AuthData::has_sessionkey() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AuthData::set_has_sessionkey() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AuthData::clear_has_sessionkey() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AuthData::clear_sessionkey() {
  if (sessionkey_ != NULL) sessionkey_->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_sessionkey();
}
inline const ::FromCs::sKBuiltinBufferT& AuthData::sessionkey() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthData.SessionKey)
  return sessionkey_ != NULL ? *sessionkey_
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* AuthData::mutable_sessionkey() {
  set_has_sessionkey();
  if (sessionkey_ == NULL) {
    sessionkey_ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.AuthData.SessionKey)
  return sessionkey_;
}
inline ::FromCs::sKBuiltinBufferT* AuthData::release_sessionkey() {
  // @@protoc_insertion_point(field_release:FromCs.AuthData.SessionKey)
  clear_has_sessionkey();
  ::FromCs::sKBuiltinBufferT* temp = sessionkey_;
  sessionkey_ = NULL;
  return temp;
}
inline void AuthData::set_allocated_sessionkey(::FromCs::sKBuiltinBufferT* sessionkey) {
  delete sessionkey_;
  sessionkey_ = sessionkey;
  if (sessionkey) {
    set_has_sessionkey();
  } else {
    clear_has_sessionkey();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthData.SessionKey)
}

// optional .FromCs.sKBuiltinBufferT AutoAuthKey = 4;
inline bool AuthData::has_autoauthkey() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AuthData::set_has_autoauthkey() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AuthData::clear_has_autoauthkey() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AuthData::clear_autoauthkey() {
  if (autoauthkey_ != NULL) autoauthkey_->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_autoauthkey();
}
inline const ::FromCs::sKBuiltinBufferT& AuthData::autoauthkey() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthData.AutoAuthKey)
  return autoauthkey_ != NULL ? *autoauthkey_
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* AuthData::mutable_autoauthkey() {
  set_has_autoauthkey();
  if (autoauthkey_ == NULL) {
    autoauthkey_ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.AuthData.AutoAuthKey)
  return autoauthkey_;
}
inline ::FromCs::sKBuiltinBufferT* AuthData::release_autoauthkey() {
  // @@protoc_insertion_point(field_release:FromCs.AuthData.AutoAuthKey)
  clear_has_autoauthkey();
  ::FromCs::sKBuiltinBufferT* temp = autoauthkey_;
  autoauthkey_ = NULL;
  return temp;
}
inline void AuthData::set_allocated_autoauthkey(::FromCs::sKBuiltinBufferT* autoauthkey) {
  delete autoauthkey_;
  autoauthkey_ = autoauthkey;
  if (autoauthkey) {
    set_has_autoauthkey();
  } else {
    clear_has_autoauthkey();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthData.AutoAuthKey)
}

// optional int32 Int5 = 5;
inline bool AuthData::has_int5() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void AuthData::set_has_int5() {
  _has_bits_[0] |= 0x00008000u;
}
inline void AuthData::clear_has_int5() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void AuthData::clear_int5() {
  int5_ = 0;
  clear_has_int5();
}
inline ::google::protobuf::int32 AuthData::int5() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthData.Int5)
  return int5_;
}
inline void AuthData::set_int5(::google::protobuf::int32 value) {
  set_has_int5();
  int5_ = value;
  // @@protoc_insertion_point(field_set:FromCs.AuthData.Int5)
}

// optional .FromCs.sKBuiltinBufferT Buffer6 = 6;
inline bool AuthData::has_buffer6() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AuthData::set_has_buffer6() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AuthData::clear_has_buffer6() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AuthData::clear_buffer6() {
  if (buffer6_ != NULL) buffer6_->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_buffer6();
}
inline const ::FromCs::sKBuiltinBufferT& AuthData::buffer6() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthData.Buffer6)
  return buffer6_ != NULL ? *buffer6_
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* AuthData::mutable_buffer6() {
  set_has_buffer6();
  if (buffer6_ == NULL) {
    buffer6_ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.AuthData.Buffer6)
  return buffer6_;
}
inline ::FromCs::sKBuiltinBufferT* AuthData::release_buffer6() {
  // @@protoc_insertion_point(field_release:FromCs.AuthData.Buffer6)
  clear_has_buffer6();
  ::FromCs::sKBuiltinBufferT* temp = buffer6_;
  buffer6_ = NULL;
  return temp;
}
inline void AuthData::set_allocated_buffer6(::FromCs::sKBuiltinBufferT* buffer6) {
  delete buffer6_;
  buffer6_ = buffer6;
  if (buffer6) {
    set_has_buffer6();
  } else {
    clear_has_buffer6();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthData.Buffer6)
}

// optional .FromCs.sKBuiltinstringT KSid = 7;
inline bool AuthData::has_ksid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AuthData::set_has_ksid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AuthData::clear_has_ksid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AuthData::clear_ksid() {
  if (ksid_ != NULL) ksid_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_ksid();
}
inline const ::FromCs::sKBuiltinstringT& AuthData::ksid() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthData.KSid)
  return ksid_ != NULL ? *ksid_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* AuthData::mutable_ksid() {
  set_has_ksid();
  if (ksid_ == NULL) {
    ksid_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.AuthData.KSid)
  return ksid_;
}
inline ::FromCs::sKBuiltinstringT* AuthData::release_ksid() {
  // @@protoc_insertion_point(field_release:FromCs.AuthData.KSid)
  clear_has_ksid();
  ::FromCs::sKBuiltinstringT* temp = ksid_;
  ksid_ = NULL;
  return temp;
}
inline void AuthData::set_allocated_ksid(::FromCs::sKBuiltinstringT* ksid) {
  delete ksid_;
  ksid_ = ksid;
  if (ksid) {
    set_has_ksid();
  } else {
    clear_has_ksid();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthData.KSid)
}

// optional .FromCs.sKBuiltinBufferT PicData = 8;
inline bool AuthData::has_picdata() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void AuthData::set_has_picdata() {
  _has_bits_[0] |= 0x00000200u;
}
inline void AuthData::clear_has_picdata() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void AuthData::clear_picdata() {
  if (picdata_ != NULL) picdata_->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_picdata();
}
inline const ::FromCs::sKBuiltinBufferT& AuthData::picdata() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthData.PicData)
  return picdata_ != NULL ? *picdata_
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* AuthData::mutable_picdata() {
  set_has_picdata();
  if (picdata_ == NULL) {
    picdata_ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.AuthData.PicData)
  return picdata_;
}
inline ::FromCs::sKBuiltinBufferT* AuthData::release_picdata() {
  // @@protoc_insertion_point(field_release:FromCs.AuthData.PicData)
  clear_has_picdata();
  ::FromCs::sKBuiltinBufferT* temp = picdata_;
  picdata_ = NULL;
  return temp;
}
inline void AuthData::set_allocated_picdata(::FromCs::sKBuiltinBufferT* picdata) {
  delete picdata_;
  picdata_ = picdata;
  if (picdata) {
    set_has_picdata();
  } else {
    clear_has_picdata();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthData.PicData)
}

// optional .FromCs.sKBuiltinBufferT Buffer9 = 9;
inline bool AuthData::has_buffer9() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void AuthData::set_has_buffer9() {
  _has_bits_[0] |= 0x00000400u;
}
inline void AuthData::clear_has_buffer9() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void AuthData::clear_buffer9() {
  if (buffer9_ != NULL) buffer9_->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_buffer9();
}
inline const ::FromCs::sKBuiltinBufferT& AuthData::buffer9() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthData.Buffer9)
  return buffer9_ != NULL ? *buffer9_
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* AuthData::mutable_buffer9() {
  set_has_buffer9();
  if (buffer9_ == NULL) {
    buffer9_ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.AuthData.Buffer9)
  return buffer9_;
}
inline ::FromCs::sKBuiltinBufferT* AuthData::release_buffer9() {
  // @@protoc_insertion_point(field_release:FromCs.AuthData.Buffer9)
  clear_has_buffer9();
  ::FromCs::sKBuiltinBufferT* temp = buffer9_;
  buffer9_ = NULL;
  return temp;
}
inline void AuthData::set_allocated_buffer9(::FromCs::sKBuiltinBufferT* buffer9) {
  delete buffer9_;
  buffer9_ = buffer9;
  if (buffer9) {
    set_has_buffer9();
  } else {
    clear_has_buffer9();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthData.Buffer9)
}

// optional .FromCs.sKBuiltinBufferT Buffer10 = 10;
inline bool AuthData::has_buffer10() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void AuthData::set_has_buffer10() {
  _has_bits_[0] |= 0x00000800u;
}
inline void AuthData::clear_has_buffer10() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void AuthData::clear_buffer10() {
  if (buffer10_ != NULL) buffer10_->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_buffer10();
}
inline const ::FromCs::sKBuiltinBufferT& AuthData::buffer10() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthData.Buffer10)
  return buffer10_ != NULL ? *buffer10_
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* AuthData::mutable_buffer10() {
  set_has_buffer10();
  if (buffer10_ == NULL) {
    buffer10_ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.AuthData.Buffer10)
  return buffer10_;
}
inline ::FromCs::sKBuiltinBufferT* AuthData::release_buffer10() {
  // @@protoc_insertion_point(field_release:FromCs.AuthData.Buffer10)
  clear_has_buffer10();
  ::FromCs::sKBuiltinBufferT* temp = buffer10_;
  buffer10_ = NULL;
  return temp;
}
inline void AuthData::set_allocated_buffer10(::FromCs::sKBuiltinBufferT* buffer10) {
  delete buffer10_;
  buffer10_ = buffer10;
  if (buffer10) {
    set_has_buffer10();
  } else {
    clear_has_buffer10();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthData.Buffer10)
}

// optional string Str11 = 11;
inline bool AuthData::has_str11() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuthData::set_has_str11() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuthData::clear_has_str11() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuthData::clear_str11() {
  str11_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_str11();
}
inline const ::std::string& AuthData::str11() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthData.Str11)
  return str11_.GetNoArena();
}
inline void AuthData::set_str11(const ::std::string& value) {
  set_has_str11();
  str11_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.AuthData.Str11)
}
#if LANG_CXX11
inline void AuthData::set_str11(::std::string&& value) {
  set_has_str11();
  str11_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.AuthData.Str11)
}
#endif
inline void AuthData::set_str11(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_str11();
  str11_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.AuthData.Str11)
}
inline void AuthData::set_str11(const char* value, size_t size) {
  set_has_str11();
  str11_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.AuthData.Str11)
}
inline ::std::string* AuthData::mutable_str11() {
  set_has_str11();
  // @@protoc_insertion_point(field_mutable:FromCs.AuthData.Str11)
  return str11_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthData::release_str11() {
  // @@protoc_insertion_point(field_release:FromCs.AuthData.Str11)
  clear_has_str11();
  return str11_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthData::set_allocated_str11(::std::string* str11) {
  if (str11 != NULL) {
    set_has_str11();
  } else {
    clear_has_str11();
  }
  str11_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str11);
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthData.Str11)
}

// optional .FromCs.sKBuiltinBufferT Buffer12 = 12;
inline bool AuthData::has_buffer12() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void AuthData::set_has_buffer12() {
  _has_bits_[0] |= 0x00001000u;
}
inline void AuthData::clear_has_buffer12() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void AuthData::clear_buffer12() {
  if (buffer12_ != NULL) buffer12_->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_buffer12();
}
inline const ::FromCs::sKBuiltinBufferT& AuthData::buffer12() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthData.Buffer12)
  return buffer12_ != NULL ? *buffer12_
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* AuthData::mutable_buffer12() {
  set_has_buffer12();
  if (buffer12_ == NULL) {
    buffer12_ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.AuthData.Buffer12)
  return buffer12_;
}
inline ::FromCs::sKBuiltinBufferT* AuthData::release_buffer12() {
  // @@protoc_insertion_point(field_release:FromCs.AuthData.Buffer12)
  clear_has_buffer12();
  ::FromCs::sKBuiltinBufferT* temp = buffer12_;
  buffer12_ = NULL;
  return temp;
}
inline void AuthData::set_allocated_buffer12(::FromCs::sKBuiltinBufferT* buffer12) {
  delete buffer12_;
  buffer12_ = buffer12;
  if (buffer12) {
    set_has_buffer12();
  } else {
    clear_has_buffer12();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthData.Buffer12)
}

// optional string Str14 = 14;
inline bool AuthData::has_str14() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AuthData::set_has_str14() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AuthData::clear_has_str14() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AuthData::clear_str14() {
  str14_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_str14();
}
inline const ::std::string& AuthData::str14() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthData.Str14)
  return str14_.GetNoArena();
}
inline void AuthData::set_str14(const ::std::string& value) {
  set_has_str14();
  str14_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.AuthData.Str14)
}
#if LANG_CXX11
inline void AuthData::set_str14(::std::string&& value) {
  set_has_str14();
  str14_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.AuthData.Str14)
}
#endif
inline void AuthData::set_str14(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_str14();
  str14_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.AuthData.Str14)
}
inline void AuthData::set_str14(const char* value, size_t size) {
  set_has_str14();
  str14_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.AuthData.Str14)
}
inline ::std::string* AuthData::mutable_str14() {
  set_has_str14();
  // @@protoc_insertion_point(field_mutable:FromCs.AuthData.Str14)
  return str14_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthData::release_str14() {
  // @@protoc_insertion_point(field_release:FromCs.AuthData.Str14)
  clear_has_str14();
  return str14_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthData::set_allocated_str14(::std::string* str14) {
  if (str14 != NULL) {
    set_has_str14();
  } else {
    clear_has_str14();
  }
  str14_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str14);
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthData.Str14)
}

// optional .FromCs.sKBuiltinBufferT Item15 = 15;
inline bool AuthData::has_item15() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void AuthData::set_has_item15() {
  _has_bits_[0] |= 0x00002000u;
}
inline void AuthData::clear_has_item15() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void AuthData::clear_item15() {
  if (item15_ != NULL) item15_->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_item15();
}
inline const ::FromCs::sKBuiltinBufferT& AuthData::item15() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthData.Item15)
  return item15_ != NULL ? *item15_
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* AuthData::mutable_item15() {
  set_has_item15();
  if (item15_ == NULL) {
    item15_ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.AuthData.Item15)
  return item15_;
}
inline ::FromCs::sKBuiltinBufferT* AuthData::release_item15() {
  // @@protoc_insertion_point(field_release:FromCs.AuthData.Item15)
  clear_has_item15();
  ::FromCs::sKBuiltinBufferT* temp = item15_;
  item15_ = NULL;
  return temp;
}
inline void AuthData::set_allocated_item15(::FromCs::sKBuiltinBufferT* item15) {
  delete item15_;
  item15_ = item15;
  if (item15) {
    set_has_item15();
  } else {
    clear_has_item15();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthData.Item15)
}

// optional string Str16 = 16;
inline bool AuthData::has_str16() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AuthData::set_has_str16() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AuthData::clear_has_str16() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AuthData::clear_str16() {
  str16_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_str16();
}
inline const ::std::string& AuthData::str16() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthData.Str16)
  return str16_.GetNoArena();
}
inline void AuthData::set_str16(const ::std::string& value) {
  set_has_str16();
  str16_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.AuthData.Str16)
}
#if LANG_CXX11
inline void AuthData::set_str16(::std::string&& value) {
  set_has_str16();
  str16_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.AuthData.Str16)
}
#endif
inline void AuthData::set_str16(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_str16();
  str16_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.AuthData.Str16)
}
inline void AuthData::set_str16(const char* value, size_t size) {
  set_has_str16();
  str16_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.AuthData.Str16)
}
inline ::std::string* AuthData::mutable_str16() {
  set_has_str16();
  // @@protoc_insertion_point(field_mutable:FromCs.AuthData.Str16)
  return str16_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthData::release_str16() {
  // @@protoc_insertion_point(field_release:FromCs.AuthData.Str16)
  clear_has_str16();
  return str16_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthData::set_allocated_str16(::std::string* str16) {
  if (str16 != NULL) {
    set_has_str16();
  } else {
    clear_has_str16();
  }
  str16_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str16);
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthData.Str16)
}

// optional int32 NewVersion = 17;
inline bool AuthData::has_newversion() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void AuthData::set_has_newversion() {
  _has_bits_[0] |= 0x00010000u;
}
inline void AuthData::clear_has_newversion() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void AuthData::clear_newversion() {
  newversion_ = 0;
  clear_has_newversion();
}
inline ::google::protobuf::int32 AuthData::newversion() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthData.NewVersion)
  return newversion_;
}
inline void AuthData::set_newversion(::google::protobuf::int32 value) {
  set_has_newversion();
  newversion_ = value;
  // @@protoc_insertion_point(field_set:FromCs.AuthData.NewVersion)
}

// optional int32 Int18 = 18;
inline bool AuthData::has_int18() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void AuthData::set_has_int18() {
  _has_bits_[0] |= 0x00020000u;
}
inline void AuthData::clear_has_int18() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void AuthData::clear_int18() {
  int18_ = 0;
  clear_has_int18();
}
inline ::google::protobuf::int32 AuthData::int18() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthData.Int18)
  return int18_;
}
inline void AuthData::set_int18(::google::protobuf::int32 value) {
  set_has_int18();
  int18_ = value;
  // @@protoc_insertion_point(field_set:FromCs.AuthData.Int18)
}

// optional int32 Int19 = 19;
inline bool AuthData::has_int19() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void AuthData::set_has_int19() {
  _has_bits_[0] |= 0x00040000u;
}
inline void AuthData::clear_has_int19() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void AuthData::clear_int19() {
  int19_ = 0;
  clear_has_int19();
}
inline ::google::protobuf::int32 AuthData::int19() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthData.Int19)
  return int19_;
}
inline void AuthData::set_int19(::google::protobuf::int32 value) {
  set_has_int19();
  int19_ = value;
  // @@protoc_insertion_point(field_set:FromCs.AuthData.Int19)
}

// optional string FSURL = 20;
inline bool AuthData::has_fsurl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AuthData::set_has_fsurl() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AuthData::clear_has_fsurl() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AuthData::clear_fsurl() {
  fsurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fsurl();
}
inline const ::std::string& AuthData::fsurl() const {
  // @@protoc_insertion_point(field_get:FromCs.AuthData.FSURL)
  return fsurl_.GetNoArena();
}
inline void AuthData::set_fsurl(const ::std::string& value) {
  set_has_fsurl();
  fsurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.AuthData.FSURL)
}
#if LANG_CXX11
inline void AuthData::set_fsurl(::std::string&& value) {
  set_has_fsurl();
  fsurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.AuthData.FSURL)
}
#endif
inline void AuthData::set_fsurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fsurl();
  fsurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.AuthData.FSURL)
}
inline void AuthData::set_fsurl(const char* value, size_t size) {
  set_has_fsurl();
  fsurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.AuthData.FSURL)
}
inline ::std::string* AuthData::mutable_fsurl() {
  set_has_fsurl();
  // @@protoc_insertion_point(field_mutable:FromCs.AuthData.FSURL)
  return fsurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthData::release_fsurl() {
  // @@protoc_insertion_point(field_release:FromCs.AuthData.FSURL)
  clear_has_fsurl();
  return fsurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthData::set_allocated_fsurl(::std::string* fsurl) {
  if (fsurl != NULL) {
    set_has_fsurl();
  } else {
    clear_has_fsurl();
  }
  fsurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fsurl);
  // @@protoc_insertion_point(field_set_allocated:FromCs.AuthData.FSURL)
}

// -------------------------------------------------------------------

// AccountInfo

// optional string UserName = 1;
inline bool AccountInfo::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccountInfo::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccountInfo::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccountInfo::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& AccountInfo::username() const {
  // @@protoc_insertion_point(field_get:FromCs.AccountInfo.UserName)
  return username_.GetNoArena();
}
inline void AccountInfo::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.AccountInfo.UserName)
}
#if LANG_CXX11
inline void AccountInfo::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.AccountInfo.UserName)
}
#endif
inline void AccountInfo::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.AccountInfo.UserName)
}
inline void AccountInfo::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.AccountInfo.UserName)
}
inline ::std::string* AccountInfo::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:FromCs.AccountInfo.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccountInfo::release_username() {
  // @@protoc_insertion_point(field_release:FromCs.AccountInfo.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccountInfo::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:FromCs.AccountInfo.UserName)
}

// optional string NickName = 2;
inline bool AccountInfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccountInfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccountInfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccountInfo::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
inline const ::std::string& AccountInfo::nickname() const {
  // @@protoc_insertion_point(field_get:FromCs.AccountInfo.NickName)
  return nickname_.GetNoArena();
}
inline void AccountInfo::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.AccountInfo.NickName)
}
#if LANG_CXX11
inline void AccountInfo::set_nickname(::std::string&& value) {
  set_has_nickname();
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.AccountInfo.NickName)
}
#endif
inline void AccountInfo::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.AccountInfo.NickName)
}
inline void AccountInfo::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.AccountInfo.NickName)
}
inline ::std::string* AccountInfo::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:FromCs.AccountInfo.NickName)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccountInfo::release_nickname() {
  // @@protoc_insertion_point(field_release:FromCs.AccountInfo.NickName)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccountInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:FromCs.AccountInfo.NickName)
}

// optional int32 BindUin = 3;
inline bool AccountInfo::has_binduin() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void AccountInfo::set_has_binduin() {
  _has_bits_[0] |= 0x00000200u;
}
inline void AccountInfo::clear_has_binduin() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void AccountInfo::clear_binduin() {
  binduin_ = 0;
  clear_has_binduin();
}
inline ::google::protobuf::int32 AccountInfo::binduin() const {
  // @@protoc_insertion_point(field_get:FromCs.AccountInfo.BindUin)
  return binduin_;
}
inline void AccountInfo::set_binduin(::google::protobuf::int32 value) {
  set_has_binduin();
  binduin_ = value;
  // @@protoc_insertion_point(field_set:FromCs.AccountInfo.BindUin)
}

// optional string BindEmail = 4;
inline bool AccountInfo::has_bindemail() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AccountInfo::set_has_bindemail() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AccountInfo::clear_has_bindemail() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AccountInfo::clear_bindemail() {
  bindemail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bindemail();
}
inline const ::std::string& AccountInfo::bindemail() const {
  // @@protoc_insertion_point(field_get:FromCs.AccountInfo.BindEmail)
  return bindemail_.GetNoArena();
}
inline void AccountInfo::set_bindemail(const ::std::string& value) {
  set_has_bindemail();
  bindemail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.AccountInfo.BindEmail)
}
#if LANG_CXX11
inline void AccountInfo::set_bindemail(::std::string&& value) {
  set_has_bindemail();
  bindemail_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.AccountInfo.BindEmail)
}
#endif
inline void AccountInfo::set_bindemail(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bindemail();
  bindemail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.AccountInfo.BindEmail)
}
inline void AccountInfo::set_bindemail(const char* value, size_t size) {
  set_has_bindemail();
  bindemail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.AccountInfo.BindEmail)
}
inline ::std::string* AccountInfo::mutable_bindemail() {
  set_has_bindemail();
  // @@protoc_insertion_point(field_mutable:FromCs.AccountInfo.BindEmail)
  return bindemail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccountInfo::release_bindemail() {
  // @@protoc_insertion_point(field_release:FromCs.AccountInfo.BindEmail)
  clear_has_bindemail();
  return bindemail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccountInfo::set_allocated_bindemail(::std::string* bindemail) {
  if (bindemail != NULL) {
    set_has_bindemail();
  } else {
    clear_has_bindemail();
  }
  bindemail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bindemail);
  // @@protoc_insertion_point(field_set_allocated:FromCs.AccountInfo.BindEmail)
}

// optional string BindMobile = 5;
inline bool AccountInfo::has_bindmobile() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AccountInfo::set_has_bindmobile() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AccountInfo::clear_has_bindmobile() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AccountInfo::clear_bindmobile() {
  bindmobile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bindmobile();
}
inline const ::std::string& AccountInfo::bindmobile() const {
  // @@protoc_insertion_point(field_get:FromCs.AccountInfo.BindMobile)
  return bindmobile_.GetNoArena();
}
inline void AccountInfo::set_bindmobile(const ::std::string& value) {
  set_has_bindmobile();
  bindmobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.AccountInfo.BindMobile)
}
#if LANG_CXX11
inline void AccountInfo::set_bindmobile(::std::string&& value) {
  set_has_bindmobile();
  bindmobile_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.AccountInfo.BindMobile)
}
#endif
inline void AccountInfo::set_bindmobile(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bindmobile();
  bindmobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.AccountInfo.BindMobile)
}
inline void AccountInfo::set_bindmobile(const char* value, size_t size) {
  set_has_bindmobile();
  bindmobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.AccountInfo.BindMobile)
}
inline ::std::string* AccountInfo::mutable_bindmobile() {
  set_has_bindmobile();
  // @@protoc_insertion_point(field_mutable:FromCs.AccountInfo.BindMobile)
  return bindmobile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccountInfo::release_bindmobile() {
  // @@protoc_insertion_point(field_release:FromCs.AccountInfo.BindMobile)
  clear_has_bindmobile();
  return bindmobile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccountInfo::set_allocated_bindmobile(::std::string* bindmobile) {
  if (bindmobile != NULL) {
    set_has_bindmobile();
  } else {
    clear_has_bindmobile();
  }
  bindmobile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bindmobile);
  // @@protoc_insertion_point(field_set_allocated:FromCs.AccountInfo.BindMobile)
}

// optional string Alias = 6;
inline bool AccountInfo::has_alias() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AccountInfo::set_has_alias() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AccountInfo::clear_has_alias() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AccountInfo::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_alias();
}
inline const ::std::string& AccountInfo::alias() const {
  // @@protoc_insertion_point(field_get:FromCs.AccountInfo.Alias)
  return alias_.GetNoArena();
}
inline void AccountInfo::set_alias(const ::std::string& value) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.AccountInfo.Alias)
}
#if LANG_CXX11
inline void AccountInfo::set_alias(::std::string&& value) {
  set_has_alias();
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.AccountInfo.Alias)
}
#endif
inline void AccountInfo::set_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.AccountInfo.Alias)
}
inline void AccountInfo::set_alias(const char* value, size_t size) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.AccountInfo.Alias)
}
inline ::std::string* AccountInfo::mutable_alias() {
  set_has_alias();
  // @@protoc_insertion_point(field_mutable:FromCs.AccountInfo.Alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccountInfo::release_alias() {
  // @@protoc_insertion_point(field_release:FromCs.AccountInfo.Alias)
  clear_has_alias();
  return alias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccountInfo::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    set_has_alias();
  } else {
    clear_has_alias();
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:FromCs.AccountInfo.Alias)
}

// optional int32 Status = 8;
inline bool AccountInfo::has_status() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void AccountInfo::set_has_status() {
  _has_bits_[0] |= 0x00000400u;
}
inline void AccountInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void AccountInfo::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 AccountInfo::status() const {
  // @@protoc_insertion_point(field_get:FromCs.AccountInfo.Status)
  return status_;
}
inline void AccountInfo::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:FromCs.AccountInfo.Status)
}

// optional int32 Int9 = 9;
inline bool AccountInfo::has_int9() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void AccountInfo::set_has_int9() {
  _has_bits_[0] |= 0x00000800u;
}
inline void AccountInfo::clear_has_int9() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void AccountInfo::clear_int9() {
  int9_ = 0;
  clear_has_int9();
}
inline ::google::protobuf::int32 AccountInfo::int9() const {
  // @@protoc_insertion_point(field_get:FromCs.AccountInfo.Int9)
  return int9_;
}
inline void AccountInfo::set_int9(::google::protobuf::int32 value) {
  set_has_int9();
  int9_ = value;
  // @@protoc_insertion_point(field_set:FromCs.AccountInfo.Int9)
}

// optional int32 Int10 = 10;
inline bool AccountInfo::has_int10() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void AccountInfo::set_has_int10() {
  _has_bits_[0] |= 0x00001000u;
}
inline void AccountInfo::clear_has_int10() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void AccountInfo::clear_int10() {
  int10_ = 0;
  clear_has_int10();
}
inline ::google::protobuf::int32 AccountInfo::int10() const {
  // @@protoc_insertion_point(field_get:FromCs.AccountInfo.Int10)
  return int10_;
}
inline void AccountInfo::set_int10(::google::protobuf::int32 value) {
  set_has_int10();
  int10_ = value;
  // @@protoc_insertion_point(field_set:FromCs.AccountInfo.Int10)
}

// optional string Str11 = 11;
inline bool AccountInfo::has_str11() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AccountInfo::set_has_str11() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AccountInfo::clear_has_str11() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AccountInfo::clear_str11() {
  str11_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_str11();
}
inline const ::std::string& AccountInfo::str11() const {
  // @@protoc_insertion_point(field_get:FromCs.AccountInfo.Str11)
  return str11_.GetNoArena();
}
inline void AccountInfo::set_str11(const ::std::string& value) {
  set_has_str11();
  str11_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.AccountInfo.Str11)
}
#if LANG_CXX11
inline void AccountInfo::set_str11(::std::string&& value) {
  set_has_str11();
  str11_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.AccountInfo.Str11)
}
#endif
inline void AccountInfo::set_str11(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_str11();
  str11_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.AccountInfo.Str11)
}
inline void AccountInfo::set_str11(const char* value, size_t size) {
  set_has_str11();
  str11_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.AccountInfo.Str11)
}
inline ::std::string* AccountInfo::mutable_str11() {
  set_has_str11();
  // @@protoc_insertion_point(field_mutable:FromCs.AccountInfo.Str11)
  return str11_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccountInfo::release_str11() {
  // @@protoc_insertion_point(field_release:FromCs.AccountInfo.Str11)
  clear_has_str11();
  return str11_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccountInfo::set_allocated_str11(::std::string* str11) {
  if (str11 != NULL) {
    set_has_str11();
  } else {
    clear_has_str11();
  }
  str11_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str11);
  // @@protoc_insertion_point(field_set_allocated:FromCs.AccountInfo.Str11)
}

// optional int32 Int12 = 12;
inline bool AccountInfo::has_int12() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void AccountInfo::set_has_int12() {
  _has_bits_[0] |= 0x00002000u;
}
inline void AccountInfo::clear_has_int12() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void AccountInfo::clear_int12() {
  int12_ = 0;
  clear_has_int12();
}
inline ::google::protobuf::int32 AccountInfo::int12() const {
  // @@protoc_insertion_point(field_get:FromCs.AccountInfo.Int12)
  return int12_;
}
inline void AccountInfo::set_int12(::google::protobuf::int32 value) {
  set_has_int12();
  int12_ = value;
  // @@protoc_insertion_point(field_set:FromCs.AccountInfo.Int12)
}

// optional string OfficialUserName = 13;
inline bool AccountInfo::has_officialusername() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AccountInfo::set_has_officialusername() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AccountInfo::clear_has_officialusername() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AccountInfo::clear_officialusername() {
  officialusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_officialusername();
}
inline const ::std::string& AccountInfo::officialusername() const {
  // @@protoc_insertion_point(field_get:FromCs.AccountInfo.OfficialUserName)
  return officialusername_.GetNoArena();
}
inline void AccountInfo::set_officialusername(const ::std::string& value) {
  set_has_officialusername();
  officialusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.AccountInfo.OfficialUserName)
}
#if LANG_CXX11
inline void AccountInfo::set_officialusername(::std::string&& value) {
  set_has_officialusername();
  officialusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.AccountInfo.OfficialUserName)
}
#endif
inline void AccountInfo::set_officialusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_officialusername();
  officialusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.AccountInfo.OfficialUserName)
}
inline void AccountInfo::set_officialusername(const char* value, size_t size) {
  set_has_officialusername();
  officialusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.AccountInfo.OfficialUserName)
}
inline ::std::string* AccountInfo::mutable_officialusername() {
  set_has_officialusername();
  // @@protoc_insertion_point(field_mutable:FromCs.AccountInfo.OfficialUserName)
  return officialusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccountInfo::release_officialusername() {
  // @@protoc_insertion_point(field_release:FromCs.AccountInfo.OfficialUserName)
  clear_has_officialusername();
  return officialusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccountInfo::set_allocated_officialusername(::std::string* officialusername) {
  if (officialusername != NULL) {
    set_has_officialusername();
  } else {
    clear_has_officialusername();
  }
  officialusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), officialusername);
  // @@protoc_insertion_point(field_set_allocated:FromCs.AccountInfo.OfficialUserName)
}

// optional string OfficialNickName = 14;
inline bool AccountInfo::has_officialnickname() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AccountInfo::set_has_officialnickname() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AccountInfo::clear_has_officialnickname() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AccountInfo::clear_officialnickname() {
  officialnickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_officialnickname();
}
inline const ::std::string& AccountInfo::officialnickname() const {
  // @@protoc_insertion_point(field_get:FromCs.AccountInfo.OfficialNickName)
  return officialnickname_.GetNoArena();
}
inline void AccountInfo::set_officialnickname(const ::std::string& value) {
  set_has_officialnickname();
  officialnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.AccountInfo.OfficialNickName)
}
#if LANG_CXX11
inline void AccountInfo::set_officialnickname(::std::string&& value) {
  set_has_officialnickname();
  officialnickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.AccountInfo.OfficialNickName)
}
#endif
inline void AccountInfo::set_officialnickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_officialnickname();
  officialnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.AccountInfo.OfficialNickName)
}
inline void AccountInfo::set_officialnickname(const char* value, size_t size) {
  set_has_officialnickname();
  officialnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.AccountInfo.OfficialNickName)
}
inline ::std::string* AccountInfo::mutable_officialnickname() {
  set_has_officialnickname();
  // @@protoc_insertion_point(field_mutable:FromCs.AccountInfo.OfficialNickName)
  return officialnickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccountInfo::release_officialnickname() {
  // @@protoc_insertion_point(field_release:FromCs.AccountInfo.OfficialNickName)
  clear_has_officialnickname();
  return officialnickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccountInfo::set_allocated_officialnickname(::std::string* officialnickname) {
  if (officialnickname != NULL) {
    set_has_officialnickname();
  } else {
    clear_has_officialnickname();
  }
  officialnickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), officialnickname);
  // @@protoc_insertion_point(field_set_allocated:FromCs.AccountInfo.OfficialNickName)
}

// optional int32 Int15 = 15;
inline bool AccountInfo::has_int15() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void AccountInfo::set_has_int15() {
  _has_bits_[0] |= 0x00004000u;
}
inline void AccountInfo::clear_has_int15() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void AccountInfo::clear_int15() {
  int15_ = 0;
  clear_has_int15();
}
inline ::google::protobuf::int32 AccountInfo::int15() const {
  // @@protoc_insertion_point(field_get:FromCs.AccountInfo.Int15)
  return int15_;
}
inline void AccountInfo::set_int15(::google::protobuf::int32 value) {
  set_has_int15();
  int15_ = value;
  // @@protoc_insertion_point(field_set:FromCs.AccountInfo.Int15)
}

// optional string FSURL = 16;
inline bool AccountInfo::has_fsurl() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AccountInfo::set_has_fsurl() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AccountInfo::clear_has_fsurl() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AccountInfo::clear_fsurl() {
  fsurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fsurl();
}
inline const ::std::string& AccountInfo::fsurl() const {
  // @@protoc_insertion_point(field_get:FromCs.AccountInfo.FSURL)
  return fsurl_.GetNoArena();
}
inline void AccountInfo::set_fsurl(const ::std::string& value) {
  set_has_fsurl();
  fsurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.AccountInfo.FSURL)
}
#if LANG_CXX11
inline void AccountInfo::set_fsurl(::std::string&& value) {
  set_has_fsurl();
  fsurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.AccountInfo.FSURL)
}
#endif
inline void AccountInfo::set_fsurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fsurl();
  fsurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.AccountInfo.FSURL)
}
inline void AccountInfo::set_fsurl(const char* value, size_t size) {
  set_has_fsurl();
  fsurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.AccountInfo.FSURL)
}
inline ::std::string* AccountInfo::mutable_fsurl() {
  set_has_fsurl();
  // @@protoc_insertion_point(field_mutable:FromCs.AccountInfo.FSURL)
  return fsurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccountInfo::release_fsurl() {
  // @@protoc_insertion_point(field_release:FromCs.AccountInfo.FSURL)
  clear_has_fsurl();
  return fsurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccountInfo::set_allocated_fsurl(::std::string* fsurl) {
  if (fsurl != NULL) {
    set_has_fsurl();
  } else {
    clear_has_fsurl();
  }
  fsurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fsurl);
  // @@protoc_insertion_point(field_set_allocated:FromCs.AccountInfo.FSURL)
}

// -------------------------------------------------------------------

// ServerInfo

// optional .FromCs.NewHostListType NewHostList = 1;
inline bool ServerInfo::has_newhostlist() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerInfo::set_has_newhostlist() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerInfo::clear_has_newhostlist() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerInfo::clear_newhostlist() {
  if (newhostlist_ != NULL) newhostlist_->::FromCs::NewHostListType::Clear();
  clear_has_newhostlist();
}
inline const ::FromCs::NewHostListType& ServerInfo::newhostlist() const {
  // @@protoc_insertion_point(field_get:FromCs.ServerInfo.NewHostList)
  return newhostlist_ != NULL ? *newhostlist_
                         : *::FromCs::NewHostListType::internal_default_instance();
}
inline ::FromCs::NewHostListType* ServerInfo::mutable_newhostlist() {
  set_has_newhostlist();
  if (newhostlist_ == NULL) {
    newhostlist_ = new ::FromCs::NewHostListType;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.ServerInfo.NewHostList)
  return newhostlist_;
}
inline ::FromCs::NewHostListType* ServerInfo::release_newhostlist() {
  // @@protoc_insertion_point(field_release:FromCs.ServerInfo.NewHostList)
  clear_has_newhostlist();
  ::FromCs::NewHostListType* temp = newhostlist_;
  newhostlist_ = NULL;
  return temp;
}
inline void ServerInfo::set_allocated_newhostlist(::FromCs::NewHostListType* newhostlist) {
  delete newhostlist_;
  newhostlist_ = newhostlist;
  if (newhostlist) {
    set_has_newhostlist();
  } else {
    clear_has_newhostlist();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.ServerInfo.NewHostList)
}

// optional .FromCs.NetworkControlType NetworkControl = 2;
inline bool ServerInfo::has_networkcontrol() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerInfo::set_has_networkcontrol() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerInfo::clear_has_networkcontrol() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerInfo::clear_networkcontrol() {
  if (networkcontrol_ != NULL) networkcontrol_->::FromCs::NetworkControlType::Clear();
  clear_has_networkcontrol();
}
inline const ::FromCs::NetworkControlType& ServerInfo::networkcontrol() const {
  // @@protoc_insertion_point(field_get:FromCs.ServerInfo.NetworkControl)
  return networkcontrol_ != NULL ? *networkcontrol_
                         : *::FromCs::NetworkControlType::internal_default_instance();
}
inline ::FromCs::NetworkControlType* ServerInfo::mutable_networkcontrol() {
  set_has_networkcontrol();
  if (networkcontrol_ == NULL) {
    networkcontrol_ = new ::FromCs::NetworkControlType;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.ServerInfo.NetworkControl)
  return networkcontrol_;
}
inline ::FromCs::NetworkControlType* ServerInfo::release_networkcontrol() {
  // @@protoc_insertion_point(field_release:FromCs.ServerInfo.NetworkControl)
  clear_has_networkcontrol();
  ::FromCs::NetworkControlType* temp = networkcontrol_;
  networkcontrol_ = NULL;
  return temp;
}
inline void ServerInfo::set_allocated_networkcontrol(::FromCs::NetworkControlType* networkcontrol) {
  delete networkcontrol_;
  networkcontrol_ = networkcontrol;
  if (networkcontrol) {
    set_has_networkcontrol();
  } else {
    clear_has_networkcontrol();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.ServerInfo.NetworkControl)
}

// optional .FromCs.sKBuiltinBufferT BuiltinIPList = 3;
inline bool ServerInfo::has_builtiniplist() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerInfo::set_has_builtiniplist() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerInfo::clear_has_builtiniplist() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerInfo::clear_builtiniplist() {
  if (builtiniplist_ != NULL) builtiniplist_->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_builtiniplist();
}
inline const ::FromCs::sKBuiltinBufferT& ServerInfo::builtiniplist() const {
  // @@protoc_insertion_point(field_get:FromCs.ServerInfo.BuiltinIPList)
  return builtiniplist_ != NULL ? *builtiniplist_
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* ServerInfo::mutable_builtiniplist() {
  set_has_builtiniplist();
  if (builtiniplist_ == NULL) {
    builtiniplist_ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.ServerInfo.BuiltinIPList)
  return builtiniplist_;
}
inline ::FromCs::sKBuiltinBufferT* ServerInfo::release_builtiniplist() {
  // @@protoc_insertion_point(field_release:FromCs.ServerInfo.BuiltinIPList)
  clear_has_builtiniplist();
  ::FromCs::sKBuiltinBufferT* temp = builtiniplist_;
  builtiniplist_ = NULL;
  return temp;
}
inline void ServerInfo::set_allocated_builtiniplist(::FromCs::sKBuiltinBufferT* builtiniplist) {
  delete builtiniplist_;
  builtiniplist_ = builtiniplist;
  if (builtiniplist) {
    set_has_builtiniplist();
  } else {
    clear_has_builtiniplist();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.ServerInfo.BuiltinIPList)
}

// -------------------------------------------------------------------

// SecAuthRegKeySect

// optional .FromCs.sKBuiltinBufferT AutoAuthKey = 1;
inline bool SecAuthRegKeySect::has_autoauthkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SecAuthRegKeySect::set_has_autoauthkey() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SecAuthRegKeySect::clear_has_autoauthkey() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SecAuthRegKeySect::clear_autoauthkey() {
  if (autoauthkey_ != NULL) autoauthkey_->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_autoauthkey();
}
inline const ::FromCs::sKBuiltinBufferT& SecAuthRegKeySect::autoauthkey() const {
  // @@protoc_insertion_point(field_get:FromCs.SecAuthRegKeySect.AutoAuthKey)
  return autoauthkey_ != NULL ? *autoauthkey_
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* SecAuthRegKeySect::mutable_autoauthkey() {
  set_has_autoauthkey();
  if (autoauthkey_ == NULL) {
    autoauthkey_ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.SecAuthRegKeySect.AutoAuthKey)
  return autoauthkey_;
}
inline ::FromCs::sKBuiltinBufferT* SecAuthRegKeySect::release_autoauthkey() {
  // @@protoc_insertion_point(field_release:FromCs.SecAuthRegKeySect.AutoAuthKey)
  clear_has_autoauthkey();
  ::FromCs::sKBuiltinBufferT* temp = autoauthkey_;
  autoauthkey_ = NULL;
  return temp;
}
inline void SecAuthRegKeySect::set_allocated_autoauthkey(::FromCs::sKBuiltinBufferT* autoauthkey) {
  delete autoauthkey_;
  autoauthkey_ = autoauthkey;
  if (autoauthkey) {
    set_has_autoauthkey();
  } else {
    clear_has_autoauthkey();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.SecAuthRegKeySect.AutoAuthKey)
}

// optional .FromCs.ECDHKey SvrPubEcdhkey = 2;
inline bool SecAuthRegKeySect::has_svrpubecdhkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SecAuthRegKeySect::set_has_svrpubecdhkey() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SecAuthRegKeySect::clear_has_svrpubecdhkey() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SecAuthRegKeySect::clear_svrpubecdhkey() {
  if (svrpubecdhkey_ != NULL) svrpubecdhkey_->::FromCs::ECDHKey::Clear();
  clear_has_svrpubecdhkey();
}
inline const ::FromCs::ECDHKey& SecAuthRegKeySect::svrpubecdhkey() const {
  // @@protoc_insertion_point(field_get:FromCs.SecAuthRegKeySect.SvrPubEcdhkey)
  return svrpubecdhkey_ != NULL ? *svrpubecdhkey_
                         : *::FromCs::ECDHKey::internal_default_instance();
}
inline ::FromCs::ECDHKey* SecAuthRegKeySect::mutable_svrpubecdhkey() {
  set_has_svrpubecdhkey();
  if (svrpubecdhkey_ == NULL) {
    svrpubecdhkey_ = new ::FromCs::ECDHKey;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.SecAuthRegKeySect.SvrPubEcdhkey)
  return svrpubecdhkey_;
}
inline ::FromCs::ECDHKey* SecAuthRegKeySect::release_svrpubecdhkey() {
  // @@protoc_insertion_point(field_release:FromCs.SecAuthRegKeySect.SvrPubEcdhkey)
  clear_has_svrpubecdhkey();
  ::FromCs::ECDHKey* temp = svrpubecdhkey_;
  svrpubecdhkey_ = NULL;
  return temp;
}
inline void SecAuthRegKeySect::set_allocated_svrpubecdhkey(::FromCs::ECDHKey* svrpubecdhkey) {
  delete svrpubecdhkey_;
  svrpubecdhkey_ = svrpubecdhkey;
  if (svrpubecdhkey) {
    set_has_svrpubecdhkey();
  } else {
    clear_has_svrpubecdhkey();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.SecAuthRegKeySect.SvrPubEcdhkey)
}

// optional .FromCs.sKBuiltinBufferT SessionKey = 3;
inline bool SecAuthRegKeySect::has_sessionkey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SecAuthRegKeySect::set_has_sessionkey() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SecAuthRegKeySect::clear_has_sessionkey() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SecAuthRegKeySect::clear_sessionkey() {
  if (sessionkey_ != NULL) sessionkey_->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_sessionkey();
}
inline const ::FromCs::sKBuiltinBufferT& SecAuthRegKeySect::sessionkey() const {
  // @@protoc_insertion_point(field_get:FromCs.SecAuthRegKeySect.SessionKey)
  return sessionkey_ != NULL ? *sessionkey_
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* SecAuthRegKeySect::mutable_sessionkey() {
  set_has_sessionkey();
  if (sessionkey_ == NULL) {
    sessionkey_ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.SecAuthRegKeySect.SessionKey)
  return sessionkey_;
}
inline ::FromCs::sKBuiltinBufferT* SecAuthRegKeySect::release_sessionkey() {
  // @@protoc_insertion_point(field_release:FromCs.SecAuthRegKeySect.SessionKey)
  clear_has_sessionkey();
  ::FromCs::sKBuiltinBufferT* temp = sessionkey_;
  sessionkey_ = NULL;
  return temp;
}
inline void SecAuthRegKeySect::set_allocated_sessionkey(::FromCs::sKBuiltinBufferT* sessionkey) {
  delete sessionkey_;
  sessionkey_ = sessionkey;
  if (sessionkey) {
    set_has_sessionkey();
  } else {
    clear_has_sessionkey();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.SecAuthRegKeySect.SessionKey)
}

// optional int32 AuthResultFlag = 4;
inline bool SecAuthRegKeySect::has_authresultflag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SecAuthRegKeySect::set_has_authresultflag() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SecAuthRegKeySect::clear_has_authresultflag() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SecAuthRegKeySect::clear_authresultflag() {
  authresultflag_ = 0;
  clear_has_authresultflag();
}
inline ::google::protobuf::int32 SecAuthRegKeySect::authresultflag() const {
  // @@protoc_insertion_point(field_get:FromCs.SecAuthRegKeySect.AuthResultFlag)
  return authresultflag_;
}
inline void SecAuthRegKeySect::set_authresultflag(::google::protobuf::int32 value) {
  set_has_authresultflag();
  authresultflag_ = value;
  // @@protoc_insertion_point(field_set:FromCs.SecAuthRegKeySect.AuthResultFlag)
}

// -------------------------------------------------------------------

// LoginQRCodeNotifyPkg

// optional .FromCs.sKBuiltinBufferT NotifyData = 1;
inline bool LoginQRCodeNotifyPkg::has_notifydata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginQRCodeNotifyPkg::set_has_notifydata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginQRCodeNotifyPkg::clear_has_notifydata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginQRCodeNotifyPkg::clear_notifydata() {
  if (notifydata_ != NULL) notifydata_->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_notifydata();
}
inline const ::FromCs::sKBuiltinBufferT& LoginQRCodeNotifyPkg::notifydata() const {
  // @@protoc_insertion_point(field_get:FromCs.LoginQRCodeNotifyPkg.NotifyData)
  return notifydata_ != NULL ? *notifydata_
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* LoginQRCodeNotifyPkg::mutable_notifydata() {
  set_has_notifydata();
  if (notifydata_ == NULL) {
    notifydata_ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.LoginQRCodeNotifyPkg.NotifyData)
  return notifydata_;
}
inline ::FromCs::sKBuiltinBufferT* LoginQRCodeNotifyPkg::release_notifydata() {
  // @@protoc_insertion_point(field_release:FromCs.LoginQRCodeNotifyPkg.NotifyData)
  clear_has_notifydata();
  ::FromCs::sKBuiltinBufferT* temp = notifydata_;
  notifydata_ = NULL;
  return temp;
}
inline void LoginQRCodeNotifyPkg::set_allocated_notifydata(::FromCs::sKBuiltinBufferT* notifydata) {
  delete notifydata_;
  notifydata_ = notifydata;
  if (notifydata) {
    set_has_notifydata();
  } else {
    clear_has_notifydata();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.LoginQRCodeNotifyPkg.NotifyData)
}

// optional int32 Opcode = 2;
inline bool LoginQRCodeNotifyPkg::has_opcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginQRCodeNotifyPkg::set_has_opcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginQRCodeNotifyPkg::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginQRCodeNotifyPkg::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
inline ::google::protobuf::int32 LoginQRCodeNotifyPkg::opcode() const {
  // @@protoc_insertion_point(field_get:FromCs.LoginQRCodeNotifyPkg.Opcode)
  return opcode_;
}
inline void LoginQRCodeNotifyPkg::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
  // @@protoc_insertion_point(field_set:FromCs.LoginQRCodeNotifyPkg.Opcode)
}

// -------------------------------------------------------------------

// NotifyMsg

// optional string Uuid = 1;
inline bool NotifyMsg::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotifyMsg::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NotifyMsg::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NotifyMsg::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uuid();
}
inline const ::std::string& NotifyMsg::uuid() const {
  // @@protoc_insertion_point(field_get:FromCs.NotifyMsg.Uuid)
  return uuid_.GetNoArena();
}
inline void NotifyMsg::set_uuid(const ::std::string& value) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.NotifyMsg.Uuid)
}
#if LANG_CXX11
inline void NotifyMsg::set_uuid(::std::string&& value) {
  set_has_uuid();
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.NotifyMsg.Uuid)
}
#endif
inline void NotifyMsg::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.NotifyMsg.Uuid)
}
inline void NotifyMsg::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.NotifyMsg.Uuid)
}
inline ::std::string* NotifyMsg::mutable_uuid() {
  set_has_uuid();
  // @@protoc_insertion_point(field_mutable:FromCs.NotifyMsg.Uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NotifyMsg::release_uuid() {
  // @@protoc_insertion_point(field_release:FromCs.NotifyMsg.Uuid)
  clear_has_uuid();
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NotifyMsg::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    set_has_uuid();
  } else {
    clear_has_uuid();
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:FromCs.NotifyMsg.Uuid)
}

// optional int32 Opcode = 2;
inline bool NotifyMsg::has_opcode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NotifyMsg::set_has_opcode() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NotifyMsg::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NotifyMsg::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
inline ::google::protobuf::int32 NotifyMsg::opcode() const {
  // @@protoc_insertion_point(field_get:FromCs.NotifyMsg.Opcode)
  return opcode_;
}
inline void NotifyMsg::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
  // @@protoc_insertion_point(field_set:FromCs.NotifyMsg.Opcode)
}

// optional string Username = 3;
inline bool NotifyMsg::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NotifyMsg::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NotifyMsg::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NotifyMsg::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& NotifyMsg::username() const {
  // @@protoc_insertion_point(field_get:FromCs.NotifyMsg.Username)
  return username_.GetNoArena();
}
inline void NotifyMsg::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.NotifyMsg.Username)
}
#if LANG_CXX11
inline void NotifyMsg::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.NotifyMsg.Username)
}
#endif
inline void NotifyMsg::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.NotifyMsg.Username)
}
inline void NotifyMsg::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.NotifyMsg.Username)
}
inline ::std::string* NotifyMsg::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:FromCs.NotifyMsg.Username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NotifyMsg::release_username() {
  // @@protoc_insertion_point(field_release:FromCs.NotifyMsg.Username)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NotifyMsg::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:FromCs.NotifyMsg.Username)
}

// optional string Pass = 4;
inline bool NotifyMsg::has_pass() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NotifyMsg::set_has_pass() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NotifyMsg::clear_has_pass() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NotifyMsg::clear_pass() {
  pass_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pass();
}
inline const ::std::string& NotifyMsg::pass() const {
  // @@protoc_insertion_point(field_get:FromCs.NotifyMsg.Pass)
  return pass_.GetNoArena();
}
inline void NotifyMsg::set_pass(const ::std::string& value) {
  set_has_pass();
  pass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.NotifyMsg.Pass)
}
#if LANG_CXX11
inline void NotifyMsg::set_pass(::std::string&& value) {
  set_has_pass();
  pass_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.NotifyMsg.Pass)
}
#endif
inline void NotifyMsg::set_pass(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pass();
  pass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.NotifyMsg.Pass)
}
inline void NotifyMsg::set_pass(const char* value, size_t size) {
  set_has_pass();
  pass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.NotifyMsg.Pass)
}
inline ::std::string* NotifyMsg::mutable_pass() {
  set_has_pass();
  // @@protoc_insertion_point(field_mutable:FromCs.NotifyMsg.Pass)
  return pass_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NotifyMsg::release_pass() {
  // @@protoc_insertion_point(field_release:FromCs.NotifyMsg.Pass)
  clear_has_pass();
  return pass_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NotifyMsg::set_allocated_pass(::std::string* pass) {
  if (pass != NULL) {
    set_has_pass();
  } else {
    clear_has_pass();
  }
  pass_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pass);
  // @@protoc_insertion_point(field_set_allocated:FromCs.NotifyMsg.Pass)
}

// optional string Imgurl = 5;
inline bool NotifyMsg::has_imgurl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NotifyMsg::set_has_imgurl() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NotifyMsg::clear_has_imgurl() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NotifyMsg::clear_imgurl() {
  imgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_imgurl();
}
inline const ::std::string& NotifyMsg::imgurl() const {
  // @@protoc_insertion_point(field_get:FromCs.NotifyMsg.Imgurl)
  return imgurl_.GetNoArena();
}
inline void NotifyMsg::set_imgurl(const ::std::string& value) {
  set_has_imgurl();
  imgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.NotifyMsg.Imgurl)
}
#if LANG_CXX11
inline void NotifyMsg::set_imgurl(::std::string&& value) {
  set_has_imgurl();
  imgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.NotifyMsg.Imgurl)
}
#endif
inline void NotifyMsg::set_imgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_imgurl();
  imgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.NotifyMsg.Imgurl)
}
inline void NotifyMsg::set_imgurl(const char* value, size_t size) {
  set_has_imgurl();
  imgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.NotifyMsg.Imgurl)
}
inline ::std::string* NotifyMsg::mutable_imgurl() {
  set_has_imgurl();
  // @@protoc_insertion_point(field_mutable:FromCs.NotifyMsg.Imgurl)
  return imgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NotifyMsg::release_imgurl() {
  // @@protoc_insertion_point(field_release:FromCs.NotifyMsg.Imgurl)
  clear_has_imgurl();
  return imgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NotifyMsg::set_allocated_imgurl(::std::string* imgurl) {
  if (imgurl != NULL) {
    set_has_imgurl();
  } else {
    clear_has_imgurl();
  }
  imgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imgurl);
  // @@protoc_insertion_point(field_set_allocated:FromCs.NotifyMsg.Imgurl)
}

// optional int32 Unkownint6 = 6;
inline bool NotifyMsg::has_unkownint6() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NotifyMsg::set_has_unkownint6() {
  _has_bits_[0] |= 0x00000080u;
}
inline void NotifyMsg::clear_has_unkownint6() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void NotifyMsg::clear_unkownint6() {
  unkownint6_ = 0;
  clear_has_unkownint6();
}
inline ::google::protobuf::int32 NotifyMsg::unkownint6() const {
  // @@protoc_insertion_point(field_get:FromCs.NotifyMsg.Unkownint6)
  return unkownint6_;
}
inline void NotifyMsg::set_unkownint6(::google::protobuf::int32 value) {
  set_has_unkownint6();
  unkownint6_ = value;
  // @@protoc_insertion_point(field_set:FromCs.NotifyMsg.Unkownint6)
}

// optional string Nickname = 7;
inline bool NotifyMsg::has_nickname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NotifyMsg::set_has_nickname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NotifyMsg::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NotifyMsg::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
inline const ::std::string& NotifyMsg::nickname() const {
  // @@protoc_insertion_point(field_get:FromCs.NotifyMsg.Nickname)
  return nickname_.GetNoArena();
}
inline void NotifyMsg::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.NotifyMsg.Nickname)
}
#if LANG_CXX11
inline void NotifyMsg::set_nickname(::std::string&& value) {
  set_has_nickname();
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.NotifyMsg.Nickname)
}
#endif
inline void NotifyMsg::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.NotifyMsg.Nickname)
}
inline void NotifyMsg::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.NotifyMsg.Nickname)
}
inline ::std::string* NotifyMsg::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:FromCs.NotifyMsg.Nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NotifyMsg::release_nickname() {
  // @@protoc_insertion_point(field_release:FromCs.NotifyMsg.Nickname)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NotifyMsg::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:FromCs.NotifyMsg.Nickname)
}

// optional int32 Unkownint8 = 8;
inline bool NotifyMsg::has_unkownint8() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void NotifyMsg::set_has_unkownint8() {
  _has_bits_[0] |= 0x00000100u;
}
inline void NotifyMsg::clear_has_unkownint8() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void NotifyMsg::clear_unkownint8() {
  unkownint8_ = 0;
  clear_has_unkownint8();
}
inline ::google::protobuf::int32 NotifyMsg::unkownint8() const {
  // @@protoc_insertion_point(field_get:FromCs.NotifyMsg.Unkownint8)
  return unkownint8_;
}
inline void NotifyMsg::set_unkownint8(::google::protobuf::int32 value) {
  set_has_unkownint8();
  unkownint8_ = value;
  // @@protoc_insertion_point(field_set:FromCs.NotifyMsg.Unkownint8)
}

// optional int32 Unkownint10 = 10;
inline bool NotifyMsg::has_unkownint10() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void NotifyMsg::set_has_unkownint10() {
  _has_bits_[0] |= 0x00000200u;
}
inline void NotifyMsg::clear_has_unkownint10() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void NotifyMsg::clear_unkownint10() {
  unkownint10_ = 0;
  clear_has_unkownint10();
}
inline ::google::protobuf::int32 NotifyMsg::unkownint10() const {
  // @@protoc_insertion_point(field_get:FromCs.NotifyMsg.Unkownint10)
  return unkownint10_;
}
inline void NotifyMsg::set_unkownint10(::google::protobuf::int32 value) {
  set_has_unkownint10();
  unkownint10_ = value;
  // @@protoc_insertion_point(field_set:FromCs.NotifyMsg.Unkownint10)
}

// optional string Platform = 11;
inline bool NotifyMsg::has_platform() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NotifyMsg::set_has_platform() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NotifyMsg::clear_has_platform() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NotifyMsg::clear_platform() {
  platform_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_platform();
}
inline const ::std::string& NotifyMsg::platform() const {
  // @@protoc_insertion_point(field_get:FromCs.NotifyMsg.Platform)
  return platform_.GetNoArena();
}
inline void NotifyMsg::set_platform(const ::std::string& value) {
  set_has_platform();
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.NotifyMsg.Platform)
}
#if LANG_CXX11
inline void NotifyMsg::set_platform(::std::string&& value) {
  set_has_platform();
  platform_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.NotifyMsg.Platform)
}
#endif
inline void NotifyMsg::set_platform(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_platform();
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.NotifyMsg.Platform)
}
inline void NotifyMsg::set_platform(const char* value, size_t size) {
  set_has_platform();
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.NotifyMsg.Platform)
}
inline ::std::string* NotifyMsg::mutable_platform() {
  set_has_platform();
  // @@protoc_insertion_point(field_mutable:FromCs.NotifyMsg.Platform)
  return platform_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NotifyMsg::release_platform() {
  // @@protoc_insertion_point(field_release:FromCs.NotifyMsg.Platform)
  clear_has_platform();
  return platform_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NotifyMsg::set_allocated_platform(::std::string* platform) {
  if (platform != NULL) {
    set_has_platform();
  } else {
    clear_has_platform();
  }
  platform_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), platform);
  // @@protoc_insertion_point(field_set_allocated:FromCs.NotifyMsg.Platform)
}

// -------------------------------------------------------------------

// HTTPHeader

// optional string Key = 1;
inline bool HTTPHeader::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HTTPHeader::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HTTPHeader::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HTTPHeader::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& HTTPHeader::key() const {
  // @@protoc_insertion_point(field_get:FromCs.HTTPHeader.Key)
  return key_.GetNoArena();
}
inline void HTTPHeader::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.HTTPHeader.Key)
}
#if LANG_CXX11
inline void HTTPHeader::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.HTTPHeader.Key)
}
#endif
inline void HTTPHeader::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.HTTPHeader.Key)
}
inline void HTTPHeader::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.HTTPHeader.Key)
}
inline ::std::string* HTTPHeader::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:FromCs.HTTPHeader.Key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HTTPHeader::release_key() {
  // @@protoc_insertion_point(field_release:FromCs.HTTPHeader.Key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HTTPHeader::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:FromCs.HTTPHeader.Key)
}

// optional string Value = 2;
inline bool HTTPHeader::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HTTPHeader::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HTTPHeader::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HTTPHeader::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& HTTPHeader::value() const {
  // @@protoc_insertion_point(field_get:FromCs.HTTPHeader.Value)
  return value_.GetNoArena();
}
inline void HTTPHeader::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.HTTPHeader.Value)
}
#if LANG_CXX11
inline void HTTPHeader::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.HTTPHeader.Value)
}
#endif
inline void HTTPHeader::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.HTTPHeader.Value)
}
inline void HTTPHeader::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.HTTPHeader.Value)
}
inline ::std::string* HTTPHeader::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:FromCs.HTTPHeader.Value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HTTPHeader::release_value() {
  // @@protoc_insertion_point(field_release:FromCs.HTTPHeader.Value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HTTPHeader::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:FromCs.HTTPHeader.Value)
}

// -------------------------------------------------------------------

// DeepLinkBitSet

// optional int64 BitValue = 1;
inline bool DeepLinkBitSet::has_bitvalue() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeepLinkBitSet::set_has_bitvalue() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeepLinkBitSet::clear_has_bitvalue() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeepLinkBitSet::clear_bitvalue() {
  bitvalue_ = GOOGLE_LONGLONG(0);
  clear_has_bitvalue();
}
inline ::google::protobuf::int64 DeepLinkBitSet::bitvalue() const {
  // @@protoc_insertion_point(field_get:FromCs.DeepLinkBitSet.BitValue)
  return bitvalue_;
}
inline void DeepLinkBitSet::set_bitvalue(::google::protobuf::int64 value) {
  set_has_bitvalue();
  bitvalue_ = value;
  // @@protoc_insertion_point(field_set:FromCs.DeepLinkBitSet.BitValue)
}

// -------------------------------------------------------------------

// ChatRoomMemberData

// optional int32 MemberCount = 1;
inline bool ChatRoomMemberData::has_membercount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatRoomMemberData::set_has_membercount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatRoomMemberData::clear_has_membercount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatRoomMemberData::clear_membercount() {
  membercount_ = 0;
  clear_has_membercount();
}
inline ::google::protobuf::int32 ChatRoomMemberData::membercount() const {
  // @@protoc_insertion_point(field_get:FromCs.ChatRoomMemberData.MemberCount)
  return membercount_;
}
inline void ChatRoomMemberData::set_membercount(::google::protobuf::int32 value) {
  set_has_membercount();
  membercount_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ChatRoomMemberData.MemberCount)
}

// optional .FromCs.sKBuiltinBufferT chatroomMember_ = 2;
inline bool ChatRoomMemberData::has_chatroommember_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatRoomMemberData::set_has_chatroommember_() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatRoomMemberData::clear_has_chatroommember_() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatRoomMemberData::clear_chatroommember_() {
  if (chatroommember__ != NULL) chatroommember__->::FromCs::sKBuiltinBufferT::Clear();
  clear_has_chatroommember_();
}
inline const ::FromCs::sKBuiltinBufferT& ChatRoomMemberData::chatroommember_() const {
  // @@protoc_insertion_point(field_get:FromCs.ChatRoomMemberData.chatroomMember_)
  return chatroommember__ != NULL ? *chatroommember__
                         : *::FromCs::sKBuiltinBufferT::internal_default_instance();
}
inline ::FromCs::sKBuiltinBufferT* ChatRoomMemberData::mutable_chatroommember_() {
  set_has_chatroommember_();
  if (chatroommember__ == NULL) {
    chatroommember__ = new ::FromCs::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.ChatRoomMemberData.chatroomMember_)
  return chatroommember__;
}
inline ::FromCs::sKBuiltinBufferT* ChatRoomMemberData::release_chatroommember_() {
  // @@protoc_insertion_point(field_release:FromCs.ChatRoomMemberData.chatroomMember_)
  clear_has_chatroommember_();
  ::FromCs::sKBuiltinBufferT* temp = chatroommember__;
  chatroommember__ = NULL;
  return temp;
}
inline void ChatRoomMemberData::set_allocated_chatroommember_(::FromCs::sKBuiltinBufferT* chatroommember_) {
  delete chatroommember__;
  chatroommember__ = chatroommember_;
  if (chatroommember_) {
    set_has_chatroommember_();
  } else {
    clear_has_chatroommember_();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.ChatRoomMemberData.chatroomMember_)
}

// optional int32 InfoMask = 3;
inline bool ChatRoomMemberData::has_infomask() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChatRoomMemberData::set_has_infomask() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChatRoomMemberData::clear_has_infomask() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChatRoomMemberData::clear_infomask() {
  infomask_ = 0;
  clear_has_infomask();
}
inline ::google::protobuf::int32 ChatRoomMemberData::infomask() const {
  // @@protoc_insertion_point(field_get:FromCs.ChatRoomMemberData.InfoMask)
  return infomask_;
}
inline void ChatRoomMemberData::set_infomask(::google::protobuf::int32 value) {
  set_has_infomask();
  infomask_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ChatRoomMemberData.InfoMask)
}

// -------------------------------------------------------------------

// ChatroomMemberInfo

// optional string UserName = 1;
inline bool ChatroomMemberInfo::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatroomMemberInfo::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatroomMemberInfo::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatroomMemberInfo::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& ChatroomMemberInfo::username() const {
  // @@protoc_insertion_point(field_get:FromCs.ChatroomMemberInfo.UserName)
  return username_.GetNoArena();
}
inline void ChatroomMemberInfo::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ChatroomMemberInfo.UserName)
}
#if LANG_CXX11
inline void ChatroomMemberInfo::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ChatroomMemberInfo.UserName)
}
#endif
inline void ChatroomMemberInfo::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ChatroomMemberInfo.UserName)
}
inline void ChatroomMemberInfo::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ChatroomMemberInfo.UserName)
}
inline ::std::string* ChatroomMemberInfo::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:FromCs.ChatroomMemberInfo.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatroomMemberInfo::release_username() {
  // @@protoc_insertion_point(field_release:FromCs.ChatroomMemberInfo.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatroomMemberInfo::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ChatroomMemberInfo.UserName)
}

// optional string NickName = 2;
inline bool ChatroomMemberInfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatroomMemberInfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatroomMemberInfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatroomMemberInfo::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
inline const ::std::string& ChatroomMemberInfo::nickname() const {
  // @@protoc_insertion_point(field_get:FromCs.ChatroomMemberInfo.NickName)
  return nickname_.GetNoArena();
}
inline void ChatroomMemberInfo::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ChatroomMemberInfo.NickName)
}
#if LANG_CXX11
inline void ChatroomMemberInfo::set_nickname(::std::string&& value) {
  set_has_nickname();
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ChatroomMemberInfo.NickName)
}
#endif
inline void ChatroomMemberInfo::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ChatroomMemberInfo.NickName)
}
inline void ChatroomMemberInfo::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ChatroomMemberInfo.NickName)
}
inline ::std::string* ChatroomMemberInfo::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:FromCs.ChatroomMemberInfo.NickName)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatroomMemberInfo::release_nickname() {
  // @@protoc_insertion_point(field_release:FromCs.ChatroomMemberInfo.NickName)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatroomMemberInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ChatroomMemberInfo.NickName)
}

// optional int32 unknoewn = 6;
inline bool ChatroomMemberInfo::has_unknoewn() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChatroomMemberInfo::set_has_unknoewn() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChatroomMemberInfo::clear_has_unknoewn() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChatroomMemberInfo::clear_unknoewn() {
  unknoewn_ = 0;
  clear_has_unknoewn();
}
inline ::google::protobuf::int32 ChatroomMemberInfo::unknoewn() const {
  // @@protoc_insertion_point(field_get:FromCs.ChatroomMemberInfo.unknoewn)
  return unknoewn_;
}
inline void ChatroomMemberInfo::set_unknoewn(::google::protobuf::int32 value) {
  set_has_unknoewn();
  unknoewn_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ChatroomMemberInfo.unknoewn)
}

// optional string Owner = 7;
inline bool ChatroomMemberInfo::has_owner() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChatroomMemberInfo::set_has_owner() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChatroomMemberInfo::clear_has_owner() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChatroomMemberInfo::clear_owner() {
  owner_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_owner();
}
inline const ::std::string& ChatroomMemberInfo::owner() const {
  // @@protoc_insertion_point(field_get:FromCs.ChatroomMemberInfo.Owner)
  return owner_.GetNoArena();
}
inline void ChatroomMemberInfo::set_owner(const ::std::string& value) {
  set_has_owner();
  owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ChatroomMemberInfo.Owner)
}
#if LANG_CXX11
inline void ChatroomMemberInfo::set_owner(::std::string&& value) {
  set_has_owner();
  owner_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ChatroomMemberInfo.Owner)
}
#endif
inline void ChatroomMemberInfo::set_owner(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_owner();
  owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ChatroomMemberInfo.Owner)
}
inline void ChatroomMemberInfo::set_owner(const char* value, size_t size) {
  set_has_owner();
  owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ChatroomMemberInfo.Owner)
}
inline ::std::string* ChatroomMemberInfo::mutable_owner() {
  set_has_owner();
  // @@protoc_insertion_point(field_mutable:FromCs.ChatroomMemberInfo.Owner)
  return owner_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatroomMemberInfo::release_owner() {
  // @@protoc_insertion_point(field_release:FromCs.ChatroomMemberInfo.Owner)
  clear_has_owner();
  return owner_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatroomMemberInfo::set_allocated_owner(::std::string* owner) {
  if (owner != NULL) {
    set_has_owner();
  } else {
    clear_has_owner();
  }
  owner_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), owner);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ChatroomMemberInfo.Owner)
}

// optional int32 Int8 = 8;
inline bool ChatroomMemberInfo::has_int8() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChatroomMemberInfo::set_has_int8() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChatroomMemberInfo::clear_has_int8() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChatroomMemberInfo::clear_int8() {
  int8_ = 0;
  clear_has_int8();
}
inline ::google::protobuf::int32 ChatroomMemberInfo::int8() const {
  // @@protoc_insertion_point(field_get:FromCs.ChatroomMemberInfo.Int8)
  return int8_;
}
inline void ChatroomMemberInfo::set_int8(::google::protobuf::int32 value) {
  set_has_int8();
  int8_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ChatroomMemberInfo.Int8)
}

// -------------------------------------------------------------------

// ExitChatroomObject

// optional .FromCs.sKBuiltinstringT Chatroom = 1;
inline bool ExitChatroomObject::has_chatroom() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExitChatroomObject::set_has_chatroom() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExitChatroomObject::clear_has_chatroom() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExitChatroomObject::clear_chatroom() {
  if (chatroom_ != NULL) chatroom_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_chatroom();
}
inline const ::FromCs::sKBuiltinstringT& ExitChatroomObject::chatroom() const {
  // @@protoc_insertion_point(field_get:FromCs.ExitChatroomObject.Chatroom)
  return chatroom_ != NULL ? *chatroom_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* ExitChatroomObject::mutable_chatroom() {
  set_has_chatroom();
  if (chatroom_ == NULL) {
    chatroom_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.ExitChatroomObject.Chatroom)
  return chatroom_;
}
inline ::FromCs::sKBuiltinstringT* ExitChatroomObject::release_chatroom() {
  // @@protoc_insertion_point(field_release:FromCs.ExitChatroomObject.Chatroom)
  clear_has_chatroom();
  ::FromCs::sKBuiltinstringT* temp = chatroom_;
  chatroom_ = NULL;
  return temp;
}
inline void ExitChatroomObject::set_allocated_chatroom(::FromCs::sKBuiltinstringT* chatroom) {
  delete chatroom_;
  chatroom_ = chatroom;
  if (chatroom) {
    set_has_chatroom();
  } else {
    clear_has_chatroom();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.ExitChatroomObject.Chatroom)
}

// optional .FromCs.sKBuiltinstringT UserName = 2;
inline bool ExitChatroomObject::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExitChatroomObject::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExitChatroomObject::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExitChatroomObject::clear_username() {
  if (username_ != NULL) username_->::FromCs::sKBuiltinstringT::Clear();
  clear_has_username();
}
inline const ::FromCs::sKBuiltinstringT& ExitChatroomObject::username() const {
  // @@protoc_insertion_point(field_get:FromCs.ExitChatroomObject.UserName)
  return username_ != NULL ? *username_
                         : *::FromCs::sKBuiltinstringT::internal_default_instance();
}
inline ::FromCs::sKBuiltinstringT* ExitChatroomObject::mutable_username() {
  set_has_username();
  if (username_ == NULL) {
    username_ = new ::FromCs::sKBuiltinstringT;
  }
  // @@protoc_insertion_point(field_mutable:FromCs.ExitChatroomObject.UserName)
  return username_;
}
inline ::FromCs::sKBuiltinstringT* ExitChatroomObject::release_username() {
  // @@protoc_insertion_point(field_release:FromCs.ExitChatroomObject.UserName)
  clear_has_username();
  ::FromCs::sKBuiltinstringT* temp = username_;
  username_ = NULL;
  return temp;
}
inline void ExitChatroomObject::set_allocated_username(::FromCs::sKBuiltinstringT* username) {
  delete username_;
  username_ = username;
  if (username) {
    set_has_username();
  } else {
    clear_has_username();
  }
  // @@protoc_insertion_point(field_set_allocated:FromCs.ExitChatroomObject.UserName)
}

// -------------------------------------------------------------------

// ExtDeviceLoginConfirmErrorRet

// optional int32 IconType = 1;
inline bool ExtDeviceLoginConfirmErrorRet::has_icontype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExtDeviceLoginConfirmErrorRet::set_has_icontype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExtDeviceLoginConfirmErrorRet::clear_has_icontype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExtDeviceLoginConfirmErrorRet::clear_icontype() {
  icontype_ = 0;
  clear_has_icontype();
}
inline ::google::protobuf::int32 ExtDeviceLoginConfirmErrorRet::icontype() const {
  // @@protoc_insertion_point(field_get:FromCs.ExtDeviceLoginConfirmErrorRet.IconType)
  return icontype_;
}
inline void ExtDeviceLoginConfirmErrorRet::set_icontype(::google::protobuf::int32 value) {
  set_has_icontype();
  icontype_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ExtDeviceLoginConfirmErrorRet.IconType)
}

// optional string ContentStr = 2;
inline bool ExtDeviceLoginConfirmErrorRet::has_contentstr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExtDeviceLoginConfirmErrorRet::set_has_contentstr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExtDeviceLoginConfirmErrorRet::clear_has_contentstr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExtDeviceLoginConfirmErrorRet::clear_contentstr() {
  contentstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_contentstr();
}
inline const ::std::string& ExtDeviceLoginConfirmErrorRet::contentstr() const {
  // @@protoc_insertion_point(field_get:FromCs.ExtDeviceLoginConfirmErrorRet.ContentStr)
  return contentstr_.GetNoArena();
}
inline void ExtDeviceLoginConfirmErrorRet::set_contentstr(const ::std::string& value) {
  set_has_contentstr();
  contentstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ExtDeviceLoginConfirmErrorRet.ContentStr)
}
#if LANG_CXX11
inline void ExtDeviceLoginConfirmErrorRet::set_contentstr(::std::string&& value) {
  set_has_contentstr();
  contentstr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ExtDeviceLoginConfirmErrorRet.ContentStr)
}
#endif
inline void ExtDeviceLoginConfirmErrorRet::set_contentstr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_contentstr();
  contentstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ExtDeviceLoginConfirmErrorRet.ContentStr)
}
inline void ExtDeviceLoginConfirmErrorRet::set_contentstr(const char* value, size_t size) {
  set_has_contentstr();
  contentstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ExtDeviceLoginConfirmErrorRet.ContentStr)
}
inline ::std::string* ExtDeviceLoginConfirmErrorRet::mutable_contentstr() {
  set_has_contentstr();
  // @@protoc_insertion_point(field_mutable:FromCs.ExtDeviceLoginConfirmErrorRet.ContentStr)
  return contentstr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExtDeviceLoginConfirmErrorRet::release_contentstr() {
  // @@protoc_insertion_point(field_release:FromCs.ExtDeviceLoginConfirmErrorRet.ContentStr)
  clear_has_contentstr();
  return contentstr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExtDeviceLoginConfirmErrorRet::set_allocated_contentstr(::std::string* contentstr) {
  if (contentstr != NULL) {
    set_has_contentstr();
  } else {
    clear_has_contentstr();
  }
  contentstr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contentstr);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ExtDeviceLoginConfirmErrorRet.ContentStr)
}

// -------------------------------------------------------------------

// ExtDeviceLoginConfirmExpiredRet

// optional int32 IconType = 1;
inline bool ExtDeviceLoginConfirmExpiredRet::has_icontype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ExtDeviceLoginConfirmExpiredRet::set_has_icontype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ExtDeviceLoginConfirmExpiredRet::clear_has_icontype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ExtDeviceLoginConfirmExpiredRet::clear_icontype() {
  icontype_ = 0;
  clear_has_icontype();
}
inline ::google::protobuf::int32 ExtDeviceLoginConfirmExpiredRet::icontype() const {
  // @@protoc_insertion_point(field_get:FromCs.ExtDeviceLoginConfirmExpiredRet.IconType)
  return icontype_;
}
inline void ExtDeviceLoginConfirmExpiredRet::set_icontype(::google::protobuf::int32 value) {
  set_has_icontype();
  icontype_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ExtDeviceLoginConfirmExpiredRet.IconType)
}

// optional string ContentStr = 2;
inline bool ExtDeviceLoginConfirmExpiredRet::has_contentstr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExtDeviceLoginConfirmExpiredRet::set_has_contentstr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExtDeviceLoginConfirmExpiredRet::clear_has_contentstr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExtDeviceLoginConfirmExpiredRet::clear_contentstr() {
  contentstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_contentstr();
}
inline const ::std::string& ExtDeviceLoginConfirmExpiredRet::contentstr() const {
  // @@protoc_insertion_point(field_get:FromCs.ExtDeviceLoginConfirmExpiredRet.ContentStr)
  return contentstr_.GetNoArena();
}
inline void ExtDeviceLoginConfirmExpiredRet::set_contentstr(const ::std::string& value) {
  set_has_contentstr();
  contentstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ExtDeviceLoginConfirmExpiredRet.ContentStr)
}
#if LANG_CXX11
inline void ExtDeviceLoginConfirmExpiredRet::set_contentstr(::std::string&& value) {
  set_has_contentstr();
  contentstr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ExtDeviceLoginConfirmExpiredRet.ContentStr)
}
#endif
inline void ExtDeviceLoginConfirmExpiredRet::set_contentstr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_contentstr();
  contentstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ExtDeviceLoginConfirmExpiredRet.ContentStr)
}
inline void ExtDeviceLoginConfirmExpiredRet::set_contentstr(const char* value, size_t size) {
  set_has_contentstr();
  contentstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ExtDeviceLoginConfirmExpiredRet.ContentStr)
}
inline ::std::string* ExtDeviceLoginConfirmExpiredRet::mutable_contentstr() {
  set_has_contentstr();
  // @@protoc_insertion_point(field_mutable:FromCs.ExtDeviceLoginConfirmExpiredRet.ContentStr)
  return contentstr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExtDeviceLoginConfirmExpiredRet::release_contentstr() {
  // @@protoc_insertion_point(field_release:FromCs.ExtDeviceLoginConfirmExpiredRet.ContentStr)
  clear_has_contentstr();
  return contentstr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExtDeviceLoginConfirmExpiredRet::set_allocated_contentstr(::std::string* contentstr) {
  if (contentstr != NULL) {
    set_has_contentstr();
  } else {
    clear_has_contentstr();
  }
  contentstr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contentstr);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ExtDeviceLoginConfirmExpiredRet.ContentStr)
}

// optional string BigHeadImgUrl = 4;
inline bool ExtDeviceLoginConfirmExpiredRet::has_bigheadimgurl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExtDeviceLoginConfirmExpiredRet::set_has_bigheadimgurl() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ExtDeviceLoginConfirmExpiredRet::clear_has_bigheadimgurl() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ExtDeviceLoginConfirmExpiredRet::clear_bigheadimgurl() {
  bigheadimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bigheadimgurl();
}
inline const ::std::string& ExtDeviceLoginConfirmExpiredRet::bigheadimgurl() const {
  // @@protoc_insertion_point(field_get:FromCs.ExtDeviceLoginConfirmExpiredRet.BigHeadImgUrl)
  return bigheadimgurl_.GetNoArena();
}
inline void ExtDeviceLoginConfirmExpiredRet::set_bigheadimgurl(const ::std::string& value) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ExtDeviceLoginConfirmExpiredRet.BigHeadImgUrl)
}
#if LANG_CXX11
inline void ExtDeviceLoginConfirmExpiredRet::set_bigheadimgurl(::std::string&& value) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ExtDeviceLoginConfirmExpiredRet.BigHeadImgUrl)
}
#endif
inline void ExtDeviceLoginConfirmExpiredRet::set_bigheadimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ExtDeviceLoginConfirmExpiredRet.BigHeadImgUrl)
}
inline void ExtDeviceLoginConfirmExpiredRet::set_bigheadimgurl(const char* value, size_t size) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ExtDeviceLoginConfirmExpiredRet.BigHeadImgUrl)
}
inline ::std::string* ExtDeviceLoginConfirmExpiredRet::mutable_bigheadimgurl() {
  set_has_bigheadimgurl();
  // @@protoc_insertion_point(field_mutable:FromCs.ExtDeviceLoginConfirmExpiredRet.BigHeadImgUrl)
  return bigheadimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExtDeviceLoginConfirmExpiredRet::release_bigheadimgurl() {
  // @@protoc_insertion_point(field_release:FromCs.ExtDeviceLoginConfirmExpiredRet.BigHeadImgUrl)
  clear_has_bigheadimgurl();
  return bigheadimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExtDeviceLoginConfirmExpiredRet::set_allocated_bigheadimgurl(::std::string* bigheadimgurl) {
  if (bigheadimgurl != NULL) {
    set_has_bigheadimgurl();
  } else {
    clear_has_bigheadimgurl();
  }
  bigheadimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bigheadimgurl);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ExtDeviceLoginConfirmExpiredRet.BigHeadImgUrl)
}

// optional string SmallHeadImgUrl = 5;
inline bool ExtDeviceLoginConfirmExpiredRet::has_smallheadimgurl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ExtDeviceLoginConfirmExpiredRet::set_has_smallheadimgurl() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ExtDeviceLoginConfirmExpiredRet::clear_has_smallheadimgurl() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ExtDeviceLoginConfirmExpiredRet::clear_smallheadimgurl() {
  smallheadimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_smallheadimgurl();
}
inline const ::std::string& ExtDeviceLoginConfirmExpiredRet::smallheadimgurl() const {
  // @@protoc_insertion_point(field_get:FromCs.ExtDeviceLoginConfirmExpiredRet.SmallHeadImgUrl)
  return smallheadimgurl_.GetNoArena();
}
inline void ExtDeviceLoginConfirmExpiredRet::set_smallheadimgurl(const ::std::string& value) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ExtDeviceLoginConfirmExpiredRet.SmallHeadImgUrl)
}
#if LANG_CXX11
inline void ExtDeviceLoginConfirmExpiredRet::set_smallheadimgurl(::std::string&& value) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ExtDeviceLoginConfirmExpiredRet.SmallHeadImgUrl)
}
#endif
inline void ExtDeviceLoginConfirmExpiredRet::set_smallheadimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ExtDeviceLoginConfirmExpiredRet.SmallHeadImgUrl)
}
inline void ExtDeviceLoginConfirmExpiredRet::set_smallheadimgurl(const char* value, size_t size) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ExtDeviceLoginConfirmExpiredRet.SmallHeadImgUrl)
}
inline ::std::string* ExtDeviceLoginConfirmExpiredRet::mutable_smallheadimgurl() {
  set_has_smallheadimgurl();
  // @@protoc_insertion_point(field_mutable:FromCs.ExtDeviceLoginConfirmExpiredRet.SmallHeadImgUrl)
  return smallheadimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExtDeviceLoginConfirmExpiredRet::release_smallheadimgurl() {
  // @@protoc_insertion_point(field_release:FromCs.ExtDeviceLoginConfirmExpiredRet.SmallHeadImgUrl)
  clear_has_smallheadimgurl();
  return smallheadimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExtDeviceLoginConfirmExpiredRet::set_allocated_smallheadimgurl(::std::string* smallheadimgurl) {
  if (smallheadimgurl != NULL) {
    set_has_smallheadimgurl();
  } else {
    clear_has_smallheadimgurl();
  }
  smallheadimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smallheadimgurl);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ExtDeviceLoginConfirmExpiredRet.SmallHeadImgUrl)
}

// optional int32 unknoewn = 6;
inline bool ExtDeviceLoginConfirmExpiredRet::has_unknoewn() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ExtDeviceLoginConfirmExpiredRet::set_has_unknoewn() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ExtDeviceLoginConfirmExpiredRet::clear_has_unknoewn() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ExtDeviceLoginConfirmExpiredRet::clear_unknoewn() {
  unknoewn_ = 0;
  clear_has_unknoewn();
}
inline ::google::protobuf::int32 ExtDeviceLoginConfirmExpiredRet::unknoewn() const {
  // @@protoc_insertion_point(field_get:FromCs.ExtDeviceLoginConfirmExpiredRet.unknoewn)
  return unknoewn_;
}
inline void ExtDeviceLoginConfirmExpiredRet::set_unknoewn(::google::protobuf::int32 value) {
  set_has_unknoewn();
  unknoewn_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ExtDeviceLoginConfirmExpiredRet.unknoewn)
}

// optional string ButtonStr = 3;
inline bool ExtDeviceLoginConfirmExpiredRet::has_buttonstr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExtDeviceLoginConfirmExpiredRet::set_has_buttonstr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExtDeviceLoginConfirmExpiredRet::clear_has_buttonstr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExtDeviceLoginConfirmExpiredRet::clear_buttonstr() {
  buttonstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_buttonstr();
}
inline const ::std::string& ExtDeviceLoginConfirmExpiredRet::buttonstr() const {
  // @@protoc_insertion_point(field_get:FromCs.ExtDeviceLoginConfirmExpiredRet.ButtonStr)
  return buttonstr_.GetNoArena();
}
inline void ExtDeviceLoginConfirmExpiredRet::set_buttonstr(const ::std::string& value) {
  set_has_buttonstr();
  buttonstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ExtDeviceLoginConfirmExpiredRet.ButtonStr)
}
#if LANG_CXX11
inline void ExtDeviceLoginConfirmExpiredRet::set_buttonstr(::std::string&& value) {
  set_has_buttonstr();
  buttonstr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ExtDeviceLoginConfirmExpiredRet.ButtonStr)
}
#endif
inline void ExtDeviceLoginConfirmExpiredRet::set_buttonstr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_buttonstr();
  buttonstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ExtDeviceLoginConfirmExpiredRet.ButtonStr)
}
inline void ExtDeviceLoginConfirmExpiredRet::set_buttonstr(const char* value, size_t size) {
  set_has_buttonstr();
  buttonstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ExtDeviceLoginConfirmExpiredRet.ButtonStr)
}
inline ::std::string* ExtDeviceLoginConfirmExpiredRet::mutable_buttonstr() {
  set_has_buttonstr();
  // @@protoc_insertion_point(field_mutable:FromCs.ExtDeviceLoginConfirmExpiredRet.ButtonStr)
  return buttonstr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExtDeviceLoginConfirmExpiredRet::release_buttonstr() {
  // @@protoc_insertion_point(field_release:FromCs.ExtDeviceLoginConfirmExpiredRet.ButtonStr)
  clear_has_buttonstr();
  return buttonstr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExtDeviceLoginConfirmExpiredRet::set_allocated_buttonstr(::std::string* buttonstr) {
  if (buttonstr != NULL) {
    set_has_buttonstr();
  } else {
    clear_has_buttonstr();
  }
  buttonstr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buttonstr);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ExtDeviceLoginConfirmExpiredRet.ButtonStr)
}

// -------------------------------------------------------------------

// ExtDeviceLoginConfirmOKRet

// optional int32 IconType = 1;
inline bool ExtDeviceLoginConfirmOKRet::has_icontype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ExtDeviceLoginConfirmOKRet::set_has_icontype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ExtDeviceLoginConfirmOKRet::clear_has_icontype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ExtDeviceLoginConfirmOKRet::clear_icontype() {
  icontype_ = 0;
  clear_has_icontype();
}
inline ::google::protobuf::int32 ExtDeviceLoginConfirmOKRet::icontype() const {
  // @@protoc_insertion_point(field_get:FromCs.ExtDeviceLoginConfirmOKRet.IconType)
  return icontype_;
}
inline void ExtDeviceLoginConfirmOKRet::set_icontype(::google::protobuf::int32 value) {
  set_has_icontype();
  icontype_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ExtDeviceLoginConfirmOKRet.IconType)
}

// optional string ContentStr = 2;
inline bool ExtDeviceLoginConfirmOKRet::has_contentstr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExtDeviceLoginConfirmOKRet::set_has_contentstr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExtDeviceLoginConfirmOKRet::clear_has_contentstr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExtDeviceLoginConfirmOKRet::clear_contentstr() {
  contentstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_contentstr();
}
inline const ::std::string& ExtDeviceLoginConfirmOKRet::contentstr() const {
  // @@protoc_insertion_point(field_get:FromCs.ExtDeviceLoginConfirmOKRet.ContentStr)
  return contentstr_.GetNoArena();
}
inline void ExtDeviceLoginConfirmOKRet::set_contentstr(const ::std::string& value) {
  set_has_contentstr();
  contentstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ExtDeviceLoginConfirmOKRet.ContentStr)
}
#if LANG_CXX11
inline void ExtDeviceLoginConfirmOKRet::set_contentstr(::std::string&& value) {
  set_has_contentstr();
  contentstr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ExtDeviceLoginConfirmOKRet.ContentStr)
}
#endif
inline void ExtDeviceLoginConfirmOKRet::set_contentstr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_contentstr();
  contentstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ExtDeviceLoginConfirmOKRet.ContentStr)
}
inline void ExtDeviceLoginConfirmOKRet::set_contentstr(const char* value, size_t size) {
  set_has_contentstr();
  contentstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ExtDeviceLoginConfirmOKRet.ContentStr)
}
inline ::std::string* ExtDeviceLoginConfirmOKRet::mutable_contentstr() {
  set_has_contentstr();
  // @@protoc_insertion_point(field_mutable:FromCs.ExtDeviceLoginConfirmOKRet.ContentStr)
  return contentstr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExtDeviceLoginConfirmOKRet::release_contentstr() {
  // @@protoc_insertion_point(field_release:FromCs.ExtDeviceLoginConfirmOKRet.ContentStr)
  clear_has_contentstr();
  return contentstr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExtDeviceLoginConfirmOKRet::set_allocated_contentstr(::std::string* contentstr) {
  if (contentstr != NULL) {
    set_has_contentstr();
  } else {
    clear_has_contentstr();
  }
  contentstr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contentstr);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ExtDeviceLoginConfirmOKRet.ContentStr)
}

// optional string ButtonOKStr = 3;
inline bool ExtDeviceLoginConfirmOKRet::has_buttonokstr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExtDeviceLoginConfirmOKRet::set_has_buttonokstr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExtDeviceLoginConfirmOKRet::clear_has_buttonokstr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExtDeviceLoginConfirmOKRet::clear_buttonokstr() {
  buttonokstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_buttonokstr();
}
inline const ::std::string& ExtDeviceLoginConfirmOKRet::buttonokstr() const {
  // @@protoc_insertion_point(field_get:FromCs.ExtDeviceLoginConfirmOKRet.ButtonOKStr)
  return buttonokstr_.GetNoArena();
}
inline void ExtDeviceLoginConfirmOKRet::set_buttonokstr(const ::std::string& value) {
  set_has_buttonokstr();
  buttonokstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ExtDeviceLoginConfirmOKRet.ButtonOKStr)
}
#if LANG_CXX11
inline void ExtDeviceLoginConfirmOKRet::set_buttonokstr(::std::string&& value) {
  set_has_buttonokstr();
  buttonokstr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ExtDeviceLoginConfirmOKRet.ButtonOKStr)
}
#endif
inline void ExtDeviceLoginConfirmOKRet::set_buttonokstr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_buttonokstr();
  buttonokstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ExtDeviceLoginConfirmOKRet.ButtonOKStr)
}
inline void ExtDeviceLoginConfirmOKRet::set_buttonokstr(const char* value, size_t size) {
  set_has_buttonokstr();
  buttonokstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ExtDeviceLoginConfirmOKRet.ButtonOKStr)
}
inline ::std::string* ExtDeviceLoginConfirmOKRet::mutable_buttonokstr() {
  set_has_buttonokstr();
  // @@protoc_insertion_point(field_mutable:FromCs.ExtDeviceLoginConfirmOKRet.ButtonOKStr)
  return buttonokstr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExtDeviceLoginConfirmOKRet::release_buttonokstr() {
  // @@protoc_insertion_point(field_release:FromCs.ExtDeviceLoginConfirmOKRet.ButtonOKStr)
  clear_has_buttonokstr();
  return buttonokstr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExtDeviceLoginConfirmOKRet::set_allocated_buttonokstr(::std::string* buttonokstr) {
  if (buttonokstr != NULL) {
    set_has_buttonokstr();
  } else {
    clear_has_buttonokstr();
  }
  buttonokstr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buttonokstr);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ExtDeviceLoginConfirmOKRet.ButtonOKStr)
}

// optional string ButtonCancelStr = 4;
inline bool ExtDeviceLoginConfirmOKRet::has_buttoncancelstr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExtDeviceLoginConfirmOKRet::set_has_buttoncancelstr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ExtDeviceLoginConfirmOKRet::clear_has_buttoncancelstr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ExtDeviceLoginConfirmOKRet::clear_buttoncancelstr() {
  buttoncancelstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_buttoncancelstr();
}
inline const ::std::string& ExtDeviceLoginConfirmOKRet::buttoncancelstr() const {
  // @@protoc_insertion_point(field_get:FromCs.ExtDeviceLoginConfirmOKRet.ButtonCancelStr)
  return buttoncancelstr_.GetNoArena();
}
inline void ExtDeviceLoginConfirmOKRet::set_buttoncancelstr(const ::std::string& value) {
  set_has_buttoncancelstr();
  buttoncancelstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ExtDeviceLoginConfirmOKRet.ButtonCancelStr)
}
#if LANG_CXX11
inline void ExtDeviceLoginConfirmOKRet::set_buttoncancelstr(::std::string&& value) {
  set_has_buttoncancelstr();
  buttoncancelstr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ExtDeviceLoginConfirmOKRet.ButtonCancelStr)
}
#endif
inline void ExtDeviceLoginConfirmOKRet::set_buttoncancelstr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_buttoncancelstr();
  buttoncancelstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ExtDeviceLoginConfirmOKRet.ButtonCancelStr)
}
inline void ExtDeviceLoginConfirmOKRet::set_buttoncancelstr(const char* value, size_t size) {
  set_has_buttoncancelstr();
  buttoncancelstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ExtDeviceLoginConfirmOKRet.ButtonCancelStr)
}
inline ::std::string* ExtDeviceLoginConfirmOKRet::mutable_buttoncancelstr() {
  set_has_buttoncancelstr();
  // @@protoc_insertion_point(field_mutable:FromCs.ExtDeviceLoginConfirmOKRet.ButtonCancelStr)
  return buttoncancelstr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExtDeviceLoginConfirmOKRet::release_buttoncancelstr() {
  // @@protoc_insertion_point(field_release:FromCs.ExtDeviceLoginConfirmOKRet.ButtonCancelStr)
  clear_has_buttoncancelstr();
  return buttoncancelstr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExtDeviceLoginConfirmOKRet::set_allocated_buttoncancelstr(::std::string* buttoncancelstr) {
  if (buttoncancelstr != NULL) {
    set_has_buttoncancelstr();
  } else {
    clear_has_buttoncancelstr();
  }
  buttoncancelstr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buttoncancelstr);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ExtDeviceLoginConfirmOKRet.ButtonCancelStr)
}

// optional int32 ReqSessionLimit = 5;
inline bool ExtDeviceLoginConfirmOKRet::has_reqsessionlimit() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ExtDeviceLoginConfirmOKRet::set_has_reqsessionlimit() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ExtDeviceLoginConfirmOKRet::clear_has_reqsessionlimit() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ExtDeviceLoginConfirmOKRet::clear_reqsessionlimit() {
  reqsessionlimit_ = 0;
  clear_has_reqsessionlimit();
}
inline ::google::protobuf::int32 ExtDeviceLoginConfirmOKRet::reqsessionlimit() const {
  // @@protoc_insertion_point(field_get:FromCs.ExtDeviceLoginConfirmOKRet.ReqSessionLimit)
  return reqsessionlimit_;
}
inline void ExtDeviceLoginConfirmOKRet::set_reqsessionlimit(::google::protobuf::int32 value) {
  set_has_reqsessionlimit();
  reqsessionlimit_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ExtDeviceLoginConfirmOKRet.ReqSessionLimit)
}

// optional int32 ConfirmTimeOut = 6;
inline bool ExtDeviceLoginConfirmOKRet::has_confirmtimeout() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ExtDeviceLoginConfirmOKRet::set_has_confirmtimeout() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ExtDeviceLoginConfirmOKRet::clear_has_confirmtimeout() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ExtDeviceLoginConfirmOKRet::clear_confirmtimeout() {
  confirmtimeout_ = 0;
  clear_has_confirmtimeout();
}
inline ::google::protobuf::int32 ExtDeviceLoginConfirmOKRet::confirmtimeout() const {
  // @@protoc_insertion_point(field_get:FromCs.ExtDeviceLoginConfirmOKRet.ConfirmTimeOut)
  return confirmtimeout_;
}
inline void ExtDeviceLoginConfirmOKRet::set_confirmtimeout(::google::protobuf::int32 value) {
  set_has_confirmtimeout();
  confirmtimeout_ = value;
  // @@protoc_insertion_point(field_set:FromCs.ExtDeviceLoginConfirmOKRet.ConfirmTimeOut)
}

// optional string LoginedDevTip = 7;
inline bool ExtDeviceLoginConfirmOKRet::has_logineddevtip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ExtDeviceLoginConfirmOKRet::set_has_logineddevtip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ExtDeviceLoginConfirmOKRet::clear_has_logineddevtip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ExtDeviceLoginConfirmOKRet::clear_logineddevtip() {
  logineddevtip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_logineddevtip();
}
inline const ::std::string& ExtDeviceLoginConfirmOKRet::logineddevtip() const {
  // @@protoc_insertion_point(field_get:FromCs.ExtDeviceLoginConfirmOKRet.LoginedDevTip)
  return logineddevtip_.GetNoArena();
}
inline void ExtDeviceLoginConfirmOKRet::set_logineddevtip(const ::std::string& value) {
  set_has_logineddevtip();
  logineddevtip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ExtDeviceLoginConfirmOKRet.LoginedDevTip)
}
#if LANG_CXX11
inline void ExtDeviceLoginConfirmOKRet::set_logineddevtip(::std::string&& value) {
  set_has_logineddevtip();
  logineddevtip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ExtDeviceLoginConfirmOKRet.LoginedDevTip)
}
#endif
inline void ExtDeviceLoginConfirmOKRet::set_logineddevtip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_logineddevtip();
  logineddevtip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ExtDeviceLoginConfirmOKRet.LoginedDevTip)
}
inline void ExtDeviceLoginConfirmOKRet::set_logineddevtip(const char* value, size_t size) {
  set_has_logineddevtip();
  logineddevtip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ExtDeviceLoginConfirmOKRet.LoginedDevTip)
}
inline ::std::string* ExtDeviceLoginConfirmOKRet::mutable_logineddevtip() {
  set_has_logineddevtip();
  // @@protoc_insertion_point(field_mutable:FromCs.ExtDeviceLoginConfirmOKRet.LoginedDevTip)
  return logineddevtip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExtDeviceLoginConfirmOKRet::release_logineddevtip() {
  // @@protoc_insertion_point(field_release:FromCs.ExtDeviceLoginConfirmOKRet.LoginedDevTip)
  clear_has_logineddevtip();
  return logineddevtip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExtDeviceLoginConfirmOKRet::set_allocated_logineddevtip(::std::string* logineddevtip) {
  if (logineddevtip != NULL) {
    set_has_logineddevtip();
  } else {
    clear_has_logineddevtip();
  }
  logineddevtip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), logineddevtip);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ExtDeviceLoginConfirmOKRet.LoginedDevTip)
}

// optional string TitleStr = 8;
inline bool ExtDeviceLoginConfirmOKRet::has_titlestr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ExtDeviceLoginConfirmOKRet::set_has_titlestr() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ExtDeviceLoginConfirmOKRet::clear_has_titlestr() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ExtDeviceLoginConfirmOKRet::clear_titlestr() {
  titlestr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_titlestr();
}
inline const ::std::string& ExtDeviceLoginConfirmOKRet::titlestr() const {
  // @@protoc_insertion_point(field_get:FromCs.ExtDeviceLoginConfirmOKRet.TitleStr)
  return titlestr_.GetNoArena();
}
inline void ExtDeviceLoginConfirmOKRet::set_titlestr(const ::std::string& value) {
  set_has_titlestr();
  titlestr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ExtDeviceLoginConfirmOKRet.TitleStr)
}
#if LANG_CXX11
inline void ExtDeviceLoginConfirmOKRet::set_titlestr(::std::string&& value) {
  set_has_titlestr();
  titlestr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ExtDeviceLoginConfirmOKRet.TitleStr)
}
#endif
inline void ExtDeviceLoginConfirmOKRet::set_titlestr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_titlestr();
  titlestr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ExtDeviceLoginConfirmOKRet.TitleStr)
}
inline void ExtDeviceLoginConfirmOKRet::set_titlestr(const char* value, size_t size) {
  set_has_titlestr();
  titlestr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ExtDeviceLoginConfirmOKRet.TitleStr)
}
inline ::std::string* ExtDeviceLoginConfirmOKRet::mutable_titlestr() {
  set_has_titlestr();
  // @@protoc_insertion_point(field_mutable:FromCs.ExtDeviceLoginConfirmOKRet.TitleStr)
  return titlestr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExtDeviceLoginConfirmOKRet::release_titlestr() {
  // @@protoc_insertion_point(field_release:FromCs.ExtDeviceLoginConfirmOKRet.TitleStr)
  clear_has_titlestr();
  return titlestr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExtDeviceLoginConfirmOKRet::set_allocated_titlestr(::std::string* titlestr) {
  if (titlestr != NULL) {
    set_has_titlestr();
  } else {
    clear_has_titlestr();
  }
  titlestr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), titlestr);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ExtDeviceLoginConfirmOKRet.TitleStr)
}

// optional string WarmingStr = 9;
inline bool ExtDeviceLoginConfirmOKRet::has_warmingstr() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ExtDeviceLoginConfirmOKRet::set_has_warmingstr() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ExtDeviceLoginConfirmOKRet::clear_has_warmingstr() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ExtDeviceLoginConfirmOKRet::clear_warmingstr() {
  warmingstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_warmingstr();
}
inline const ::std::string& ExtDeviceLoginConfirmOKRet::warmingstr() const {
  // @@protoc_insertion_point(field_get:FromCs.ExtDeviceLoginConfirmOKRet.WarmingStr)
  return warmingstr_.GetNoArena();
}
inline void ExtDeviceLoginConfirmOKRet::set_warmingstr(const ::std::string& value) {
  set_has_warmingstr();
  warmingstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FromCs.ExtDeviceLoginConfirmOKRet.WarmingStr)
}
#if LANG_CXX11
inline void ExtDeviceLoginConfirmOKRet::set_warmingstr(::std::string&& value) {
  set_has_warmingstr();
  warmingstr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FromCs.ExtDeviceLoginConfirmOKRet.WarmingStr)
}
#endif
inline void ExtDeviceLoginConfirmOKRet::set_warmingstr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_warmingstr();
  warmingstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FromCs.ExtDeviceLoginConfirmOKRet.WarmingStr)
}
inline void ExtDeviceLoginConfirmOKRet::set_warmingstr(const char* value, size_t size) {
  set_has_warmingstr();
  warmingstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FromCs.ExtDeviceLoginConfirmOKRet.WarmingStr)
}
inline ::std::string* ExtDeviceLoginConfirmOKRet::mutable_warmingstr() {
  set_has_warmingstr();
  // @@protoc_insertion_point(field_mutable:FromCs.ExtDeviceLoginConfirmOKRet.WarmingStr)
  return warmingstr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExtDeviceLoginConfirmOKRet::release_warmingstr() {
  // @@protoc_insertion_point(field_release:FromCs.ExtDeviceLoginConfirmOKRet.WarmingStr)
  clear_has_warmingstr();
  return warmingstr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExtDeviceLoginConfirmOKRet::set_allocated_warmingstr(::std::string* warmingstr) {
  if (warmingstr != NULL) {
    set_has_warmingstr();
  } else {
    clear_has_warmingstr();
  }
  warmingstr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), warmingstr);
  // @@protoc_insertion_point(field_set_allocated:FromCs.ExtDeviceLoginConfirmOKRet.WarmingStr)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace FromCs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_WeDA_2eproto__INCLUDED
