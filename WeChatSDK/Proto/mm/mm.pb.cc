// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mm.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mm.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class SKBuiltinBuffer_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SKBuiltinBuffer_t> {
} _SKBuiltinBuffer_t_default_instance_;
class mmStrDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<mmStr> {
} _mmStr_default_instance_;
class mmResDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<mmRes> {
} _mmRes_default_instance_;
class LoginInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LoginInfo> {
} _LoginInfo_default_instance_;
class SyncKey_MsgKey_KeyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SyncKey_MsgKey_Key> {
} _SyncKey_MsgKey_Key_default_instance_;
class SyncKey_MsgKeyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SyncKey_MsgKey> {
} _SyncKey_MsgKey_default_instance_;
class SyncKeyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SyncKey> {
} _SyncKey_default_instance_;
class common_msg_DataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<common_msg_Data> {
} _common_msg_Data_default_instance_;
class common_msgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<common_msg> {
} _common_msg_default_instance_;
class WxidDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Wxid> {
} _Wxid_default_instance_;
class Msg_RawContentDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Msg_RawContent> {
} _Msg_RawContent_default_instance_;
class MsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Msg> {
} _Msg_default_instance_;
class contact_info_NickNameDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<contact_info_NickName> {
} _contact_info_NickName_default_instance_;
class contact_info_PY_SHORTDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<contact_info_PY_SHORT> {
} _contact_info_PY_SHORT_default_instance_;
class contact_info_QuanPinDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<contact_info_QuanPin> {
} _contact_info_QuanPin_default_instance_;
class contact_info_BeiZhuDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<contact_info_BeiZhu> {
} _contact_info_BeiZhu_default_instance_;
class contact_info_REAL_PY_SHORTDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<contact_info_REAL_PY_SHORT> {
} _contact_info_REAL_PY_SHORT_default_instance_;
class contact_info_REAL_QuanPinDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<contact_info_REAL_QuanPin> {
} _contact_info_REAL_QuanPin_default_instance_;
class contact_info_GroupMemberList_MemberInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<contact_info_GroupMemberList_MemberInfo> {
} _contact_info_GroupMemberList_MemberInfo_default_instance_;
class contact_info_GroupMemberListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<contact_info_GroupMemberList> {
} _contact_info_GroupMemberList_default_instance_;
class contact_infoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<contact_info> {
} _contact_info_default_instance_;
class ManualAuthAccountRequest_AesKeyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ManualAuthAccountRequest_AesKey> {
} _ManualAuthAccountRequest_AesKey_default_instance_;
class ManualAuthAccountRequest_Ecdh_EcdhKeyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ManualAuthAccountRequest_Ecdh_EcdhKey> {
} _ManualAuthAccountRequest_Ecdh_EcdhKey_default_instance_;
class ManualAuthAccountRequest_EcdhDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ManualAuthAccountRequest_Ecdh> {
} _ManualAuthAccountRequest_Ecdh_default_instance_;
class ManualAuthAccountRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ManualAuthAccountRequest> {
} _ManualAuthAccountRequest_default_instance_;
class ManualAuthDeviceRequest__Tag2___Tag2DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ManualAuthDeviceRequest__Tag2___Tag2> {
} _ManualAuthDeviceRequest__Tag2___Tag2_default_instance_;
class ManualAuthDeviceRequest__Tag2_TAG3DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ManualAuthDeviceRequest__Tag2_TAG3> {
} _ManualAuthDeviceRequest__Tag2_TAG3_default_instance_;
class ManualAuthDeviceRequest__Tag2DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ManualAuthDeviceRequest__Tag2> {
} _ManualAuthDeviceRequest__Tag2_default_instance_;
class ManualAuthDeviceRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ManualAuthDeviceRequest> {
} _ManualAuthDeviceRequest_default_instance_;
class ManualAuthResponse_AuthResult_ErrMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ManualAuthResponse_AuthResult_ErrMsg> {
} _ManualAuthResponse_AuthResult_ErrMsg_default_instance_;
class ManualAuthResponse_AuthResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ManualAuthResponse_AuthResult> {
} _ManualAuthResponse_AuthResult_default_instance_;
class ManualAuthResponse_AuthParam_Ecdh_EcdhKeyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ManualAuthResponse_AuthParam_Ecdh_EcdhKey> {
} _ManualAuthResponse_AuthParam_Ecdh_EcdhKey_default_instance_;
class ManualAuthResponse_AuthParam_EcdhDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ManualAuthResponse_AuthParam_Ecdh> {
} _ManualAuthResponse_AuthParam_Ecdh_default_instance_;
class ManualAuthResponse_AuthParam_SessionKeyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ManualAuthResponse_AuthParam_SessionKey> {
} _ManualAuthResponse_AuthParam_SessionKey_default_instance_;
class ManualAuthResponse_AuthParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ManualAuthResponse_AuthParam> {
} _ManualAuthResponse_AuthParam_default_instance_;
class ManualAuthResponse_AccountInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ManualAuthResponse_AccountInfo> {
} _ManualAuthResponse_AccountInfo_default_instance_;
class ManualAuthResponse_dns_info_redirect_info_real_host_infoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ManualAuthResponse_dns_info_redirect_info_real_host_info> {
} _ManualAuthResponse_dns_info_redirect_info_real_host_info_default_instance_;
class ManualAuthResponse_dns_info_redirect_infoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ManualAuthResponse_dns_info_redirect_info> {
} _ManualAuthResponse_dns_info_redirect_info_default_instance_;
class ManualAuthResponse_dns_info_ip_info_longlink_ip_infoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ManualAuthResponse_dns_info_ip_info_longlink_ip_info> {
} _ManualAuthResponse_dns_info_ip_info_longlink_ip_info_default_instance_;
class ManualAuthResponse_dns_info_ip_info_shortlink_ip_infoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ManualAuthResponse_dns_info_ip_info_shortlink_ip_info> {
} _ManualAuthResponse_dns_info_ip_info_shortlink_ip_info_default_instance_;
class ManualAuthResponse_dns_info_ip_infoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ManualAuthResponse_dns_info_ip_info> {
} _ManualAuthResponse_dns_info_ip_info_default_instance_;
class ManualAuthResponse_dns_infoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ManualAuthResponse_dns_info> {
} _ManualAuthResponse_dns_info_default_instance_;
class ManualAuthResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ManualAuthResponse> {
} _ManualAuthResponse_default_instance_;
class NewInitRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NewInitRequest> {
} _NewInitRequest_default_instance_;
class NewInitResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NewInitResponse> {
} _NewInitResponse_default_instance_;
class new_sync_req_continue_flagDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<new_sync_req_continue_flag> {
} _new_sync_req_continue_flag_default_instance_;
class new_sync_reqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<new_sync_req> {
} _new_sync_req_default_instance_;
class new_sync_resp_new_msgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<new_sync_resp_new_msg> {
} _new_sync_resp_new_msg_default_instance_;
class new_sync_respDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<new_sync_resp> {
} _new_sync_resp_default_instance_;
class new_send_msg_req_msg_infoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<new_send_msg_req_msg_info> {
} _new_send_msg_req_msg_info_default_instance_;
class new_send_msg_reqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<new_send_msg_req> {
} _new_send_msg_req_default_instance_;
class new_send_msg_resp_resultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<new_send_msg_resp_result> {
} _new_send_msg_resp_result_default_instance_;
class new_send_msg_respDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<new_send_msg_resp> {
} _new_send_msg_resp_default_instance_;
class new_send_app_msg_req_appmsg_infoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<new_send_app_msg_req_appmsg_info> {
} _new_send_app_msg_req_appmsg_info_default_instance_;
class new_send_app_msg_reqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<new_send_app_msg_req> {
} _new_send_app_msg_req_default_instance_;
class new_send_app_msg_respDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<new_send_app_msg_resp> {
} _new_send_app_msg_resp_default_instance_;
class verify_user_req_user_infoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<verify_user_req_user_info> {
} _verify_user_req_user_info_default_instance_;
class verify_user_reqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<verify_user_req> {
} _verify_user_req_default_instance_;
class verify_user_respDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<verify_user_resp> {
} _verify_user_resp_default_instance_;
class receive_wxhb_reqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<receive_wxhb_req> {
} _receive_wxhb_req_default_instance_;
class receive_wxhb_resp_TAG1_TAG1DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<receive_wxhb_resp_TAG1_TAG1> {
} _receive_wxhb_resp_TAG1_TAG1_default_instance_;
class receive_wxhb_resp_TAG1DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<receive_wxhb_resp_TAG1> {
} _receive_wxhb_resp_TAG1_default_instance_;
class receive_wxhb_respDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<receive_wxhb_resp> {
} _receive_wxhb_resp_default_instance_;
class open_wxhb_reqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<open_wxhb_req> {
} _open_wxhb_req_default_instance_;
class open_wxhb_resp_TAG1_TAG1DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<open_wxhb_resp_TAG1_TAG1> {
} _open_wxhb_resp_TAG1_TAG1_default_instance_;
class open_wxhb_resp_TAG1DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<open_wxhb_resp_TAG1> {
} _open_wxhb_resp_TAG1_default_instance_;
class open_wxhb_respDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<open_wxhb_resp> {
} _open_wxhb_resp_default_instance_;
class qry_detail_wxhb_reqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<qry_detail_wxhb_req> {
} _qry_detail_wxhb_req_default_instance_;
class qry_detail_wxhb_resp_TAG1_TAG1DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<qry_detail_wxhb_resp_TAG1_TAG1> {
} _qry_detail_wxhb_resp_TAG1_TAG1_default_instance_;
class qry_detail_wxhb_resp_TAG1DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<qry_detail_wxhb_resp_TAG1> {
} _qry_detail_wxhb_resp_TAG1_default_instance_;
class qry_detail_wxhb_respDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<qry_detail_wxhb_resp> {
} _qry_detail_wxhb_resp_default_instance_;
class send_emoji_req_emoji_info_TAG4DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<send_emoji_req_emoji_info_TAG4> {
} _send_emoji_req_emoji_info_TAG4_default_instance_;
class send_emoji_req_emoji_infoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<send_emoji_req_emoji_info> {
} _send_emoji_req_emoji_info_default_instance_;
class send_emoji_reqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<send_emoji_req> {
} _send_emoji_req_default_instance_;
class send_emoji_resp_resultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<send_emoji_resp_result> {
} _send_emoji_resp_result_default_instance_;
class send_emoji_respDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<send_emoji_resp> {
} _send_emoji_resp_default_instance_;
class transfer_operation_reqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<transfer_operation_req> {
} _transfer_operation_req_default_instance_;
class transfer_operation_respDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<transfer_operation_resp> {
} _transfer_operation_resp_default_instance_;
class transfer_query_reqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<transfer_query_req> {
} _transfer_query_req_default_instance_;
class transfer_query_respDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<transfer_query_resp> {
} _transfer_query_resp_default_instance_;
class get_contact_req_TAG7DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<get_contact_req_TAG7> {
} _get_contact_req_TAG7_default_instance_;
class get_contact_reqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<get_contact_req> {
} _get_contact_req_default_instance_;
class get_contact_resp_ticket_infoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<get_contact_resp_ticket_info> {
} _get_contact_resp_ticket_info_default_instance_;
class get_contact_respDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<get_contact_resp> {
} _get_contact_resp_default_instance_;
class create_chatroom_req_TAG2DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<create_chatroom_req_TAG2> {
} _create_chatroom_req_TAG2_default_instance_;
class create_chatroom_req_member_infoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<create_chatroom_req_member_info> {
} _create_chatroom_req_member_info_default_instance_;
class create_chatroom_reqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<create_chatroom_req> {
} _create_chatroom_req_default_instance_;
class create_chatroom_resp_result_err_msgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<create_chatroom_resp_result_err_msg> {
} _create_chatroom_resp_result_err_msg_default_instance_;
class create_chatroom_resp_resultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<create_chatroom_resp_result> {
} _create_chatroom_resp_result_default_instance_;
class create_chatroom_resp_member_info_nick_name_infoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<create_chatroom_resp_member_info_nick_name_info> {
} _create_chatroom_resp_member_info_nick_name_info_default_instance_;
class create_chatroom_resp_member_infoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<create_chatroom_resp_member_info> {
} _create_chatroom_resp_member_info_default_instance_;
class create_chatroom_resp_chatroom_avatarDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<create_chatroom_resp_chatroom_avatar> {
} _create_chatroom_resp_chatroom_avatar_default_instance_;
class create_chatroom_respDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<create_chatroom_resp> {
} _create_chatroom_resp_default_instance_;
class mm_facing_create_chatroom_reqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<mm_facing_create_chatroom_req> {
} _mm_facing_create_chatroom_req_default_instance_;
class mm_facing_create_chatroom_resp_result_err_msgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<mm_facing_create_chatroom_resp_result_err_msg> {
} _mm_facing_create_chatroom_resp_result_err_msg_default_instance_;
class mm_facing_create_chatroom_resp_resultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<mm_facing_create_chatroom_resp_result> {
} _mm_facing_create_chatroom_resp_result_default_instance_;
class mm_facing_create_chatroom_resp_member_infoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<mm_facing_create_chatroom_resp_member_info> {
} _mm_facing_create_chatroom_resp_member_info_default_instance_;
class mm_facing_create_chatroom_respDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<mm_facing_create_chatroom_resp> {
} _mm_facing_create_chatroom_resp_default_instance_;
class add_chatroom_member_req_member_infoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<add_chatroom_member_req_member_info> {
} _add_chatroom_member_req_member_info_default_instance_;
class add_chatroom_member_req_chatroom_infoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<add_chatroom_member_req_chatroom_info> {
} _add_chatroom_member_req_chatroom_info_default_instance_;
class add_chatroom_member_reqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<add_chatroom_member_req> {
} _add_chatroom_member_req_default_instance_;
class add_chatroom_member_resp_result_err_msgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<add_chatroom_member_resp_result_err_msg> {
} _add_chatroom_member_resp_result_err_msg_default_instance_;
class add_chatroom_member_resp_resultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<add_chatroom_member_resp_result> {
} _add_chatroom_member_resp_result_default_instance_;
class add_chatroom_member_respDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<add_chatroom_member_resp> {
} _add_chatroom_member_resp_default_instance_;
class op_set_group_nick_nameDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<op_set_group_nick_name> {
} _op_set_group_nick_name_default_instance_;
class oplog_req_TAG1_CMD_OPTIONDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<oplog_req_TAG1_CMD_OPTION> {
} _oplog_req_TAG1_CMD_OPTION_default_instance_;
class oplog_req_TAG1_CMDDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<oplog_req_TAG1_CMD> {
} _oplog_req_TAG1_CMD_default_instance_;
class oplog_req_TAG1DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<oplog_req_TAG1> {
} _oplog_req_TAG1_default_instance_;
class oplog_reqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<oplog_req> {
} _oplog_req_default_instance_;
class oplog_resp_resultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<oplog_resp_result> {
} _oplog_resp_result_default_instance_;
class oplog_respDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<oplog_resp> {
} _oplog_resp_default_instance_;
class revoke_msg_reqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<revoke_msg_req> {
} _revoke_msg_req_default_instance_;
class revoke_msg_respDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<revoke_msg_resp> {
} _revoke_msg_resp_default_instance_;
class set_chatroom_announcement_reqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<set_chatroom_announcement_req> {
} _set_chatroom_announcement_req_default_instance_;
class set_chatroom_announcement_respDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<set_chatroom_announcement_resp> {
} _set_chatroom_announcement_resp_default_instance_;
class GetLoginQRCodeRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetLoginQRCodeRequest> {
} _GetLoginQRCodeRequest_default_instance_;
class sKBuiltinBufferTDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<sKBuiltinBufferT> {
} _sKBuiltinBufferT_default_instance_;
class GetLoginQRCodeResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetLoginQRCodeResponse> {
} _GetLoginQRCodeResponse_default_instance_;
class CheckLoginQRCodeRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CheckLoginQRCodeRequest> {
} _CheckLoginQRCodeRequest_default_instance_;
class CheckLoginQRCodeResponse_LoginQRCodeNotifyPkgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg> {
} _CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg_default_instance_;
class CheckLoginQRCodeResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CheckLoginQRCodeResponse> {
} _CheckLoginQRCodeResponse_default_instance_;
class NotifyMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NotifyMsg> {
} _NotifyMsg_default_instance_;

namespace protobuf_mm_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[122];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SKBuiltinBuffer_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SKBuiltinBuffer_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SKBuiltinBuffer_t, ilen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SKBuiltinBuffer_t, buffer_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mmStr, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mmStr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mmStr, len_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mmStr, str_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mmRes, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mmRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mmRes, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mmRes, message_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginInfo, aeskey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginInfo, uin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginInfo, guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginInfo, clientver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginInfo, androidver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginInfo, unknown_),
  0,
  3,
  1,
  4,
  2,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncKey_MsgKey_Key, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncKey_MsgKey_Key, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncKey_MsgKey_Key, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncKey_MsgKey_Key, key_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncKey_MsgKey, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncKey_MsgKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncKey_MsgKey, cnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncKey_MsgKey, key_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncKey, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncKey, len_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncKey, msgkey_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(common_msg_Data, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(common_msg_Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(common_msg_Data, len_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(common_msg_Data, data_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(common_msg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(common_msg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(common_msg, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(common_msg, data_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wxid, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wxid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wxid, id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_RawContent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_RawContent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_RawContent, content_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, serverid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, from_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, to_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, raw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, tag7_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, tag8_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, createtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, ex_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, xmlcontent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, svrid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, msgkey_),
  6,
  3,
  4,
  7,
  5,
  8,
  9,
  0,
  10,
  1,
  2,
  11,
  12,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info_NickName, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info_NickName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info_NickName, name_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info_PY_SHORT, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info_PY_SHORT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info_PY_SHORT, name_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info_QuanPin, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info_QuanPin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info_QuanPin, name_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info_BeiZhu, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info_BeiZhu, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info_BeiZhu, name_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info_REAL_PY_SHORT, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info_REAL_PY_SHORT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info_REAL_PY_SHORT, name_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info_REAL_QuanPin, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info_REAL_QuanPin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info_REAL_QuanPin, name_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info_GroupMemberList_MemberInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info_GroupMemberList_MemberInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info_GroupMemberList_MemberInfo, wxid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info_GroupMemberList_MemberInfo, nick_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info_GroupMemberList_MemberInfo, tag6_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info_GroupMemberList_MemberInfo, inviteer_wxid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info_GroupMemberList_MemberInfo, tag8_),
  0,
  1,
  3,
  2,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info_GroupMemberList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info_GroupMemberList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info_GroupMemberList, cnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info_GroupMemberList, member_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info_GroupMemberList, tag3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info_GroupMemberList, tag4_),
  1,
  ~0u,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info, wxid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info, nickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info, shortpy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info, quanpin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info, sex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info, tag6_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info, tag7_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info, tag9_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info, remark_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info, real_shortpy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info, real_quanpin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info, tag13_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info, tag14_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info, tag16_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info, bchatroom_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info, tag18_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info, sheng_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info, shi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info, qianming_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info, tag22_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info, tag23_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info, register_body_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info, register_body_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info, tag26_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info, src_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info, lastmsgtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info, alias_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info, chatroomownerwxid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info, tag33_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info, tag34_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info, tag35_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info, tag37_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info, country_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info, avatar_big_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info, avatar_small_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info, tag42_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info, v1_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info, tag50_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info, chatroom_serverver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info, chatroom_max_member_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info, tag56_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info, group_member_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info, tag58_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info, tag62_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info, tag64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info, tag65_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info, tag66_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contact_info, tag67_),
  17,
  18,
  19,
  20,
  25,
  0,
  26,
  27,
  28,
  21,
  22,
  23,
  29,
  30,
  1,
  31,
  32,
  2,
  3,
  4,
  33,
  34,
  35,
  5,
  36,
  37,
  6,
  7,
  8,
  38,
  39,
  40,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  41,
  42,
  43,
  24,
  44,
  16,
  45,
  46,
  47,
  48,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthAccountRequest_AesKey, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthAccountRequest_AesKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthAccountRequest_AesKey, len_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthAccountRequest_AesKey, key_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthAccountRequest_Ecdh_EcdhKey, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthAccountRequest_Ecdh_EcdhKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthAccountRequest_Ecdh_EcdhKey, len_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthAccountRequest_Ecdh_EcdhKey, key_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthAccountRequest_Ecdh, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthAccountRequest_Ecdh, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthAccountRequest_Ecdh, nid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthAccountRequest_Ecdh, ecdhkey_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthAccountRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthAccountRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthAccountRequest, aes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthAccountRequest, ecdh_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthAccountRequest, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthAccountRequest, password1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthAccountRequest, password2_),
  3,
  4,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthDeviceRequest__Tag2___Tag2, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthDeviceRequest__Tag2___Tag2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthDeviceRequest__Tag2___Tag2, tag1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthDeviceRequest__Tag2___Tag2, tag2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthDeviceRequest__Tag2___Tag2, tag3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthDeviceRequest__Tag2___Tag2, tag4_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthDeviceRequest__Tag2_TAG3, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthDeviceRequest__Tag2_TAG3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthDeviceRequest__Tag2_TAG3, tag1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthDeviceRequest__Tag2_TAG3, tag2_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthDeviceRequest__Tag2, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthDeviceRequest__Tag2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthDeviceRequest__Tag2, tag1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthDeviceRequest__Tag2, tag2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthDeviceRequest__Tag2, tag3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthDeviceRequest__Tag2, tag4_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthDeviceRequest__Tag2, tag5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthDeviceRequest__Tag2, tag6_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthDeviceRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthDeviceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthDeviceRequest, login_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthDeviceRequest, tag2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthDeviceRequest, imei_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthDeviceRequest, softinfoxml_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthDeviceRequest, unknown5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthDeviceRequest, clientseqid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthDeviceRequest, clientseqid_sign_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthDeviceRequest, logindevicename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthDeviceRequest, deviceinfoxml_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthDeviceRequest, language_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthDeviceRequest, timezone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthDeviceRequest, unknown13_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthDeviceRequest, unknown14_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthDeviceRequest, devicebrand_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthDeviceRequest, devicemodel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthDeviceRequest, ostype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthDeviceRequest, realcountry_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthDeviceRequest, unknown22_),
  12,
  13,
  0,
  1,
  14,
  2,
  3,
  4,
  5,
  6,
  7,
  15,
  16,
  8,
  9,
  10,
  11,
  17,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_AuthResult_ErrMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_AuthResult_ErrMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_AuthResult_ErrMsg, msg_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_AuthResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_AuthResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_AuthResult, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_AuthResult, err_msg_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_AuthParam_Ecdh_EcdhKey, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_AuthParam_Ecdh_EcdhKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_AuthParam_Ecdh_EcdhKey, len_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_AuthParam_Ecdh_EcdhKey, key_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_AuthParam_Ecdh, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_AuthParam_Ecdh, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_AuthParam_Ecdh, nid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_AuthParam_Ecdh, ecdhkey_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_AuthParam_SessionKey, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_AuthParam_SessionKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_AuthParam_SessionKey, len_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_AuthParam_SessionKey, key_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_AuthParam, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_AuthParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_AuthParam, uin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_AuthParam, ecdh_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_AuthParam, session_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_AuthParam, smsticket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_AuthParam, bindmailloginurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_AuthParam, servertime_),
  4,
  2,
  3,
  0,
  1,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_AccountInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_AccountInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_AccountInfo, wxid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_AccountInfo, nickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_AccountInfo, tag3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_AccountInfo, bindmail_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_AccountInfo, bindmobile_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_AccountInfo, alias_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_AccountInfo, tag7_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_AccountInfo, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_AccountInfo, pluginflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_AccountInfo, registertype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_AccountInfo, tag11_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_AccountInfo, safedevice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_AccountInfo, officialnamepinyin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_AccountInfo, officialnamezh_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_AccountInfo, tag15_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_AccountInfo, fsurl_),
  0,
  1,
  11,
  2,
  3,
  4,
  5,
  12,
  13,
  14,
  6,
  15,
  7,
  8,
  9,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_dns_info_redirect_info_real_host_info, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_dns_info_redirect_info_real_host_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_dns_info_redirect_info_real_host_info, host_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_dns_info_redirect_info_real_host_info, redirect_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_dns_info_redirect_info, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_dns_info_redirect_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_dns_info_redirect_info, cnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_dns_info_redirect_info, real_host_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_dns_info_ip_info_longlink_ip_info, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_dns_info_ip_info_longlink_ip_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_dns_info_ip_info_longlink_ip_info, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_dns_info_ip_info_longlink_ip_info, host_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_dns_info_ip_info_shortlink_ip_info, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_dns_info_ip_info_shortlink_ip_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_dns_info_ip_info_shortlink_ip_info, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_dns_info_ip_info_shortlink_ip_info, host_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_dns_info_ip_info, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_dns_info_ip_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_dns_info_ip_info, longlink_ip_cnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_dns_info_ip_info, shortlink_ip_cnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_dns_info_ip_info, longlink_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_dns_info_ip_info, shortlink_),
  0,
  1,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_dns_info, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_dns_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_dns_info, redirect_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse_dns_info, ip_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse, unifyflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse, authparam_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse, accountinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualAuthResponse, dns_),
  0,
  4,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewInitRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewInitRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewInitRequest, login_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewInitRequest, wxid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewInitRequest, sync_key_cur_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewInitRequest, sync_key_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewInitRequest, language_),
  2,
  0,
  3,
  4,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewInitResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewInitResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewInitResponse, tag1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewInitResponse, sync_key_cur_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewInitResponse, sync_key_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewInitResponse, continue_flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewInitResponse, cntlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewInitResponse, tag7_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_sync_req_continue_flag, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_sync_req_continue_flag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_sync_req_continue_flag, flag_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_sync_req, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_sync_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_sync_req, flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_sync_req, selector_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_sync_req, sync_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_sync_req, scene_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_sync_req, device_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_sync_req, sync_msg_digest_),
  2,
  3,
  0,
  4,
  1,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_sync_resp_new_msg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_sync_resp_new_msg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_sync_resp_new_msg, cntlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_sync_resp_new_msg, tag2_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_sync_resp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_sync_resp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_sync_resp, tag1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_sync_resp, msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_sync_resp, tag3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_sync_resp, sync_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_sync_resp, tag5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_sync_resp, tag6_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_sync_resp, utc_),
  2,
  1,
  3,
  0,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_send_msg_req_msg_info, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_send_msg_req_msg_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_send_msg_req_msg_info, to_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_send_msg_req_msg_info, content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_send_msg_req_msg_info, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_send_msg_req_msg_info, utc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_send_msg_req_msg_info, client_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_send_msg_req_msg_info, at_list_),
  2,
  0,
  3,
  4,
  5,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_send_msg_req, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_send_msg_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_send_msg_req, cnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_send_msg_req, msg_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_send_msg_resp_result, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_send_msg_resp_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_send_msg_resp_result, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_send_msg_resp_result, to_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_send_msg_resp_result, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_send_msg_resp_result, svrid_),
  1,
  0,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_send_msg_resp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_send_msg_resp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_send_msg_resp, tag1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_send_msg_resp, cnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_send_msg_resp, res_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_send_app_msg_req_appmsg_info, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_send_app_msg_req_appmsg_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_send_app_msg_req_appmsg_info, from_wxid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_send_app_msg_req_appmsg_info, app_wxid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_send_app_msg_req_appmsg_info, tag3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_send_app_msg_req_appmsg_info, to_wxid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_send_app_msg_req_appmsg_info, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_send_app_msg_req_appmsg_info, content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_send_app_msg_req_appmsg_info, utc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_send_app_msg_req_appmsg_info, client_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_send_app_msg_req_appmsg_info, tag10_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_send_app_msg_req_appmsg_info, tag11_),
  0,
  1,
  5,
  2,
  6,
  3,
  7,
  4,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_send_app_msg_req, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_send_app_msg_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_send_app_msg_req, login_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_send_app_msg_req, info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_send_app_msg_req, tag4_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_send_app_msg_req, tag6_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_send_app_msg_req, tag7_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_send_app_msg_req, fromscene_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_send_app_msg_req, tag9_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_send_app_msg_req, tag10_),
  2,
  3,
  4,
  5,
  0,
  1,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_send_app_msg_resp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_send_app_msg_resp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_send_app_msg_resp, tag1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_send_app_msg_resp, from_wxid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_send_app_msg_resp, to_wxid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_send_app_msg_resp, sync_key_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_send_app_msg_resp, client_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_send_app_msg_resp, utc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_send_app_msg_resp, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_send_app_msg_resp, svrid_),
  3,
  0,
  1,
  4,
  2,
  5,
  7,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_user_req_user_info, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_user_req_user_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_user_req_user_info, wxid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_user_req_user_info, ticket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_user_req_user_info, anti_ticket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_user_req_user_info, tag4_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_user_req_user_info, tag8_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_user_req, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_user_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_user_req, login_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_user_req, op_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_user_req, tag3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_user_req, user_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_user_req, content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_user_req, tag6_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_user_req, scene_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_user_req, device_info_),
  2,
  5,
  6,
  3,
  0,
  7,
  1,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_user_resp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_user_resp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_user_resp, res_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_user_resp, wxid_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(receive_wxhb_req, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(receive_wxhb_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(receive_wxhb_req, login_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(receive_wxhb_req, cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(receive_wxhb_req, tag3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(receive_wxhb_req, info_),
  0,
  2,
  3,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(receive_wxhb_resp_TAG1_TAG1, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(receive_wxhb_resp_TAG1_TAG1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(receive_wxhb_resp_TAG1_TAG1, tag1_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(receive_wxhb_resp_TAG1, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(receive_wxhb_resp_TAG1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(receive_wxhb_resp_TAG1, tag1_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(receive_wxhb_resp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(receive_wxhb_resp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(receive_wxhb_resp, tag1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(receive_wxhb_resp, hb_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(receive_wxhb_resp, cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(receive_wxhb_resp, ret_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(receive_wxhb_resp, ret_msg_),
  1,
  2,
  3,
  4,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(open_wxhb_req, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(open_wxhb_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(open_wxhb_req, login_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(open_wxhb_req, cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(open_wxhb_req, tag3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(open_wxhb_req, info_),
  0,
  2,
  3,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(open_wxhb_resp_TAG1_TAG1, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(open_wxhb_resp_TAG1_TAG1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(open_wxhb_resp_TAG1_TAG1, tag1_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(open_wxhb_resp_TAG1, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(open_wxhb_resp_TAG1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(open_wxhb_resp_TAG1, tag1_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(open_wxhb_resp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(open_wxhb_resp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(open_wxhb_resp, tag1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(open_wxhb_resp, res_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(open_wxhb_resp, cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(open_wxhb_resp, ret_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(open_wxhb_resp, ret_msg_),
  1,
  2,
  3,
  4,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qry_detail_wxhb_req, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qry_detail_wxhb_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qry_detail_wxhb_req, login_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qry_detail_wxhb_req, cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qry_detail_wxhb_req, tag3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qry_detail_wxhb_req, info_),
  0,
  2,
  3,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qry_detail_wxhb_resp_TAG1_TAG1, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qry_detail_wxhb_resp_TAG1_TAG1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qry_detail_wxhb_resp_TAG1_TAG1, tag1_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qry_detail_wxhb_resp_TAG1, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qry_detail_wxhb_resp_TAG1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qry_detail_wxhb_resp_TAG1, tag1_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qry_detail_wxhb_resp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qry_detail_wxhb_resp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qry_detail_wxhb_resp, tag1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qry_detail_wxhb_resp, res_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qry_detail_wxhb_resp, cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qry_detail_wxhb_resp, ret_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qry_detail_wxhb_resp, ret_msg_),
  1,
  2,
  3,
  4,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_emoji_req_emoji_info_TAG4, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_emoji_req_emoji_info_TAG4, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_emoji_req_emoji_info_TAG4, tag1_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_emoji_req_emoji_info, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_emoji_req_emoji_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_emoji_req_emoji_info, animation_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_emoji_req_emoji_info, tag2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_emoji_req_emoji_info, tag3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_emoji_req_emoji_info, tag4_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_emoji_req_emoji_info, tag5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_emoji_req_emoji_info, to_wxid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_emoji_req_emoji_info, game_ext_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_emoji_req_emoji_info, tag8_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_emoji_req_emoji_info, utc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_emoji_req_emoji_info, tag11_),
  0,
  6,
  7,
  5,
  8,
  1,
  2,
  3,
  4,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_emoji_req, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_emoji_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_emoji_req, login_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_emoji_req, tag2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_emoji_req, emoji_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_emoji_req, tag4_),
  0,
  2,
  1,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_emoji_resp_result, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_emoji_resp_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_emoji_resp_result, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_emoji_resp_result, tag2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_emoji_resp_result, tag3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_emoji_resp_result, file_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_emoji_resp_result, svrid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_emoji_resp_result, tag6_),
  1,
  2,
  3,
  0,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_emoji_resp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_emoji_resp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_emoji_resp, res_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(transfer_operation_req, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(transfer_operation_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(transfer_operation_req, login_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(transfer_operation_req, tag2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(transfer_operation_req, tag3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(transfer_operation_req, info_),
  0,
  2,
  3,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(transfer_operation_resp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(transfer_operation_resp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(transfer_operation_resp, res_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(transfer_operation_resp, ret_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(transfer_operation_resp, ret_msg_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(transfer_query_req, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(transfer_query_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(transfer_query_req, login_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(transfer_query_req, tag2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(transfer_query_req, tag3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(transfer_query_req, info_),
  0,
  2,
  3,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(transfer_query_resp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(transfer_query_resp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(transfer_query_resp, res_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(transfer_query_resp, ret_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(transfer_query_resp, ret_msg_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_contact_req_TAG7, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_contact_req_TAG7, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_contact_req_TAG7, tag1_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_contact_req, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_contact_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_contact_req, login_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_contact_req, tag2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_contact_req, wxid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_contact_req, tag4_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_contact_req, tag6_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_contact_req, tag7_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_contact_req, tag8_),
  0,
  3,
  1,
  4,
  5,
  2,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_contact_resp_ticket_info, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_contact_resp_ticket_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_contact_resp_ticket_info, wxid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_contact_resp_ticket_info, ticket_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_contact_resp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_contact_resp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_contact_resp, info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_contact_resp, ticket_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_chatroom_req_TAG2, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_chatroom_req_TAG2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_chatroom_req_TAG2, tag1_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_chatroom_req_member_info, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_chatroom_req_member_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_chatroom_req_member_info, wxid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_chatroom_req, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_chatroom_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_chatroom_req, login_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_chatroom_req, tag2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_chatroom_req, member_cnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_chatroom_req, member_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_chatroom_req, tag5_),
  0,
  1,
  2,
  ~0u,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_chatroom_resp_result_err_msg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_chatroom_resp_result_err_msg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_chatroom_resp_result_err_msg, msg_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_chatroom_resp_result, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_chatroom_resp_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_chatroom_resp_result, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_chatroom_resp_result, msg_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_chatroom_resp_member_info_nick_name_info, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_chatroom_resp_member_info_nick_name_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_chatroom_resp_member_info_nick_name_info, name_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_chatroom_resp_member_info, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_chatroom_resp_member_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_chatroom_resp_member_info, wxid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_chatroom_resp_member_info, nick_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_chatroom_resp_member_info, qianming_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_chatroom_resp_chatroom_avatar, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_chatroom_resp_chatroom_avatar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_chatroom_resp_chatroom_avatar, len_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_chatroom_resp_chatroom_avatar, data_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_chatroom_resp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_chatroom_resp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_chatroom_resp, res_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_chatroom_resp, member_cnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_chatroom_resp, member_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_chatroom_resp, chatroom_wxid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_chatroom_resp, avatar_),
  0,
  3,
  ~0u,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mm_facing_create_chatroom_req, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mm_facing_create_chatroom_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mm_facing_create_chatroom_req, login_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mm_facing_create_chatroom_req, op_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mm_facing_create_chatroom_req, chatroom_pwd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mm_facing_create_chatroom_req, lon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mm_facing_create_chatroom_req, lat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mm_facing_create_chatroom_req, tag6_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mm_facing_create_chatroom_req, tag9_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mm_facing_create_chatroom_req, tag10_),
  2,
  3,
  0,
  4,
  5,
  6,
  7,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mm_facing_create_chatroom_resp_result_err_msg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mm_facing_create_chatroom_resp_result_err_msg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mm_facing_create_chatroom_resp_result_err_msg, msg_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mm_facing_create_chatroom_resp_result, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mm_facing_create_chatroom_resp_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mm_facing_create_chatroom_resp_result, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mm_facing_create_chatroom_resp_result, msg_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mm_facing_create_chatroom_resp_member_info, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mm_facing_create_chatroom_resp_member_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mm_facing_create_chatroom_resp_member_info, msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mm_facing_create_chatroom_resp_member_info, nick_name_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mm_facing_create_chatroom_resp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mm_facing_create_chatroom_resp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mm_facing_create_chatroom_resp, res_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mm_facing_create_chatroom_resp, member_cnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mm_facing_create_chatroom_resp, member_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mm_facing_create_chatroom_resp, wxid_),
  1,
  2,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add_chatroom_member_req_member_info, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add_chatroom_member_req_member_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add_chatroom_member_req_member_info, wxid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add_chatroom_member_req_chatroom_info, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add_chatroom_member_req_chatroom_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add_chatroom_member_req_chatroom_info, wxid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add_chatroom_member_req, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add_chatroom_member_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add_chatroom_member_req, login_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add_chatroom_member_req, member_cnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add_chatroom_member_req, member_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add_chatroom_member_req, chatroom_wxid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add_chatroom_member_req, tag5_),
  0,
  2,
  ~0u,
  1,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add_chatroom_member_resp_result_err_msg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add_chatroom_member_resp_result_err_msg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add_chatroom_member_resp_result_err_msg, msg_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add_chatroom_member_resp_result, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add_chatroom_member_resp_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add_chatroom_member_resp_result, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add_chatroom_member_resp_result, msg_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add_chatroom_member_resp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add_chatroom_member_resp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add_chatroom_member_resp, res_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(op_set_group_nick_name, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(op_set_group_nick_name, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(op_set_group_nick_name, tag1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(op_set_group_nick_name, tag2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(op_set_group_nick_name, tag3_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(oplog_req_TAG1_CMD_OPTION, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(oplog_req_TAG1_CMD_OPTION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(oplog_req_TAG1_CMD_OPTION, len_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(oplog_req_TAG1_CMD_OPTION, data_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(oplog_req_TAG1_CMD, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(oplog_req_TAG1_CMD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(oplog_req_TAG1_CMD, cmd_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(oplog_req_TAG1_CMD, option_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(oplog_req_TAG1, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(oplog_req_TAG1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(oplog_req_TAG1, tag1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(oplog_req_TAG1, cmd_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(oplog_req, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(oplog_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(oplog_req, tag1_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(oplog_resp_result, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(oplog_resp_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(oplog_resp_result, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(oplog_resp_result, msg_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(oplog_resp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(oplog_resp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(oplog_resp, res_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(revoke_msg_req, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(revoke_msg_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(revoke_msg_req, login_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(revoke_msg_req, client_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(revoke_msg_req, new_client_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(revoke_msg_req, utc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(revoke_msg_req, tag5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(revoke_msg_req, from_wxid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(revoke_msg_req, to_wxid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(revoke_msg_req, index_of_request_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(revoke_msg_req, svrid_),
  3,
  0,
  4,
  5,
  6,
  1,
  2,
  8,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(revoke_msg_resp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(revoke_msg_resp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(revoke_msg_resp, res_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(revoke_msg_resp, response_sys_wording_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_chatroom_announcement_req, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_chatroom_announcement_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_chatroom_announcement_req, login_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_chatroom_announcement_req, chatroom_wxid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_chatroom_announcement_req, content_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_chatroom_announcement_resp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_chatroom_announcement_resp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(set_chatroom_announcement_resp, res_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLoginQRCodeRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLoginQRCodeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLoginQRCodeRequest, base_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLoginQRCodeRequest, randomencrykey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLoginQRCodeRequest, opcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLoginQRCodeRequest, devicename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLoginQRCodeRequest, username_),
  2,
  3,
  4,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sKBuiltinBufferT, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sKBuiltinBufferT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sKBuiltinBufferT, ilen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sKBuiltinBufferT, buffer_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLoginQRCodeResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLoginQRCodeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLoginQRCodeResponse, base_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLoginQRCodeResponse, qrcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLoginQRCodeResponse, uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLoginQRCodeResponse, checktime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLoginQRCodeResponse, notifykey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLoginQRCodeResponse, expiredtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLoginQRCodeResponse, bluetoothbroadcastuuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLoginQRCodeResponse, bluetoothbroadcastcontent_),
  2,
  3,
  0,
  6,
  4,
  7,
  1,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckLoginQRCodeRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckLoginQRCodeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckLoginQRCodeRequest, base_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckLoginQRCodeRequest, randomencrykey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckLoginQRCodeRequest, uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckLoginQRCodeRequest, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckLoginQRCodeRequest, opcode_),
  1,
  2,
  0,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg, notifydata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg, opcode_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckLoginQRCodeResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckLoginQRCodeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckLoginQRCodeResponse, base_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckLoginQRCodeResponse, notifypkg_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMsg, uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMsg, opcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMsg, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMsg, pass_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMsg, imgurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMsg, unkownint6_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMsg, nickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMsg, unkownint8_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMsg, unkownint10_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMsg, platform_),
  0,
  6,
  1,
  2,
  3,
  7,
  4,
  8,
  9,
  5,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(SKBuiltinBuffer_t)},
  { 9, 16, sizeof(mmStr)},
  { 18, 25, sizeof(mmRes)},
  { 27, 38, sizeof(LoginInfo)},
  { 44, 51, sizeof(SyncKey_MsgKey_Key)},
  { 53, 60, sizeof(SyncKey_MsgKey)},
  { 62, 69, sizeof(SyncKey)},
  { 71, 78, sizeof(common_msg_Data)},
  { 80, 87, sizeof(common_msg)},
  { 89, 95, sizeof(Wxid)},
  { 96, 102, sizeof(Msg_RawContent)},
  { 103, 121, sizeof(Msg)},
  { 134, 140, sizeof(contact_info_NickName)},
  { 141, 147, sizeof(contact_info_PY_SHORT)},
  { 148, 154, sizeof(contact_info_QuanPin)},
  { 155, 161, sizeof(contact_info_BeiZhu)},
  { 162, 168, sizeof(contact_info_REAL_PY_SHORT)},
  { 169, 175, sizeof(contact_info_REAL_QuanPin)},
  { 176, 186, sizeof(contact_info_GroupMemberList_MemberInfo)},
  { 191, 200, sizeof(contact_info_GroupMemberList)},
  { 204, 258, sizeof(contact_info)},
  { 307, 314, sizeof(ManualAuthAccountRequest_AesKey)},
  { 316, 323, sizeof(ManualAuthAccountRequest_Ecdh_EcdhKey)},
  { 325, 332, sizeof(ManualAuthAccountRequest_Ecdh)},
  { 334, 344, sizeof(ManualAuthAccountRequest)},
  { 349, 358, sizeof(ManualAuthDeviceRequest__Tag2___Tag2)},
  { 362, 369, sizeof(ManualAuthDeviceRequest__Tag2_TAG3)},
  { 371, 382, sizeof(ManualAuthDeviceRequest__Tag2)},
  { 388, 411, sizeof(ManualAuthDeviceRequest)},
  { 429, 435, sizeof(ManualAuthResponse_AuthResult_ErrMsg)},
  { 436, 443, sizeof(ManualAuthResponse_AuthResult)},
  { 445, 452, sizeof(ManualAuthResponse_AuthParam_Ecdh_EcdhKey)},
  { 454, 461, sizeof(ManualAuthResponse_AuthParam_Ecdh)},
  { 463, 470, sizeof(ManualAuthResponse_AuthParam_SessionKey)},
  { 472, 483, sizeof(ManualAuthResponse_AuthParam)},
  { 489, 510, sizeof(ManualAuthResponse_AccountInfo)},
  { 526, 533, sizeof(ManualAuthResponse_dns_info_redirect_info_real_host_info)},
  { 535, 542, sizeof(ManualAuthResponse_dns_info_redirect_info)},
  { 544, 551, sizeof(ManualAuthResponse_dns_info_ip_info_longlink_ip_info)},
  { 553, 560, sizeof(ManualAuthResponse_dns_info_ip_info_shortlink_ip_info)},
  { 562, 571, sizeof(ManualAuthResponse_dns_info_ip_info)},
  { 575, 582, sizeof(ManualAuthResponse_dns_info)},
  { 584, 594, sizeof(ManualAuthResponse)},
  { 599, 609, sizeof(NewInitRequest)},
  { 614, 625, sizeof(NewInitResponse)},
  { 631, 637, sizeof(new_sync_req_continue_flag)},
  { 638, 649, sizeof(new_sync_req)},
  { 655, 662, sizeof(new_sync_resp_new_msg)},
  { 664, 676, sizeof(new_sync_resp)},
  { 683, 694, sizeof(new_send_msg_req_msg_info)},
  { 700, 707, sizeof(new_send_msg_req)},
  { 709, 718, sizeof(new_send_msg_resp_result)},
  { 722, 730, sizeof(new_send_msg_resp)},
  { 733, 748, sizeof(new_send_app_msg_req_appmsg_info)},
  { 758, 771, sizeof(new_send_app_msg_req)},
  { 779, 792, sizeof(new_send_app_msg_resp)},
  { 800, 810, sizeof(verify_user_req_user_info)},
  { 815, 828, sizeof(verify_user_req)},
  { 836, 843, sizeof(verify_user_resp)},
  { 845, 854, sizeof(receive_wxhb_req)},
  { 858, 864, sizeof(receive_wxhb_resp_TAG1_TAG1)},
  { 865, 871, sizeof(receive_wxhb_resp_TAG1)},
  { 872, 882, sizeof(receive_wxhb_resp)},
  { 887, 896, sizeof(open_wxhb_req)},
  { 900, 906, sizeof(open_wxhb_resp_TAG1_TAG1)},
  { 907, 913, sizeof(open_wxhb_resp_TAG1)},
  { 914, 924, sizeof(open_wxhb_resp)},
  { 929, 938, sizeof(qry_detail_wxhb_req)},
  { 942, 948, sizeof(qry_detail_wxhb_resp_TAG1_TAG1)},
  { 949, 955, sizeof(qry_detail_wxhb_resp_TAG1)},
  { 956, 966, sizeof(qry_detail_wxhb_resp)},
  { 971, 977, sizeof(send_emoji_req_emoji_info_TAG4)},
  { 978, 993, sizeof(send_emoji_req_emoji_info)},
  { 1003, 1012, sizeof(send_emoji_req)},
  { 1016, 1027, sizeof(send_emoji_resp_result)},
  { 1033, 1039, sizeof(send_emoji_resp)},
  { 1040, 1049, sizeof(transfer_operation_req)},
  { 1053, 1061, sizeof(transfer_operation_resp)},
  { 1064, 1073, sizeof(transfer_query_req)},
  { 1077, 1085, sizeof(transfer_query_resp)},
  { 1088, 1094, sizeof(get_contact_req_TAG7)},
  { 1095, 1107, sizeof(get_contact_req)},
  { 1114, 1121, sizeof(get_contact_resp_ticket_info)},
  { 1123, 1130, sizeof(get_contact_resp)},
  { 1132, 1138, sizeof(create_chatroom_req_TAG2)},
  { 1139, 1145, sizeof(create_chatroom_req_member_info)},
  { 1146, 1156, sizeof(create_chatroom_req)},
  { 1161, 1167, sizeof(create_chatroom_resp_result_err_msg)},
  { 1168, 1175, sizeof(create_chatroom_resp_result)},
  { 1177, 1183, sizeof(create_chatroom_resp_member_info_nick_name_info)},
  { 1184, 1192, sizeof(create_chatroom_resp_member_info)},
  { 1195, 1202, sizeof(create_chatroom_resp_chatroom_avatar)},
  { 1204, 1214, sizeof(create_chatroom_resp)},
  { 1219, 1232, sizeof(mm_facing_create_chatroom_req)},
  { 1240, 1246, sizeof(mm_facing_create_chatroom_resp_result_err_msg)},
  { 1247, 1254, sizeof(mm_facing_create_chatroom_resp_result)},
  { 1256, 1263, sizeof(mm_facing_create_chatroom_resp_member_info)},
  { 1265, 1274, sizeof(mm_facing_create_chatroom_resp)},
  { 1278, 1284, sizeof(add_chatroom_member_req_member_info)},
  { 1285, 1291, sizeof(add_chatroom_member_req_chatroom_info)},
  { 1292, 1302, sizeof(add_chatroom_member_req)},
  { 1307, 1313, sizeof(add_chatroom_member_resp_result_err_msg)},
  { 1314, 1321, sizeof(add_chatroom_member_resp_result)},
  { 1323, 1329, sizeof(add_chatroom_member_resp)},
  { 1330, 1338, sizeof(op_set_group_nick_name)},
  { 1341, 1348, sizeof(oplog_req_TAG1_CMD_OPTION)},
  { 1350, 1357, sizeof(oplog_req_TAG1_CMD)},
  { 1359, 1366, sizeof(oplog_req_TAG1)},
  { 1368, 1374, sizeof(oplog_req)},
  { 1375, 1382, sizeof(oplog_resp_result)},
  { 1384, 1390, sizeof(oplog_resp)},
  { 1391, 1405, sizeof(revoke_msg_req)},
  { 1414, 1421, sizeof(revoke_msg_resp)},
  { 1423, 1431, sizeof(set_chatroom_announcement_req)},
  { 1434, 1440, sizeof(set_chatroom_announcement_resp)},
  { 1441, 1451, sizeof(GetLoginQRCodeRequest)},
  { 1456, 1463, sizeof(sKBuiltinBufferT)},
  { 1465, 1478, sizeof(GetLoginQRCodeResponse)},
  { 1486, 1496, sizeof(CheckLoginQRCodeRequest)},
  { 1501, 1508, sizeof(CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg)},
  { 1510, 1517, sizeof(CheckLoginQRCodeResponse)},
  { 1519, 1534, sizeof(NotifyMsg)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_SKBuiltinBuffer_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_mmStr_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_mmRes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LoginInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SyncKey_MsgKey_Key_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SyncKey_MsgKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SyncKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_common_msg_Data_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_common_msg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Wxid_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Msg_RawContent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Msg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_contact_info_NickName_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_contact_info_PY_SHORT_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_contact_info_QuanPin_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_contact_info_BeiZhu_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_contact_info_REAL_PY_SHORT_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_contact_info_REAL_QuanPin_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_contact_info_GroupMemberList_MemberInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_contact_info_GroupMemberList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_contact_info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ManualAuthAccountRequest_AesKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ManualAuthAccountRequest_Ecdh_EcdhKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ManualAuthAccountRequest_Ecdh_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ManualAuthAccountRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ManualAuthDeviceRequest__Tag2___Tag2_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ManualAuthDeviceRequest__Tag2_TAG3_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ManualAuthDeviceRequest__Tag2_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ManualAuthDeviceRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ManualAuthResponse_AuthResult_ErrMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ManualAuthResponse_AuthResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ManualAuthResponse_AuthParam_Ecdh_EcdhKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ManualAuthResponse_AuthParam_Ecdh_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ManualAuthResponse_AuthParam_SessionKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ManualAuthResponse_AuthParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ManualAuthResponse_AccountInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ManualAuthResponse_dns_info_redirect_info_real_host_info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ManualAuthResponse_dns_info_redirect_info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ManualAuthResponse_dns_info_ip_info_longlink_ip_info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ManualAuthResponse_dns_info_ip_info_shortlink_ip_info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ManualAuthResponse_dns_info_ip_info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ManualAuthResponse_dns_info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ManualAuthResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NewInitRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NewInitResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_new_sync_req_continue_flag_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_new_sync_req_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_new_sync_resp_new_msg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_new_sync_resp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_new_send_msg_req_msg_info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_new_send_msg_req_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_new_send_msg_resp_result_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_new_send_msg_resp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_new_send_app_msg_req_appmsg_info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_new_send_app_msg_req_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_new_send_app_msg_resp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_verify_user_req_user_info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_verify_user_req_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_verify_user_resp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_receive_wxhb_req_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_receive_wxhb_resp_TAG1_TAG1_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_receive_wxhb_resp_TAG1_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_receive_wxhb_resp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_open_wxhb_req_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_open_wxhb_resp_TAG1_TAG1_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_open_wxhb_resp_TAG1_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_open_wxhb_resp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_qry_detail_wxhb_req_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_qry_detail_wxhb_resp_TAG1_TAG1_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_qry_detail_wxhb_resp_TAG1_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_qry_detail_wxhb_resp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_send_emoji_req_emoji_info_TAG4_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_send_emoji_req_emoji_info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_send_emoji_req_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_send_emoji_resp_result_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_send_emoji_resp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_transfer_operation_req_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_transfer_operation_resp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_transfer_query_req_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_transfer_query_resp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_get_contact_req_TAG7_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_get_contact_req_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_get_contact_resp_ticket_info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_get_contact_resp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_create_chatroom_req_TAG2_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_create_chatroom_req_member_info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_create_chatroom_req_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_create_chatroom_resp_result_err_msg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_create_chatroom_resp_result_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_create_chatroom_resp_member_info_nick_name_info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_create_chatroom_resp_member_info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_create_chatroom_resp_chatroom_avatar_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_create_chatroom_resp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_mm_facing_create_chatroom_req_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_mm_facing_create_chatroom_resp_result_err_msg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_mm_facing_create_chatroom_resp_result_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_mm_facing_create_chatroom_resp_member_info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_mm_facing_create_chatroom_resp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_add_chatroom_member_req_member_info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_add_chatroom_member_req_chatroom_info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_add_chatroom_member_req_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_add_chatroom_member_resp_result_err_msg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_add_chatroom_member_resp_result_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_add_chatroom_member_resp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_op_set_group_nick_name_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_oplog_req_TAG1_CMD_OPTION_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_oplog_req_TAG1_CMD_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_oplog_req_TAG1_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_oplog_req_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_oplog_resp_result_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_oplog_resp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_revoke_msg_req_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_revoke_msg_resp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_set_chatroom_announcement_req_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_set_chatroom_announcement_resp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetLoginQRCodeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_sKBuiltinBufferT_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetLoginQRCodeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CheckLoginQRCodeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CheckLoginQRCodeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NotifyMsg_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "mm.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 122);
}

}  // namespace

void TableStruct::Shutdown() {
  _SKBuiltinBuffer_t_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _mmStr_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _mmRes_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _LoginInfo_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _SyncKey_MsgKey_Key_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _SyncKey_MsgKey_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _SyncKey_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _common_msg_Data_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _common_msg_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _Wxid_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _Msg_RawContent_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _Msg_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _contact_info_NickName_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _contact_info_PY_SHORT_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _contact_info_QuanPin_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _contact_info_BeiZhu_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _contact_info_REAL_PY_SHORT_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _contact_info_REAL_QuanPin_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _contact_info_GroupMemberList_MemberInfo_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _contact_info_GroupMemberList_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _contact_info_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _ManualAuthAccountRequest_AesKey_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _ManualAuthAccountRequest_Ecdh_EcdhKey_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _ManualAuthAccountRequest_Ecdh_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _ManualAuthAccountRequest_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _ManualAuthDeviceRequest__Tag2___Tag2_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _ManualAuthDeviceRequest__Tag2_TAG3_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _ManualAuthDeviceRequest__Tag2_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _ManualAuthDeviceRequest_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _ManualAuthResponse_AuthResult_ErrMsg_default_instance_.Shutdown();
  delete file_level_metadata[29].reflection;
  _ManualAuthResponse_AuthResult_default_instance_.Shutdown();
  delete file_level_metadata[30].reflection;
  _ManualAuthResponse_AuthParam_Ecdh_EcdhKey_default_instance_.Shutdown();
  delete file_level_metadata[31].reflection;
  _ManualAuthResponse_AuthParam_Ecdh_default_instance_.Shutdown();
  delete file_level_metadata[32].reflection;
  _ManualAuthResponse_AuthParam_SessionKey_default_instance_.Shutdown();
  delete file_level_metadata[33].reflection;
  _ManualAuthResponse_AuthParam_default_instance_.Shutdown();
  delete file_level_metadata[34].reflection;
  _ManualAuthResponse_AccountInfo_default_instance_.Shutdown();
  delete file_level_metadata[35].reflection;
  _ManualAuthResponse_dns_info_redirect_info_real_host_info_default_instance_.Shutdown();
  delete file_level_metadata[36].reflection;
  _ManualAuthResponse_dns_info_redirect_info_default_instance_.Shutdown();
  delete file_level_metadata[37].reflection;
  _ManualAuthResponse_dns_info_ip_info_longlink_ip_info_default_instance_.Shutdown();
  delete file_level_metadata[38].reflection;
  _ManualAuthResponse_dns_info_ip_info_shortlink_ip_info_default_instance_.Shutdown();
  delete file_level_metadata[39].reflection;
  _ManualAuthResponse_dns_info_ip_info_default_instance_.Shutdown();
  delete file_level_metadata[40].reflection;
  _ManualAuthResponse_dns_info_default_instance_.Shutdown();
  delete file_level_metadata[41].reflection;
  _ManualAuthResponse_default_instance_.Shutdown();
  delete file_level_metadata[42].reflection;
  _NewInitRequest_default_instance_.Shutdown();
  delete file_level_metadata[43].reflection;
  _NewInitResponse_default_instance_.Shutdown();
  delete file_level_metadata[44].reflection;
  _new_sync_req_continue_flag_default_instance_.Shutdown();
  delete file_level_metadata[45].reflection;
  _new_sync_req_default_instance_.Shutdown();
  delete file_level_metadata[46].reflection;
  _new_sync_resp_new_msg_default_instance_.Shutdown();
  delete file_level_metadata[47].reflection;
  _new_sync_resp_default_instance_.Shutdown();
  delete file_level_metadata[48].reflection;
  _new_send_msg_req_msg_info_default_instance_.Shutdown();
  delete file_level_metadata[49].reflection;
  _new_send_msg_req_default_instance_.Shutdown();
  delete file_level_metadata[50].reflection;
  _new_send_msg_resp_result_default_instance_.Shutdown();
  delete file_level_metadata[51].reflection;
  _new_send_msg_resp_default_instance_.Shutdown();
  delete file_level_metadata[52].reflection;
  _new_send_app_msg_req_appmsg_info_default_instance_.Shutdown();
  delete file_level_metadata[53].reflection;
  _new_send_app_msg_req_default_instance_.Shutdown();
  delete file_level_metadata[54].reflection;
  _new_send_app_msg_resp_default_instance_.Shutdown();
  delete file_level_metadata[55].reflection;
  _verify_user_req_user_info_default_instance_.Shutdown();
  delete file_level_metadata[56].reflection;
  _verify_user_req_default_instance_.Shutdown();
  delete file_level_metadata[57].reflection;
  _verify_user_resp_default_instance_.Shutdown();
  delete file_level_metadata[58].reflection;
  _receive_wxhb_req_default_instance_.Shutdown();
  delete file_level_metadata[59].reflection;
  _receive_wxhb_resp_TAG1_TAG1_default_instance_.Shutdown();
  delete file_level_metadata[60].reflection;
  _receive_wxhb_resp_TAG1_default_instance_.Shutdown();
  delete file_level_metadata[61].reflection;
  _receive_wxhb_resp_default_instance_.Shutdown();
  delete file_level_metadata[62].reflection;
  _open_wxhb_req_default_instance_.Shutdown();
  delete file_level_metadata[63].reflection;
  _open_wxhb_resp_TAG1_TAG1_default_instance_.Shutdown();
  delete file_level_metadata[64].reflection;
  _open_wxhb_resp_TAG1_default_instance_.Shutdown();
  delete file_level_metadata[65].reflection;
  _open_wxhb_resp_default_instance_.Shutdown();
  delete file_level_metadata[66].reflection;
  _qry_detail_wxhb_req_default_instance_.Shutdown();
  delete file_level_metadata[67].reflection;
  _qry_detail_wxhb_resp_TAG1_TAG1_default_instance_.Shutdown();
  delete file_level_metadata[68].reflection;
  _qry_detail_wxhb_resp_TAG1_default_instance_.Shutdown();
  delete file_level_metadata[69].reflection;
  _qry_detail_wxhb_resp_default_instance_.Shutdown();
  delete file_level_metadata[70].reflection;
  _send_emoji_req_emoji_info_TAG4_default_instance_.Shutdown();
  delete file_level_metadata[71].reflection;
  _send_emoji_req_emoji_info_default_instance_.Shutdown();
  delete file_level_metadata[72].reflection;
  _send_emoji_req_default_instance_.Shutdown();
  delete file_level_metadata[73].reflection;
  _send_emoji_resp_result_default_instance_.Shutdown();
  delete file_level_metadata[74].reflection;
  _send_emoji_resp_default_instance_.Shutdown();
  delete file_level_metadata[75].reflection;
  _transfer_operation_req_default_instance_.Shutdown();
  delete file_level_metadata[76].reflection;
  _transfer_operation_resp_default_instance_.Shutdown();
  delete file_level_metadata[77].reflection;
  _transfer_query_req_default_instance_.Shutdown();
  delete file_level_metadata[78].reflection;
  _transfer_query_resp_default_instance_.Shutdown();
  delete file_level_metadata[79].reflection;
  _get_contact_req_TAG7_default_instance_.Shutdown();
  delete file_level_metadata[80].reflection;
  _get_contact_req_default_instance_.Shutdown();
  delete file_level_metadata[81].reflection;
  _get_contact_resp_ticket_info_default_instance_.Shutdown();
  delete file_level_metadata[82].reflection;
  _get_contact_resp_default_instance_.Shutdown();
  delete file_level_metadata[83].reflection;
  _create_chatroom_req_TAG2_default_instance_.Shutdown();
  delete file_level_metadata[84].reflection;
  _create_chatroom_req_member_info_default_instance_.Shutdown();
  delete file_level_metadata[85].reflection;
  _create_chatroom_req_default_instance_.Shutdown();
  delete file_level_metadata[86].reflection;
  _create_chatroom_resp_result_err_msg_default_instance_.Shutdown();
  delete file_level_metadata[87].reflection;
  _create_chatroom_resp_result_default_instance_.Shutdown();
  delete file_level_metadata[88].reflection;
  _create_chatroom_resp_member_info_nick_name_info_default_instance_.Shutdown();
  delete file_level_metadata[89].reflection;
  _create_chatroom_resp_member_info_default_instance_.Shutdown();
  delete file_level_metadata[90].reflection;
  _create_chatroom_resp_chatroom_avatar_default_instance_.Shutdown();
  delete file_level_metadata[91].reflection;
  _create_chatroom_resp_default_instance_.Shutdown();
  delete file_level_metadata[92].reflection;
  _mm_facing_create_chatroom_req_default_instance_.Shutdown();
  delete file_level_metadata[93].reflection;
  _mm_facing_create_chatroom_resp_result_err_msg_default_instance_.Shutdown();
  delete file_level_metadata[94].reflection;
  _mm_facing_create_chatroom_resp_result_default_instance_.Shutdown();
  delete file_level_metadata[95].reflection;
  _mm_facing_create_chatroom_resp_member_info_default_instance_.Shutdown();
  delete file_level_metadata[96].reflection;
  _mm_facing_create_chatroom_resp_default_instance_.Shutdown();
  delete file_level_metadata[97].reflection;
  _add_chatroom_member_req_member_info_default_instance_.Shutdown();
  delete file_level_metadata[98].reflection;
  _add_chatroom_member_req_chatroom_info_default_instance_.Shutdown();
  delete file_level_metadata[99].reflection;
  _add_chatroom_member_req_default_instance_.Shutdown();
  delete file_level_metadata[100].reflection;
  _add_chatroom_member_resp_result_err_msg_default_instance_.Shutdown();
  delete file_level_metadata[101].reflection;
  _add_chatroom_member_resp_result_default_instance_.Shutdown();
  delete file_level_metadata[102].reflection;
  _add_chatroom_member_resp_default_instance_.Shutdown();
  delete file_level_metadata[103].reflection;
  _op_set_group_nick_name_default_instance_.Shutdown();
  delete file_level_metadata[104].reflection;
  _oplog_req_TAG1_CMD_OPTION_default_instance_.Shutdown();
  delete file_level_metadata[105].reflection;
  _oplog_req_TAG1_CMD_default_instance_.Shutdown();
  delete file_level_metadata[106].reflection;
  _oplog_req_TAG1_default_instance_.Shutdown();
  delete file_level_metadata[107].reflection;
  _oplog_req_default_instance_.Shutdown();
  delete file_level_metadata[108].reflection;
  _oplog_resp_result_default_instance_.Shutdown();
  delete file_level_metadata[109].reflection;
  _oplog_resp_default_instance_.Shutdown();
  delete file_level_metadata[110].reflection;
  _revoke_msg_req_default_instance_.Shutdown();
  delete file_level_metadata[111].reflection;
  _revoke_msg_resp_default_instance_.Shutdown();
  delete file_level_metadata[112].reflection;
  _set_chatroom_announcement_req_default_instance_.Shutdown();
  delete file_level_metadata[113].reflection;
  _set_chatroom_announcement_resp_default_instance_.Shutdown();
  delete file_level_metadata[114].reflection;
  _GetLoginQRCodeRequest_default_instance_.Shutdown();
  delete file_level_metadata[115].reflection;
  _sKBuiltinBufferT_default_instance_.Shutdown();
  delete file_level_metadata[116].reflection;
  _GetLoginQRCodeResponse_default_instance_.Shutdown();
  delete file_level_metadata[117].reflection;
  _CheckLoginQRCodeRequest_default_instance_.Shutdown();
  delete file_level_metadata[118].reflection;
  _CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg_default_instance_.Shutdown();
  delete file_level_metadata[119].reflection;
  _CheckLoginQRCodeResponse_default_instance_.Shutdown();
  delete file_level_metadata[120].reflection;
  _NotifyMsg_default_instance_.Shutdown();
  delete file_level_metadata[121].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _SKBuiltinBuffer_t_default_instance_.DefaultConstruct();
  _mmStr_default_instance_.DefaultConstruct();
  _mmRes_default_instance_.DefaultConstruct();
  _LoginInfo_default_instance_.DefaultConstruct();
  _SyncKey_MsgKey_Key_default_instance_.DefaultConstruct();
  _SyncKey_MsgKey_default_instance_.DefaultConstruct();
  _SyncKey_default_instance_.DefaultConstruct();
  _common_msg_Data_default_instance_.DefaultConstruct();
  _common_msg_default_instance_.DefaultConstruct();
  _Wxid_default_instance_.DefaultConstruct();
  _Msg_RawContent_default_instance_.DefaultConstruct();
  _Msg_default_instance_.DefaultConstruct();
  _contact_info_NickName_default_instance_.DefaultConstruct();
  _contact_info_PY_SHORT_default_instance_.DefaultConstruct();
  _contact_info_QuanPin_default_instance_.DefaultConstruct();
  _contact_info_BeiZhu_default_instance_.DefaultConstruct();
  _contact_info_REAL_PY_SHORT_default_instance_.DefaultConstruct();
  _contact_info_REAL_QuanPin_default_instance_.DefaultConstruct();
  _contact_info_GroupMemberList_MemberInfo_default_instance_.DefaultConstruct();
  _contact_info_GroupMemberList_default_instance_.DefaultConstruct();
  _contact_info_default_instance_.DefaultConstruct();
  _ManualAuthAccountRequest_AesKey_default_instance_.DefaultConstruct();
  _ManualAuthAccountRequest_Ecdh_EcdhKey_default_instance_.DefaultConstruct();
  _ManualAuthAccountRequest_Ecdh_default_instance_.DefaultConstruct();
  _ManualAuthAccountRequest_default_instance_.DefaultConstruct();
  _ManualAuthDeviceRequest__Tag2___Tag2_default_instance_.DefaultConstruct();
  _ManualAuthDeviceRequest__Tag2_TAG3_default_instance_.DefaultConstruct();
  _ManualAuthDeviceRequest__Tag2_default_instance_.DefaultConstruct();
  _ManualAuthDeviceRequest_default_instance_.DefaultConstruct();
  _ManualAuthResponse_AuthResult_ErrMsg_default_instance_.DefaultConstruct();
  _ManualAuthResponse_AuthResult_default_instance_.DefaultConstruct();
  _ManualAuthResponse_AuthParam_Ecdh_EcdhKey_default_instance_.DefaultConstruct();
  _ManualAuthResponse_AuthParam_Ecdh_default_instance_.DefaultConstruct();
  _ManualAuthResponse_AuthParam_SessionKey_default_instance_.DefaultConstruct();
  _ManualAuthResponse_AuthParam_default_instance_.DefaultConstruct();
  _ManualAuthResponse_AccountInfo_default_instance_.DefaultConstruct();
  _ManualAuthResponse_dns_info_redirect_info_real_host_info_default_instance_.DefaultConstruct();
  _ManualAuthResponse_dns_info_redirect_info_default_instance_.DefaultConstruct();
  _ManualAuthResponse_dns_info_ip_info_longlink_ip_info_default_instance_.DefaultConstruct();
  _ManualAuthResponse_dns_info_ip_info_shortlink_ip_info_default_instance_.DefaultConstruct();
  _ManualAuthResponse_dns_info_ip_info_default_instance_.DefaultConstruct();
  _ManualAuthResponse_dns_info_default_instance_.DefaultConstruct();
  _ManualAuthResponse_default_instance_.DefaultConstruct();
  _NewInitRequest_default_instance_.DefaultConstruct();
  _NewInitResponse_default_instance_.DefaultConstruct();
  _new_sync_req_continue_flag_default_instance_.DefaultConstruct();
  _new_sync_req_default_instance_.DefaultConstruct();
  _new_sync_resp_new_msg_default_instance_.DefaultConstruct();
  _new_sync_resp_default_instance_.DefaultConstruct();
  _new_send_msg_req_msg_info_default_instance_.DefaultConstruct();
  _new_send_msg_req_default_instance_.DefaultConstruct();
  _new_send_msg_resp_result_default_instance_.DefaultConstruct();
  _new_send_msg_resp_default_instance_.DefaultConstruct();
  _new_send_app_msg_req_appmsg_info_default_instance_.DefaultConstruct();
  _new_send_app_msg_req_default_instance_.DefaultConstruct();
  _new_send_app_msg_resp_default_instance_.DefaultConstruct();
  _verify_user_req_user_info_default_instance_.DefaultConstruct();
  _verify_user_req_default_instance_.DefaultConstruct();
  _verify_user_resp_default_instance_.DefaultConstruct();
  _receive_wxhb_req_default_instance_.DefaultConstruct();
  _receive_wxhb_resp_TAG1_TAG1_default_instance_.DefaultConstruct();
  _receive_wxhb_resp_TAG1_default_instance_.DefaultConstruct();
  _receive_wxhb_resp_default_instance_.DefaultConstruct();
  _open_wxhb_req_default_instance_.DefaultConstruct();
  _open_wxhb_resp_TAG1_TAG1_default_instance_.DefaultConstruct();
  _open_wxhb_resp_TAG1_default_instance_.DefaultConstruct();
  _open_wxhb_resp_default_instance_.DefaultConstruct();
  _qry_detail_wxhb_req_default_instance_.DefaultConstruct();
  _qry_detail_wxhb_resp_TAG1_TAG1_default_instance_.DefaultConstruct();
  _qry_detail_wxhb_resp_TAG1_default_instance_.DefaultConstruct();
  _qry_detail_wxhb_resp_default_instance_.DefaultConstruct();
  _send_emoji_req_emoji_info_TAG4_default_instance_.DefaultConstruct();
  _send_emoji_req_emoji_info_default_instance_.DefaultConstruct();
  _send_emoji_req_default_instance_.DefaultConstruct();
  _send_emoji_resp_result_default_instance_.DefaultConstruct();
  _send_emoji_resp_default_instance_.DefaultConstruct();
  _transfer_operation_req_default_instance_.DefaultConstruct();
  _transfer_operation_resp_default_instance_.DefaultConstruct();
  _transfer_query_req_default_instance_.DefaultConstruct();
  _transfer_query_resp_default_instance_.DefaultConstruct();
  _get_contact_req_TAG7_default_instance_.DefaultConstruct();
  _get_contact_req_default_instance_.DefaultConstruct();
  _get_contact_resp_ticket_info_default_instance_.DefaultConstruct();
  _get_contact_resp_default_instance_.DefaultConstruct();
  _create_chatroom_req_TAG2_default_instance_.DefaultConstruct();
  _create_chatroom_req_member_info_default_instance_.DefaultConstruct();
  _create_chatroom_req_default_instance_.DefaultConstruct();
  _create_chatroom_resp_result_err_msg_default_instance_.DefaultConstruct();
  _create_chatroom_resp_result_default_instance_.DefaultConstruct();
  _create_chatroom_resp_member_info_nick_name_info_default_instance_.DefaultConstruct();
  _create_chatroom_resp_member_info_default_instance_.DefaultConstruct();
  _create_chatroom_resp_chatroom_avatar_default_instance_.DefaultConstruct();
  _create_chatroom_resp_default_instance_.DefaultConstruct();
  _mm_facing_create_chatroom_req_default_instance_.DefaultConstruct();
  _mm_facing_create_chatroom_resp_result_err_msg_default_instance_.DefaultConstruct();
  _mm_facing_create_chatroom_resp_result_default_instance_.DefaultConstruct();
  _mm_facing_create_chatroom_resp_member_info_default_instance_.DefaultConstruct();
  _mm_facing_create_chatroom_resp_default_instance_.DefaultConstruct();
  _add_chatroom_member_req_member_info_default_instance_.DefaultConstruct();
  _add_chatroom_member_req_chatroom_info_default_instance_.DefaultConstruct();
  _add_chatroom_member_req_default_instance_.DefaultConstruct();
  _add_chatroom_member_resp_result_err_msg_default_instance_.DefaultConstruct();
  _add_chatroom_member_resp_result_default_instance_.DefaultConstruct();
  _add_chatroom_member_resp_default_instance_.DefaultConstruct();
  _op_set_group_nick_name_default_instance_.DefaultConstruct();
  _oplog_req_TAG1_CMD_OPTION_default_instance_.DefaultConstruct();
  _oplog_req_TAG1_CMD_default_instance_.DefaultConstruct();
  _oplog_req_TAG1_default_instance_.DefaultConstruct();
  _oplog_req_default_instance_.DefaultConstruct();
  _oplog_resp_result_default_instance_.DefaultConstruct();
  _oplog_resp_default_instance_.DefaultConstruct();
  _revoke_msg_req_default_instance_.DefaultConstruct();
  _revoke_msg_resp_default_instance_.DefaultConstruct();
  _set_chatroom_announcement_req_default_instance_.DefaultConstruct();
  _set_chatroom_announcement_resp_default_instance_.DefaultConstruct();
  _GetLoginQRCodeRequest_default_instance_.DefaultConstruct();
  _sKBuiltinBufferT_default_instance_.DefaultConstruct();
  _GetLoginQRCodeResponse_default_instance_.DefaultConstruct();
  _CheckLoginQRCodeRequest_default_instance_.DefaultConstruct();
  _CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg_default_instance_.DefaultConstruct();
  _CheckLoginQRCodeResponse_default_instance_.DefaultConstruct();
  _NotifyMsg_default_instance_.DefaultConstruct();
  _SyncKey_default_instance_.get_mutable()->msgkey_ = const_cast< ::SyncKey_MsgKey*>(
      ::SyncKey_MsgKey::internal_default_instance());
  _common_msg_default_instance_.get_mutable()->data_ = const_cast< ::common_msg_Data*>(
      ::common_msg_Data::internal_default_instance());
  _Msg_default_instance_.get_mutable()->from_id_ = const_cast< ::Wxid*>(
      ::Wxid::internal_default_instance());
  _Msg_default_instance_.get_mutable()->to_id_ = const_cast< ::Wxid*>(
      ::Wxid::internal_default_instance());
  _Msg_default_instance_.get_mutable()->raw_ = const_cast< ::Msg_RawContent*>(
      ::Msg_RawContent::internal_default_instance());
  _contact_info_default_instance_.get_mutable()->wxid_ = const_cast< ::Wxid*>(
      ::Wxid::internal_default_instance());
  _contact_info_default_instance_.get_mutable()->nickname_ = const_cast< ::contact_info_NickName*>(
      ::contact_info_NickName::internal_default_instance());
  _contact_info_default_instance_.get_mutable()->shortpy_ = const_cast< ::contact_info_PY_SHORT*>(
      ::contact_info_PY_SHORT::internal_default_instance());
  _contact_info_default_instance_.get_mutable()->quanpin_ = const_cast< ::contact_info_QuanPin*>(
      ::contact_info_QuanPin::internal_default_instance());
  _contact_info_default_instance_.get_mutable()->remark_name_ = const_cast< ::contact_info_BeiZhu*>(
      ::contact_info_BeiZhu::internal_default_instance());
  _contact_info_default_instance_.get_mutable()->real_shortpy_ = const_cast< ::contact_info_REAL_PY_SHORT*>(
      ::contact_info_REAL_PY_SHORT::internal_default_instance());
  _contact_info_default_instance_.get_mutable()->real_quanpin_ = const_cast< ::contact_info_REAL_QuanPin*>(
      ::contact_info_REAL_QuanPin::internal_default_instance());
  _contact_info_default_instance_.get_mutable()->group_member_list_ = const_cast< ::contact_info_GroupMemberList*>(
      ::contact_info_GroupMemberList::internal_default_instance());
  _ManualAuthAccountRequest_Ecdh_default_instance_.get_mutable()->ecdhkey_ = const_cast< ::ManualAuthAccountRequest_Ecdh_EcdhKey*>(
      ::ManualAuthAccountRequest_Ecdh_EcdhKey::internal_default_instance());
  _ManualAuthAccountRequest_default_instance_.get_mutable()->aes_ = const_cast< ::ManualAuthAccountRequest_AesKey*>(
      ::ManualAuthAccountRequest_AesKey::internal_default_instance());
  _ManualAuthAccountRequest_default_instance_.get_mutable()->ecdh_ = const_cast< ::ManualAuthAccountRequest_Ecdh*>(
      ::ManualAuthAccountRequest_Ecdh::internal_default_instance());
  _ManualAuthDeviceRequest__Tag2___Tag2_default_instance_.get_mutable()->tag4_ = const_cast< ::mmStr*>(
      ::mmStr::internal_default_instance());
  _ManualAuthDeviceRequest__Tag2_default_instance_.get_mutable()->tag1_ = const_cast< ::mmStr*>(
      ::mmStr::internal_default_instance());
  _ManualAuthDeviceRequest__Tag2_default_instance_.get_mutable()->tag2_ = const_cast< ::ManualAuthDeviceRequest__Tag2___Tag2*>(
      ::ManualAuthDeviceRequest__Tag2___Tag2::internal_default_instance());
  _ManualAuthDeviceRequest__Tag2_default_instance_.get_mutable()->tag3_ = const_cast< ::ManualAuthDeviceRequest__Tag2_TAG3*>(
      ::ManualAuthDeviceRequest__Tag2_TAG3::internal_default_instance());
  _ManualAuthDeviceRequest__Tag2_default_instance_.get_mutable()->tag4_ = const_cast< ::mmStr*>(
      ::mmStr::internal_default_instance());
  _ManualAuthDeviceRequest__Tag2_default_instance_.get_mutable()->tag5_ = const_cast< ::mmStr*>(
      ::mmStr::internal_default_instance());
  _ManualAuthDeviceRequest_default_instance_.get_mutable()->login_ = const_cast< ::LoginInfo*>(
      ::LoginInfo::internal_default_instance());
  _ManualAuthDeviceRequest_default_instance_.get_mutable()->tag2_ = const_cast< ::ManualAuthDeviceRequest__Tag2*>(
      ::ManualAuthDeviceRequest__Tag2::internal_default_instance());
  _ManualAuthResponse_AuthResult_default_instance_.get_mutable()->err_msg_ = const_cast< ::ManualAuthResponse_AuthResult_ErrMsg*>(
      ::ManualAuthResponse_AuthResult_ErrMsg::internal_default_instance());
  _ManualAuthResponse_AuthParam_Ecdh_default_instance_.get_mutable()->ecdhkey_ = const_cast< ::ManualAuthResponse_AuthParam_Ecdh_EcdhKey*>(
      ::ManualAuthResponse_AuthParam_Ecdh_EcdhKey::internal_default_instance());
  _ManualAuthResponse_AuthParam_default_instance_.get_mutable()->ecdh_ = const_cast< ::ManualAuthResponse_AuthParam_Ecdh*>(
      ::ManualAuthResponse_AuthParam_Ecdh::internal_default_instance());
  _ManualAuthResponse_AuthParam_default_instance_.get_mutable()->session_ = const_cast< ::ManualAuthResponse_AuthParam_SessionKey*>(
      ::ManualAuthResponse_AuthParam_SessionKey::internal_default_instance());
  _ManualAuthResponse_dns_info_default_instance_.get_mutable()->redirect_ = const_cast< ::ManualAuthResponse_dns_info_redirect_info*>(
      ::ManualAuthResponse_dns_info_redirect_info::internal_default_instance());
  _ManualAuthResponse_dns_info_default_instance_.get_mutable()->ip_ = const_cast< ::ManualAuthResponse_dns_info_ip_info*>(
      ::ManualAuthResponse_dns_info_ip_info::internal_default_instance());
  _ManualAuthResponse_default_instance_.get_mutable()->result_ = const_cast< ::ManualAuthResponse_AuthResult*>(
      ::ManualAuthResponse_AuthResult::internal_default_instance());
  _ManualAuthResponse_default_instance_.get_mutable()->authparam_ = const_cast< ::ManualAuthResponse_AuthParam*>(
      ::ManualAuthResponse_AuthParam::internal_default_instance());
  _ManualAuthResponse_default_instance_.get_mutable()->accountinfo_ = const_cast< ::ManualAuthResponse_AccountInfo*>(
      ::ManualAuthResponse_AccountInfo::internal_default_instance());
  _ManualAuthResponse_default_instance_.get_mutable()->dns_ = const_cast< ::ManualAuthResponse_dns_info*>(
      ::ManualAuthResponse_dns_info::internal_default_instance());
  _NewInitRequest_default_instance_.get_mutable()->login_ = const_cast< ::LoginInfo*>(
      ::LoginInfo::internal_default_instance());
  _NewInitRequest_default_instance_.get_mutable()->sync_key_cur_ = const_cast< ::SKBuiltinBuffer_t*>(
      ::SKBuiltinBuffer_t::internal_default_instance());
  _NewInitRequest_default_instance_.get_mutable()->sync_key_max_ = const_cast< ::SKBuiltinBuffer_t*>(
      ::SKBuiltinBuffer_t::internal_default_instance());
  _new_sync_req_default_instance_.get_mutable()->flag_ = const_cast< ::new_sync_req_continue_flag*>(
      ::new_sync_req_continue_flag::internal_default_instance());
  _new_sync_resp_default_instance_.get_mutable()->msg_ = const_cast< ::new_sync_resp_new_msg*>(
      ::new_sync_resp_new_msg::internal_default_instance());
  _new_send_msg_req_msg_info_default_instance_.get_mutable()->to_ = const_cast< ::Wxid*>(
      ::Wxid::internal_default_instance());
  _new_send_msg_req_default_instance_.get_mutable()->msg_ = const_cast< ::new_send_msg_req_msg_info*>(
      ::new_send_msg_req_msg_info::internal_default_instance());
  _new_send_msg_resp_result_default_instance_.get_mutable()->to_ = const_cast< ::Wxid*>(
      ::Wxid::internal_default_instance());
  _new_send_msg_resp_default_instance_.get_mutable()->tag1_ = const_cast< ::mmStr*>(
      ::mmStr::internal_default_instance());
  _new_send_msg_resp_default_instance_.get_mutable()->res_ = const_cast< ::new_send_msg_resp_result*>(
      ::new_send_msg_resp_result::internal_default_instance());
  _new_send_app_msg_req_default_instance_.get_mutable()->login_ = const_cast< ::LoginInfo*>(
      ::LoginInfo::internal_default_instance());
  _new_send_app_msg_req_default_instance_.get_mutable()->info_ = const_cast< ::new_send_app_msg_req_appmsg_info*>(
      ::new_send_app_msg_req_appmsg_info::internal_default_instance());
  _new_send_app_msg_resp_default_instance_.get_mutable()->tag1_ = const_cast< ::mmStr*>(
      ::mmStr::internal_default_instance());
  _verify_user_req_default_instance_.get_mutable()->login_ = const_cast< ::LoginInfo*>(
      ::LoginInfo::internal_default_instance());
  _verify_user_req_default_instance_.get_mutable()->user_ = const_cast< ::verify_user_req_user_info*>(
      ::verify_user_req_user_info::internal_default_instance());
  _verify_user_req_default_instance_.get_mutable()->device_info_ = const_cast< ::mmStr*>(
      ::mmStr::internal_default_instance());
  _verify_user_resp_default_instance_.get_mutable()->res_ = const_cast< ::mmRes*>(
      ::mmRes::internal_default_instance());
  _receive_wxhb_req_default_instance_.get_mutable()->login_ = const_cast< ::LoginInfo*>(
      ::LoginInfo::internal_default_instance());
  _receive_wxhb_req_default_instance_.get_mutable()->info_ = const_cast< ::mmStr*>(
      ::mmStr::internal_default_instance());
  _receive_wxhb_resp_default_instance_.get_mutable()->tag1_ = const_cast< ::receive_wxhb_resp_TAG1*>(
      ::receive_wxhb_resp_TAG1::internal_default_instance());
  _receive_wxhb_resp_default_instance_.get_mutable()->hb_info_ = const_cast< ::mmStr*>(
      ::mmStr::internal_default_instance());
  _open_wxhb_req_default_instance_.get_mutable()->login_ = const_cast< ::LoginInfo*>(
      ::LoginInfo::internal_default_instance());
  _open_wxhb_req_default_instance_.get_mutable()->info_ = const_cast< ::mmStr*>(
      ::mmStr::internal_default_instance());
  _open_wxhb_resp_default_instance_.get_mutable()->tag1_ = const_cast< ::open_wxhb_resp_TAG1*>(
      ::open_wxhb_resp_TAG1::internal_default_instance());
  _open_wxhb_resp_default_instance_.get_mutable()->res_ = const_cast< ::mmStr*>(
      ::mmStr::internal_default_instance());
  _qry_detail_wxhb_req_default_instance_.get_mutable()->login_ = const_cast< ::LoginInfo*>(
      ::LoginInfo::internal_default_instance());
  _qry_detail_wxhb_req_default_instance_.get_mutable()->info_ = const_cast< ::mmStr*>(
      ::mmStr::internal_default_instance());
  _qry_detail_wxhb_resp_default_instance_.get_mutable()->tag1_ = const_cast< ::qry_detail_wxhb_resp_TAG1*>(
      ::qry_detail_wxhb_resp_TAG1::internal_default_instance());
  _qry_detail_wxhb_resp_default_instance_.get_mutable()->res_ = const_cast< ::mmStr*>(
      ::mmStr::internal_default_instance());
  _send_emoji_req_emoji_info_default_instance_.get_mutable()->tag4_ = const_cast< ::send_emoji_req_emoji_info_TAG4*>(
      ::send_emoji_req_emoji_info_TAG4::internal_default_instance());
  _send_emoji_req_default_instance_.get_mutable()->login_ = const_cast< ::LoginInfo*>(
      ::LoginInfo::internal_default_instance());
  _send_emoji_req_default_instance_.get_mutable()->emoji_ = const_cast< ::send_emoji_req_emoji_info*>(
      ::send_emoji_req_emoji_info::internal_default_instance());
  _send_emoji_resp_default_instance_.get_mutable()->res_ = const_cast< ::send_emoji_resp_result*>(
      ::send_emoji_resp_result::internal_default_instance());
  _transfer_operation_req_default_instance_.get_mutable()->login_ = const_cast< ::LoginInfo*>(
      ::LoginInfo::internal_default_instance());
  _transfer_operation_req_default_instance_.get_mutable()->info_ = const_cast< ::mmStr*>(
      ::mmStr::internal_default_instance());
  _transfer_operation_resp_default_instance_.get_mutable()->res_ = const_cast< ::mmStr*>(
      ::mmStr::internal_default_instance());
  _transfer_query_req_default_instance_.get_mutable()->login_ = const_cast< ::LoginInfo*>(
      ::LoginInfo::internal_default_instance());
  _transfer_query_req_default_instance_.get_mutable()->info_ = const_cast< ::mmStr*>(
      ::mmStr::internal_default_instance());
  _transfer_query_resp_default_instance_.get_mutable()->res_ = const_cast< ::mmStr*>(
      ::mmStr::internal_default_instance());
  _get_contact_req_default_instance_.get_mutable()->login_ = const_cast< ::LoginInfo*>(
      ::LoginInfo::internal_default_instance());
  _get_contact_req_default_instance_.get_mutable()->wxid_ = const_cast< ::Wxid*>(
      ::Wxid::internal_default_instance());
  _get_contact_req_default_instance_.get_mutable()->tag7_ = const_cast< ::get_contact_req_TAG7*>(
      ::get_contact_req_TAG7::internal_default_instance());
  _get_contact_resp_default_instance_.get_mutable()->info_ = const_cast< ::contact_info*>(
      ::contact_info::internal_default_instance());
  _get_contact_resp_default_instance_.get_mutable()->ticket_ = const_cast< ::get_contact_resp_ticket_info*>(
      ::get_contact_resp_ticket_info::internal_default_instance());
  _create_chatroom_req_member_info_default_instance_.get_mutable()->wxid_ = const_cast< ::Wxid*>(
      ::Wxid::internal_default_instance());
  _create_chatroom_req_default_instance_.get_mutable()->login_ = const_cast< ::LoginInfo*>(
      ::LoginInfo::internal_default_instance());
  _create_chatroom_req_default_instance_.get_mutable()->tag2_ = const_cast< ::create_chatroom_req_TAG2*>(
      ::create_chatroom_req_TAG2::internal_default_instance());
  _create_chatroom_resp_result_default_instance_.get_mutable()->msg_ = const_cast< ::create_chatroom_resp_result_err_msg*>(
      ::create_chatroom_resp_result_err_msg::internal_default_instance());
  _create_chatroom_resp_member_info_default_instance_.get_mutable()->wxid_ = const_cast< ::Wxid*>(
      ::Wxid::internal_default_instance());
  _create_chatroom_resp_member_info_default_instance_.get_mutable()->nick_name_ = const_cast< ::create_chatroom_resp_member_info_nick_name_info*>(
      ::create_chatroom_resp_member_info_nick_name_info::internal_default_instance());
  _create_chatroom_resp_default_instance_.get_mutable()->res_ = const_cast< ::create_chatroom_resp_result*>(
      ::create_chatroom_resp_result::internal_default_instance());
  _create_chatroom_resp_default_instance_.get_mutable()->chatroom_wxid_ = const_cast< ::Wxid*>(
      ::Wxid::internal_default_instance());
  _create_chatroom_resp_default_instance_.get_mutable()->avatar_ = const_cast< ::create_chatroom_resp_chatroom_avatar*>(
      ::create_chatroom_resp_chatroom_avatar::internal_default_instance());
  _mm_facing_create_chatroom_req_default_instance_.get_mutable()->login_ = const_cast< ::LoginInfo*>(
      ::LoginInfo::internal_default_instance());
  _mm_facing_create_chatroom_resp_result_default_instance_.get_mutable()->msg_ = const_cast< ::mm_facing_create_chatroom_resp_result_err_msg*>(
      ::mm_facing_create_chatroom_resp_result_err_msg::internal_default_instance());
  _mm_facing_create_chatroom_resp_default_instance_.get_mutable()->res_ = const_cast< ::mm_facing_create_chatroom_resp_result*>(
      ::mm_facing_create_chatroom_resp_result::internal_default_instance());
  _add_chatroom_member_req_member_info_default_instance_.get_mutable()->wxid_ = const_cast< ::Wxid*>(
      ::Wxid::internal_default_instance());
  _add_chatroom_member_req_default_instance_.get_mutable()->login_ = const_cast< ::LoginInfo*>(
      ::LoginInfo::internal_default_instance());
  _add_chatroom_member_req_default_instance_.get_mutable()->chatroom_wxid_ = const_cast< ::add_chatroom_member_req_chatroom_info*>(
      ::add_chatroom_member_req_chatroom_info::internal_default_instance());
  _add_chatroom_member_resp_result_default_instance_.get_mutable()->msg_ = const_cast< ::add_chatroom_member_resp_result_err_msg*>(
      ::add_chatroom_member_resp_result_err_msg::internal_default_instance());
  _add_chatroom_member_resp_default_instance_.get_mutable()->res_ = const_cast< ::add_chatroom_member_resp_result*>(
      ::add_chatroom_member_resp_result::internal_default_instance());
  _oplog_req_TAG1_CMD_default_instance_.get_mutable()->option_ = const_cast< ::oplog_req_TAG1_CMD_OPTION*>(
      ::oplog_req_TAG1_CMD_OPTION::internal_default_instance());
  _oplog_req_TAG1_default_instance_.get_mutable()->cmd_ = const_cast< ::oplog_req_TAG1_CMD*>(
      ::oplog_req_TAG1_CMD::internal_default_instance());
  _oplog_req_default_instance_.get_mutable()->tag1_ = const_cast< ::oplog_req_TAG1*>(
      ::oplog_req_TAG1::internal_default_instance());
  _oplog_resp_default_instance_.get_mutable()->res_ = const_cast< ::oplog_resp_result*>(
      ::oplog_resp_result::internal_default_instance());
  _revoke_msg_req_default_instance_.get_mutable()->login_ = const_cast< ::LoginInfo*>(
      ::LoginInfo::internal_default_instance());
  _revoke_msg_resp_default_instance_.get_mutable()->res_ = const_cast< ::mmRes*>(
      ::mmRes::internal_default_instance());
  _set_chatroom_announcement_req_default_instance_.get_mutable()->login_ = const_cast< ::LoginInfo*>(
      ::LoginInfo::internal_default_instance());
  _set_chatroom_announcement_resp_default_instance_.get_mutable()->res_ = const_cast< ::mmRes*>(
      ::mmRes::internal_default_instance());
  _GetLoginQRCodeRequest_default_instance_.get_mutable()->base_ = const_cast< ::LoginInfo*>(
      ::LoginInfo::internal_default_instance());
  _GetLoginQRCodeRequest_default_instance_.get_mutable()->randomencrykey_ = const_cast< ::sKBuiltinBufferT*>(
      ::sKBuiltinBufferT::internal_default_instance());
  _GetLoginQRCodeResponse_default_instance_.get_mutable()->base_ = const_cast< ::mmRes*>(
      ::mmRes::internal_default_instance());
  _GetLoginQRCodeResponse_default_instance_.get_mutable()->qrcode_ = const_cast< ::sKBuiltinBufferT*>(
      ::sKBuiltinBufferT::internal_default_instance());
  _GetLoginQRCodeResponse_default_instance_.get_mutable()->notifykey_ = const_cast< ::sKBuiltinBufferT*>(
      ::sKBuiltinBufferT::internal_default_instance());
  _GetLoginQRCodeResponse_default_instance_.get_mutable()->bluetoothbroadcastcontent_ = const_cast< ::sKBuiltinBufferT*>(
      ::sKBuiltinBufferT::internal_default_instance());
  _CheckLoginQRCodeRequest_default_instance_.get_mutable()->base_ = const_cast< ::LoginInfo*>(
      ::LoginInfo::internal_default_instance());
  _CheckLoginQRCodeRequest_default_instance_.get_mutable()->randomencrykey_ = const_cast< ::sKBuiltinBufferT*>(
      ::sKBuiltinBufferT::internal_default_instance());
  _CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg_default_instance_.get_mutable()->notifydata_ = const_cast< ::sKBuiltinBufferT*>(
      ::sKBuiltinBufferT::internal_default_instance());
  _CheckLoginQRCodeResponse_default_instance_.get_mutable()->base_ = const_cast< ::mmRes*>(
      ::mmRes::internal_default_instance());
  _CheckLoginQRCodeResponse_default_instance_.get_mutable()->notifypkg_ = const_cast< ::CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg*>(
      ::CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\010mm.proto\"1\n\021SKBuiltinBuffer_t\022\014\n\004iLen\030"
      "\001 \002(\r\022\016\n\006Buffer\030\002 \001(\014\"!\n\005mmStr\022\013\n\003len\030\001 "
      "\001(\005\022\013\n\003str\030\002 \001(\t\"&\n\005mmRes\022\014\n\004code\030\001 \001(\005\022"
      "\017\n\007message\030\002 \001(\t\"n\n\tLoginInfo\022\016\n\006aesKey\030"
      "\001 \001(\014\022\013\n\003uin\030\002 \001(\005\022\014\n\004guid\030\003 \001(\t\022\021\n\tclie"
      "ntVer\030\004 \001(\005\022\022\n\nandroidVer\030\005 \001(\t\022\017\n\007unkno"
      "wn\030\006 \001(\005\"\222\001\n\007SyncKey\022\013\n\003len\030\001 \001(\005\022\037\n\006msg"
      "key\030\002 \001(\0132\017.SyncKey.MsgKey\032Y\n\006MsgKey\022\013\n\003"
      "cnt\030\001 \001(\005\022 \n\003key\030\002 \003(\0132\023.SyncKey.MsgKey."
      "Key\032 \n\003Key\022\014\n\004type\030\001 \001(\005\022\013\n\003key\030\002 \001(\003\"]\n"
      "\ncommon_msg\022\014\n\004type\030\001 \001(\005\022\036\n\004data\030\002 \001(\0132"
      "\020.common_msg.Data\032!\n\004Data\022\013\n\003len\030\001 \001(\005\022\014"
      "\n\004data\030\002 \001(\014\"\022\n\004Wxid\022\n\n\002id\030\001 \001(\t\"\224\002\n\003Msg"
      "\022\020\n\010serverid\030\001 \001(\003\022\026\n\007from_id\030\002 \001(\0132\005.Wx"
      "id\022\024\n\005to_id\030\003 \001(\0132\005.Wxid\022\014\n\004type\030\004 \001(\005\022\034"
      "\n\003raw\030\005 \001(\0132\017.Msg.RawContent\022\016\n\006status\030\006"
      " \001(\005\022\014\n\004tag7\030\007 \001(\005\022\014\n\004tag8\030\010 \001(\014\022\022\n\ncrea"
      "teTime\030\t \001(\005\022\017\n\007ex_info\030\n \001(\t\022\022\n\nxmlCont"
      "ent\030\013 \001(\t\022\r\n\005svrId\030\014 \001(\003\022\016\n\006msgKey\030\r \001(\005"
      "\032\035\n\nRawContent\022\017\n\007content\030\001 \001(\t\"\231\013\n\014cont"
      "act_info\022\023\n\004wxid\030\001 \001(\0132\005.Wxid\022(\n\010nicknam"
      "e\030\002 \001(\0132\026.contact_info.NickName\022\'\n\007short"
      "Py\030\003 \001(\0132\026.contact_info.PY_SHORT\022&\n\007quan"
      "pin\030\004 \001(\0132\025.contact_info.QuanPin\022\013\n\003sex\030"
      "\005 \001(\005\022\014\n\004tag6\030\006 \001(\t\022\014\n\004tag7\030\007 \001(\005\022\014\n\004typ"
      "e\030\010 \001(\005\022\014\n\004tag9\030\t \001(\005\022)\n\013remark_name\030\n \001"
      "(\0132\024.contact_info.BeiZhu\0221\n\014real_shortPy"
      "\030\013 \001(\0132\033.contact_info.REAL_PY_SHORT\0220\n\014r"
      "eal_quanpin\030\014 \001(\0132\032.contact_info.REAL_Qu"
      "anPin\022\r\n\005tag13\030\r \001(\005\022\r\n\005tag14\030\016 \001(\005\022\r\n\005t"
      "ag16\030\020 \001(\t\022\021\n\tbChatRoom\030\021 \001(\005\022\r\n\005tag18\030\022"
      " \001(\005\022\r\n\005sheng\030\023 \001(\t\022\013\n\003shi\030\024 \001(\t\022\020\n\010qian"
      "ming\030\025 \001(\t\022\r\n\005tag22\030\026 \001(\005\022\r\n\005tag23\030\027 \001(\005"
      "\022\032\n\022register_body_type\030\030 \001(\005\022\025\n\rregister"
      "_body\030\031 \001(\t\022\r\n\005tag26\030\032 \001(\005\022\013\n\003src\030\033 \001(\005\022"
      "\023\n\013lastMsgTime\030\035 \001(\t\022\r\n\005alias\030\036 \001(\t\022\031\n\021c"
      "hatroomOwnerWxid\030\037 \001(\t\022\r\n\005tag33\030! \001(\005\022\r\n"
      "\005tag34\030\" \001(\005\022\r\n\005tag35\030# \001(\005\022\r\n\005tag37\030% \001"
      "(\014\022\017\n\007country\030& \001(\t\022\022\n\navatar_big\030\' \001(\t\022"
      "\024\n\014avatar_small\030( \001(\t\022\r\n\005tag42\030* \001(\014\022\017\n\007"
      "v1_name\030- \001(\t\022\r\n\005tag50\0302 \001(\014\022\032\n\022chatroom"
      "_serverVer\0305 \001(\005\022\033\n\023chatroom_max_member\030"
      "7 \001(\005\022\r\n\005tag56\0308 \001(\005\0228\n\021group_member_lis"
      "t\0309 \001(\0132\035.contact_info.GroupMemberList\022\r"
      "\n\005tag58\030: \001(\005\022\r\n\005tag62\030> \001(\014\022\r\n\005tag64\030@ "
      "\001(\005\022\r\n\005tag65\030A \001(\005\022\r\n\005tag66\030B \001(\005\022\r\n\005tag"
      "67\030C \001(\005\032\030\n\010NickName\022\014\n\004name\030\001 \001(\t\032\030\n\010PY"
      "_SHORT\022\014\n\004name\030\001 \001(\t\032\027\n\007QuanPin\022\014\n\004name\030"
      "\001 \001(\t\032\026\n\006BeiZhu\022\014\n\004name\030\001 \001(\t\032\035\n\rREAL_PY"
      "_SHORT\022\014\n\004name\030\001 \001(\t\032\034\n\014REAL_QuanPin\022\014\n\004"
      "name\030\001 \001(\t\032\326\001\n\017GroupMemberList\022\013\n\003cnt\030\001 "
      "\001(\005\0228\n\006member\030\002 \003(\0132(.contact_info.Group"
      "MemberList.MemberInfo\022\014\n\004tag3\030\003 \001(\005\022\014\n\004t"
      "ag4\030\004 \001(\t\032`\n\nMemberInfo\022\014\n\004wxid\030\001 \001(\t\022\021\n"
      "\tnick_name\030\002 \001(\t\022\014\n\004tag6\030\006 \001(\005\022\025\n\rinvite"
      "er_wxid\030\007 \001(\t\022\014\n\004tag8\030\010 \001(\005\"\306\002\n\030ManualAu"
      "thAccountRequest\022-\n\003aes\030\001 \002(\0132 .ManualAu"
      "thAccountRequest.AesKey\022,\n\004ecdh\030\002 \002(\0132\036."
      "ManualAuthAccountRequest.Ecdh\022\020\n\010userNam"
      "e\030\003 \002(\t\022\021\n\tpassword1\030\004 \002(\t\022\021\n\tpassword2\030"
      "\005 \002(\t\032\"\n\006AesKey\022\013\n\003len\030\001 \002(\005\022\013\n\003key\030\002 \002("
      "\014\032q\n\004Ecdh\022\013\n\003nid\030\001 \002(\005\0227\n\007ecdhKey\030\002 \002(\0132"
      "&.ManualAuthAccountRequest.Ecdh.EcdhKey\032"
      "#\n\007EcdhKey\022\013\n\003len\030\001 \002(\005\022\013\n\003key\030\002 \002(\014\"\322\005\n"
      "\027ManualAuthDeviceRequest\022\031\n\005login\030\001 \001(\0132"
      "\n.LoginInfo\022,\n\004tag2\030\002 \001(\0132\036.ManualAuthDe"
      "viceRequest._Tag2\022\014\n\004imei\030\003 \001(\t\022\023\n\013softI"
      "nfoXml\030\004 \001(\t\022\020\n\010unknown5\030\005 \001(\005\022\023\n\013client"
      "SeqID\030\006 \001(\t\022\030\n\020clientSeqID_sign\030\007 \001(\t\022\027\n"
      "\017loginDeviceName\030\010 \001(\t\022\025\n\rdeviceInfoXml\030"
      "\t \001(\t\022\020\n\010language\030\n \001(\t\022\020\n\010timeZone\030\013 \001("
      "\t\022\021\n\tunknown13\030\r \001(\005\022\021\n\tunknown14\030\016 \001(\005\022"
      "\023\n\013deviceBrand\030\017 \001(\t\022\023\n\013deviceModel\030\020 \001("
      "\t\022\016\n\006osType\030\021 \001(\t\022\023\n\013realCountry\030\022 \001(\t\022\021"
      "\n\tunknown22\030\026 \001(\005\032\255\002\n\005_Tag2\022\024\n\004tag1\030\001 \001("
      "\0132\006.mmStr\0223\n\004tag2\030\002 \001(\0132%.ManualAuthDevi"
      "ceRequest._Tag2.__Tag2\0221\n\004tag3\030\003 \001(\0132#.M"
      "anualAuthDeviceRequest._Tag2.TAG3\022\024\n\004tag"
      "4\030\004 \001(\0132\006.mmStr\022\024\n\004tag5\030\005 \001(\0132\006.mmStr\022\014\n"
      "\004tag6\030\006 \001(\005\032H\n\006__Tag2\022\014\n\004tag1\030\001 \001(\t\022\014\n\004t"
      "ag2\030\002 \001(\t\022\014\n\004tag3\030\003 \001(\t\022\024\n\004tag4\030\004 \001(\0132\006."
      "mmStr\032\"\n\004TAG3\022\014\n\004tag1\030\001 \001(\t\022\014\n\004tag2\030\002 \001("
      "\t\"\271\014\n\022ManualAuthResponse\022.\n\006result\030\001 \002(\013"
      "2\036.ManualAuthResponse.AuthResult\022\021\n\tunif"
      "yFlag\030\002 \002(\005\0220\n\tauthParam\030\003 \002(\0132\035.ManualA"
      "uthResponse.AuthParam\0224\n\013accountInfo\030\004 \001"
      "(\0132\037.ManualAuthResponse.AccountInfo\022)\n\003d"
      "ns\030\005 \001(\0132\034.ManualAuthResponse.dns_info\032i"
      "\n\nAuthResult\022\014\n\004code\030\001 \002(\005\0226\n\007err_msg\030\002 "
      "\002(\0132%.ManualAuthResponse.AuthResult.ErrM"
      "sg\032\025\n\006ErrMsg\022\013\n\003msg\030\001 \001(\t\032\345\002\n\tAuthParam\022"
      "\013\n\003uin\030\001 \002(\005\0220\n\004ecdh\030\002 \002(\0132\".ManualAuthR"
      "esponse.AuthParam.Ecdh\0229\n\007session\030\003 \002(\0132"
      "(.ManualAuthResponse.AuthParam.SessionKe"
      "y\022\021\n\tSmsTicket\030\020 \001(\014\022\030\n\020bindMailLoginUrl"
      "\030\024 \001(\t\022\022\n\nserverTime\030\026 \001(\005\032u\n\004Ecdh\022\013\n\003ni"
      "d\030\001 \002(\005\022;\n\007ecdhKey\030\002 \001(\0132*.ManualAuthRes"
      "ponse.AuthParam.Ecdh.EcdhKey\032#\n\007EcdhKey\022"
      "\013\n\003len\030\001 \002(\005\022\013\n\003key\030\002 \001(\014\032&\n\nSessionKey\022"
      "\013\n\003len\030\001 \002(\005\022\013\n\003key\030\002 \001(\014\032\255\002\n\013AccountInf"
      "o\022\014\n\004wxId\030\001 \001(\t\022\020\n\010nickName\030\002 \001(\t\022\014\n\004tag"
      "3\030\003 \001(\005\022\020\n\010bindMail\030\004 \001(\t\022\022\n\nbindMobile\030"
      "\005 \001(\t\022\r\n\005Alias\030\006 \001(\t\022\014\n\004tag7\030\007 \001(\t\022\016\n\006st"
      "atus\030\010 \001(\005\022\022\n\npluginFlag\030\t \001(\005\022\024\n\014regist"
      "erType\030\n \001(\005\022\r\n\005tag11\030\013 \001(\t\022\022\n\nsafeDevic"
      "e\030\014 \001(\005\022\032\n\022officialNamePinyin\030\r \001(\t\022\026\n\016o"
      "fficialNameZh\030\016 \001(\t\022\r\n\005tag15\030\017 \001(\t\022\r\n\005fs"
      "Url\030\020 \001(\t\032\311\004\n\010dns_info\022<\n\010redirect\030\001 \001(\013"
      "2*.ManualAuthResponse.dns_info.redirect_"
      "info\0220\n\002ip\030\003 \001(\0132$.ManualAuthResponse.dn"
      "s_info.ip_info\032\234\001\n\rredirect_info\022\013\n\003cnt\030"
      "\001 \001(\005\022L\n\treal_host\030\002 \003(\01329.ManualAuthRes"
      "ponse.dns_info.redirect_info.real_host_i"
      "nfo\0320\n\016real_host_info\022\014\n\004host\030\001 \001(\t\022\020\n\010r"
      "edirect\030\002 \001(\t\032\255\002\n\007ip_info\022\027\n\017longlink_ip"
      "_cnt\030\001 \001(\005\022\030\n\020shortlink_ip_cnt\030\002 \001(\005\022G\n\010"
      "longlink\030\003 \003(\01325.ManualAuthResponse.dns_"
      "info.ip_info.longlink_ip_info\022I\n\tshortli"
      "nk\030\004 \003(\01326.ManualAuthResponse.dns_info.i"
      "p_info.shortlink_ip_info\032,\n\020longlink_ip_"
      "info\022\n\n\002ip\030\003 \001(\t\022\014\n\004host\030\004 \001(\t\032-\n\021shortl"
      "ink_ip_info\022\n\n\002ip\030\003 \001(\t\022\014\n\004host\030\004 \001(\t\"\237\001"
      "\n\016NewInitRequest\022\031\n\005login\030\001 \001(\0132\n.LoginI"
      "nfo\022\014\n\004wxid\030\002 \001(\t\022(\n\014sync_key_cur\030\003 \001(\0132"
      "\022.SKBuiltinBuffer_t\022(\n\014sync_key_max\030\004 \001("
      "\0132\022.SKBuiltinBuffer_t\022\020\n\010language\030\005 \001(\t\""
      "\216\001\n\017NewInitResponse\022\014\n\004tag1\030\001 \001(\014\022\024\n\014syn"
      "c_key_cur\030\002 \001(\014\022\024\n\014sync_key_max\030\003 \001(\014\022\025\n"
      "\rcontinue_flag\030\004 \001(\005\022\017\n\007cntList\030\006 \001(\005\022\031\n"
      "\004tag7\030\007 \003(\0132\013.common_msg\"\264\001\n\014new_sync_re"
      "q\022)\n\004flag\030\001 \001(\0132\033.new_sync_req.continue_"
      "flag\022\020\n\010selector\030\002 \001(\005\022\020\n\010sync_Key\030\003 \001(\014"
      "\022\r\n\005scene\030\004 \001(\005\022\016\n\006device\030\005 \001(\t\022\027\n\017sync_"
      "msg_digest\030\006 \001(\005\032\035\n\rcontinue_flag\022\014\n\004fla"
      "g\030\001 \001(\005\"\302\001\n\rnew_sync_resp\022\014\n\004tag1\030\001 \001(\005\022"
      "#\n\003msg\030\002 \001(\0132\026.new_sync_resp.new_msg\022\014\n\004"
      "tag3\030\003 \001(\005\022\020\n\010sync_key\030\004 \001(\014\022\014\n\004tag5\030\005 \001"
      "(\005\022\014\n\004tag6\030\006 \001(\005\022\013\n\003utc\030\007 \001(\005\0325\n\007new_msg"
      "\022\017\n\007cntList\030\001 \001(\005\022\031\n\004tag2\030\002 \003(\0132\013.common"
      "_msg\"\267\001\n\020new_send_msg_req\022\013\n\003cnt\030\001 \001(\005\022\'"
      "\n\003msg\030\002 \001(\0132\032.new_send_msg_req.msg_info\032"
      "m\n\010msg_info\022\021\n\002to\030\001 \001(\0132\005.Wxid\022\017\n\007conten"
      "t\030\002 \001(\014\022\014\n\004type\030\003 \001(\005\022\013\n\003utc\030\004 \001(\005\022\021\n\tcl"
      "ient_id\030\005 \001(\005\022\017\n\007at_list\030\006 \001(\t\"\246\001\n\021new_s"
      "end_msg_resp\022\024\n\004tag1\030\001 \001(\0132\006.mmStr\022\013\n\003cn"
      "t\030\002 \001(\005\022&\n\003res\030\003 \001(\0132\031.new_send_msg_resp"
      ".result\032F\n\006result\022\014\n\004code\030\001 \001(\005\022\021\n\002to\030\002 "
      "\001(\0132\005.Wxid\022\014\n\004type\030\007 \001(\005\022\r\n\005svrid\030\010 \001(\003\""
      "\355\002\n\024new_send_app_msg_req\022\031\n\005login\030\001 \001(\0132"
      "\n.LoginInfo\022/\n\004info\030\002 \001(\0132!.new_send_app"
      "_msg_req.appmsg_info\022\014\n\004tag4\030\004 \001(\005\022\014\n\004ta"
      "g6\030\006 \001(\005\022\014\n\004tag7\030\007 \001(\t\022\021\n\tfromScene\030\010 \001("
      "\t\022\014\n\004tag9\030\t \001(\005\022\r\n\005tag10\030\n \001(\005\032\256\001\n\013appms"
      "g_info\022\021\n\tfrom_wxid\030\001 \001(\t\022\020\n\010app_wxid\030\002 "
      "\001(\t\022\014\n\004tag3\030\003 \001(\005\022\017\n\007to_wxid\030\004 \001(\t\022\014\n\004ty"
      "pe\030\005 \001(\005\022\017\n\007content\030\006 \001(\t\022\013\n\003utc\030\007 \001(\005\022\021"
      "\n\tclient_id\030\010 \001(\t\022\r\n\005tag10\030\n \001(\005\022\r\n\005tag1"
      "1\030\013 \001(\005\"\243\001\n\025new_send_app_msg_resp\022\024\n\004tag"
      "1\030\001 \001(\0132\006.mmStr\022\021\n\tfrom_wxid\030\003 \001(\t\022\017\n\007to"
      "_wxid\030\004 \001(\t\022\023\n\013sync_key_id\030\005 \001(\005\022\021\n\tclie"
      "nt_id\030\006 \001(\t\022\013\n\003utc\030\007 \001(\005\022\014\n\004type\030\010 \001(\005\022\r"
      "\n\005svrid\030\t \001(\003\"\234\002\n\017verify_user_req\022\031\n\005log"
      "in\030\001 \001(\0132\n.LoginInfo\022\017\n\007op_code\030\002 \001(\005\022\014\n"
      "\004tag3\030\003 \001(\005\022(\n\004user\030\004 \001(\0132\032.verify_user_"
      "req.user_info\022\017\n\007content\030\005 \001(\t\022\014\n\004tag6\030\006"
      " \001(\005\022\r\n\005scene\030\007 \001(\t\022\033\n\013device_info\030\010 \001(\013"
      "2\006.mmStr\032Z\n\tuser_info\022\014\n\004wxid\030\001 \001(\t\022\016\n\006t"
      "icket\030\002 \001(\t\022\023\n\013anti_ticket\030\003 \001(\t\022\014\n\004tag4"
      "\030\004 \001(\005\022\014\n\004tag8\030\010 \001(\005\"5\n\020verify_user_resp"
      "\022\023\n\003res\030\001 \001(\0132\006.mmRes\022\014\n\004wxid\030\002 \001(\t\"^\n\020r"
      "eceive_wxhb_req\022\031\n\005login\030\001 \001(\0132\n.LoginIn"
      "fo\022\013\n\003cmd\030\002 \001(\005\022\014\n\004tag3\030\003 \001(\005\022\024\n\004info\030\004 "
      "\001(\0132\006.mmStr\"\257\001\n\021receive_wxhb_resp\022%\n\004tag"
      "1\030\001 \001(\0132\027.receive_wxhb_resp.TAG1\022\027\n\007hb_i"
      "nfo\030\002 \001(\0132\006.mmStr\022\013\n\003cmd\030\005 \001(\005\022\020\n\010ret_co"
      "de\030\006 \001(\005\022\017\n\007ret_msg\030\007 \001(\t\032*\n\004TAG1\022\014\n\004tag"
      "1\030\001 \001(\005\032\024\n\004TAG1\022\014\n\004tag1\030\001 \001(\t\"[\n\ropen_wx"
      "hb_req\022\031\n\005login\030\001 \001(\0132\n.LoginInfo\022\013\n\003cmd"
      "\030\002 \001(\005\022\014\n\004tag3\030\003 \001(\005\022\024\n\004info\030\004 \001(\0132\006.mmS"
      "tr\"\245\001\n\016open_wxhb_resp\022\"\n\004tag1\030\001 \001(\0132\024.op"
      "en_wxhb_resp.TAG1\022\023\n\003res\030\002 \001(\0132\006.mmStr\022\013"
      "\n\003cmd\030\005 \001(\005\022\020\n\010ret_code\030\006 \001(\005\022\017\n\007ret_msg"
      "\030\007 \001(\t\032*\n\004TAG1\022\014\n\004tag1\030\001 \001(\005\032\024\n\004TAG1\022\014\n\004"
      "tag1\030\001 \001(\t\"a\n\023qry_detail_wxhb_req\022\031\n\005log"
      "in\030\001 \001(\0132\n.LoginInfo\022\013\n\003cmd\030\002 \001(\005\022\014\n\004tag"
      "3\030\003 \001(\005\022\024\n\004info\030\004 \001(\0132\006.mmStr\"\261\001\n\024qry_de"
      "tail_wxhb_resp\022(\n\004tag1\030\001 \001(\0132\032.qry_detai"
      "l_wxhb_resp.TAG1\022\023\n\003res\030\002 \001(\0132\006.mmStr\022\013\n"
      "\003cmd\030\005 \001(\005\022\020\n\010ret_code\030\006 \001(\005\022\017\n\007ret_msg\030"
      "\007 \001(\t\032*\n\004TAG1\022\014\n\004tag1\030\001 \001(\005\032\024\n\004TAG1\022\014\n\004t"
      "ag1\030\001 \001(\t\"\323\002\n\016send_emoji_req\022\031\n\005login\030\001 "
      "\001(\0132\n.LoginInfo\022\014\n\004tag2\030\002 \001(\005\022)\n\005emoji\030\003"
      " \001(\0132\032.send_emoji_req.emoji_info\022\014\n\004tag4"
      "\030\004 \001(\005\032\336\001\n\nemoji_info\022\024\n\014animation_id\030\001 "
      "\001(\t\022\014\n\004tag2\030\002 \001(\005\022\014\n\004tag3\030\003 \001(\005\022-\n\004tag4\030"
      "\004 \001(\0132\037.send_emoji_req.emoji_info.TAG4\022\014"
      "\n\004tag5\030\005 \001(\005\022\017\n\007to_wxid\030\006 \001(\t\022\020\n\010game_ex"
      "t\030\007 \001(\t\022\014\n\004tag8\030\010 \001(\t\022\013\n\003utc\030\t \001(\t\022\r\n\005ta"
      "g11\030\013 \001(\005\032\024\n\004TAG4\022\014\n\004tag1\030\001 \001(\005\"\233\001\n\017send"
      "_emoji_resp\022$\n\003res\030\003 \001(\0132\027.send_emoji_re"
      "sp.result\032b\n\006result\022\014\n\004code\030\001 \001(\005\022\014\n\004tag"
      "2\030\002 \001(\005\022\014\n\004tag3\030\003 \001(\005\022\021\n\tfile_name\030\004 \001(\t"
      "\022\r\n\005svrid\030\005 \001(\005\022\014\n\004tag6\030\006 \001(\005\"e\n\026transfe"
      "r_operation_req\022\031\n\005login\030\001 \001(\0132\n.LoginIn"
      "fo\022\014\n\004tag2\030\002 \001(\005\022\014\n\004tag3\030\003 \001(\005\022\024\n\004info\030\004"
      " \001(\0132\006.mmStr\"Q\n\027transfer_operation_resp\022"
      "\023\n\003res\030\002 \001(\0132\006.mmStr\022\020\n\010ret_code\030\006 \001(\005\022\017"
      "\n\007ret_msg\030\007 \001(\t\"a\n\022transfer_query_req\022\031\n"
      "\005login\030\001 \001(\0132\n.LoginInfo\022\014\n\004tag2\030\002 \001(\005\022\014"
      "\n\004tag3\030\003 \001(\005\022\024\n\004info\030\004 \001(\0132\006.mmStr\"M\n\023tr"
      "ansfer_query_resp\022\023\n\003res\030\002 \001(\0132\006.mmStr\022\020"
      "\n\010ret_code\030\006 \001(\005\022\017\n\007ret_msg\030\007 \001(\t\"\264\001\n\017ge"
      "t_contact_req\022\031\n\005login\030\001 \001(\0132\n.LoginInfo"
      "\022\014\n\004tag2\030\002 \001(\005\022\023\n\004wxid\030\003 \001(\0132\005.Wxid\022\014\n\004t"
      "ag4\030\004 \001(\005\022\014\n\004tag6\030\006 \001(\005\022#\n\004tag7\030\007 \001(\0132\025."
      "get_contact_req.TAG7\022\014\n\004tag8\030\010 \001(\005\032\024\n\004TA"
      "G7\022\014\n\004tag1\030\001 \001(\t\"\213\001\n\020get_contact_resp\022\033\n"
      "\004info\030\003 \001(\0132\r.contact_info\022-\n\006ticket\030\005 \001"
      "(\0132\035.get_contact_resp.ticket_info\032+\n\013tic"
      "ket_info\022\014\n\004wxid\030\001 \001(\t\022\016\n\006ticket\030\002 \001(\t\"\347"
      "\001\n\023create_chatroom_req\022\031\n\005login\030\001 \001(\0132\n."
      "LoginInfo\022\'\n\004tag2\030\002 \001(\0132\031.create_chatroo"
      "m_req.TAG2\022\022\n\nmember_cnt\030\003 \001(\005\0220\n\006member"
      "\030\004 \003(\0132 .create_chatroom_req.member_info"
      "\022\014\n\004tag5\030\005 \001(\005\032\024\n\004TAG2\022\014\n\004tag1\030\001 \001(\t\032\"\n\013"
      "member_info\022\023\n\004wxid\030\001 \001(\0132\005.Wxid\"\212\004\n\024cre"
      "ate_chatroom_resp\022)\n\003res\030\001 \001(\0132\034.create_"
      "chatroom_resp.result\022\022\n\nmember_cnt\030\005 \001(\005"
      "\0221\n\006member\030\006 \003(\0132!.create_chatroom_resp."
      "member_info\022\034\n\rchatroom_wxid\030\007 \001(\0132\005.Wxi"
      "d\0225\n\006avatar\030\010 \001(\0132%.create_chatroom_resp"
      ".chatroom_avatar\032a\n\006result\022\014\n\004code\030\001 \001(\005"
      "\0221\n\003msg\030\002 \001(\0132$.create_chatroom_resp.res"
      "ult.err_msg\032\026\n\007err_msg\022\013\n\003msg\030\001 \001(\t\032\231\001\n\013"
      "member_info\022\023\n\004wxid\030\001 \001(\0132\005.Wxid\022C\n\tnick"
      "_name\030\003 \001(\01320.create_chatroom_resp.membe"
      "r_info.nick_name_info\022\020\n\010qianming\030\017 \001(\t\032"
      "\036\n\016nick_name_info\022\014\n\004name\030\001 \001(\t\032,\n\017chatr"
      "oom_avatar\022\013\n\003len\030\001 \001(\005\022\014\n\004data\030\002 \001(\014\"\246\001"
      "\n\035mm_facing_create_chatroom_req\022\031\n\005login"
      "\030\001 \001(\0132\n.LoginInfo\022\017\n\007op_code\030\002 \001(\005\022\024\n\014c"
      "hatroom_pwd\030\003 \001(\t\022\013\n\003lon\030\004 \001(\002\022\013\n\003lat\030\005 "
      "\001(\002\022\014\n\004tag6\030\006 \001(\005\022\014\n\004tag9\030\t \001(\005\022\r\n\005tag10"
      "\030\n \001(\t\"\320\002\n\036mm_facing_create_chatroom_res"
      "p\0223\n\003res\030\001 \001(\0132&.mm_facing_create_chatro"
      "om_resp.result\022\022\n\nmember_cnt\030\003 \001(\005\022;\n\006me"
      "mber\030\004 \003(\0132+.mm_facing_create_chatroom_r"
      "esp.member_info\022\014\n\004wxid\030\005 \001(\t\032k\n\006result\022"
      "\014\n\004code\030\001 \001(\005\022;\n\003msg\030\002 \001(\0132..mm_facing_c"
      "reate_chatroom_resp.result.err_msg\032\026\n\007er"
      "r_msg\022\013\n\003msg\030\001 \001(\t\032-\n\013member_info\022\013\n\003msg"
      "\030\001 \001(\t\022\021\n\tnick_name\030\003 \001(\t\"\216\002\n\027add_chatro"
      "om_member_req\022\031\n\005login\030\001 \001(\0132\n.LoginInfo"
      "\022\022\n\nmember_cnt\030\002 \001(\005\0224\n\006member\030\003 \003(\0132$.a"
      "dd_chatroom_member_req.member_info\022=\n\rch"
      "atroom_wxid\030\004 \001(\0132&.add_chatroom_member_"
      "req.chatroom_info\022\014\n\004tag5\030\005 \001(\005\032\"\n\013membe"
      "r_info\022\023\n\004wxid\030\001 \001(\0132\005.Wxid\032\035\n\rchatroom_"
      "info\022\014\n\004wxid\030\001 \001(\t\"\260\001\n\030add_chatroom_memb"
      "er_resp\022-\n\003res\030\001 \001(\0132 .add_chatroom_memb"
      "er_resp.result\032e\n\006result\022\014\n\004code\030\001 \001(\005\0225"
      "\n\003msg\030\002 \001(\0132(.add_chatroom_member_resp.r"
      "esult.err_msg\032\026\n\007err_msg\022\013\n\003msg\030\001 \001(\t\"B\n"
      "\026op_set_group_nick_name\022\014\n\004tag1\030\001 \001(\t\022\014\n"
      "\004tag2\030\002 \001(\t\022\014\n\004tag3\030\003 \001(\014\"\313\001\n\toplog_req\022"
      "\035\n\004tag1\030\001 \001(\0132\017.oplog_req.TAG1\032\236\001\n\004TAG1\022"
      "\014\n\004tag1\030\001 \001(\005\022 \n\003cmd\030\002 \001(\0132\023.oplog_req.T"
      "AG1.CMD\032f\n\003CMD\022\016\n\006cmd_id\030\001 \001(\005\022*\n\006option"
      "\030\002 \001(\0132\032.oplog_req.TAG1.CMD.OPTION\032#\n\006OP"
      "TION\022\013\n\003len\030\001 \001(\005\022\014\n\004data\030\002 \001(\014\"R\n\noplog"
      "_resp\022\037\n\003res\030\002 \001(\0132\022.oplog_resp.result\032#"
      "\n\006result\022\014\n\004code\030\002 \001(\014\022\013\n\003msg\030\003 \001(\t\"\275\001\n\016"
      "revoke_msg_req\022\031\n\005login\030\001 \001(\0132\n.LoginInf"
      "o\022\021\n\tclient_id\030\002 \001(\t\022\025\n\rnew_client_id\030\003 "
      "\001(\003\022\013\n\003utc\030\004 \001(\005\022\014\n\004tag5\030\005 \001(\005\022\021\n\tfrom_w"
      "xid\030\006 \001(\t\022\017\n\007to_wxid\030\007 \001(\t\022\030\n\020index_of_r"
      "equest\030\010 \001(\005\022\r\n\005svrid\030\t \001(\003\"D\n\017revoke_ms"
      "g_resp\022\023\n\003res\030\001 \001(\0132\006.mmRes\022\034\n\024response_"
      "sys_wording\030\003 \001(\t\"b\n\035set_chatroom_announ"
      "cement_req\022\031\n\005login\030\001 \001(\0132\n.LoginInfo\022\025\n"
      "\rchatroom_wxid\030\002 \001(\t\022\017\n\007content\030\003 \001(\t\"5\n"
      "\036set_chatroom_announcement_resp\022\023\n\003res\030\001"
      " \001(\0132\006.mmRes\"\222\001\n\025GetLoginQRCodeRequest\022\030"
      "\n\004base\030\001 \002(\0132\n.LoginInfo\022)\n\016randomEncryK"
      "ey\030\002 \002(\0132\021.sKBuiltinBufferT\022\016\n\006opcode\030\003 "
      "\002(\005\022\022\n\ndeviceName\030\004 \001(\t\022\020\n\010username\030\005 \001("
      "\t\"0\n\020sKBuiltinBufferT\022\014\n\004ILen\030\001 \001(\005\022\016\n\006B"
      "uffer\030\002 \001(\014\"\203\002\n\026GetLoginQRCodeResponse\022\024"
      "\n\004Base\030\001 \002(\0132\006.mmRes\022!\n\006QRCode\030\002 \002(\0132\021.s"
      "KBuiltinBufferT\022\014\n\004UUID\030\003 \002(\t\022\021\n\tCheckTi"
      "me\030\004 \002(\005\022$\n\tNotifyKey\030\005 \001(\0132\021.sKBuiltinB"
      "ufferT\022\023\n\013ExpiredTime\030\006 \001(\005\022\036\n\026BlueTooth"
      "BroadCastUuid\030\007 \001(\t\0224\n\031BlueToothBroadCas"
      "tContent\030\010 \001(\0132\021.sKBuiltinBufferT\"\217\001\n\027Ch"
      "eckLoginQRCodeRequest\022\030\n\004base\030\001 \002(\0132\n.Lo"
      "ginInfo\022)\n\016randomEncryKey\030\002 \002(\0132\021.sKBuil"
      "tinBufferT\022\014\n\004uuid\030\003 \002(\t\022\021\n\ttimeStamp\030\004 "
      "\002(\005\022\016\n\006opcode\030\005 \002(\005\"\302\001\n\030CheckLoginQRCode"
      "Response\022\024\n\004base\030\001 \002(\0132\006.mmRes\022A\n\tnotify"
      "Pkg\030\003 \001(\0132..CheckLoginQRCodeResponse.Log"
      "inQRCodeNotifyPkg\032M\n\024LoginQRCodeNotifyPk"
      "g\022%\n\nNotifyData\030\001 \001(\0132\021.sKBuiltinBufferT"
      "\022\016\n\006Opcode\030\002 \001(\005\"\272\001\n\tNotifyMsg\022\014\n\004Uuid\030\001"
      " \001(\t\022\016\n\006Opcode\030\002 \001(\005\022\020\n\010Username\030\003 \001(\t\022\014"
      "\n\004Pass\030\004 \001(\t\022\016\n\006Imgurl\030\005 \001(\t\022\022\n\nUnkownin"
      "t6\030\006 \001(\005\022\020\n\010Nickname\030\007 \001(\t\022\022\n\nUnkownint8"
      "\030\010 \001(\005\022\023\n\013Unkownint10\030\n \001(\005\022\020\n\010Platform\030"
      "\013 \001(\t"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 12285);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mm.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_mm_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SKBuiltinBuffer_t::kILenFieldNumber;
const int SKBuiltinBuffer_t::kBufferFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SKBuiltinBuffer_t::SKBuiltinBuffer_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SKBuiltinBuffer_t)
}
SKBuiltinBuffer_t::SKBuiltinBuffer_t(const SKBuiltinBuffer_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  buffer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_buffer()) {
    buffer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buffer_);
  }
  ilen_ = from.ilen_;
  // @@protoc_insertion_point(copy_constructor:SKBuiltinBuffer_t)
}

void SKBuiltinBuffer_t::SharedCtor() {
  _cached_size_ = 0;
  buffer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ilen_ = 0u;
}

SKBuiltinBuffer_t::~SKBuiltinBuffer_t() {
  // @@protoc_insertion_point(destructor:SKBuiltinBuffer_t)
  SharedDtor();
}

void SKBuiltinBuffer_t::SharedDtor() {
  buffer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SKBuiltinBuffer_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SKBuiltinBuffer_t::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SKBuiltinBuffer_t& SKBuiltinBuffer_t::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

SKBuiltinBuffer_t* SKBuiltinBuffer_t::New(::google::protobuf::Arena* arena) const {
  SKBuiltinBuffer_t* n = new SKBuiltinBuffer_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SKBuiltinBuffer_t::Clear() {
// @@protoc_insertion_point(message_clear_start:SKBuiltinBuffer_t)
  if (has_buffer()) {
    GOOGLE_DCHECK(!buffer_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*buffer_.UnsafeRawStringPointer())->clear();
  }
  ilen_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SKBuiltinBuffer_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SKBuiltinBuffer_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 iLen = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_ilen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ilen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes Buffer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buffer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SKBuiltinBuffer_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SKBuiltinBuffer_t)
  return false;
#undef DO_
}

void SKBuiltinBuffer_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SKBuiltinBuffer_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 iLen = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ilen(), output);
  }

  // optional bytes Buffer = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->buffer(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SKBuiltinBuffer_t)
}

::google::protobuf::uint8* SKBuiltinBuffer_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SKBuiltinBuffer_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 iLen = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ilen(), target);
  }

  // optional bytes Buffer = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->buffer(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SKBuiltinBuffer_t)
  return target;
}

size_t SKBuiltinBuffer_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SKBuiltinBuffer_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 iLen = 1;
  if (has_ilen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ilen());
  }
  // optional bytes Buffer = 2;
  if (has_buffer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->buffer());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SKBuiltinBuffer_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SKBuiltinBuffer_t)
  GOOGLE_DCHECK_NE(&from, this);
  const SKBuiltinBuffer_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SKBuiltinBuffer_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SKBuiltinBuffer_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SKBuiltinBuffer_t)
    MergeFrom(*source);
  }
}

void SKBuiltinBuffer_t::MergeFrom(const SKBuiltinBuffer_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SKBuiltinBuffer_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_buffer();
      buffer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buffer_);
    }
    if (cached_has_bits & 0x00000002u) {
      ilen_ = from.ilen_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SKBuiltinBuffer_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SKBuiltinBuffer_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SKBuiltinBuffer_t::CopyFrom(const SKBuiltinBuffer_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SKBuiltinBuffer_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SKBuiltinBuffer_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void SKBuiltinBuffer_t::Swap(SKBuiltinBuffer_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SKBuiltinBuffer_t::InternalSwap(SKBuiltinBuffer_t* other) {
  buffer_.Swap(&other->buffer_);
  std::swap(ilen_, other->ilen_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SKBuiltinBuffer_t::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SKBuiltinBuffer_t

// required uint32 iLen = 1;
bool SKBuiltinBuffer_t::has_ilen() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SKBuiltinBuffer_t::set_has_ilen() {
  _has_bits_[0] |= 0x00000002u;
}
void SKBuiltinBuffer_t::clear_has_ilen() {
  _has_bits_[0] &= ~0x00000002u;
}
void SKBuiltinBuffer_t::clear_ilen() {
  ilen_ = 0u;
  clear_has_ilen();
}
::google::protobuf::uint32 SKBuiltinBuffer_t::ilen() const {
  // @@protoc_insertion_point(field_get:SKBuiltinBuffer_t.iLen)
  return ilen_;
}
void SKBuiltinBuffer_t::set_ilen(::google::protobuf::uint32 value) {
  set_has_ilen();
  ilen_ = value;
  // @@protoc_insertion_point(field_set:SKBuiltinBuffer_t.iLen)
}

// optional bytes Buffer = 2;
bool SKBuiltinBuffer_t::has_buffer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SKBuiltinBuffer_t::set_has_buffer() {
  _has_bits_[0] |= 0x00000001u;
}
void SKBuiltinBuffer_t::clear_has_buffer() {
  _has_bits_[0] &= ~0x00000001u;
}
void SKBuiltinBuffer_t::clear_buffer() {
  buffer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_buffer();
}
const ::std::string& SKBuiltinBuffer_t::buffer() const {
  // @@protoc_insertion_point(field_get:SKBuiltinBuffer_t.Buffer)
  return buffer_.GetNoArena();
}
void SKBuiltinBuffer_t::set_buffer(const ::std::string& value) {
  set_has_buffer();
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SKBuiltinBuffer_t.Buffer)
}
#if LANG_CXX11
void SKBuiltinBuffer_t::set_buffer(::std::string&& value) {
  set_has_buffer();
  buffer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SKBuiltinBuffer_t.Buffer)
}
#endif
void SKBuiltinBuffer_t::set_buffer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_buffer();
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SKBuiltinBuffer_t.Buffer)
}
void SKBuiltinBuffer_t::set_buffer(const void* value, size_t size) {
  set_has_buffer();
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SKBuiltinBuffer_t.Buffer)
}
::std::string* SKBuiltinBuffer_t::mutable_buffer() {
  set_has_buffer();
  // @@protoc_insertion_point(field_mutable:SKBuiltinBuffer_t.Buffer)
  return buffer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SKBuiltinBuffer_t::release_buffer() {
  // @@protoc_insertion_point(field_release:SKBuiltinBuffer_t.Buffer)
  clear_has_buffer();
  return buffer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SKBuiltinBuffer_t::set_allocated_buffer(::std::string* buffer) {
  if (buffer != NULL) {
    set_has_buffer();
  } else {
    clear_has_buffer();
  }
  buffer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buffer);
  // @@protoc_insertion_point(field_set_allocated:SKBuiltinBuffer_t.Buffer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mmStr::kLenFieldNumber;
const int mmStr::kStrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mmStr::mmStr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mmStr)
}
mmStr::mmStr(const mmStr& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_str()) {
    str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.str_);
  }
  len_ = from.len_;
  // @@protoc_insertion_point(copy_constructor:mmStr)
}

void mmStr::SharedCtor() {
  _cached_size_ = 0;
  str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  len_ = 0;
}

mmStr::~mmStr() {
  // @@protoc_insertion_point(destructor:mmStr)
  SharedDtor();
}

void mmStr::SharedDtor() {
  str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mmStr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mmStr::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const mmStr& mmStr::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

mmStr* mmStr::New(::google::protobuf::Arena* arena) const {
  mmStr* n = new mmStr;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void mmStr::Clear() {
// @@protoc_insertion_point(message_clear_start:mmStr)
  if (has_str()) {
    GOOGLE_DCHECK(!str_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*str_.UnsafeRawStringPointer())->clear();
  }
  len_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool mmStr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mmStr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 len = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_len();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &len_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string str = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->str().data(), this->str().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mmStr.str");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mmStr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mmStr)
  return false;
#undef DO_
}

void mmStr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mmStr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 len = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->len(), output);
  }

  // optional string str = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mmStr.str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->str(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mmStr)
}

::google::protobuf::uint8* mmStr::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmStr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 len = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->len(), target);
  }

  // optional string str = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mmStr.str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->str(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmStr)
  return target;
}

size_t mmStr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmStr)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string str = 2;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
    }

    // optional int32 len = 1;
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->len());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mmStr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mmStr)
  GOOGLE_DCHECK_NE(&from, this);
  const mmStr* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const mmStr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mmStr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mmStr)
    MergeFrom(*source);
  }
}

void mmStr::MergeFrom(const mmStr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mmStr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_str();
      str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.str_);
    }
    if (cached_has_bits & 0x00000002u) {
      len_ = from.len_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void mmStr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mmStr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mmStr::CopyFrom(const mmStr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmStr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mmStr::IsInitialized() const {
  return true;
}

void mmStr::Swap(mmStr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mmStr::InternalSwap(mmStr* other) {
  str_.Swap(&other->str_);
  std::swap(len_, other->len_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata mmStr::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// mmStr

// optional int32 len = 1;
bool mmStr::has_len() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void mmStr::set_has_len() {
  _has_bits_[0] |= 0x00000002u;
}
void mmStr::clear_has_len() {
  _has_bits_[0] &= ~0x00000002u;
}
void mmStr::clear_len() {
  len_ = 0;
  clear_has_len();
}
::google::protobuf::int32 mmStr::len() const {
  // @@protoc_insertion_point(field_get:mmStr.len)
  return len_;
}
void mmStr::set_len(::google::protobuf::int32 value) {
  set_has_len();
  len_ = value;
  // @@protoc_insertion_point(field_set:mmStr.len)
}

// optional string str = 2;
bool mmStr::has_str() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void mmStr::set_has_str() {
  _has_bits_[0] |= 0x00000001u;
}
void mmStr::clear_has_str() {
  _has_bits_[0] &= ~0x00000001u;
}
void mmStr::clear_str() {
  str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_str();
}
const ::std::string& mmStr::str() const {
  // @@protoc_insertion_point(field_get:mmStr.str)
  return str_.GetNoArena();
}
void mmStr::set_str(const ::std::string& value) {
  set_has_str();
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mmStr.str)
}
#if LANG_CXX11
void mmStr::set_str(::std::string&& value) {
  set_has_str();
  str_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mmStr.str)
}
#endif
void mmStr::set_str(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_str();
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mmStr.str)
}
void mmStr::set_str(const char* value, size_t size) {
  set_has_str();
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mmStr.str)
}
::std::string* mmStr::mutable_str() {
  set_has_str();
  // @@protoc_insertion_point(field_mutable:mmStr.str)
  return str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* mmStr::release_str() {
  // @@protoc_insertion_point(field_release:mmStr.str)
  clear_has_str();
  return str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void mmStr::set_allocated_str(::std::string* str) {
  if (str != NULL) {
    set_has_str();
  } else {
    clear_has_str();
  }
  str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str);
  // @@protoc_insertion_point(field_set_allocated:mmStr.str)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mmRes::kCodeFieldNumber;
const int mmRes::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mmRes::mmRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mmRes)
}
mmRes::mmRes(const mmRes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:mmRes)
}

void mmRes::SharedCtor() {
  _cached_size_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
}

mmRes::~mmRes() {
  // @@protoc_insertion_point(destructor:mmRes)
  SharedDtor();
}

void mmRes::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mmRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mmRes::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const mmRes& mmRes::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

mmRes* mmRes::New(::google::protobuf::Arena* arena) const {
  mmRes* n = new mmRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void mmRes::Clear() {
// @@protoc_insertion_point(message_clear_start:mmRes)
  if (has_message()) {
    GOOGLE_DCHECK(!message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*message_.UnsafeRawStringPointer())->clear();
  }
  code_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool mmRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mmRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mmRes.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mmRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mmRes)
  return false;
#undef DO_
}

void mmRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mmRes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 code = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mmRes.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mmRes)
}

::google::protobuf::uint8* mmRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmRes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mmRes.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmRes)
  return target;
}

size_t mmRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mmRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mmRes)
  GOOGLE_DCHECK_NE(&from, this);
  const mmRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const mmRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mmRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mmRes)
    MergeFrom(*source);
  }
}

void mmRes::MergeFrom(const mmRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mmRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      code_ = from.code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void mmRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mmRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mmRes::CopyFrom(const mmRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mmRes::IsInitialized() const {
  return true;
}

void mmRes::Swap(mmRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mmRes::InternalSwap(mmRes* other) {
  message_.Swap(&other->message_);
  std::swap(code_, other->code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata mmRes::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// mmRes

// optional int32 code = 1;
bool mmRes::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void mmRes::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
void mmRes::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void mmRes::clear_code() {
  code_ = 0;
  clear_has_code();
}
::google::protobuf::int32 mmRes::code() const {
  // @@protoc_insertion_point(field_get:mmRes.code)
  return code_;
}
void mmRes::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:mmRes.code)
}

// optional string message = 2;
bool mmRes::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void mmRes::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
void mmRes::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void mmRes::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
const ::std::string& mmRes::message() const {
  // @@protoc_insertion_point(field_get:mmRes.message)
  return message_.GetNoArena();
}
void mmRes::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mmRes.message)
}
#if LANG_CXX11
void mmRes::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mmRes.message)
}
#endif
void mmRes::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mmRes.message)
}
void mmRes::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mmRes.message)
}
::std::string* mmRes::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:mmRes.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* mmRes::release_message() {
  // @@protoc_insertion_point(field_release:mmRes.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void mmRes::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:mmRes.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginInfo::kAesKeyFieldNumber;
const int LoginInfo::kUinFieldNumber;
const int LoginInfo::kGuidFieldNumber;
const int LoginInfo::kClientVerFieldNumber;
const int LoginInfo::kAndroidVerFieldNumber;
const int LoginInfo::kUnknownFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginInfo::LoginInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:LoginInfo)
}
LoginInfo::LoginInfo(const LoginInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  aeskey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_aeskey()) {
    aeskey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.aeskey_);
  }
  guid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_guid()) {
    guid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guid_);
  }
  androidver_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_androidver()) {
    androidver_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.androidver_);
  }
  ::memcpy(&uin_, &from.uin_,
    reinterpret_cast<char*>(&unknown_) -
    reinterpret_cast<char*>(&uin_) + sizeof(unknown_));
  // @@protoc_insertion_point(copy_constructor:LoginInfo)
}

void LoginInfo::SharedCtor() {
  _cached_size_ = 0;
  aeskey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  androidver_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&uin_, 0, reinterpret_cast<char*>(&unknown_) -
    reinterpret_cast<char*>(&uin_) + sizeof(unknown_));
}

LoginInfo::~LoginInfo() {
  // @@protoc_insertion_point(destructor:LoginInfo)
  SharedDtor();
}

void LoginInfo::SharedDtor() {
  aeskey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  androidver_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LoginInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginInfo::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoginInfo& LoginInfo::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

LoginInfo* LoginInfo::New(::google::protobuf::Arena* arena) const {
  LoginInfo* n = new LoginInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:LoginInfo)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_aeskey()) {
      GOOGLE_DCHECK(!aeskey_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*aeskey_.UnsafeRawStringPointer())->clear();
    }
    if (has_guid()) {
      GOOGLE_DCHECK(!guid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*guid_.UnsafeRawStringPointer())->clear();
    }
    if (has_androidver()) {
      GOOGLE_DCHECK(!androidver_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*androidver_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 56u) {
    ::memset(&uin_, 0, reinterpret_cast<char*>(&unknown_) -
      reinterpret_cast<char*>(&uin_) + sizeof(unknown_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LoginInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LoginInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes aesKey = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_aeskey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 uin = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_uin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string guid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guid().data(), this->guid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "LoginInfo.guid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 clientVer = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_clientver();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clientver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string androidVer = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_androidver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->androidver().data(), this->androidver().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "LoginInfo.androidVer");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 unknown = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_unknown();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unknown_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LoginInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LoginInfo)
  return false;
#undef DO_
}

void LoginInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LoginInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes aesKey = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->aeskey(), output);
  }

  // optional int32 uin = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->uin(), output);
  }

  // optional string guid = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "LoginInfo.guid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->guid(), output);
  }

  // optional int32 clientVer = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->clientver(), output);
  }

  // optional string androidVer = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->androidver().data(), this->androidver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "LoginInfo.androidVer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->androidver(), output);
  }

  // optional int32 unknown = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->unknown(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LoginInfo)
}

::google::protobuf::uint8* LoginInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LoginInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes aesKey = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->aeskey(), target);
  }

  // optional int32 uin = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->uin(), target);
  }

  // optional string guid = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "LoginInfo.guid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->guid(), target);
  }

  // optional int32 clientVer = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->clientver(), target);
  }

  // optional string androidVer = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->androidver().data(), this->androidver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "LoginInfo.androidVer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->androidver(), target);
  }

  // optional int32 unknown = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->unknown(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LoginInfo)
  return target;
}

size_t LoginInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LoginInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional bytes aesKey = 1;
    if (has_aeskey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->aeskey());
    }

    // optional string guid = 3;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guid());
    }

    // optional string androidVer = 5;
    if (has_androidver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->androidver());
    }

    // optional int32 uin = 2;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uin());
    }

    // optional int32 clientVer = 4;
    if (has_clientver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clientver());
    }

    // optional int32 unknown = 6;
    if (has_unknown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unknown());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LoginInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LoginInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LoginInfo)
    MergeFrom(*source);
  }
}

void LoginInfo::MergeFrom(const LoginInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LoginInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_aeskey();
      aeskey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.aeskey_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_guid();
      guid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guid_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_androidver();
      androidver_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.androidver_);
    }
    if (cached_has_bits & 0x00000008u) {
      uin_ = from.uin_;
    }
    if (cached_has_bits & 0x00000010u) {
      clientver_ = from.clientver_;
    }
    if (cached_has_bits & 0x00000020u) {
      unknown_ = from.unknown_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LoginInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LoginInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginInfo::CopyFrom(const LoginInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LoginInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginInfo::IsInitialized() const {
  return true;
}

void LoginInfo::Swap(LoginInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginInfo::InternalSwap(LoginInfo* other) {
  aeskey_.Swap(&other->aeskey_);
  guid_.Swap(&other->guid_);
  androidver_.Swap(&other->androidver_);
  std::swap(uin_, other->uin_);
  std::swap(clientver_, other->clientver_);
  std::swap(unknown_, other->unknown_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginInfo::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginInfo

// optional bytes aesKey = 1;
bool LoginInfo::has_aeskey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LoginInfo::set_has_aeskey() {
  _has_bits_[0] |= 0x00000001u;
}
void LoginInfo::clear_has_aeskey() {
  _has_bits_[0] &= ~0x00000001u;
}
void LoginInfo::clear_aeskey() {
  aeskey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_aeskey();
}
const ::std::string& LoginInfo::aeskey() const {
  // @@protoc_insertion_point(field_get:LoginInfo.aesKey)
  return aeskey_.GetNoArena();
}
void LoginInfo::set_aeskey(const ::std::string& value) {
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LoginInfo.aesKey)
}
#if LANG_CXX11
void LoginInfo::set_aeskey(::std::string&& value) {
  set_has_aeskey();
  aeskey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LoginInfo.aesKey)
}
#endif
void LoginInfo::set_aeskey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginInfo.aesKey)
}
void LoginInfo::set_aeskey(const void* value, size_t size) {
  set_has_aeskey();
  aeskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginInfo.aesKey)
}
::std::string* LoginInfo::mutable_aeskey() {
  set_has_aeskey();
  // @@protoc_insertion_point(field_mutable:LoginInfo.aesKey)
  return aeskey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginInfo::release_aeskey() {
  // @@protoc_insertion_point(field_release:LoginInfo.aesKey)
  clear_has_aeskey();
  return aeskey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginInfo::set_allocated_aeskey(::std::string* aeskey) {
  if (aeskey != NULL) {
    set_has_aeskey();
  } else {
    clear_has_aeskey();
  }
  aeskey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), aeskey);
  // @@protoc_insertion_point(field_set_allocated:LoginInfo.aesKey)
}

// optional int32 uin = 2;
bool LoginInfo::has_uin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LoginInfo::set_has_uin() {
  _has_bits_[0] |= 0x00000008u;
}
void LoginInfo::clear_has_uin() {
  _has_bits_[0] &= ~0x00000008u;
}
void LoginInfo::clear_uin() {
  uin_ = 0;
  clear_has_uin();
}
::google::protobuf::int32 LoginInfo::uin() const {
  // @@protoc_insertion_point(field_get:LoginInfo.uin)
  return uin_;
}
void LoginInfo::set_uin(::google::protobuf::int32 value) {
  set_has_uin();
  uin_ = value;
  // @@protoc_insertion_point(field_set:LoginInfo.uin)
}

// optional string guid = 3;
bool LoginInfo::has_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LoginInfo::set_has_guid() {
  _has_bits_[0] |= 0x00000002u;
}
void LoginInfo::clear_has_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
void LoginInfo::clear_guid() {
  guid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_guid();
}
const ::std::string& LoginInfo::guid() const {
  // @@protoc_insertion_point(field_get:LoginInfo.guid)
  return guid_.GetNoArena();
}
void LoginInfo::set_guid(const ::std::string& value) {
  set_has_guid();
  guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LoginInfo.guid)
}
#if LANG_CXX11
void LoginInfo::set_guid(::std::string&& value) {
  set_has_guid();
  guid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LoginInfo.guid)
}
#endif
void LoginInfo::set_guid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_guid();
  guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginInfo.guid)
}
void LoginInfo::set_guid(const char* value, size_t size) {
  set_has_guid();
  guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginInfo.guid)
}
::std::string* LoginInfo::mutable_guid() {
  set_has_guid();
  // @@protoc_insertion_point(field_mutable:LoginInfo.guid)
  return guid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginInfo::release_guid() {
  // @@protoc_insertion_point(field_release:LoginInfo.guid)
  clear_has_guid();
  return guid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginInfo::set_allocated_guid(::std::string* guid) {
  if (guid != NULL) {
    set_has_guid();
  } else {
    clear_has_guid();
  }
  guid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), guid);
  // @@protoc_insertion_point(field_set_allocated:LoginInfo.guid)
}

// optional int32 clientVer = 4;
bool LoginInfo::has_clientver() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LoginInfo::set_has_clientver() {
  _has_bits_[0] |= 0x00000010u;
}
void LoginInfo::clear_has_clientver() {
  _has_bits_[0] &= ~0x00000010u;
}
void LoginInfo::clear_clientver() {
  clientver_ = 0;
  clear_has_clientver();
}
::google::protobuf::int32 LoginInfo::clientver() const {
  // @@protoc_insertion_point(field_get:LoginInfo.clientVer)
  return clientver_;
}
void LoginInfo::set_clientver(::google::protobuf::int32 value) {
  set_has_clientver();
  clientver_ = value;
  // @@protoc_insertion_point(field_set:LoginInfo.clientVer)
}

// optional string androidVer = 5;
bool LoginInfo::has_androidver() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LoginInfo::set_has_androidver() {
  _has_bits_[0] |= 0x00000004u;
}
void LoginInfo::clear_has_androidver() {
  _has_bits_[0] &= ~0x00000004u;
}
void LoginInfo::clear_androidver() {
  androidver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_androidver();
}
const ::std::string& LoginInfo::androidver() const {
  // @@protoc_insertion_point(field_get:LoginInfo.androidVer)
  return androidver_.GetNoArena();
}
void LoginInfo::set_androidver(const ::std::string& value) {
  set_has_androidver();
  androidver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LoginInfo.androidVer)
}
#if LANG_CXX11
void LoginInfo::set_androidver(::std::string&& value) {
  set_has_androidver();
  androidver_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LoginInfo.androidVer)
}
#endif
void LoginInfo::set_androidver(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_androidver();
  androidver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginInfo.androidVer)
}
void LoginInfo::set_androidver(const char* value, size_t size) {
  set_has_androidver();
  androidver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginInfo.androidVer)
}
::std::string* LoginInfo::mutable_androidver() {
  set_has_androidver();
  // @@protoc_insertion_point(field_mutable:LoginInfo.androidVer)
  return androidver_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginInfo::release_androidver() {
  // @@protoc_insertion_point(field_release:LoginInfo.androidVer)
  clear_has_androidver();
  return androidver_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginInfo::set_allocated_androidver(::std::string* androidver) {
  if (androidver != NULL) {
    set_has_androidver();
  } else {
    clear_has_androidver();
  }
  androidver_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), androidver);
  // @@protoc_insertion_point(field_set_allocated:LoginInfo.androidVer)
}

// optional int32 unknown = 6;
bool LoginInfo::has_unknown() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LoginInfo::set_has_unknown() {
  _has_bits_[0] |= 0x00000020u;
}
void LoginInfo::clear_has_unknown() {
  _has_bits_[0] &= ~0x00000020u;
}
void LoginInfo::clear_unknown() {
  unknown_ = 0;
  clear_has_unknown();
}
::google::protobuf::int32 LoginInfo::unknown() const {
  // @@protoc_insertion_point(field_get:LoginInfo.unknown)
  return unknown_;
}
void LoginInfo::set_unknown(::google::protobuf::int32 value) {
  set_has_unknown();
  unknown_ = value;
  // @@protoc_insertion_point(field_set:LoginInfo.unknown)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SyncKey_MsgKey_Key::kTypeFieldNumber;
const int SyncKey_MsgKey_Key::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SyncKey_MsgKey_Key::SyncKey_MsgKey_Key()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SyncKey.MsgKey.Key)
}
SyncKey_MsgKey_Key::SyncKey_MsgKey_Key(const SyncKey_MsgKey_Key& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&key_, &from.key_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&key_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:SyncKey.MsgKey.Key)
}

void SyncKey_MsgKey_Key::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&key_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&key_) + sizeof(type_));
}

SyncKey_MsgKey_Key::~SyncKey_MsgKey_Key() {
  // @@protoc_insertion_point(destructor:SyncKey.MsgKey.Key)
  SharedDtor();
}

void SyncKey_MsgKey_Key::SharedDtor() {
}

void SyncKey_MsgKey_Key::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncKey_MsgKey_Key::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SyncKey_MsgKey_Key& SyncKey_MsgKey_Key::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

SyncKey_MsgKey_Key* SyncKey_MsgKey_Key::New(::google::protobuf::Arena* arena) const {
  SyncKey_MsgKey_Key* n = new SyncKey_MsgKey_Key;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SyncKey_MsgKey_Key::Clear() {
// @@protoc_insertion_point(message_clear_start:SyncKey.MsgKey.Key)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&key_, 0, reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&key_) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SyncKey_MsgKey_Key::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SyncKey.MsgKey.Key)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_key();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SyncKey.MsgKey.Key)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SyncKey.MsgKey.Key)
  return false;
#undef DO_
}

void SyncKey_MsgKey_Key::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SyncKey.MsgKey.Key)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int64 key = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SyncKey.MsgKey.Key)
}

::google::protobuf::uint8* SyncKey_MsgKey_Key::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SyncKey.MsgKey.Key)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int64 key = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SyncKey.MsgKey.Key)
  return target;
}

size_t SyncKey_MsgKey_Key::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SyncKey.MsgKey.Key)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int64 key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->key());
    }

    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncKey_MsgKey_Key::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SyncKey.MsgKey.Key)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncKey_MsgKey_Key* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SyncKey_MsgKey_Key>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SyncKey.MsgKey.Key)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SyncKey.MsgKey.Key)
    MergeFrom(*source);
  }
}

void SyncKey_MsgKey_Key::MergeFrom(const SyncKey_MsgKey_Key& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SyncKey.MsgKey.Key)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      key_ = from.key_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SyncKey_MsgKey_Key::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SyncKey.MsgKey.Key)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncKey_MsgKey_Key::CopyFrom(const SyncKey_MsgKey_Key& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SyncKey.MsgKey.Key)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncKey_MsgKey_Key::IsInitialized() const {
  return true;
}

void SyncKey_MsgKey_Key::Swap(SyncKey_MsgKey_Key* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SyncKey_MsgKey_Key::InternalSwap(SyncKey_MsgKey_Key* other) {
  std::swap(key_, other->key_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SyncKey_MsgKey_Key::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SyncKey_MsgKey_Key

// optional int32 type = 1;
bool SyncKey_MsgKey_Key::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SyncKey_MsgKey_Key::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void SyncKey_MsgKey_Key::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void SyncKey_MsgKey_Key::clear_type() {
  type_ = 0;
  clear_has_type();
}
::google::protobuf::int32 SyncKey_MsgKey_Key::type() const {
  // @@protoc_insertion_point(field_get:SyncKey.MsgKey.Key.type)
  return type_;
}
void SyncKey_MsgKey_Key::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:SyncKey.MsgKey.Key.type)
}

// optional int64 key = 2;
bool SyncKey_MsgKey_Key::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SyncKey_MsgKey_Key::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void SyncKey_MsgKey_Key::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void SyncKey_MsgKey_Key::clear_key() {
  key_ = GOOGLE_LONGLONG(0);
  clear_has_key();
}
::google::protobuf::int64 SyncKey_MsgKey_Key::key() const {
  // @@protoc_insertion_point(field_get:SyncKey.MsgKey.Key.key)
  return key_;
}
void SyncKey_MsgKey_Key::set_key(::google::protobuf::int64 value) {
  set_has_key();
  key_ = value;
  // @@protoc_insertion_point(field_set:SyncKey.MsgKey.Key.key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SyncKey_MsgKey::kCntFieldNumber;
const int SyncKey_MsgKey::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SyncKey_MsgKey::SyncKey_MsgKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SyncKey.MsgKey)
}
SyncKey_MsgKey::SyncKey_MsgKey(const SyncKey_MsgKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      key_(from.key_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cnt_ = from.cnt_;
  // @@protoc_insertion_point(copy_constructor:SyncKey.MsgKey)
}

void SyncKey_MsgKey::SharedCtor() {
  _cached_size_ = 0;
  cnt_ = 0;
}

SyncKey_MsgKey::~SyncKey_MsgKey() {
  // @@protoc_insertion_point(destructor:SyncKey.MsgKey)
  SharedDtor();
}

void SyncKey_MsgKey::SharedDtor() {
}

void SyncKey_MsgKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncKey_MsgKey::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SyncKey_MsgKey& SyncKey_MsgKey::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

SyncKey_MsgKey* SyncKey_MsgKey::New(::google::protobuf::Arena* arena) const {
  SyncKey_MsgKey* n = new SyncKey_MsgKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SyncKey_MsgKey::Clear() {
// @@protoc_insertion_point(message_clear_start:SyncKey.MsgKey)
  key_.Clear();
  cnt_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SyncKey_MsgKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SyncKey.MsgKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cnt = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_cnt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SyncKey.MsgKey.Key key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SyncKey.MsgKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SyncKey.MsgKey)
  return false;
#undef DO_
}

void SyncKey_MsgKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SyncKey.MsgKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cnt = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cnt(), output);
  }

  // repeated .SyncKey.MsgKey.Key key = 2;
  for (unsigned int i = 0, n = this->key_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->key(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SyncKey.MsgKey)
}

::google::protobuf::uint8* SyncKey_MsgKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SyncKey.MsgKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cnt = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cnt(), target);
  }

  // repeated .SyncKey.MsgKey.Key key = 2;
  for (unsigned int i = 0, n = this->key_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->key(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SyncKey.MsgKey)
  return target;
}

size_t SyncKey_MsgKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SyncKey.MsgKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .SyncKey.MsgKey.Key key = 2;
  {
    unsigned int count = this->key_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->key(i));
    }
  }

  // optional int32 cnt = 1;
  if (has_cnt()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cnt());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncKey_MsgKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SyncKey.MsgKey)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncKey_MsgKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SyncKey_MsgKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SyncKey.MsgKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SyncKey.MsgKey)
    MergeFrom(*source);
  }
}

void SyncKey_MsgKey::MergeFrom(const SyncKey_MsgKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SyncKey.MsgKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  key_.MergeFrom(from.key_);
  if (from.has_cnt()) {
    set_cnt(from.cnt());
  }
}

void SyncKey_MsgKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SyncKey.MsgKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncKey_MsgKey::CopyFrom(const SyncKey_MsgKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SyncKey.MsgKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncKey_MsgKey::IsInitialized() const {
  return true;
}

void SyncKey_MsgKey::Swap(SyncKey_MsgKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SyncKey_MsgKey::InternalSwap(SyncKey_MsgKey* other) {
  key_.InternalSwap(&other->key_);
  std::swap(cnt_, other->cnt_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SyncKey_MsgKey::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SyncKey_MsgKey

// optional int32 cnt = 1;
bool SyncKey_MsgKey::has_cnt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SyncKey_MsgKey::set_has_cnt() {
  _has_bits_[0] |= 0x00000001u;
}
void SyncKey_MsgKey::clear_has_cnt() {
  _has_bits_[0] &= ~0x00000001u;
}
void SyncKey_MsgKey::clear_cnt() {
  cnt_ = 0;
  clear_has_cnt();
}
::google::protobuf::int32 SyncKey_MsgKey::cnt() const {
  // @@protoc_insertion_point(field_get:SyncKey.MsgKey.cnt)
  return cnt_;
}
void SyncKey_MsgKey::set_cnt(::google::protobuf::int32 value) {
  set_has_cnt();
  cnt_ = value;
  // @@protoc_insertion_point(field_set:SyncKey.MsgKey.cnt)
}

// repeated .SyncKey.MsgKey.Key key = 2;
int SyncKey_MsgKey::key_size() const {
  return key_.size();
}
void SyncKey_MsgKey::clear_key() {
  key_.Clear();
}
const ::SyncKey_MsgKey_Key& SyncKey_MsgKey::key(int index) const {
  // @@protoc_insertion_point(field_get:SyncKey.MsgKey.key)
  return key_.Get(index);
}
::SyncKey_MsgKey_Key* SyncKey_MsgKey::mutable_key(int index) {
  // @@protoc_insertion_point(field_mutable:SyncKey.MsgKey.key)
  return key_.Mutable(index);
}
::SyncKey_MsgKey_Key* SyncKey_MsgKey::add_key() {
  // @@protoc_insertion_point(field_add:SyncKey.MsgKey.key)
  return key_.Add();
}
::google::protobuf::RepeatedPtrField< ::SyncKey_MsgKey_Key >*
SyncKey_MsgKey::mutable_key() {
  // @@protoc_insertion_point(field_mutable_list:SyncKey.MsgKey.key)
  return &key_;
}
const ::google::protobuf::RepeatedPtrField< ::SyncKey_MsgKey_Key >&
SyncKey_MsgKey::key() const {
  // @@protoc_insertion_point(field_list:SyncKey.MsgKey.key)
  return key_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SyncKey::kLenFieldNumber;
const int SyncKey::kMsgkeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SyncKey::SyncKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SyncKey)
}
SyncKey::SyncKey(const SyncKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_msgkey()) {
    msgkey_ = new ::SyncKey_MsgKey(*from.msgkey_);
  } else {
    msgkey_ = NULL;
  }
  len_ = from.len_;
  // @@protoc_insertion_point(copy_constructor:SyncKey)
}

void SyncKey::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&msgkey_, 0, reinterpret_cast<char*>(&len_) -
    reinterpret_cast<char*>(&msgkey_) + sizeof(len_));
}

SyncKey::~SyncKey() {
  // @@protoc_insertion_point(destructor:SyncKey)
  SharedDtor();
}

void SyncKey::SharedDtor() {
  if (this != internal_default_instance()) {
    delete msgkey_;
  }
}

void SyncKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncKey::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SyncKey& SyncKey::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

SyncKey* SyncKey::New(::google::protobuf::Arena* arena) const {
  SyncKey* n = new SyncKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SyncKey::Clear() {
// @@protoc_insertion_point(message_clear_start:SyncKey)
  if (has_msgkey()) {
    GOOGLE_DCHECK(msgkey_ != NULL);
    msgkey_->::SyncKey_MsgKey::Clear();
  }
  len_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SyncKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SyncKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 len = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_len();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &len_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SyncKey.MsgKey msgkey = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msgkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SyncKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SyncKey)
  return false;
#undef DO_
}

void SyncKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SyncKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 len = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->len(), output);
  }

  // optional .SyncKey.MsgKey msgkey = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->msgkey_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SyncKey)
}

::google::protobuf::uint8* SyncKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SyncKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 len = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->len(), target);
  }

  // optional .SyncKey.MsgKey msgkey = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->msgkey_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SyncKey)
  return target;
}

size_t SyncKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SyncKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .SyncKey.MsgKey msgkey = 2;
    if (has_msgkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->msgkey_);
    }

    // optional int32 len = 1;
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->len());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SyncKey)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SyncKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SyncKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SyncKey)
    MergeFrom(*source);
  }
}

void SyncKey::MergeFrom(const SyncKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SyncKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_msgkey()->::SyncKey_MsgKey::MergeFrom(from.msgkey());
    }
    if (cached_has_bits & 0x00000002u) {
      len_ = from.len_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SyncKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SyncKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncKey::CopyFrom(const SyncKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SyncKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncKey::IsInitialized() const {
  return true;
}

void SyncKey::Swap(SyncKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SyncKey::InternalSwap(SyncKey* other) {
  std::swap(msgkey_, other->msgkey_);
  std::swap(len_, other->len_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SyncKey::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SyncKey

// optional int32 len = 1;
bool SyncKey::has_len() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SyncKey::set_has_len() {
  _has_bits_[0] |= 0x00000002u;
}
void SyncKey::clear_has_len() {
  _has_bits_[0] &= ~0x00000002u;
}
void SyncKey::clear_len() {
  len_ = 0;
  clear_has_len();
}
::google::protobuf::int32 SyncKey::len() const {
  // @@protoc_insertion_point(field_get:SyncKey.len)
  return len_;
}
void SyncKey::set_len(::google::protobuf::int32 value) {
  set_has_len();
  len_ = value;
  // @@protoc_insertion_point(field_set:SyncKey.len)
}

// optional .SyncKey.MsgKey msgkey = 2;
bool SyncKey::has_msgkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SyncKey::set_has_msgkey() {
  _has_bits_[0] |= 0x00000001u;
}
void SyncKey::clear_has_msgkey() {
  _has_bits_[0] &= ~0x00000001u;
}
void SyncKey::clear_msgkey() {
  if (msgkey_ != NULL) msgkey_->::SyncKey_MsgKey::Clear();
  clear_has_msgkey();
}
const ::SyncKey_MsgKey& SyncKey::msgkey() const {
  // @@protoc_insertion_point(field_get:SyncKey.msgkey)
  return msgkey_ != NULL ? *msgkey_
                         : *::SyncKey_MsgKey::internal_default_instance();
}
::SyncKey_MsgKey* SyncKey::mutable_msgkey() {
  set_has_msgkey();
  if (msgkey_ == NULL) {
    msgkey_ = new ::SyncKey_MsgKey;
  }
  // @@protoc_insertion_point(field_mutable:SyncKey.msgkey)
  return msgkey_;
}
::SyncKey_MsgKey* SyncKey::release_msgkey() {
  // @@protoc_insertion_point(field_release:SyncKey.msgkey)
  clear_has_msgkey();
  ::SyncKey_MsgKey* temp = msgkey_;
  msgkey_ = NULL;
  return temp;
}
void SyncKey::set_allocated_msgkey(::SyncKey_MsgKey* msgkey) {
  delete msgkey_;
  msgkey_ = msgkey;
  if (msgkey) {
    set_has_msgkey();
  } else {
    clear_has_msgkey();
  }
  // @@protoc_insertion_point(field_set_allocated:SyncKey.msgkey)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int common_msg_Data::kLenFieldNumber;
const int common_msg_Data::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

common_msg_Data::common_msg_Data()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:common_msg.Data)
}
common_msg_Data::common_msg_Data(const common_msg_Data& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  len_ = from.len_;
  // @@protoc_insertion_point(copy_constructor:common_msg.Data)
}

void common_msg_Data::SharedCtor() {
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  len_ = 0;
}

common_msg_Data::~common_msg_Data() {
  // @@protoc_insertion_point(destructor:common_msg.Data)
  SharedDtor();
}

void common_msg_Data::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void common_msg_Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* common_msg_Data::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const common_msg_Data& common_msg_Data::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

common_msg_Data* common_msg_Data::New(::google::protobuf::Arena* arena) const {
  common_msg_Data* n = new common_msg_Data;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void common_msg_Data::Clear() {
// @@protoc_insertion_point(message_clear_start:common_msg.Data)
  if (has_data()) {
    GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*data_.UnsafeRawStringPointer())->clear();
  }
  len_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool common_msg_Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:common_msg.Data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 len = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_len();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &len_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common_msg.Data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common_msg.Data)
  return false;
#undef DO_
}

void common_msg_Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common_msg.Data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 len = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->len(), output);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:common_msg.Data)
}

::google::protobuf::uint8* common_msg_Data::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:common_msg.Data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 len = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->len(), target);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common_msg.Data)
  return target;
}

size_t common_msg_Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common_msg.Data)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional int32 len = 1;
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->len());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void common_msg_Data::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:common_msg.Data)
  GOOGLE_DCHECK_NE(&from, this);
  const common_msg_Data* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const common_msg_Data>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:common_msg.Data)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:common_msg.Data)
    MergeFrom(*source);
  }
}

void common_msg_Data::MergeFrom(const common_msg_Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common_msg.Data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      len_ = from.len_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void common_msg_Data::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:common_msg.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void common_msg_Data::CopyFrom(const common_msg_Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common_msg.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool common_msg_Data::IsInitialized() const {
  return true;
}

void common_msg_Data::Swap(common_msg_Data* other) {
  if (other == this) return;
  InternalSwap(other);
}
void common_msg_Data::InternalSwap(common_msg_Data* other) {
  data_.Swap(&other->data_);
  std::swap(len_, other->len_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata common_msg_Data::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// common_msg_Data

// optional int32 len = 1;
bool common_msg_Data::has_len() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void common_msg_Data::set_has_len() {
  _has_bits_[0] |= 0x00000002u;
}
void common_msg_Data::clear_has_len() {
  _has_bits_[0] &= ~0x00000002u;
}
void common_msg_Data::clear_len() {
  len_ = 0;
  clear_has_len();
}
::google::protobuf::int32 common_msg_Data::len() const {
  // @@protoc_insertion_point(field_get:common_msg.Data.len)
  return len_;
}
void common_msg_Data::set_len(::google::protobuf::int32 value) {
  set_has_len();
  len_ = value;
  // @@protoc_insertion_point(field_set:common_msg.Data.len)
}

// optional bytes data = 2;
bool common_msg_Data::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void common_msg_Data::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void common_msg_Data::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void common_msg_Data::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& common_msg_Data::data() const {
  // @@protoc_insertion_point(field_get:common_msg.Data.data)
  return data_.GetNoArena();
}
void common_msg_Data::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common_msg.Data.data)
}
#if LANG_CXX11
void common_msg_Data::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common_msg.Data.data)
}
#endif
void common_msg_Data::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common_msg.Data.data)
}
void common_msg_Data::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common_msg.Data.data)
}
::std::string* common_msg_Data::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:common_msg.Data.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* common_msg_Data::release_data() {
  // @@protoc_insertion_point(field_release:common_msg.Data.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void common_msg_Data::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:common_msg.Data.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int common_msg::kTypeFieldNumber;
const int common_msg::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

common_msg::common_msg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:common_msg)
}
common_msg::common_msg(const common_msg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_data()) {
    data_ = new ::common_msg_Data(*from.data_);
  } else {
    data_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:common_msg)
}

void common_msg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&data_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&data_) + sizeof(type_));
}

common_msg::~common_msg() {
  // @@protoc_insertion_point(destructor:common_msg)
  SharedDtor();
}

void common_msg::SharedDtor() {
  if (this != internal_default_instance()) {
    delete data_;
  }
}

void common_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* common_msg::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const common_msg& common_msg::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

common_msg* common_msg::New(::google::protobuf::Arena* arena) const {
  common_msg* n = new common_msg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void common_msg::Clear() {
// @@protoc_insertion_point(message_clear_start:common_msg)
  if (has_data()) {
    GOOGLE_DCHECK(data_ != NULL);
    data_->::common_msg_Data::Clear();
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool common_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:common_msg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .common_msg.Data data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common_msg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common_msg)
  return false;
#undef DO_
}

void common_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common_msg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional .common_msg.Data data = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->data_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:common_msg)
}

::google::protobuf::uint8* common_msg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:common_msg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional .common_msg.Data data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->data_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common_msg)
  return target;
}

size_t common_msg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common_msg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .common_msg.Data data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->data_);
    }

    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void common_msg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:common_msg)
  GOOGLE_DCHECK_NE(&from, this);
  const common_msg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const common_msg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:common_msg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:common_msg)
    MergeFrom(*source);
  }
}

void common_msg::MergeFrom(const common_msg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common_msg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_data()->::common_msg_Data::MergeFrom(from.data());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void common_msg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:common_msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void common_msg::CopyFrom(const common_msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common_msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool common_msg::IsInitialized() const {
  return true;
}

void common_msg::Swap(common_msg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void common_msg::InternalSwap(common_msg* other) {
  std::swap(data_, other->data_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata common_msg::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// common_msg

// optional int32 type = 1;
bool common_msg::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void common_msg::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void common_msg::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void common_msg::clear_type() {
  type_ = 0;
  clear_has_type();
}
::google::protobuf::int32 common_msg::type() const {
  // @@protoc_insertion_point(field_get:common_msg.type)
  return type_;
}
void common_msg::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:common_msg.type)
}

// optional .common_msg.Data data = 2;
bool common_msg::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void common_msg::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void common_msg::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void common_msg::clear_data() {
  if (data_ != NULL) data_->::common_msg_Data::Clear();
  clear_has_data();
}
const ::common_msg_Data& common_msg::data() const {
  // @@protoc_insertion_point(field_get:common_msg.data)
  return data_ != NULL ? *data_
                         : *::common_msg_Data::internal_default_instance();
}
::common_msg_Data* common_msg::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    data_ = new ::common_msg_Data;
  }
  // @@protoc_insertion_point(field_mutable:common_msg.data)
  return data_;
}
::common_msg_Data* common_msg::release_data() {
  // @@protoc_insertion_point(field_release:common_msg.data)
  clear_has_data();
  ::common_msg_Data* temp = data_;
  data_ = NULL;
  return temp;
}
void common_msg::set_allocated_data(::common_msg_Data* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:common_msg.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Wxid::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Wxid::Wxid()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Wxid)
}
Wxid::Wxid(const Wxid& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  // @@protoc_insertion_point(copy_constructor:Wxid)
}

void Wxid::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Wxid::~Wxid() {
  // @@protoc_insertion_point(destructor:Wxid)
  SharedDtor();
}

void Wxid::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Wxid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Wxid::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Wxid& Wxid::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

Wxid* Wxid::New(::google::protobuf::Arena* arena) const {
  Wxid* n = new Wxid;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Wxid::Clear() {
// @@protoc_insertion_point(message_clear_start:Wxid)
  if (has_id()) {
    GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*id_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Wxid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Wxid)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Wxid.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Wxid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Wxid)
  return false;
#undef DO_
}

void Wxid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Wxid)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Wxid.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Wxid)
}

::google::protobuf::uint8* Wxid::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Wxid)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Wxid.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Wxid)
  return target;
}

size_t Wxid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Wxid)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Wxid::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Wxid)
  GOOGLE_DCHECK_NE(&from, this);
  const Wxid* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Wxid>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Wxid)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Wxid)
    MergeFrom(*source);
  }
}

void Wxid::MergeFrom(const Wxid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Wxid)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    set_has_id();
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void Wxid::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Wxid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Wxid::CopyFrom(const Wxid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Wxid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Wxid::IsInitialized() const {
  return true;
}

void Wxid::Swap(Wxid* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Wxid::InternalSwap(Wxid* other) {
  id_.Swap(&other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Wxid::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Wxid

// optional string id = 1;
bool Wxid::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Wxid::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Wxid::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Wxid::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
const ::std::string& Wxid::id() const {
  // @@protoc_insertion_point(field_get:Wxid.id)
  return id_.GetNoArena();
}
void Wxid::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Wxid.id)
}
#if LANG_CXX11
void Wxid::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Wxid.id)
}
#endif
void Wxid::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Wxid.id)
}
void Wxid::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Wxid.id)
}
::std::string* Wxid::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:Wxid.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Wxid::release_id() {
  // @@protoc_insertion_point(field_release:Wxid.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Wxid::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:Wxid.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Msg_RawContent::kContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Msg_RawContent::Msg_RawContent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Msg.RawContent)
}
Msg_RawContent::Msg_RawContent(const Msg_RawContent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_content()) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  // @@protoc_insertion_point(copy_constructor:Msg.RawContent)
}

void Msg_RawContent::SharedCtor() {
  _cached_size_ = 0;
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Msg_RawContent::~Msg_RawContent() {
  // @@protoc_insertion_point(destructor:Msg.RawContent)
  SharedDtor();
}

void Msg_RawContent::SharedDtor() {
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Msg_RawContent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_RawContent::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Msg_RawContent& Msg_RawContent::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

Msg_RawContent* Msg_RawContent::New(::google::protobuf::Arena* arena) const {
  Msg_RawContent* n = new Msg_RawContent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Msg_RawContent::Clear() {
// @@protoc_insertion_point(message_clear_start:Msg.RawContent)
  if (has_content()) {
    GOOGLE_DCHECK(!content_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*content_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Msg_RawContent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Msg.RawContent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string content = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Msg.RawContent.content");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Msg.RawContent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Msg.RawContent)
  return false;
#undef DO_
}

void Msg_RawContent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Msg.RawContent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string content = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Msg.RawContent.content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->content(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Msg.RawContent)
}

::google::protobuf::uint8* Msg_RawContent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Msg.RawContent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string content = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Msg.RawContent.content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->content(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Msg.RawContent)
  return target;
}

size_t Msg_RawContent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Msg.RawContent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string content = 1;
  if (has_content()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->content());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_RawContent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Msg.RawContent)
  GOOGLE_DCHECK_NE(&from, this);
  const Msg_RawContent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Msg_RawContent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Msg.RawContent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Msg.RawContent)
    MergeFrom(*source);
  }
}

void Msg_RawContent::MergeFrom(const Msg_RawContent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Msg.RawContent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_content()) {
    set_has_content();
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
}

void Msg_RawContent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Msg.RawContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_RawContent::CopyFrom(const Msg_RawContent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Msg.RawContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_RawContent::IsInitialized() const {
  return true;
}

void Msg_RawContent::Swap(Msg_RawContent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Msg_RawContent::InternalSwap(Msg_RawContent* other) {
  content_.Swap(&other->content_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Msg_RawContent::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Msg_RawContent

// optional string content = 1;
bool Msg_RawContent::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Msg_RawContent::set_has_content() {
  _has_bits_[0] |= 0x00000001u;
}
void Msg_RawContent::clear_has_content() {
  _has_bits_[0] &= ~0x00000001u;
}
void Msg_RawContent::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
const ::std::string& Msg_RawContent::content() const {
  // @@protoc_insertion_point(field_get:Msg.RawContent.content)
  return content_.GetNoArena();
}
void Msg_RawContent::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Msg.RawContent.content)
}
#if LANG_CXX11
void Msg_RawContent::set_content(::std::string&& value) {
  set_has_content();
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Msg.RawContent.content)
}
#endif
void Msg_RawContent::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Msg.RawContent.content)
}
void Msg_RawContent::set_content(const char* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Msg.RawContent.content)
}
::std::string* Msg_RawContent::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:Msg.RawContent.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Msg_RawContent::release_content() {
  // @@protoc_insertion_point(field_release:Msg.RawContent.content)
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Msg_RawContent::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:Msg.RawContent.content)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Msg::kServeridFieldNumber;
const int Msg::kFromIdFieldNumber;
const int Msg::kToIdFieldNumber;
const int Msg::kTypeFieldNumber;
const int Msg::kRawFieldNumber;
const int Msg::kStatusFieldNumber;
const int Msg::kTag7FieldNumber;
const int Msg::kTag8FieldNumber;
const int Msg::kCreateTimeFieldNumber;
const int Msg::kExInfoFieldNumber;
const int Msg::kXmlContentFieldNumber;
const int Msg::kSvrIdFieldNumber;
const int Msg::kMsgKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Msg::Msg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Msg)
}
Msg::Msg(const Msg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tag8_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tag8()) {
    tag8_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag8_);
  }
  ex_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ex_info()) {
    ex_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ex_info_);
  }
  xmlcontent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_xmlcontent()) {
    xmlcontent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.xmlcontent_);
  }
  if (from.has_from_id()) {
    from_id_ = new ::Wxid(*from.from_id_);
  } else {
    from_id_ = NULL;
  }
  if (from.has_to_id()) {
    to_id_ = new ::Wxid(*from.to_id_);
  } else {
    to_id_ = NULL;
  }
  if (from.has_raw()) {
    raw_ = new ::Msg_RawContent(*from.raw_);
  } else {
    raw_ = NULL;
  }
  ::memcpy(&serverid_, &from.serverid_,
    reinterpret_cast<char*>(&msgkey_) -
    reinterpret_cast<char*>(&serverid_) + sizeof(msgkey_));
  // @@protoc_insertion_point(copy_constructor:Msg)
}

void Msg::SharedCtor() {
  _cached_size_ = 0;
  tag8_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ex_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  xmlcontent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&from_id_, 0, reinterpret_cast<char*>(&msgkey_) -
    reinterpret_cast<char*>(&from_id_) + sizeof(msgkey_));
}

Msg::~Msg() {
  // @@protoc_insertion_point(destructor:Msg)
  SharedDtor();
}

void Msg::SharedDtor() {
  tag8_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ex_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  xmlcontent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete from_id_;
  }
  if (this != internal_default_instance()) {
    delete to_id_;
  }
  if (this != internal_default_instance()) {
    delete raw_;
  }
}

void Msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Msg& Msg::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

Msg* Msg::New(::google::protobuf::Arena* arena) const {
  Msg* n = new Msg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Msg::Clear() {
// @@protoc_insertion_point(message_clear_start:Msg)
  if (_has_bits_[0 / 32] & 63u) {
    if (has_tag8()) {
      GOOGLE_DCHECK(!tag8_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tag8_.UnsafeRawStringPointer())->clear();
    }
    if (has_ex_info()) {
      GOOGLE_DCHECK(!ex_info_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ex_info_.UnsafeRawStringPointer())->clear();
    }
    if (has_xmlcontent()) {
      GOOGLE_DCHECK(!xmlcontent_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*xmlcontent_.UnsafeRawStringPointer())->clear();
    }
    if (has_from_id()) {
      GOOGLE_DCHECK(from_id_ != NULL);
      from_id_->::Wxid::Clear();
    }
    if (has_to_id()) {
      GOOGLE_DCHECK(to_id_ != NULL);
      to_id_->::Wxid::Clear();
    }
    if (has_raw()) {
      GOOGLE_DCHECK(raw_ != NULL);
      raw_->::Msg_RawContent::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 192u) {
    ::memset(&serverid_, 0, reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&serverid_) + sizeof(type_));
  }
  if (_has_bits_[8 / 32] & 7936u) {
    ::memset(&status_, 0, reinterpret_cast<char*>(&msgkey_) -
      reinterpret_cast<char*>(&status_) + sizeof(msgkey_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Msg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 serverid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_serverid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &serverid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Wxid from_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_from_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Wxid to_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_to_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Msg.RawContent raw = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_raw()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 status = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tag7 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_tag7();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag7_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes tag8 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tag8()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 createTime = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_createtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &createtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ex_info = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ex_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ex_info().data(), this->ex_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Msg.ex_info");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string xmlContent = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xmlcontent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->xmlcontent().data(), this->xmlcontent().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Msg.xmlContent");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 svrId = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_svrid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &svrid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 msgKey = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_msgkey();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msgkey_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Msg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Msg)
  return false;
#undef DO_
}

void Msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Msg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 serverid = 1;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->serverid(), output);
  }

  // optional .Wxid from_id = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->from_id_, output);
  }

  // optional .Wxid to_id = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->to_id_, output);
  }

  // optional int32 type = 4;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }

  // optional .Msg.RawContent raw = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->raw_, output);
  }

  // optional int32 status = 6;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->status(), output);
  }

  // optional int32 tag7 = 7;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->tag7(), output);
  }

  // optional bytes tag8 = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->tag8(), output);
  }

  // optional int32 createTime = 9;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->createtime(), output);
  }

  // optional string ex_info = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ex_info().data(), this->ex_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Msg.ex_info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->ex_info(), output);
  }

  // optional string xmlContent = 11;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->xmlcontent().data(), this->xmlcontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Msg.xmlContent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->xmlcontent(), output);
  }

  // optional int64 svrId = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->svrid(), output);
  }

  // optional int32 msgKey = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->msgkey(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Msg)
}

::google::protobuf::uint8* Msg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Msg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 serverid = 1;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->serverid(), target);
  }

  // optional .Wxid from_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->from_id_, deterministic, target);
  }

  // optional .Wxid to_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->to_id_, deterministic, target);
  }

  // optional int32 type = 4;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }

  // optional .Msg.RawContent raw = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->raw_, deterministic, target);
  }

  // optional int32 status = 6;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->status(), target);
  }

  // optional int32 tag7 = 7;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->tag7(), target);
  }

  // optional bytes tag8 = 8;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->tag8(), target);
  }

  // optional int32 createTime = 9;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->createtime(), target);
  }

  // optional string ex_info = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ex_info().data(), this->ex_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Msg.ex_info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->ex_info(), target);
  }

  // optional string xmlContent = 11;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->xmlcontent().data(), this->xmlcontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Msg.xmlContent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->xmlcontent(), target);
  }

  // optional int64 svrId = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->svrid(), target);
  }

  // optional int32 msgKey = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->msgkey(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Msg)
  return target;
}

size_t Msg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Msg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes tag8 = 8;
    if (has_tag8()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tag8());
    }

    // optional string ex_info = 10;
    if (has_ex_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ex_info());
    }

    // optional string xmlContent = 11;
    if (has_xmlcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->xmlcontent());
    }

    // optional .Wxid from_id = 2;
    if (has_from_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->from_id_);
    }

    // optional .Wxid to_id = 3;
    if (has_to_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->to_id_);
    }

    // optional .Msg.RawContent raw = 5;
    if (has_raw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->raw_);
    }

    // optional int64 serverid = 1;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->serverid());
    }

    // optional int32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional int32 status = 6;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional int32 tag7 = 7;
    if (has_tag7()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag7());
    }

    // optional int32 createTime = 9;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->createtime());
    }

    // optional int64 svrId = 12;
    if (has_svrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->svrid());
    }

    // optional int32 msgKey = 13;
    if (has_msgkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msgkey());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Msg)
  GOOGLE_DCHECK_NE(&from, this);
  const Msg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Msg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Msg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Msg)
    MergeFrom(*source);
  }
}

void Msg::MergeFrom(const Msg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Msg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_tag8();
      tag8_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag8_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_ex_info();
      ex_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ex_info_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_xmlcontent();
      xmlcontent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.xmlcontent_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_from_id()->::Wxid::MergeFrom(from.from_id());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_to_id()->::Wxid::MergeFrom(from.to_id());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_raw()->::Msg_RawContent::MergeFrom(from.raw());
    }
    if (cached_has_bits & 0x00000040u) {
      serverid_ = from.serverid_;
    }
    if (cached_has_bits & 0x00000080u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000200u) {
      tag7_ = from.tag7_;
    }
    if (cached_has_bits & 0x00000400u) {
      createtime_ = from.createtime_;
    }
    if (cached_has_bits & 0x00000800u) {
      svrid_ = from.svrid_;
    }
    if (cached_has_bits & 0x00001000u) {
      msgkey_ = from.msgkey_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Msg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg::CopyFrom(const Msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg::IsInitialized() const {
  return true;
}

void Msg::Swap(Msg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Msg::InternalSwap(Msg* other) {
  tag8_.Swap(&other->tag8_);
  ex_info_.Swap(&other->ex_info_);
  xmlcontent_.Swap(&other->xmlcontent_);
  std::swap(from_id_, other->from_id_);
  std::swap(to_id_, other->to_id_);
  std::swap(raw_, other->raw_);
  std::swap(serverid_, other->serverid_);
  std::swap(type_, other->type_);
  std::swap(status_, other->status_);
  std::swap(tag7_, other->tag7_);
  std::swap(createtime_, other->createtime_);
  std::swap(svrid_, other->svrid_);
  std::swap(msgkey_, other->msgkey_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Msg::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Msg

// optional int64 serverid = 1;
bool Msg::has_serverid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Msg::set_has_serverid() {
  _has_bits_[0] |= 0x00000040u;
}
void Msg::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000040u;
}
void Msg::clear_serverid() {
  serverid_ = GOOGLE_LONGLONG(0);
  clear_has_serverid();
}
::google::protobuf::int64 Msg::serverid() const {
  // @@protoc_insertion_point(field_get:Msg.serverid)
  return serverid_;
}
void Msg::set_serverid(::google::protobuf::int64 value) {
  set_has_serverid();
  serverid_ = value;
  // @@protoc_insertion_point(field_set:Msg.serverid)
}

// optional .Wxid from_id = 2;
bool Msg::has_from_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Msg::set_has_from_id() {
  _has_bits_[0] |= 0x00000008u;
}
void Msg::clear_has_from_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void Msg::clear_from_id() {
  if (from_id_ != NULL) from_id_->::Wxid::Clear();
  clear_has_from_id();
}
const ::Wxid& Msg::from_id() const {
  // @@protoc_insertion_point(field_get:Msg.from_id)
  return from_id_ != NULL ? *from_id_
                         : *::Wxid::internal_default_instance();
}
::Wxid* Msg::mutable_from_id() {
  set_has_from_id();
  if (from_id_ == NULL) {
    from_id_ = new ::Wxid;
  }
  // @@protoc_insertion_point(field_mutable:Msg.from_id)
  return from_id_;
}
::Wxid* Msg::release_from_id() {
  // @@protoc_insertion_point(field_release:Msg.from_id)
  clear_has_from_id();
  ::Wxid* temp = from_id_;
  from_id_ = NULL;
  return temp;
}
void Msg::set_allocated_from_id(::Wxid* from_id) {
  delete from_id_;
  from_id_ = from_id;
  if (from_id) {
    set_has_from_id();
  } else {
    clear_has_from_id();
  }
  // @@protoc_insertion_point(field_set_allocated:Msg.from_id)
}

// optional .Wxid to_id = 3;
bool Msg::has_to_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Msg::set_has_to_id() {
  _has_bits_[0] |= 0x00000010u;
}
void Msg::clear_has_to_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void Msg::clear_to_id() {
  if (to_id_ != NULL) to_id_->::Wxid::Clear();
  clear_has_to_id();
}
const ::Wxid& Msg::to_id() const {
  // @@protoc_insertion_point(field_get:Msg.to_id)
  return to_id_ != NULL ? *to_id_
                         : *::Wxid::internal_default_instance();
}
::Wxid* Msg::mutable_to_id() {
  set_has_to_id();
  if (to_id_ == NULL) {
    to_id_ = new ::Wxid;
  }
  // @@protoc_insertion_point(field_mutable:Msg.to_id)
  return to_id_;
}
::Wxid* Msg::release_to_id() {
  // @@protoc_insertion_point(field_release:Msg.to_id)
  clear_has_to_id();
  ::Wxid* temp = to_id_;
  to_id_ = NULL;
  return temp;
}
void Msg::set_allocated_to_id(::Wxid* to_id) {
  delete to_id_;
  to_id_ = to_id;
  if (to_id) {
    set_has_to_id();
  } else {
    clear_has_to_id();
  }
  // @@protoc_insertion_point(field_set_allocated:Msg.to_id)
}

// optional int32 type = 4;
bool Msg::has_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Msg::set_has_type() {
  _has_bits_[0] |= 0x00000080u;
}
void Msg::clear_has_type() {
  _has_bits_[0] &= ~0x00000080u;
}
void Msg::clear_type() {
  type_ = 0;
  clear_has_type();
}
::google::protobuf::int32 Msg::type() const {
  // @@protoc_insertion_point(field_get:Msg.type)
  return type_;
}
void Msg::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Msg.type)
}

// optional .Msg.RawContent raw = 5;
bool Msg::has_raw() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Msg::set_has_raw() {
  _has_bits_[0] |= 0x00000020u;
}
void Msg::clear_has_raw() {
  _has_bits_[0] &= ~0x00000020u;
}
void Msg::clear_raw() {
  if (raw_ != NULL) raw_->::Msg_RawContent::Clear();
  clear_has_raw();
}
const ::Msg_RawContent& Msg::raw() const {
  // @@protoc_insertion_point(field_get:Msg.raw)
  return raw_ != NULL ? *raw_
                         : *::Msg_RawContent::internal_default_instance();
}
::Msg_RawContent* Msg::mutable_raw() {
  set_has_raw();
  if (raw_ == NULL) {
    raw_ = new ::Msg_RawContent;
  }
  // @@protoc_insertion_point(field_mutable:Msg.raw)
  return raw_;
}
::Msg_RawContent* Msg::release_raw() {
  // @@protoc_insertion_point(field_release:Msg.raw)
  clear_has_raw();
  ::Msg_RawContent* temp = raw_;
  raw_ = NULL;
  return temp;
}
void Msg::set_allocated_raw(::Msg_RawContent* raw) {
  delete raw_;
  raw_ = raw;
  if (raw) {
    set_has_raw();
  } else {
    clear_has_raw();
  }
  // @@protoc_insertion_point(field_set_allocated:Msg.raw)
}

// optional int32 status = 6;
bool Msg::has_status() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Msg::set_has_status() {
  _has_bits_[0] |= 0x00000100u;
}
void Msg::clear_has_status() {
  _has_bits_[0] &= ~0x00000100u;
}
void Msg::clear_status() {
  status_ = 0;
  clear_has_status();
}
::google::protobuf::int32 Msg::status() const {
  // @@protoc_insertion_point(field_get:Msg.status)
  return status_;
}
void Msg::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:Msg.status)
}

// optional int32 tag7 = 7;
bool Msg::has_tag7() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Msg::set_has_tag7() {
  _has_bits_[0] |= 0x00000200u;
}
void Msg::clear_has_tag7() {
  _has_bits_[0] &= ~0x00000200u;
}
void Msg::clear_tag7() {
  tag7_ = 0;
  clear_has_tag7();
}
::google::protobuf::int32 Msg::tag7() const {
  // @@protoc_insertion_point(field_get:Msg.tag7)
  return tag7_;
}
void Msg::set_tag7(::google::protobuf::int32 value) {
  set_has_tag7();
  tag7_ = value;
  // @@protoc_insertion_point(field_set:Msg.tag7)
}

// optional bytes tag8 = 8;
bool Msg::has_tag8() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Msg::set_has_tag8() {
  _has_bits_[0] |= 0x00000001u;
}
void Msg::clear_has_tag8() {
  _has_bits_[0] &= ~0x00000001u;
}
void Msg::clear_tag8() {
  tag8_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tag8();
}
const ::std::string& Msg::tag8() const {
  // @@protoc_insertion_point(field_get:Msg.tag8)
  return tag8_.GetNoArena();
}
void Msg::set_tag8(const ::std::string& value) {
  set_has_tag8();
  tag8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Msg.tag8)
}
#if LANG_CXX11
void Msg::set_tag8(::std::string&& value) {
  set_has_tag8();
  tag8_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Msg.tag8)
}
#endif
void Msg::set_tag8(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tag8();
  tag8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Msg.tag8)
}
void Msg::set_tag8(const void* value, size_t size) {
  set_has_tag8();
  tag8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Msg.tag8)
}
::std::string* Msg::mutable_tag8() {
  set_has_tag8();
  // @@protoc_insertion_point(field_mutable:Msg.tag8)
  return tag8_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Msg::release_tag8() {
  // @@protoc_insertion_point(field_release:Msg.tag8)
  clear_has_tag8();
  return tag8_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Msg::set_allocated_tag8(::std::string* tag8) {
  if (tag8 != NULL) {
    set_has_tag8();
  } else {
    clear_has_tag8();
  }
  tag8_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag8);
  // @@protoc_insertion_point(field_set_allocated:Msg.tag8)
}

// optional int32 createTime = 9;
bool Msg::has_createtime() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Msg::set_has_createtime() {
  _has_bits_[0] |= 0x00000400u;
}
void Msg::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000400u;
}
void Msg::clear_createtime() {
  createtime_ = 0;
  clear_has_createtime();
}
::google::protobuf::int32 Msg::createtime() const {
  // @@protoc_insertion_point(field_get:Msg.createTime)
  return createtime_;
}
void Msg::set_createtime(::google::protobuf::int32 value) {
  set_has_createtime();
  createtime_ = value;
  // @@protoc_insertion_point(field_set:Msg.createTime)
}

// optional string ex_info = 10;
bool Msg::has_ex_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Msg::set_has_ex_info() {
  _has_bits_[0] |= 0x00000002u;
}
void Msg::clear_has_ex_info() {
  _has_bits_[0] &= ~0x00000002u;
}
void Msg::clear_ex_info() {
  ex_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ex_info();
}
const ::std::string& Msg::ex_info() const {
  // @@protoc_insertion_point(field_get:Msg.ex_info)
  return ex_info_.GetNoArena();
}
void Msg::set_ex_info(const ::std::string& value) {
  set_has_ex_info();
  ex_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Msg.ex_info)
}
#if LANG_CXX11
void Msg::set_ex_info(::std::string&& value) {
  set_has_ex_info();
  ex_info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Msg.ex_info)
}
#endif
void Msg::set_ex_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ex_info();
  ex_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Msg.ex_info)
}
void Msg::set_ex_info(const char* value, size_t size) {
  set_has_ex_info();
  ex_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Msg.ex_info)
}
::std::string* Msg::mutable_ex_info() {
  set_has_ex_info();
  // @@protoc_insertion_point(field_mutable:Msg.ex_info)
  return ex_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Msg::release_ex_info() {
  // @@protoc_insertion_point(field_release:Msg.ex_info)
  clear_has_ex_info();
  return ex_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Msg::set_allocated_ex_info(::std::string* ex_info) {
  if (ex_info != NULL) {
    set_has_ex_info();
  } else {
    clear_has_ex_info();
  }
  ex_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ex_info);
  // @@protoc_insertion_point(field_set_allocated:Msg.ex_info)
}

// optional string xmlContent = 11;
bool Msg::has_xmlcontent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Msg::set_has_xmlcontent() {
  _has_bits_[0] |= 0x00000004u;
}
void Msg::clear_has_xmlcontent() {
  _has_bits_[0] &= ~0x00000004u;
}
void Msg::clear_xmlcontent() {
  xmlcontent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_xmlcontent();
}
const ::std::string& Msg::xmlcontent() const {
  // @@protoc_insertion_point(field_get:Msg.xmlContent)
  return xmlcontent_.GetNoArena();
}
void Msg::set_xmlcontent(const ::std::string& value) {
  set_has_xmlcontent();
  xmlcontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Msg.xmlContent)
}
#if LANG_CXX11
void Msg::set_xmlcontent(::std::string&& value) {
  set_has_xmlcontent();
  xmlcontent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Msg.xmlContent)
}
#endif
void Msg::set_xmlcontent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_xmlcontent();
  xmlcontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Msg.xmlContent)
}
void Msg::set_xmlcontent(const char* value, size_t size) {
  set_has_xmlcontent();
  xmlcontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Msg.xmlContent)
}
::std::string* Msg::mutable_xmlcontent() {
  set_has_xmlcontent();
  // @@protoc_insertion_point(field_mutable:Msg.xmlContent)
  return xmlcontent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Msg::release_xmlcontent() {
  // @@protoc_insertion_point(field_release:Msg.xmlContent)
  clear_has_xmlcontent();
  return xmlcontent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Msg::set_allocated_xmlcontent(::std::string* xmlcontent) {
  if (xmlcontent != NULL) {
    set_has_xmlcontent();
  } else {
    clear_has_xmlcontent();
  }
  xmlcontent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), xmlcontent);
  // @@protoc_insertion_point(field_set_allocated:Msg.xmlContent)
}

// optional int64 svrId = 12;
bool Msg::has_svrid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Msg::set_has_svrid() {
  _has_bits_[0] |= 0x00000800u;
}
void Msg::clear_has_svrid() {
  _has_bits_[0] &= ~0x00000800u;
}
void Msg::clear_svrid() {
  svrid_ = GOOGLE_LONGLONG(0);
  clear_has_svrid();
}
::google::protobuf::int64 Msg::svrid() const {
  // @@protoc_insertion_point(field_get:Msg.svrId)
  return svrid_;
}
void Msg::set_svrid(::google::protobuf::int64 value) {
  set_has_svrid();
  svrid_ = value;
  // @@protoc_insertion_point(field_set:Msg.svrId)
}

// optional int32 msgKey = 13;
bool Msg::has_msgkey() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Msg::set_has_msgkey() {
  _has_bits_[0] |= 0x00001000u;
}
void Msg::clear_has_msgkey() {
  _has_bits_[0] &= ~0x00001000u;
}
void Msg::clear_msgkey() {
  msgkey_ = 0;
  clear_has_msgkey();
}
::google::protobuf::int32 Msg::msgkey() const {
  // @@protoc_insertion_point(field_get:Msg.msgKey)
  return msgkey_;
}
void Msg::set_msgkey(::google::protobuf::int32 value) {
  set_has_msgkey();
  msgkey_ = value;
  // @@protoc_insertion_point(field_set:Msg.msgKey)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int contact_info_NickName::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

contact_info_NickName::contact_info_NickName()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:contact_info.NickName)
}
contact_info_NickName::contact_info_NickName(const contact_info_NickName& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:contact_info.NickName)
}

void contact_info_NickName::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

contact_info_NickName::~contact_info_NickName() {
  // @@protoc_insertion_point(destructor:contact_info.NickName)
  SharedDtor();
}

void contact_info_NickName::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void contact_info_NickName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* contact_info_NickName::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const contact_info_NickName& contact_info_NickName::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

contact_info_NickName* contact_info_NickName::New(::google::protobuf::Arena* arena) const {
  contact_info_NickName* n = new contact_info_NickName;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void contact_info_NickName::Clear() {
// @@protoc_insertion_point(message_clear_start:contact_info.NickName)
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool contact_info_NickName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:contact_info.NickName)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "contact_info.NickName.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:contact_info.NickName)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:contact_info.NickName)
  return false;
#undef DO_
}

void contact_info_NickName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:contact_info.NickName)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contact_info.NickName.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:contact_info.NickName)
}

::google::protobuf::uint8* contact_info_NickName::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:contact_info.NickName)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contact_info.NickName.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:contact_info.NickName)
  return target;
}

size_t contact_info_NickName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:contact_info.NickName)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void contact_info_NickName::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:contact_info.NickName)
  GOOGLE_DCHECK_NE(&from, this);
  const contact_info_NickName* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const contact_info_NickName>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:contact_info.NickName)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:contact_info.NickName)
    MergeFrom(*source);
  }
}

void contact_info_NickName::MergeFrom(const contact_info_NickName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:contact_info.NickName)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_name()) {
    set_has_name();
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void contact_info_NickName::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:contact_info.NickName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void contact_info_NickName::CopyFrom(const contact_info_NickName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:contact_info.NickName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool contact_info_NickName::IsInitialized() const {
  return true;
}

void contact_info_NickName::Swap(contact_info_NickName* other) {
  if (other == this) return;
  InternalSwap(other);
}
void contact_info_NickName::InternalSwap(contact_info_NickName* other) {
  name_.Swap(&other->name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata contact_info_NickName::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// contact_info_NickName

// optional string name = 1;
bool contact_info_NickName::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void contact_info_NickName::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void contact_info_NickName::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void contact_info_NickName::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& contact_info_NickName::name() const {
  // @@protoc_insertion_point(field_get:contact_info.NickName.name)
  return name_.GetNoArena();
}
void contact_info_NickName::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:contact_info.NickName.name)
}
#if LANG_CXX11
void contact_info_NickName::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contact_info.NickName.name)
}
#endif
void contact_info_NickName::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contact_info.NickName.name)
}
void contact_info_NickName::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contact_info.NickName.name)
}
::std::string* contact_info_NickName::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:contact_info.NickName.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* contact_info_NickName::release_name() {
  // @@protoc_insertion_point(field_release:contact_info.NickName.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void contact_info_NickName::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:contact_info.NickName.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int contact_info_PY_SHORT::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

contact_info_PY_SHORT::contact_info_PY_SHORT()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:contact_info.PY_SHORT)
}
contact_info_PY_SHORT::contact_info_PY_SHORT(const contact_info_PY_SHORT& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:contact_info.PY_SHORT)
}

void contact_info_PY_SHORT::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

contact_info_PY_SHORT::~contact_info_PY_SHORT() {
  // @@protoc_insertion_point(destructor:contact_info.PY_SHORT)
  SharedDtor();
}

void contact_info_PY_SHORT::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void contact_info_PY_SHORT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* contact_info_PY_SHORT::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const contact_info_PY_SHORT& contact_info_PY_SHORT::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

contact_info_PY_SHORT* contact_info_PY_SHORT::New(::google::protobuf::Arena* arena) const {
  contact_info_PY_SHORT* n = new contact_info_PY_SHORT;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void contact_info_PY_SHORT::Clear() {
// @@protoc_insertion_point(message_clear_start:contact_info.PY_SHORT)
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool contact_info_PY_SHORT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:contact_info.PY_SHORT)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "contact_info.PY_SHORT.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:contact_info.PY_SHORT)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:contact_info.PY_SHORT)
  return false;
#undef DO_
}

void contact_info_PY_SHORT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:contact_info.PY_SHORT)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contact_info.PY_SHORT.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:contact_info.PY_SHORT)
}

::google::protobuf::uint8* contact_info_PY_SHORT::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:contact_info.PY_SHORT)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contact_info.PY_SHORT.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:contact_info.PY_SHORT)
  return target;
}

size_t contact_info_PY_SHORT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:contact_info.PY_SHORT)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void contact_info_PY_SHORT::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:contact_info.PY_SHORT)
  GOOGLE_DCHECK_NE(&from, this);
  const contact_info_PY_SHORT* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const contact_info_PY_SHORT>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:contact_info.PY_SHORT)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:contact_info.PY_SHORT)
    MergeFrom(*source);
  }
}

void contact_info_PY_SHORT::MergeFrom(const contact_info_PY_SHORT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:contact_info.PY_SHORT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_name()) {
    set_has_name();
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void contact_info_PY_SHORT::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:contact_info.PY_SHORT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void contact_info_PY_SHORT::CopyFrom(const contact_info_PY_SHORT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:contact_info.PY_SHORT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool contact_info_PY_SHORT::IsInitialized() const {
  return true;
}

void contact_info_PY_SHORT::Swap(contact_info_PY_SHORT* other) {
  if (other == this) return;
  InternalSwap(other);
}
void contact_info_PY_SHORT::InternalSwap(contact_info_PY_SHORT* other) {
  name_.Swap(&other->name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata contact_info_PY_SHORT::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// contact_info_PY_SHORT

// optional string name = 1;
bool contact_info_PY_SHORT::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void contact_info_PY_SHORT::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void contact_info_PY_SHORT::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void contact_info_PY_SHORT::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& contact_info_PY_SHORT::name() const {
  // @@protoc_insertion_point(field_get:contact_info.PY_SHORT.name)
  return name_.GetNoArena();
}
void contact_info_PY_SHORT::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:contact_info.PY_SHORT.name)
}
#if LANG_CXX11
void contact_info_PY_SHORT::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contact_info.PY_SHORT.name)
}
#endif
void contact_info_PY_SHORT::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contact_info.PY_SHORT.name)
}
void contact_info_PY_SHORT::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contact_info.PY_SHORT.name)
}
::std::string* contact_info_PY_SHORT::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:contact_info.PY_SHORT.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* contact_info_PY_SHORT::release_name() {
  // @@protoc_insertion_point(field_release:contact_info.PY_SHORT.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void contact_info_PY_SHORT::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:contact_info.PY_SHORT.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int contact_info_QuanPin::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

contact_info_QuanPin::contact_info_QuanPin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:contact_info.QuanPin)
}
contact_info_QuanPin::contact_info_QuanPin(const contact_info_QuanPin& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:contact_info.QuanPin)
}

void contact_info_QuanPin::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

contact_info_QuanPin::~contact_info_QuanPin() {
  // @@protoc_insertion_point(destructor:contact_info.QuanPin)
  SharedDtor();
}

void contact_info_QuanPin::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void contact_info_QuanPin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* contact_info_QuanPin::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const contact_info_QuanPin& contact_info_QuanPin::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

contact_info_QuanPin* contact_info_QuanPin::New(::google::protobuf::Arena* arena) const {
  contact_info_QuanPin* n = new contact_info_QuanPin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void contact_info_QuanPin::Clear() {
// @@protoc_insertion_point(message_clear_start:contact_info.QuanPin)
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool contact_info_QuanPin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:contact_info.QuanPin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "contact_info.QuanPin.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:contact_info.QuanPin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:contact_info.QuanPin)
  return false;
#undef DO_
}

void contact_info_QuanPin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:contact_info.QuanPin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contact_info.QuanPin.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:contact_info.QuanPin)
}

::google::protobuf::uint8* contact_info_QuanPin::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:contact_info.QuanPin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contact_info.QuanPin.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:contact_info.QuanPin)
  return target;
}

size_t contact_info_QuanPin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:contact_info.QuanPin)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void contact_info_QuanPin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:contact_info.QuanPin)
  GOOGLE_DCHECK_NE(&from, this);
  const contact_info_QuanPin* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const contact_info_QuanPin>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:contact_info.QuanPin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:contact_info.QuanPin)
    MergeFrom(*source);
  }
}

void contact_info_QuanPin::MergeFrom(const contact_info_QuanPin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:contact_info.QuanPin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_name()) {
    set_has_name();
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void contact_info_QuanPin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:contact_info.QuanPin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void contact_info_QuanPin::CopyFrom(const contact_info_QuanPin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:contact_info.QuanPin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool contact_info_QuanPin::IsInitialized() const {
  return true;
}

void contact_info_QuanPin::Swap(contact_info_QuanPin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void contact_info_QuanPin::InternalSwap(contact_info_QuanPin* other) {
  name_.Swap(&other->name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata contact_info_QuanPin::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// contact_info_QuanPin

// optional string name = 1;
bool contact_info_QuanPin::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void contact_info_QuanPin::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void contact_info_QuanPin::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void contact_info_QuanPin::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& contact_info_QuanPin::name() const {
  // @@protoc_insertion_point(field_get:contact_info.QuanPin.name)
  return name_.GetNoArena();
}
void contact_info_QuanPin::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:contact_info.QuanPin.name)
}
#if LANG_CXX11
void contact_info_QuanPin::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contact_info.QuanPin.name)
}
#endif
void contact_info_QuanPin::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contact_info.QuanPin.name)
}
void contact_info_QuanPin::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contact_info.QuanPin.name)
}
::std::string* contact_info_QuanPin::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:contact_info.QuanPin.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* contact_info_QuanPin::release_name() {
  // @@protoc_insertion_point(field_release:contact_info.QuanPin.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void contact_info_QuanPin::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:contact_info.QuanPin.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int contact_info_BeiZhu::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

contact_info_BeiZhu::contact_info_BeiZhu()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:contact_info.BeiZhu)
}
contact_info_BeiZhu::contact_info_BeiZhu(const contact_info_BeiZhu& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:contact_info.BeiZhu)
}

void contact_info_BeiZhu::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

contact_info_BeiZhu::~contact_info_BeiZhu() {
  // @@protoc_insertion_point(destructor:contact_info.BeiZhu)
  SharedDtor();
}

void contact_info_BeiZhu::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void contact_info_BeiZhu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* contact_info_BeiZhu::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const contact_info_BeiZhu& contact_info_BeiZhu::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

contact_info_BeiZhu* contact_info_BeiZhu::New(::google::protobuf::Arena* arena) const {
  contact_info_BeiZhu* n = new contact_info_BeiZhu;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void contact_info_BeiZhu::Clear() {
// @@protoc_insertion_point(message_clear_start:contact_info.BeiZhu)
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool contact_info_BeiZhu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:contact_info.BeiZhu)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "contact_info.BeiZhu.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:contact_info.BeiZhu)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:contact_info.BeiZhu)
  return false;
#undef DO_
}

void contact_info_BeiZhu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:contact_info.BeiZhu)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contact_info.BeiZhu.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:contact_info.BeiZhu)
}

::google::protobuf::uint8* contact_info_BeiZhu::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:contact_info.BeiZhu)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contact_info.BeiZhu.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:contact_info.BeiZhu)
  return target;
}

size_t contact_info_BeiZhu::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:contact_info.BeiZhu)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void contact_info_BeiZhu::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:contact_info.BeiZhu)
  GOOGLE_DCHECK_NE(&from, this);
  const contact_info_BeiZhu* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const contact_info_BeiZhu>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:contact_info.BeiZhu)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:contact_info.BeiZhu)
    MergeFrom(*source);
  }
}

void contact_info_BeiZhu::MergeFrom(const contact_info_BeiZhu& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:contact_info.BeiZhu)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_name()) {
    set_has_name();
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void contact_info_BeiZhu::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:contact_info.BeiZhu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void contact_info_BeiZhu::CopyFrom(const contact_info_BeiZhu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:contact_info.BeiZhu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool contact_info_BeiZhu::IsInitialized() const {
  return true;
}

void contact_info_BeiZhu::Swap(contact_info_BeiZhu* other) {
  if (other == this) return;
  InternalSwap(other);
}
void contact_info_BeiZhu::InternalSwap(contact_info_BeiZhu* other) {
  name_.Swap(&other->name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata contact_info_BeiZhu::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// contact_info_BeiZhu

// optional string name = 1;
bool contact_info_BeiZhu::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void contact_info_BeiZhu::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void contact_info_BeiZhu::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void contact_info_BeiZhu::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& contact_info_BeiZhu::name() const {
  // @@protoc_insertion_point(field_get:contact_info.BeiZhu.name)
  return name_.GetNoArena();
}
void contact_info_BeiZhu::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:contact_info.BeiZhu.name)
}
#if LANG_CXX11
void contact_info_BeiZhu::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contact_info.BeiZhu.name)
}
#endif
void contact_info_BeiZhu::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contact_info.BeiZhu.name)
}
void contact_info_BeiZhu::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contact_info.BeiZhu.name)
}
::std::string* contact_info_BeiZhu::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:contact_info.BeiZhu.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* contact_info_BeiZhu::release_name() {
  // @@protoc_insertion_point(field_release:contact_info.BeiZhu.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void contact_info_BeiZhu::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:contact_info.BeiZhu.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int contact_info_REAL_PY_SHORT::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

contact_info_REAL_PY_SHORT::contact_info_REAL_PY_SHORT()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:contact_info.REAL_PY_SHORT)
}
contact_info_REAL_PY_SHORT::contact_info_REAL_PY_SHORT(const contact_info_REAL_PY_SHORT& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:contact_info.REAL_PY_SHORT)
}

void contact_info_REAL_PY_SHORT::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

contact_info_REAL_PY_SHORT::~contact_info_REAL_PY_SHORT() {
  // @@protoc_insertion_point(destructor:contact_info.REAL_PY_SHORT)
  SharedDtor();
}

void contact_info_REAL_PY_SHORT::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void contact_info_REAL_PY_SHORT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* contact_info_REAL_PY_SHORT::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const contact_info_REAL_PY_SHORT& contact_info_REAL_PY_SHORT::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

contact_info_REAL_PY_SHORT* contact_info_REAL_PY_SHORT::New(::google::protobuf::Arena* arena) const {
  contact_info_REAL_PY_SHORT* n = new contact_info_REAL_PY_SHORT;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void contact_info_REAL_PY_SHORT::Clear() {
// @@protoc_insertion_point(message_clear_start:contact_info.REAL_PY_SHORT)
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool contact_info_REAL_PY_SHORT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:contact_info.REAL_PY_SHORT)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "contact_info.REAL_PY_SHORT.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:contact_info.REAL_PY_SHORT)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:contact_info.REAL_PY_SHORT)
  return false;
#undef DO_
}

void contact_info_REAL_PY_SHORT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:contact_info.REAL_PY_SHORT)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contact_info.REAL_PY_SHORT.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:contact_info.REAL_PY_SHORT)
}

::google::protobuf::uint8* contact_info_REAL_PY_SHORT::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:contact_info.REAL_PY_SHORT)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contact_info.REAL_PY_SHORT.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:contact_info.REAL_PY_SHORT)
  return target;
}

size_t contact_info_REAL_PY_SHORT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:contact_info.REAL_PY_SHORT)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void contact_info_REAL_PY_SHORT::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:contact_info.REAL_PY_SHORT)
  GOOGLE_DCHECK_NE(&from, this);
  const contact_info_REAL_PY_SHORT* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const contact_info_REAL_PY_SHORT>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:contact_info.REAL_PY_SHORT)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:contact_info.REAL_PY_SHORT)
    MergeFrom(*source);
  }
}

void contact_info_REAL_PY_SHORT::MergeFrom(const contact_info_REAL_PY_SHORT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:contact_info.REAL_PY_SHORT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_name()) {
    set_has_name();
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void contact_info_REAL_PY_SHORT::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:contact_info.REAL_PY_SHORT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void contact_info_REAL_PY_SHORT::CopyFrom(const contact_info_REAL_PY_SHORT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:contact_info.REAL_PY_SHORT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool contact_info_REAL_PY_SHORT::IsInitialized() const {
  return true;
}

void contact_info_REAL_PY_SHORT::Swap(contact_info_REAL_PY_SHORT* other) {
  if (other == this) return;
  InternalSwap(other);
}
void contact_info_REAL_PY_SHORT::InternalSwap(contact_info_REAL_PY_SHORT* other) {
  name_.Swap(&other->name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata contact_info_REAL_PY_SHORT::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// contact_info_REAL_PY_SHORT

// optional string name = 1;
bool contact_info_REAL_PY_SHORT::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void contact_info_REAL_PY_SHORT::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void contact_info_REAL_PY_SHORT::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void contact_info_REAL_PY_SHORT::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& contact_info_REAL_PY_SHORT::name() const {
  // @@protoc_insertion_point(field_get:contact_info.REAL_PY_SHORT.name)
  return name_.GetNoArena();
}
void contact_info_REAL_PY_SHORT::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:contact_info.REAL_PY_SHORT.name)
}
#if LANG_CXX11
void contact_info_REAL_PY_SHORT::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contact_info.REAL_PY_SHORT.name)
}
#endif
void contact_info_REAL_PY_SHORT::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contact_info.REAL_PY_SHORT.name)
}
void contact_info_REAL_PY_SHORT::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contact_info.REAL_PY_SHORT.name)
}
::std::string* contact_info_REAL_PY_SHORT::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:contact_info.REAL_PY_SHORT.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* contact_info_REAL_PY_SHORT::release_name() {
  // @@protoc_insertion_point(field_release:contact_info.REAL_PY_SHORT.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void contact_info_REAL_PY_SHORT::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:contact_info.REAL_PY_SHORT.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int contact_info_REAL_QuanPin::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

contact_info_REAL_QuanPin::contact_info_REAL_QuanPin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:contact_info.REAL_QuanPin)
}
contact_info_REAL_QuanPin::contact_info_REAL_QuanPin(const contact_info_REAL_QuanPin& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:contact_info.REAL_QuanPin)
}

void contact_info_REAL_QuanPin::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

contact_info_REAL_QuanPin::~contact_info_REAL_QuanPin() {
  // @@protoc_insertion_point(destructor:contact_info.REAL_QuanPin)
  SharedDtor();
}

void contact_info_REAL_QuanPin::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void contact_info_REAL_QuanPin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* contact_info_REAL_QuanPin::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const contact_info_REAL_QuanPin& contact_info_REAL_QuanPin::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

contact_info_REAL_QuanPin* contact_info_REAL_QuanPin::New(::google::protobuf::Arena* arena) const {
  contact_info_REAL_QuanPin* n = new contact_info_REAL_QuanPin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void contact_info_REAL_QuanPin::Clear() {
// @@protoc_insertion_point(message_clear_start:contact_info.REAL_QuanPin)
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool contact_info_REAL_QuanPin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:contact_info.REAL_QuanPin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "contact_info.REAL_QuanPin.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:contact_info.REAL_QuanPin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:contact_info.REAL_QuanPin)
  return false;
#undef DO_
}

void contact_info_REAL_QuanPin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:contact_info.REAL_QuanPin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contact_info.REAL_QuanPin.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:contact_info.REAL_QuanPin)
}

::google::protobuf::uint8* contact_info_REAL_QuanPin::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:contact_info.REAL_QuanPin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contact_info.REAL_QuanPin.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:contact_info.REAL_QuanPin)
  return target;
}

size_t contact_info_REAL_QuanPin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:contact_info.REAL_QuanPin)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void contact_info_REAL_QuanPin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:contact_info.REAL_QuanPin)
  GOOGLE_DCHECK_NE(&from, this);
  const contact_info_REAL_QuanPin* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const contact_info_REAL_QuanPin>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:contact_info.REAL_QuanPin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:contact_info.REAL_QuanPin)
    MergeFrom(*source);
  }
}

void contact_info_REAL_QuanPin::MergeFrom(const contact_info_REAL_QuanPin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:contact_info.REAL_QuanPin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_name()) {
    set_has_name();
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void contact_info_REAL_QuanPin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:contact_info.REAL_QuanPin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void contact_info_REAL_QuanPin::CopyFrom(const contact_info_REAL_QuanPin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:contact_info.REAL_QuanPin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool contact_info_REAL_QuanPin::IsInitialized() const {
  return true;
}

void contact_info_REAL_QuanPin::Swap(contact_info_REAL_QuanPin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void contact_info_REAL_QuanPin::InternalSwap(contact_info_REAL_QuanPin* other) {
  name_.Swap(&other->name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata contact_info_REAL_QuanPin::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// contact_info_REAL_QuanPin

// optional string name = 1;
bool contact_info_REAL_QuanPin::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void contact_info_REAL_QuanPin::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void contact_info_REAL_QuanPin::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void contact_info_REAL_QuanPin::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& contact_info_REAL_QuanPin::name() const {
  // @@protoc_insertion_point(field_get:contact_info.REAL_QuanPin.name)
  return name_.GetNoArena();
}
void contact_info_REAL_QuanPin::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:contact_info.REAL_QuanPin.name)
}
#if LANG_CXX11
void contact_info_REAL_QuanPin::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contact_info.REAL_QuanPin.name)
}
#endif
void contact_info_REAL_QuanPin::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contact_info.REAL_QuanPin.name)
}
void contact_info_REAL_QuanPin::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contact_info.REAL_QuanPin.name)
}
::std::string* contact_info_REAL_QuanPin::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:contact_info.REAL_QuanPin.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* contact_info_REAL_QuanPin::release_name() {
  // @@protoc_insertion_point(field_release:contact_info.REAL_QuanPin.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void contact_info_REAL_QuanPin::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:contact_info.REAL_QuanPin.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int contact_info_GroupMemberList_MemberInfo::kWxidFieldNumber;
const int contact_info_GroupMemberList_MemberInfo::kNickNameFieldNumber;
const int contact_info_GroupMemberList_MemberInfo::kTag6FieldNumber;
const int contact_info_GroupMemberList_MemberInfo::kInviteerWxidFieldNumber;
const int contact_info_GroupMemberList_MemberInfo::kTag8FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

contact_info_GroupMemberList_MemberInfo::contact_info_GroupMemberList_MemberInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:contact_info.GroupMemberList.MemberInfo)
}
contact_info_GroupMemberList_MemberInfo::contact_info_GroupMemberList_MemberInfo(const contact_info_GroupMemberList_MemberInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  wxid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_wxid()) {
    wxid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wxid_);
  }
  nick_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nick_name()) {
    nick_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nick_name_);
  }
  inviteer_wxid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_inviteer_wxid()) {
    inviteer_wxid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inviteer_wxid_);
  }
  ::memcpy(&tag6_, &from.tag6_,
    reinterpret_cast<char*>(&tag8_) -
    reinterpret_cast<char*>(&tag6_) + sizeof(tag8_));
  // @@protoc_insertion_point(copy_constructor:contact_info.GroupMemberList.MemberInfo)
}

void contact_info_GroupMemberList_MemberInfo::SharedCtor() {
  _cached_size_ = 0;
  wxid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nick_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inviteer_wxid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tag6_, 0, reinterpret_cast<char*>(&tag8_) -
    reinterpret_cast<char*>(&tag6_) + sizeof(tag8_));
}

contact_info_GroupMemberList_MemberInfo::~contact_info_GroupMemberList_MemberInfo() {
  // @@protoc_insertion_point(destructor:contact_info.GroupMemberList.MemberInfo)
  SharedDtor();
}

void contact_info_GroupMemberList_MemberInfo::SharedDtor() {
  wxid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nick_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inviteer_wxid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void contact_info_GroupMemberList_MemberInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* contact_info_GroupMemberList_MemberInfo::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const contact_info_GroupMemberList_MemberInfo& contact_info_GroupMemberList_MemberInfo::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

contact_info_GroupMemberList_MemberInfo* contact_info_GroupMemberList_MemberInfo::New(::google::protobuf::Arena* arena) const {
  contact_info_GroupMemberList_MemberInfo* n = new contact_info_GroupMemberList_MemberInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void contact_info_GroupMemberList_MemberInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:contact_info.GroupMemberList.MemberInfo)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_wxid()) {
      GOOGLE_DCHECK(!wxid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*wxid_.UnsafeRawStringPointer())->clear();
    }
    if (has_nick_name()) {
      GOOGLE_DCHECK(!nick_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*nick_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_inviteer_wxid()) {
      GOOGLE_DCHECK(!inviteer_wxid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*inviteer_wxid_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 24u) {
    ::memset(&tag6_, 0, reinterpret_cast<char*>(&tag8_) -
      reinterpret_cast<char*>(&tag6_) + sizeof(tag8_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool contact_info_GroupMemberList_MemberInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:contact_info.GroupMemberList.MemberInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string wxid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->wxid().data(), this->wxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "contact_info.GroupMemberList.MemberInfo.wxid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string nick_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nick_name().data(), this->nick_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "contact_info.GroupMemberList.MemberInfo.nick_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tag6 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_tag6();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag6_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string inviteer_wxid = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inviteer_wxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->inviteer_wxid().data(), this->inviteer_wxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "contact_info.GroupMemberList.MemberInfo.inviteer_wxid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tag8 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_tag8();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag8_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:contact_info.GroupMemberList.MemberInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:contact_info.GroupMemberList.MemberInfo)
  return false;
#undef DO_
}

void contact_info_GroupMemberList_MemberInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:contact_info.GroupMemberList.MemberInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string wxid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wxid().data(), this->wxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contact_info.GroupMemberList.MemberInfo.wxid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->wxid(), output);
  }

  // optional string nick_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contact_info.GroupMemberList.MemberInfo.nick_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nick_name(), output);
  }

  // optional int32 tag6 = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->tag6(), output);
  }

  // optional string inviteer_wxid = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inviteer_wxid().data(), this->inviteer_wxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contact_info.GroupMemberList.MemberInfo.inviteer_wxid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->inviteer_wxid(), output);
  }

  // optional int32 tag8 = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->tag8(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:contact_info.GroupMemberList.MemberInfo)
}

::google::protobuf::uint8* contact_info_GroupMemberList_MemberInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:contact_info.GroupMemberList.MemberInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string wxid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wxid().data(), this->wxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contact_info.GroupMemberList.MemberInfo.wxid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->wxid(), target);
  }

  // optional string nick_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contact_info.GroupMemberList.MemberInfo.nick_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nick_name(), target);
  }

  // optional int32 tag6 = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->tag6(), target);
  }

  // optional string inviteer_wxid = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inviteer_wxid().data(), this->inviteer_wxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contact_info.GroupMemberList.MemberInfo.inviteer_wxid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->inviteer_wxid(), target);
  }

  // optional int32 tag8 = 8;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->tag8(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:contact_info.GroupMemberList.MemberInfo)
  return target;
}

size_t contact_info_GroupMemberList_MemberInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:contact_info.GroupMemberList.MemberInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string wxid = 1;
    if (has_wxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wxid());
    }

    // optional string nick_name = 2;
    if (has_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick_name());
    }

    // optional string inviteer_wxid = 7;
    if (has_inviteer_wxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inviteer_wxid());
    }

    // optional int32 tag6 = 6;
    if (has_tag6()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag6());
    }

    // optional int32 tag8 = 8;
    if (has_tag8()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag8());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void contact_info_GroupMemberList_MemberInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:contact_info.GroupMemberList.MemberInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const contact_info_GroupMemberList_MemberInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const contact_info_GroupMemberList_MemberInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:contact_info.GroupMemberList.MemberInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:contact_info.GroupMemberList.MemberInfo)
    MergeFrom(*source);
  }
}

void contact_info_GroupMemberList_MemberInfo::MergeFrom(const contact_info_GroupMemberList_MemberInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:contact_info.GroupMemberList.MemberInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_wxid();
      wxid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wxid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_nick_name();
      nick_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nick_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_inviteer_wxid();
      inviteer_wxid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inviteer_wxid_);
    }
    if (cached_has_bits & 0x00000008u) {
      tag6_ = from.tag6_;
    }
    if (cached_has_bits & 0x00000010u) {
      tag8_ = from.tag8_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void contact_info_GroupMemberList_MemberInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:contact_info.GroupMemberList.MemberInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void contact_info_GroupMemberList_MemberInfo::CopyFrom(const contact_info_GroupMemberList_MemberInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:contact_info.GroupMemberList.MemberInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool contact_info_GroupMemberList_MemberInfo::IsInitialized() const {
  return true;
}

void contact_info_GroupMemberList_MemberInfo::Swap(contact_info_GroupMemberList_MemberInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void contact_info_GroupMemberList_MemberInfo::InternalSwap(contact_info_GroupMemberList_MemberInfo* other) {
  wxid_.Swap(&other->wxid_);
  nick_name_.Swap(&other->nick_name_);
  inviteer_wxid_.Swap(&other->inviteer_wxid_);
  std::swap(tag6_, other->tag6_);
  std::swap(tag8_, other->tag8_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata contact_info_GroupMemberList_MemberInfo::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// contact_info_GroupMemberList_MemberInfo

// optional string wxid = 1;
bool contact_info_GroupMemberList_MemberInfo::has_wxid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void contact_info_GroupMemberList_MemberInfo::set_has_wxid() {
  _has_bits_[0] |= 0x00000001u;
}
void contact_info_GroupMemberList_MemberInfo::clear_has_wxid() {
  _has_bits_[0] &= ~0x00000001u;
}
void contact_info_GroupMemberList_MemberInfo::clear_wxid() {
  wxid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_wxid();
}
const ::std::string& contact_info_GroupMemberList_MemberInfo::wxid() const {
  // @@protoc_insertion_point(field_get:contact_info.GroupMemberList.MemberInfo.wxid)
  return wxid_.GetNoArena();
}
void contact_info_GroupMemberList_MemberInfo::set_wxid(const ::std::string& value) {
  set_has_wxid();
  wxid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:contact_info.GroupMemberList.MemberInfo.wxid)
}
#if LANG_CXX11
void contact_info_GroupMemberList_MemberInfo::set_wxid(::std::string&& value) {
  set_has_wxid();
  wxid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contact_info.GroupMemberList.MemberInfo.wxid)
}
#endif
void contact_info_GroupMemberList_MemberInfo::set_wxid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_wxid();
  wxid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contact_info.GroupMemberList.MemberInfo.wxid)
}
void contact_info_GroupMemberList_MemberInfo::set_wxid(const char* value, size_t size) {
  set_has_wxid();
  wxid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contact_info.GroupMemberList.MemberInfo.wxid)
}
::std::string* contact_info_GroupMemberList_MemberInfo::mutable_wxid() {
  set_has_wxid();
  // @@protoc_insertion_point(field_mutable:contact_info.GroupMemberList.MemberInfo.wxid)
  return wxid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* contact_info_GroupMemberList_MemberInfo::release_wxid() {
  // @@protoc_insertion_point(field_release:contact_info.GroupMemberList.MemberInfo.wxid)
  clear_has_wxid();
  return wxid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void contact_info_GroupMemberList_MemberInfo::set_allocated_wxid(::std::string* wxid) {
  if (wxid != NULL) {
    set_has_wxid();
  } else {
    clear_has_wxid();
  }
  wxid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wxid);
  // @@protoc_insertion_point(field_set_allocated:contact_info.GroupMemberList.MemberInfo.wxid)
}

// optional string nick_name = 2;
bool contact_info_GroupMemberList_MemberInfo::has_nick_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void contact_info_GroupMemberList_MemberInfo::set_has_nick_name() {
  _has_bits_[0] |= 0x00000002u;
}
void contact_info_GroupMemberList_MemberInfo::clear_has_nick_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void contact_info_GroupMemberList_MemberInfo::clear_nick_name() {
  nick_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nick_name();
}
const ::std::string& contact_info_GroupMemberList_MemberInfo::nick_name() const {
  // @@protoc_insertion_point(field_get:contact_info.GroupMemberList.MemberInfo.nick_name)
  return nick_name_.GetNoArena();
}
void contact_info_GroupMemberList_MemberInfo::set_nick_name(const ::std::string& value) {
  set_has_nick_name();
  nick_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:contact_info.GroupMemberList.MemberInfo.nick_name)
}
#if LANG_CXX11
void contact_info_GroupMemberList_MemberInfo::set_nick_name(::std::string&& value) {
  set_has_nick_name();
  nick_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contact_info.GroupMemberList.MemberInfo.nick_name)
}
#endif
void contact_info_GroupMemberList_MemberInfo::set_nick_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nick_name();
  nick_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contact_info.GroupMemberList.MemberInfo.nick_name)
}
void contact_info_GroupMemberList_MemberInfo::set_nick_name(const char* value, size_t size) {
  set_has_nick_name();
  nick_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contact_info.GroupMemberList.MemberInfo.nick_name)
}
::std::string* contact_info_GroupMemberList_MemberInfo::mutable_nick_name() {
  set_has_nick_name();
  // @@protoc_insertion_point(field_mutable:contact_info.GroupMemberList.MemberInfo.nick_name)
  return nick_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* contact_info_GroupMemberList_MemberInfo::release_nick_name() {
  // @@protoc_insertion_point(field_release:contact_info.GroupMemberList.MemberInfo.nick_name)
  clear_has_nick_name();
  return nick_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void contact_info_GroupMemberList_MemberInfo::set_allocated_nick_name(::std::string* nick_name) {
  if (nick_name != NULL) {
    set_has_nick_name();
  } else {
    clear_has_nick_name();
  }
  nick_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick_name);
  // @@protoc_insertion_point(field_set_allocated:contact_info.GroupMemberList.MemberInfo.nick_name)
}

// optional int32 tag6 = 6;
bool contact_info_GroupMemberList_MemberInfo::has_tag6() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void contact_info_GroupMemberList_MemberInfo::set_has_tag6() {
  _has_bits_[0] |= 0x00000008u;
}
void contact_info_GroupMemberList_MemberInfo::clear_has_tag6() {
  _has_bits_[0] &= ~0x00000008u;
}
void contact_info_GroupMemberList_MemberInfo::clear_tag6() {
  tag6_ = 0;
  clear_has_tag6();
}
::google::protobuf::int32 contact_info_GroupMemberList_MemberInfo::tag6() const {
  // @@protoc_insertion_point(field_get:contact_info.GroupMemberList.MemberInfo.tag6)
  return tag6_;
}
void contact_info_GroupMemberList_MemberInfo::set_tag6(::google::protobuf::int32 value) {
  set_has_tag6();
  tag6_ = value;
  // @@protoc_insertion_point(field_set:contact_info.GroupMemberList.MemberInfo.tag6)
}

// optional string inviteer_wxid = 7;
bool contact_info_GroupMemberList_MemberInfo::has_inviteer_wxid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void contact_info_GroupMemberList_MemberInfo::set_has_inviteer_wxid() {
  _has_bits_[0] |= 0x00000004u;
}
void contact_info_GroupMemberList_MemberInfo::clear_has_inviteer_wxid() {
  _has_bits_[0] &= ~0x00000004u;
}
void contact_info_GroupMemberList_MemberInfo::clear_inviteer_wxid() {
  inviteer_wxid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_inviteer_wxid();
}
const ::std::string& contact_info_GroupMemberList_MemberInfo::inviteer_wxid() const {
  // @@protoc_insertion_point(field_get:contact_info.GroupMemberList.MemberInfo.inviteer_wxid)
  return inviteer_wxid_.GetNoArena();
}
void contact_info_GroupMemberList_MemberInfo::set_inviteer_wxid(const ::std::string& value) {
  set_has_inviteer_wxid();
  inviteer_wxid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:contact_info.GroupMemberList.MemberInfo.inviteer_wxid)
}
#if LANG_CXX11
void contact_info_GroupMemberList_MemberInfo::set_inviteer_wxid(::std::string&& value) {
  set_has_inviteer_wxid();
  inviteer_wxid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contact_info.GroupMemberList.MemberInfo.inviteer_wxid)
}
#endif
void contact_info_GroupMemberList_MemberInfo::set_inviteer_wxid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_inviteer_wxid();
  inviteer_wxid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contact_info.GroupMemberList.MemberInfo.inviteer_wxid)
}
void contact_info_GroupMemberList_MemberInfo::set_inviteer_wxid(const char* value, size_t size) {
  set_has_inviteer_wxid();
  inviteer_wxid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contact_info.GroupMemberList.MemberInfo.inviteer_wxid)
}
::std::string* contact_info_GroupMemberList_MemberInfo::mutable_inviteer_wxid() {
  set_has_inviteer_wxid();
  // @@protoc_insertion_point(field_mutable:contact_info.GroupMemberList.MemberInfo.inviteer_wxid)
  return inviteer_wxid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* contact_info_GroupMemberList_MemberInfo::release_inviteer_wxid() {
  // @@protoc_insertion_point(field_release:contact_info.GroupMemberList.MemberInfo.inviteer_wxid)
  clear_has_inviteer_wxid();
  return inviteer_wxid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void contact_info_GroupMemberList_MemberInfo::set_allocated_inviteer_wxid(::std::string* inviteer_wxid) {
  if (inviteer_wxid != NULL) {
    set_has_inviteer_wxid();
  } else {
    clear_has_inviteer_wxid();
  }
  inviteer_wxid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inviteer_wxid);
  // @@protoc_insertion_point(field_set_allocated:contact_info.GroupMemberList.MemberInfo.inviteer_wxid)
}

// optional int32 tag8 = 8;
bool contact_info_GroupMemberList_MemberInfo::has_tag8() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void contact_info_GroupMemberList_MemberInfo::set_has_tag8() {
  _has_bits_[0] |= 0x00000010u;
}
void contact_info_GroupMemberList_MemberInfo::clear_has_tag8() {
  _has_bits_[0] &= ~0x00000010u;
}
void contact_info_GroupMemberList_MemberInfo::clear_tag8() {
  tag8_ = 0;
  clear_has_tag8();
}
::google::protobuf::int32 contact_info_GroupMemberList_MemberInfo::tag8() const {
  // @@protoc_insertion_point(field_get:contact_info.GroupMemberList.MemberInfo.tag8)
  return tag8_;
}
void contact_info_GroupMemberList_MemberInfo::set_tag8(::google::protobuf::int32 value) {
  set_has_tag8();
  tag8_ = value;
  // @@protoc_insertion_point(field_set:contact_info.GroupMemberList.MemberInfo.tag8)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int contact_info_GroupMemberList::kCntFieldNumber;
const int contact_info_GroupMemberList::kMemberFieldNumber;
const int contact_info_GroupMemberList::kTag3FieldNumber;
const int contact_info_GroupMemberList::kTag4FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

contact_info_GroupMemberList::contact_info_GroupMemberList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:contact_info.GroupMemberList)
}
contact_info_GroupMemberList::contact_info_GroupMemberList(const contact_info_GroupMemberList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      member_(from.member_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tag4_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tag4()) {
    tag4_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag4_);
  }
  ::memcpy(&cnt_, &from.cnt_,
    reinterpret_cast<char*>(&tag3_) -
    reinterpret_cast<char*>(&cnt_) + sizeof(tag3_));
  // @@protoc_insertion_point(copy_constructor:contact_info.GroupMemberList)
}

void contact_info_GroupMemberList::SharedCtor() {
  _cached_size_ = 0;
  tag4_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&cnt_, 0, reinterpret_cast<char*>(&tag3_) -
    reinterpret_cast<char*>(&cnt_) + sizeof(tag3_));
}

contact_info_GroupMemberList::~contact_info_GroupMemberList() {
  // @@protoc_insertion_point(destructor:contact_info.GroupMemberList)
  SharedDtor();
}

void contact_info_GroupMemberList::SharedDtor() {
  tag4_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void contact_info_GroupMemberList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* contact_info_GroupMemberList::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const contact_info_GroupMemberList& contact_info_GroupMemberList::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

contact_info_GroupMemberList* contact_info_GroupMemberList::New(::google::protobuf::Arena* arena) const {
  contact_info_GroupMemberList* n = new contact_info_GroupMemberList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void contact_info_GroupMemberList::Clear() {
// @@protoc_insertion_point(message_clear_start:contact_info.GroupMemberList)
  member_.Clear();
  if (has_tag4()) {
    GOOGLE_DCHECK(!tag4_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*tag4_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&cnt_, 0, reinterpret_cast<char*>(&tag3_) -
      reinterpret_cast<char*>(&cnt_) + sizeof(tag3_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool contact_info_GroupMemberList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:contact_info.GroupMemberList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cnt = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_cnt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .contact_info.GroupMemberList.MemberInfo member = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_member()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tag3 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_tag3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string tag4 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag4()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag4().data(), this->tag4().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "contact_info.GroupMemberList.tag4");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:contact_info.GroupMemberList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:contact_info.GroupMemberList)
  return false;
#undef DO_
}

void contact_info_GroupMemberList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:contact_info.GroupMemberList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cnt = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cnt(), output);
  }

  // repeated .contact_info.GroupMemberList.MemberInfo member = 2;
  for (unsigned int i = 0, n = this->member_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->member(i), output);
  }

  // optional int32 tag3 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tag3(), output);
  }

  // optional string tag4 = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag4().data(), this->tag4().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contact_info.GroupMemberList.tag4");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->tag4(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:contact_info.GroupMemberList)
}

::google::protobuf::uint8* contact_info_GroupMemberList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:contact_info.GroupMemberList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cnt = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cnt(), target);
  }

  // repeated .contact_info.GroupMemberList.MemberInfo member = 2;
  for (unsigned int i = 0, n = this->member_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->member(i), deterministic, target);
  }

  // optional int32 tag3 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tag3(), target);
  }

  // optional string tag4 = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag4().data(), this->tag4().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contact_info.GroupMemberList.tag4");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->tag4(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:contact_info.GroupMemberList)
  return target;
}

size_t contact_info_GroupMemberList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:contact_info.GroupMemberList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .contact_info.GroupMemberList.MemberInfo member = 2;
  {
    unsigned int count = this->member_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->member(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string tag4 = 4;
    if (has_tag4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag4());
    }

    // optional int32 cnt = 1;
    if (has_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cnt());
    }

    // optional int32 tag3 = 3;
    if (has_tag3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag3());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void contact_info_GroupMemberList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:contact_info.GroupMemberList)
  GOOGLE_DCHECK_NE(&from, this);
  const contact_info_GroupMemberList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const contact_info_GroupMemberList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:contact_info.GroupMemberList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:contact_info.GroupMemberList)
    MergeFrom(*source);
  }
}

void contact_info_GroupMemberList::MergeFrom(const contact_info_GroupMemberList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:contact_info.GroupMemberList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  member_.MergeFrom(from.member_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_tag4();
      tag4_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag4_);
    }
    if (cached_has_bits & 0x00000002u) {
      cnt_ = from.cnt_;
    }
    if (cached_has_bits & 0x00000004u) {
      tag3_ = from.tag3_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void contact_info_GroupMemberList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:contact_info.GroupMemberList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void contact_info_GroupMemberList::CopyFrom(const contact_info_GroupMemberList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:contact_info.GroupMemberList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool contact_info_GroupMemberList::IsInitialized() const {
  return true;
}

void contact_info_GroupMemberList::Swap(contact_info_GroupMemberList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void contact_info_GroupMemberList::InternalSwap(contact_info_GroupMemberList* other) {
  member_.InternalSwap(&other->member_);
  tag4_.Swap(&other->tag4_);
  std::swap(cnt_, other->cnt_);
  std::swap(tag3_, other->tag3_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata contact_info_GroupMemberList::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// contact_info_GroupMemberList

// optional int32 cnt = 1;
bool contact_info_GroupMemberList::has_cnt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void contact_info_GroupMemberList::set_has_cnt() {
  _has_bits_[0] |= 0x00000002u;
}
void contact_info_GroupMemberList::clear_has_cnt() {
  _has_bits_[0] &= ~0x00000002u;
}
void contact_info_GroupMemberList::clear_cnt() {
  cnt_ = 0;
  clear_has_cnt();
}
::google::protobuf::int32 contact_info_GroupMemberList::cnt() const {
  // @@protoc_insertion_point(field_get:contact_info.GroupMemberList.cnt)
  return cnt_;
}
void contact_info_GroupMemberList::set_cnt(::google::protobuf::int32 value) {
  set_has_cnt();
  cnt_ = value;
  // @@protoc_insertion_point(field_set:contact_info.GroupMemberList.cnt)
}

// repeated .contact_info.GroupMemberList.MemberInfo member = 2;
int contact_info_GroupMemberList::member_size() const {
  return member_.size();
}
void contact_info_GroupMemberList::clear_member() {
  member_.Clear();
}
const ::contact_info_GroupMemberList_MemberInfo& contact_info_GroupMemberList::member(int index) const {
  // @@protoc_insertion_point(field_get:contact_info.GroupMemberList.member)
  return member_.Get(index);
}
::contact_info_GroupMemberList_MemberInfo* contact_info_GroupMemberList::mutable_member(int index) {
  // @@protoc_insertion_point(field_mutable:contact_info.GroupMemberList.member)
  return member_.Mutable(index);
}
::contact_info_GroupMemberList_MemberInfo* contact_info_GroupMemberList::add_member() {
  // @@protoc_insertion_point(field_add:contact_info.GroupMemberList.member)
  return member_.Add();
}
::google::protobuf::RepeatedPtrField< ::contact_info_GroupMemberList_MemberInfo >*
contact_info_GroupMemberList::mutable_member() {
  // @@protoc_insertion_point(field_mutable_list:contact_info.GroupMemberList.member)
  return &member_;
}
const ::google::protobuf::RepeatedPtrField< ::contact_info_GroupMemberList_MemberInfo >&
contact_info_GroupMemberList::member() const {
  // @@protoc_insertion_point(field_list:contact_info.GroupMemberList.member)
  return member_;
}

// optional int32 tag3 = 3;
bool contact_info_GroupMemberList::has_tag3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void contact_info_GroupMemberList::set_has_tag3() {
  _has_bits_[0] |= 0x00000004u;
}
void contact_info_GroupMemberList::clear_has_tag3() {
  _has_bits_[0] &= ~0x00000004u;
}
void contact_info_GroupMemberList::clear_tag3() {
  tag3_ = 0;
  clear_has_tag3();
}
::google::protobuf::int32 contact_info_GroupMemberList::tag3() const {
  // @@protoc_insertion_point(field_get:contact_info.GroupMemberList.tag3)
  return tag3_;
}
void contact_info_GroupMemberList::set_tag3(::google::protobuf::int32 value) {
  set_has_tag3();
  tag3_ = value;
  // @@protoc_insertion_point(field_set:contact_info.GroupMemberList.tag3)
}

// optional string tag4 = 4;
bool contact_info_GroupMemberList::has_tag4() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void contact_info_GroupMemberList::set_has_tag4() {
  _has_bits_[0] |= 0x00000001u;
}
void contact_info_GroupMemberList::clear_has_tag4() {
  _has_bits_[0] &= ~0x00000001u;
}
void contact_info_GroupMemberList::clear_tag4() {
  tag4_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tag4();
}
const ::std::string& contact_info_GroupMemberList::tag4() const {
  // @@protoc_insertion_point(field_get:contact_info.GroupMemberList.tag4)
  return tag4_.GetNoArena();
}
void contact_info_GroupMemberList::set_tag4(const ::std::string& value) {
  set_has_tag4();
  tag4_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:contact_info.GroupMemberList.tag4)
}
#if LANG_CXX11
void contact_info_GroupMemberList::set_tag4(::std::string&& value) {
  set_has_tag4();
  tag4_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contact_info.GroupMemberList.tag4)
}
#endif
void contact_info_GroupMemberList::set_tag4(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tag4();
  tag4_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contact_info.GroupMemberList.tag4)
}
void contact_info_GroupMemberList::set_tag4(const char* value, size_t size) {
  set_has_tag4();
  tag4_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contact_info.GroupMemberList.tag4)
}
::std::string* contact_info_GroupMemberList::mutable_tag4() {
  set_has_tag4();
  // @@protoc_insertion_point(field_mutable:contact_info.GroupMemberList.tag4)
  return tag4_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* contact_info_GroupMemberList::release_tag4() {
  // @@protoc_insertion_point(field_release:contact_info.GroupMemberList.tag4)
  clear_has_tag4();
  return tag4_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void contact_info_GroupMemberList::set_allocated_tag4(::std::string* tag4) {
  if (tag4 != NULL) {
    set_has_tag4();
  } else {
    clear_has_tag4();
  }
  tag4_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag4);
  // @@protoc_insertion_point(field_set_allocated:contact_info.GroupMemberList.tag4)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int contact_info::kWxidFieldNumber;
const int contact_info::kNicknameFieldNumber;
const int contact_info::kShortPyFieldNumber;
const int contact_info::kQuanpinFieldNumber;
const int contact_info::kSexFieldNumber;
const int contact_info::kTag6FieldNumber;
const int contact_info::kTag7FieldNumber;
const int contact_info::kTypeFieldNumber;
const int contact_info::kTag9FieldNumber;
const int contact_info::kRemarkNameFieldNumber;
const int contact_info::kRealShortPyFieldNumber;
const int contact_info::kRealQuanpinFieldNumber;
const int contact_info::kTag13FieldNumber;
const int contact_info::kTag14FieldNumber;
const int contact_info::kTag16FieldNumber;
const int contact_info::kBChatRoomFieldNumber;
const int contact_info::kTag18FieldNumber;
const int contact_info::kShengFieldNumber;
const int contact_info::kShiFieldNumber;
const int contact_info::kQianmingFieldNumber;
const int contact_info::kTag22FieldNumber;
const int contact_info::kTag23FieldNumber;
const int contact_info::kRegisterBodyTypeFieldNumber;
const int contact_info::kRegisterBodyFieldNumber;
const int contact_info::kTag26FieldNumber;
const int contact_info::kSrcFieldNumber;
const int contact_info::kLastMsgTimeFieldNumber;
const int contact_info::kAliasFieldNumber;
const int contact_info::kChatroomOwnerWxidFieldNumber;
const int contact_info::kTag33FieldNumber;
const int contact_info::kTag34FieldNumber;
const int contact_info::kTag35FieldNumber;
const int contact_info::kTag37FieldNumber;
const int contact_info::kCountryFieldNumber;
const int contact_info::kAvatarBigFieldNumber;
const int contact_info::kAvatarSmallFieldNumber;
const int contact_info::kTag42FieldNumber;
const int contact_info::kV1NameFieldNumber;
const int contact_info::kTag50FieldNumber;
const int contact_info::kChatroomServerVerFieldNumber;
const int contact_info::kChatroomMaxMemberFieldNumber;
const int contact_info::kTag56FieldNumber;
const int contact_info::kGroupMemberListFieldNumber;
const int contact_info::kTag58FieldNumber;
const int contact_info::kTag62FieldNumber;
const int contact_info::kTag64FieldNumber;
const int contact_info::kTag65FieldNumber;
const int contact_info::kTag66FieldNumber;
const int contact_info::kTag67FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

contact_info::contact_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:contact_info)
}
contact_info::contact_info(const contact_info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tag6_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tag6()) {
    tag6_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag6_);
  }
  tag16_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tag16()) {
    tag16_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag16_);
  }
  sheng_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sheng()) {
    sheng_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sheng_);
  }
  shi_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_shi()) {
    shi_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.shi_);
  }
  qianming_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_qianming()) {
    qianming_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qianming_);
  }
  register_body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_register_body()) {
    register_body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.register_body_);
  }
  lastmsgtime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_lastmsgtime()) {
    lastmsgtime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lastmsgtime_);
  }
  alias_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_alias()) {
    alias_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alias_);
  }
  chatroomownerwxid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_chatroomownerwxid()) {
    chatroomownerwxid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chatroomownerwxid_);
  }
  tag37_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tag37()) {
    tag37_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag37_);
  }
  country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_country()) {
    country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_);
  }
  avatar_big_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_avatar_big()) {
    avatar_big_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatar_big_);
  }
  avatar_small_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_avatar_small()) {
    avatar_small_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatar_small_);
  }
  tag42_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tag42()) {
    tag42_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag42_);
  }
  v1_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_v1_name()) {
    v1_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.v1_name_);
  }
  tag50_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tag50()) {
    tag50_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag50_);
  }
  tag62_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tag62()) {
    tag62_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag62_);
  }
  if (from.has_wxid()) {
    wxid_ = new ::Wxid(*from.wxid_);
  } else {
    wxid_ = NULL;
  }
  if (from.has_nickname()) {
    nickname_ = new ::contact_info_NickName(*from.nickname_);
  } else {
    nickname_ = NULL;
  }
  if (from.has_shortpy()) {
    shortpy_ = new ::contact_info_PY_SHORT(*from.shortpy_);
  } else {
    shortpy_ = NULL;
  }
  if (from.has_quanpin()) {
    quanpin_ = new ::contact_info_QuanPin(*from.quanpin_);
  } else {
    quanpin_ = NULL;
  }
  if (from.has_remark_name()) {
    remark_name_ = new ::contact_info_BeiZhu(*from.remark_name_);
  } else {
    remark_name_ = NULL;
  }
  if (from.has_real_shortpy()) {
    real_shortpy_ = new ::contact_info_REAL_PY_SHORT(*from.real_shortpy_);
  } else {
    real_shortpy_ = NULL;
  }
  if (from.has_real_quanpin()) {
    real_quanpin_ = new ::contact_info_REAL_QuanPin(*from.real_quanpin_);
  } else {
    real_quanpin_ = NULL;
  }
  if (from.has_group_member_list()) {
    group_member_list_ = new ::contact_info_GroupMemberList(*from.group_member_list_);
  } else {
    group_member_list_ = NULL;
  }
  ::memcpy(&sex_, &from.sex_,
    reinterpret_cast<char*>(&tag67_) -
    reinterpret_cast<char*>(&sex_) + sizeof(tag67_));
  // @@protoc_insertion_point(copy_constructor:contact_info)
}

void contact_info::SharedCtor() {
  tag6_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag16_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sheng_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shi_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  qianming_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  register_body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lastmsgtime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alias_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chatroomownerwxid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag37_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_big_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_small_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag42_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  v1_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag50_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag62_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&wxid_, 0, reinterpret_cast<char*>(&tag67_) -
    reinterpret_cast<char*>(&wxid_) + sizeof(tag67_));
  _cached_size_ = 0;
}

contact_info::~contact_info() {
  // @@protoc_insertion_point(destructor:contact_info)
  SharedDtor();
}

void contact_info::SharedDtor() {
  tag6_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag16_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sheng_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shi_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  qianming_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  register_body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lastmsgtime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alias_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chatroomownerwxid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag37_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_big_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_small_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag42_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  v1_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag50_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag62_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete wxid_;
  }
  if (this != internal_default_instance()) {
    delete nickname_;
  }
  if (this != internal_default_instance()) {
    delete shortpy_;
  }
  if (this != internal_default_instance()) {
    delete quanpin_;
  }
  if (this != internal_default_instance()) {
    delete remark_name_;
  }
  if (this != internal_default_instance()) {
    delete real_shortpy_;
  }
  if (this != internal_default_instance()) {
    delete real_quanpin_;
  }
  if (this != internal_default_instance()) {
    delete group_member_list_;
  }
}

void contact_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* contact_info::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const contact_info& contact_info::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

contact_info* contact_info::New(::google::protobuf::Arena* arena) const {
  contact_info* n = new contact_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void contact_info::Clear() {
// @@protoc_insertion_point(message_clear_start:contact_info)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_tag6()) {
      GOOGLE_DCHECK(!tag6_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tag6_.UnsafeRawStringPointer())->clear();
    }
    if (has_tag16()) {
      GOOGLE_DCHECK(!tag16_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tag16_.UnsafeRawStringPointer())->clear();
    }
    if (has_sheng()) {
      GOOGLE_DCHECK(!sheng_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sheng_.UnsafeRawStringPointer())->clear();
    }
    if (has_shi()) {
      GOOGLE_DCHECK(!shi_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*shi_.UnsafeRawStringPointer())->clear();
    }
    if (has_qianming()) {
      GOOGLE_DCHECK(!qianming_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*qianming_.UnsafeRawStringPointer())->clear();
    }
    if (has_register_body()) {
      GOOGLE_DCHECK(!register_body_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*register_body_.UnsafeRawStringPointer())->clear();
    }
    if (has_lastmsgtime()) {
      GOOGLE_DCHECK(!lastmsgtime_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*lastmsgtime_.UnsafeRawStringPointer())->clear();
    }
    if (has_alias()) {
      GOOGLE_DCHECK(!alias_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*alias_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    if (has_chatroomownerwxid()) {
      GOOGLE_DCHECK(!chatroomownerwxid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*chatroomownerwxid_.UnsafeRawStringPointer())->clear();
    }
    if (has_tag37()) {
      GOOGLE_DCHECK(!tag37_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tag37_.UnsafeRawStringPointer())->clear();
    }
    if (has_country()) {
      GOOGLE_DCHECK(!country_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*country_.UnsafeRawStringPointer())->clear();
    }
    if (has_avatar_big()) {
      GOOGLE_DCHECK(!avatar_big_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*avatar_big_.UnsafeRawStringPointer())->clear();
    }
    if (has_avatar_small()) {
      GOOGLE_DCHECK(!avatar_small_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*avatar_small_.UnsafeRawStringPointer())->clear();
    }
    if (has_tag42()) {
      GOOGLE_DCHECK(!tag42_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tag42_.UnsafeRawStringPointer())->clear();
    }
    if (has_v1_name()) {
      GOOGLE_DCHECK(!v1_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*v1_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_tag50()) {
      GOOGLE_DCHECK(!tag50_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tag50_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    if (has_tag62()) {
      GOOGLE_DCHECK(!tag62_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tag62_.UnsafeRawStringPointer())->clear();
    }
    if (has_wxid()) {
      GOOGLE_DCHECK(wxid_ != NULL);
      wxid_->::Wxid::Clear();
    }
    if (has_nickname()) {
      GOOGLE_DCHECK(nickname_ != NULL);
      nickname_->::contact_info_NickName::Clear();
    }
    if (has_shortpy()) {
      GOOGLE_DCHECK(shortpy_ != NULL);
      shortpy_->::contact_info_PY_SHORT::Clear();
    }
    if (has_quanpin()) {
      GOOGLE_DCHECK(quanpin_ != NULL);
      quanpin_->::contact_info_QuanPin::Clear();
    }
    if (has_remark_name()) {
      GOOGLE_DCHECK(remark_name_ != NULL);
      remark_name_->::contact_info_BeiZhu::Clear();
    }
    if (has_real_shortpy()) {
      GOOGLE_DCHECK(real_shortpy_ != NULL);
      real_shortpy_->::contact_info_REAL_PY_SHORT::Clear();
    }
    if (has_real_quanpin()) {
      GOOGLE_DCHECK(real_quanpin_ != NULL);
      real_quanpin_->::contact_info_REAL_QuanPin::Clear();
    }
  }
  if (has_group_member_list()) {
    GOOGLE_DCHECK(group_member_list_ != NULL);
    group_member_list_->::contact_info_GroupMemberList::Clear();
  }
  if (_has_bits_[24 / 32] & 4261412864u) {
    ::memset(&sex_, 0, reinterpret_cast<char*>(&bchatroom_) -
      reinterpret_cast<char*>(&sex_) + sizeof(bchatroom_));
  }
  if (_has_bits_[32 / 32] & 255u) {
    ::memset(&tag18_, 0, reinterpret_cast<char*>(&tag34_) -
      reinterpret_cast<char*>(&tag18_) + sizeof(tag34_));
  }
  if (_has_bits_[40 / 32] & 65280u) {
    ::memset(&tag35_, 0, reinterpret_cast<char*>(&tag66_) -
      reinterpret_cast<char*>(&tag35_) + sizeof(tag66_));
  }
  tag67_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool contact_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:contact_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Wxid wxid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wxid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .contact_info.NickName nickname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nickname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .contact_info.PY_SHORT shortPy = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shortpy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .contact_info.QuanPin quanpin = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quanpin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sex = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_sex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string tag6 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag6()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag6().data(), this->tag6().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "contact_info.tag6");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tag7 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_tag7();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag7_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tag9 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_tag9();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag9_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .contact_info.BeiZhu remark_name = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_remark_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .contact_info.REAL_PY_SHORT real_shortPy = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_real_shortpy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .contact_info.REAL_QuanPin real_quanpin = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_real_quanpin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tag13 = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_tag13();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag13_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tag14 = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_tag14();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag14_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string tag16 = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag16()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag16().data(), this->tag16().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "contact_info.tag16");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bChatRoom = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_bchatroom();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bchatroom_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tag18 = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_tag18();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag18_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string sheng = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sheng()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sheng().data(), this->sheng().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "contact_info.sheng");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string shi = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shi()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->shi().data(), this->shi().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "contact_info.shi");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string qianming = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_qianming()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->qianming().data(), this->qianming().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "contact_info.qianming");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tag22 = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          set_has_tag22();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag22_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tag23 = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u)) {
          set_has_tag23();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag23_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 register_body_type = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u)) {
          set_has_register_body_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &register_body_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string register_body = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_register_body()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->register_body().data(), this->register_body().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "contact_info.register_body");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tag26 = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u)) {
          set_has_tag26();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag26_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 src = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u)) {
          set_has_src();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &src_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string lastMsgTime = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lastmsgtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lastmsgtime().data(), this->lastmsgtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "contact_info.lastMsgTime");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string alias = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alias()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->alias().data(), this->alias().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "contact_info.alias");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string chatroomOwnerWxid = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chatroomownerwxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->chatroomownerwxid().data(), this->chatroomownerwxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "contact_info.chatroomOwnerWxid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tag33 = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(264u)) {
          set_has_tag33();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag33_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tag34 = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(272u)) {
          set_has_tag34();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag34_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tag35 = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(280u)) {
          set_has_tag35();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag35_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes tag37 = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(298u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tag37()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string country = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(306u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country().data(), this->country().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "contact_info.country");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string avatar_big = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(314u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar_big()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->avatar_big().data(), this->avatar_big().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "contact_info.avatar_big");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string avatar_small = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(322u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar_small()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->avatar_small().data(), this->avatar_small().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "contact_info.avatar_small");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes tag42 = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(338u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tag42()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string v1_name = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(362u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_v1_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->v1_name().data(), this->v1_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "contact_info.v1_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes tag50 = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(402u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tag50()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 chatroom_serverVer = 53;
      case 53: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(424u)) {
          set_has_chatroom_serverver();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chatroom_serverver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 chatroom_max_member = 55;
      case 55: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(440u)) {
          set_has_chatroom_max_member();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chatroom_max_member_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tag56 = 56;
      case 56: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(448u)) {
          set_has_tag56();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag56_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .contact_info.GroupMemberList group_member_list = 57;
      case 57: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(458u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_member_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tag58 = 58;
      case 58: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(464u)) {
          set_has_tag58();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag58_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes tag62 = 62;
      case 62: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(498u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tag62()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tag64 = 64;
      case 64: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(512u)) {
          set_has_tag64();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag64_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tag65 = 65;
      case 65: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(520u)) {
          set_has_tag65();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag65_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tag66 = 66;
      case 66: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(528u)) {
          set_has_tag66();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag66_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tag67 = 67;
      case 67: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(536u)) {
          set_has_tag67();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag67_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:contact_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:contact_info)
  return false;
#undef DO_
}

void contact_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:contact_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Wxid wxid = 1;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->wxid_, output);
  }

  // optional .contact_info.NickName nickname = 2;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->nickname_, output);
  }

  // optional .contact_info.PY_SHORT shortPy = 3;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->shortpy_, output);
  }

  // optional .contact_info.QuanPin quanpin = 4;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->quanpin_, output);
  }

  // optional int32 sex = 5;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sex(), output);
  }

  // optional string tag6 = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag6().data(), this->tag6().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contact_info.tag6");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->tag6(), output);
  }

  // optional int32 tag7 = 7;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->tag7(), output);
  }

  // optional int32 type = 8;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->type(), output);
  }

  // optional int32 tag9 = 9;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->tag9(), output);
  }

  // optional .contact_info.BeiZhu remark_name = 10;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->remark_name_, output);
  }

  // optional .contact_info.REAL_PY_SHORT real_shortPy = 11;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->real_shortpy_, output);
  }

  // optional .contact_info.REAL_QuanPin real_quanpin = 12;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->real_quanpin_, output);
  }

  // optional int32 tag13 = 13;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->tag13(), output);
  }

  // optional int32 tag14 = 14;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->tag14(), output);
  }

  // optional string tag16 = 16;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag16().data(), this->tag16().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contact_info.tag16");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->tag16(), output);
  }

  // optional int32 bChatRoom = 17;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->bchatroom(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 tag18 = 18;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->tag18(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string sheng = 19;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sheng().data(), this->sheng().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contact_info.sheng");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->sheng(), output);
  }

  // optional string shi = 20;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shi().data(), this->shi().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contact_info.shi");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->shi(), output);
  }

  // optional string qianming = 21;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->qianming().data(), this->qianming().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contact_info.qianming");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->qianming(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 tag22 = 22;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->tag22(), output);
  }

  // optional int32 tag23 = 23;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->tag23(), output);
  }

  // optional int32 register_body_type = 24;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->register_body_type(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string register_body = 25;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->register_body().data(), this->register_body().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contact_info.register_body");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      25, this->register_body(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 tag26 = 26;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->tag26(), output);
  }

  // optional int32 src = 27;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->src(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string lastMsgTime = 29;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lastmsgtime().data(), this->lastmsgtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contact_info.lastMsgTime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      29, this->lastmsgtime(), output);
  }

  // optional string alias = 30;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contact_info.alias");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      30, this->alias(), output);
  }

  // optional string chatroomOwnerWxid = 31;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chatroomownerwxid().data(), this->chatroomownerwxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contact_info.chatroomOwnerWxid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      31, this->chatroomownerwxid(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 tag33 = 33;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->tag33(), output);
  }

  // optional int32 tag34 = 34;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->tag34(), output);
  }

  // optional int32 tag35 = 35;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->tag35(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bytes tag37 = 37;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      37, this->tag37(), output);
  }

  // optional string country = 38;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contact_info.country");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      38, this->country(), output);
  }

  // optional string avatar_big = 39;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar_big().data(), this->avatar_big().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contact_info.avatar_big");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      39, this->avatar_big(), output);
  }

  // optional string avatar_small = 40;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar_small().data(), this->avatar_small().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contact_info.avatar_small");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      40, this->avatar_small(), output);
  }

  // optional bytes tag42 = 42;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      42, this->tag42(), output);
  }

  // optional string v1_name = 45;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->v1_name().data(), this->v1_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contact_info.v1_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      45, this->v1_name(), output);
  }

  // optional bytes tag50 = 50;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      50, this->tag50(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 chatroom_serverVer = 53;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(53, this->chatroom_serverver(), output);
  }

  // optional int32 chatroom_max_member = 55;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(55, this->chatroom_max_member(), output);
  }

  // optional int32 tag56 = 56;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(56, this->tag56(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .contact_info.GroupMemberList group_member_list = 57;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      57, *this->group_member_list_, output);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 tag58 = 58;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(58, this->tag58(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bytes tag62 = 62;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      62, this->tag62(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 tag64 = 64;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(64, this->tag64(), output);
  }

  // optional int32 tag65 = 65;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(65, this->tag65(), output);
  }

  // optional int32 tag66 = 66;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(66, this->tag66(), output);
  }

  // optional int32 tag67 = 67;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(67, this->tag67(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:contact_info)
}

::google::protobuf::uint8* contact_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:contact_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Wxid wxid = 1;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->wxid_, deterministic, target);
  }

  // optional .contact_info.NickName nickname = 2;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->nickname_, deterministic, target);
  }

  // optional .contact_info.PY_SHORT shortPy = 3;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->shortpy_, deterministic, target);
  }

  // optional .contact_info.QuanPin quanpin = 4;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->quanpin_, deterministic, target);
  }

  // optional int32 sex = 5;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sex(), target);
  }

  // optional string tag6 = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag6().data(), this->tag6().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contact_info.tag6");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->tag6(), target);
  }

  // optional int32 tag7 = 7;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->tag7(), target);
  }

  // optional int32 type = 8;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->type(), target);
  }

  // optional int32 tag9 = 9;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->tag9(), target);
  }

  // optional .contact_info.BeiZhu remark_name = 10;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->remark_name_, deterministic, target);
  }

  // optional .contact_info.REAL_PY_SHORT real_shortPy = 11;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->real_shortpy_, deterministic, target);
  }

  // optional .contact_info.REAL_QuanPin real_quanpin = 12;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->real_quanpin_, deterministic, target);
  }

  // optional int32 tag13 = 13;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->tag13(), target);
  }

  // optional int32 tag14 = 14;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->tag14(), target);
  }

  // optional string tag16 = 16;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag16().data(), this->tag16().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contact_info.tag16");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->tag16(), target);
  }

  // optional int32 bChatRoom = 17;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->bchatroom(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 tag18 = 18;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->tag18(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string sheng = 19;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sheng().data(), this->sheng().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contact_info.sheng");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->sheng(), target);
  }

  // optional string shi = 20;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shi().data(), this->shi().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contact_info.shi");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->shi(), target);
  }

  // optional string qianming = 21;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->qianming().data(), this->qianming().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contact_info.qianming");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->qianming(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 tag22 = 22;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->tag22(), target);
  }

  // optional int32 tag23 = 23;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->tag23(), target);
  }

  // optional int32 register_body_type = 24;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->register_body_type(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string register_body = 25;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->register_body().data(), this->register_body().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contact_info.register_body");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->register_body(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 tag26 = 26;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->tag26(), target);
  }

  // optional int32 src = 27;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->src(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string lastMsgTime = 29;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lastmsgtime().data(), this->lastmsgtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contact_info.lastMsgTime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->lastmsgtime(), target);
  }

  // optional string alias = 30;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contact_info.alias");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->alias(), target);
  }

  // optional string chatroomOwnerWxid = 31;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chatroomownerwxid().data(), this->chatroomownerwxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contact_info.chatroomOwnerWxid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->chatroomownerwxid(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 tag33 = 33;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->tag33(), target);
  }

  // optional int32 tag34 = 34;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->tag34(), target);
  }

  // optional int32 tag35 = 35;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->tag35(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bytes tag37 = 37;
  if (cached_has_bits & 0x00000200u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        37, this->tag37(), target);
  }

  // optional string country = 38;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contact_info.country");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        38, this->country(), target);
  }

  // optional string avatar_big = 39;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar_big().data(), this->avatar_big().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contact_info.avatar_big");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        39, this->avatar_big(), target);
  }

  // optional string avatar_small = 40;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar_small().data(), this->avatar_small().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contact_info.avatar_small");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        40, this->avatar_small(), target);
  }

  // optional bytes tag42 = 42;
  if (cached_has_bits & 0x00002000u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        42, this->tag42(), target);
  }

  // optional string v1_name = 45;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->v1_name().data(), this->v1_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contact_info.v1_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        45, this->v1_name(), target);
  }

  // optional bytes tag50 = 50;
  if (cached_has_bits & 0x00008000u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        50, this->tag50(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 chatroom_serverVer = 53;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(53, this->chatroom_serverver(), target);
  }

  // optional int32 chatroom_max_member = 55;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(55, this->chatroom_max_member(), target);
  }

  // optional int32 tag56 = 56;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(56, this->tag56(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .contact_info.GroupMemberList group_member_list = 57;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        57, *this->group_member_list_, deterministic, target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 tag58 = 58;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(58, this->tag58(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bytes tag62 = 62;
  if (cached_has_bits & 0x00010000u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        62, this->tag62(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 tag64 = 64;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(64, this->tag64(), target);
  }

  // optional int32 tag65 = 65;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(65, this->tag65(), target);
  }

  // optional int32 tag66 = 66;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(66, this->tag66(), target);
  }

  // optional int32 tag67 = 67;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(67, this->tag67(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:contact_info)
  return target;
}

size_t contact_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:contact_info)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string tag6 = 6;
    if (has_tag6()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag6());
    }

    // optional string tag16 = 16;
    if (has_tag16()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag16());
    }

    // optional string sheng = 19;
    if (has_sheng()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sheng());
    }

    // optional string shi = 20;
    if (has_shi()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->shi());
    }

    // optional string qianming = 21;
    if (has_qianming()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->qianming());
    }

    // optional string register_body = 25;
    if (has_register_body()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->register_body());
    }

    // optional string lastMsgTime = 29;
    if (has_lastmsgtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lastmsgtime());
    }

    // optional string alias = 30;
    if (has_alias()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alias());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional string chatroomOwnerWxid = 31;
    if (has_chatroomownerwxid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chatroomownerwxid());
    }

    // optional bytes tag37 = 37;
    if (has_tag37()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tag37());
    }

    // optional string country = 38;
    if (has_country()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country());
    }

    // optional string avatar_big = 39;
    if (has_avatar_big()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatar_big());
    }

    // optional string avatar_small = 40;
    if (has_avatar_small()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatar_small());
    }

    // optional bytes tag42 = 42;
    if (has_tag42()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tag42());
    }

    // optional string v1_name = 45;
    if (has_v1_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->v1_name());
    }

    // optional bytes tag50 = 50;
    if (has_tag50()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tag50());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional bytes tag62 = 62;
    if (has_tag62()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tag62());
    }

    // optional .Wxid wxid = 1;
    if (has_wxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->wxid_);
    }

    // optional .contact_info.NickName nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->nickname_);
    }

    // optional .contact_info.PY_SHORT shortPy = 3;
    if (has_shortpy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->shortpy_);
    }

    // optional .contact_info.QuanPin quanpin = 4;
    if (has_quanpin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->quanpin_);
    }

    // optional .contact_info.BeiZhu remark_name = 10;
    if (has_remark_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->remark_name_);
    }

    // optional .contact_info.REAL_PY_SHORT real_shortPy = 11;
    if (has_real_shortpy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->real_shortpy_);
    }

    // optional .contact_info.REAL_QuanPin real_quanpin = 12;
    if (has_real_quanpin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->real_quanpin_);
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional .contact_info.GroupMemberList group_member_list = 57;
    if (has_group_member_list()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->group_member_list_);
    }

    // optional int32 sex = 5;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional int32 tag7 = 7;
    if (has_tag7()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag7());
    }

    // optional int32 type = 8;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 tag9 = 9;
    if (has_tag9()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag9());
    }

    // optional int32 tag13 = 13;
    if (has_tag13()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag13());
    }

    // optional int32 tag14 = 14;
    if (has_tag14()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag14());
    }

    // optional int32 bChatRoom = 17;
    if (has_bchatroom()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bchatroom());
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional int32 tag18 = 18;
    if (has_tag18()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag18());
    }

    // optional int32 tag22 = 22;
    if (has_tag22()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag22());
    }

    // optional int32 tag23 = 23;
    if (has_tag23()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag23());
    }

    // optional int32 register_body_type = 24;
    if (has_register_body_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->register_body_type());
    }

    // optional int32 tag26 = 26;
    if (has_tag26()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag26());
    }

    // optional int32 src = 27;
    if (has_src()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->src());
    }

    // optional int32 tag33 = 33;
    if (has_tag33()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag33());
    }

    // optional int32 tag34 = 34;
    if (has_tag34()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag34());
    }

  }
  if (_has_bits_[40 / 32] & 65280u) {
    // optional int32 tag35 = 35;
    if (has_tag35()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag35());
    }

    // optional int32 chatroom_serverVer = 53;
    if (has_chatroom_serverver()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chatroom_serverver());
    }

    // optional int32 chatroom_max_member = 55;
    if (has_chatroom_max_member()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chatroom_max_member());
    }

    // optional int32 tag56 = 56;
    if (has_tag56()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag56());
    }

    // optional int32 tag58 = 58;
    if (has_tag58()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag58());
    }

    // optional int32 tag64 = 64;
    if (has_tag64()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag64());
    }

    // optional int32 tag65 = 65;
    if (has_tag65()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag65());
    }

    // optional int32 tag66 = 66;
    if (has_tag66()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag66());
    }

  }
  // optional int32 tag67 = 67;
  if (has_tag67()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tag67());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void contact_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:contact_info)
  GOOGLE_DCHECK_NE(&from, this);
  const contact_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const contact_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:contact_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:contact_info)
    MergeFrom(*source);
  }
}

void contact_info::MergeFrom(const contact_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:contact_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_tag6();
      tag6_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag6_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_tag16();
      tag16_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag16_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_sheng();
      sheng_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sheng_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_shi();
      shi_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.shi_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_qianming();
      qianming_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qianming_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_register_body();
      register_body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.register_body_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_lastmsgtime();
      lastmsgtime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lastmsgtime_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_alias();
      alias_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alias_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_chatroomownerwxid();
      chatroomownerwxid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chatroomownerwxid_);
    }
    if (cached_has_bits & 0x00000200u) {
      set_has_tag37();
      tag37_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag37_);
    }
    if (cached_has_bits & 0x00000400u) {
      set_has_country();
      country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_);
    }
    if (cached_has_bits & 0x00000800u) {
      set_has_avatar_big();
      avatar_big_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatar_big_);
    }
    if (cached_has_bits & 0x00001000u) {
      set_has_avatar_small();
      avatar_small_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatar_small_);
    }
    if (cached_has_bits & 0x00002000u) {
      set_has_tag42();
      tag42_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag42_);
    }
    if (cached_has_bits & 0x00004000u) {
      set_has_v1_name();
      v1_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.v1_name_);
    }
    if (cached_has_bits & 0x00008000u) {
      set_has_tag50();
      tag50_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag50_);
    }
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      set_has_tag62();
      tag62_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag62_);
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_wxid()->::Wxid::MergeFrom(from.wxid());
    }
    if (cached_has_bits & 0x00040000u) {
      mutable_nickname()->::contact_info_NickName::MergeFrom(from.nickname());
    }
    if (cached_has_bits & 0x00080000u) {
      mutable_shortpy()->::contact_info_PY_SHORT::MergeFrom(from.shortpy());
    }
    if (cached_has_bits & 0x00100000u) {
      mutable_quanpin()->::contact_info_QuanPin::MergeFrom(from.quanpin());
    }
    if (cached_has_bits & 0x00200000u) {
      mutable_remark_name()->::contact_info_BeiZhu::MergeFrom(from.remark_name());
    }
    if (cached_has_bits & 0x00400000u) {
      mutable_real_shortpy()->::contact_info_REAL_PY_SHORT::MergeFrom(from.real_shortpy());
    }
    if (cached_has_bits & 0x00800000u) {
      mutable_real_quanpin()->::contact_info_REAL_QuanPin::MergeFrom(from.real_quanpin());
    }
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      mutable_group_member_list()->::contact_info_GroupMemberList::MergeFrom(from.group_member_list());
    }
    if (cached_has_bits & 0x02000000u) {
      sex_ = from.sex_;
    }
    if (cached_has_bits & 0x04000000u) {
      tag7_ = from.tag7_;
    }
    if (cached_has_bits & 0x08000000u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x10000000u) {
      tag9_ = from.tag9_;
    }
    if (cached_has_bits & 0x20000000u) {
      tag13_ = from.tag13_;
    }
    if (cached_has_bits & 0x40000000u) {
      tag14_ = from.tag14_;
    }
    if (cached_has_bits & 0x80000000u) {
      bchatroom_ = from.bchatroom_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      tag18_ = from.tag18_;
    }
    if (cached_has_bits & 0x00000002u) {
      tag22_ = from.tag22_;
    }
    if (cached_has_bits & 0x00000004u) {
      tag23_ = from.tag23_;
    }
    if (cached_has_bits & 0x00000008u) {
      register_body_type_ = from.register_body_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      tag26_ = from.tag26_;
    }
    if (cached_has_bits & 0x00000020u) {
      src_ = from.src_;
    }
    if (cached_has_bits & 0x00000040u) {
      tag33_ = from.tag33_;
    }
    if (cached_has_bits & 0x00000080u) {
      tag34_ = from.tag34_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      tag35_ = from.tag35_;
    }
    if (cached_has_bits & 0x00000200u) {
      chatroom_serverver_ = from.chatroom_serverver_;
    }
    if (cached_has_bits & 0x00000400u) {
      chatroom_max_member_ = from.chatroom_max_member_;
    }
    if (cached_has_bits & 0x00000800u) {
      tag56_ = from.tag56_;
    }
    if (cached_has_bits & 0x00001000u) {
      tag58_ = from.tag58_;
    }
    if (cached_has_bits & 0x00002000u) {
      tag64_ = from.tag64_;
    }
    if (cached_has_bits & 0x00004000u) {
      tag65_ = from.tag65_;
    }
    if (cached_has_bits & 0x00008000u) {
      tag66_ = from.tag66_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    set_tag67(from.tag67());
  }
}

void contact_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:contact_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void contact_info::CopyFrom(const contact_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:contact_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool contact_info::IsInitialized() const {
  return true;
}

void contact_info::Swap(contact_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void contact_info::InternalSwap(contact_info* other) {
  tag6_.Swap(&other->tag6_);
  tag16_.Swap(&other->tag16_);
  sheng_.Swap(&other->sheng_);
  shi_.Swap(&other->shi_);
  qianming_.Swap(&other->qianming_);
  register_body_.Swap(&other->register_body_);
  lastmsgtime_.Swap(&other->lastmsgtime_);
  alias_.Swap(&other->alias_);
  chatroomownerwxid_.Swap(&other->chatroomownerwxid_);
  tag37_.Swap(&other->tag37_);
  country_.Swap(&other->country_);
  avatar_big_.Swap(&other->avatar_big_);
  avatar_small_.Swap(&other->avatar_small_);
  tag42_.Swap(&other->tag42_);
  v1_name_.Swap(&other->v1_name_);
  tag50_.Swap(&other->tag50_);
  tag62_.Swap(&other->tag62_);
  std::swap(wxid_, other->wxid_);
  std::swap(nickname_, other->nickname_);
  std::swap(shortpy_, other->shortpy_);
  std::swap(quanpin_, other->quanpin_);
  std::swap(remark_name_, other->remark_name_);
  std::swap(real_shortpy_, other->real_shortpy_);
  std::swap(real_quanpin_, other->real_quanpin_);
  std::swap(group_member_list_, other->group_member_list_);
  std::swap(sex_, other->sex_);
  std::swap(tag7_, other->tag7_);
  std::swap(type_, other->type_);
  std::swap(tag9_, other->tag9_);
  std::swap(tag13_, other->tag13_);
  std::swap(tag14_, other->tag14_);
  std::swap(bchatroom_, other->bchatroom_);
  std::swap(tag18_, other->tag18_);
  std::swap(tag22_, other->tag22_);
  std::swap(tag23_, other->tag23_);
  std::swap(register_body_type_, other->register_body_type_);
  std::swap(tag26_, other->tag26_);
  std::swap(src_, other->src_);
  std::swap(tag33_, other->tag33_);
  std::swap(tag34_, other->tag34_);
  std::swap(tag35_, other->tag35_);
  std::swap(chatroom_serverver_, other->chatroom_serverver_);
  std::swap(chatroom_max_member_, other->chatroom_max_member_);
  std::swap(tag56_, other->tag56_);
  std::swap(tag58_, other->tag58_);
  std::swap(tag64_, other->tag64_);
  std::swap(tag65_, other->tag65_);
  std::swap(tag66_, other->tag66_);
  std::swap(tag67_, other->tag67_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata contact_info::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// contact_info

// optional .Wxid wxid = 1;
bool contact_info::has_wxid() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void contact_info::set_has_wxid() {
  _has_bits_[0] |= 0x00020000u;
}
void contact_info::clear_has_wxid() {
  _has_bits_[0] &= ~0x00020000u;
}
void contact_info::clear_wxid() {
  if (wxid_ != NULL) wxid_->::Wxid::Clear();
  clear_has_wxid();
}
const ::Wxid& contact_info::wxid() const {
  // @@protoc_insertion_point(field_get:contact_info.wxid)
  return wxid_ != NULL ? *wxid_
                         : *::Wxid::internal_default_instance();
}
::Wxid* contact_info::mutable_wxid() {
  set_has_wxid();
  if (wxid_ == NULL) {
    wxid_ = new ::Wxid;
  }
  // @@protoc_insertion_point(field_mutable:contact_info.wxid)
  return wxid_;
}
::Wxid* contact_info::release_wxid() {
  // @@protoc_insertion_point(field_release:contact_info.wxid)
  clear_has_wxid();
  ::Wxid* temp = wxid_;
  wxid_ = NULL;
  return temp;
}
void contact_info::set_allocated_wxid(::Wxid* wxid) {
  delete wxid_;
  wxid_ = wxid;
  if (wxid) {
    set_has_wxid();
  } else {
    clear_has_wxid();
  }
  // @@protoc_insertion_point(field_set_allocated:contact_info.wxid)
}

// optional .contact_info.NickName nickname = 2;
bool contact_info::has_nickname() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void contact_info::set_has_nickname() {
  _has_bits_[0] |= 0x00040000u;
}
void contact_info::clear_has_nickname() {
  _has_bits_[0] &= ~0x00040000u;
}
void contact_info::clear_nickname() {
  if (nickname_ != NULL) nickname_->::contact_info_NickName::Clear();
  clear_has_nickname();
}
const ::contact_info_NickName& contact_info::nickname() const {
  // @@protoc_insertion_point(field_get:contact_info.nickname)
  return nickname_ != NULL ? *nickname_
                         : *::contact_info_NickName::internal_default_instance();
}
::contact_info_NickName* contact_info::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == NULL) {
    nickname_ = new ::contact_info_NickName;
  }
  // @@protoc_insertion_point(field_mutable:contact_info.nickname)
  return nickname_;
}
::contact_info_NickName* contact_info::release_nickname() {
  // @@protoc_insertion_point(field_release:contact_info.nickname)
  clear_has_nickname();
  ::contact_info_NickName* temp = nickname_;
  nickname_ = NULL;
  return temp;
}
void contact_info::set_allocated_nickname(::contact_info_NickName* nickname) {
  delete nickname_;
  nickname_ = nickname;
  if (nickname) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  // @@protoc_insertion_point(field_set_allocated:contact_info.nickname)
}

// optional .contact_info.PY_SHORT shortPy = 3;
bool contact_info::has_shortpy() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void contact_info::set_has_shortpy() {
  _has_bits_[0] |= 0x00080000u;
}
void contact_info::clear_has_shortpy() {
  _has_bits_[0] &= ~0x00080000u;
}
void contact_info::clear_shortpy() {
  if (shortpy_ != NULL) shortpy_->::contact_info_PY_SHORT::Clear();
  clear_has_shortpy();
}
const ::contact_info_PY_SHORT& contact_info::shortpy() const {
  // @@protoc_insertion_point(field_get:contact_info.shortPy)
  return shortpy_ != NULL ? *shortpy_
                         : *::contact_info_PY_SHORT::internal_default_instance();
}
::contact_info_PY_SHORT* contact_info::mutable_shortpy() {
  set_has_shortpy();
  if (shortpy_ == NULL) {
    shortpy_ = new ::contact_info_PY_SHORT;
  }
  // @@protoc_insertion_point(field_mutable:contact_info.shortPy)
  return shortpy_;
}
::contact_info_PY_SHORT* contact_info::release_shortpy() {
  // @@protoc_insertion_point(field_release:contact_info.shortPy)
  clear_has_shortpy();
  ::contact_info_PY_SHORT* temp = shortpy_;
  shortpy_ = NULL;
  return temp;
}
void contact_info::set_allocated_shortpy(::contact_info_PY_SHORT* shortpy) {
  delete shortpy_;
  shortpy_ = shortpy;
  if (shortpy) {
    set_has_shortpy();
  } else {
    clear_has_shortpy();
  }
  // @@protoc_insertion_point(field_set_allocated:contact_info.shortPy)
}

// optional .contact_info.QuanPin quanpin = 4;
bool contact_info::has_quanpin() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void contact_info::set_has_quanpin() {
  _has_bits_[0] |= 0x00100000u;
}
void contact_info::clear_has_quanpin() {
  _has_bits_[0] &= ~0x00100000u;
}
void contact_info::clear_quanpin() {
  if (quanpin_ != NULL) quanpin_->::contact_info_QuanPin::Clear();
  clear_has_quanpin();
}
const ::contact_info_QuanPin& contact_info::quanpin() const {
  // @@protoc_insertion_point(field_get:contact_info.quanpin)
  return quanpin_ != NULL ? *quanpin_
                         : *::contact_info_QuanPin::internal_default_instance();
}
::contact_info_QuanPin* contact_info::mutable_quanpin() {
  set_has_quanpin();
  if (quanpin_ == NULL) {
    quanpin_ = new ::contact_info_QuanPin;
  }
  // @@protoc_insertion_point(field_mutable:contact_info.quanpin)
  return quanpin_;
}
::contact_info_QuanPin* contact_info::release_quanpin() {
  // @@protoc_insertion_point(field_release:contact_info.quanpin)
  clear_has_quanpin();
  ::contact_info_QuanPin* temp = quanpin_;
  quanpin_ = NULL;
  return temp;
}
void contact_info::set_allocated_quanpin(::contact_info_QuanPin* quanpin) {
  delete quanpin_;
  quanpin_ = quanpin;
  if (quanpin) {
    set_has_quanpin();
  } else {
    clear_has_quanpin();
  }
  // @@protoc_insertion_point(field_set_allocated:contact_info.quanpin)
}

// optional int32 sex = 5;
bool contact_info::has_sex() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void contact_info::set_has_sex() {
  _has_bits_[0] |= 0x02000000u;
}
void contact_info::clear_has_sex() {
  _has_bits_[0] &= ~0x02000000u;
}
void contact_info::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
::google::protobuf::int32 contact_info::sex() const {
  // @@protoc_insertion_point(field_get:contact_info.sex)
  return sex_;
}
void contact_info::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:contact_info.sex)
}

// optional string tag6 = 6;
bool contact_info::has_tag6() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void contact_info::set_has_tag6() {
  _has_bits_[0] |= 0x00000001u;
}
void contact_info::clear_has_tag6() {
  _has_bits_[0] &= ~0x00000001u;
}
void contact_info::clear_tag6() {
  tag6_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tag6();
}
const ::std::string& contact_info::tag6() const {
  // @@protoc_insertion_point(field_get:contact_info.tag6)
  return tag6_.GetNoArena();
}
void contact_info::set_tag6(const ::std::string& value) {
  set_has_tag6();
  tag6_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:contact_info.tag6)
}
#if LANG_CXX11
void contact_info::set_tag6(::std::string&& value) {
  set_has_tag6();
  tag6_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contact_info.tag6)
}
#endif
void contact_info::set_tag6(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tag6();
  tag6_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contact_info.tag6)
}
void contact_info::set_tag6(const char* value, size_t size) {
  set_has_tag6();
  tag6_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contact_info.tag6)
}
::std::string* contact_info::mutable_tag6() {
  set_has_tag6();
  // @@protoc_insertion_point(field_mutable:contact_info.tag6)
  return tag6_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* contact_info::release_tag6() {
  // @@protoc_insertion_point(field_release:contact_info.tag6)
  clear_has_tag6();
  return tag6_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void contact_info::set_allocated_tag6(::std::string* tag6) {
  if (tag6 != NULL) {
    set_has_tag6();
  } else {
    clear_has_tag6();
  }
  tag6_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag6);
  // @@protoc_insertion_point(field_set_allocated:contact_info.tag6)
}

// optional int32 tag7 = 7;
bool contact_info::has_tag7() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void contact_info::set_has_tag7() {
  _has_bits_[0] |= 0x04000000u;
}
void contact_info::clear_has_tag7() {
  _has_bits_[0] &= ~0x04000000u;
}
void contact_info::clear_tag7() {
  tag7_ = 0;
  clear_has_tag7();
}
::google::protobuf::int32 contact_info::tag7() const {
  // @@protoc_insertion_point(field_get:contact_info.tag7)
  return tag7_;
}
void contact_info::set_tag7(::google::protobuf::int32 value) {
  set_has_tag7();
  tag7_ = value;
  // @@protoc_insertion_point(field_set:contact_info.tag7)
}

// optional int32 type = 8;
bool contact_info::has_type() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void contact_info::set_has_type() {
  _has_bits_[0] |= 0x08000000u;
}
void contact_info::clear_has_type() {
  _has_bits_[0] &= ~0x08000000u;
}
void contact_info::clear_type() {
  type_ = 0;
  clear_has_type();
}
::google::protobuf::int32 contact_info::type() const {
  // @@protoc_insertion_point(field_get:contact_info.type)
  return type_;
}
void contact_info::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:contact_info.type)
}

// optional int32 tag9 = 9;
bool contact_info::has_tag9() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void contact_info::set_has_tag9() {
  _has_bits_[0] |= 0x10000000u;
}
void contact_info::clear_has_tag9() {
  _has_bits_[0] &= ~0x10000000u;
}
void contact_info::clear_tag9() {
  tag9_ = 0;
  clear_has_tag9();
}
::google::protobuf::int32 contact_info::tag9() const {
  // @@protoc_insertion_point(field_get:contact_info.tag9)
  return tag9_;
}
void contact_info::set_tag9(::google::protobuf::int32 value) {
  set_has_tag9();
  tag9_ = value;
  // @@protoc_insertion_point(field_set:contact_info.tag9)
}

// optional .contact_info.BeiZhu remark_name = 10;
bool contact_info::has_remark_name() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void contact_info::set_has_remark_name() {
  _has_bits_[0] |= 0x00200000u;
}
void contact_info::clear_has_remark_name() {
  _has_bits_[0] &= ~0x00200000u;
}
void contact_info::clear_remark_name() {
  if (remark_name_ != NULL) remark_name_->::contact_info_BeiZhu::Clear();
  clear_has_remark_name();
}
const ::contact_info_BeiZhu& contact_info::remark_name() const {
  // @@protoc_insertion_point(field_get:contact_info.remark_name)
  return remark_name_ != NULL ? *remark_name_
                         : *::contact_info_BeiZhu::internal_default_instance();
}
::contact_info_BeiZhu* contact_info::mutable_remark_name() {
  set_has_remark_name();
  if (remark_name_ == NULL) {
    remark_name_ = new ::contact_info_BeiZhu;
  }
  // @@protoc_insertion_point(field_mutable:contact_info.remark_name)
  return remark_name_;
}
::contact_info_BeiZhu* contact_info::release_remark_name() {
  // @@protoc_insertion_point(field_release:contact_info.remark_name)
  clear_has_remark_name();
  ::contact_info_BeiZhu* temp = remark_name_;
  remark_name_ = NULL;
  return temp;
}
void contact_info::set_allocated_remark_name(::contact_info_BeiZhu* remark_name) {
  delete remark_name_;
  remark_name_ = remark_name;
  if (remark_name) {
    set_has_remark_name();
  } else {
    clear_has_remark_name();
  }
  // @@protoc_insertion_point(field_set_allocated:contact_info.remark_name)
}

// optional .contact_info.REAL_PY_SHORT real_shortPy = 11;
bool contact_info::has_real_shortpy() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void contact_info::set_has_real_shortpy() {
  _has_bits_[0] |= 0x00400000u;
}
void contact_info::clear_has_real_shortpy() {
  _has_bits_[0] &= ~0x00400000u;
}
void contact_info::clear_real_shortpy() {
  if (real_shortpy_ != NULL) real_shortpy_->::contact_info_REAL_PY_SHORT::Clear();
  clear_has_real_shortpy();
}
const ::contact_info_REAL_PY_SHORT& contact_info::real_shortpy() const {
  // @@protoc_insertion_point(field_get:contact_info.real_shortPy)
  return real_shortpy_ != NULL ? *real_shortpy_
                         : *::contact_info_REAL_PY_SHORT::internal_default_instance();
}
::contact_info_REAL_PY_SHORT* contact_info::mutable_real_shortpy() {
  set_has_real_shortpy();
  if (real_shortpy_ == NULL) {
    real_shortpy_ = new ::contact_info_REAL_PY_SHORT;
  }
  // @@protoc_insertion_point(field_mutable:contact_info.real_shortPy)
  return real_shortpy_;
}
::contact_info_REAL_PY_SHORT* contact_info::release_real_shortpy() {
  // @@protoc_insertion_point(field_release:contact_info.real_shortPy)
  clear_has_real_shortpy();
  ::contact_info_REAL_PY_SHORT* temp = real_shortpy_;
  real_shortpy_ = NULL;
  return temp;
}
void contact_info::set_allocated_real_shortpy(::contact_info_REAL_PY_SHORT* real_shortpy) {
  delete real_shortpy_;
  real_shortpy_ = real_shortpy;
  if (real_shortpy) {
    set_has_real_shortpy();
  } else {
    clear_has_real_shortpy();
  }
  // @@protoc_insertion_point(field_set_allocated:contact_info.real_shortPy)
}

// optional .contact_info.REAL_QuanPin real_quanpin = 12;
bool contact_info::has_real_quanpin() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void contact_info::set_has_real_quanpin() {
  _has_bits_[0] |= 0x00800000u;
}
void contact_info::clear_has_real_quanpin() {
  _has_bits_[0] &= ~0x00800000u;
}
void contact_info::clear_real_quanpin() {
  if (real_quanpin_ != NULL) real_quanpin_->::contact_info_REAL_QuanPin::Clear();
  clear_has_real_quanpin();
}
const ::contact_info_REAL_QuanPin& contact_info::real_quanpin() const {
  // @@protoc_insertion_point(field_get:contact_info.real_quanpin)
  return real_quanpin_ != NULL ? *real_quanpin_
                         : *::contact_info_REAL_QuanPin::internal_default_instance();
}
::contact_info_REAL_QuanPin* contact_info::mutable_real_quanpin() {
  set_has_real_quanpin();
  if (real_quanpin_ == NULL) {
    real_quanpin_ = new ::contact_info_REAL_QuanPin;
  }
  // @@protoc_insertion_point(field_mutable:contact_info.real_quanpin)
  return real_quanpin_;
}
::contact_info_REAL_QuanPin* contact_info::release_real_quanpin() {
  // @@protoc_insertion_point(field_release:contact_info.real_quanpin)
  clear_has_real_quanpin();
  ::contact_info_REAL_QuanPin* temp = real_quanpin_;
  real_quanpin_ = NULL;
  return temp;
}
void contact_info::set_allocated_real_quanpin(::contact_info_REAL_QuanPin* real_quanpin) {
  delete real_quanpin_;
  real_quanpin_ = real_quanpin;
  if (real_quanpin) {
    set_has_real_quanpin();
  } else {
    clear_has_real_quanpin();
  }
  // @@protoc_insertion_point(field_set_allocated:contact_info.real_quanpin)
}

// optional int32 tag13 = 13;
bool contact_info::has_tag13() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void contact_info::set_has_tag13() {
  _has_bits_[0] |= 0x20000000u;
}
void contact_info::clear_has_tag13() {
  _has_bits_[0] &= ~0x20000000u;
}
void contact_info::clear_tag13() {
  tag13_ = 0;
  clear_has_tag13();
}
::google::protobuf::int32 contact_info::tag13() const {
  // @@protoc_insertion_point(field_get:contact_info.tag13)
  return tag13_;
}
void contact_info::set_tag13(::google::protobuf::int32 value) {
  set_has_tag13();
  tag13_ = value;
  // @@protoc_insertion_point(field_set:contact_info.tag13)
}

// optional int32 tag14 = 14;
bool contact_info::has_tag14() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void contact_info::set_has_tag14() {
  _has_bits_[0] |= 0x40000000u;
}
void contact_info::clear_has_tag14() {
  _has_bits_[0] &= ~0x40000000u;
}
void contact_info::clear_tag14() {
  tag14_ = 0;
  clear_has_tag14();
}
::google::protobuf::int32 contact_info::tag14() const {
  // @@protoc_insertion_point(field_get:contact_info.tag14)
  return tag14_;
}
void contact_info::set_tag14(::google::protobuf::int32 value) {
  set_has_tag14();
  tag14_ = value;
  // @@protoc_insertion_point(field_set:contact_info.tag14)
}

// optional string tag16 = 16;
bool contact_info::has_tag16() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void contact_info::set_has_tag16() {
  _has_bits_[0] |= 0x00000002u;
}
void contact_info::clear_has_tag16() {
  _has_bits_[0] &= ~0x00000002u;
}
void contact_info::clear_tag16() {
  tag16_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tag16();
}
const ::std::string& contact_info::tag16() const {
  // @@protoc_insertion_point(field_get:contact_info.tag16)
  return tag16_.GetNoArena();
}
void contact_info::set_tag16(const ::std::string& value) {
  set_has_tag16();
  tag16_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:contact_info.tag16)
}
#if LANG_CXX11
void contact_info::set_tag16(::std::string&& value) {
  set_has_tag16();
  tag16_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contact_info.tag16)
}
#endif
void contact_info::set_tag16(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tag16();
  tag16_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contact_info.tag16)
}
void contact_info::set_tag16(const char* value, size_t size) {
  set_has_tag16();
  tag16_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contact_info.tag16)
}
::std::string* contact_info::mutable_tag16() {
  set_has_tag16();
  // @@protoc_insertion_point(field_mutable:contact_info.tag16)
  return tag16_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* contact_info::release_tag16() {
  // @@protoc_insertion_point(field_release:contact_info.tag16)
  clear_has_tag16();
  return tag16_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void contact_info::set_allocated_tag16(::std::string* tag16) {
  if (tag16 != NULL) {
    set_has_tag16();
  } else {
    clear_has_tag16();
  }
  tag16_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag16);
  // @@protoc_insertion_point(field_set_allocated:contact_info.tag16)
}

// optional int32 bChatRoom = 17;
bool contact_info::has_bchatroom() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void contact_info::set_has_bchatroom() {
  _has_bits_[0] |= 0x80000000u;
}
void contact_info::clear_has_bchatroom() {
  _has_bits_[0] &= ~0x80000000u;
}
void contact_info::clear_bchatroom() {
  bchatroom_ = 0;
  clear_has_bchatroom();
}
::google::protobuf::int32 contact_info::bchatroom() const {
  // @@protoc_insertion_point(field_get:contact_info.bChatRoom)
  return bchatroom_;
}
void contact_info::set_bchatroom(::google::protobuf::int32 value) {
  set_has_bchatroom();
  bchatroom_ = value;
  // @@protoc_insertion_point(field_set:contact_info.bChatRoom)
}

// optional int32 tag18 = 18;
bool contact_info::has_tag18() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void contact_info::set_has_tag18() {
  _has_bits_[1] |= 0x00000001u;
}
void contact_info::clear_has_tag18() {
  _has_bits_[1] &= ~0x00000001u;
}
void contact_info::clear_tag18() {
  tag18_ = 0;
  clear_has_tag18();
}
::google::protobuf::int32 contact_info::tag18() const {
  // @@protoc_insertion_point(field_get:contact_info.tag18)
  return tag18_;
}
void contact_info::set_tag18(::google::protobuf::int32 value) {
  set_has_tag18();
  tag18_ = value;
  // @@protoc_insertion_point(field_set:contact_info.tag18)
}

// optional string sheng = 19;
bool contact_info::has_sheng() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void contact_info::set_has_sheng() {
  _has_bits_[0] |= 0x00000004u;
}
void contact_info::clear_has_sheng() {
  _has_bits_[0] &= ~0x00000004u;
}
void contact_info::clear_sheng() {
  sheng_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sheng();
}
const ::std::string& contact_info::sheng() const {
  // @@protoc_insertion_point(field_get:contact_info.sheng)
  return sheng_.GetNoArena();
}
void contact_info::set_sheng(const ::std::string& value) {
  set_has_sheng();
  sheng_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:contact_info.sheng)
}
#if LANG_CXX11
void contact_info::set_sheng(::std::string&& value) {
  set_has_sheng();
  sheng_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contact_info.sheng)
}
#endif
void contact_info::set_sheng(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sheng();
  sheng_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contact_info.sheng)
}
void contact_info::set_sheng(const char* value, size_t size) {
  set_has_sheng();
  sheng_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contact_info.sheng)
}
::std::string* contact_info::mutable_sheng() {
  set_has_sheng();
  // @@protoc_insertion_point(field_mutable:contact_info.sheng)
  return sheng_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* contact_info::release_sheng() {
  // @@protoc_insertion_point(field_release:contact_info.sheng)
  clear_has_sheng();
  return sheng_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void contact_info::set_allocated_sheng(::std::string* sheng) {
  if (sheng != NULL) {
    set_has_sheng();
  } else {
    clear_has_sheng();
  }
  sheng_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sheng);
  // @@protoc_insertion_point(field_set_allocated:contact_info.sheng)
}

// optional string shi = 20;
bool contact_info::has_shi() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void contact_info::set_has_shi() {
  _has_bits_[0] |= 0x00000008u;
}
void contact_info::clear_has_shi() {
  _has_bits_[0] &= ~0x00000008u;
}
void contact_info::clear_shi() {
  shi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_shi();
}
const ::std::string& contact_info::shi() const {
  // @@protoc_insertion_point(field_get:contact_info.shi)
  return shi_.GetNoArena();
}
void contact_info::set_shi(const ::std::string& value) {
  set_has_shi();
  shi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:contact_info.shi)
}
#if LANG_CXX11
void contact_info::set_shi(::std::string&& value) {
  set_has_shi();
  shi_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contact_info.shi)
}
#endif
void contact_info::set_shi(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_shi();
  shi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contact_info.shi)
}
void contact_info::set_shi(const char* value, size_t size) {
  set_has_shi();
  shi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contact_info.shi)
}
::std::string* contact_info::mutable_shi() {
  set_has_shi();
  // @@protoc_insertion_point(field_mutable:contact_info.shi)
  return shi_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* contact_info::release_shi() {
  // @@protoc_insertion_point(field_release:contact_info.shi)
  clear_has_shi();
  return shi_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void contact_info::set_allocated_shi(::std::string* shi) {
  if (shi != NULL) {
    set_has_shi();
  } else {
    clear_has_shi();
  }
  shi_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), shi);
  // @@protoc_insertion_point(field_set_allocated:contact_info.shi)
}

// optional string qianming = 21;
bool contact_info::has_qianming() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void contact_info::set_has_qianming() {
  _has_bits_[0] |= 0x00000010u;
}
void contact_info::clear_has_qianming() {
  _has_bits_[0] &= ~0x00000010u;
}
void contact_info::clear_qianming() {
  qianming_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_qianming();
}
const ::std::string& contact_info::qianming() const {
  // @@protoc_insertion_point(field_get:contact_info.qianming)
  return qianming_.GetNoArena();
}
void contact_info::set_qianming(const ::std::string& value) {
  set_has_qianming();
  qianming_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:contact_info.qianming)
}
#if LANG_CXX11
void contact_info::set_qianming(::std::string&& value) {
  set_has_qianming();
  qianming_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contact_info.qianming)
}
#endif
void contact_info::set_qianming(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_qianming();
  qianming_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contact_info.qianming)
}
void contact_info::set_qianming(const char* value, size_t size) {
  set_has_qianming();
  qianming_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contact_info.qianming)
}
::std::string* contact_info::mutable_qianming() {
  set_has_qianming();
  // @@protoc_insertion_point(field_mutable:contact_info.qianming)
  return qianming_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* contact_info::release_qianming() {
  // @@protoc_insertion_point(field_release:contact_info.qianming)
  clear_has_qianming();
  return qianming_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void contact_info::set_allocated_qianming(::std::string* qianming) {
  if (qianming != NULL) {
    set_has_qianming();
  } else {
    clear_has_qianming();
  }
  qianming_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), qianming);
  // @@protoc_insertion_point(field_set_allocated:contact_info.qianming)
}

// optional int32 tag22 = 22;
bool contact_info::has_tag22() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void contact_info::set_has_tag22() {
  _has_bits_[1] |= 0x00000002u;
}
void contact_info::clear_has_tag22() {
  _has_bits_[1] &= ~0x00000002u;
}
void contact_info::clear_tag22() {
  tag22_ = 0;
  clear_has_tag22();
}
::google::protobuf::int32 contact_info::tag22() const {
  // @@protoc_insertion_point(field_get:contact_info.tag22)
  return tag22_;
}
void contact_info::set_tag22(::google::protobuf::int32 value) {
  set_has_tag22();
  tag22_ = value;
  // @@protoc_insertion_point(field_set:contact_info.tag22)
}

// optional int32 tag23 = 23;
bool contact_info::has_tag23() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void contact_info::set_has_tag23() {
  _has_bits_[1] |= 0x00000004u;
}
void contact_info::clear_has_tag23() {
  _has_bits_[1] &= ~0x00000004u;
}
void contact_info::clear_tag23() {
  tag23_ = 0;
  clear_has_tag23();
}
::google::protobuf::int32 contact_info::tag23() const {
  // @@protoc_insertion_point(field_get:contact_info.tag23)
  return tag23_;
}
void contact_info::set_tag23(::google::protobuf::int32 value) {
  set_has_tag23();
  tag23_ = value;
  // @@protoc_insertion_point(field_set:contact_info.tag23)
}

// optional int32 register_body_type = 24;
bool contact_info::has_register_body_type() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void contact_info::set_has_register_body_type() {
  _has_bits_[1] |= 0x00000008u;
}
void contact_info::clear_has_register_body_type() {
  _has_bits_[1] &= ~0x00000008u;
}
void contact_info::clear_register_body_type() {
  register_body_type_ = 0;
  clear_has_register_body_type();
}
::google::protobuf::int32 contact_info::register_body_type() const {
  // @@protoc_insertion_point(field_get:contact_info.register_body_type)
  return register_body_type_;
}
void contact_info::set_register_body_type(::google::protobuf::int32 value) {
  set_has_register_body_type();
  register_body_type_ = value;
  // @@protoc_insertion_point(field_set:contact_info.register_body_type)
}

// optional string register_body = 25;
bool contact_info::has_register_body() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void contact_info::set_has_register_body() {
  _has_bits_[0] |= 0x00000020u;
}
void contact_info::clear_has_register_body() {
  _has_bits_[0] &= ~0x00000020u;
}
void contact_info::clear_register_body() {
  register_body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_register_body();
}
const ::std::string& contact_info::register_body() const {
  // @@protoc_insertion_point(field_get:contact_info.register_body)
  return register_body_.GetNoArena();
}
void contact_info::set_register_body(const ::std::string& value) {
  set_has_register_body();
  register_body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:contact_info.register_body)
}
#if LANG_CXX11
void contact_info::set_register_body(::std::string&& value) {
  set_has_register_body();
  register_body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contact_info.register_body)
}
#endif
void contact_info::set_register_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_register_body();
  register_body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contact_info.register_body)
}
void contact_info::set_register_body(const char* value, size_t size) {
  set_has_register_body();
  register_body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contact_info.register_body)
}
::std::string* contact_info::mutable_register_body() {
  set_has_register_body();
  // @@protoc_insertion_point(field_mutable:contact_info.register_body)
  return register_body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* contact_info::release_register_body() {
  // @@protoc_insertion_point(field_release:contact_info.register_body)
  clear_has_register_body();
  return register_body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void contact_info::set_allocated_register_body(::std::string* register_body) {
  if (register_body != NULL) {
    set_has_register_body();
  } else {
    clear_has_register_body();
  }
  register_body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), register_body);
  // @@protoc_insertion_point(field_set_allocated:contact_info.register_body)
}

// optional int32 tag26 = 26;
bool contact_info::has_tag26() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void contact_info::set_has_tag26() {
  _has_bits_[1] |= 0x00000010u;
}
void contact_info::clear_has_tag26() {
  _has_bits_[1] &= ~0x00000010u;
}
void contact_info::clear_tag26() {
  tag26_ = 0;
  clear_has_tag26();
}
::google::protobuf::int32 contact_info::tag26() const {
  // @@protoc_insertion_point(field_get:contact_info.tag26)
  return tag26_;
}
void contact_info::set_tag26(::google::protobuf::int32 value) {
  set_has_tag26();
  tag26_ = value;
  // @@protoc_insertion_point(field_set:contact_info.tag26)
}

// optional int32 src = 27;
bool contact_info::has_src() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void contact_info::set_has_src() {
  _has_bits_[1] |= 0x00000020u;
}
void contact_info::clear_has_src() {
  _has_bits_[1] &= ~0x00000020u;
}
void contact_info::clear_src() {
  src_ = 0;
  clear_has_src();
}
::google::protobuf::int32 contact_info::src() const {
  // @@protoc_insertion_point(field_get:contact_info.src)
  return src_;
}
void contact_info::set_src(::google::protobuf::int32 value) {
  set_has_src();
  src_ = value;
  // @@protoc_insertion_point(field_set:contact_info.src)
}

// optional string lastMsgTime = 29;
bool contact_info::has_lastmsgtime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void contact_info::set_has_lastmsgtime() {
  _has_bits_[0] |= 0x00000040u;
}
void contact_info::clear_has_lastmsgtime() {
  _has_bits_[0] &= ~0x00000040u;
}
void contact_info::clear_lastmsgtime() {
  lastmsgtime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_lastmsgtime();
}
const ::std::string& contact_info::lastmsgtime() const {
  // @@protoc_insertion_point(field_get:contact_info.lastMsgTime)
  return lastmsgtime_.GetNoArena();
}
void contact_info::set_lastmsgtime(const ::std::string& value) {
  set_has_lastmsgtime();
  lastmsgtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:contact_info.lastMsgTime)
}
#if LANG_CXX11
void contact_info::set_lastmsgtime(::std::string&& value) {
  set_has_lastmsgtime();
  lastmsgtime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contact_info.lastMsgTime)
}
#endif
void contact_info::set_lastmsgtime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_lastmsgtime();
  lastmsgtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contact_info.lastMsgTime)
}
void contact_info::set_lastmsgtime(const char* value, size_t size) {
  set_has_lastmsgtime();
  lastmsgtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contact_info.lastMsgTime)
}
::std::string* contact_info::mutable_lastmsgtime() {
  set_has_lastmsgtime();
  // @@protoc_insertion_point(field_mutable:contact_info.lastMsgTime)
  return lastmsgtime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* contact_info::release_lastmsgtime() {
  // @@protoc_insertion_point(field_release:contact_info.lastMsgTime)
  clear_has_lastmsgtime();
  return lastmsgtime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void contact_info::set_allocated_lastmsgtime(::std::string* lastmsgtime) {
  if (lastmsgtime != NULL) {
    set_has_lastmsgtime();
  } else {
    clear_has_lastmsgtime();
  }
  lastmsgtime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lastmsgtime);
  // @@protoc_insertion_point(field_set_allocated:contact_info.lastMsgTime)
}

// optional string alias = 30;
bool contact_info::has_alias() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void contact_info::set_has_alias() {
  _has_bits_[0] |= 0x00000080u;
}
void contact_info::clear_has_alias() {
  _has_bits_[0] &= ~0x00000080u;
}
void contact_info::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_alias();
}
const ::std::string& contact_info::alias() const {
  // @@protoc_insertion_point(field_get:contact_info.alias)
  return alias_.GetNoArena();
}
void contact_info::set_alias(const ::std::string& value) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:contact_info.alias)
}
#if LANG_CXX11
void contact_info::set_alias(::std::string&& value) {
  set_has_alias();
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contact_info.alias)
}
#endif
void contact_info::set_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contact_info.alias)
}
void contact_info::set_alias(const char* value, size_t size) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contact_info.alias)
}
::std::string* contact_info::mutable_alias() {
  set_has_alias();
  // @@protoc_insertion_point(field_mutable:contact_info.alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* contact_info::release_alias() {
  // @@protoc_insertion_point(field_release:contact_info.alias)
  clear_has_alias();
  return alias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void contact_info::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    set_has_alias();
  } else {
    clear_has_alias();
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:contact_info.alias)
}

// optional string chatroomOwnerWxid = 31;
bool contact_info::has_chatroomownerwxid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void contact_info::set_has_chatroomownerwxid() {
  _has_bits_[0] |= 0x00000100u;
}
void contact_info::clear_has_chatroomownerwxid() {
  _has_bits_[0] &= ~0x00000100u;
}
void contact_info::clear_chatroomownerwxid() {
  chatroomownerwxid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chatroomownerwxid();
}
const ::std::string& contact_info::chatroomownerwxid() const {
  // @@protoc_insertion_point(field_get:contact_info.chatroomOwnerWxid)
  return chatroomownerwxid_.GetNoArena();
}
void contact_info::set_chatroomownerwxid(const ::std::string& value) {
  set_has_chatroomownerwxid();
  chatroomownerwxid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:contact_info.chatroomOwnerWxid)
}
#if LANG_CXX11
void contact_info::set_chatroomownerwxid(::std::string&& value) {
  set_has_chatroomownerwxid();
  chatroomownerwxid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contact_info.chatroomOwnerWxid)
}
#endif
void contact_info::set_chatroomownerwxid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_chatroomownerwxid();
  chatroomownerwxid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contact_info.chatroomOwnerWxid)
}
void contact_info::set_chatroomownerwxid(const char* value, size_t size) {
  set_has_chatroomownerwxid();
  chatroomownerwxid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contact_info.chatroomOwnerWxid)
}
::std::string* contact_info::mutable_chatroomownerwxid() {
  set_has_chatroomownerwxid();
  // @@protoc_insertion_point(field_mutable:contact_info.chatroomOwnerWxid)
  return chatroomownerwxid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* contact_info::release_chatroomownerwxid() {
  // @@protoc_insertion_point(field_release:contact_info.chatroomOwnerWxid)
  clear_has_chatroomownerwxid();
  return chatroomownerwxid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void contact_info::set_allocated_chatroomownerwxid(::std::string* chatroomownerwxid) {
  if (chatroomownerwxid != NULL) {
    set_has_chatroomownerwxid();
  } else {
    clear_has_chatroomownerwxid();
  }
  chatroomownerwxid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chatroomownerwxid);
  // @@protoc_insertion_point(field_set_allocated:contact_info.chatroomOwnerWxid)
}

// optional int32 tag33 = 33;
bool contact_info::has_tag33() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
void contact_info::set_has_tag33() {
  _has_bits_[1] |= 0x00000040u;
}
void contact_info::clear_has_tag33() {
  _has_bits_[1] &= ~0x00000040u;
}
void contact_info::clear_tag33() {
  tag33_ = 0;
  clear_has_tag33();
}
::google::protobuf::int32 contact_info::tag33() const {
  // @@protoc_insertion_point(field_get:contact_info.tag33)
  return tag33_;
}
void contact_info::set_tag33(::google::protobuf::int32 value) {
  set_has_tag33();
  tag33_ = value;
  // @@protoc_insertion_point(field_set:contact_info.tag33)
}

// optional int32 tag34 = 34;
bool contact_info::has_tag34() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
void contact_info::set_has_tag34() {
  _has_bits_[1] |= 0x00000080u;
}
void contact_info::clear_has_tag34() {
  _has_bits_[1] &= ~0x00000080u;
}
void contact_info::clear_tag34() {
  tag34_ = 0;
  clear_has_tag34();
}
::google::protobuf::int32 contact_info::tag34() const {
  // @@protoc_insertion_point(field_get:contact_info.tag34)
  return tag34_;
}
void contact_info::set_tag34(::google::protobuf::int32 value) {
  set_has_tag34();
  tag34_ = value;
  // @@protoc_insertion_point(field_set:contact_info.tag34)
}

// optional int32 tag35 = 35;
bool contact_info::has_tag35() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
void contact_info::set_has_tag35() {
  _has_bits_[1] |= 0x00000100u;
}
void contact_info::clear_has_tag35() {
  _has_bits_[1] &= ~0x00000100u;
}
void contact_info::clear_tag35() {
  tag35_ = 0;
  clear_has_tag35();
}
::google::protobuf::int32 contact_info::tag35() const {
  // @@protoc_insertion_point(field_get:contact_info.tag35)
  return tag35_;
}
void contact_info::set_tag35(::google::protobuf::int32 value) {
  set_has_tag35();
  tag35_ = value;
  // @@protoc_insertion_point(field_set:contact_info.tag35)
}

// optional bytes tag37 = 37;
bool contact_info::has_tag37() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void contact_info::set_has_tag37() {
  _has_bits_[0] |= 0x00000200u;
}
void contact_info::clear_has_tag37() {
  _has_bits_[0] &= ~0x00000200u;
}
void contact_info::clear_tag37() {
  tag37_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tag37();
}
const ::std::string& contact_info::tag37() const {
  // @@protoc_insertion_point(field_get:contact_info.tag37)
  return tag37_.GetNoArena();
}
void contact_info::set_tag37(const ::std::string& value) {
  set_has_tag37();
  tag37_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:contact_info.tag37)
}
#if LANG_CXX11
void contact_info::set_tag37(::std::string&& value) {
  set_has_tag37();
  tag37_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contact_info.tag37)
}
#endif
void contact_info::set_tag37(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tag37();
  tag37_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contact_info.tag37)
}
void contact_info::set_tag37(const void* value, size_t size) {
  set_has_tag37();
  tag37_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contact_info.tag37)
}
::std::string* contact_info::mutable_tag37() {
  set_has_tag37();
  // @@protoc_insertion_point(field_mutable:contact_info.tag37)
  return tag37_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* contact_info::release_tag37() {
  // @@protoc_insertion_point(field_release:contact_info.tag37)
  clear_has_tag37();
  return tag37_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void contact_info::set_allocated_tag37(::std::string* tag37) {
  if (tag37 != NULL) {
    set_has_tag37();
  } else {
    clear_has_tag37();
  }
  tag37_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag37);
  // @@protoc_insertion_point(field_set_allocated:contact_info.tag37)
}

// optional string country = 38;
bool contact_info::has_country() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void contact_info::set_has_country() {
  _has_bits_[0] |= 0x00000400u;
}
void contact_info::clear_has_country() {
  _has_bits_[0] &= ~0x00000400u;
}
void contact_info::clear_country() {
  country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country();
}
const ::std::string& contact_info::country() const {
  // @@protoc_insertion_point(field_get:contact_info.country)
  return country_.GetNoArena();
}
void contact_info::set_country(const ::std::string& value) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:contact_info.country)
}
#if LANG_CXX11
void contact_info::set_country(::std::string&& value) {
  set_has_country();
  country_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contact_info.country)
}
#endif
void contact_info::set_country(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contact_info.country)
}
void contact_info::set_country(const char* value, size_t size) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contact_info.country)
}
::std::string* contact_info::mutable_country() {
  set_has_country();
  // @@protoc_insertion_point(field_mutable:contact_info.country)
  return country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* contact_info::release_country() {
  // @@protoc_insertion_point(field_release:contact_info.country)
  clear_has_country();
  return country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void contact_info::set_allocated_country(::std::string* country) {
  if (country != NULL) {
    set_has_country();
  } else {
    clear_has_country();
  }
  country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:contact_info.country)
}

// optional string avatar_big = 39;
bool contact_info::has_avatar_big() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void contact_info::set_has_avatar_big() {
  _has_bits_[0] |= 0x00000800u;
}
void contact_info::clear_has_avatar_big() {
  _has_bits_[0] &= ~0x00000800u;
}
void contact_info::clear_avatar_big() {
  avatar_big_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_avatar_big();
}
const ::std::string& contact_info::avatar_big() const {
  // @@protoc_insertion_point(field_get:contact_info.avatar_big)
  return avatar_big_.GetNoArena();
}
void contact_info::set_avatar_big(const ::std::string& value) {
  set_has_avatar_big();
  avatar_big_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:contact_info.avatar_big)
}
#if LANG_CXX11
void contact_info::set_avatar_big(::std::string&& value) {
  set_has_avatar_big();
  avatar_big_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contact_info.avatar_big)
}
#endif
void contact_info::set_avatar_big(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_avatar_big();
  avatar_big_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contact_info.avatar_big)
}
void contact_info::set_avatar_big(const char* value, size_t size) {
  set_has_avatar_big();
  avatar_big_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contact_info.avatar_big)
}
::std::string* contact_info::mutable_avatar_big() {
  set_has_avatar_big();
  // @@protoc_insertion_point(field_mutable:contact_info.avatar_big)
  return avatar_big_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* contact_info::release_avatar_big() {
  // @@protoc_insertion_point(field_release:contact_info.avatar_big)
  clear_has_avatar_big();
  return avatar_big_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void contact_info::set_allocated_avatar_big(::std::string* avatar_big) {
  if (avatar_big != NULL) {
    set_has_avatar_big();
  } else {
    clear_has_avatar_big();
  }
  avatar_big_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), avatar_big);
  // @@protoc_insertion_point(field_set_allocated:contact_info.avatar_big)
}

// optional string avatar_small = 40;
bool contact_info::has_avatar_small() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void contact_info::set_has_avatar_small() {
  _has_bits_[0] |= 0x00001000u;
}
void contact_info::clear_has_avatar_small() {
  _has_bits_[0] &= ~0x00001000u;
}
void contact_info::clear_avatar_small() {
  avatar_small_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_avatar_small();
}
const ::std::string& contact_info::avatar_small() const {
  // @@protoc_insertion_point(field_get:contact_info.avatar_small)
  return avatar_small_.GetNoArena();
}
void contact_info::set_avatar_small(const ::std::string& value) {
  set_has_avatar_small();
  avatar_small_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:contact_info.avatar_small)
}
#if LANG_CXX11
void contact_info::set_avatar_small(::std::string&& value) {
  set_has_avatar_small();
  avatar_small_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contact_info.avatar_small)
}
#endif
void contact_info::set_avatar_small(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_avatar_small();
  avatar_small_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contact_info.avatar_small)
}
void contact_info::set_avatar_small(const char* value, size_t size) {
  set_has_avatar_small();
  avatar_small_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contact_info.avatar_small)
}
::std::string* contact_info::mutable_avatar_small() {
  set_has_avatar_small();
  // @@protoc_insertion_point(field_mutable:contact_info.avatar_small)
  return avatar_small_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* contact_info::release_avatar_small() {
  // @@protoc_insertion_point(field_release:contact_info.avatar_small)
  clear_has_avatar_small();
  return avatar_small_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void contact_info::set_allocated_avatar_small(::std::string* avatar_small) {
  if (avatar_small != NULL) {
    set_has_avatar_small();
  } else {
    clear_has_avatar_small();
  }
  avatar_small_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), avatar_small);
  // @@protoc_insertion_point(field_set_allocated:contact_info.avatar_small)
}

// optional bytes tag42 = 42;
bool contact_info::has_tag42() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void contact_info::set_has_tag42() {
  _has_bits_[0] |= 0x00002000u;
}
void contact_info::clear_has_tag42() {
  _has_bits_[0] &= ~0x00002000u;
}
void contact_info::clear_tag42() {
  tag42_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tag42();
}
const ::std::string& contact_info::tag42() const {
  // @@protoc_insertion_point(field_get:contact_info.tag42)
  return tag42_.GetNoArena();
}
void contact_info::set_tag42(const ::std::string& value) {
  set_has_tag42();
  tag42_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:contact_info.tag42)
}
#if LANG_CXX11
void contact_info::set_tag42(::std::string&& value) {
  set_has_tag42();
  tag42_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contact_info.tag42)
}
#endif
void contact_info::set_tag42(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tag42();
  tag42_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contact_info.tag42)
}
void contact_info::set_tag42(const void* value, size_t size) {
  set_has_tag42();
  tag42_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contact_info.tag42)
}
::std::string* contact_info::mutable_tag42() {
  set_has_tag42();
  // @@protoc_insertion_point(field_mutable:contact_info.tag42)
  return tag42_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* contact_info::release_tag42() {
  // @@protoc_insertion_point(field_release:contact_info.tag42)
  clear_has_tag42();
  return tag42_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void contact_info::set_allocated_tag42(::std::string* tag42) {
  if (tag42 != NULL) {
    set_has_tag42();
  } else {
    clear_has_tag42();
  }
  tag42_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag42);
  // @@protoc_insertion_point(field_set_allocated:contact_info.tag42)
}

// optional string v1_name = 45;
bool contact_info::has_v1_name() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void contact_info::set_has_v1_name() {
  _has_bits_[0] |= 0x00004000u;
}
void contact_info::clear_has_v1_name() {
  _has_bits_[0] &= ~0x00004000u;
}
void contact_info::clear_v1_name() {
  v1_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_v1_name();
}
const ::std::string& contact_info::v1_name() const {
  // @@protoc_insertion_point(field_get:contact_info.v1_name)
  return v1_name_.GetNoArena();
}
void contact_info::set_v1_name(const ::std::string& value) {
  set_has_v1_name();
  v1_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:contact_info.v1_name)
}
#if LANG_CXX11
void contact_info::set_v1_name(::std::string&& value) {
  set_has_v1_name();
  v1_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contact_info.v1_name)
}
#endif
void contact_info::set_v1_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_v1_name();
  v1_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contact_info.v1_name)
}
void contact_info::set_v1_name(const char* value, size_t size) {
  set_has_v1_name();
  v1_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contact_info.v1_name)
}
::std::string* contact_info::mutable_v1_name() {
  set_has_v1_name();
  // @@protoc_insertion_point(field_mutable:contact_info.v1_name)
  return v1_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* contact_info::release_v1_name() {
  // @@protoc_insertion_point(field_release:contact_info.v1_name)
  clear_has_v1_name();
  return v1_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void contact_info::set_allocated_v1_name(::std::string* v1_name) {
  if (v1_name != NULL) {
    set_has_v1_name();
  } else {
    clear_has_v1_name();
  }
  v1_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), v1_name);
  // @@protoc_insertion_point(field_set_allocated:contact_info.v1_name)
}

// optional bytes tag50 = 50;
bool contact_info::has_tag50() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void contact_info::set_has_tag50() {
  _has_bits_[0] |= 0x00008000u;
}
void contact_info::clear_has_tag50() {
  _has_bits_[0] &= ~0x00008000u;
}
void contact_info::clear_tag50() {
  tag50_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tag50();
}
const ::std::string& contact_info::tag50() const {
  // @@protoc_insertion_point(field_get:contact_info.tag50)
  return tag50_.GetNoArena();
}
void contact_info::set_tag50(const ::std::string& value) {
  set_has_tag50();
  tag50_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:contact_info.tag50)
}
#if LANG_CXX11
void contact_info::set_tag50(::std::string&& value) {
  set_has_tag50();
  tag50_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contact_info.tag50)
}
#endif
void contact_info::set_tag50(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tag50();
  tag50_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contact_info.tag50)
}
void contact_info::set_tag50(const void* value, size_t size) {
  set_has_tag50();
  tag50_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contact_info.tag50)
}
::std::string* contact_info::mutable_tag50() {
  set_has_tag50();
  // @@protoc_insertion_point(field_mutable:contact_info.tag50)
  return tag50_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* contact_info::release_tag50() {
  // @@protoc_insertion_point(field_release:contact_info.tag50)
  clear_has_tag50();
  return tag50_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void contact_info::set_allocated_tag50(::std::string* tag50) {
  if (tag50 != NULL) {
    set_has_tag50();
  } else {
    clear_has_tag50();
  }
  tag50_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag50);
  // @@protoc_insertion_point(field_set_allocated:contact_info.tag50)
}

// optional int32 chatroom_serverVer = 53;
bool contact_info::has_chatroom_serverver() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
void contact_info::set_has_chatroom_serverver() {
  _has_bits_[1] |= 0x00000200u;
}
void contact_info::clear_has_chatroom_serverver() {
  _has_bits_[1] &= ~0x00000200u;
}
void contact_info::clear_chatroom_serverver() {
  chatroom_serverver_ = 0;
  clear_has_chatroom_serverver();
}
::google::protobuf::int32 contact_info::chatroom_serverver() const {
  // @@protoc_insertion_point(field_get:contact_info.chatroom_serverVer)
  return chatroom_serverver_;
}
void contact_info::set_chatroom_serverver(::google::protobuf::int32 value) {
  set_has_chatroom_serverver();
  chatroom_serverver_ = value;
  // @@protoc_insertion_point(field_set:contact_info.chatroom_serverVer)
}

// optional int32 chatroom_max_member = 55;
bool contact_info::has_chatroom_max_member() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
void contact_info::set_has_chatroom_max_member() {
  _has_bits_[1] |= 0x00000400u;
}
void contact_info::clear_has_chatroom_max_member() {
  _has_bits_[1] &= ~0x00000400u;
}
void contact_info::clear_chatroom_max_member() {
  chatroom_max_member_ = 0;
  clear_has_chatroom_max_member();
}
::google::protobuf::int32 contact_info::chatroom_max_member() const {
  // @@protoc_insertion_point(field_get:contact_info.chatroom_max_member)
  return chatroom_max_member_;
}
void contact_info::set_chatroom_max_member(::google::protobuf::int32 value) {
  set_has_chatroom_max_member();
  chatroom_max_member_ = value;
  // @@protoc_insertion_point(field_set:contact_info.chatroom_max_member)
}

// optional int32 tag56 = 56;
bool contact_info::has_tag56() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
void contact_info::set_has_tag56() {
  _has_bits_[1] |= 0x00000800u;
}
void contact_info::clear_has_tag56() {
  _has_bits_[1] &= ~0x00000800u;
}
void contact_info::clear_tag56() {
  tag56_ = 0;
  clear_has_tag56();
}
::google::protobuf::int32 contact_info::tag56() const {
  // @@protoc_insertion_point(field_get:contact_info.tag56)
  return tag56_;
}
void contact_info::set_tag56(::google::protobuf::int32 value) {
  set_has_tag56();
  tag56_ = value;
  // @@protoc_insertion_point(field_set:contact_info.tag56)
}

// optional .contact_info.GroupMemberList group_member_list = 57;
bool contact_info::has_group_member_list() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void contact_info::set_has_group_member_list() {
  _has_bits_[0] |= 0x01000000u;
}
void contact_info::clear_has_group_member_list() {
  _has_bits_[0] &= ~0x01000000u;
}
void contact_info::clear_group_member_list() {
  if (group_member_list_ != NULL) group_member_list_->::contact_info_GroupMemberList::Clear();
  clear_has_group_member_list();
}
const ::contact_info_GroupMemberList& contact_info::group_member_list() const {
  // @@protoc_insertion_point(field_get:contact_info.group_member_list)
  return group_member_list_ != NULL ? *group_member_list_
                         : *::contact_info_GroupMemberList::internal_default_instance();
}
::contact_info_GroupMemberList* contact_info::mutable_group_member_list() {
  set_has_group_member_list();
  if (group_member_list_ == NULL) {
    group_member_list_ = new ::contact_info_GroupMemberList;
  }
  // @@protoc_insertion_point(field_mutable:contact_info.group_member_list)
  return group_member_list_;
}
::contact_info_GroupMemberList* contact_info::release_group_member_list() {
  // @@protoc_insertion_point(field_release:contact_info.group_member_list)
  clear_has_group_member_list();
  ::contact_info_GroupMemberList* temp = group_member_list_;
  group_member_list_ = NULL;
  return temp;
}
void contact_info::set_allocated_group_member_list(::contact_info_GroupMemberList* group_member_list) {
  delete group_member_list_;
  group_member_list_ = group_member_list;
  if (group_member_list) {
    set_has_group_member_list();
  } else {
    clear_has_group_member_list();
  }
  // @@protoc_insertion_point(field_set_allocated:contact_info.group_member_list)
}

// optional int32 tag58 = 58;
bool contact_info::has_tag58() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
void contact_info::set_has_tag58() {
  _has_bits_[1] |= 0x00001000u;
}
void contact_info::clear_has_tag58() {
  _has_bits_[1] &= ~0x00001000u;
}
void contact_info::clear_tag58() {
  tag58_ = 0;
  clear_has_tag58();
}
::google::protobuf::int32 contact_info::tag58() const {
  // @@protoc_insertion_point(field_get:contact_info.tag58)
  return tag58_;
}
void contact_info::set_tag58(::google::protobuf::int32 value) {
  set_has_tag58();
  tag58_ = value;
  // @@protoc_insertion_point(field_set:contact_info.tag58)
}

// optional bytes tag62 = 62;
bool contact_info::has_tag62() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void contact_info::set_has_tag62() {
  _has_bits_[0] |= 0x00010000u;
}
void contact_info::clear_has_tag62() {
  _has_bits_[0] &= ~0x00010000u;
}
void contact_info::clear_tag62() {
  tag62_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tag62();
}
const ::std::string& contact_info::tag62() const {
  // @@protoc_insertion_point(field_get:contact_info.tag62)
  return tag62_.GetNoArena();
}
void contact_info::set_tag62(const ::std::string& value) {
  set_has_tag62();
  tag62_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:contact_info.tag62)
}
#if LANG_CXX11
void contact_info::set_tag62(::std::string&& value) {
  set_has_tag62();
  tag62_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contact_info.tag62)
}
#endif
void contact_info::set_tag62(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tag62();
  tag62_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contact_info.tag62)
}
void contact_info::set_tag62(const void* value, size_t size) {
  set_has_tag62();
  tag62_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contact_info.tag62)
}
::std::string* contact_info::mutable_tag62() {
  set_has_tag62();
  // @@protoc_insertion_point(field_mutable:contact_info.tag62)
  return tag62_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* contact_info::release_tag62() {
  // @@protoc_insertion_point(field_release:contact_info.tag62)
  clear_has_tag62();
  return tag62_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void contact_info::set_allocated_tag62(::std::string* tag62) {
  if (tag62 != NULL) {
    set_has_tag62();
  } else {
    clear_has_tag62();
  }
  tag62_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag62);
  // @@protoc_insertion_point(field_set_allocated:contact_info.tag62)
}

// optional int32 tag64 = 64;
bool contact_info::has_tag64() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
void contact_info::set_has_tag64() {
  _has_bits_[1] |= 0x00002000u;
}
void contact_info::clear_has_tag64() {
  _has_bits_[1] &= ~0x00002000u;
}
void contact_info::clear_tag64() {
  tag64_ = 0;
  clear_has_tag64();
}
::google::protobuf::int32 contact_info::tag64() const {
  // @@protoc_insertion_point(field_get:contact_info.tag64)
  return tag64_;
}
void contact_info::set_tag64(::google::protobuf::int32 value) {
  set_has_tag64();
  tag64_ = value;
  // @@protoc_insertion_point(field_set:contact_info.tag64)
}

// optional int32 tag65 = 65;
bool contact_info::has_tag65() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
void contact_info::set_has_tag65() {
  _has_bits_[1] |= 0x00004000u;
}
void contact_info::clear_has_tag65() {
  _has_bits_[1] &= ~0x00004000u;
}
void contact_info::clear_tag65() {
  tag65_ = 0;
  clear_has_tag65();
}
::google::protobuf::int32 contact_info::tag65() const {
  // @@protoc_insertion_point(field_get:contact_info.tag65)
  return tag65_;
}
void contact_info::set_tag65(::google::protobuf::int32 value) {
  set_has_tag65();
  tag65_ = value;
  // @@protoc_insertion_point(field_set:contact_info.tag65)
}

// optional int32 tag66 = 66;
bool contact_info::has_tag66() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
void contact_info::set_has_tag66() {
  _has_bits_[1] |= 0x00008000u;
}
void contact_info::clear_has_tag66() {
  _has_bits_[1] &= ~0x00008000u;
}
void contact_info::clear_tag66() {
  tag66_ = 0;
  clear_has_tag66();
}
::google::protobuf::int32 contact_info::tag66() const {
  // @@protoc_insertion_point(field_get:contact_info.tag66)
  return tag66_;
}
void contact_info::set_tag66(::google::protobuf::int32 value) {
  set_has_tag66();
  tag66_ = value;
  // @@protoc_insertion_point(field_set:contact_info.tag66)
}

// optional int32 tag67 = 67;
bool contact_info::has_tag67() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
void contact_info::set_has_tag67() {
  _has_bits_[1] |= 0x00010000u;
}
void contact_info::clear_has_tag67() {
  _has_bits_[1] &= ~0x00010000u;
}
void contact_info::clear_tag67() {
  tag67_ = 0;
  clear_has_tag67();
}
::google::protobuf::int32 contact_info::tag67() const {
  // @@protoc_insertion_point(field_get:contact_info.tag67)
  return tag67_;
}
void contact_info::set_tag67(::google::protobuf::int32 value) {
  set_has_tag67();
  tag67_ = value;
  // @@protoc_insertion_point(field_set:contact_info.tag67)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ManualAuthAccountRequest_AesKey::kLenFieldNumber;
const int ManualAuthAccountRequest_AesKey::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ManualAuthAccountRequest_AesKey::ManualAuthAccountRequest_AesKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ManualAuthAccountRequest.AesKey)
}
ManualAuthAccountRequest_AesKey::ManualAuthAccountRequest_AesKey(const ManualAuthAccountRequest_AesKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  len_ = from.len_;
  // @@protoc_insertion_point(copy_constructor:ManualAuthAccountRequest.AesKey)
}

void ManualAuthAccountRequest_AesKey::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  len_ = 0;
}

ManualAuthAccountRequest_AesKey::~ManualAuthAccountRequest_AesKey() {
  // @@protoc_insertion_point(destructor:ManualAuthAccountRequest.AesKey)
  SharedDtor();
}

void ManualAuthAccountRequest_AesKey::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ManualAuthAccountRequest_AesKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ManualAuthAccountRequest_AesKey::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ManualAuthAccountRequest_AesKey& ManualAuthAccountRequest_AesKey::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

ManualAuthAccountRequest_AesKey* ManualAuthAccountRequest_AesKey::New(::google::protobuf::Arena* arena) const {
  ManualAuthAccountRequest_AesKey* n = new ManualAuthAccountRequest_AesKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ManualAuthAccountRequest_AesKey::Clear() {
// @@protoc_insertion_point(message_clear_start:ManualAuthAccountRequest.AesKey)
  if (has_key()) {
    GOOGLE_DCHECK(!key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*key_.UnsafeRawStringPointer())->clear();
  }
  len_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ManualAuthAccountRequest_AesKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ManualAuthAccountRequest.AesKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 len = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_len();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &len_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ManualAuthAccountRequest.AesKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ManualAuthAccountRequest.AesKey)
  return false;
#undef DO_
}

void ManualAuthAccountRequest_AesKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ManualAuthAccountRequest.AesKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 len = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->len(), output);
  }

  // required bytes key = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ManualAuthAccountRequest.AesKey)
}

::google::protobuf::uint8* ManualAuthAccountRequest_AesKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ManualAuthAccountRequest.AesKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 len = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->len(), target);
  }

  // required bytes key = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ManualAuthAccountRequest.AesKey)
  return target;
}

size_t ManualAuthAccountRequest_AesKey::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ManualAuthAccountRequest.AesKey)
  size_t total_size = 0;

  if (has_key()) {
    // required bytes key = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  if (has_len()) {
    // required int32 len = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->len());
  }

  return total_size;
}
size_t ManualAuthAccountRequest_AesKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ManualAuthAccountRequest.AesKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes key = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());

    // required int32 len = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->len());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ManualAuthAccountRequest_AesKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ManualAuthAccountRequest.AesKey)
  GOOGLE_DCHECK_NE(&from, this);
  const ManualAuthAccountRequest_AesKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ManualAuthAccountRequest_AesKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ManualAuthAccountRequest.AesKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ManualAuthAccountRequest.AesKey)
    MergeFrom(*source);
  }
}

void ManualAuthAccountRequest_AesKey::MergeFrom(const ManualAuthAccountRequest_AesKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ManualAuthAccountRequest.AesKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      len_ = from.len_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ManualAuthAccountRequest_AesKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ManualAuthAccountRequest.AesKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManualAuthAccountRequest_AesKey::CopyFrom(const ManualAuthAccountRequest_AesKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ManualAuthAccountRequest.AesKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManualAuthAccountRequest_AesKey::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ManualAuthAccountRequest_AesKey::Swap(ManualAuthAccountRequest_AesKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ManualAuthAccountRequest_AesKey::InternalSwap(ManualAuthAccountRequest_AesKey* other) {
  key_.Swap(&other->key_);
  std::swap(len_, other->len_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ManualAuthAccountRequest_AesKey::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ManualAuthAccountRequest_AesKey

// required int32 len = 1;
bool ManualAuthAccountRequest_AesKey::has_len() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ManualAuthAccountRequest_AesKey::set_has_len() {
  _has_bits_[0] |= 0x00000002u;
}
void ManualAuthAccountRequest_AesKey::clear_has_len() {
  _has_bits_[0] &= ~0x00000002u;
}
void ManualAuthAccountRequest_AesKey::clear_len() {
  len_ = 0;
  clear_has_len();
}
::google::protobuf::int32 ManualAuthAccountRequest_AesKey::len() const {
  // @@protoc_insertion_point(field_get:ManualAuthAccountRequest.AesKey.len)
  return len_;
}
void ManualAuthAccountRequest_AesKey::set_len(::google::protobuf::int32 value) {
  set_has_len();
  len_ = value;
  // @@protoc_insertion_point(field_set:ManualAuthAccountRequest.AesKey.len)
}

// required bytes key = 2;
bool ManualAuthAccountRequest_AesKey::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ManualAuthAccountRequest_AesKey::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void ManualAuthAccountRequest_AesKey::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void ManualAuthAccountRequest_AesKey::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& ManualAuthAccountRequest_AesKey::key() const {
  // @@protoc_insertion_point(field_get:ManualAuthAccountRequest.AesKey.key)
  return key_.GetNoArena();
}
void ManualAuthAccountRequest_AesKey::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ManualAuthAccountRequest.AesKey.key)
}
#if LANG_CXX11
void ManualAuthAccountRequest_AesKey::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ManualAuthAccountRequest.AesKey.key)
}
#endif
void ManualAuthAccountRequest_AesKey::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ManualAuthAccountRequest.AesKey.key)
}
void ManualAuthAccountRequest_AesKey::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ManualAuthAccountRequest.AesKey.key)
}
::std::string* ManualAuthAccountRequest_AesKey::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:ManualAuthAccountRequest.AesKey.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManualAuthAccountRequest_AesKey::release_key() {
  // @@protoc_insertion_point(field_release:ManualAuthAccountRequest.AesKey.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManualAuthAccountRequest_AesKey::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:ManualAuthAccountRequest.AesKey.key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ManualAuthAccountRequest_Ecdh_EcdhKey::kLenFieldNumber;
const int ManualAuthAccountRequest_Ecdh_EcdhKey::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ManualAuthAccountRequest_Ecdh_EcdhKey::ManualAuthAccountRequest_Ecdh_EcdhKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ManualAuthAccountRequest.Ecdh.EcdhKey)
}
ManualAuthAccountRequest_Ecdh_EcdhKey::ManualAuthAccountRequest_Ecdh_EcdhKey(const ManualAuthAccountRequest_Ecdh_EcdhKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  len_ = from.len_;
  // @@protoc_insertion_point(copy_constructor:ManualAuthAccountRequest.Ecdh.EcdhKey)
}

void ManualAuthAccountRequest_Ecdh_EcdhKey::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  len_ = 0;
}

ManualAuthAccountRequest_Ecdh_EcdhKey::~ManualAuthAccountRequest_Ecdh_EcdhKey() {
  // @@protoc_insertion_point(destructor:ManualAuthAccountRequest.Ecdh.EcdhKey)
  SharedDtor();
}

void ManualAuthAccountRequest_Ecdh_EcdhKey::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ManualAuthAccountRequest_Ecdh_EcdhKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ManualAuthAccountRequest_Ecdh_EcdhKey::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ManualAuthAccountRequest_Ecdh_EcdhKey& ManualAuthAccountRequest_Ecdh_EcdhKey::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

ManualAuthAccountRequest_Ecdh_EcdhKey* ManualAuthAccountRequest_Ecdh_EcdhKey::New(::google::protobuf::Arena* arena) const {
  ManualAuthAccountRequest_Ecdh_EcdhKey* n = new ManualAuthAccountRequest_Ecdh_EcdhKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ManualAuthAccountRequest_Ecdh_EcdhKey::Clear() {
// @@protoc_insertion_point(message_clear_start:ManualAuthAccountRequest.Ecdh.EcdhKey)
  if (has_key()) {
    GOOGLE_DCHECK(!key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*key_.UnsafeRawStringPointer())->clear();
  }
  len_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ManualAuthAccountRequest_Ecdh_EcdhKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ManualAuthAccountRequest.Ecdh.EcdhKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 len = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_len();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &len_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ManualAuthAccountRequest.Ecdh.EcdhKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ManualAuthAccountRequest.Ecdh.EcdhKey)
  return false;
#undef DO_
}

void ManualAuthAccountRequest_Ecdh_EcdhKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ManualAuthAccountRequest.Ecdh.EcdhKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 len = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->len(), output);
  }

  // required bytes key = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ManualAuthAccountRequest.Ecdh.EcdhKey)
}

::google::protobuf::uint8* ManualAuthAccountRequest_Ecdh_EcdhKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ManualAuthAccountRequest.Ecdh.EcdhKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 len = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->len(), target);
  }

  // required bytes key = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ManualAuthAccountRequest.Ecdh.EcdhKey)
  return target;
}

size_t ManualAuthAccountRequest_Ecdh_EcdhKey::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ManualAuthAccountRequest.Ecdh.EcdhKey)
  size_t total_size = 0;

  if (has_key()) {
    // required bytes key = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  if (has_len()) {
    // required int32 len = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->len());
  }

  return total_size;
}
size_t ManualAuthAccountRequest_Ecdh_EcdhKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ManualAuthAccountRequest.Ecdh.EcdhKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes key = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());

    // required int32 len = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->len());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ManualAuthAccountRequest_Ecdh_EcdhKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ManualAuthAccountRequest.Ecdh.EcdhKey)
  GOOGLE_DCHECK_NE(&from, this);
  const ManualAuthAccountRequest_Ecdh_EcdhKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ManualAuthAccountRequest_Ecdh_EcdhKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ManualAuthAccountRequest.Ecdh.EcdhKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ManualAuthAccountRequest.Ecdh.EcdhKey)
    MergeFrom(*source);
  }
}

void ManualAuthAccountRequest_Ecdh_EcdhKey::MergeFrom(const ManualAuthAccountRequest_Ecdh_EcdhKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ManualAuthAccountRequest.Ecdh.EcdhKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      len_ = from.len_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ManualAuthAccountRequest_Ecdh_EcdhKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ManualAuthAccountRequest.Ecdh.EcdhKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManualAuthAccountRequest_Ecdh_EcdhKey::CopyFrom(const ManualAuthAccountRequest_Ecdh_EcdhKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ManualAuthAccountRequest.Ecdh.EcdhKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManualAuthAccountRequest_Ecdh_EcdhKey::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ManualAuthAccountRequest_Ecdh_EcdhKey::Swap(ManualAuthAccountRequest_Ecdh_EcdhKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ManualAuthAccountRequest_Ecdh_EcdhKey::InternalSwap(ManualAuthAccountRequest_Ecdh_EcdhKey* other) {
  key_.Swap(&other->key_);
  std::swap(len_, other->len_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ManualAuthAccountRequest_Ecdh_EcdhKey::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ManualAuthAccountRequest_Ecdh_EcdhKey

// required int32 len = 1;
bool ManualAuthAccountRequest_Ecdh_EcdhKey::has_len() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ManualAuthAccountRequest_Ecdh_EcdhKey::set_has_len() {
  _has_bits_[0] |= 0x00000002u;
}
void ManualAuthAccountRequest_Ecdh_EcdhKey::clear_has_len() {
  _has_bits_[0] &= ~0x00000002u;
}
void ManualAuthAccountRequest_Ecdh_EcdhKey::clear_len() {
  len_ = 0;
  clear_has_len();
}
::google::protobuf::int32 ManualAuthAccountRequest_Ecdh_EcdhKey::len() const {
  // @@protoc_insertion_point(field_get:ManualAuthAccountRequest.Ecdh.EcdhKey.len)
  return len_;
}
void ManualAuthAccountRequest_Ecdh_EcdhKey::set_len(::google::protobuf::int32 value) {
  set_has_len();
  len_ = value;
  // @@protoc_insertion_point(field_set:ManualAuthAccountRequest.Ecdh.EcdhKey.len)
}

// required bytes key = 2;
bool ManualAuthAccountRequest_Ecdh_EcdhKey::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ManualAuthAccountRequest_Ecdh_EcdhKey::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void ManualAuthAccountRequest_Ecdh_EcdhKey::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void ManualAuthAccountRequest_Ecdh_EcdhKey::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& ManualAuthAccountRequest_Ecdh_EcdhKey::key() const {
  // @@protoc_insertion_point(field_get:ManualAuthAccountRequest.Ecdh.EcdhKey.key)
  return key_.GetNoArena();
}
void ManualAuthAccountRequest_Ecdh_EcdhKey::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ManualAuthAccountRequest.Ecdh.EcdhKey.key)
}
#if LANG_CXX11
void ManualAuthAccountRequest_Ecdh_EcdhKey::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ManualAuthAccountRequest.Ecdh.EcdhKey.key)
}
#endif
void ManualAuthAccountRequest_Ecdh_EcdhKey::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ManualAuthAccountRequest.Ecdh.EcdhKey.key)
}
void ManualAuthAccountRequest_Ecdh_EcdhKey::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ManualAuthAccountRequest.Ecdh.EcdhKey.key)
}
::std::string* ManualAuthAccountRequest_Ecdh_EcdhKey::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:ManualAuthAccountRequest.Ecdh.EcdhKey.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManualAuthAccountRequest_Ecdh_EcdhKey::release_key() {
  // @@protoc_insertion_point(field_release:ManualAuthAccountRequest.Ecdh.EcdhKey.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManualAuthAccountRequest_Ecdh_EcdhKey::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:ManualAuthAccountRequest.Ecdh.EcdhKey.key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ManualAuthAccountRequest_Ecdh::kNidFieldNumber;
const int ManualAuthAccountRequest_Ecdh::kEcdhKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ManualAuthAccountRequest_Ecdh::ManualAuthAccountRequest_Ecdh()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ManualAuthAccountRequest.Ecdh)
}
ManualAuthAccountRequest_Ecdh::ManualAuthAccountRequest_Ecdh(const ManualAuthAccountRequest_Ecdh& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ecdhkey()) {
    ecdhkey_ = new ::ManualAuthAccountRequest_Ecdh_EcdhKey(*from.ecdhkey_);
  } else {
    ecdhkey_ = NULL;
  }
  nid_ = from.nid_;
  // @@protoc_insertion_point(copy_constructor:ManualAuthAccountRequest.Ecdh)
}

void ManualAuthAccountRequest_Ecdh::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ecdhkey_, 0, reinterpret_cast<char*>(&nid_) -
    reinterpret_cast<char*>(&ecdhkey_) + sizeof(nid_));
}

ManualAuthAccountRequest_Ecdh::~ManualAuthAccountRequest_Ecdh() {
  // @@protoc_insertion_point(destructor:ManualAuthAccountRequest.Ecdh)
  SharedDtor();
}

void ManualAuthAccountRequest_Ecdh::SharedDtor() {
  if (this != internal_default_instance()) {
    delete ecdhkey_;
  }
}

void ManualAuthAccountRequest_Ecdh::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ManualAuthAccountRequest_Ecdh::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ManualAuthAccountRequest_Ecdh& ManualAuthAccountRequest_Ecdh::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

ManualAuthAccountRequest_Ecdh* ManualAuthAccountRequest_Ecdh::New(::google::protobuf::Arena* arena) const {
  ManualAuthAccountRequest_Ecdh* n = new ManualAuthAccountRequest_Ecdh;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ManualAuthAccountRequest_Ecdh::Clear() {
// @@protoc_insertion_point(message_clear_start:ManualAuthAccountRequest.Ecdh)
  if (has_ecdhkey()) {
    GOOGLE_DCHECK(ecdhkey_ != NULL);
    ecdhkey_->::ManualAuthAccountRequest_Ecdh_EcdhKey::Clear();
  }
  nid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ManualAuthAccountRequest_Ecdh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ManualAuthAccountRequest.Ecdh)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_nid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ManualAuthAccountRequest.Ecdh.EcdhKey ecdhKey = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ecdhkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ManualAuthAccountRequest.Ecdh)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ManualAuthAccountRequest.Ecdh)
  return false;
#undef DO_
}

void ManualAuthAccountRequest_Ecdh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ManualAuthAccountRequest.Ecdh)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 nid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nid(), output);
  }

  // required .ManualAuthAccountRequest.Ecdh.EcdhKey ecdhKey = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->ecdhkey_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ManualAuthAccountRequest.Ecdh)
}

::google::protobuf::uint8* ManualAuthAccountRequest_Ecdh::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ManualAuthAccountRequest.Ecdh)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 nid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nid(), target);
  }

  // required .ManualAuthAccountRequest.Ecdh.EcdhKey ecdhKey = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->ecdhkey_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ManualAuthAccountRequest.Ecdh)
  return target;
}

size_t ManualAuthAccountRequest_Ecdh::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ManualAuthAccountRequest.Ecdh)
  size_t total_size = 0;

  if (has_ecdhkey()) {
    // required .ManualAuthAccountRequest.Ecdh.EcdhKey ecdhKey = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ecdhkey_);
  }

  if (has_nid()) {
    // required int32 nid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nid());
  }

  return total_size;
}
size_t ManualAuthAccountRequest_Ecdh::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ManualAuthAccountRequest.Ecdh)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .ManualAuthAccountRequest.Ecdh.EcdhKey ecdhKey = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ecdhkey_);

    // required int32 nid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ManualAuthAccountRequest_Ecdh::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ManualAuthAccountRequest.Ecdh)
  GOOGLE_DCHECK_NE(&from, this);
  const ManualAuthAccountRequest_Ecdh* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ManualAuthAccountRequest_Ecdh>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ManualAuthAccountRequest.Ecdh)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ManualAuthAccountRequest.Ecdh)
    MergeFrom(*source);
  }
}

void ManualAuthAccountRequest_Ecdh::MergeFrom(const ManualAuthAccountRequest_Ecdh& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ManualAuthAccountRequest.Ecdh)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_ecdhkey()->::ManualAuthAccountRequest_Ecdh_EcdhKey::MergeFrom(from.ecdhkey());
    }
    if (cached_has_bits & 0x00000002u) {
      nid_ = from.nid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ManualAuthAccountRequest_Ecdh::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ManualAuthAccountRequest.Ecdh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManualAuthAccountRequest_Ecdh::CopyFrom(const ManualAuthAccountRequest_Ecdh& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ManualAuthAccountRequest.Ecdh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManualAuthAccountRequest_Ecdh::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_ecdhkey()) {
    if (!this->ecdhkey_->IsInitialized()) return false;
  }
  return true;
}

void ManualAuthAccountRequest_Ecdh::Swap(ManualAuthAccountRequest_Ecdh* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ManualAuthAccountRequest_Ecdh::InternalSwap(ManualAuthAccountRequest_Ecdh* other) {
  std::swap(ecdhkey_, other->ecdhkey_);
  std::swap(nid_, other->nid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ManualAuthAccountRequest_Ecdh::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ManualAuthAccountRequest_Ecdh

// required int32 nid = 1;
bool ManualAuthAccountRequest_Ecdh::has_nid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ManualAuthAccountRequest_Ecdh::set_has_nid() {
  _has_bits_[0] |= 0x00000002u;
}
void ManualAuthAccountRequest_Ecdh::clear_has_nid() {
  _has_bits_[0] &= ~0x00000002u;
}
void ManualAuthAccountRequest_Ecdh::clear_nid() {
  nid_ = 0;
  clear_has_nid();
}
::google::protobuf::int32 ManualAuthAccountRequest_Ecdh::nid() const {
  // @@protoc_insertion_point(field_get:ManualAuthAccountRequest.Ecdh.nid)
  return nid_;
}
void ManualAuthAccountRequest_Ecdh::set_nid(::google::protobuf::int32 value) {
  set_has_nid();
  nid_ = value;
  // @@protoc_insertion_point(field_set:ManualAuthAccountRequest.Ecdh.nid)
}

// required .ManualAuthAccountRequest.Ecdh.EcdhKey ecdhKey = 2;
bool ManualAuthAccountRequest_Ecdh::has_ecdhkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ManualAuthAccountRequest_Ecdh::set_has_ecdhkey() {
  _has_bits_[0] |= 0x00000001u;
}
void ManualAuthAccountRequest_Ecdh::clear_has_ecdhkey() {
  _has_bits_[0] &= ~0x00000001u;
}
void ManualAuthAccountRequest_Ecdh::clear_ecdhkey() {
  if (ecdhkey_ != NULL) ecdhkey_->::ManualAuthAccountRequest_Ecdh_EcdhKey::Clear();
  clear_has_ecdhkey();
}
const ::ManualAuthAccountRequest_Ecdh_EcdhKey& ManualAuthAccountRequest_Ecdh::ecdhkey() const {
  // @@protoc_insertion_point(field_get:ManualAuthAccountRequest.Ecdh.ecdhKey)
  return ecdhkey_ != NULL ? *ecdhkey_
                         : *::ManualAuthAccountRequest_Ecdh_EcdhKey::internal_default_instance();
}
::ManualAuthAccountRequest_Ecdh_EcdhKey* ManualAuthAccountRequest_Ecdh::mutable_ecdhkey() {
  set_has_ecdhkey();
  if (ecdhkey_ == NULL) {
    ecdhkey_ = new ::ManualAuthAccountRequest_Ecdh_EcdhKey;
  }
  // @@protoc_insertion_point(field_mutable:ManualAuthAccountRequest.Ecdh.ecdhKey)
  return ecdhkey_;
}
::ManualAuthAccountRequest_Ecdh_EcdhKey* ManualAuthAccountRequest_Ecdh::release_ecdhkey() {
  // @@protoc_insertion_point(field_release:ManualAuthAccountRequest.Ecdh.ecdhKey)
  clear_has_ecdhkey();
  ::ManualAuthAccountRequest_Ecdh_EcdhKey* temp = ecdhkey_;
  ecdhkey_ = NULL;
  return temp;
}
void ManualAuthAccountRequest_Ecdh::set_allocated_ecdhkey(::ManualAuthAccountRequest_Ecdh_EcdhKey* ecdhkey) {
  delete ecdhkey_;
  ecdhkey_ = ecdhkey;
  if (ecdhkey) {
    set_has_ecdhkey();
  } else {
    clear_has_ecdhkey();
  }
  // @@protoc_insertion_point(field_set_allocated:ManualAuthAccountRequest.Ecdh.ecdhKey)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ManualAuthAccountRequest::kAesFieldNumber;
const int ManualAuthAccountRequest::kEcdhFieldNumber;
const int ManualAuthAccountRequest::kUserNameFieldNumber;
const int ManualAuthAccountRequest::kPassword1FieldNumber;
const int ManualAuthAccountRequest::kPassword2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ManualAuthAccountRequest::ManualAuthAccountRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ManualAuthAccountRequest)
}
ManualAuthAccountRequest::ManualAuthAccountRequest(const ManualAuthAccountRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  password1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password1()) {
    password1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password1_);
  }
  password2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password2()) {
    password2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password2_);
  }
  if (from.has_aes()) {
    aes_ = new ::ManualAuthAccountRequest_AesKey(*from.aes_);
  } else {
    aes_ = NULL;
  }
  if (from.has_ecdh()) {
    ecdh_ = new ::ManualAuthAccountRequest_Ecdh(*from.ecdh_);
  } else {
    ecdh_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ManualAuthAccountRequest)
}

void ManualAuthAccountRequest::SharedCtor() {
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&aes_, 0, reinterpret_cast<char*>(&ecdh_) -
    reinterpret_cast<char*>(&aes_) + sizeof(ecdh_));
}

ManualAuthAccountRequest::~ManualAuthAccountRequest() {
  // @@protoc_insertion_point(destructor:ManualAuthAccountRequest)
  SharedDtor();
}

void ManualAuthAccountRequest::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password2_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete aes_;
  }
  if (this != internal_default_instance()) {
    delete ecdh_;
  }
}

void ManualAuthAccountRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ManualAuthAccountRequest::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ManualAuthAccountRequest& ManualAuthAccountRequest::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

ManualAuthAccountRequest* ManualAuthAccountRequest::New(::google::protobuf::Arena* arena) const {
  ManualAuthAccountRequest* n = new ManualAuthAccountRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ManualAuthAccountRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ManualAuthAccountRequest)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_username()) {
      GOOGLE_DCHECK(!username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*username_.UnsafeRawStringPointer())->clear();
    }
    if (has_password1()) {
      GOOGLE_DCHECK(!password1_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*password1_.UnsafeRawStringPointer())->clear();
    }
    if (has_password2()) {
      GOOGLE_DCHECK(!password2_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*password2_.UnsafeRawStringPointer())->clear();
    }
    if (has_aes()) {
      GOOGLE_DCHECK(aes_ != NULL);
      aes_->::ManualAuthAccountRequest_AesKey::Clear();
    }
    if (has_ecdh()) {
      GOOGLE_DCHECK(ecdh_ != NULL);
      ecdh_->::ManualAuthAccountRequest_Ecdh::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ManualAuthAccountRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ManualAuthAccountRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ManualAuthAccountRequest.AesKey aes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_aes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ManualAuthAccountRequest.Ecdh ecdh = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ecdh()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string userName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ManualAuthAccountRequest.userName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string password1 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password1().data(), this->password1().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ManualAuthAccountRequest.password1");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string password2 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password2().data(), this->password2().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ManualAuthAccountRequest.password2");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ManualAuthAccountRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ManualAuthAccountRequest)
  return false;
#undef DO_
}

void ManualAuthAccountRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ManualAuthAccountRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ManualAuthAccountRequest.AesKey aes = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->aes_, output);
  }

  // required .ManualAuthAccountRequest.Ecdh ecdh = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->ecdh_, output);
  }

  // required string userName = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthAccountRequest.userName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->username(), output);
  }

  // required string password1 = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password1().data(), this->password1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthAccountRequest.password1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->password1(), output);
  }

  // required string password2 = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password2().data(), this->password2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthAccountRequest.password2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->password2(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ManualAuthAccountRequest)
}

::google::protobuf::uint8* ManualAuthAccountRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ManualAuthAccountRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ManualAuthAccountRequest.AesKey aes = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->aes_, deterministic, target);
  }

  // required .ManualAuthAccountRequest.Ecdh ecdh = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->ecdh_, deterministic, target);
  }

  // required string userName = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthAccountRequest.userName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->username(), target);
  }

  // required string password1 = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password1().data(), this->password1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthAccountRequest.password1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->password1(), target);
  }

  // required string password2 = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password2().data(), this->password2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthAccountRequest.password2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->password2(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ManualAuthAccountRequest)
  return target;
}

size_t ManualAuthAccountRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ManualAuthAccountRequest)
  size_t total_size = 0;

  if (has_username()) {
    // required string userName = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  if (has_password1()) {
    // required string password1 = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password1());
  }

  if (has_password2()) {
    // required string password2 = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password2());
  }

  if (has_aes()) {
    // required .ManualAuthAccountRequest.AesKey aes = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->aes_);
  }

  if (has_ecdh()) {
    // required .ManualAuthAccountRequest.Ecdh ecdh = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ecdh_);
  }

  return total_size;
}
size_t ManualAuthAccountRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ManualAuthAccountRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string userName = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());

    // required string password1 = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password1());

    // required string password2 = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password2());

    // required .ManualAuthAccountRequest.AesKey aes = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->aes_);

    // required .ManualAuthAccountRequest.Ecdh ecdh = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ecdh_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ManualAuthAccountRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ManualAuthAccountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ManualAuthAccountRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ManualAuthAccountRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ManualAuthAccountRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ManualAuthAccountRequest)
    MergeFrom(*source);
  }
}

void ManualAuthAccountRequest::MergeFrom(const ManualAuthAccountRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ManualAuthAccountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_password1();
      password1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password1_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_password2();
      password2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password2_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_aes()->::ManualAuthAccountRequest_AesKey::MergeFrom(from.aes());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_ecdh()->::ManualAuthAccountRequest_Ecdh::MergeFrom(from.ecdh());
    }
  }
}

void ManualAuthAccountRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ManualAuthAccountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManualAuthAccountRequest::CopyFrom(const ManualAuthAccountRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ManualAuthAccountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManualAuthAccountRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  if (has_aes()) {
    if (!this->aes_->IsInitialized()) return false;
  }
  if (has_ecdh()) {
    if (!this->ecdh_->IsInitialized()) return false;
  }
  return true;
}

void ManualAuthAccountRequest::Swap(ManualAuthAccountRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ManualAuthAccountRequest::InternalSwap(ManualAuthAccountRequest* other) {
  username_.Swap(&other->username_);
  password1_.Swap(&other->password1_);
  password2_.Swap(&other->password2_);
  std::swap(aes_, other->aes_);
  std::swap(ecdh_, other->ecdh_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ManualAuthAccountRequest::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ManualAuthAccountRequest

// required .ManualAuthAccountRequest.AesKey aes = 1;
bool ManualAuthAccountRequest::has_aes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ManualAuthAccountRequest::set_has_aes() {
  _has_bits_[0] |= 0x00000008u;
}
void ManualAuthAccountRequest::clear_has_aes() {
  _has_bits_[0] &= ~0x00000008u;
}
void ManualAuthAccountRequest::clear_aes() {
  if (aes_ != NULL) aes_->::ManualAuthAccountRequest_AesKey::Clear();
  clear_has_aes();
}
const ::ManualAuthAccountRequest_AesKey& ManualAuthAccountRequest::aes() const {
  // @@protoc_insertion_point(field_get:ManualAuthAccountRequest.aes)
  return aes_ != NULL ? *aes_
                         : *::ManualAuthAccountRequest_AesKey::internal_default_instance();
}
::ManualAuthAccountRequest_AesKey* ManualAuthAccountRequest::mutable_aes() {
  set_has_aes();
  if (aes_ == NULL) {
    aes_ = new ::ManualAuthAccountRequest_AesKey;
  }
  // @@protoc_insertion_point(field_mutable:ManualAuthAccountRequest.aes)
  return aes_;
}
::ManualAuthAccountRequest_AesKey* ManualAuthAccountRequest::release_aes() {
  // @@protoc_insertion_point(field_release:ManualAuthAccountRequest.aes)
  clear_has_aes();
  ::ManualAuthAccountRequest_AesKey* temp = aes_;
  aes_ = NULL;
  return temp;
}
void ManualAuthAccountRequest::set_allocated_aes(::ManualAuthAccountRequest_AesKey* aes) {
  delete aes_;
  aes_ = aes;
  if (aes) {
    set_has_aes();
  } else {
    clear_has_aes();
  }
  // @@protoc_insertion_point(field_set_allocated:ManualAuthAccountRequest.aes)
}

// required .ManualAuthAccountRequest.Ecdh ecdh = 2;
bool ManualAuthAccountRequest::has_ecdh() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ManualAuthAccountRequest::set_has_ecdh() {
  _has_bits_[0] |= 0x00000010u;
}
void ManualAuthAccountRequest::clear_has_ecdh() {
  _has_bits_[0] &= ~0x00000010u;
}
void ManualAuthAccountRequest::clear_ecdh() {
  if (ecdh_ != NULL) ecdh_->::ManualAuthAccountRequest_Ecdh::Clear();
  clear_has_ecdh();
}
const ::ManualAuthAccountRequest_Ecdh& ManualAuthAccountRequest::ecdh() const {
  // @@protoc_insertion_point(field_get:ManualAuthAccountRequest.ecdh)
  return ecdh_ != NULL ? *ecdh_
                         : *::ManualAuthAccountRequest_Ecdh::internal_default_instance();
}
::ManualAuthAccountRequest_Ecdh* ManualAuthAccountRequest::mutable_ecdh() {
  set_has_ecdh();
  if (ecdh_ == NULL) {
    ecdh_ = new ::ManualAuthAccountRequest_Ecdh;
  }
  // @@protoc_insertion_point(field_mutable:ManualAuthAccountRequest.ecdh)
  return ecdh_;
}
::ManualAuthAccountRequest_Ecdh* ManualAuthAccountRequest::release_ecdh() {
  // @@protoc_insertion_point(field_release:ManualAuthAccountRequest.ecdh)
  clear_has_ecdh();
  ::ManualAuthAccountRequest_Ecdh* temp = ecdh_;
  ecdh_ = NULL;
  return temp;
}
void ManualAuthAccountRequest::set_allocated_ecdh(::ManualAuthAccountRequest_Ecdh* ecdh) {
  delete ecdh_;
  ecdh_ = ecdh;
  if (ecdh) {
    set_has_ecdh();
  } else {
    clear_has_ecdh();
  }
  // @@protoc_insertion_point(field_set_allocated:ManualAuthAccountRequest.ecdh)
}

// required string userName = 3;
bool ManualAuthAccountRequest::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ManualAuthAccountRequest::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
void ManualAuthAccountRequest::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
void ManualAuthAccountRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
const ::std::string& ManualAuthAccountRequest::username() const {
  // @@protoc_insertion_point(field_get:ManualAuthAccountRequest.userName)
  return username_.GetNoArena();
}
void ManualAuthAccountRequest::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ManualAuthAccountRequest.userName)
}
#if LANG_CXX11
void ManualAuthAccountRequest::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ManualAuthAccountRequest.userName)
}
#endif
void ManualAuthAccountRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ManualAuthAccountRequest.userName)
}
void ManualAuthAccountRequest::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ManualAuthAccountRequest.userName)
}
::std::string* ManualAuthAccountRequest::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:ManualAuthAccountRequest.userName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManualAuthAccountRequest::release_username() {
  // @@protoc_insertion_point(field_release:ManualAuthAccountRequest.userName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManualAuthAccountRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:ManualAuthAccountRequest.userName)
}

// required string password1 = 4;
bool ManualAuthAccountRequest::has_password1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ManualAuthAccountRequest::set_has_password1() {
  _has_bits_[0] |= 0x00000002u;
}
void ManualAuthAccountRequest::clear_has_password1() {
  _has_bits_[0] &= ~0x00000002u;
}
void ManualAuthAccountRequest::clear_password1() {
  password1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password1();
}
const ::std::string& ManualAuthAccountRequest::password1() const {
  // @@protoc_insertion_point(field_get:ManualAuthAccountRequest.password1)
  return password1_.GetNoArena();
}
void ManualAuthAccountRequest::set_password1(const ::std::string& value) {
  set_has_password1();
  password1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ManualAuthAccountRequest.password1)
}
#if LANG_CXX11
void ManualAuthAccountRequest::set_password1(::std::string&& value) {
  set_has_password1();
  password1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ManualAuthAccountRequest.password1)
}
#endif
void ManualAuthAccountRequest::set_password1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password1();
  password1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ManualAuthAccountRequest.password1)
}
void ManualAuthAccountRequest::set_password1(const char* value, size_t size) {
  set_has_password1();
  password1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ManualAuthAccountRequest.password1)
}
::std::string* ManualAuthAccountRequest::mutable_password1() {
  set_has_password1();
  // @@protoc_insertion_point(field_mutable:ManualAuthAccountRequest.password1)
  return password1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManualAuthAccountRequest::release_password1() {
  // @@protoc_insertion_point(field_release:ManualAuthAccountRequest.password1)
  clear_has_password1();
  return password1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManualAuthAccountRequest::set_allocated_password1(::std::string* password1) {
  if (password1 != NULL) {
    set_has_password1();
  } else {
    clear_has_password1();
  }
  password1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password1);
  // @@protoc_insertion_point(field_set_allocated:ManualAuthAccountRequest.password1)
}

// required string password2 = 5;
bool ManualAuthAccountRequest::has_password2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ManualAuthAccountRequest::set_has_password2() {
  _has_bits_[0] |= 0x00000004u;
}
void ManualAuthAccountRequest::clear_has_password2() {
  _has_bits_[0] &= ~0x00000004u;
}
void ManualAuthAccountRequest::clear_password2() {
  password2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password2();
}
const ::std::string& ManualAuthAccountRequest::password2() const {
  // @@protoc_insertion_point(field_get:ManualAuthAccountRequest.password2)
  return password2_.GetNoArena();
}
void ManualAuthAccountRequest::set_password2(const ::std::string& value) {
  set_has_password2();
  password2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ManualAuthAccountRequest.password2)
}
#if LANG_CXX11
void ManualAuthAccountRequest::set_password2(::std::string&& value) {
  set_has_password2();
  password2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ManualAuthAccountRequest.password2)
}
#endif
void ManualAuthAccountRequest::set_password2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password2();
  password2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ManualAuthAccountRequest.password2)
}
void ManualAuthAccountRequest::set_password2(const char* value, size_t size) {
  set_has_password2();
  password2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ManualAuthAccountRequest.password2)
}
::std::string* ManualAuthAccountRequest::mutable_password2() {
  set_has_password2();
  // @@protoc_insertion_point(field_mutable:ManualAuthAccountRequest.password2)
  return password2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManualAuthAccountRequest::release_password2() {
  // @@protoc_insertion_point(field_release:ManualAuthAccountRequest.password2)
  clear_has_password2();
  return password2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManualAuthAccountRequest::set_allocated_password2(::std::string* password2) {
  if (password2 != NULL) {
    set_has_password2();
  } else {
    clear_has_password2();
  }
  password2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password2);
  // @@protoc_insertion_point(field_set_allocated:ManualAuthAccountRequest.password2)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ManualAuthDeviceRequest__Tag2___Tag2::kTag1FieldNumber;
const int ManualAuthDeviceRequest__Tag2___Tag2::kTag2FieldNumber;
const int ManualAuthDeviceRequest__Tag2___Tag2::kTag3FieldNumber;
const int ManualAuthDeviceRequest__Tag2___Tag2::kTag4FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ManualAuthDeviceRequest__Tag2___Tag2::ManualAuthDeviceRequest__Tag2___Tag2()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ManualAuthDeviceRequest._Tag2.__Tag2)
}
ManualAuthDeviceRequest__Tag2___Tag2::ManualAuthDeviceRequest__Tag2___Tag2(const ManualAuthDeviceRequest__Tag2___Tag2& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tag1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tag1()) {
    tag1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag1_);
  }
  tag2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tag2()) {
    tag2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag2_);
  }
  tag3_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tag3()) {
    tag3_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag3_);
  }
  if (from.has_tag4()) {
    tag4_ = new ::mmStr(*from.tag4_);
  } else {
    tag4_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ManualAuthDeviceRequest._Tag2.__Tag2)
}

void ManualAuthDeviceRequest__Tag2___Tag2::SharedCtor() {
  _cached_size_ = 0;
  tag1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag3_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag4_ = NULL;
}

ManualAuthDeviceRequest__Tag2___Tag2::~ManualAuthDeviceRequest__Tag2___Tag2() {
  // @@protoc_insertion_point(destructor:ManualAuthDeviceRequest._Tag2.__Tag2)
  SharedDtor();
}

void ManualAuthDeviceRequest__Tag2___Tag2::SharedDtor() {
  tag1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag2_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag3_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete tag4_;
  }
}

void ManualAuthDeviceRequest__Tag2___Tag2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ManualAuthDeviceRequest__Tag2___Tag2::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ManualAuthDeviceRequest__Tag2___Tag2& ManualAuthDeviceRequest__Tag2___Tag2::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

ManualAuthDeviceRequest__Tag2___Tag2* ManualAuthDeviceRequest__Tag2___Tag2::New(::google::protobuf::Arena* arena) const {
  ManualAuthDeviceRequest__Tag2___Tag2* n = new ManualAuthDeviceRequest__Tag2___Tag2;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ManualAuthDeviceRequest__Tag2___Tag2::Clear() {
// @@protoc_insertion_point(message_clear_start:ManualAuthDeviceRequest._Tag2.__Tag2)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_tag1()) {
      GOOGLE_DCHECK(!tag1_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tag1_.UnsafeRawStringPointer())->clear();
    }
    if (has_tag2()) {
      GOOGLE_DCHECK(!tag2_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tag2_.UnsafeRawStringPointer())->clear();
    }
    if (has_tag3()) {
      GOOGLE_DCHECK(!tag3_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tag3_.UnsafeRawStringPointer())->clear();
    }
    if (has_tag4()) {
      GOOGLE_DCHECK(tag4_ != NULL);
      tag4_->::mmStr::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ManualAuthDeviceRequest__Tag2___Tag2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ManualAuthDeviceRequest._Tag2.__Tag2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string tag1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag1().data(), this->tag1().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ManualAuthDeviceRequest._Tag2.__Tag2.tag1");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string tag2 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag2().data(), this->tag2().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ManualAuthDeviceRequest._Tag2.__Tag2.tag2");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string tag3 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag3()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag3().data(), this->tag3().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ManualAuthDeviceRequest._Tag2.__Tag2.tag3");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mmStr tag4 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tag4()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ManualAuthDeviceRequest._Tag2.__Tag2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ManualAuthDeviceRequest._Tag2.__Tag2)
  return false;
#undef DO_
}

void ManualAuthDeviceRequest__Tag2___Tag2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ManualAuthDeviceRequest._Tag2.__Tag2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string tag1 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag1().data(), this->tag1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthDeviceRequest._Tag2.__Tag2.tag1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tag1(), output);
  }

  // optional string tag2 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag2().data(), this->tag2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthDeviceRequest._Tag2.__Tag2.tag2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tag2(), output);
  }

  // optional string tag3 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag3().data(), this->tag3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthDeviceRequest._Tag2.__Tag2.tag3");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->tag3(), output);
  }

  // optional .mmStr tag4 = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->tag4_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ManualAuthDeviceRequest._Tag2.__Tag2)
}

::google::protobuf::uint8* ManualAuthDeviceRequest__Tag2___Tag2::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ManualAuthDeviceRequest._Tag2.__Tag2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string tag1 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag1().data(), this->tag1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthDeviceRequest._Tag2.__Tag2.tag1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tag1(), target);
  }

  // optional string tag2 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag2().data(), this->tag2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthDeviceRequest._Tag2.__Tag2.tag2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tag2(), target);
  }

  // optional string tag3 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag3().data(), this->tag3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthDeviceRequest._Tag2.__Tag2.tag3");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tag3(), target);
  }

  // optional .mmStr tag4 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->tag4_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ManualAuthDeviceRequest._Tag2.__Tag2)
  return target;
}

size_t ManualAuthDeviceRequest__Tag2___Tag2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ManualAuthDeviceRequest._Tag2.__Tag2)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string tag1 = 1;
    if (has_tag1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag1());
    }

    // optional string tag2 = 2;
    if (has_tag2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag2());
    }

    // optional string tag3 = 3;
    if (has_tag3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag3());
    }

    // optional .mmStr tag4 = 4;
    if (has_tag4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->tag4_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ManualAuthDeviceRequest__Tag2___Tag2::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ManualAuthDeviceRequest._Tag2.__Tag2)
  GOOGLE_DCHECK_NE(&from, this);
  const ManualAuthDeviceRequest__Tag2___Tag2* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ManualAuthDeviceRequest__Tag2___Tag2>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ManualAuthDeviceRequest._Tag2.__Tag2)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ManualAuthDeviceRequest._Tag2.__Tag2)
    MergeFrom(*source);
  }
}

void ManualAuthDeviceRequest__Tag2___Tag2::MergeFrom(const ManualAuthDeviceRequest__Tag2___Tag2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ManualAuthDeviceRequest._Tag2.__Tag2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_tag1();
      tag1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag1_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_tag2();
      tag2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag2_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_tag3();
      tag3_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag3_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_tag4()->::mmStr::MergeFrom(from.tag4());
    }
  }
}

void ManualAuthDeviceRequest__Tag2___Tag2::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ManualAuthDeviceRequest._Tag2.__Tag2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManualAuthDeviceRequest__Tag2___Tag2::CopyFrom(const ManualAuthDeviceRequest__Tag2___Tag2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ManualAuthDeviceRequest._Tag2.__Tag2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManualAuthDeviceRequest__Tag2___Tag2::IsInitialized() const {
  return true;
}

void ManualAuthDeviceRequest__Tag2___Tag2::Swap(ManualAuthDeviceRequest__Tag2___Tag2* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ManualAuthDeviceRequest__Tag2___Tag2::InternalSwap(ManualAuthDeviceRequest__Tag2___Tag2* other) {
  tag1_.Swap(&other->tag1_);
  tag2_.Swap(&other->tag2_);
  tag3_.Swap(&other->tag3_);
  std::swap(tag4_, other->tag4_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ManualAuthDeviceRequest__Tag2___Tag2::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ManualAuthDeviceRequest__Tag2___Tag2

// optional string tag1 = 1;
bool ManualAuthDeviceRequest__Tag2___Tag2::has_tag1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ManualAuthDeviceRequest__Tag2___Tag2::set_has_tag1() {
  _has_bits_[0] |= 0x00000001u;
}
void ManualAuthDeviceRequest__Tag2___Tag2::clear_has_tag1() {
  _has_bits_[0] &= ~0x00000001u;
}
void ManualAuthDeviceRequest__Tag2___Tag2::clear_tag1() {
  tag1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tag1();
}
const ::std::string& ManualAuthDeviceRequest__Tag2___Tag2::tag1() const {
  // @@protoc_insertion_point(field_get:ManualAuthDeviceRequest._Tag2.__Tag2.tag1)
  return tag1_.GetNoArena();
}
void ManualAuthDeviceRequest__Tag2___Tag2::set_tag1(const ::std::string& value) {
  set_has_tag1();
  tag1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ManualAuthDeviceRequest._Tag2.__Tag2.tag1)
}
#if LANG_CXX11
void ManualAuthDeviceRequest__Tag2___Tag2::set_tag1(::std::string&& value) {
  set_has_tag1();
  tag1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ManualAuthDeviceRequest._Tag2.__Tag2.tag1)
}
#endif
void ManualAuthDeviceRequest__Tag2___Tag2::set_tag1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tag1();
  tag1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ManualAuthDeviceRequest._Tag2.__Tag2.tag1)
}
void ManualAuthDeviceRequest__Tag2___Tag2::set_tag1(const char* value, size_t size) {
  set_has_tag1();
  tag1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ManualAuthDeviceRequest._Tag2.__Tag2.tag1)
}
::std::string* ManualAuthDeviceRequest__Tag2___Tag2::mutable_tag1() {
  set_has_tag1();
  // @@protoc_insertion_point(field_mutable:ManualAuthDeviceRequest._Tag2.__Tag2.tag1)
  return tag1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManualAuthDeviceRequest__Tag2___Tag2::release_tag1() {
  // @@protoc_insertion_point(field_release:ManualAuthDeviceRequest._Tag2.__Tag2.tag1)
  clear_has_tag1();
  return tag1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManualAuthDeviceRequest__Tag2___Tag2::set_allocated_tag1(::std::string* tag1) {
  if (tag1 != NULL) {
    set_has_tag1();
  } else {
    clear_has_tag1();
  }
  tag1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag1);
  // @@protoc_insertion_point(field_set_allocated:ManualAuthDeviceRequest._Tag2.__Tag2.tag1)
}

// optional string tag2 = 2;
bool ManualAuthDeviceRequest__Tag2___Tag2::has_tag2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ManualAuthDeviceRequest__Tag2___Tag2::set_has_tag2() {
  _has_bits_[0] |= 0x00000002u;
}
void ManualAuthDeviceRequest__Tag2___Tag2::clear_has_tag2() {
  _has_bits_[0] &= ~0x00000002u;
}
void ManualAuthDeviceRequest__Tag2___Tag2::clear_tag2() {
  tag2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tag2();
}
const ::std::string& ManualAuthDeviceRequest__Tag2___Tag2::tag2() const {
  // @@protoc_insertion_point(field_get:ManualAuthDeviceRequest._Tag2.__Tag2.tag2)
  return tag2_.GetNoArena();
}
void ManualAuthDeviceRequest__Tag2___Tag2::set_tag2(const ::std::string& value) {
  set_has_tag2();
  tag2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ManualAuthDeviceRequest._Tag2.__Tag2.tag2)
}
#if LANG_CXX11
void ManualAuthDeviceRequest__Tag2___Tag2::set_tag2(::std::string&& value) {
  set_has_tag2();
  tag2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ManualAuthDeviceRequest._Tag2.__Tag2.tag2)
}
#endif
void ManualAuthDeviceRequest__Tag2___Tag2::set_tag2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tag2();
  tag2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ManualAuthDeviceRequest._Tag2.__Tag2.tag2)
}
void ManualAuthDeviceRequest__Tag2___Tag2::set_tag2(const char* value, size_t size) {
  set_has_tag2();
  tag2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ManualAuthDeviceRequest._Tag2.__Tag2.tag2)
}
::std::string* ManualAuthDeviceRequest__Tag2___Tag2::mutable_tag2() {
  set_has_tag2();
  // @@protoc_insertion_point(field_mutable:ManualAuthDeviceRequest._Tag2.__Tag2.tag2)
  return tag2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManualAuthDeviceRequest__Tag2___Tag2::release_tag2() {
  // @@protoc_insertion_point(field_release:ManualAuthDeviceRequest._Tag2.__Tag2.tag2)
  clear_has_tag2();
  return tag2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManualAuthDeviceRequest__Tag2___Tag2::set_allocated_tag2(::std::string* tag2) {
  if (tag2 != NULL) {
    set_has_tag2();
  } else {
    clear_has_tag2();
  }
  tag2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag2);
  // @@protoc_insertion_point(field_set_allocated:ManualAuthDeviceRequest._Tag2.__Tag2.tag2)
}

// optional string tag3 = 3;
bool ManualAuthDeviceRequest__Tag2___Tag2::has_tag3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ManualAuthDeviceRequest__Tag2___Tag2::set_has_tag3() {
  _has_bits_[0] |= 0x00000004u;
}
void ManualAuthDeviceRequest__Tag2___Tag2::clear_has_tag3() {
  _has_bits_[0] &= ~0x00000004u;
}
void ManualAuthDeviceRequest__Tag2___Tag2::clear_tag3() {
  tag3_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tag3();
}
const ::std::string& ManualAuthDeviceRequest__Tag2___Tag2::tag3() const {
  // @@protoc_insertion_point(field_get:ManualAuthDeviceRequest._Tag2.__Tag2.tag3)
  return tag3_.GetNoArena();
}
void ManualAuthDeviceRequest__Tag2___Tag2::set_tag3(const ::std::string& value) {
  set_has_tag3();
  tag3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ManualAuthDeviceRequest._Tag2.__Tag2.tag3)
}
#if LANG_CXX11
void ManualAuthDeviceRequest__Tag2___Tag2::set_tag3(::std::string&& value) {
  set_has_tag3();
  tag3_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ManualAuthDeviceRequest._Tag2.__Tag2.tag3)
}
#endif
void ManualAuthDeviceRequest__Tag2___Tag2::set_tag3(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tag3();
  tag3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ManualAuthDeviceRequest._Tag2.__Tag2.tag3)
}
void ManualAuthDeviceRequest__Tag2___Tag2::set_tag3(const char* value, size_t size) {
  set_has_tag3();
  tag3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ManualAuthDeviceRequest._Tag2.__Tag2.tag3)
}
::std::string* ManualAuthDeviceRequest__Tag2___Tag2::mutable_tag3() {
  set_has_tag3();
  // @@protoc_insertion_point(field_mutable:ManualAuthDeviceRequest._Tag2.__Tag2.tag3)
  return tag3_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManualAuthDeviceRequest__Tag2___Tag2::release_tag3() {
  // @@protoc_insertion_point(field_release:ManualAuthDeviceRequest._Tag2.__Tag2.tag3)
  clear_has_tag3();
  return tag3_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManualAuthDeviceRequest__Tag2___Tag2::set_allocated_tag3(::std::string* tag3) {
  if (tag3 != NULL) {
    set_has_tag3();
  } else {
    clear_has_tag3();
  }
  tag3_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag3);
  // @@protoc_insertion_point(field_set_allocated:ManualAuthDeviceRequest._Tag2.__Tag2.tag3)
}

// optional .mmStr tag4 = 4;
bool ManualAuthDeviceRequest__Tag2___Tag2::has_tag4() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ManualAuthDeviceRequest__Tag2___Tag2::set_has_tag4() {
  _has_bits_[0] |= 0x00000008u;
}
void ManualAuthDeviceRequest__Tag2___Tag2::clear_has_tag4() {
  _has_bits_[0] &= ~0x00000008u;
}
void ManualAuthDeviceRequest__Tag2___Tag2::clear_tag4() {
  if (tag4_ != NULL) tag4_->::mmStr::Clear();
  clear_has_tag4();
}
const ::mmStr& ManualAuthDeviceRequest__Tag2___Tag2::tag4() const {
  // @@protoc_insertion_point(field_get:ManualAuthDeviceRequest._Tag2.__Tag2.tag4)
  return tag4_ != NULL ? *tag4_
                         : *::mmStr::internal_default_instance();
}
::mmStr* ManualAuthDeviceRequest__Tag2___Tag2::mutable_tag4() {
  set_has_tag4();
  if (tag4_ == NULL) {
    tag4_ = new ::mmStr;
  }
  // @@protoc_insertion_point(field_mutable:ManualAuthDeviceRequest._Tag2.__Tag2.tag4)
  return tag4_;
}
::mmStr* ManualAuthDeviceRequest__Tag2___Tag2::release_tag4() {
  // @@protoc_insertion_point(field_release:ManualAuthDeviceRequest._Tag2.__Tag2.tag4)
  clear_has_tag4();
  ::mmStr* temp = tag4_;
  tag4_ = NULL;
  return temp;
}
void ManualAuthDeviceRequest__Tag2___Tag2::set_allocated_tag4(::mmStr* tag4) {
  delete tag4_;
  tag4_ = tag4;
  if (tag4) {
    set_has_tag4();
  } else {
    clear_has_tag4();
  }
  // @@protoc_insertion_point(field_set_allocated:ManualAuthDeviceRequest._Tag2.__Tag2.tag4)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ManualAuthDeviceRequest__Tag2_TAG3::kTag1FieldNumber;
const int ManualAuthDeviceRequest__Tag2_TAG3::kTag2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ManualAuthDeviceRequest__Tag2_TAG3::ManualAuthDeviceRequest__Tag2_TAG3()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ManualAuthDeviceRequest._Tag2.TAG3)
}
ManualAuthDeviceRequest__Tag2_TAG3::ManualAuthDeviceRequest__Tag2_TAG3(const ManualAuthDeviceRequest__Tag2_TAG3& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tag1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tag1()) {
    tag1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag1_);
  }
  tag2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tag2()) {
    tag2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag2_);
  }
  // @@protoc_insertion_point(copy_constructor:ManualAuthDeviceRequest._Tag2.TAG3)
}

void ManualAuthDeviceRequest__Tag2_TAG3::SharedCtor() {
  _cached_size_ = 0;
  tag1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ManualAuthDeviceRequest__Tag2_TAG3::~ManualAuthDeviceRequest__Tag2_TAG3() {
  // @@protoc_insertion_point(destructor:ManualAuthDeviceRequest._Tag2.TAG3)
  SharedDtor();
}

void ManualAuthDeviceRequest__Tag2_TAG3::SharedDtor() {
  tag1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag2_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ManualAuthDeviceRequest__Tag2_TAG3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ManualAuthDeviceRequest__Tag2_TAG3::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ManualAuthDeviceRequest__Tag2_TAG3& ManualAuthDeviceRequest__Tag2_TAG3::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

ManualAuthDeviceRequest__Tag2_TAG3* ManualAuthDeviceRequest__Tag2_TAG3::New(::google::protobuf::Arena* arena) const {
  ManualAuthDeviceRequest__Tag2_TAG3* n = new ManualAuthDeviceRequest__Tag2_TAG3;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ManualAuthDeviceRequest__Tag2_TAG3::Clear() {
// @@protoc_insertion_point(message_clear_start:ManualAuthDeviceRequest._Tag2.TAG3)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_tag1()) {
      GOOGLE_DCHECK(!tag1_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tag1_.UnsafeRawStringPointer())->clear();
    }
    if (has_tag2()) {
      GOOGLE_DCHECK(!tag2_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tag2_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ManualAuthDeviceRequest__Tag2_TAG3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ManualAuthDeviceRequest._Tag2.TAG3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string tag1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag1().data(), this->tag1().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ManualAuthDeviceRequest._Tag2.TAG3.tag1");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string tag2 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag2().data(), this->tag2().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ManualAuthDeviceRequest._Tag2.TAG3.tag2");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ManualAuthDeviceRequest._Tag2.TAG3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ManualAuthDeviceRequest._Tag2.TAG3)
  return false;
#undef DO_
}

void ManualAuthDeviceRequest__Tag2_TAG3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ManualAuthDeviceRequest._Tag2.TAG3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string tag1 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag1().data(), this->tag1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthDeviceRequest._Tag2.TAG3.tag1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tag1(), output);
  }

  // optional string tag2 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag2().data(), this->tag2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthDeviceRequest._Tag2.TAG3.tag2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tag2(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ManualAuthDeviceRequest._Tag2.TAG3)
}

::google::protobuf::uint8* ManualAuthDeviceRequest__Tag2_TAG3::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ManualAuthDeviceRequest._Tag2.TAG3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string tag1 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag1().data(), this->tag1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthDeviceRequest._Tag2.TAG3.tag1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tag1(), target);
  }

  // optional string tag2 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag2().data(), this->tag2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthDeviceRequest._Tag2.TAG3.tag2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tag2(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ManualAuthDeviceRequest._Tag2.TAG3)
  return target;
}

size_t ManualAuthDeviceRequest__Tag2_TAG3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ManualAuthDeviceRequest._Tag2.TAG3)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string tag1 = 1;
    if (has_tag1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag1());
    }

    // optional string tag2 = 2;
    if (has_tag2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag2());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ManualAuthDeviceRequest__Tag2_TAG3::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ManualAuthDeviceRequest._Tag2.TAG3)
  GOOGLE_DCHECK_NE(&from, this);
  const ManualAuthDeviceRequest__Tag2_TAG3* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ManualAuthDeviceRequest__Tag2_TAG3>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ManualAuthDeviceRequest._Tag2.TAG3)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ManualAuthDeviceRequest._Tag2.TAG3)
    MergeFrom(*source);
  }
}

void ManualAuthDeviceRequest__Tag2_TAG3::MergeFrom(const ManualAuthDeviceRequest__Tag2_TAG3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ManualAuthDeviceRequest._Tag2.TAG3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_tag1();
      tag1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag1_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_tag2();
      tag2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag2_);
    }
  }
}

void ManualAuthDeviceRequest__Tag2_TAG3::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ManualAuthDeviceRequest._Tag2.TAG3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManualAuthDeviceRequest__Tag2_TAG3::CopyFrom(const ManualAuthDeviceRequest__Tag2_TAG3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ManualAuthDeviceRequest._Tag2.TAG3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManualAuthDeviceRequest__Tag2_TAG3::IsInitialized() const {
  return true;
}

void ManualAuthDeviceRequest__Tag2_TAG3::Swap(ManualAuthDeviceRequest__Tag2_TAG3* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ManualAuthDeviceRequest__Tag2_TAG3::InternalSwap(ManualAuthDeviceRequest__Tag2_TAG3* other) {
  tag1_.Swap(&other->tag1_);
  tag2_.Swap(&other->tag2_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ManualAuthDeviceRequest__Tag2_TAG3::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ManualAuthDeviceRequest__Tag2_TAG3

// optional string tag1 = 1;
bool ManualAuthDeviceRequest__Tag2_TAG3::has_tag1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ManualAuthDeviceRequest__Tag2_TAG3::set_has_tag1() {
  _has_bits_[0] |= 0x00000001u;
}
void ManualAuthDeviceRequest__Tag2_TAG3::clear_has_tag1() {
  _has_bits_[0] &= ~0x00000001u;
}
void ManualAuthDeviceRequest__Tag2_TAG3::clear_tag1() {
  tag1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tag1();
}
const ::std::string& ManualAuthDeviceRequest__Tag2_TAG3::tag1() const {
  // @@protoc_insertion_point(field_get:ManualAuthDeviceRequest._Tag2.TAG3.tag1)
  return tag1_.GetNoArena();
}
void ManualAuthDeviceRequest__Tag2_TAG3::set_tag1(const ::std::string& value) {
  set_has_tag1();
  tag1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ManualAuthDeviceRequest._Tag2.TAG3.tag1)
}
#if LANG_CXX11
void ManualAuthDeviceRequest__Tag2_TAG3::set_tag1(::std::string&& value) {
  set_has_tag1();
  tag1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ManualAuthDeviceRequest._Tag2.TAG3.tag1)
}
#endif
void ManualAuthDeviceRequest__Tag2_TAG3::set_tag1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tag1();
  tag1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ManualAuthDeviceRequest._Tag2.TAG3.tag1)
}
void ManualAuthDeviceRequest__Tag2_TAG3::set_tag1(const char* value, size_t size) {
  set_has_tag1();
  tag1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ManualAuthDeviceRequest._Tag2.TAG3.tag1)
}
::std::string* ManualAuthDeviceRequest__Tag2_TAG3::mutable_tag1() {
  set_has_tag1();
  // @@protoc_insertion_point(field_mutable:ManualAuthDeviceRequest._Tag2.TAG3.tag1)
  return tag1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManualAuthDeviceRequest__Tag2_TAG3::release_tag1() {
  // @@protoc_insertion_point(field_release:ManualAuthDeviceRequest._Tag2.TAG3.tag1)
  clear_has_tag1();
  return tag1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManualAuthDeviceRequest__Tag2_TAG3::set_allocated_tag1(::std::string* tag1) {
  if (tag1 != NULL) {
    set_has_tag1();
  } else {
    clear_has_tag1();
  }
  tag1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag1);
  // @@protoc_insertion_point(field_set_allocated:ManualAuthDeviceRequest._Tag2.TAG3.tag1)
}

// optional string tag2 = 2;
bool ManualAuthDeviceRequest__Tag2_TAG3::has_tag2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ManualAuthDeviceRequest__Tag2_TAG3::set_has_tag2() {
  _has_bits_[0] |= 0x00000002u;
}
void ManualAuthDeviceRequest__Tag2_TAG3::clear_has_tag2() {
  _has_bits_[0] &= ~0x00000002u;
}
void ManualAuthDeviceRequest__Tag2_TAG3::clear_tag2() {
  tag2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tag2();
}
const ::std::string& ManualAuthDeviceRequest__Tag2_TAG3::tag2() const {
  // @@protoc_insertion_point(field_get:ManualAuthDeviceRequest._Tag2.TAG3.tag2)
  return tag2_.GetNoArena();
}
void ManualAuthDeviceRequest__Tag2_TAG3::set_tag2(const ::std::string& value) {
  set_has_tag2();
  tag2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ManualAuthDeviceRequest._Tag2.TAG3.tag2)
}
#if LANG_CXX11
void ManualAuthDeviceRequest__Tag2_TAG3::set_tag2(::std::string&& value) {
  set_has_tag2();
  tag2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ManualAuthDeviceRequest._Tag2.TAG3.tag2)
}
#endif
void ManualAuthDeviceRequest__Tag2_TAG3::set_tag2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tag2();
  tag2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ManualAuthDeviceRequest._Tag2.TAG3.tag2)
}
void ManualAuthDeviceRequest__Tag2_TAG3::set_tag2(const char* value, size_t size) {
  set_has_tag2();
  tag2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ManualAuthDeviceRequest._Tag2.TAG3.tag2)
}
::std::string* ManualAuthDeviceRequest__Tag2_TAG3::mutable_tag2() {
  set_has_tag2();
  // @@protoc_insertion_point(field_mutable:ManualAuthDeviceRequest._Tag2.TAG3.tag2)
  return tag2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManualAuthDeviceRequest__Tag2_TAG3::release_tag2() {
  // @@protoc_insertion_point(field_release:ManualAuthDeviceRequest._Tag2.TAG3.tag2)
  clear_has_tag2();
  return tag2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManualAuthDeviceRequest__Tag2_TAG3::set_allocated_tag2(::std::string* tag2) {
  if (tag2 != NULL) {
    set_has_tag2();
  } else {
    clear_has_tag2();
  }
  tag2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag2);
  // @@protoc_insertion_point(field_set_allocated:ManualAuthDeviceRequest._Tag2.TAG3.tag2)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ManualAuthDeviceRequest__Tag2::kTag1FieldNumber;
const int ManualAuthDeviceRequest__Tag2::kTag2FieldNumber;
const int ManualAuthDeviceRequest__Tag2::kTag3FieldNumber;
const int ManualAuthDeviceRequest__Tag2::kTag4FieldNumber;
const int ManualAuthDeviceRequest__Tag2::kTag5FieldNumber;
const int ManualAuthDeviceRequest__Tag2::kTag6FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ManualAuthDeviceRequest__Tag2::ManualAuthDeviceRequest__Tag2()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ManualAuthDeviceRequest._Tag2)
}
ManualAuthDeviceRequest__Tag2::ManualAuthDeviceRequest__Tag2(const ManualAuthDeviceRequest__Tag2& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tag1()) {
    tag1_ = new ::mmStr(*from.tag1_);
  } else {
    tag1_ = NULL;
  }
  if (from.has_tag2()) {
    tag2_ = new ::ManualAuthDeviceRequest__Tag2___Tag2(*from.tag2_);
  } else {
    tag2_ = NULL;
  }
  if (from.has_tag3()) {
    tag3_ = new ::ManualAuthDeviceRequest__Tag2_TAG3(*from.tag3_);
  } else {
    tag3_ = NULL;
  }
  if (from.has_tag4()) {
    tag4_ = new ::mmStr(*from.tag4_);
  } else {
    tag4_ = NULL;
  }
  if (from.has_tag5()) {
    tag5_ = new ::mmStr(*from.tag5_);
  } else {
    tag5_ = NULL;
  }
  tag6_ = from.tag6_;
  // @@protoc_insertion_point(copy_constructor:ManualAuthDeviceRequest._Tag2)
}

void ManualAuthDeviceRequest__Tag2::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&tag1_, 0, reinterpret_cast<char*>(&tag6_) -
    reinterpret_cast<char*>(&tag1_) + sizeof(tag6_));
}

ManualAuthDeviceRequest__Tag2::~ManualAuthDeviceRequest__Tag2() {
  // @@protoc_insertion_point(destructor:ManualAuthDeviceRequest._Tag2)
  SharedDtor();
}

void ManualAuthDeviceRequest__Tag2::SharedDtor() {
  if (this != internal_default_instance()) {
    delete tag1_;
  }
  if (this != internal_default_instance()) {
    delete tag2_;
  }
  if (this != internal_default_instance()) {
    delete tag3_;
  }
  if (this != internal_default_instance()) {
    delete tag4_;
  }
  if (this != internal_default_instance()) {
    delete tag5_;
  }
}

void ManualAuthDeviceRequest__Tag2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ManualAuthDeviceRequest__Tag2::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ManualAuthDeviceRequest__Tag2& ManualAuthDeviceRequest__Tag2::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

ManualAuthDeviceRequest__Tag2* ManualAuthDeviceRequest__Tag2::New(::google::protobuf::Arena* arena) const {
  ManualAuthDeviceRequest__Tag2* n = new ManualAuthDeviceRequest__Tag2;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ManualAuthDeviceRequest__Tag2::Clear() {
// @@protoc_insertion_point(message_clear_start:ManualAuthDeviceRequest._Tag2)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_tag1()) {
      GOOGLE_DCHECK(tag1_ != NULL);
      tag1_->::mmStr::Clear();
    }
    if (has_tag2()) {
      GOOGLE_DCHECK(tag2_ != NULL);
      tag2_->::ManualAuthDeviceRequest__Tag2___Tag2::Clear();
    }
    if (has_tag3()) {
      GOOGLE_DCHECK(tag3_ != NULL);
      tag3_->::ManualAuthDeviceRequest__Tag2_TAG3::Clear();
    }
    if (has_tag4()) {
      GOOGLE_DCHECK(tag4_ != NULL);
      tag4_->::mmStr::Clear();
    }
    if (has_tag5()) {
      GOOGLE_DCHECK(tag5_ != NULL);
      tag5_->::mmStr::Clear();
    }
  }
  tag6_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ManualAuthDeviceRequest__Tag2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ManualAuthDeviceRequest._Tag2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mmStr tag1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tag1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ManualAuthDeviceRequest._Tag2.__Tag2 tag2 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tag2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ManualAuthDeviceRequest._Tag2.TAG3 tag3 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tag3()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mmStr tag4 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tag4()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mmStr tag5 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tag5()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tag6 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_tag6();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag6_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ManualAuthDeviceRequest._Tag2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ManualAuthDeviceRequest._Tag2)
  return false;
#undef DO_
}

void ManualAuthDeviceRequest__Tag2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ManualAuthDeviceRequest._Tag2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mmStr tag1 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->tag1_, output);
  }

  // optional .ManualAuthDeviceRequest._Tag2.__Tag2 tag2 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->tag2_, output);
  }

  // optional .ManualAuthDeviceRequest._Tag2.TAG3 tag3 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->tag3_, output);
  }

  // optional .mmStr tag4 = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->tag4_, output);
  }

  // optional .mmStr tag5 = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->tag5_, output);
  }

  // optional int32 tag6 = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->tag6(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ManualAuthDeviceRequest._Tag2)
}

::google::protobuf::uint8* ManualAuthDeviceRequest__Tag2::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ManualAuthDeviceRequest._Tag2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mmStr tag1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->tag1_, deterministic, target);
  }

  // optional .ManualAuthDeviceRequest._Tag2.__Tag2 tag2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->tag2_, deterministic, target);
  }

  // optional .ManualAuthDeviceRequest._Tag2.TAG3 tag3 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->tag3_, deterministic, target);
  }

  // optional .mmStr tag4 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->tag4_, deterministic, target);
  }

  // optional .mmStr tag5 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->tag5_, deterministic, target);
  }

  // optional int32 tag6 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->tag6(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ManualAuthDeviceRequest._Tag2)
  return target;
}

size_t ManualAuthDeviceRequest__Tag2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ManualAuthDeviceRequest._Tag2)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional .mmStr tag1 = 1;
    if (has_tag1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->tag1_);
    }

    // optional .ManualAuthDeviceRequest._Tag2.__Tag2 tag2 = 2;
    if (has_tag2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->tag2_);
    }

    // optional .ManualAuthDeviceRequest._Tag2.TAG3 tag3 = 3;
    if (has_tag3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->tag3_);
    }

    // optional .mmStr tag4 = 4;
    if (has_tag4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->tag4_);
    }

    // optional .mmStr tag5 = 5;
    if (has_tag5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->tag5_);
    }

    // optional int32 tag6 = 6;
    if (has_tag6()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag6());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ManualAuthDeviceRequest__Tag2::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ManualAuthDeviceRequest._Tag2)
  GOOGLE_DCHECK_NE(&from, this);
  const ManualAuthDeviceRequest__Tag2* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ManualAuthDeviceRequest__Tag2>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ManualAuthDeviceRequest._Tag2)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ManualAuthDeviceRequest._Tag2)
    MergeFrom(*source);
  }
}

void ManualAuthDeviceRequest__Tag2::MergeFrom(const ManualAuthDeviceRequest__Tag2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ManualAuthDeviceRequest._Tag2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_tag1()->::mmStr::MergeFrom(from.tag1());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_tag2()->::ManualAuthDeviceRequest__Tag2___Tag2::MergeFrom(from.tag2());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_tag3()->::ManualAuthDeviceRequest__Tag2_TAG3::MergeFrom(from.tag3());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_tag4()->::mmStr::MergeFrom(from.tag4());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_tag5()->::mmStr::MergeFrom(from.tag5());
    }
    if (cached_has_bits & 0x00000020u) {
      tag6_ = from.tag6_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ManualAuthDeviceRequest__Tag2::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ManualAuthDeviceRequest._Tag2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManualAuthDeviceRequest__Tag2::CopyFrom(const ManualAuthDeviceRequest__Tag2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ManualAuthDeviceRequest._Tag2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManualAuthDeviceRequest__Tag2::IsInitialized() const {
  return true;
}

void ManualAuthDeviceRequest__Tag2::Swap(ManualAuthDeviceRequest__Tag2* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ManualAuthDeviceRequest__Tag2::InternalSwap(ManualAuthDeviceRequest__Tag2* other) {
  std::swap(tag1_, other->tag1_);
  std::swap(tag2_, other->tag2_);
  std::swap(tag3_, other->tag3_);
  std::swap(tag4_, other->tag4_);
  std::swap(tag5_, other->tag5_);
  std::swap(tag6_, other->tag6_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ManualAuthDeviceRequest__Tag2::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ManualAuthDeviceRequest__Tag2

// optional .mmStr tag1 = 1;
bool ManualAuthDeviceRequest__Tag2::has_tag1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ManualAuthDeviceRequest__Tag2::set_has_tag1() {
  _has_bits_[0] |= 0x00000001u;
}
void ManualAuthDeviceRequest__Tag2::clear_has_tag1() {
  _has_bits_[0] &= ~0x00000001u;
}
void ManualAuthDeviceRequest__Tag2::clear_tag1() {
  if (tag1_ != NULL) tag1_->::mmStr::Clear();
  clear_has_tag1();
}
const ::mmStr& ManualAuthDeviceRequest__Tag2::tag1() const {
  // @@protoc_insertion_point(field_get:ManualAuthDeviceRequest._Tag2.tag1)
  return tag1_ != NULL ? *tag1_
                         : *::mmStr::internal_default_instance();
}
::mmStr* ManualAuthDeviceRequest__Tag2::mutable_tag1() {
  set_has_tag1();
  if (tag1_ == NULL) {
    tag1_ = new ::mmStr;
  }
  // @@protoc_insertion_point(field_mutable:ManualAuthDeviceRequest._Tag2.tag1)
  return tag1_;
}
::mmStr* ManualAuthDeviceRequest__Tag2::release_tag1() {
  // @@protoc_insertion_point(field_release:ManualAuthDeviceRequest._Tag2.tag1)
  clear_has_tag1();
  ::mmStr* temp = tag1_;
  tag1_ = NULL;
  return temp;
}
void ManualAuthDeviceRequest__Tag2::set_allocated_tag1(::mmStr* tag1) {
  delete tag1_;
  tag1_ = tag1;
  if (tag1) {
    set_has_tag1();
  } else {
    clear_has_tag1();
  }
  // @@protoc_insertion_point(field_set_allocated:ManualAuthDeviceRequest._Tag2.tag1)
}

// optional .ManualAuthDeviceRequest._Tag2.__Tag2 tag2 = 2;
bool ManualAuthDeviceRequest__Tag2::has_tag2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ManualAuthDeviceRequest__Tag2::set_has_tag2() {
  _has_bits_[0] |= 0x00000002u;
}
void ManualAuthDeviceRequest__Tag2::clear_has_tag2() {
  _has_bits_[0] &= ~0x00000002u;
}
void ManualAuthDeviceRequest__Tag2::clear_tag2() {
  if (tag2_ != NULL) tag2_->::ManualAuthDeviceRequest__Tag2___Tag2::Clear();
  clear_has_tag2();
}
const ::ManualAuthDeviceRequest__Tag2___Tag2& ManualAuthDeviceRequest__Tag2::tag2() const {
  // @@protoc_insertion_point(field_get:ManualAuthDeviceRequest._Tag2.tag2)
  return tag2_ != NULL ? *tag2_
                         : *::ManualAuthDeviceRequest__Tag2___Tag2::internal_default_instance();
}
::ManualAuthDeviceRequest__Tag2___Tag2* ManualAuthDeviceRequest__Tag2::mutable_tag2() {
  set_has_tag2();
  if (tag2_ == NULL) {
    tag2_ = new ::ManualAuthDeviceRequest__Tag2___Tag2;
  }
  // @@protoc_insertion_point(field_mutable:ManualAuthDeviceRequest._Tag2.tag2)
  return tag2_;
}
::ManualAuthDeviceRequest__Tag2___Tag2* ManualAuthDeviceRequest__Tag2::release_tag2() {
  // @@protoc_insertion_point(field_release:ManualAuthDeviceRequest._Tag2.tag2)
  clear_has_tag2();
  ::ManualAuthDeviceRequest__Tag2___Tag2* temp = tag2_;
  tag2_ = NULL;
  return temp;
}
void ManualAuthDeviceRequest__Tag2::set_allocated_tag2(::ManualAuthDeviceRequest__Tag2___Tag2* tag2) {
  delete tag2_;
  tag2_ = tag2;
  if (tag2) {
    set_has_tag2();
  } else {
    clear_has_tag2();
  }
  // @@protoc_insertion_point(field_set_allocated:ManualAuthDeviceRequest._Tag2.tag2)
}

// optional .ManualAuthDeviceRequest._Tag2.TAG3 tag3 = 3;
bool ManualAuthDeviceRequest__Tag2::has_tag3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ManualAuthDeviceRequest__Tag2::set_has_tag3() {
  _has_bits_[0] |= 0x00000004u;
}
void ManualAuthDeviceRequest__Tag2::clear_has_tag3() {
  _has_bits_[0] &= ~0x00000004u;
}
void ManualAuthDeviceRequest__Tag2::clear_tag3() {
  if (tag3_ != NULL) tag3_->::ManualAuthDeviceRequest__Tag2_TAG3::Clear();
  clear_has_tag3();
}
const ::ManualAuthDeviceRequest__Tag2_TAG3& ManualAuthDeviceRequest__Tag2::tag3() const {
  // @@protoc_insertion_point(field_get:ManualAuthDeviceRequest._Tag2.tag3)
  return tag3_ != NULL ? *tag3_
                         : *::ManualAuthDeviceRequest__Tag2_TAG3::internal_default_instance();
}
::ManualAuthDeviceRequest__Tag2_TAG3* ManualAuthDeviceRequest__Tag2::mutable_tag3() {
  set_has_tag3();
  if (tag3_ == NULL) {
    tag3_ = new ::ManualAuthDeviceRequest__Tag2_TAG3;
  }
  // @@protoc_insertion_point(field_mutable:ManualAuthDeviceRequest._Tag2.tag3)
  return tag3_;
}
::ManualAuthDeviceRequest__Tag2_TAG3* ManualAuthDeviceRequest__Tag2::release_tag3() {
  // @@protoc_insertion_point(field_release:ManualAuthDeviceRequest._Tag2.tag3)
  clear_has_tag3();
  ::ManualAuthDeviceRequest__Tag2_TAG3* temp = tag3_;
  tag3_ = NULL;
  return temp;
}
void ManualAuthDeviceRequest__Tag2::set_allocated_tag3(::ManualAuthDeviceRequest__Tag2_TAG3* tag3) {
  delete tag3_;
  tag3_ = tag3;
  if (tag3) {
    set_has_tag3();
  } else {
    clear_has_tag3();
  }
  // @@protoc_insertion_point(field_set_allocated:ManualAuthDeviceRequest._Tag2.tag3)
}

// optional .mmStr tag4 = 4;
bool ManualAuthDeviceRequest__Tag2::has_tag4() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ManualAuthDeviceRequest__Tag2::set_has_tag4() {
  _has_bits_[0] |= 0x00000008u;
}
void ManualAuthDeviceRequest__Tag2::clear_has_tag4() {
  _has_bits_[0] &= ~0x00000008u;
}
void ManualAuthDeviceRequest__Tag2::clear_tag4() {
  if (tag4_ != NULL) tag4_->::mmStr::Clear();
  clear_has_tag4();
}
const ::mmStr& ManualAuthDeviceRequest__Tag2::tag4() const {
  // @@protoc_insertion_point(field_get:ManualAuthDeviceRequest._Tag2.tag4)
  return tag4_ != NULL ? *tag4_
                         : *::mmStr::internal_default_instance();
}
::mmStr* ManualAuthDeviceRequest__Tag2::mutable_tag4() {
  set_has_tag4();
  if (tag4_ == NULL) {
    tag4_ = new ::mmStr;
  }
  // @@protoc_insertion_point(field_mutable:ManualAuthDeviceRequest._Tag2.tag4)
  return tag4_;
}
::mmStr* ManualAuthDeviceRequest__Tag2::release_tag4() {
  // @@protoc_insertion_point(field_release:ManualAuthDeviceRequest._Tag2.tag4)
  clear_has_tag4();
  ::mmStr* temp = tag4_;
  tag4_ = NULL;
  return temp;
}
void ManualAuthDeviceRequest__Tag2::set_allocated_tag4(::mmStr* tag4) {
  delete tag4_;
  tag4_ = tag4;
  if (tag4) {
    set_has_tag4();
  } else {
    clear_has_tag4();
  }
  // @@protoc_insertion_point(field_set_allocated:ManualAuthDeviceRequest._Tag2.tag4)
}

// optional .mmStr tag5 = 5;
bool ManualAuthDeviceRequest__Tag2::has_tag5() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ManualAuthDeviceRequest__Tag2::set_has_tag5() {
  _has_bits_[0] |= 0x00000010u;
}
void ManualAuthDeviceRequest__Tag2::clear_has_tag5() {
  _has_bits_[0] &= ~0x00000010u;
}
void ManualAuthDeviceRequest__Tag2::clear_tag5() {
  if (tag5_ != NULL) tag5_->::mmStr::Clear();
  clear_has_tag5();
}
const ::mmStr& ManualAuthDeviceRequest__Tag2::tag5() const {
  // @@protoc_insertion_point(field_get:ManualAuthDeviceRequest._Tag2.tag5)
  return tag5_ != NULL ? *tag5_
                         : *::mmStr::internal_default_instance();
}
::mmStr* ManualAuthDeviceRequest__Tag2::mutable_tag5() {
  set_has_tag5();
  if (tag5_ == NULL) {
    tag5_ = new ::mmStr;
  }
  // @@protoc_insertion_point(field_mutable:ManualAuthDeviceRequest._Tag2.tag5)
  return tag5_;
}
::mmStr* ManualAuthDeviceRequest__Tag2::release_tag5() {
  // @@protoc_insertion_point(field_release:ManualAuthDeviceRequest._Tag2.tag5)
  clear_has_tag5();
  ::mmStr* temp = tag5_;
  tag5_ = NULL;
  return temp;
}
void ManualAuthDeviceRequest__Tag2::set_allocated_tag5(::mmStr* tag5) {
  delete tag5_;
  tag5_ = tag5;
  if (tag5) {
    set_has_tag5();
  } else {
    clear_has_tag5();
  }
  // @@protoc_insertion_point(field_set_allocated:ManualAuthDeviceRequest._Tag2.tag5)
}

// optional int32 tag6 = 6;
bool ManualAuthDeviceRequest__Tag2::has_tag6() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ManualAuthDeviceRequest__Tag2::set_has_tag6() {
  _has_bits_[0] |= 0x00000020u;
}
void ManualAuthDeviceRequest__Tag2::clear_has_tag6() {
  _has_bits_[0] &= ~0x00000020u;
}
void ManualAuthDeviceRequest__Tag2::clear_tag6() {
  tag6_ = 0;
  clear_has_tag6();
}
::google::protobuf::int32 ManualAuthDeviceRequest__Tag2::tag6() const {
  // @@protoc_insertion_point(field_get:ManualAuthDeviceRequest._Tag2.tag6)
  return tag6_;
}
void ManualAuthDeviceRequest__Tag2::set_tag6(::google::protobuf::int32 value) {
  set_has_tag6();
  tag6_ = value;
  // @@protoc_insertion_point(field_set:ManualAuthDeviceRequest._Tag2.tag6)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ManualAuthDeviceRequest::kLoginFieldNumber;
const int ManualAuthDeviceRequest::kTag2FieldNumber;
const int ManualAuthDeviceRequest::kImeiFieldNumber;
const int ManualAuthDeviceRequest::kSoftInfoXmlFieldNumber;
const int ManualAuthDeviceRequest::kUnknown5FieldNumber;
const int ManualAuthDeviceRequest::kClientSeqIDFieldNumber;
const int ManualAuthDeviceRequest::kClientSeqIDSignFieldNumber;
const int ManualAuthDeviceRequest::kLoginDeviceNameFieldNumber;
const int ManualAuthDeviceRequest::kDeviceInfoXmlFieldNumber;
const int ManualAuthDeviceRequest::kLanguageFieldNumber;
const int ManualAuthDeviceRequest::kTimeZoneFieldNumber;
const int ManualAuthDeviceRequest::kUnknown13FieldNumber;
const int ManualAuthDeviceRequest::kUnknown14FieldNumber;
const int ManualAuthDeviceRequest::kDeviceBrandFieldNumber;
const int ManualAuthDeviceRequest::kDeviceModelFieldNumber;
const int ManualAuthDeviceRequest::kOsTypeFieldNumber;
const int ManualAuthDeviceRequest::kRealCountryFieldNumber;
const int ManualAuthDeviceRequest::kUnknown22FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ManualAuthDeviceRequest::ManualAuthDeviceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ManualAuthDeviceRequest)
}
ManualAuthDeviceRequest::ManualAuthDeviceRequest(const ManualAuthDeviceRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  imei_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_imei()) {
    imei_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imei_);
  }
  softinfoxml_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_softinfoxml()) {
    softinfoxml_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.softinfoxml_);
  }
  clientseqid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clientseqid()) {
    clientseqid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientseqid_);
  }
  clientseqid_sign_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clientseqid_sign()) {
    clientseqid_sign_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientseqid_sign_);
  }
  logindevicename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_logindevicename()) {
    logindevicename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.logindevicename_);
  }
  deviceinfoxml_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_deviceinfoxml()) {
    deviceinfoxml_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deviceinfoxml_);
  }
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_language()) {
    language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  timezone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_timezone()) {
    timezone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timezone_);
  }
  devicebrand_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_devicebrand()) {
    devicebrand_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicebrand_);
  }
  devicemodel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_devicemodel()) {
    devicemodel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicemodel_);
  }
  ostype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ostype()) {
    ostype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ostype_);
  }
  realcountry_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_realcountry()) {
    realcountry_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.realcountry_);
  }
  if (from.has_login()) {
    login_ = new ::LoginInfo(*from.login_);
  } else {
    login_ = NULL;
  }
  if (from.has_tag2()) {
    tag2_ = new ::ManualAuthDeviceRequest__Tag2(*from.tag2_);
  } else {
    tag2_ = NULL;
  }
  ::memcpy(&unknown5_, &from.unknown5_,
    reinterpret_cast<char*>(&unknown22_) -
    reinterpret_cast<char*>(&unknown5_) + sizeof(unknown22_));
  // @@protoc_insertion_point(copy_constructor:ManualAuthDeviceRequest)
}

void ManualAuthDeviceRequest::SharedCtor() {
  _cached_size_ = 0;
  imei_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  softinfoxml_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientseqid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientseqid_sign_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logindevicename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deviceinfoxml_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timezone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicebrand_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicemodel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ostype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  realcountry_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&login_, 0, reinterpret_cast<char*>(&unknown22_) -
    reinterpret_cast<char*>(&login_) + sizeof(unknown22_));
}

ManualAuthDeviceRequest::~ManualAuthDeviceRequest() {
  // @@protoc_insertion_point(destructor:ManualAuthDeviceRequest)
  SharedDtor();
}

void ManualAuthDeviceRequest::SharedDtor() {
  imei_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  softinfoxml_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientseqid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientseqid_sign_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logindevicename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deviceinfoxml_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timezone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicebrand_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicemodel_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ostype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  realcountry_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete login_;
  }
  if (this != internal_default_instance()) {
    delete tag2_;
  }
}

void ManualAuthDeviceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ManualAuthDeviceRequest::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ManualAuthDeviceRequest& ManualAuthDeviceRequest::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

ManualAuthDeviceRequest* ManualAuthDeviceRequest::New(::google::protobuf::Arena* arena) const {
  ManualAuthDeviceRequest* n = new ManualAuthDeviceRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ManualAuthDeviceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ManualAuthDeviceRequest)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_imei()) {
      GOOGLE_DCHECK(!imei_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*imei_.UnsafeRawStringPointer())->clear();
    }
    if (has_softinfoxml()) {
      GOOGLE_DCHECK(!softinfoxml_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*softinfoxml_.UnsafeRawStringPointer())->clear();
    }
    if (has_clientseqid()) {
      GOOGLE_DCHECK(!clientseqid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*clientseqid_.UnsafeRawStringPointer())->clear();
    }
    if (has_clientseqid_sign()) {
      GOOGLE_DCHECK(!clientseqid_sign_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*clientseqid_sign_.UnsafeRawStringPointer())->clear();
    }
    if (has_logindevicename()) {
      GOOGLE_DCHECK(!logindevicename_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*logindevicename_.UnsafeRawStringPointer())->clear();
    }
    if (has_deviceinfoxml()) {
      GOOGLE_DCHECK(!deviceinfoxml_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*deviceinfoxml_.UnsafeRawStringPointer())->clear();
    }
    if (has_language()) {
      GOOGLE_DCHECK(!language_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*language_.UnsafeRawStringPointer())->clear();
    }
    if (has_timezone()) {
      GOOGLE_DCHECK(!timezone_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*timezone_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[8 / 32] & 16128u) {
    if (has_devicebrand()) {
      GOOGLE_DCHECK(!devicebrand_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*devicebrand_.UnsafeRawStringPointer())->clear();
    }
    if (has_devicemodel()) {
      GOOGLE_DCHECK(!devicemodel_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*devicemodel_.UnsafeRawStringPointer())->clear();
    }
    if (has_ostype()) {
      GOOGLE_DCHECK(!ostype_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ostype_.UnsafeRawStringPointer())->clear();
    }
    if (has_realcountry()) {
      GOOGLE_DCHECK(!realcountry_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*realcountry_.UnsafeRawStringPointer())->clear();
    }
    if (has_login()) {
      GOOGLE_DCHECK(login_ != NULL);
      login_->::LoginInfo::Clear();
    }
    if (has_tag2()) {
      GOOGLE_DCHECK(tag2_ != NULL);
      tag2_->::ManualAuthDeviceRequest__Tag2::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 49152u) {
    ::memset(&unknown5_, 0, reinterpret_cast<char*>(&unknown13_) -
      reinterpret_cast<char*>(&unknown5_) + sizeof(unknown13_));
  }
  if (_has_bits_[16 / 32] & 196608u) {
    ::memset(&unknown14_, 0, reinterpret_cast<char*>(&unknown22_) -
      reinterpret_cast<char*>(&unknown14_) + sizeof(unknown22_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ManualAuthDeviceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ManualAuthDeviceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .LoginInfo login = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ManualAuthDeviceRequest._Tag2 tag2 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tag2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string imei = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imei()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->imei().data(), this->imei().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ManualAuthDeviceRequest.imei");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string softInfoXml = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_softinfoxml()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->softinfoxml().data(), this->softinfoxml().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ManualAuthDeviceRequest.softInfoXml");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 unknown5 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_unknown5();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unknown5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string clientSeqID = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientseqid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientseqid().data(), this->clientseqid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ManualAuthDeviceRequest.clientSeqID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string clientSeqID_sign = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientseqid_sign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientseqid_sign().data(), this->clientseqid_sign().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ManualAuthDeviceRequest.clientSeqID_sign");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string loginDeviceName = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logindevicename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logindevicename().data(), this->logindevicename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ManualAuthDeviceRequest.loginDeviceName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string deviceInfoXml = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceinfoxml()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deviceinfoxml().data(), this->deviceinfoxml().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ManualAuthDeviceRequest.deviceInfoXml");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string language = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ManualAuthDeviceRequest.language");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string timeZone = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timezone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->timezone().data(), this->timezone().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ManualAuthDeviceRequest.timeZone");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 unknown13 = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_unknown13();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unknown13_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 unknown14 = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_unknown14();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unknown14_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string deviceBrand = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicebrand()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devicebrand().data(), this->devicebrand().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ManualAuthDeviceRequest.deviceBrand");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string deviceModel = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicemodel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devicemodel().data(), this->devicemodel().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ManualAuthDeviceRequest.deviceModel");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string osType = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ostype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ostype().data(), this->ostype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ManualAuthDeviceRequest.osType");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string realCountry = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_realcountry()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->realcountry().data(), this->realcountry().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ManualAuthDeviceRequest.realCountry");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 unknown22 = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          set_has_unknown22();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unknown22_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ManualAuthDeviceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ManualAuthDeviceRequest)
  return false;
#undef DO_
}

void ManualAuthDeviceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ManualAuthDeviceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .LoginInfo login = 1;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->login_, output);
  }

  // optional .ManualAuthDeviceRequest._Tag2 tag2 = 2;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->tag2_, output);
  }

  // optional string imei = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imei().data(), this->imei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthDeviceRequest.imei");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->imei(), output);
  }

  // optional string softInfoXml = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->softinfoxml().data(), this->softinfoxml().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthDeviceRequest.softInfoXml");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->softinfoxml(), output);
  }

  // optional int32 unknown5 = 5;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->unknown5(), output);
  }

  // optional string clientSeqID = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientseqid().data(), this->clientseqid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthDeviceRequest.clientSeqID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->clientseqid(), output);
  }

  // optional string clientSeqID_sign = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientseqid_sign().data(), this->clientseqid_sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthDeviceRequest.clientSeqID_sign");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->clientseqid_sign(), output);
  }

  // optional string loginDeviceName = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logindevicename().data(), this->logindevicename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthDeviceRequest.loginDeviceName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->logindevicename(), output);
  }

  // optional string deviceInfoXml = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deviceinfoxml().data(), this->deviceinfoxml().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthDeviceRequest.deviceInfoXml");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->deviceinfoxml(), output);
  }

  // optional string language = 10;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthDeviceRequest.language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->language(), output);
  }

  // optional string timeZone = 11;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timezone().data(), this->timezone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthDeviceRequest.timeZone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->timezone(), output);
  }

  // optional int32 unknown13 = 13;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->unknown13(), output);
  }

  // optional int32 unknown14 = 14;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->unknown14(), output);
  }

  // optional string deviceBrand = 15;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicebrand().data(), this->devicebrand().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthDeviceRequest.deviceBrand");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->devicebrand(), output);
  }

  // optional string deviceModel = 16;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicemodel().data(), this->devicemodel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthDeviceRequest.deviceModel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->devicemodel(), output);
  }

  // optional string osType = 17;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ostype().data(), this->ostype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthDeviceRequest.osType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->ostype(), output);
  }

  // optional string realCountry = 18;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->realcountry().data(), this->realcountry().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthDeviceRequest.realCountry");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->realcountry(), output);
  }

  // optional int32 unknown22 = 22;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->unknown22(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ManualAuthDeviceRequest)
}

::google::protobuf::uint8* ManualAuthDeviceRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ManualAuthDeviceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .LoginInfo login = 1;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->login_, deterministic, target);
  }

  // optional .ManualAuthDeviceRequest._Tag2 tag2 = 2;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->tag2_, deterministic, target);
  }

  // optional string imei = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imei().data(), this->imei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthDeviceRequest.imei");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->imei(), target);
  }

  // optional string softInfoXml = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->softinfoxml().data(), this->softinfoxml().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthDeviceRequest.softInfoXml");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->softinfoxml(), target);
  }

  // optional int32 unknown5 = 5;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->unknown5(), target);
  }

  // optional string clientSeqID = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientseqid().data(), this->clientseqid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthDeviceRequest.clientSeqID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->clientseqid(), target);
  }

  // optional string clientSeqID_sign = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientseqid_sign().data(), this->clientseqid_sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthDeviceRequest.clientSeqID_sign");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->clientseqid_sign(), target);
  }

  // optional string loginDeviceName = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logindevicename().data(), this->logindevicename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthDeviceRequest.loginDeviceName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->logindevicename(), target);
  }

  // optional string deviceInfoXml = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deviceinfoxml().data(), this->deviceinfoxml().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthDeviceRequest.deviceInfoXml");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->deviceinfoxml(), target);
  }

  // optional string language = 10;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthDeviceRequest.language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->language(), target);
  }

  // optional string timeZone = 11;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timezone().data(), this->timezone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthDeviceRequest.timeZone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->timezone(), target);
  }

  // optional int32 unknown13 = 13;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->unknown13(), target);
  }

  // optional int32 unknown14 = 14;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->unknown14(), target);
  }

  // optional string deviceBrand = 15;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicebrand().data(), this->devicebrand().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthDeviceRequest.deviceBrand");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->devicebrand(), target);
  }

  // optional string deviceModel = 16;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicemodel().data(), this->devicemodel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthDeviceRequest.deviceModel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->devicemodel(), target);
  }

  // optional string osType = 17;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ostype().data(), this->ostype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthDeviceRequest.osType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->ostype(), target);
  }

  // optional string realCountry = 18;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->realcountry().data(), this->realcountry().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthDeviceRequest.realCountry");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->realcountry(), target);
  }

  // optional int32 unknown22 = 22;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->unknown22(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ManualAuthDeviceRequest)
  return target;
}

size_t ManualAuthDeviceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ManualAuthDeviceRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string imei = 3;
    if (has_imei()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imei());
    }

    // optional string softInfoXml = 4;
    if (has_softinfoxml()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->softinfoxml());
    }

    // optional string clientSeqID = 6;
    if (has_clientseqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientseqid());
    }

    // optional string clientSeqID_sign = 7;
    if (has_clientseqid_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientseqid_sign());
    }

    // optional string loginDeviceName = 8;
    if (has_logindevicename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logindevicename());
    }

    // optional string deviceInfoXml = 9;
    if (has_deviceinfoxml()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceinfoxml());
    }

    // optional string language = 10;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language());
    }

    // optional string timeZone = 11;
    if (has_timezone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timezone());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional string deviceBrand = 15;
    if (has_devicebrand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicebrand());
    }

    // optional string deviceModel = 16;
    if (has_devicemodel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicemodel());
    }

    // optional string osType = 17;
    if (has_ostype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ostype());
    }

    // optional string realCountry = 18;
    if (has_realcountry()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->realcountry());
    }

    // optional .LoginInfo login = 1;
    if (has_login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->login_);
    }

    // optional .ManualAuthDeviceRequest._Tag2 tag2 = 2;
    if (has_tag2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->tag2_);
    }

    // optional int32 unknown5 = 5;
    if (has_unknown5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unknown5());
    }

    // optional int32 unknown13 = 13;
    if (has_unknown13()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unknown13());
    }

  }
  if (_has_bits_[16 / 32] & 196608u) {
    // optional int32 unknown14 = 14;
    if (has_unknown14()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unknown14());
    }

    // optional int32 unknown22 = 22;
    if (has_unknown22()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unknown22());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ManualAuthDeviceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ManualAuthDeviceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ManualAuthDeviceRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ManualAuthDeviceRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ManualAuthDeviceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ManualAuthDeviceRequest)
    MergeFrom(*source);
  }
}

void ManualAuthDeviceRequest::MergeFrom(const ManualAuthDeviceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ManualAuthDeviceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_imei();
      imei_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imei_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_softinfoxml();
      softinfoxml_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.softinfoxml_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_clientseqid();
      clientseqid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientseqid_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_clientseqid_sign();
      clientseqid_sign_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientseqid_sign_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_logindevicename();
      logindevicename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.logindevicename_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_deviceinfoxml();
      deviceinfoxml_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deviceinfoxml_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_language();
      language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_timezone();
      timezone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timezone_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_devicebrand();
      devicebrand_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicebrand_);
    }
    if (cached_has_bits & 0x00000200u) {
      set_has_devicemodel();
      devicemodel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicemodel_);
    }
    if (cached_has_bits & 0x00000400u) {
      set_has_ostype();
      ostype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ostype_);
    }
    if (cached_has_bits & 0x00000800u) {
      set_has_realcountry();
      realcountry_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.realcountry_);
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_login()->::LoginInfo::MergeFrom(from.login());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_tag2()->::ManualAuthDeviceRequest__Tag2::MergeFrom(from.tag2());
    }
    if (cached_has_bits & 0x00004000u) {
      unknown5_ = from.unknown5_;
    }
    if (cached_has_bits & 0x00008000u) {
      unknown13_ = from.unknown13_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 196608u) {
    if (cached_has_bits & 0x00010000u) {
      unknown14_ = from.unknown14_;
    }
    if (cached_has_bits & 0x00020000u) {
      unknown22_ = from.unknown22_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ManualAuthDeviceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ManualAuthDeviceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManualAuthDeviceRequest::CopyFrom(const ManualAuthDeviceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ManualAuthDeviceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManualAuthDeviceRequest::IsInitialized() const {
  return true;
}

void ManualAuthDeviceRequest::Swap(ManualAuthDeviceRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ManualAuthDeviceRequest::InternalSwap(ManualAuthDeviceRequest* other) {
  imei_.Swap(&other->imei_);
  softinfoxml_.Swap(&other->softinfoxml_);
  clientseqid_.Swap(&other->clientseqid_);
  clientseqid_sign_.Swap(&other->clientseqid_sign_);
  logindevicename_.Swap(&other->logindevicename_);
  deviceinfoxml_.Swap(&other->deviceinfoxml_);
  language_.Swap(&other->language_);
  timezone_.Swap(&other->timezone_);
  devicebrand_.Swap(&other->devicebrand_);
  devicemodel_.Swap(&other->devicemodel_);
  ostype_.Swap(&other->ostype_);
  realcountry_.Swap(&other->realcountry_);
  std::swap(login_, other->login_);
  std::swap(tag2_, other->tag2_);
  std::swap(unknown5_, other->unknown5_);
  std::swap(unknown13_, other->unknown13_);
  std::swap(unknown14_, other->unknown14_);
  std::swap(unknown22_, other->unknown22_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ManualAuthDeviceRequest::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ManualAuthDeviceRequest

// optional .LoginInfo login = 1;
bool ManualAuthDeviceRequest::has_login() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ManualAuthDeviceRequest::set_has_login() {
  _has_bits_[0] |= 0x00001000u;
}
void ManualAuthDeviceRequest::clear_has_login() {
  _has_bits_[0] &= ~0x00001000u;
}
void ManualAuthDeviceRequest::clear_login() {
  if (login_ != NULL) login_->::LoginInfo::Clear();
  clear_has_login();
}
const ::LoginInfo& ManualAuthDeviceRequest::login() const {
  // @@protoc_insertion_point(field_get:ManualAuthDeviceRequest.login)
  return login_ != NULL ? *login_
                         : *::LoginInfo::internal_default_instance();
}
::LoginInfo* ManualAuthDeviceRequest::mutable_login() {
  set_has_login();
  if (login_ == NULL) {
    login_ = new ::LoginInfo;
  }
  // @@protoc_insertion_point(field_mutable:ManualAuthDeviceRequest.login)
  return login_;
}
::LoginInfo* ManualAuthDeviceRequest::release_login() {
  // @@protoc_insertion_point(field_release:ManualAuthDeviceRequest.login)
  clear_has_login();
  ::LoginInfo* temp = login_;
  login_ = NULL;
  return temp;
}
void ManualAuthDeviceRequest::set_allocated_login(::LoginInfo* login) {
  delete login_;
  login_ = login;
  if (login) {
    set_has_login();
  } else {
    clear_has_login();
  }
  // @@protoc_insertion_point(field_set_allocated:ManualAuthDeviceRequest.login)
}

// optional .ManualAuthDeviceRequest._Tag2 tag2 = 2;
bool ManualAuthDeviceRequest::has_tag2() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void ManualAuthDeviceRequest::set_has_tag2() {
  _has_bits_[0] |= 0x00002000u;
}
void ManualAuthDeviceRequest::clear_has_tag2() {
  _has_bits_[0] &= ~0x00002000u;
}
void ManualAuthDeviceRequest::clear_tag2() {
  if (tag2_ != NULL) tag2_->::ManualAuthDeviceRequest__Tag2::Clear();
  clear_has_tag2();
}
const ::ManualAuthDeviceRequest__Tag2& ManualAuthDeviceRequest::tag2() const {
  // @@protoc_insertion_point(field_get:ManualAuthDeviceRequest.tag2)
  return tag2_ != NULL ? *tag2_
                         : *::ManualAuthDeviceRequest__Tag2::internal_default_instance();
}
::ManualAuthDeviceRequest__Tag2* ManualAuthDeviceRequest::mutable_tag2() {
  set_has_tag2();
  if (tag2_ == NULL) {
    tag2_ = new ::ManualAuthDeviceRequest__Tag2;
  }
  // @@protoc_insertion_point(field_mutable:ManualAuthDeviceRequest.tag2)
  return tag2_;
}
::ManualAuthDeviceRequest__Tag2* ManualAuthDeviceRequest::release_tag2() {
  // @@protoc_insertion_point(field_release:ManualAuthDeviceRequest.tag2)
  clear_has_tag2();
  ::ManualAuthDeviceRequest__Tag2* temp = tag2_;
  tag2_ = NULL;
  return temp;
}
void ManualAuthDeviceRequest::set_allocated_tag2(::ManualAuthDeviceRequest__Tag2* tag2) {
  delete tag2_;
  tag2_ = tag2;
  if (tag2) {
    set_has_tag2();
  } else {
    clear_has_tag2();
  }
  // @@protoc_insertion_point(field_set_allocated:ManualAuthDeviceRequest.tag2)
}

// optional string imei = 3;
bool ManualAuthDeviceRequest::has_imei() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ManualAuthDeviceRequest::set_has_imei() {
  _has_bits_[0] |= 0x00000001u;
}
void ManualAuthDeviceRequest::clear_has_imei() {
  _has_bits_[0] &= ~0x00000001u;
}
void ManualAuthDeviceRequest::clear_imei() {
  imei_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_imei();
}
const ::std::string& ManualAuthDeviceRequest::imei() const {
  // @@protoc_insertion_point(field_get:ManualAuthDeviceRequest.imei)
  return imei_.GetNoArena();
}
void ManualAuthDeviceRequest::set_imei(const ::std::string& value) {
  set_has_imei();
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ManualAuthDeviceRequest.imei)
}
#if LANG_CXX11
void ManualAuthDeviceRequest::set_imei(::std::string&& value) {
  set_has_imei();
  imei_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ManualAuthDeviceRequest.imei)
}
#endif
void ManualAuthDeviceRequest::set_imei(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_imei();
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ManualAuthDeviceRequest.imei)
}
void ManualAuthDeviceRequest::set_imei(const char* value, size_t size) {
  set_has_imei();
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ManualAuthDeviceRequest.imei)
}
::std::string* ManualAuthDeviceRequest::mutable_imei() {
  set_has_imei();
  // @@protoc_insertion_point(field_mutable:ManualAuthDeviceRequest.imei)
  return imei_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManualAuthDeviceRequest::release_imei() {
  // @@protoc_insertion_point(field_release:ManualAuthDeviceRequest.imei)
  clear_has_imei();
  return imei_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManualAuthDeviceRequest::set_allocated_imei(::std::string* imei) {
  if (imei != NULL) {
    set_has_imei();
  } else {
    clear_has_imei();
  }
  imei_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imei);
  // @@protoc_insertion_point(field_set_allocated:ManualAuthDeviceRequest.imei)
}

// optional string softInfoXml = 4;
bool ManualAuthDeviceRequest::has_softinfoxml() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ManualAuthDeviceRequest::set_has_softinfoxml() {
  _has_bits_[0] |= 0x00000002u;
}
void ManualAuthDeviceRequest::clear_has_softinfoxml() {
  _has_bits_[0] &= ~0x00000002u;
}
void ManualAuthDeviceRequest::clear_softinfoxml() {
  softinfoxml_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_softinfoxml();
}
const ::std::string& ManualAuthDeviceRequest::softinfoxml() const {
  // @@protoc_insertion_point(field_get:ManualAuthDeviceRequest.softInfoXml)
  return softinfoxml_.GetNoArena();
}
void ManualAuthDeviceRequest::set_softinfoxml(const ::std::string& value) {
  set_has_softinfoxml();
  softinfoxml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ManualAuthDeviceRequest.softInfoXml)
}
#if LANG_CXX11
void ManualAuthDeviceRequest::set_softinfoxml(::std::string&& value) {
  set_has_softinfoxml();
  softinfoxml_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ManualAuthDeviceRequest.softInfoXml)
}
#endif
void ManualAuthDeviceRequest::set_softinfoxml(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_softinfoxml();
  softinfoxml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ManualAuthDeviceRequest.softInfoXml)
}
void ManualAuthDeviceRequest::set_softinfoxml(const char* value, size_t size) {
  set_has_softinfoxml();
  softinfoxml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ManualAuthDeviceRequest.softInfoXml)
}
::std::string* ManualAuthDeviceRequest::mutable_softinfoxml() {
  set_has_softinfoxml();
  // @@protoc_insertion_point(field_mutable:ManualAuthDeviceRequest.softInfoXml)
  return softinfoxml_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManualAuthDeviceRequest::release_softinfoxml() {
  // @@protoc_insertion_point(field_release:ManualAuthDeviceRequest.softInfoXml)
  clear_has_softinfoxml();
  return softinfoxml_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManualAuthDeviceRequest::set_allocated_softinfoxml(::std::string* softinfoxml) {
  if (softinfoxml != NULL) {
    set_has_softinfoxml();
  } else {
    clear_has_softinfoxml();
  }
  softinfoxml_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), softinfoxml);
  // @@protoc_insertion_point(field_set_allocated:ManualAuthDeviceRequest.softInfoXml)
}

// optional int32 unknown5 = 5;
bool ManualAuthDeviceRequest::has_unknown5() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void ManualAuthDeviceRequest::set_has_unknown5() {
  _has_bits_[0] |= 0x00004000u;
}
void ManualAuthDeviceRequest::clear_has_unknown5() {
  _has_bits_[0] &= ~0x00004000u;
}
void ManualAuthDeviceRequest::clear_unknown5() {
  unknown5_ = 0;
  clear_has_unknown5();
}
::google::protobuf::int32 ManualAuthDeviceRequest::unknown5() const {
  // @@protoc_insertion_point(field_get:ManualAuthDeviceRequest.unknown5)
  return unknown5_;
}
void ManualAuthDeviceRequest::set_unknown5(::google::protobuf::int32 value) {
  set_has_unknown5();
  unknown5_ = value;
  // @@protoc_insertion_point(field_set:ManualAuthDeviceRequest.unknown5)
}

// optional string clientSeqID = 6;
bool ManualAuthDeviceRequest::has_clientseqid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ManualAuthDeviceRequest::set_has_clientseqid() {
  _has_bits_[0] |= 0x00000004u;
}
void ManualAuthDeviceRequest::clear_has_clientseqid() {
  _has_bits_[0] &= ~0x00000004u;
}
void ManualAuthDeviceRequest::clear_clientseqid() {
  clientseqid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientseqid();
}
const ::std::string& ManualAuthDeviceRequest::clientseqid() const {
  // @@protoc_insertion_point(field_get:ManualAuthDeviceRequest.clientSeqID)
  return clientseqid_.GetNoArena();
}
void ManualAuthDeviceRequest::set_clientseqid(const ::std::string& value) {
  set_has_clientseqid();
  clientseqid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ManualAuthDeviceRequest.clientSeqID)
}
#if LANG_CXX11
void ManualAuthDeviceRequest::set_clientseqid(::std::string&& value) {
  set_has_clientseqid();
  clientseqid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ManualAuthDeviceRequest.clientSeqID)
}
#endif
void ManualAuthDeviceRequest::set_clientseqid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientseqid();
  clientseqid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ManualAuthDeviceRequest.clientSeqID)
}
void ManualAuthDeviceRequest::set_clientseqid(const char* value, size_t size) {
  set_has_clientseqid();
  clientseqid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ManualAuthDeviceRequest.clientSeqID)
}
::std::string* ManualAuthDeviceRequest::mutable_clientseqid() {
  set_has_clientseqid();
  // @@protoc_insertion_point(field_mutable:ManualAuthDeviceRequest.clientSeqID)
  return clientseqid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManualAuthDeviceRequest::release_clientseqid() {
  // @@protoc_insertion_point(field_release:ManualAuthDeviceRequest.clientSeqID)
  clear_has_clientseqid();
  return clientseqid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManualAuthDeviceRequest::set_allocated_clientseqid(::std::string* clientseqid) {
  if (clientseqid != NULL) {
    set_has_clientseqid();
  } else {
    clear_has_clientseqid();
  }
  clientseqid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientseqid);
  // @@protoc_insertion_point(field_set_allocated:ManualAuthDeviceRequest.clientSeqID)
}

// optional string clientSeqID_sign = 7;
bool ManualAuthDeviceRequest::has_clientseqid_sign() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ManualAuthDeviceRequest::set_has_clientseqid_sign() {
  _has_bits_[0] |= 0x00000008u;
}
void ManualAuthDeviceRequest::clear_has_clientseqid_sign() {
  _has_bits_[0] &= ~0x00000008u;
}
void ManualAuthDeviceRequest::clear_clientseqid_sign() {
  clientseqid_sign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientseqid_sign();
}
const ::std::string& ManualAuthDeviceRequest::clientseqid_sign() const {
  // @@protoc_insertion_point(field_get:ManualAuthDeviceRequest.clientSeqID_sign)
  return clientseqid_sign_.GetNoArena();
}
void ManualAuthDeviceRequest::set_clientseqid_sign(const ::std::string& value) {
  set_has_clientseqid_sign();
  clientseqid_sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ManualAuthDeviceRequest.clientSeqID_sign)
}
#if LANG_CXX11
void ManualAuthDeviceRequest::set_clientseqid_sign(::std::string&& value) {
  set_has_clientseqid_sign();
  clientseqid_sign_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ManualAuthDeviceRequest.clientSeqID_sign)
}
#endif
void ManualAuthDeviceRequest::set_clientseqid_sign(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientseqid_sign();
  clientseqid_sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ManualAuthDeviceRequest.clientSeqID_sign)
}
void ManualAuthDeviceRequest::set_clientseqid_sign(const char* value, size_t size) {
  set_has_clientseqid_sign();
  clientseqid_sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ManualAuthDeviceRequest.clientSeqID_sign)
}
::std::string* ManualAuthDeviceRequest::mutable_clientseqid_sign() {
  set_has_clientseqid_sign();
  // @@protoc_insertion_point(field_mutable:ManualAuthDeviceRequest.clientSeqID_sign)
  return clientseqid_sign_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManualAuthDeviceRequest::release_clientseqid_sign() {
  // @@protoc_insertion_point(field_release:ManualAuthDeviceRequest.clientSeqID_sign)
  clear_has_clientseqid_sign();
  return clientseqid_sign_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManualAuthDeviceRequest::set_allocated_clientseqid_sign(::std::string* clientseqid_sign) {
  if (clientseqid_sign != NULL) {
    set_has_clientseqid_sign();
  } else {
    clear_has_clientseqid_sign();
  }
  clientseqid_sign_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientseqid_sign);
  // @@protoc_insertion_point(field_set_allocated:ManualAuthDeviceRequest.clientSeqID_sign)
}

// optional string loginDeviceName = 8;
bool ManualAuthDeviceRequest::has_logindevicename() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ManualAuthDeviceRequest::set_has_logindevicename() {
  _has_bits_[0] |= 0x00000010u;
}
void ManualAuthDeviceRequest::clear_has_logindevicename() {
  _has_bits_[0] &= ~0x00000010u;
}
void ManualAuthDeviceRequest::clear_logindevicename() {
  logindevicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_logindevicename();
}
const ::std::string& ManualAuthDeviceRequest::logindevicename() const {
  // @@protoc_insertion_point(field_get:ManualAuthDeviceRequest.loginDeviceName)
  return logindevicename_.GetNoArena();
}
void ManualAuthDeviceRequest::set_logindevicename(const ::std::string& value) {
  set_has_logindevicename();
  logindevicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ManualAuthDeviceRequest.loginDeviceName)
}
#if LANG_CXX11
void ManualAuthDeviceRequest::set_logindevicename(::std::string&& value) {
  set_has_logindevicename();
  logindevicename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ManualAuthDeviceRequest.loginDeviceName)
}
#endif
void ManualAuthDeviceRequest::set_logindevicename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_logindevicename();
  logindevicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ManualAuthDeviceRequest.loginDeviceName)
}
void ManualAuthDeviceRequest::set_logindevicename(const char* value, size_t size) {
  set_has_logindevicename();
  logindevicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ManualAuthDeviceRequest.loginDeviceName)
}
::std::string* ManualAuthDeviceRequest::mutable_logindevicename() {
  set_has_logindevicename();
  // @@protoc_insertion_point(field_mutable:ManualAuthDeviceRequest.loginDeviceName)
  return logindevicename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManualAuthDeviceRequest::release_logindevicename() {
  // @@protoc_insertion_point(field_release:ManualAuthDeviceRequest.loginDeviceName)
  clear_has_logindevicename();
  return logindevicename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManualAuthDeviceRequest::set_allocated_logindevicename(::std::string* logindevicename) {
  if (logindevicename != NULL) {
    set_has_logindevicename();
  } else {
    clear_has_logindevicename();
  }
  logindevicename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), logindevicename);
  // @@protoc_insertion_point(field_set_allocated:ManualAuthDeviceRequest.loginDeviceName)
}

// optional string deviceInfoXml = 9;
bool ManualAuthDeviceRequest::has_deviceinfoxml() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ManualAuthDeviceRequest::set_has_deviceinfoxml() {
  _has_bits_[0] |= 0x00000020u;
}
void ManualAuthDeviceRequest::clear_has_deviceinfoxml() {
  _has_bits_[0] &= ~0x00000020u;
}
void ManualAuthDeviceRequest::clear_deviceinfoxml() {
  deviceinfoxml_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_deviceinfoxml();
}
const ::std::string& ManualAuthDeviceRequest::deviceinfoxml() const {
  // @@protoc_insertion_point(field_get:ManualAuthDeviceRequest.deviceInfoXml)
  return deviceinfoxml_.GetNoArena();
}
void ManualAuthDeviceRequest::set_deviceinfoxml(const ::std::string& value) {
  set_has_deviceinfoxml();
  deviceinfoxml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ManualAuthDeviceRequest.deviceInfoXml)
}
#if LANG_CXX11
void ManualAuthDeviceRequest::set_deviceinfoxml(::std::string&& value) {
  set_has_deviceinfoxml();
  deviceinfoxml_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ManualAuthDeviceRequest.deviceInfoXml)
}
#endif
void ManualAuthDeviceRequest::set_deviceinfoxml(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_deviceinfoxml();
  deviceinfoxml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ManualAuthDeviceRequest.deviceInfoXml)
}
void ManualAuthDeviceRequest::set_deviceinfoxml(const char* value, size_t size) {
  set_has_deviceinfoxml();
  deviceinfoxml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ManualAuthDeviceRequest.deviceInfoXml)
}
::std::string* ManualAuthDeviceRequest::mutable_deviceinfoxml() {
  set_has_deviceinfoxml();
  // @@protoc_insertion_point(field_mutable:ManualAuthDeviceRequest.deviceInfoXml)
  return deviceinfoxml_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManualAuthDeviceRequest::release_deviceinfoxml() {
  // @@protoc_insertion_point(field_release:ManualAuthDeviceRequest.deviceInfoXml)
  clear_has_deviceinfoxml();
  return deviceinfoxml_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManualAuthDeviceRequest::set_allocated_deviceinfoxml(::std::string* deviceinfoxml) {
  if (deviceinfoxml != NULL) {
    set_has_deviceinfoxml();
  } else {
    clear_has_deviceinfoxml();
  }
  deviceinfoxml_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deviceinfoxml);
  // @@protoc_insertion_point(field_set_allocated:ManualAuthDeviceRequest.deviceInfoXml)
}

// optional string language = 10;
bool ManualAuthDeviceRequest::has_language() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ManualAuthDeviceRequest::set_has_language() {
  _has_bits_[0] |= 0x00000040u;
}
void ManualAuthDeviceRequest::clear_has_language() {
  _has_bits_[0] &= ~0x00000040u;
}
void ManualAuthDeviceRequest::clear_language() {
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_language();
}
const ::std::string& ManualAuthDeviceRequest::language() const {
  // @@protoc_insertion_point(field_get:ManualAuthDeviceRequest.language)
  return language_.GetNoArena();
}
void ManualAuthDeviceRequest::set_language(const ::std::string& value) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ManualAuthDeviceRequest.language)
}
#if LANG_CXX11
void ManualAuthDeviceRequest::set_language(::std::string&& value) {
  set_has_language();
  language_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ManualAuthDeviceRequest.language)
}
#endif
void ManualAuthDeviceRequest::set_language(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ManualAuthDeviceRequest.language)
}
void ManualAuthDeviceRequest::set_language(const char* value, size_t size) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ManualAuthDeviceRequest.language)
}
::std::string* ManualAuthDeviceRequest::mutable_language() {
  set_has_language();
  // @@protoc_insertion_point(field_mutable:ManualAuthDeviceRequest.language)
  return language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManualAuthDeviceRequest::release_language() {
  // @@protoc_insertion_point(field_release:ManualAuthDeviceRequest.language)
  clear_has_language();
  return language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManualAuthDeviceRequest::set_allocated_language(::std::string* language) {
  if (language != NULL) {
    set_has_language();
  } else {
    clear_has_language();
  }
  language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:ManualAuthDeviceRequest.language)
}

// optional string timeZone = 11;
bool ManualAuthDeviceRequest::has_timezone() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ManualAuthDeviceRequest::set_has_timezone() {
  _has_bits_[0] |= 0x00000080u;
}
void ManualAuthDeviceRequest::clear_has_timezone() {
  _has_bits_[0] &= ~0x00000080u;
}
void ManualAuthDeviceRequest::clear_timezone() {
  timezone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_timezone();
}
const ::std::string& ManualAuthDeviceRequest::timezone() const {
  // @@protoc_insertion_point(field_get:ManualAuthDeviceRequest.timeZone)
  return timezone_.GetNoArena();
}
void ManualAuthDeviceRequest::set_timezone(const ::std::string& value) {
  set_has_timezone();
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ManualAuthDeviceRequest.timeZone)
}
#if LANG_CXX11
void ManualAuthDeviceRequest::set_timezone(::std::string&& value) {
  set_has_timezone();
  timezone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ManualAuthDeviceRequest.timeZone)
}
#endif
void ManualAuthDeviceRequest::set_timezone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_timezone();
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ManualAuthDeviceRequest.timeZone)
}
void ManualAuthDeviceRequest::set_timezone(const char* value, size_t size) {
  set_has_timezone();
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ManualAuthDeviceRequest.timeZone)
}
::std::string* ManualAuthDeviceRequest::mutable_timezone() {
  set_has_timezone();
  // @@protoc_insertion_point(field_mutable:ManualAuthDeviceRequest.timeZone)
  return timezone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManualAuthDeviceRequest::release_timezone() {
  // @@protoc_insertion_point(field_release:ManualAuthDeviceRequest.timeZone)
  clear_has_timezone();
  return timezone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManualAuthDeviceRequest::set_allocated_timezone(::std::string* timezone) {
  if (timezone != NULL) {
    set_has_timezone();
  } else {
    clear_has_timezone();
  }
  timezone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timezone);
  // @@protoc_insertion_point(field_set_allocated:ManualAuthDeviceRequest.timeZone)
}

// optional int32 unknown13 = 13;
bool ManualAuthDeviceRequest::has_unknown13() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void ManualAuthDeviceRequest::set_has_unknown13() {
  _has_bits_[0] |= 0x00008000u;
}
void ManualAuthDeviceRequest::clear_has_unknown13() {
  _has_bits_[0] &= ~0x00008000u;
}
void ManualAuthDeviceRequest::clear_unknown13() {
  unknown13_ = 0;
  clear_has_unknown13();
}
::google::protobuf::int32 ManualAuthDeviceRequest::unknown13() const {
  // @@protoc_insertion_point(field_get:ManualAuthDeviceRequest.unknown13)
  return unknown13_;
}
void ManualAuthDeviceRequest::set_unknown13(::google::protobuf::int32 value) {
  set_has_unknown13();
  unknown13_ = value;
  // @@protoc_insertion_point(field_set:ManualAuthDeviceRequest.unknown13)
}

// optional int32 unknown14 = 14;
bool ManualAuthDeviceRequest::has_unknown14() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void ManualAuthDeviceRequest::set_has_unknown14() {
  _has_bits_[0] |= 0x00010000u;
}
void ManualAuthDeviceRequest::clear_has_unknown14() {
  _has_bits_[0] &= ~0x00010000u;
}
void ManualAuthDeviceRequest::clear_unknown14() {
  unknown14_ = 0;
  clear_has_unknown14();
}
::google::protobuf::int32 ManualAuthDeviceRequest::unknown14() const {
  // @@protoc_insertion_point(field_get:ManualAuthDeviceRequest.unknown14)
  return unknown14_;
}
void ManualAuthDeviceRequest::set_unknown14(::google::protobuf::int32 value) {
  set_has_unknown14();
  unknown14_ = value;
  // @@protoc_insertion_point(field_set:ManualAuthDeviceRequest.unknown14)
}

// optional string deviceBrand = 15;
bool ManualAuthDeviceRequest::has_devicebrand() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ManualAuthDeviceRequest::set_has_devicebrand() {
  _has_bits_[0] |= 0x00000100u;
}
void ManualAuthDeviceRequest::clear_has_devicebrand() {
  _has_bits_[0] &= ~0x00000100u;
}
void ManualAuthDeviceRequest::clear_devicebrand() {
  devicebrand_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_devicebrand();
}
const ::std::string& ManualAuthDeviceRequest::devicebrand() const {
  // @@protoc_insertion_point(field_get:ManualAuthDeviceRequest.deviceBrand)
  return devicebrand_.GetNoArena();
}
void ManualAuthDeviceRequest::set_devicebrand(const ::std::string& value) {
  set_has_devicebrand();
  devicebrand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ManualAuthDeviceRequest.deviceBrand)
}
#if LANG_CXX11
void ManualAuthDeviceRequest::set_devicebrand(::std::string&& value) {
  set_has_devicebrand();
  devicebrand_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ManualAuthDeviceRequest.deviceBrand)
}
#endif
void ManualAuthDeviceRequest::set_devicebrand(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_devicebrand();
  devicebrand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ManualAuthDeviceRequest.deviceBrand)
}
void ManualAuthDeviceRequest::set_devicebrand(const char* value, size_t size) {
  set_has_devicebrand();
  devicebrand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ManualAuthDeviceRequest.deviceBrand)
}
::std::string* ManualAuthDeviceRequest::mutable_devicebrand() {
  set_has_devicebrand();
  // @@protoc_insertion_point(field_mutable:ManualAuthDeviceRequest.deviceBrand)
  return devicebrand_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManualAuthDeviceRequest::release_devicebrand() {
  // @@protoc_insertion_point(field_release:ManualAuthDeviceRequest.deviceBrand)
  clear_has_devicebrand();
  return devicebrand_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManualAuthDeviceRequest::set_allocated_devicebrand(::std::string* devicebrand) {
  if (devicebrand != NULL) {
    set_has_devicebrand();
  } else {
    clear_has_devicebrand();
  }
  devicebrand_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicebrand);
  // @@protoc_insertion_point(field_set_allocated:ManualAuthDeviceRequest.deviceBrand)
}

// optional string deviceModel = 16;
bool ManualAuthDeviceRequest::has_devicemodel() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ManualAuthDeviceRequest::set_has_devicemodel() {
  _has_bits_[0] |= 0x00000200u;
}
void ManualAuthDeviceRequest::clear_has_devicemodel() {
  _has_bits_[0] &= ~0x00000200u;
}
void ManualAuthDeviceRequest::clear_devicemodel() {
  devicemodel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_devicemodel();
}
const ::std::string& ManualAuthDeviceRequest::devicemodel() const {
  // @@protoc_insertion_point(field_get:ManualAuthDeviceRequest.deviceModel)
  return devicemodel_.GetNoArena();
}
void ManualAuthDeviceRequest::set_devicemodel(const ::std::string& value) {
  set_has_devicemodel();
  devicemodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ManualAuthDeviceRequest.deviceModel)
}
#if LANG_CXX11
void ManualAuthDeviceRequest::set_devicemodel(::std::string&& value) {
  set_has_devicemodel();
  devicemodel_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ManualAuthDeviceRequest.deviceModel)
}
#endif
void ManualAuthDeviceRequest::set_devicemodel(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_devicemodel();
  devicemodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ManualAuthDeviceRequest.deviceModel)
}
void ManualAuthDeviceRequest::set_devicemodel(const char* value, size_t size) {
  set_has_devicemodel();
  devicemodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ManualAuthDeviceRequest.deviceModel)
}
::std::string* ManualAuthDeviceRequest::mutable_devicemodel() {
  set_has_devicemodel();
  // @@protoc_insertion_point(field_mutable:ManualAuthDeviceRequest.deviceModel)
  return devicemodel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManualAuthDeviceRequest::release_devicemodel() {
  // @@protoc_insertion_point(field_release:ManualAuthDeviceRequest.deviceModel)
  clear_has_devicemodel();
  return devicemodel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManualAuthDeviceRequest::set_allocated_devicemodel(::std::string* devicemodel) {
  if (devicemodel != NULL) {
    set_has_devicemodel();
  } else {
    clear_has_devicemodel();
  }
  devicemodel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicemodel);
  // @@protoc_insertion_point(field_set_allocated:ManualAuthDeviceRequest.deviceModel)
}

// optional string osType = 17;
bool ManualAuthDeviceRequest::has_ostype() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ManualAuthDeviceRequest::set_has_ostype() {
  _has_bits_[0] |= 0x00000400u;
}
void ManualAuthDeviceRequest::clear_has_ostype() {
  _has_bits_[0] &= ~0x00000400u;
}
void ManualAuthDeviceRequest::clear_ostype() {
  ostype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ostype();
}
const ::std::string& ManualAuthDeviceRequest::ostype() const {
  // @@protoc_insertion_point(field_get:ManualAuthDeviceRequest.osType)
  return ostype_.GetNoArena();
}
void ManualAuthDeviceRequest::set_ostype(const ::std::string& value) {
  set_has_ostype();
  ostype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ManualAuthDeviceRequest.osType)
}
#if LANG_CXX11
void ManualAuthDeviceRequest::set_ostype(::std::string&& value) {
  set_has_ostype();
  ostype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ManualAuthDeviceRequest.osType)
}
#endif
void ManualAuthDeviceRequest::set_ostype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ostype();
  ostype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ManualAuthDeviceRequest.osType)
}
void ManualAuthDeviceRequest::set_ostype(const char* value, size_t size) {
  set_has_ostype();
  ostype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ManualAuthDeviceRequest.osType)
}
::std::string* ManualAuthDeviceRequest::mutable_ostype() {
  set_has_ostype();
  // @@protoc_insertion_point(field_mutable:ManualAuthDeviceRequest.osType)
  return ostype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManualAuthDeviceRequest::release_ostype() {
  // @@protoc_insertion_point(field_release:ManualAuthDeviceRequest.osType)
  clear_has_ostype();
  return ostype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManualAuthDeviceRequest::set_allocated_ostype(::std::string* ostype) {
  if (ostype != NULL) {
    set_has_ostype();
  } else {
    clear_has_ostype();
  }
  ostype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ostype);
  // @@protoc_insertion_point(field_set_allocated:ManualAuthDeviceRequest.osType)
}

// optional string realCountry = 18;
bool ManualAuthDeviceRequest::has_realcountry() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ManualAuthDeviceRequest::set_has_realcountry() {
  _has_bits_[0] |= 0x00000800u;
}
void ManualAuthDeviceRequest::clear_has_realcountry() {
  _has_bits_[0] &= ~0x00000800u;
}
void ManualAuthDeviceRequest::clear_realcountry() {
  realcountry_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_realcountry();
}
const ::std::string& ManualAuthDeviceRequest::realcountry() const {
  // @@protoc_insertion_point(field_get:ManualAuthDeviceRequest.realCountry)
  return realcountry_.GetNoArena();
}
void ManualAuthDeviceRequest::set_realcountry(const ::std::string& value) {
  set_has_realcountry();
  realcountry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ManualAuthDeviceRequest.realCountry)
}
#if LANG_CXX11
void ManualAuthDeviceRequest::set_realcountry(::std::string&& value) {
  set_has_realcountry();
  realcountry_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ManualAuthDeviceRequest.realCountry)
}
#endif
void ManualAuthDeviceRequest::set_realcountry(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_realcountry();
  realcountry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ManualAuthDeviceRequest.realCountry)
}
void ManualAuthDeviceRequest::set_realcountry(const char* value, size_t size) {
  set_has_realcountry();
  realcountry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ManualAuthDeviceRequest.realCountry)
}
::std::string* ManualAuthDeviceRequest::mutable_realcountry() {
  set_has_realcountry();
  // @@protoc_insertion_point(field_mutable:ManualAuthDeviceRequest.realCountry)
  return realcountry_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManualAuthDeviceRequest::release_realcountry() {
  // @@protoc_insertion_point(field_release:ManualAuthDeviceRequest.realCountry)
  clear_has_realcountry();
  return realcountry_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManualAuthDeviceRequest::set_allocated_realcountry(::std::string* realcountry) {
  if (realcountry != NULL) {
    set_has_realcountry();
  } else {
    clear_has_realcountry();
  }
  realcountry_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), realcountry);
  // @@protoc_insertion_point(field_set_allocated:ManualAuthDeviceRequest.realCountry)
}

// optional int32 unknown22 = 22;
bool ManualAuthDeviceRequest::has_unknown22() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void ManualAuthDeviceRequest::set_has_unknown22() {
  _has_bits_[0] |= 0x00020000u;
}
void ManualAuthDeviceRequest::clear_has_unknown22() {
  _has_bits_[0] &= ~0x00020000u;
}
void ManualAuthDeviceRequest::clear_unknown22() {
  unknown22_ = 0;
  clear_has_unknown22();
}
::google::protobuf::int32 ManualAuthDeviceRequest::unknown22() const {
  // @@protoc_insertion_point(field_get:ManualAuthDeviceRequest.unknown22)
  return unknown22_;
}
void ManualAuthDeviceRequest::set_unknown22(::google::protobuf::int32 value) {
  set_has_unknown22();
  unknown22_ = value;
  // @@protoc_insertion_point(field_set:ManualAuthDeviceRequest.unknown22)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ManualAuthResponse_AuthResult_ErrMsg::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ManualAuthResponse_AuthResult_ErrMsg::ManualAuthResponse_AuthResult_ErrMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ManualAuthResponse.AuthResult.ErrMsg)
}
ManualAuthResponse_AuthResult_ErrMsg::ManualAuthResponse_AuthResult_ErrMsg(const ManualAuthResponse_AuthResult_ErrMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_msg()) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:ManualAuthResponse.AuthResult.ErrMsg)
}

void ManualAuthResponse_AuthResult_ErrMsg::SharedCtor() {
  _cached_size_ = 0;
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ManualAuthResponse_AuthResult_ErrMsg::~ManualAuthResponse_AuthResult_ErrMsg() {
  // @@protoc_insertion_point(destructor:ManualAuthResponse.AuthResult.ErrMsg)
  SharedDtor();
}

void ManualAuthResponse_AuthResult_ErrMsg::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ManualAuthResponse_AuthResult_ErrMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ManualAuthResponse_AuthResult_ErrMsg::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ManualAuthResponse_AuthResult_ErrMsg& ManualAuthResponse_AuthResult_ErrMsg::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

ManualAuthResponse_AuthResult_ErrMsg* ManualAuthResponse_AuthResult_ErrMsg::New(::google::protobuf::Arena* arena) const {
  ManualAuthResponse_AuthResult_ErrMsg* n = new ManualAuthResponse_AuthResult_ErrMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ManualAuthResponse_AuthResult_ErrMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:ManualAuthResponse.AuthResult.ErrMsg)
  if (has_msg()) {
    GOOGLE_DCHECK(!msg_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*msg_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ManualAuthResponse_AuthResult_ErrMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ManualAuthResponse.AuthResult.ErrMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msg = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ManualAuthResponse.AuthResult.ErrMsg.msg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ManualAuthResponse.AuthResult.ErrMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ManualAuthResponse.AuthResult.ErrMsg)
  return false;
#undef DO_
}

void ManualAuthResponse_AuthResult_ErrMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ManualAuthResponse.AuthResult.ErrMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string msg = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthResponse.AuthResult.ErrMsg.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ManualAuthResponse.AuthResult.ErrMsg)
}

::google::protobuf::uint8* ManualAuthResponse_AuthResult_ErrMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ManualAuthResponse.AuthResult.ErrMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string msg = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthResponse.AuthResult.ErrMsg.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ManualAuthResponse.AuthResult.ErrMsg)
  return target;
}

size_t ManualAuthResponse_AuthResult_ErrMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ManualAuthResponse.AuthResult.ErrMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string msg = 1;
  if (has_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ManualAuthResponse_AuthResult_ErrMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ManualAuthResponse.AuthResult.ErrMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const ManualAuthResponse_AuthResult_ErrMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ManualAuthResponse_AuthResult_ErrMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ManualAuthResponse.AuthResult.ErrMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ManualAuthResponse.AuthResult.ErrMsg)
    MergeFrom(*source);
  }
}

void ManualAuthResponse_AuthResult_ErrMsg::MergeFrom(const ManualAuthResponse_AuthResult_ErrMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ManualAuthResponse.AuthResult.ErrMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_msg()) {
    set_has_msg();
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void ManualAuthResponse_AuthResult_ErrMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ManualAuthResponse.AuthResult.ErrMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManualAuthResponse_AuthResult_ErrMsg::CopyFrom(const ManualAuthResponse_AuthResult_ErrMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ManualAuthResponse.AuthResult.ErrMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManualAuthResponse_AuthResult_ErrMsg::IsInitialized() const {
  return true;
}

void ManualAuthResponse_AuthResult_ErrMsg::Swap(ManualAuthResponse_AuthResult_ErrMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ManualAuthResponse_AuthResult_ErrMsg::InternalSwap(ManualAuthResponse_AuthResult_ErrMsg* other) {
  msg_.Swap(&other->msg_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ManualAuthResponse_AuthResult_ErrMsg::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ManualAuthResponse_AuthResult_ErrMsg

// optional string msg = 1;
bool ManualAuthResponse_AuthResult_ErrMsg::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ManualAuthResponse_AuthResult_ErrMsg::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
void ManualAuthResponse_AuthResult_ErrMsg::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
void ManualAuthResponse_AuthResult_ErrMsg::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
const ::std::string& ManualAuthResponse_AuthResult_ErrMsg::msg() const {
  // @@protoc_insertion_point(field_get:ManualAuthResponse.AuthResult.ErrMsg.msg)
  return msg_.GetNoArena();
}
void ManualAuthResponse_AuthResult_ErrMsg::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ManualAuthResponse.AuthResult.ErrMsg.msg)
}
#if LANG_CXX11
void ManualAuthResponse_AuthResult_ErrMsg::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ManualAuthResponse.AuthResult.ErrMsg.msg)
}
#endif
void ManualAuthResponse_AuthResult_ErrMsg::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ManualAuthResponse.AuthResult.ErrMsg.msg)
}
void ManualAuthResponse_AuthResult_ErrMsg::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ManualAuthResponse.AuthResult.ErrMsg.msg)
}
::std::string* ManualAuthResponse_AuthResult_ErrMsg::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:ManualAuthResponse.AuthResult.ErrMsg.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManualAuthResponse_AuthResult_ErrMsg::release_msg() {
  // @@protoc_insertion_point(field_release:ManualAuthResponse.AuthResult.ErrMsg.msg)
  clear_has_msg();
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManualAuthResponse_AuthResult_ErrMsg::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:ManualAuthResponse.AuthResult.ErrMsg.msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ManualAuthResponse_AuthResult::kCodeFieldNumber;
const int ManualAuthResponse_AuthResult::kErrMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ManualAuthResponse_AuthResult::ManualAuthResponse_AuthResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ManualAuthResponse.AuthResult)
}
ManualAuthResponse_AuthResult::ManualAuthResponse_AuthResult(const ManualAuthResponse_AuthResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_err_msg()) {
    err_msg_ = new ::ManualAuthResponse_AuthResult_ErrMsg(*from.err_msg_);
  } else {
    err_msg_ = NULL;
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:ManualAuthResponse.AuthResult)
}

void ManualAuthResponse_AuthResult::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&err_msg_, 0, reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&err_msg_) + sizeof(code_));
}

ManualAuthResponse_AuthResult::~ManualAuthResponse_AuthResult() {
  // @@protoc_insertion_point(destructor:ManualAuthResponse.AuthResult)
  SharedDtor();
}

void ManualAuthResponse_AuthResult::SharedDtor() {
  if (this != internal_default_instance()) {
    delete err_msg_;
  }
}

void ManualAuthResponse_AuthResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ManualAuthResponse_AuthResult::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ManualAuthResponse_AuthResult& ManualAuthResponse_AuthResult::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

ManualAuthResponse_AuthResult* ManualAuthResponse_AuthResult::New(::google::protobuf::Arena* arena) const {
  ManualAuthResponse_AuthResult* n = new ManualAuthResponse_AuthResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ManualAuthResponse_AuthResult::Clear() {
// @@protoc_insertion_point(message_clear_start:ManualAuthResponse.AuthResult)
  if (has_err_msg()) {
    GOOGLE_DCHECK(err_msg_ != NULL);
    err_msg_->::ManualAuthResponse_AuthResult_ErrMsg::Clear();
  }
  code_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ManualAuthResponse_AuthResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ManualAuthResponse.AuthResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ManualAuthResponse.AuthResult.ErrMsg err_msg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_err_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ManualAuthResponse.AuthResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ManualAuthResponse.AuthResult)
  return false;
#undef DO_
}

void ManualAuthResponse_AuthResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ManualAuthResponse.AuthResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 code = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // required .ManualAuthResponse.AuthResult.ErrMsg err_msg = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->err_msg_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ManualAuthResponse.AuthResult)
}

::google::protobuf::uint8* ManualAuthResponse_AuthResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ManualAuthResponse.AuthResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // required .ManualAuthResponse.AuthResult.ErrMsg err_msg = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->err_msg_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ManualAuthResponse.AuthResult)
  return target;
}

size_t ManualAuthResponse_AuthResult::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ManualAuthResponse.AuthResult)
  size_t total_size = 0;

  if (has_err_msg()) {
    // required .ManualAuthResponse.AuthResult.ErrMsg err_msg = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->err_msg_);
  }

  if (has_code()) {
    // required int32 code = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  return total_size;
}
size_t ManualAuthResponse_AuthResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ManualAuthResponse.AuthResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .ManualAuthResponse.AuthResult.ErrMsg err_msg = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->err_msg_);

    // required int32 code = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ManualAuthResponse_AuthResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ManualAuthResponse.AuthResult)
  GOOGLE_DCHECK_NE(&from, this);
  const ManualAuthResponse_AuthResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ManualAuthResponse_AuthResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ManualAuthResponse.AuthResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ManualAuthResponse.AuthResult)
    MergeFrom(*source);
  }
}

void ManualAuthResponse_AuthResult::MergeFrom(const ManualAuthResponse_AuthResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ManualAuthResponse.AuthResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_err_msg()->::ManualAuthResponse_AuthResult_ErrMsg::MergeFrom(from.err_msg());
    }
    if (cached_has_bits & 0x00000002u) {
      code_ = from.code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ManualAuthResponse_AuthResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ManualAuthResponse.AuthResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManualAuthResponse_AuthResult::CopyFrom(const ManualAuthResponse_AuthResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ManualAuthResponse.AuthResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManualAuthResponse_AuthResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ManualAuthResponse_AuthResult::Swap(ManualAuthResponse_AuthResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ManualAuthResponse_AuthResult::InternalSwap(ManualAuthResponse_AuthResult* other) {
  std::swap(err_msg_, other->err_msg_);
  std::swap(code_, other->code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ManualAuthResponse_AuthResult::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ManualAuthResponse_AuthResult

// required int32 code = 1;
bool ManualAuthResponse_AuthResult::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ManualAuthResponse_AuthResult::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
void ManualAuthResponse_AuthResult::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void ManualAuthResponse_AuthResult::clear_code() {
  code_ = 0;
  clear_has_code();
}
::google::protobuf::int32 ManualAuthResponse_AuthResult::code() const {
  // @@protoc_insertion_point(field_get:ManualAuthResponse.AuthResult.code)
  return code_;
}
void ManualAuthResponse_AuthResult::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:ManualAuthResponse.AuthResult.code)
}

// required .ManualAuthResponse.AuthResult.ErrMsg err_msg = 2;
bool ManualAuthResponse_AuthResult::has_err_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ManualAuthResponse_AuthResult::set_has_err_msg() {
  _has_bits_[0] |= 0x00000001u;
}
void ManualAuthResponse_AuthResult::clear_has_err_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
void ManualAuthResponse_AuthResult::clear_err_msg() {
  if (err_msg_ != NULL) err_msg_->::ManualAuthResponse_AuthResult_ErrMsg::Clear();
  clear_has_err_msg();
}
const ::ManualAuthResponse_AuthResult_ErrMsg& ManualAuthResponse_AuthResult::err_msg() const {
  // @@protoc_insertion_point(field_get:ManualAuthResponse.AuthResult.err_msg)
  return err_msg_ != NULL ? *err_msg_
                         : *::ManualAuthResponse_AuthResult_ErrMsg::internal_default_instance();
}
::ManualAuthResponse_AuthResult_ErrMsg* ManualAuthResponse_AuthResult::mutable_err_msg() {
  set_has_err_msg();
  if (err_msg_ == NULL) {
    err_msg_ = new ::ManualAuthResponse_AuthResult_ErrMsg;
  }
  // @@protoc_insertion_point(field_mutable:ManualAuthResponse.AuthResult.err_msg)
  return err_msg_;
}
::ManualAuthResponse_AuthResult_ErrMsg* ManualAuthResponse_AuthResult::release_err_msg() {
  // @@protoc_insertion_point(field_release:ManualAuthResponse.AuthResult.err_msg)
  clear_has_err_msg();
  ::ManualAuthResponse_AuthResult_ErrMsg* temp = err_msg_;
  err_msg_ = NULL;
  return temp;
}
void ManualAuthResponse_AuthResult::set_allocated_err_msg(::ManualAuthResponse_AuthResult_ErrMsg* err_msg) {
  delete err_msg_;
  err_msg_ = err_msg;
  if (err_msg) {
    set_has_err_msg();
  } else {
    clear_has_err_msg();
  }
  // @@protoc_insertion_point(field_set_allocated:ManualAuthResponse.AuthResult.err_msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ManualAuthResponse_AuthParam_Ecdh_EcdhKey::kLenFieldNumber;
const int ManualAuthResponse_AuthParam_Ecdh_EcdhKey::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ManualAuthResponse_AuthParam_Ecdh_EcdhKey::ManualAuthResponse_AuthParam_Ecdh_EcdhKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ManualAuthResponse.AuthParam.Ecdh.EcdhKey)
}
ManualAuthResponse_AuthParam_Ecdh_EcdhKey::ManualAuthResponse_AuthParam_Ecdh_EcdhKey(const ManualAuthResponse_AuthParam_Ecdh_EcdhKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  len_ = from.len_;
  // @@protoc_insertion_point(copy_constructor:ManualAuthResponse.AuthParam.Ecdh.EcdhKey)
}

void ManualAuthResponse_AuthParam_Ecdh_EcdhKey::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  len_ = 0;
}

ManualAuthResponse_AuthParam_Ecdh_EcdhKey::~ManualAuthResponse_AuthParam_Ecdh_EcdhKey() {
  // @@protoc_insertion_point(destructor:ManualAuthResponse.AuthParam.Ecdh.EcdhKey)
  SharedDtor();
}

void ManualAuthResponse_AuthParam_Ecdh_EcdhKey::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ManualAuthResponse_AuthParam_Ecdh_EcdhKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ManualAuthResponse_AuthParam_Ecdh_EcdhKey::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ManualAuthResponse_AuthParam_Ecdh_EcdhKey& ManualAuthResponse_AuthParam_Ecdh_EcdhKey::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

ManualAuthResponse_AuthParam_Ecdh_EcdhKey* ManualAuthResponse_AuthParam_Ecdh_EcdhKey::New(::google::protobuf::Arena* arena) const {
  ManualAuthResponse_AuthParam_Ecdh_EcdhKey* n = new ManualAuthResponse_AuthParam_Ecdh_EcdhKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ManualAuthResponse_AuthParam_Ecdh_EcdhKey::Clear() {
// @@protoc_insertion_point(message_clear_start:ManualAuthResponse.AuthParam.Ecdh.EcdhKey)
  if (has_key()) {
    GOOGLE_DCHECK(!key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*key_.UnsafeRawStringPointer())->clear();
  }
  len_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ManualAuthResponse_AuthParam_Ecdh_EcdhKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ManualAuthResponse.AuthParam.Ecdh.EcdhKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 len = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_len();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &len_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ManualAuthResponse.AuthParam.Ecdh.EcdhKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ManualAuthResponse.AuthParam.Ecdh.EcdhKey)
  return false;
#undef DO_
}

void ManualAuthResponse_AuthParam_Ecdh_EcdhKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ManualAuthResponse.AuthParam.Ecdh.EcdhKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 len = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->len(), output);
  }

  // optional bytes key = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ManualAuthResponse.AuthParam.Ecdh.EcdhKey)
}

::google::protobuf::uint8* ManualAuthResponse_AuthParam_Ecdh_EcdhKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ManualAuthResponse.AuthParam.Ecdh.EcdhKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 len = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->len(), target);
  }

  // optional bytes key = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ManualAuthResponse.AuthParam.Ecdh.EcdhKey)
  return target;
}

size_t ManualAuthResponse_AuthParam_Ecdh_EcdhKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ManualAuthResponse.AuthParam.Ecdh.EcdhKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required int32 len = 1;
  if (has_len()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->len());
  }
  // optional bytes key = 2;
  if (has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ManualAuthResponse_AuthParam_Ecdh_EcdhKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ManualAuthResponse.AuthParam.Ecdh.EcdhKey)
  GOOGLE_DCHECK_NE(&from, this);
  const ManualAuthResponse_AuthParam_Ecdh_EcdhKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ManualAuthResponse_AuthParam_Ecdh_EcdhKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ManualAuthResponse.AuthParam.Ecdh.EcdhKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ManualAuthResponse.AuthParam.Ecdh.EcdhKey)
    MergeFrom(*source);
  }
}

void ManualAuthResponse_AuthParam_Ecdh_EcdhKey::MergeFrom(const ManualAuthResponse_AuthParam_Ecdh_EcdhKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ManualAuthResponse.AuthParam.Ecdh.EcdhKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      len_ = from.len_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ManualAuthResponse_AuthParam_Ecdh_EcdhKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ManualAuthResponse.AuthParam.Ecdh.EcdhKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManualAuthResponse_AuthParam_Ecdh_EcdhKey::CopyFrom(const ManualAuthResponse_AuthParam_Ecdh_EcdhKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ManualAuthResponse.AuthParam.Ecdh.EcdhKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManualAuthResponse_AuthParam_Ecdh_EcdhKey::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void ManualAuthResponse_AuthParam_Ecdh_EcdhKey::Swap(ManualAuthResponse_AuthParam_Ecdh_EcdhKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ManualAuthResponse_AuthParam_Ecdh_EcdhKey::InternalSwap(ManualAuthResponse_AuthParam_Ecdh_EcdhKey* other) {
  key_.Swap(&other->key_);
  std::swap(len_, other->len_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ManualAuthResponse_AuthParam_Ecdh_EcdhKey::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ManualAuthResponse_AuthParam_Ecdh_EcdhKey

// required int32 len = 1;
bool ManualAuthResponse_AuthParam_Ecdh_EcdhKey::has_len() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ManualAuthResponse_AuthParam_Ecdh_EcdhKey::set_has_len() {
  _has_bits_[0] |= 0x00000002u;
}
void ManualAuthResponse_AuthParam_Ecdh_EcdhKey::clear_has_len() {
  _has_bits_[0] &= ~0x00000002u;
}
void ManualAuthResponse_AuthParam_Ecdh_EcdhKey::clear_len() {
  len_ = 0;
  clear_has_len();
}
::google::protobuf::int32 ManualAuthResponse_AuthParam_Ecdh_EcdhKey::len() const {
  // @@protoc_insertion_point(field_get:ManualAuthResponse.AuthParam.Ecdh.EcdhKey.len)
  return len_;
}
void ManualAuthResponse_AuthParam_Ecdh_EcdhKey::set_len(::google::protobuf::int32 value) {
  set_has_len();
  len_ = value;
  // @@protoc_insertion_point(field_set:ManualAuthResponse.AuthParam.Ecdh.EcdhKey.len)
}

// optional bytes key = 2;
bool ManualAuthResponse_AuthParam_Ecdh_EcdhKey::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ManualAuthResponse_AuthParam_Ecdh_EcdhKey::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void ManualAuthResponse_AuthParam_Ecdh_EcdhKey::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void ManualAuthResponse_AuthParam_Ecdh_EcdhKey::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& ManualAuthResponse_AuthParam_Ecdh_EcdhKey::key() const {
  // @@protoc_insertion_point(field_get:ManualAuthResponse.AuthParam.Ecdh.EcdhKey.key)
  return key_.GetNoArena();
}
void ManualAuthResponse_AuthParam_Ecdh_EcdhKey::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ManualAuthResponse.AuthParam.Ecdh.EcdhKey.key)
}
#if LANG_CXX11
void ManualAuthResponse_AuthParam_Ecdh_EcdhKey::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ManualAuthResponse.AuthParam.Ecdh.EcdhKey.key)
}
#endif
void ManualAuthResponse_AuthParam_Ecdh_EcdhKey::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ManualAuthResponse.AuthParam.Ecdh.EcdhKey.key)
}
void ManualAuthResponse_AuthParam_Ecdh_EcdhKey::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ManualAuthResponse.AuthParam.Ecdh.EcdhKey.key)
}
::std::string* ManualAuthResponse_AuthParam_Ecdh_EcdhKey::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:ManualAuthResponse.AuthParam.Ecdh.EcdhKey.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManualAuthResponse_AuthParam_Ecdh_EcdhKey::release_key() {
  // @@protoc_insertion_point(field_release:ManualAuthResponse.AuthParam.Ecdh.EcdhKey.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManualAuthResponse_AuthParam_Ecdh_EcdhKey::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:ManualAuthResponse.AuthParam.Ecdh.EcdhKey.key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ManualAuthResponse_AuthParam_Ecdh::kNidFieldNumber;
const int ManualAuthResponse_AuthParam_Ecdh::kEcdhKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ManualAuthResponse_AuthParam_Ecdh::ManualAuthResponse_AuthParam_Ecdh()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ManualAuthResponse.AuthParam.Ecdh)
}
ManualAuthResponse_AuthParam_Ecdh::ManualAuthResponse_AuthParam_Ecdh(const ManualAuthResponse_AuthParam_Ecdh& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ecdhkey()) {
    ecdhkey_ = new ::ManualAuthResponse_AuthParam_Ecdh_EcdhKey(*from.ecdhkey_);
  } else {
    ecdhkey_ = NULL;
  }
  nid_ = from.nid_;
  // @@protoc_insertion_point(copy_constructor:ManualAuthResponse.AuthParam.Ecdh)
}

void ManualAuthResponse_AuthParam_Ecdh::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ecdhkey_, 0, reinterpret_cast<char*>(&nid_) -
    reinterpret_cast<char*>(&ecdhkey_) + sizeof(nid_));
}

ManualAuthResponse_AuthParam_Ecdh::~ManualAuthResponse_AuthParam_Ecdh() {
  // @@protoc_insertion_point(destructor:ManualAuthResponse.AuthParam.Ecdh)
  SharedDtor();
}

void ManualAuthResponse_AuthParam_Ecdh::SharedDtor() {
  if (this != internal_default_instance()) {
    delete ecdhkey_;
  }
}

void ManualAuthResponse_AuthParam_Ecdh::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ManualAuthResponse_AuthParam_Ecdh::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ManualAuthResponse_AuthParam_Ecdh& ManualAuthResponse_AuthParam_Ecdh::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

ManualAuthResponse_AuthParam_Ecdh* ManualAuthResponse_AuthParam_Ecdh::New(::google::protobuf::Arena* arena) const {
  ManualAuthResponse_AuthParam_Ecdh* n = new ManualAuthResponse_AuthParam_Ecdh;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ManualAuthResponse_AuthParam_Ecdh::Clear() {
// @@protoc_insertion_point(message_clear_start:ManualAuthResponse.AuthParam.Ecdh)
  if (has_ecdhkey()) {
    GOOGLE_DCHECK(ecdhkey_ != NULL);
    ecdhkey_->::ManualAuthResponse_AuthParam_Ecdh_EcdhKey::Clear();
  }
  nid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ManualAuthResponse_AuthParam_Ecdh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ManualAuthResponse.AuthParam.Ecdh)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_nid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ManualAuthResponse.AuthParam.Ecdh.EcdhKey ecdhKey = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ecdhkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ManualAuthResponse.AuthParam.Ecdh)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ManualAuthResponse.AuthParam.Ecdh)
  return false;
#undef DO_
}

void ManualAuthResponse_AuthParam_Ecdh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ManualAuthResponse.AuthParam.Ecdh)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 nid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nid(), output);
  }

  // optional .ManualAuthResponse.AuthParam.Ecdh.EcdhKey ecdhKey = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->ecdhkey_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ManualAuthResponse.AuthParam.Ecdh)
}

::google::protobuf::uint8* ManualAuthResponse_AuthParam_Ecdh::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ManualAuthResponse.AuthParam.Ecdh)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 nid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nid(), target);
  }

  // optional .ManualAuthResponse.AuthParam.Ecdh.EcdhKey ecdhKey = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->ecdhkey_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ManualAuthResponse.AuthParam.Ecdh)
  return target;
}

size_t ManualAuthResponse_AuthParam_Ecdh::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ManualAuthResponse.AuthParam.Ecdh)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required int32 nid = 1;
  if (has_nid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nid());
  }
  // optional .ManualAuthResponse.AuthParam.Ecdh.EcdhKey ecdhKey = 2;
  if (has_ecdhkey()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ecdhkey_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ManualAuthResponse_AuthParam_Ecdh::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ManualAuthResponse.AuthParam.Ecdh)
  GOOGLE_DCHECK_NE(&from, this);
  const ManualAuthResponse_AuthParam_Ecdh* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ManualAuthResponse_AuthParam_Ecdh>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ManualAuthResponse.AuthParam.Ecdh)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ManualAuthResponse.AuthParam.Ecdh)
    MergeFrom(*source);
  }
}

void ManualAuthResponse_AuthParam_Ecdh::MergeFrom(const ManualAuthResponse_AuthParam_Ecdh& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ManualAuthResponse.AuthParam.Ecdh)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_ecdhkey()->::ManualAuthResponse_AuthParam_Ecdh_EcdhKey::MergeFrom(from.ecdhkey());
    }
    if (cached_has_bits & 0x00000002u) {
      nid_ = from.nid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ManualAuthResponse_AuthParam_Ecdh::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ManualAuthResponse.AuthParam.Ecdh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManualAuthResponse_AuthParam_Ecdh::CopyFrom(const ManualAuthResponse_AuthParam_Ecdh& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ManualAuthResponse.AuthParam.Ecdh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManualAuthResponse_AuthParam_Ecdh::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_ecdhkey()) {
    if (!this->ecdhkey_->IsInitialized()) return false;
  }
  return true;
}

void ManualAuthResponse_AuthParam_Ecdh::Swap(ManualAuthResponse_AuthParam_Ecdh* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ManualAuthResponse_AuthParam_Ecdh::InternalSwap(ManualAuthResponse_AuthParam_Ecdh* other) {
  std::swap(ecdhkey_, other->ecdhkey_);
  std::swap(nid_, other->nid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ManualAuthResponse_AuthParam_Ecdh::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ManualAuthResponse_AuthParam_Ecdh

// required int32 nid = 1;
bool ManualAuthResponse_AuthParam_Ecdh::has_nid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ManualAuthResponse_AuthParam_Ecdh::set_has_nid() {
  _has_bits_[0] |= 0x00000002u;
}
void ManualAuthResponse_AuthParam_Ecdh::clear_has_nid() {
  _has_bits_[0] &= ~0x00000002u;
}
void ManualAuthResponse_AuthParam_Ecdh::clear_nid() {
  nid_ = 0;
  clear_has_nid();
}
::google::protobuf::int32 ManualAuthResponse_AuthParam_Ecdh::nid() const {
  // @@protoc_insertion_point(field_get:ManualAuthResponse.AuthParam.Ecdh.nid)
  return nid_;
}
void ManualAuthResponse_AuthParam_Ecdh::set_nid(::google::protobuf::int32 value) {
  set_has_nid();
  nid_ = value;
  // @@protoc_insertion_point(field_set:ManualAuthResponse.AuthParam.Ecdh.nid)
}

// optional .ManualAuthResponse.AuthParam.Ecdh.EcdhKey ecdhKey = 2;
bool ManualAuthResponse_AuthParam_Ecdh::has_ecdhkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ManualAuthResponse_AuthParam_Ecdh::set_has_ecdhkey() {
  _has_bits_[0] |= 0x00000001u;
}
void ManualAuthResponse_AuthParam_Ecdh::clear_has_ecdhkey() {
  _has_bits_[0] &= ~0x00000001u;
}
void ManualAuthResponse_AuthParam_Ecdh::clear_ecdhkey() {
  if (ecdhkey_ != NULL) ecdhkey_->::ManualAuthResponse_AuthParam_Ecdh_EcdhKey::Clear();
  clear_has_ecdhkey();
}
const ::ManualAuthResponse_AuthParam_Ecdh_EcdhKey& ManualAuthResponse_AuthParam_Ecdh::ecdhkey() const {
  // @@protoc_insertion_point(field_get:ManualAuthResponse.AuthParam.Ecdh.ecdhKey)
  return ecdhkey_ != NULL ? *ecdhkey_
                         : *::ManualAuthResponse_AuthParam_Ecdh_EcdhKey::internal_default_instance();
}
::ManualAuthResponse_AuthParam_Ecdh_EcdhKey* ManualAuthResponse_AuthParam_Ecdh::mutable_ecdhkey() {
  set_has_ecdhkey();
  if (ecdhkey_ == NULL) {
    ecdhkey_ = new ::ManualAuthResponse_AuthParam_Ecdh_EcdhKey;
  }
  // @@protoc_insertion_point(field_mutable:ManualAuthResponse.AuthParam.Ecdh.ecdhKey)
  return ecdhkey_;
}
::ManualAuthResponse_AuthParam_Ecdh_EcdhKey* ManualAuthResponse_AuthParam_Ecdh::release_ecdhkey() {
  // @@protoc_insertion_point(field_release:ManualAuthResponse.AuthParam.Ecdh.ecdhKey)
  clear_has_ecdhkey();
  ::ManualAuthResponse_AuthParam_Ecdh_EcdhKey* temp = ecdhkey_;
  ecdhkey_ = NULL;
  return temp;
}
void ManualAuthResponse_AuthParam_Ecdh::set_allocated_ecdhkey(::ManualAuthResponse_AuthParam_Ecdh_EcdhKey* ecdhkey) {
  delete ecdhkey_;
  ecdhkey_ = ecdhkey;
  if (ecdhkey) {
    set_has_ecdhkey();
  } else {
    clear_has_ecdhkey();
  }
  // @@protoc_insertion_point(field_set_allocated:ManualAuthResponse.AuthParam.Ecdh.ecdhKey)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ManualAuthResponse_AuthParam_SessionKey::kLenFieldNumber;
const int ManualAuthResponse_AuthParam_SessionKey::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ManualAuthResponse_AuthParam_SessionKey::ManualAuthResponse_AuthParam_SessionKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ManualAuthResponse.AuthParam.SessionKey)
}
ManualAuthResponse_AuthParam_SessionKey::ManualAuthResponse_AuthParam_SessionKey(const ManualAuthResponse_AuthParam_SessionKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  len_ = from.len_;
  // @@protoc_insertion_point(copy_constructor:ManualAuthResponse.AuthParam.SessionKey)
}

void ManualAuthResponse_AuthParam_SessionKey::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  len_ = 0;
}

ManualAuthResponse_AuthParam_SessionKey::~ManualAuthResponse_AuthParam_SessionKey() {
  // @@protoc_insertion_point(destructor:ManualAuthResponse.AuthParam.SessionKey)
  SharedDtor();
}

void ManualAuthResponse_AuthParam_SessionKey::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ManualAuthResponse_AuthParam_SessionKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ManualAuthResponse_AuthParam_SessionKey::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ManualAuthResponse_AuthParam_SessionKey& ManualAuthResponse_AuthParam_SessionKey::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

ManualAuthResponse_AuthParam_SessionKey* ManualAuthResponse_AuthParam_SessionKey::New(::google::protobuf::Arena* arena) const {
  ManualAuthResponse_AuthParam_SessionKey* n = new ManualAuthResponse_AuthParam_SessionKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ManualAuthResponse_AuthParam_SessionKey::Clear() {
// @@protoc_insertion_point(message_clear_start:ManualAuthResponse.AuthParam.SessionKey)
  if (has_key()) {
    GOOGLE_DCHECK(!key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*key_.UnsafeRawStringPointer())->clear();
  }
  len_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ManualAuthResponse_AuthParam_SessionKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ManualAuthResponse.AuthParam.SessionKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 len = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_len();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &len_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ManualAuthResponse.AuthParam.SessionKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ManualAuthResponse.AuthParam.SessionKey)
  return false;
#undef DO_
}

void ManualAuthResponse_AuthParam_SessionKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ManualAuthResponse.AuthParam.SessionKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 len = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->len(), output);
  }

  // optional bytes key = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ManualAuthResponse.AuthParam.SessionKey)
}

::google::protobuf::uint8* ManualAuthResponse_AuthParam_SessionKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ManualAuthResponse.AuthParam.SessionKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 len = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->len(), target);
  }

  // optional bytes key = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ManualAuthResponse.AuthParam.SessionKey)
  return target;
}

size_t ManualAuthResponse_AuthParam_SessionKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ManualAuthResponse.AuthParam.SessionKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required int32 len = 1;
  if (has_len()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->len());
  }
  // optional bytes key = 2;
  if (has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ManualAuthResponse_AuthParam_SessionKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ManualAuthResponse.AuthParam.SessionKey)
  GOOGLE_DCHECK_NE(&from, this);
  const ManualAuthResponse_AuthParam_SessionKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ManualAuthResponse_AuthParam_SessionKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ManualAuthResponse.AuthParam.SessionKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ManualAuthResponse.AuthParam.SessionKey)
    MergeFrom(*source);
  }
}

void ManualAuthResponse_AuthParam_SessionKey::MergeFrom(const ManualAuthResponse_AuthParam_SessionKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ManualAuthResponse.AuthParam.SessionKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      len_ = from.len_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ManualAuthResponse_AuthParam_SessionKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ManualAuthResponse.AuthParam.SessionKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManualAuthResponse_AuthParam_SessionKey::CopyFrom(const ManualAuthResponse_AuthParam_SessionKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ManualAuthResponse.AuthParam.SessionKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManualAuthResponse_AuthParam_SessionKey::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void ManualAuthResponse_AuthParam_SessionKey::Swap(ManualAuthResponse_AuthParam_SessionKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ManualAuthResponse_AuthParam_SessionKey::InternalSwap(ManualAuthResponse_AuthParam_SessionKey* other) {
  key_.Swap(&other->key_);
  std::swap(len_, other->len_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ManualAuthResponse_AuthParam_SessionKey::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ManualAuthResponse_AuthParam_SessionKey

// required int32 len = 1;
bool ManualAuthResponse_AuthParam_SessionKey::has_len() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ManualAuthResponse_AuthParam_SessionKey::set_has_len() {
  _has_bits_[0] |= 0x00000002u;
}
void ManualAuthResponse_AuthParam_SessionKey::clear_has_len() {
  _has_bits_[0] &= ~0x00000002u;
}
void ManualAuthResponse_AuthParam_SessionKey::clear_len() {
  len_ = 0;
  clear_has_len();
}
::google::protobuf::int32 ManualAuthResponse_AuthParam_SessionKey::len() const {
  // @@protoc_insertion_point(field_get:ManualAuthResponse.AuthParam.SessionKey.len)
  return len_;
}
void ManualAuthResponse_AuthParam_SessionKey::set_len(::google::protobuf::int32 value) {
  set_has_len();
  len_ = value;
  // @@protoc_insertion_point(field_set:ManualAuthResponse.AuthParam.SessionKey.len)
}

// optional bytes key = 2;
bool ManualAuthResponse_AuthParam_SessionKey::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ManualAuthResponse_AuthParam_SessionKey::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void ManualAuthResponse_AuthParam_SessionKey::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void ManualAuthResponse_AuthParam_SessionKey::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& ManualAuthResponse_AuthParam_SessionKey::key() const {
  // @@protoc_insertion_point(field_get:ManualAuthResponse.AuthParam.SessionKey.key)
  return key_.GetNoArena();
}
void ManualAuthResponse_AuthParam_SessionKey::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ManualAuthResponse.AuthParam.SessionKey.key)
}
#if LANG_CXX11
void ManualAuthResponse_AuthParam_SessionKey::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ManualAuthResponse.AuthParam.SessionKey.key)
}
#endif
void ManualAuthResponse_AuthParam_SessionKey::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ManualAuthResponse.AuthParam.SessionKey.key)
}
void ManualAuthResponse_AuthParam_SessionKey::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ManualAuthResponse.AuthParam.SessionKey.key)
}
::std::string* ManualAuthResponse_AuthParam_SessionKey::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:ManualAuthResponse.AuthParam.SessionKey.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManualAuthResponse_AuthParam_SessionKey::release_key() {
  // @@protoc_insertion_point(field_release:ManualAuthResponse.AuthParam.SessionKey.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManualAuthResponse_AuthParam_SessionKey::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:ManualAuthResponse.AuthParam.SessionKey.key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ManualAuthResponse_AuthParam::kUinFieldNumber;
const int ManualAuthResponse_AuthParam::kEcdhFieldNumber;
const int ManualAuthResponse_AuthParam::kSessionFieldNumber;
const int ManualAuthResponse_AuthParam::kSmsTicketFieldNumber;
const int ManualAuthResponse_AuthParam::kBindMailLoginUrlFieldNumber;
const int ManualAuthResponse_AuthParam::kServerTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ManualAuthResponse_AuthParam::ManualAuthResponse_AuthParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ManualAuthResponse.AuthParam)
}
ManualAuthResponse_AuthParam::ManualAuthResponse_AuthParam(const ManualAuthResponse_AuthParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  smsticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_smsticket()) {
    smsticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smsticket_);
  }
  bindmailloginurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bindmailloginurl()) {
    bindmailloginurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bindmailloginurl_);
  }
  if (from.has_ecdh()) {
    ecdh_ = new ::ManualAuthResponse_AuthParam_Ecdh(*from.ecdh_);
  } else {
    ecdh_ = NULL;
  }
  if (from.has_session()) {
    session_ = new ::ManualAuthResponse_AuthParam_SessionKey(*from.session_);
  } else {
    session_ = NULL;
  }
  ::memcpy(&uin_, &from.uin_,
    reinterpret_cast<char*>(&servertime_) -
    reinterpret_cast<char*>(&uin_) + sizeof(servertime_));
  // @@protoc_insertion_point(copy_constructor:ManualAuthResponse.AuthParam)
}

void ManualAuthResponse_AuthParam::SharedCtor() {
  _cached_size_ = 0;
  smsticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bindmailloginurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ecdh_, 0, reinterpret_cast<char*>(&servertime_) -
    reinterpret_cast<char*>(&ecdh_) + sizeof(servertime_));
}

ManualAuthResponse_AuthParam::~ManualAuthResponse_AuthParam() {
  // @@protoc_insertion_point(destructor:ManualAuthResponse.AuthParam)
  SharedDtor();
}

void ManualAuthResponse_AuthParam::SharedDtor() {
  smsticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bindmailloginurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete ecdh_;
  }
  if (this != internal_default_instance()) {
    delete session_;
  }
}

void ManualAuthResponse_AuthParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ManualAuthResponse_AuthParam::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ManualAuthResponse_AuthParam& ManualAuthResponse_AuthParam::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

ManualAuthResponse_AuthParam* ManualAuthResponse_AuthParam::New(::google::protobuf::Arena* arena) const {
  ManualAuthResponse_AuthParam* n = new ManualAuthResponse_AuthParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ManualAuthResponse_AuthParam::Clear() {
// @@protoc_insertion_point(message_clear_start:ManualAuthResponse.AuthParam)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_smsticket()) {
      GOOGLE_DCHECK(!smsticket_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*smsticket_.UnsafeRawStringPointer())->clear();
    }
    if (has_bindmailloginurl()) {
      GOOGLE_DCHECK(!bindmailloginurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bindmailloginurl_.UnsafeRawStringPointer())->clear();
    }
    if (has_ecdh()) {
      GOOGLE_DCHECK(ecdh_ != NULL);
      ecdh_->::ManualAuthResponse_AuthParam_Ecdh::Clear();
    }
    if (has_session()) {
      GOOGLE_DCHECK(session_ != NULL);
      session_->::ManualAuthResponse_AuthParam_SessionKey::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 48u) {
    ::memset(&uin_, 0, reinterpret_cast<char*>(&servertime_) -
      reinterpret_cast<char*>(&uin_) + sizeof(servertime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ManualAuthResponse_AuthParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ManualAuthResponse.AuthParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 uin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_uin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ManualAuthResponse.AuthParam.Ecdh ecdh = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ecdh()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ManualAuthResponse.AuthParam.SessionKey session = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes SmsTicket = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_smsticket()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string bindMailLoginUrl = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bindmailloginurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bindmailloginurl().data(), this->bindmailloginurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ManualAuthResponse.AuthParam.bindMailLoginUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 serverTime = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          set_has_servertime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &servertime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ManualAuthResponse.AuthParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ManualAuthResponse.AuthParam)
  return false;
#undef DO_
}

void ManualAuthResponse_AuthParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ManualAuthResponse.AuthParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 uin = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uin(), output);
  }

  // required .ManualAuthResponse.AuthParam.Ecdh ecdh = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->ecdh_, output);
  }

  // required .ManualAuthResponse.AuthParam.SessionKey session = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->session_, output);
  }

  // optional bytes SmsTicket = 16;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      16, this->smsticket(), output);
  }

  // optional string bindMailLoginUrl = 20;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bindmailloginurl().data(), this->bindmailloginurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthResponse.AuthParam.bindMailLoginUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->bindmailloginurl(), output);
  }

  // optional int32 serverTime = 22;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->servertime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ManualAuthResponse.AuthParam)
}

::google::protobuf::uint8* ManualAuthResponse_AuthParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ManualAuthResponse.AuthParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 uin = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uin(), target);
  }

  // required .ManualAuthResponse.AuthParam.Ecdh ecdh = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->ecdh_, deterministic, target);
  }

  // required .ManualAuthResponse.AuthParam.SessionKey session = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->session_, deterministic, target);
  }

  // optional bytes SmsTicket = 16;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        16, this->smsticket(), target);
  }

  // optional string bindMailLoginUrl = 20;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bindmailloginurl().data(), this->bindmailloginurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthResponse.AuthParam.bindMailLoginUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->bindmailloginurl(), target);
  }

  // optional int32 serverTime = 22;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->servertime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ManualAuthResponse.AuthParam)
  return target;
}

size_t ManualAuthResponse_AuthParam::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ManualAuthResponse.AuthParam)
  size_t total_size = 0;

  if (has_ecdh()) {
    // required .ManualAuthResponse.AuthParam.Ecdh ecdh = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ecdh_);
  }

  if (has_session()) {
    // required .ManualAuthResponse.AuthParam.SessionKey session = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->session_);
  }

  if (has_uin()) {
    // required int32 uin = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->uin());
  }

  return total_size;
}
size_t ManualAuthResponse_AuthParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ManualAuthResponse.AuthParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001c) ^ 0x0000001c) == 0) {  // All required fields are present.
    // required .ManualAuthResponse.AuthParam.Ecdh ecdh = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ecdh_);

    // required .ManualAuthResponse.AuthParam.SessionKey session = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->session_);

    // required int32 uin = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->uin());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes SmsTicket = 16;
    if (has_smsticket()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->smsticket());
    }

    // optional string bindMailLoginUrl = 20;
    if (has_bindmailloginurl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bindmailloginurl());
    }

  }
  // optional int32 serverTime = 22;
  if (has_servertime()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->servertime());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ManualAuthResponse_AuthParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ManualAuthResponse.AuthParam)
  GOOGLE_DCHECK_NE(&from, this);
  const ManualAuthResponse_AuthParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ManualAuthResponse_AuthParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ManualAuthResponse.AuthParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ManualAuthResponse.AuthParam)
    MergeFrom(*source);
  }
}

void ManualAuthResponse_AuthParam::MergeFrom(const ManualAuthResponse_AuthParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ManualAuthResponse.AuthParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_smsticket();
      smsticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smsticket_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_bindmailloginurl();
      bindmailloginurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bindmailloginurl_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_ecdh()->::ManualAuthResponse_AuthParam_Ecdh::MergeFrom(from.ecdh());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_session()->::ManualAuthResponse_AuthParam_SessionKey::MergeFrom(from.session());
    }
    if (cached_has_bits & 0x00000010u) {
      uin_ = from.uin_;
    }
    if (cached_has_bits & 0x00000020u) {
      servertime_ = from.servertime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ManualAuthResponse_AuthParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ManualAuthResponse.AuthParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManualAuthResponse_AuthParam::CopyFrom(const ManualAuthResponse_AuthParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ManualAuthResponse.AuthParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManualAuthResponse_AuthParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001c) != 0x0000001c) return false;
  if (has_ecdh()) {
    if (!this->ecdh_->IsInitialized()) return false;
  }
  if (has_session()) {
    if (!this->session_->IsInitialized()) return false;
  }
  return true;
}

void ManualAuthResponse_AuthParam::Swap(ManualAuthResponse_AuthParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ManualAuthResponse_AuthParam::InternalSwap(ManualAuthResponse_AuthParam* other) {
  smsticket_.Swap(&other->smsticket_);
  bindmailloginurl_.Swap(&other->bindmailloginurl_);
  std::swap(ecdh_, other->ecdh_);
  std::swap(session_, other->session_);
  std::swap(uin_, other->uin_);
  std::swap(servertime_, other->servertime_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ManualAuthResponse_AuthParam::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ManualAuthResponse_AuthParam

// required int32 uin = 1;
bool ManualAuthResponse_AuthParam::has_uin() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ManualAuthResponse_AuthParam::set_has_uin() {
  _has_bits_[0] |= 0x00000010u;
}
void ManualAuthResponse_AuthParam::clear_has_uin() {
  _has_bits_[0] &= ~0x00000010u;
}
void ManualAuthResponse_AuthParam::clear_uin() {
  uin_ = 0;
  clear_has_uin();
}
::google::protobuf::int32 ManualAuthResponse_AuthParam::uin() const {
  // @@protoc_insertion_point(field_get:ManualAuthResponse.AuthParam.uin)
  return uin_;
}
void ManualAuthResponse_AuthParam::set_uin(::google::protobuf::int32 value) {
  set_has_uin();
  uin_ = value;
  // @@protoc_insertion_point(field_set:ManualAuthResponse.AuthParam.uin)
}

// required .ManualAuthResponse.AuthParam.Ecdh ecdh = 2;
bool ManualAuthResponse_AuthParam::has_ecdh() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ManualAuthResponse_AuthParam::set_has_ecdh() {
  _has_bits_[0] |= 0x00000004u;
}
void ManualAuthResponse_AuthParam::clear_has_ecdh() {
  _has_bits_[0] &= ~0x00000004u;
}
void ManualAuthResponse_AuthParam::clear_ecdh() {
  if (ecdh_ != NULL) ecdh_->::ManualAuthResponse_AuthParam_Ecdh::Clear();
  clear_has_ecdh();
}
const ::ManualAuthResponse_AuthParam_Ecdh& ManualAuthResponse_AuthParam::ecdh() const {
  // @@protoc_insertion_point(field_get:ManualAuthResponse.AuthParam.ecdh)
  return ecdh_ != NULL ? *ecdh_
                         : *::ManualAuthResponse_AuthParam_Ecdh::internal_default_instance();
}
::ManualAuthResponse_AuthParam_Ecdh* ManualAuthResponse_AuthParam::mutable_ecdh() {
  set_has_ecdh();
  if (ecdh_ == NULL) {
    ecdh_ = new ::ManualAuthResponse_AuthParam_Ecdh;
  }
  // @@protoc_insertion_point(field_mutable:ManualAuthResponse.AuthParam.ecdh)
  return ecdh_;
}
::ManualAuthResponse_AuthParam_Ecdh* ManualAuthResponse_AuthParam::release_ecdh() {
  // @@protoc_insertion_point(field_release:ManualAuthResponse.AuthParam.ecdh)
  clear_has_ecdh();
  ::ManualAuthResponse_AuthParam_Ecdh* temp = ecdh_;
  ecdh_ = NULL;
  return temp;
}
void ManualAuthResponse_AuthParam::set_allocated_ecdh(::ManualAuthResponse_AuthParam_Ecdh* ecdh) {
  delete ecdh_;
  ecdh_ = ecdh;
  if (ecdh) {
    set_has_ecdh();
  } else {
    clear_has_ecdh();
  }
  // @@protoc_insertion_point(field_set_allocated:ManualAuthResponse.AuthParam.ecdh)
}

// required .ManualAuthResponse.AuthParam.SessionKey session = 3;
bool ManualAuthResponse_AuthParam::has_session() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ManualAuthResponse_AuthParam::set_has_session() {
  _has_bits_[0] |= 0x00000008u;
}
void ManualAuthResponse_AuthParam::clear_has_session() {
  _has_bits_[0] &= ~0x00000008u;
}
void ManualAuthResponse_AuthParam::clear_session() {
  if (session_ != NULL) session_->::ManualAuthResponse_AuthParam_SessionKey::Clear();
  clear_has_session();
}
const ::ManualAuthResponse_AuthParam_SessionKey& ManualAuthResponse_AuthParam::session() const {
  // @@protoc_insertion_point(field_get:ManualAuthResponse.AuthParam.session)
  return session_ != NULL ? *session_
                         : *::ManualAuthResponse_AuthParam_SessionKey::internal_default_instance();
}
::ManualAuthResponse_AuthParam_SessionKey* ManualAuthResponse_AuthParam::mutable_session() {
  set_has_session();
  if (session_ == NULL) {
    session_ = new ::ManualAuthResponse_AuthParam_SessionKey;
  }
  // @@protoc_insertion_point(field_mutable:ManualAuthResponse.AuthParam.session)
  return session_;
}
::ManualAuthResponse_AuthParam_SessionKey* ManualAuthResponse_AuthParam::release_session() {
  // @@protoc_insertion_point(field_release:ManualAuthResponse.AuthParam.session)
  clear_has_session();
  ::ManualAuthResponse_AuthParam_SessionKey* temp = session_;
  session_ = NULL;
  return temp;
}
void ManualAuthResponse_AuthParam::set_allocated_session(::ManualAuthResponse_AuthParam_SessionKey* session) {
  delete session_;
  session_ = session;
  if (session) {
    set_has_session();
  } else {
    clear_has_session();
  }
  // @@protoc_insertion_point(field_set_allocated:ManualAuthResponse.AuthParam.session)
}

// optional bytes SmsTicket = 16;
bool ManualAuthResponse_AuthParam::has_smsticket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ManualAuthResponse_AuthParam::set_has_smsticket() {
  _has_bits_[0] |= 0x00000001u;
}
void ManualAuthResponse_AuthParam::clear_has_smsticket() {
  _has_bits_[0] &= ~0x00000001u;
}
void ManualAuthResponse_AuthParam::clear_smsticket() {
  smsticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_smsticket();
}
const ::std::string& ManualAuthResponse_AuthParam::smsticket() const {
  // @@protoc_insertion_point(field_get:ManualAuthResponse.AuthParam.SmsTicket)
  return smsticket_.GetNoArena();
}
void ManualAuthResponse_AuthParam::set_smsticket(const ::std::string& value) {
  set_has_smsticket();
  smsticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ManualAuthResponse.AuthParam.SmsTicket)
}
#if LANG_CXX11
void ManualAuthResponse_AuthParam::set_smsticket(::std::string&& value) {
  set_has_smsticket();
  smsticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ManualAuthResponse.AuthParam.SmsTicket)
}
#endif
void ManualAuthResponse_AuthParam::set_smsticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_smsticket();
  smsticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ManualAuthResponse.AuthParam.SmsTicket)
}
void ManualAuthResponse_AuthParam::set_smsticket(const void* value, size_t size) {
  set_has_smsticket();
  smsticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ManualAuthResponse.AuthParam.SmsTicket)
}
::std::string* ManualAuthResponse_AuthParam::mutable_smsticket() {
  set_has_smsticket();
  // @@protoc_insertion_point(field_mutable:ManualAuthResponse.AuthParam.SmsTicket)
  return smsticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManualAuthResponse_AuthParam::release_smsticket() {
  // @@protoc_insertion_point(field_release:ManualAuthResponse.AuthParam.SmsTicket)
  clear_has_smsticket();
  return smsticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManualAuthResponse_AuthParam::set_allocated_smsticket(::std::string* smsticket) {
  if (smsticket != NULL) {
    set_has_smsticket();
  } else {
    clear_has_smsticket();
  }
  smsticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsticket);
  // @@protoc_insertion_point(field_set_allocated:ManualAuthResponse.AuthParam.SmsTicket)
}

// optional string bindMailLoginUrl = 20;
bool ManualAuthResponse_AuthParam::has_bindmailloginurl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ManualAuthResponse_AuthParam::set_has_bindmailloginurl() {
  _has_bits_[0] |= 0x00000002u;
}
void ManualAuthResponse_AuthParam::clear_has_bindmailloginurl() {
  _has_bits_[0] &= ~0x00000002u;
}
void ManualAuthResponse_AuthParam::clear_bindmailloginurl() {
  bindmailloginurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bindmailloginurl();
}
const ::std::string& ManualAuthResponse_AuthParam::bindmailloginurl() const {
  // @@protoc_insertion_point(field_get:ManualAuthResponse.AuthParam.bindMailLoginUrl)
  return bindmailloginurl_.GetNoArena();
}
void ManualAuthResponse_AuthParam::set_bindmailloginurl(const ::std::string& value) {
  set_has_bindmailloginurl();
  bindmailloginurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ManualAuthResponse.AuthParam.bindMailLoginUrl)
}
#if LANG_CXX11
void ManualAuthResponse_AuthParam::set_bindmailloginurl(::std::string&& value) {
  set_has_bindmailloginurl();
  bindmailloginurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ManualAuthResponse.AuthParam.bindMailLoginUrl)
}
#endif
void ManualAuthResponse_AuthParam::set_bindmailloginurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bindmailloginurl();
  bindmailloginurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ManualAuthResponse.AuthParam.bindMailLoginUrl)
}
void ManualAuthResponse_AuthParam::set_bindmailloginurl(const char* value, size_t size) {
  set_has_bindmailloginurl();
  bindmailloginurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ManualAuthResponse.AuthParam.bindMailLoginUrl)
}
::std::string* ManualAuthResponse_AuthParam::mutable_bindmailloginurl() {
  set_has_bindmailloginurl();
  // @@protoc_insertion_point(field_mutable:ManualAuthResponse.AuthParam.bindMailLoginUrl)
  return bindmailloginurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManualAuthResponse_AuthParam::release_bindmailloginurl() {
  // @@protoc_insertion_point(field_release:ManualAuthResponse.AuthParam.bindMailLoginUrl)
  clear_has_bindmailloginurl();
  return bindmailloginurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManualAuthResponse_AuthParam::set_allocated_bindmailloginurl(::std::string* bindmailloginurl) {
  if (bindmailloginurl != NULL) {
    set_has_bindmailloginurl();
  } else {
    clear_has_bindmailloginurl();
  }
  bindmailloginurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bindmailloginurl);
  // @@protoc_insertion_point(field_set_allocated:ManualAuthResponse.AuthParam.bindMailLoginUrl)
}

// optional int32 serverTime = 22;
bool ManualAuthResponse_AuthParam::has_servertime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ManualAuthResponse_AuthParam::set_has_servertime() {
  _has_bits_[0] |= 0x00000020u;
}
void ManualAuthResponse_AuthParam::clear_has_servertime() {
  _has_bits_[0] &= ~0x00000020u;
}
void ManualAuthResponse_AuthParam::clear_servertime() {
  servertime_ = 0;
  clear_has_servertime();
}
::google::protobuf::int32 ManualAuthResponse_AuthParam::servertime() const {
  // @@protoc_insertion_point(field_get:ManualAuthResponse.AuthParam.serverTime)
  return servertime_;
}
void ManualAuthResponse_AuthParam::set_servertime(::google::protobuf::int32 value) {
  set_has_servertime();
  servertime_ = value;
  // @@protoc_insertion_point(field_set:ManualAuthResponse.AuthParam.serverTime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ManualAuthResponse_AccountInfo::kWxIdFieldNumber;
const int ManualAuthResponse_AccountInfo::kNickNameFieldNumber;
const int ManualAuthResponse_AccountInfo::kTag3FieldNumber;
const int ManualAuthResponse_AccountInfo::kBindMailFieldNumber;
const int ManualAuthResponse_AccountInfo::kBindMobileFieldNumber;
const int ManualAuthResponse_AccountInfo::kAliasFieldNumber;
const int ManualAuthResponse_AccountInfo::kTag7FieldNumber;
const int ManualAuthResponse_AccountInfo::kStatusFieldNumber;
const int ManualAuthResponse_AccountInfo::kPluginFlagFieldNumber;
const int ManualAuthResponse_AccountInfo::kRegisterTypeFieldNumber;
const int ManualAuthResponse_AccountInfo::kTag11FieldNumber;
const int ManualAuthResponse_AccountInfo::kSafeDeviceFieldNumber;
const int ManualAuthResponse_AccountInfo::kOfficialNamePinyinFieldNumber;
const int ManualAuthResponse_AccountInfo::kOfficialNameZhFieldNumber;
const int ManualAuthResponse_AccountInfo::kTag15FieldNumber;
const int ManualAuthResponse_AccountInfo::kFsUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ManualAuthResponse_AccountInfo::ManualAuthResponse_AccountInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ManualAuthResponse.AccountInfo)
}
ManualAuthResponse_AccountInfo::ManualAuthResponse_AccountInfo(const ManualAuthResponse_AccountInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  wxid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_wxid()) {
    wxid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wxid_);
  }
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nickname()) {
    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  bindmail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bindmail()) {
    bindmail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bindmail_);
  }
  bindmobile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bindmobile()) {
    bindmobile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bindmobile_);
  }
  alias_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_alias()) {
    alias_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alias_);
  }
  tag7_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tag7()) {
    tag7_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag7_);
  }
  tag11_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tag11()) {
    tag11_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag11_);
  }
  officialnamepinyin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_officialnamepinyin()) {
    officialnamepinyin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.officialnamepinyin_);
  }
  officialnamezh_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_officialnamezh()) {
    officialnamezh_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.officialnamezh_);
  }
  tag15_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tag15()) {
    tag15_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag15_);
  }
  fsurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fsurl()) {
    fsurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fsurl_);
  }
  ::memcpy(&tag3_, &from.tag3_,
    reinterpret_cast<char*>(&safedevice_) -
    reinterpret_cast<char*>(&tag3_) + sizeof(safedevice_));
  // @@protoc_insertion_point(copy_constructor:ManualAuthResponse.AccountInfo)
}

void ManualAuthResponse_AccountInfo::SharedCtor() {
  _cached_size_ = 0;
  wxid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bindmail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bindmobile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alias_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag7_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag11_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  officialnamepinyin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  officialnamezh_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag15_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fsurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tag3_, 0, reinterpret_cast<char*>(&safedevice_) -
    reinterpret_cast<char*>(&tag3_) + sizeof(safedevice_));
}

ManualAuthResponse_AccountInfo::~ManualAuthResponse_AccountInfo() {
  // @@protoc_insertion_point(destructor:ManualAuthResponse.AccountInfo)
  SharedDtor();
}

void ManualAuthResponse_AccountInfo::SharedDtor() {
  wxid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bindmail_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bindmobile_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alias_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag7_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag11_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  officialnamepinyin_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  officialnamezh_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag15_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fsurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ManualAuthResponse_AccountInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ManualAuthResponse_AccountInfo::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ManualAuthResponse_AccountInfo& ManualAuthResponse_AccountInfo::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

ManualAuthResponse_AccountInfo* ManualAuthResponse_AccountInfo::New(::google::protobuf::Arena* arena) const {
  ManualAuthResponse_AccountInfo* n = new ManualAuthResponse_AccountInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ManualAuthResponse_AccountInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ManualAuthResponse.AccountInfo)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_wxid()) {
      GOOGLE_DCHECK(!wxid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*wxid_.UnsafeRawStringPointer())->clear();
    }
    if (has_nickname()) {
      GOOGLE_DCHECK(!nickname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*nickname_.UnsafeRawStringPointer())->clear();
    }
    if (has_bindmail()) {
      GOOGLE_DCHECK(!bindmail_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bindmail_.UnsafeRawStringPointer())->clear();
    }
    if (has_bindmobile()) {
      GOOGLE_DCHECK(!bindmobile_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bindmobile_.UnsafeRawStringPointer())->clear();
    }
    if (has_alias()) {
      GOOGLE_DCHECK(!alias_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*alias_.UnsafeRawStringPointer())->clear();
    }
    if (has_tag7()) {
      GOOGLE_DCHECK(!tag7_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tag7_.UnsafeRawStringPointer())->clear();
    }
    if (has_tag11()) {
      GOOGLE_DCHECK(!tag11_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tag11_.UnsafeRawStringPointer())->clear();
    }
    if (has_officialnamepinyin()) {
      GOOGLE_DCHECK(!officialnamepinyin_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*officialnamepinyin_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[8 / 32] & 1792u) {
    if (has_officialnamezh()) {
      GOOGLE_DCHECK(!officialnamezh_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*officialnamezh_.UnsafeRawStringPointer())->clear();
    }
    if (has_tag15()) {
      GOOGLE_DCHECK(!tag15_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tag15_.UnsafeRawStringPointer())->clear();
    }
    if (has_fsurl()) {
      GOOGLE_DCHECK(!fsurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fsurl_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[8 / 32] & 63488u) {
    ::memset(&tag3_, 0, reinterpret_cast<char*>(&safedevice_) -
      reinterpret_cast<char*>(&tag3_) + sizeof(safedevice_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ManualAuthResponse_AccountInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ManualAuthResponse.AccountInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string wxId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->wxid().data(), this->wxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ManualAuthResponse.AccountInfo.wxId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string nickName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ManualAuthResponse.AccountInfo.nickName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tag3 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_tag3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string bindMail = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bindmail()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bindmail().data(), this->bindmail().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ManualAuthResponse.AccountInfo.bindMail");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string bindMobile = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bindmobile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bindmobile().data(), this->bindmobile().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ManualAuthResponse.AccountInfo.bindMobile");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Alias = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alias()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->alias().data(), this->alias().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ManualAuthResponse.AccountInfo.Alias");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string tag7 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag7()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag7().data(), this->tag7().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ManualAuthResponse.AccountInfo.tag7");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 status = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pluginFlag = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_pluginflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pluginflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 registerType = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_registertype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &registertype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string tag11 = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag11()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag11().data(), this->tag11().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ManualAuthResponse.AccountInfo.tag11");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 safeDevice = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_safedevice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &safedevice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string officialNamePinyin = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_officialnamepinyin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->officialnamepinyin().data(), this->officialnamepinyin().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ManualAuthResponse.AccountInfo.officialNamePinyin");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string officialNameZh = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_officialnamezh()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->officialnamezh().data(), this->officialnamezh().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ManualAuthResponse.AccountInfo.officialNameZh");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string tag15 = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag15()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag15().data(), this->tag15().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ManualAuthResponse.AccountInfo.tag15");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string fsUrl = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fsurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fsurl().data(), this->fsurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ManualAuthResponse.AccountInfo.fsUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ManualAuthResponse.AccountInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ManualAuthResponse.AccountInfo)
  return false;
#undef DO_
}

void ManualAuthResponse_AccountInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ManualAuthResponse.AccountInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string wxId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wxid().data(), this->wxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthResponse.AccountInfo.wxId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->wxid(), output);
  }

  // optional string nickName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthResponse.AccountInfo.nickName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  // optional int32 tag3 = 3;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tag3(), output);
  }

  // optional string bindMail = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bindmail().data(), this->bindmail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthResponse.AccountInfo.bindMail");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->bindmail(), output);
  }

  // optional string bindMobile = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bindmobile().data(), this->bindmobile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthResponse.AccountInfo.bindMobile");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->bindmobile(), output);
  }

  // optional string Alias = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthResponse.AccountInfo.Alias");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->alias(), output);
  }

  // optional string tag7 = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag7().data(), this->tag7().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthResponse.AccountInfo.tag7");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->tag7(), output);
  }

  // optional int32 status = 8;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->status(), output);
  }

  // optional int32 pluginFlag = 9;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->pluginflag(), output);
  }

  // optional int32 registerType = 10;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->registertype(), output);
  }

  // optional string tag11 = 11;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag11().data(), this->tag11().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthResponse.AccountInfo.tag11");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->tag11(), output);
  }

  // optional int32 safeDevice = 12;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->safedevice(), output);
  }

  // optional string officialNamePinyin = 13;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->officialnamepinyin().data(), this->officialnamepinyin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthResponse.AccountInfo.officialNamePinyin");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->officialnamepinyin(), output);
  }

  // optional string officialNameZh = 14;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->officialnamezh().data(), this->officialnamezh().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthResponse.AccountInfo.officialNameZh");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->officialnamezh(), output);
  }

  // optional string tag15 = 15;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag15().data(), this->tag15().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthResponse.AccountInfo.tag15");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->tag15(), output);
  }

  // optional string fsUrl = 16;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fsurl().data(), this->fsurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthResponse.AccountInfo.fsUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->fsurl(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ManualAuthResponse.AccountInfo)
}

::google::protobuf::uint8* ManualAuthResponse_AccountInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ManualAuthResponse.AccountInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string wxId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wxid().data(), this->wxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthResponse.AccountInfo.wxId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->wxid(), target);
  }

  // optional string nickName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthResponse.AccountInfo.nickName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // optional int32 tag3 = 3;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tag3(), target);
  }

  // optional string bindMail = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bindmail().data(), this->bindmail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthResponse.AccountInfo.bindMail");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->bindmail(), target);
  }

  // optional string bindMobile = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bindmobile().data(), this->bindmobile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthResponse.AccountInfo.bindMobile");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->bindmobile(), target);
  }

  // optional string Alias = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthResponse.AccountInfo.Alias");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->alias(), target);
  }

  // optional string tag7 = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag7().data(), this->tag7().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthResponse.AccountInfo.tag7");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->tag7(), target);
  }

  // optional int32 status = 8;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->status(), target);
  }

  // optional int32 pluginFlag = 9;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->pluginflag(), target);
  }

  // optional int32 registerType = 10;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->registertype(), target);
  }

  // optional string tag11 = 11;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag11().data(), this->tag11().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthResponse.AccountInfo.tag11");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->tag11(), target);
  }

  // optional int32 safeDevice = 12;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->safedevice(), target);
  }

  // optional string officialNamePinyin = 13;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->officialnamepinyin().data(), this->officialnamepinyin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthResponse.AccountInfo.officialNamePinyin");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->officialnamepinyin(), target);
  }

  // optional string officialNameZh = 14;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->officialnamezh().data(), this->officialnamezh().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthResponse.AccountInfo.officialNameZh");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->officialnamezh(), target);
  }

  // optional string tag15 = 15;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag15().data(), this->tag15().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthResponse.AccountInfo.tag15");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->tag15(), target);
  }

  // optional string fsUrl = 16;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fsurl().data(), this->fsurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthResponse.AccountInfo.fsUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->fsurl(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ManualAuthResponse.AccountInfo)
  return target;
}

size_t ManualAuthResponse_AccountInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ManualAuthResponse.AccountInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string wxId = 1;
    if (has_wxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wxid());
    }

    // optional string nickName = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional string bindMail = 4;
    if (has_bindmail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bindmail());
    }

    // optional string bindMobile = 5;
    if (has_bindmobile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bindmobile());
    }

    // optional string Alias = 6;
    if (has_alias()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alias());
    }

    // optional string tag7 = 7;
    if (has_tag7()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag7());
    }

    // optional string tag11 = 11;
    if (has_tag11()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag11());
    }

    // optional string officialNamePinyin = 13;
    if (has_officialnamepinyin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->officialnamepinyin());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional string officialNameZh = 14;
    if (has_officialnamezh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->officialnamezh());
    }

    // optional string tag15 = 15;
    if (has_tag15()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag15());
    }

    // optional string fsUrl = 16;
    if (has_fsurl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fsurl());
    }

    // optional int32 tag3 = 3;
    if (has_tag3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag3());
    }

    // optional int32 status = 8;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional int32 pluginFlag = 9;
    if (has_pluginflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pluginflag());
    }

    // optional int32 registerType = 10;
    if (has_registertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->registertype());
    }

    // optional int32 safeDevice = 12;
    if (has_safedevice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->safedevice());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ManualAuthResponse_AccountInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ManualAuthResponse.AccountInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ManualAuthResponse_AccountInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ManualAuthResponse_AccountInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ManualAuthResponse.AccountInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ManualAuthResponse.AccountInfo)
    MergeFrom(*source);
  }
}

void ManualAuthResponse_AccountInfo::MergeFrom(const ManualAuthResponse_AccountInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ManualAuthResponse.AccountInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_wxid();
      wxid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wxid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_nickname();
      nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_bindmail();
      bindmail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bindmail_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_bindmobile();
      bindmobile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bindmobile_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_alias();
      alias_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alias_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_tag7();
      tag7_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag7_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_tag11();
      tag11_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag11_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_officialnamepinyin();
      officialnamepinyin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.officialnamepinyin_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_officialnamezh();
      officialnamezh_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.officialnamezh_);
    }
    if (cached_has_bits & 0x00000200u) {
      set_has_tag15();
      tag15_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag15_);
    }
    if (cached_has_bits & 0x00000400u) {
      set_has_fsurl();
      fsurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fsurl_);
    }
    if (cached_has_bits & 0x00000800u) {
      tag3_ = from.tag3_;
    }
    if (cached_has_bits & 0x00001000u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00002000u) {
      pluginflag_ = from.pluginflag_;
    }
    if (cached_has_bits & 0x00004000u) {
      registertype_ = from.registertype_;
    }
    if (cached_has_bits & 0x00008000u) {
      safedevice_ = from.safedevice_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ManualAuthResponse_AccountInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ManualAuthResponse.AccountInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManualAuthResponse_AccountInfo::CopyFrom(const ManualAuthResponse_AccountInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ManualAuthResponse.AccountInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManualAuthResponse_AccountInfo::IsInitialized() const {
  return true;
}

void ManualAuthResponse_AccountInfo::Swap(ManualAuthResponse_AccountInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ManualAuthResponse_AccountInfo::InternalSwap(ManualAuthResponse_AccountInfo* other) {
  wxid_.Swap(&other->wxid_);
  nickname_.Swap(&other->nickname_);
  bindmail_.Swap(&other->bindmail_);
  bindmobile_.Swap(&other->bindmobile_);
  alias_.Swap(&other->alias_);
  tag7_.Swap(&other->tag7_);
  tag11_.Swap(&other->tag11_);
  officialnamepinyin_.Swap(&other->officialnamepinyin_);
  officialnamezh_.Swap(&other->officialnamezh_);
  tag15_.Swap(&other->tag15_);
  fsurl_.Swap(&other->fsurl_);
  std::swap(tag3_, other->tag3_);
  std::swap(status_, other->status_);
  std::swap(pluginflag_, other->pluginflag_);
  std::swap(registertype_, other->registertype_);
  std::swap(safedevice_, other->safedevice_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ManualAuthResponse_AccountInfo::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ManualAuthResponse_AccountInfo

// optional string wxId = 1;
bool ManualAuthResponse_AccountInfo::has_wxid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ManualAuthResponse_AccountInfo::set_has_wxid() {
  _has_bits_[0] |= 0x00000001u;
}
void ManualAuthResponse_AccountInfo::clear_has_wxid() {
  _has_bits_[0] &= ~0x00000001u;
}
void ManualAuthResponse_AccountInfo::clear_wxid() {
  wxid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_wxid();
}
const ::std::string& ManualAuthResponse_AccountInfo::wxid() const {
  // @@protoc_insertion_point(field_get:ManualAuthResponse.AccountInfo.wxId)
  return wxid_.GetNoArena();
}
void ManualAuthResponse_AccountInfo::set_wxid(const ::std::string& value) {
  set_has_wxid();
  wxid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ManualAuthResponse.AccountInfo.wxId)
}
#if LANG_CXX11
void ManualAuthResponse_AccountInfo::set_wxid(::std::string&& value) {
  set_has_wxid();
  wxid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ManualAuthResponse.AccountInfo.wxId)
}
#endif
void ManualAuthResponse_AccountInfo::set_wxid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_wxid();
  wxid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ManualAuthResponse.AccountInfo.wxId)
}
void ManualAuthResponse_AccountInfo::set_wxid(const char* value, size_t size) {
  set_has_wxid();
  wxid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ManualAuthResponse.AccountInfo.wxId)
}
::std::string* ManualAuthResponse_AccountInfo::mutable_wxid() {
  set_has_wxid();
  // @@protoc_insertion_point(field_mutable:ManualAuthResponse.AccountInfo.wxId)
  return wxid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManualAuthResponse_AccountInfo::release_wxid() {
  // @@protoc_insertion_point(field_release:ManualAuthResponse.AccountInfo.wxId)
  clear_has_wxid();
  return wxid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManualAuthResponse_AccountInfo::set_allocated_wxid(::std::string* wxid) {
  if (wxid != NULL) {
    set_has_wxid();
  } else {
    clear_has_wxid();
  }
  wxid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wxid);
  // @@protoc_insertion_point(field_set_allocated:ManualAuthResponse.AccountInfo.wxId)
}

// optional string nickName = 2;
bool ManualAuthResponse_AccountInfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ManualAuthResponse_AccountInfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
void ManualAuthResponse_AccountInfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
void ManualAuthResponse_AccountInfo::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
const ::std::string& ManualAuthResponse_AccountInfo::nickname() const {
  // @@protoc_insertion_point(field_get:ManualAuthResponse.AccountInfo.nickName)
  return nickname_.GetNoArena();
}
void ManualAuthResponse_AccountInfo::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ManualAuthResponse.AccountInfo.nickName)
}
#if LANG_CXX11
void ManualAuthResponse_AccountInfo::set_nickname(::std::string&& value) {
  set_has_nickname();
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ManualAuthResponse.AccountInfo.nickName)
}
#endif
void ManualAuthResponse_AccountInfo::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ManualAuthResponse.AccountInfo.nickName)
}
void ManualAuthResponse_AccountInfo::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ManualAuthResponse.AccountInfo.nickName)
}
::std::string* ManualAuthResponse_AccountInfo::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:ManualAuthResponse.AccountInfo.nickName)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManualAuthResponse_AccountInfo::release_nickname() {
  // @@protoc_insertion_point(field_release:ManualAuthResponse.AccountInfo.nickName)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManualAuthResponse_AccountInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:ManualAuthResponse.AccountInfo.nickName)
}

// optional int32 tag3 = 3;
bool ManualAuthResponse_AccountInfo::has_tag3() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ManualAuthResponse_AccountInfo::set_has_tag3() {
  _has_bits_[0] |= 0x00000800u;
}
void ManualAuthResponse_AccountInfo::clear_has_tag3() {
  _has_bits_[0] &= ~0x00000800u;
}
void ManualAuthResponse_AccountInfo::clear_tag3() {
  tag3_ = 0;
  clear_has_tag3();
}
::google::protobuf::int32 ManualAuthResponse_AccountInfo::tag3() const {
  // @@protoc_insertion_point(field_get:ManualAuthResponse.AccountInfo.tag3)
  return tag3_;
}
void ManualAuthResponse_AccountInfo::set_tag3(::google::protobuf::int32 value) {
  set_has_tag3();
  tag3_ = value;
  // @@protoc_insertion_point(field_set:ManualAuthResponse.AccountInfo.tag3)
}

// optional string bindMail = 4;
bool ManualAuthResponse_AccountInfo::has_bindmail() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ManualAuthResponse_AccountInfo::set_has_bindmail() {
  _has_bits_[0] |= 0x00000004u;
}
void ManualAuthResponse_AccountInfo::clear_has_bindmail() {
  _has_bits_[0] &= ~0x00000004u;
}
void ManualAuthResponse_AccountInfo::clear_bindmail() {
  bindmail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bindmail();
}
const ::std::string& ManualAuthResponse_AccountInfo::bindmail() const {
  // @@protoc_insertion_point(field_get:ManualAuthResponse.AccountInfo.bindMail)
  return bindmail_.GetNoArena();
}
void ManualAuthResponse_AccountInfo::set_bindmail(const ::std::string& value) {
  set_has_bindmail();
  bindmail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ManualAuthResponse.AccountInfo.bindMail)
}
#if LANG_CXX11
void ManualAuthResponse_AccountInfo::set_bindmail(::std::string&& value) {
  set_has_bindmail();
  bindmail_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ManualAuthResponse.AccountInfo.bindMail)
}
#endif
void ManualAuthResponse_AccountInfo::set_bindmail(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bindmail();
  bindmail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ManualAuthResponse.AccountInfo.bindMail)
}
void ManualAuthResponse_AccountInfo::set_bindmail(const char* value, size_t size) {
  set_has_bindmail();
  bindmail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ManualAuthResponse.AccountInfo.bindMail)
}
::std::string* ManualAuthResponse_AccountInfo::mutable_bindmail() {
  set_has_bindmail();
  // @@protoc_insertion_point(field_mutable:ManualAuthResponse.AccountInfo.bindMail)
  return bindmail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManualAuthResponse_AccountInfo::release_bindmail() {
  // @@protoc_insertion_point(field_release:ManualAuthResponse.AccountInfo.bindMail)
  clear_has_bindmail();
  return bindmail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManualAuthResponse_AccountInfo::set_allocated_bindmail(::std::string* bindmail) {
  if (bindmail != NULL) {
    set_has_bindmail();
  } else {
    clear_has_bindmail();
  }
  bindmail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bindmail);
  // @@protoc_insertion_point(field_set_allocated:ManualAuthResponse.AccountInfo.bindMail)
}

// optional string bindMobile = 5;
bool ManualAuthResponse_AccountInfo::has_bindmobile() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ManualAuthResponse_AccountInfo::set_has_bindmobile() {
  _has_bits_[0] |= 0x00000008u;
}
void ManualAuthResponse_AccountInfo::clear_has_bindmobile() {
  _has_bits_[0] &= ~0x00000008u;
}
void ManualAuthResponse_AccountInfo::clear_bindmobile() {
  bindmobile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bindmobile();
}
const ::std::string& ManualAuthResponse_AccountInfo::bindmobile() const {
  // @@protoc_insertion_point(field_get:ManualAuthResponse.AccountInfo.bindMobile)
  return bindmobile_.GetNoArena();
}
void ManualAuthResponse_AccountInfo::set_bindmobile(const ::std::string& value) {
  set_has_bindmobile();
  bindmobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ManualAuthResponse.AccountInfo.bindMobile)
}
#if LANG_CXX11
void ManualAuthResponse_AccountInfo::set_bindmobile(::std::string&& value) {
  set_has_bindmobile();
  bindmobile_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ManualAuthResponse.AccountInfo.bindMobile)
}
#endif
void ManualAuthResponse_AccountInfo::set_bindmobile(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bindmobile();
  bindmobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ManualAuthResponse.AccountInfo.bindMobile)
}
void ManualAuthResponse_AccountInfo::set_bindmobile(const char* value, size_t size) {
  set_has_bindmobile();
  bindmobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ManualAuthResponse.AccountInfo.bindMobile)
}
::std::string* ManualAuthResponse_AccountInfo::mutable_bindmobile() {
  set_has_bindmobile();
  // @@protoc_insertion_point(field_mutable:ManualAuthResponse.AccountInfo.bindMobile)
  return bindmobile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManualAuthResponse_AccountInfo::release_bindmobile() {
  // @@protoc_insertion_point(field_release:ManualAuthResponse.AccountInfo.bindMobile)
  clear_has_bindmobile();
  return bindmobile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManualAuthResponse_AccountInfo::set_allocated_bindmobile(::std::string* bindmobile) {
  if (bindmobile != NULL) {
    set_has_bindmobile();
  } else {
    clear_has_bindmobile();
  }
  bindmobile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bindmobile);
  // @@protoc_insertion_point(field_set_allocated:ManualAuthResponse.AccountInfo.bindMobile)
}

// optional string Alias = 6;
bool ManualAuthResponse_AccountInfo::has_alias() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ManualAuthResponse_AccountInfo::set_has_alias() {
  _has_bits_[0] |= 0x00000010u;
}
void ManualAuthResponse_AccountInfo::clear_has_alias() {
  _has_bits_[0] &= ~0x00000010u;
}
void ManualAuthResponse_AccountInfo::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_alias();
}
const ::std::string& ManualAuthResponse_AccountInfo::alias() const {
  // @@protoc_insertion_point(field_get:ManualAuthResponse.AccountInfo.Alias)
  return alias_.GetNoArena();
}
void ManualAuthResponse_AccountInfo::set_alias(const ::std::string& value) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ManualAuthResponse.AccountInfo.Alias)
}
#if LANG_CXX11
void ManualAuthResponse_AccountInfo::set_alias(::std::string&& value) {
  set_has_alias();
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ManualAuthResponse.AccountInfo.Alias)
}
#endif
void ManualAuthResponse_AccountInfo::set_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ManualAuthResponse.AccountInfo.Alias)
}
void ManualAuthResponse_AccountInfo::set_alias(const char* value, size_t size) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ManualAuthResponse.AccountInfo.Alias)
}
::std::string* ManualAuthResponse_AccountInfo::mutable_alias() {
  set_has_alias();
  // @@protoc_insertion_point(field_mutable:ManualAuthResponse.AccountInfo.Alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManualAuthResponse_AccountInfo::release_alias() {
  // @@protoc_insertion_point(field_release:ManualAuthResponse.AccountInfo.Alias)
  clear_has_alias();
  return alias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManualAuthResponse_AccountInfo::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    set_has_alias();
  } else {
    clear_has_alias();
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:ManualAuthResponse.AccountInfo.Alias)
}

// optional string tag7 = 7;
bool ManualAuthResponse_AccountInfo::has_tag7() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ManualAuthResponse_AccountInfo::set_has_tag7() {
  _has_bits_[0] |= 0x00000020u;
}
void ManualAuthResponse_AccountInfo::clear_has_tag7() {
  _has_bits_[0] &= ~0x00000020u;
}
void ManualAuthResponse_AccountInfo::clear_tag7() {
  tag7_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tag7();
}
const ::std::string& ManualAuthResponse_AccountInfo::tag7() const {
  // @@protoc_insertion_point(field_get:ManualAuthResponse.AccountInfo.tag7)
  return tag7_.GetNoArena();
}
void ManualAuthResponse_AccountInfo::set_tag7(const ::std::string& value) {
  set_has_tag7();
  tag7_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ManualAuthResponse.AccountInfo.tag7)
}
#if LANG_CXX11
void ManualAuthResponse_AccountInfo::set_tag7(::std::string&& value) {
  set_has_tag7();
  tag7_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ManualAuthResponse.AccountInfo.tag7)
}
#endif
void ManualAuthResponse_AccountInfo::set_tag7(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tag7();
  tag7_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ManualAuthResponse.AccountInfo.tag7)
}
void ManualAuthResponse_AccountInfo::set_tag7(const char* value, size_t size) {
  set_has_tag7();
  tag7_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ManualAuthResponse.AccountInfo.tag7)
}
::std::string* ManualAuthResponse_AccountInfo::mutable_tag7() {
  set_has_tag7();
  // @@protoc_insertion_point(field_mutable:ManualAuthResponse.AccountInfo.tag7)
  return tag7_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManualAuthResponse_AccountInfo::release_tag7() {
  // @@protoc_insertion_point(field_release:ManualAuthResponse.AccountInfo.tag7)
  clear_has_tag7();
  return tag7_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManualAuthResponse_AccountInfo::set_allocated_tag7(::std::string* tag7) {
  if (tag7 != NULL) {
    set_has_tag7();
  } else {
    clear_has_tag7();
  }
  tag7_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag7);
  // @@protoc_insertion_point(field_set_allocated:ManualAuthResponse.AccountInfo.tag7)
}

// optional int32 status = 8;
bool ManualAuthResponse_AccountInfo::has_status() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ManualAuthResponse_AccountInfo::set_has_status() {
  _has_bits_[0] |= 0x00001000u;
}
void ManualAuthResponse_AccountInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00001000u;
}
void ManualAuthResponse_AccountInfo::clear_status() {
  status_ = 0;
  clear_has_status();
}
::google::protobuf::int32 ManualAuthResponse_AccountInfo::status() const {
  // @@protoc_insertion_point(field_get:ManualAuthResponse.AccountInfo.status)
  return status_;
}
void ManualAuthResponse_AccountInfo::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:ManualAuthResponse.AccountInfo.status)
}

// optional int32 pluginFlag = 9;
bool ManualAuthResponse_AccountInfo::has_pluginflag() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void ManualAuthResponse_AccountInfo::set_has_pluginflag() {
  _has_bits_[0] |= 0x00002000u;
}
void ManualAuthResponse_AccountInfo::clear_has_pluginflag() {
  _has_bits_[0] &= ~0x00002000u;
}
void ManualAuthResponse_AccountInfo::clear_pluginflag() {
  pluginflag_ = 0;
  clear_has_pluginflag();
}
::google::protobuf::int32 ManualAuthResponse_AccountInfo::pluginflag() const {
  // @@protoc_insertion_point(field_get:ManualAuthResponse.AccountInfo.pluginFlag)
  return pluginflag_;
}
void ManualAuthResponse_AccountInfo::set_pluginflag(::google::protobuf::int32 value) {
  set_has_pluginflag();
  pluginflag_ = value;
  // @@protoc_insertion_point(field_set:ManualAuthResponse.AccountInfo.pluginFlag)
}

// optional int32 registerType = 10;
bool ManualAuthResponse_AccountInfo::has_registertype() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void ManualAuthResponse_AccountInfo::set_has_registertype() {
  _has_bits_[0] |= 0x00004000u;
}
void ManualAuthResponse_AccountInfo::clear_has_registertype() {
  _has_bits_[0] &= ~0x00004000u;
}
void ManualAuthResponse_AccountInfo::clear_registertype() {
  registertype_ = 0;
  clear_has_registertype();
}
::google::protobuf::int32 ManualAuthResponse_AccountInfo::registertype() const {
  // @@protoc_insertion_point(field_get:ManualAuthResponse.AccountInfo.registerType)
  return registertype_;
}
void ManualAuthResponse_AccountInfo::set_registertype(::google::protobuf::int32 value) {
  set_has_registertype();
  registertype_ = value;
  // @@protoc_insertion_point(field_set:ManualAuthResponse.AccountInfo.registerType)
}

// optional string tag11 = 11;
bool ManualAuthResponse_AccountInfo::has_tag11() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ManualAuthResponse_AccountInfo::set_has_tag11() {
  _has_bits_[0] |= 0x00000040u;
}
void ManualAuthResponse_AccountInfo::clear_has_tag11() {
  _has_bits_[0] &= ~0x00000040u;
}
void ManualAuthResponse_AccountInfo::clear_tag11() {
  tag11_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tag11();
}
const ::std::string& ManualAuthResponse_AccountInfo::tag11() const {
  // @@protoc_insertion_point(field_get:ManualAuthResponse.AccountInfo.tag11)
  return tag11_.GetNoArena();
}
void ManualAuthResponse_AccountInfo::set_tag11(const ::std::string& value) {
  set_has_tag11();
  tag11_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ManualAuthResponse.AccountInfo.tag11)
}
#if LANG_CXX11
void ManualAuthResponse_AccountInfo::set_tag11(::std::string&& value) {
  set_has_tag11();
  tag11_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ManualAuthResponse.AccountInfo.tag11)
}
#endif
void ManualAuthResponse_AccountInfo::set_tag11(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tag11();
  tag11_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ManualAuthResponse.AccountInfo.tag11)
}
void ManualAuthResponse_AccountInfo::set_tag11(const char* value, size_t size) {
  set_has_tag11();
  tag11_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ManualAuthResponse.AccountInfo.tag11)
}
::std::string* ManualAuthResponse_AccountInfo::mutable_tag11() {
  set_has_tag11();
  // @@protoc_insertion_point(field_mutable:ManualAuthResponse.AccountInfo.tag11)
  return tag11_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManualAuthResponse_AccountInfo::release_tag11() {
  // @@protoc_insertion_point(field_release:ManualAuthResponse.AccountInfo.tag11)
  clear_has_tag11();
  return tag11_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManualAuthResponse_AccountInfo::set_allocated_tag11(::std::string* tag11) {
  if (tag11 != NULL) {
    set_has_tag11();
  } else {
    clear_has_tag11();
  }
  tag11_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag11);
  // @@protoc_insertion_point(field_set_allocated:ManualAuthResponse.AccountInfo.tag11)
}

// optional int32 safeDevice = 12;
bool ManualAuthResponse_AccountInfo::has_safedevice() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void ManualAuthResponse_AccountInfo::set_has_safedevice() {
  _has_bits_[0] |= 0x00008000u;
}
void ManualAuthResponse_AccountInfo::clear_has_safedevice() {
  _has_bits_[0] &= ~0x00008000u;
}
void ManualAuthResponse_AccountInfo::clear_safedevice() {
  safedevice_ = 0;
  clear_has_safedevice();
}
::google::protobuf::int32 ManualAuthResponse_AccountInfo::safedevice() const {
  // @@protoc_insertion_point(field_get:ManualAuthResponse.AccountInfo.safeDevice)
  return safedevice_;
}
void ManualAuthResponse_AccountInfo::set_safedevice(::google::protobuf::int32 value) {
  set_has_safedevice();
  safedevice_ = value;
  // @@protoc_insertion_point(field_set:ManualAuthResponse.AccountInfo.safeDevice)
}

// optional string officialNamePinyin = 13;
bool ManualAuthResponse_AccountInfo::has_officialnamepinyin() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ManualAuthResponse_AccountInfo::set_has_officialnamepinyin() {
  _has_bits_[0] |= 0x00000080u;
}
void ManualAuthResponse_AccountInfo::clear_has_officialnamepinyin() {
  _has_bits_[0] &= ~0x00000080u;
}
void ManualAuthResponse_AccountInfo::clear_officialnamepinyin() {
  officialnamepinyin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_officialnamepinyin();
}
const ::std::string& ManualAuthResponse_AccountInfo::officialnamepinyin() const {
  // @@protoc_insertion_point(field_get:ManualAuthResponse.AccountInfo.officialNamePinyin)
  return officialnamepinyin_.GetNoArena();
}
void ManualAuthResponse_AccountInfo::set_officialnamepinyin(const ::std::string& value) {
  set_has_officialnamepinyin();
  officialnamepinyin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ManualAuthResponse.AccountInfo.officialNamePinyin)
}
#if LANG_CXX11
void ManualAuthResponse_AccountInfo::set_officialnamepinyin(::std::string&& value) {
  set_has_officialnamepinyin();
  officialnamepinyin_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ManualAuthResponse.AccountInfo.officialNamePinyin)
}
#endif
void ManualAuthResponse_AccountInfo::set_officialnamepinyin(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_officialnamepinyin();
  officialnamepinyin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ManualAuthResponse.AccountInfo.officialNamePinyin)
}
void ManualAuthResponse_AccountInfo::set_officialnamepinyin(const char* value, size_t size) {
  set_has_officialnamepinyin();
  officialnamepinyin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ManualAuthResponse.AccountInfo.officialNamePinyin)
}
::std::string* ManualAuthResponse_AccountInfo::mutable_officialnamepinyin() {
  set_has_officialnamepinyin();
  // @@protoc_insertion_point(field_mutable:ManualAuthResponse.AccountInfo.officialNamePinyin)
  return officialnamepinyin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManualAuthResponse_AccountInfo::release_officialnamepinyin() {
  // @@protoc_insertion_point(field_release:ManualAuthResponse.AccountInfo.officialNamePinyin)
  clear_has_officialnamepinyin();
  return officialnamepinyin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManualAuthResponse_AccountInfo::set_allocated_officialnamepinyin(::std::string* officialnamepinyin) {
  if (officialnamepinyin != NULL) {
    set_has_officialnamepinyin();
  } else {
    clear_has_officialnamepinyin();
  }
  officialnamepinyin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), officialnamepinyin);
  // @@protoc_insertion_point(field_set_allocated:ManualAuthResponse.AccountInfo.officialNamePinyin)
}

// optional string officialNameZh = 14;
bool ManualAuthResponse_AccountInfo::has_officialnamezh() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ManualAuthResponse_AccountInfo::set_has_officialnamezh() {
  _has_bits_[0] |= 0x00000100u;
}
void ManualAuthResponse_AccountInfo::clear_has_officialnamezh() {
  _has_bits_[0] &= ~0x00000100u;
}
void ManualAuthResponse_AccountInfo::clear_officialnamezh() {
  officialnamezh_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_officialnamezh();
}
const ::std::string& ManualAuthResponse_AccountInfo::officialnamezh() const {
  // @@protoc_insertion_point(field_get:ManualAuthResponse.AccountInfo.officialNameZh)
  return officialnamezh_.GetNoArena();
}
void ManualAuthResponse_AccountInfo::set_officialnamezh(const ::std::string& value) {
  set_has_officialnamezh();
  officialnamezh_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ManualAuthResponse.AccountInfo.officialNameZh)
}
#if LANG_CXX11
void ManualAuthResponse_AccountInfo::set_officialnamezh(::std::string&& value) {
  set_has_officialnamezh();
  officialnamezh_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ManualAuthResponse.AccountInfo.officialNameZh)
}
#endif
void ManualAuthResponse_AccountInfo::set_officialnamezh(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_officialnamezh();
  officialnamezh_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ManualAuthResponse.AccountInfo.officialNameZh)
}
void ManualAuthResponse_AccountInfo::set_officialnamezh(const char* value, size_t size) {
  set_has_officialnamezh();
  officialnamezh_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ManualAuthResponse.AccountInfo.officialNameZh)
}
::std::string* ManualAuthResponse_AccountInfo::mutable_officialnamezh() {
  set_has_officialnamezh();
  // @@protoc_insertion_point(field_mutable:ManualAuthResponse.AccountInfo.officialNameZh)
  return officialnamezh_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManualAuthResponse_AccountInfo::release_officialnamezh() {
  // @@protoc_insertion_point(field_release:ManualAuthResponse.AccountInfo.officialNameZh)
  clear_has_officialnamezh();
  return officialnamezh_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManualAuthResponse_AccountInfo::set_allocated_officialnamezh(::std::string* officialnamezh) {
  if (officialnamezh != NULL) {
    set_has_officialnamezh();
  } else {
    clear_has_officialnamezh();
  }
  officialnamezh_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), officialnamezh);
  // @@protoc_insertion_point(field_set_allocated:ManualAuthResponse.AccountInfo.officialNameZh)
}

// optional string tag15 = 15;
bool ManualAuthResponse_AccountInfo::has_tag15() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ManualAuthResponse_AccountInfo::set_has_tag15() {
  _has_bits_[0] |= 0x00000200u;
}
void ManualAuthResponse_AccountInfo::clear_has_tag15() {
  _has_bits_[0] &= ~0x00000200u;
}
void ManualAuthResponse_AccountInfo::clear_tag15() {
  tag15_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tag15();
}
const ::std::string& ManualAuthResponse_AccountInfo::tag15() const {
  // @@protoc_insertion_point(field_get:ManualAuthResponse.AccountInfo.tag15)
  return tag15_.GetNoArena();
}
void ManualAuthResponse_AccountInfo::set_tag15(const ::std::string& value) {
  set_has_tag15();
  tag15_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ManualAuthResponse.AccountInfo.tag15)
}
#if LANG_CXX11
void ManualAuthResponse_AccountInfo::set_tag15(::std::string&& value) {
  set_has_tag15();
  tag15_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ManualAuthResponse.AccountInfo.tag15)
}
#endif
void ManualAuthResponse_AccountInfo::set_tag15(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tag15();
  tag15_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ManualAuthResponse.AccountInfo.tag15)
}
void ManualAuthResponse_AccountInfo::set_tag15(const char* value, size_t size) {
  set_has_tag15();
  tag15_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ManualAuthResponse.AccountInfo.tag15)
}
::std::string* ManualAuthResponse_AccountInfo::mutable_tag15() {
  set_has_tag15();
  // @@protoc_insertion_point(field_mutable:ManualAuthResponse.AccountInfo.tag15)
  return tag15_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManualAuthResponse_AccountInfo::release_tag15() {
  // @@protoc_insertion_point(field_release:ManualAuthResponse.AccountInfo.tag15)
  clear_has_tag15();
  return tag15_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManualAuthResponse_AccountInfo::set_allocated_tag15(::std::string* tag15) {
  if (tag15 != NULL) {
    set_has_tag15();
  } else {
    clear_has_tag15();
  }
  tag15_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag15);
  // @@protoc_insertion_point(field_set_allocated:ManualAuthResponse.AccountInfo.tag15)
}

// optional string fsUrl = 16;
bool ManualAuthResponse_AccountInfo::has_fsurl() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ManualAuthResponse_AccountInfo::set_has_fsurl() {
  _has_bits_[0] |= 0x00000400u;
}
void ManualAuthResponse_AccountInfo::clear_has_fsurl() {
  _has_bits_[0] &= ~0x00000400u;
}
void ManualAuthResponse_AccountInfo::clear_fsurl() {
  fsurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fsurl();
}
const ::std::string& ManualAuthResponse_AccountInfo::fsurl() const {
  // @@protoc_insertion_point(field_get:ManualAuthResponse.AccountInfo.fsUrl)
  return fsurl_.GetNoArena();
}
void ManualAuthResponse_AccountInfo::set_fsurl(const ::std::string& value) {
  set_has_fsurl();
  fsurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ManualAuthResponse.AccountInfo.fsUrl)
}
#if LANG_CXX11
void ManualAuthResponse_AccountInfo::set_fsurl(::std::string&& value) {
  set_has_fsurl();
  fsurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ManualAuthResponse.AccountInfo.fsUrl)
}
#endif
void ManualAuthResponse_AccountInfo::set_fsurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fsurl();
  fsurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ManualAuthResponse.AccountInfo.fsUrl)
}
void ManualAuthResponse_AccountInfo::set_fsurl(const char* value, size_t size) {
  set_has_fsurl();
  fsurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ManualAuthResponse.AccountInfo.fsUrl)
}
::std::string* ManualAuthResponse_AccountInfo::mutable_fsurl() {
  set_has_fsurl();
  // @@protoc_insertion_point(field_mutable:ManualAuthResponse.AccountInfo.fsUrl)
  return fsurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManualAuthResponse_AccountInfo::release_fsurl() {
  // @@protoc_insertion_point(field_release:ManualAuthResponse.AccountInfo.fsUrl)
  clear_has_fsurl();
  return fsurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManualAuthResponse_AccountInfo::set_allocated_fsurl(::std::string* fsurl) {
  if (fsurl != NULL) {
    set_has_fsurl();
  } else {
    clear_has_fsurl();
  }
  fsurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fsurl);
  // @@protoc_insertion_point(field_set_allocated:ManualAuthResponse.AccountInfo.fsUrl)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ManualAuthResponse_dns_info_redirect_info_real_host_info::kHostFieldNumber;
const int ManualAuthResponse_dns_info_redirect_info_real_host_info::kRedirectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ManualAuthResponse_dns_info_redirect_info_real_host_info::ManualAuthResponse_dns_info_redirect_info_real_host_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ManualAuthResponse.dns_info.redirect_info.real_host_info)
}
ManualAuthResponse_dns_info_redirect_info_real_host_info::ManualAuthResponse_dns_info_redirect_info_real_host_info(const ManualAuthResponse_dns_info_redirect_info_real_host_info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_host()) {
    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  redirect_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_redirect()) {
    redirect_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.redirect_);
  }
  // @@protoc_insertion_point(copy_constructor:ManualAuthResponse.dns_info.redirect_info.real_host_info)
}

void ManualAuthResponse_dns_info_redirect_info_real_host_info::SharedCtor() {
  _cached_size_ = 0;
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  redirect_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ManualAuthResponse_dns_info_redirect_info_real_host_info::~ManualAuthResponse_dns_info_redirect_info_real_host_info() {
  // @@protoc_insertion_point(destructor:ManualAuthResponse.dns_info.redirect_info.real_host_info)
  SharedDtor();
}

void ManualAuthResponse_dns_info_redirect_info_real_host_info::SharedDtor() {
  host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  redirect_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ManualAuthResponse_dns_info_redirect_info_real_host_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ManualAuthResponse_dns_info_redirect_info_real_host_info::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ManualAuthResponse_dns_info_redirect_info_real_host_info& ManualAuthResponse_dns_info_redirect_info_real_host_info::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

ManualAuthResponse_dns_info_redirect_info_real_host_info* ManualAuthResponse_dns_info_redirect_info_real_host_info::New(::google::protobuf::Arena* arena) const {
  ManualAuthResponse_dns_info_redirect_info_real_host_info* n = new ManualAuthResponse_dns_info_redirect_info_real_host_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ManualAuthResponse_dns_info_redirect_info_real_host_info::Clear() {
// @@protoc_insertion_point(message_clear_start:ManualAuthResponse.dns_info.redirect_info.real_host_info)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_host()) {
      GOOGLE_DCHECK(!host_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*host_.UnsafeRawStringPointer())->clear();
    }
    if (has_redirect()) {
      GOOGLE_DCHECK(!redirect_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*redirect_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ManualAuthResponse_dns_info_redirect_info_real_host_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ManualAuthResponse.dns_info.redirect_info.real_host_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string host = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ManualAuthResponse.dns_info.redirect_info.real_host_info.host");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string redirect = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_redirect()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->redirect().data(), this->redirect().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ManualAuthResponse.dns_info.redirect_info.real_host_info.redirect");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ManualAuthResponse.dns_info.redirect_info.real_host_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ManualAuthResponse.dns_info.redirect_info.real_host_info)
  return false;
#undef DO_
}

void ManualAuthResponse_dns_info_redirect_info_real_host_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ManualAuthResponse.dns_info.redirect_info.real_host_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string host = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthResponse.dns_info.redirect_info.real_host_info.host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->host(), output);
  }

  // optional string redirect = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->redirect().data(), this->redirect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthResponse.dns_info.redirect_info.real_host_info.redirect");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->redirect(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ManualAuthResponse.dns_info.redirect_info.real_host_info)
}

::google::protobuf::uint8* ManualAuthResponse_dns_info_redirect_info_real_host_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ManualAuthResponse.dns_info.redirect_info.real_host_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string host = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthResponse.dns_info.redirect_info.real_host_info.host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host(), target);
  }

  // optional string redirect = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->redirect().data(), this->redirect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthResponse.dns_info.redirect_info.real_host_info.redirect");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->redirect(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ManualAuthResponse.dns_info.redirect_info.real_host_info)
  return target;
}

size_t ManualAuthResponse_dns_info_redirect_info_real_host_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ManualAuthResponse.dns_info.redirect_info.real_host_info)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string host = 1;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }

    // optional string redirect = 2;
    if (has_redirect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->redirect());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ManualAuthResponse_dns_info_redirect_info_real_host_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ManualAuthResponse.dns_info.redirect_info.real_host_info)
  GOOGLE_DCHECK_NE(&from, this);
  const ManualAuthResponse_dns_info_redirect_info_real_host_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ManualAuthResponse_dns_info_redirect_info_real_host_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ManualAuthResponse.dns_info.redirect_info.real_host_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ManualAuthResponse.dns_info.redirect_info.real_host_info)
    MergeFrom(*source);
  }
}

void ManualAuthResponse_dns_info_redirect_info_real_host_info::MergeFrom(const ManualAuthResponse_dns_info_redirect_info_real_host_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ManualAuthResponse.dns_info.redirect_info.real_host_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_host();
      host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_redirect();
      redirect_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.redirect_);
    }
  }
}

void ManualAuthResponse_dns_info_redirect_info_real_host_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ManualAuthResponse.dns_info.redirect_info.real_host_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManualAuthResponse_dns_info_redirect_info_real_host_info::CopyFrom(const ManualAuthResponse_dns_info_redirect_info_real_host_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ManualAuthResponse.dns_info.redirect_info.real_host_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManualAuthResponse_dns_info_redirect_info_real_host_info::IsInitialized() const {
  return true;
}

void ManualAuthResponse_dns_info_redirect_info_real_host_info::Swap(ManualAuthResponse_dns_info_redirect_info_real_host_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ManualAuthResponse_dns_info_redirect_info_real_host_info::InternalSwap(ManualAuthResponse_dns_info_redirect_info_real_host_info* other) {
  host_.Swap(&other->host_);
  redirect_.Swap(&other->redirect_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ManualAuthResponse_dns_info_redirect_info_real_host_info::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ManualAuthResponse_dns_info_redirect_info_real_host_info

// optional string host = 1;
bool ManualAuthResponse_dns_info_redirect_info_real_host_info::has_host() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ManualAuthResponse_dns_info_redirect_info_real_host_info::set_has_host() {
  _has_bits_[0] |= 0x00000001u;
}
void ManualAuthResponse_dns_info_redirect_info_real_host_info::clear_has_host() {
  _has_bits_[0] &= ~0x00000001u;
}
void ManualAuthResponse_dns_info_redirect_info_real_host_info::clear_host() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_host();
}
const ::std::string& ManualAuthResponse_dns_info_redirect_info_real_host_info::host() const {
  // @@protoc_insertion_point(field_get:ManualAuthResponse.dns_info.redirect_info.real_host_info.host)
  return host_.GetNoArena();
}
void ManualAuthResponse_dns_info_redirect_info_real_host_info::set_host(const ::std::string& value) {
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ManualAuthResponse.dns_info.redirect_info.real_host_info.host)
}
#if LANG_CXX11
void ManualAuthResponse_dns_info_redirect_info_real_host_info::set_host(::std::string&& value) {
  set_has_host();
  host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ManualAuthResponse.dns_info.redirect_info.real_host_info.host)
}
#endif
void ManualAuthResponse_dns_info_redirect_info_real_host_info::set_host(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ManualAuthResponse.dns_info.redirect_info.real_host_info.host)
}
void ManualAuthResponse_dns_info_redirect_info_real_host_info::set_host(const char* value, size_t size) {
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ManualAuthResponse.dns_info.redirect_info.real_host_info.host)
}
::std::string* ManualAuthResponse_dns_info_redirect_info_real_host_info::mutable_host() {
  set_has_host();
  // @@protoc_insertion_point(field_mutable:ManualAuthResponse.dns_info.redirect_info.real_host_info.host)
  return host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManualAuthResponse_dns_info_redirect_info_real_host_info::release_host() {
  // @@protoc_insertion_point(field_release:ManualAuthResponse.dns_info.redirect_info.real_host_info.host)
  clear_has_host();
  return host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManualAuthResponse_dns_info_redirect_info_real_host_info::set_allocated_host(::std::string* host) {
  if (host != NULL) {
    set_has_host();
  } else {
    clear_has_host();
  }
  host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:ManualAuthResponse.dns_info.redirect_info.real_host_info.host)
}

// optional string redirect = 2;
bool ManualAuthResponse_dns_info_redirect_info_real_host_info::has_redirect() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ManualAuthResponse_dns_info_redirect_info_real_host_info::set_has_redirect() {
  _has_bits_[0] |= 0x00000002u;
}
void ManualAuthResponse_dns_info_redirect_info_real_host_info::clear_has_redirect() {
  _has_bits_[0] &= ~0x00000002u;
}
void ManualAuthResponse_dns_info_redirect_info_real_host_info::clear_redirect() {
  redirect_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_redirect();
}
const ::std::string& ManualAuthResponse_dns_info_redirect_info_real_host_info::redirect() const {
  // @@protoc_insertion_point(field_get:ManualAuthResponse.dns_info.redirect_info.real_host_info.redirect)
  return redirect_.GetNoArena();
}
void ManualAuthResponse_dns_info_redirect_info_real_host_info::set_redirect(const ::std::string& value) {
  set_has_redirect();
  redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ManualAuthResponse.dns_info.redirect_info.real_host_info.redirect)
}
#if LANG_CXX11
void ManualAuthResponse_dns_info_redirect_info_real_host_info::set_redirect(::std::string&& value) {
  set_has_redirect();
  redirect_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ManualAuthResponse.dns_info.redirect_info.real_host_info.redirect)
}
#endif
void ManualAuthResponse_dns_info_redirect_info_real_host_info::set_redirect(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_redirect();
  redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ManualAuthResponse.dns_info.redirect_info.real_host_info.redirect)
}
void ManualAuthResponse_dns_info_redirect_info_real_host_info::set_redirect(const char* value, size_t size) {
  set_has_redirect();
  redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ManualAuthResponse.dns_info.redirect_info.real_host_info.redirect)
}
::std::string* ManualAuthResponse_dns_info_redirect_info_real_host_info::mutable_redirect() {
  set_has_redirect();
  // @@protoc_insertion_point(field_mutable:ManualAuthResponse.dns_info.redirect_info.real_host_info.redirect)
  return redirect_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManualAuthResponse_dns_info_redirect_info_real_host_info::release_redirect() {
  // @@protoc_insertion_point(field_release:ManualAuthResponse.dns_info.redirect_info.real_host_info.redirect)
  clear_has_redirect();
  return redirect_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManualAuthResponse_dns_info_redirect_info_real_host_info::set_allocated_redirect(::std::string* redirect) {
  if (redirect != NULL) {
    set_has_redirect();
  } else {
    clear_has_redirect();
  }
  redirect_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), redirect);
  // @@protoc_insertion_point(field_set_allocated:ManualAuthResponse.dns_info.redirect_info.real_host_info.redirect)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ManualAuthResponse_dns_info_redirect_info::kCntFieldNumber;
const int ManualAuthResponse_dns_info_redirect_info::kRealHostFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ManualAuthResponse_dns_info_redirect_info::ManualAuthResponse_dns_info_redirect_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ManualAuthResponse.dns_info.redirect_info)
}
ManualAuthResponse_dns_info_redirect_info::ManualAuthResponse_dns_info_redirect_info(const ManualAuthResponse_dns_info_redirect_info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      real_host_(from.real_host_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cnt_ = from.cnt_;
  // @@protoc_insertion_point(copy_constructor:ManualAuthResponse.dns_info.redirect_info)
}

void ManualAuthResponse_dns_info_redirect_info::SharedCtor() {
  _cached_size_ = 0;
  cnt_ = 0;
}

ManualAuthResponse_dns_info_redirect_info::~ManualAuthResponse_dns_info_redirect_info() {
  // @@protoc_insertion_point(destructor:ManualAuthResponse.dns_info.redirect_info)
  SharedDtor();
}

void ManualAuthResponse_dns_info_redirect_info::SharedDtor() {
}

void ManualAuthResponse_dns_info_redirect_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ManualAuthResponse_dns_info_redirect_info::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ManualAuthResponse_dns_info_redirect_info& ManualAuthResponse_dns_info_redirect_info::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

ManualAuthResponse_dns_info_redirect_info* ManualAuthResponse_dns_info_redirect_info::New(::google::protobuf::Arena* arena) const {
  ManualAuthResponse_dns_info_redirect_info* n = new ManualAuthResponse_dns_info_redirect_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ManualAuthResponse_dns_info_redirect_info::Clear() {
// @@protoc_insertion_point(message_clear_start:ManualAuthResponse.dns_info.redirect_info)
  real_host_.Clear();
  cnt_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ManualAuthResponse_dns_info_redirect_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ManualAuthResponse.dns_info.redirect_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cnt = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_cnt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ManualAuthResponse.dns_info.redirect_info.real_host_info real_host = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_real_host()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ManualAuthResponse.dns_info.redirect_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ManualAuthResponse.dns_info.redirect_info)
  return false;
#undef DO_
}

void ManualAuthResponse_dns_info_redirect_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ManualAuthResponse.dns_info.redirect_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cnt = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cnt(), output);
  }

  // repeated .ManualAuthResponse.dns_info.redirect_info.real_host_info real_host = 2;
  for (unsigned int i = 0, n = this->real_host_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->real_host(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ManualAuthResponse.dns_info.redirect_info)
}

::google::protobuf::uint8* ManualAuthResponse_dns_info_redirect_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ManualAuthResponse.dns_info.redirect_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cnt = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cnt(), target);
  }

  // repeated .ManualAuthResponse.dns_info.redirect_info.real_host_info real_host = 2;
  for (unsigned int i = 0, n = this->real_host_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->real_host(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ManualAuthResponse.dns_info.redirect_info)
  return target;
}

size_t ManualAuthResponse_dns_info_redirect_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ManualAuthResponse.dns_info.redirect_info)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .ManualAuthResponse.dns_info.redirect_info.real_host_info real_host = 2;
  {
    unsigned int count = this->real_host_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->real_host(i));
    }
  }

  // optional int32 cnt = 1;
  if (has_cnt()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cnt());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ManualAuthResponse_dns_info_redirect_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ManualAuthResponse.dns_info.redirect_info)
  GOOGLE_DCHECK_NE(&from, this);
  const ManualAuthResponse_dns_info_redirect_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ManualAuthResponse_dns_info_redirect_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ManualAuthResponse.dns_info.redirect_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ManualAuthResponse.dns_info.redirect_info)
    MergeFrom(*source);
  }
}

void ManualAuthResponse_dns_info_redirect_info::MergeFrom(const ManualAuthResponse_dns_info_redirect_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ManualAuthResponse.dns_info.redirect_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  real_host_.MergeFrom(from.real_host_);
  if (from.has_cnt()) {
    set_cnt(from.cnt());
  }
}

void ManualAuthResponse_dns_info_redirect_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ManualAuthResponse.dns_info.redirect_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManualAuthResponse_dns_info_redirect_info::CopyFrom(const ManualAuthResponse_dns_info_redirect_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ManualAuthResponse.dns_info.redirect_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManualAuthResponse_dns_info_redirect_info::IsInitialized() const {
  return true;
}

void ManualAuthResponse_dns_info_redirect_info::Swap(ManualAuthResponse_dns_info_redirect_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ManualAuthResponse_dns_info_redirect_info::InternalSwap(ManualAuthResponse_dns_info_redirect_info* other) {
  real_host_.InternalSwap(&other->real_host_);
  std::swap(cnt_, other->cnt_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ManualAuthResponse_dns_info_redirect_info::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ManualAuthResponse_dns_info_redirect_info

// optional int32 cnt = 1;
bool ManualAuthResponse_dns_info_redirect_info::has_cnt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ManualAuthResponse_dns_info_redirect_info::set_has_cnt() {
  _has_bits_[0] |= 0x00000001u;
}
void ManualAuthResponse_dns_info_redirect_info::clear_has_cnt() {
  _has_bits_[0] &= ~0x00000001u;
}
void ManualAuthResponse_dns_info_redirect_info::clear_cnt() {
  cnt_ = 0;
  clear_has_cnt();
}
::google::protobuf::int32 ManualAuthResponse_dns_info_redirect_info::cnt() const {
  // @@protoc_insertion_point(field_get:ManualAuthResponse.dns_info.redirect_info.cnt)
  return cnt_;
}
void ManualAuthResponse_dns_info_redirect_info::set_cnt(::google::protobuf::int32 value) {
  set_has_cnt();
  cnt_ = value;
  // @@protoc_insertion_point(field_set:ManualAuthResponse.dns_info.redirect_info.cnt)
}

// repeated .ManualAuthResponse.dns_info.redirect_info.real_host_info real_host = 2;
int ManualAuthResponse_dns_info_redirect_info::real_host_size() const {
  return real_host_.size();
}
void ManualAuthResponse_dns_info_redirect_info::clear_real_host() {
  real_host_.Clear();
}
const ::ManualAuthResponse_dns_info_redirect_info_real_host_info& ManualAuthResponse_dns_info_redirect_info::real_host(int index) const {
  // @@protoc_insertion_point(field_get:ManualAuthResponse.dns_info.redirect_info.real_host)
  return real_host_.Get(index);
}
::ManualAuthResponse_dns_info_redirect_info_real_host_info* ManualAuthResponse_dns_info_redirect_info::mutable_real_host(int index) {
  // @@protoc_insertion_point(field_mutable:ManualAuthResponse.dns_info.redirect_info.real_host)
  return real_host_.Mutable(index);
}
::ManualAuthResponse_dns_info_redirect_info_real_host_info* ManualAuthResponse_dns_info_redirect_info::add_real_host() {
  // @@protoc_insertion_point(field_add:ManualAuthResponse.dns_info.redirect_info.real_host)
  return real_host_.Add();
}
::google::protobuf::RepeatedPtrField< ::ManualAuthResponse_dns_info_redirect_info_real_host_info >*
ManualAuthResponse_dns_info_redirect_info::mutable_real_host() {
  // @@protoc_insertion_point(field_mutable_list:ManualAuthResponse.dns_info.redirect_info.real_host)
  return &real_host_;
}
const ::google::protobuf::RepeatedPtrField< ::ManualAuthResponse_dns_info_redirect_info_real_host_info >&
ManualAuthResponse_dns_info_redirect_info::real_host() const {
  // @@protoc_insertion_point(field_list:ManualAuthResponse.dns_info.redirect_info.real_host)
  return real_host_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ManualAuthResponse_dns_info_ip_info_longlink_ip_info::kIpFieldNumber;
const int ManualAuthResponse_dns_info_ip_info_longlink_ip_info::kHostFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ManualAuthResponse_dns_info_ip_info_longlink_ip_info::ManualAuthResponse_dns_info_ip_info_longlink_ip_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ManualAuthResponse.dns_info.ip_info.longlink_ip_info)
}
ManualAuthResponse_dns_info_ip_info_longlink_ip_info::ManualAuthResponse_dns_info_ip_info_longlink_ip_info(const ManualAuthResponse_dns_info_ip_info_longlink_ip_info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip()) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_host()) {
    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  // @@protoc_insertion_point(copy_constructor:ManualAuthResponse.dns_info.ip_info.longlink_ip_info)
}

void ManualAuthResponse_dns_info_ip_info_longlink_ip_info::SharedCtor() {
  _cached_size_ = 0;
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ManualAuthResponse_dns_info_ip_info_longlink_ip_info::~ManualAuthResponse_dns_info_ip_info_longlink_ip_info() {
  // @@protoc_insertion_point(destructor:ManualAuthResponse.dns_info.ip_info.longlink_ip_info)
  SharedDtor();
}

void ManualAuthResponse_dns_info_ip_info_longlink_ip_info::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ManualAuthResponse_dns_info_ip_info_longlink_ip_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ManualAuthResponse_dns_info_ip_info_longlink_ip_info::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ManualAuthResponse_dns_info_ip_info_longlink_ip_info& ManualAuthResponse_dns_info_ip_info_longlink_ip_info::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

ManualAuthResponse_dns_info_ip_info_longlink_ip_info* ManualAuthResponse_dns_info_ip_info_longlink_ip_info::New(::google::protobuf::Arena* arena) const {
  ManualAuthResponse_dns_info_ip_info_longlink_ip_info* n = new ManualAuthResponse_dns_info_ip_info_longlink_ip_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ManualAuthResponse_dns_info_ip_info_longlink_ip_info::Clear() {
// @@protoc_insertion_point(message_clear_start:ManualAuthResponse.dns_info.ip_info.longlink_ip_info)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_ip()) {
      GOOGLE_DCHECK(!ip_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ip_.UnsafeRawStringPointer())->clear();
    }
    if (has_host()) {
      GOOGLE_DCHECK(!host_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*host_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ManualAuthResponse_dns_info_ip_info_longlink_ip_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ManualAuthResponse.dns_info.ip_info.longlink_ip_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ip = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ManualAuthResponse.dns_info.ip_info.longlink_ip_info.ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string host = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ManualAuthResponse.dns_info.ip_info.longlink_ip_info.host");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ManualAuthResponse.dns_info.ip_info.longlink_ip_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ManualAuthResponse.dns_info.ip_info.longlink_ip_info)
  return false;
#undef DO_
}

void ManualAuthResponse_dns_info_ip_info_longlink_ip_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ManualAuthResponse.dns_info.ip_info.longlink_ip_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ip = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthResponse.dns_info.ip_info.longlink_ip_info.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ip(), output);
  }

  // optional string host = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthResponse.dns_info.ip_info.longlink_ip_info.host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->host(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ManualAuthResponse.dns_info.ip_info.longlink_ip_info)
}

::google::protobuf::uint8* ManualAuthResponse_dns_info_ip_info_longlink_ip_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ManualAuthResponse.dns_info.ip_info.longlink_ip_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ip = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthResponse.dns_info.ip_info.longlink_ip_info.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  // optional string host = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthResponse.dns_info.ip_info.longlink_ip_info.host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->host(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ManualAuthResponse.dns_info.ip_info.longlink_ip_info)
  return target;
}

size_t ManualAuthResponse_dns_info_ip_info_longlink_ip_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ManualAuthResponse.dns_info.ip_info.longlink_ip_info)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional string host = 4;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ManualAuthResponse_dns_info_ip_info_longlink_ip_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ManualAuthResponse.dns_info.ip_info.longlink_ip_info)
  GOOGLE_DCHECK_NE(&from, this);
  const ManualAuthResponse_dns_info_ip_info_longlink_ip_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ManualAuthResponse_dns_info_ip_info_longlink_ip_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ManualAuthResponse.dns_info.ip_info.longlink_ip_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ManualAuthResponse.dns_info.ip_info.longlink_ip_info)
    MergeFrom(*source);
  }
}

void ManualAuthResponse_dns_info_ip_info_longlink_ip_info::MergeFrom(const ManualAuthResponse_dns_info_ip_info_longlink_ip_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ManualAuthResponse.dns_info.ip_info.longlink_ip_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_host();
      host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
    }
  }
}

void ManualAuthResponse_dns_info_ip_info_longlink_ip_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ManualAuthResponse.dns_info.ip_info.longlink_ip_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManualAuthResponse_dns_info_ip_info_longlink_ip_info::CopyFrom(const ManualAuthResponse_dns_info_ip_info_longlink_ip_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ManualAuthResponse.dns_info.ip_info.longlink_ip_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManualAuthResponse_dns_info_ip_info_longlink_ip_info::IsInitialized() const {
  return true;
}

void ManualAuthResponse_dns_info_ip_info_longlink_ip_info::Swap(ManualAuthResponse_dns_info_ip_info_longlink_ip_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ManualAuthResponse_dns_info_ip_info_longlink_ip_info::InternalSwap(ManualAuthResponse_dns_info_ip_info_longlink_ip_info* other) {
  ip_.Swap(&other->ip_);
  host_.Swap(&other->host_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ManualAuthResponse_dns_info_ip_info_longlink_ip_info::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ManualAuthResponse_dns_info_ip_info_longlink_ip_info

// optional string ip = 3;
bool ManualAuthResponse_dns_info_ip_info_longlink_ip_info::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ManualAuthResponse_dns_info_ip_info_longlink_ip_info::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
void ManualAuthResponse_dns_info_ip_info_longlink_ip_info::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
void ManualAuthResponse_dns_info_ip_info_longlink_ip_info::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
const ::std::string& ManualAuthResponse_dns_info_ip_info_longlink_ip_info::ip() const {
  // @@protoc_insertion_point(field_get:ManualAuthResponse.dns_info.ip_info.longlink_ip_info.ip)
  return ip_.GetNoArena();
}
void ManualAuthResponse_dns_info_ip_info_longlink_ip_info::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ManualAuthResponse.dns_info.ip_info.longlink_ip_info.ip)
}
#if LANG_CXX11
void ManualAuthResponse_dns_info_ip_info_longlink_ip_info::set_ip(::std::string&& value) {
  set_has_ip();
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ManualAuthResponse.dns_info.ip_info.longlink_ip_info.ip)
}
#endif
void ManualAuthResponse_dns_info_ip_info_longlink_ip_info::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ManualAuthResponse.dns_info.ip_info.longlink_ip_info.ip)
}
void ManualAuthResponse_dns_info_ip_info_longlink_ip_info::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ManualAuthResponse.dns_info.ip_info.longlink_ip_info.ip)
}
::std::string* ManualAuthResponse_dns_info_ip_info_longlink_ip_info::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:ManualAuthResponse.dns_info.ip_info.longlink_ip_info.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManualAuthResponse_dns_info_ip_info_longlink_ip_info::release_ip() {
  // @@protoc_insertion_point(field_release:ManualAuthResponse.dns_info.ip_info.longlink_ip_info.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManualAuthResponse_dns_info_ip_info_longlink_ip_info::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:ManualAuthResponse.dns_info.ip_info.longlink_ip_info.ip)
}

// optional string host = 4;
bool ManualAuthResponse_dns_info_ip_info_longlink_ip_info::has_host() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ManualAuthResponse_dns_info_ip_info_longlink_ip_info::set_has_host() {
  _has_bits_[0] |= 0x00000002u;
}
void ManualAuthResponse_dns_info_ip_info_longlink_ip_info::clear_has_host() {
  _has_bits_[0] &= ~0x00000002u;
}
void ManualAuthResponse_dns_info_ip_info_longlink_ip_info::clear_host() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_host();
}
const ::std::string& ManualAuthResponse_dns_info_ip_info_longlink_ip_info::host() const {
  // @@protoc_insertion_point(field_get:ManualAuthResponse.dns_info.ip_info.longlink_ip_info.host)
  return host_.GetNoArena();
}
void ManualAuthResponse_dns_info_ip_info_longlink_ip_info::set_host(const ::std::string& value) {
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ManualAuthResponse.dns_info.ip_info.longlink_ip_info.host)
}
#if LANG_CXX11
void ManualAuthResponse_dns_info_ip_info_longlink_ip_info::set_host(::std::string&& value) {
  set_has_host();
  host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ManualAuthResponse.dns_info.ip_info.longlink_ip_info.host)
}
#endif
void ManualAuthResponse_dns_info_ip_info_longlink_ip_info::set_host(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ManualAuthResponse.dns_info.ip_info.longlink_ip_info.host)
}
void ManualAuthResponse_dns_info_ip_info_longlink_ip_info::set_host(const char* value, size_t size) {
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ManualAuthResponse.dns_info.ip_info.longlink_ip_info.host)
}
::std::string* ManualAuthResponse_dns_info_ip_info_longlink_ip_info::mutable_host() {
  set_has_host();
  // @@protoc_insertion_point(field_mutable:ManualAuthResponse.dns_info.ip_info.longlink_ip_info.host)
  return host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManualAuthResponse_dns_info_ip_info_longlink_ip_info::release_host() {
  // @@protoc_insertion_point(field_release:ManualAuthResponse.dns_info.ip_info.longlink_ip_info.host)
  clear_has_host();
  return host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManualAuthResponse_dns_info_ip_info_longlink_ip_info::set_allocated_host(::std::string* host) {
  if (host != NULL) {
    set_has_host();
  } else {
    clear_has_host();
  }
  host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:ManualAuthResponse.dns_info.ip_info.longlink_ip_info.host)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ManualAuthResponse_dns_info_ip_info_shortlink_ip_info::kIpFieldNumber;
const int ManualAuthResponse_dns_info_ip_info_shortlink_ip_info::kHostFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ManualAuthResponse_dns_info_ip_info_shortlink_ip_info::ManualAuthResponse_dns_info_ip_info_shortlink_ip_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ManualAuthResponse.dns_info.ip_info.shortlink_ip_info)
}
ManualAuthResponse_dns_info_ip_info_shortlink_ip_info::ManualAuthResponse_dns_info_ip_info_shortlink_ip_info(const ManualAuthResponse_dns_info_ip_info_shortlink_ip_info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip()) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_host()) {
    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  // @@protoc_insertion_point(copy_constructor:ManualAuthResponse.dns_info.ip_info.shortlink_ip_info)
}

void ManualAuthResponse_dns_info_ip_info_shortlink_ip_info::SharedCtor() {
  _cached_size_ = 0;
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ManualAuthResponse_dns_info_ip_info_shortlink_ip_info::~ManualAuthResponse_dns_info_ip_info_shortlink_ip_info() {
  // @@protoc_insertion_point(destructor:ManualAuthResponse.dns_info.ip_info.shortlink_ip_info)
  SharedDtor();
}

void ManualAuthResponse_dns_info_ip_info_shortlink_ip_info::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ManualAuthResponse_dns_info_ip_info_shortlink_ip_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ManualAuthResponse_dns_info_ip_info_shortlink_ip_info::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ManualAuthResponse_dns_info_ip_info_shortlink_ip_info& ManualAuthResponse_dns_info_ip_info_shortlink_ip_info::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

ManualAuthResponse_dns_info_ip_info_shortlink_ip_info* ManualAuthResponse_dns_info_ip_info_shortlink_ip_info::New(::google::protobuf::Arena* arena) const {
  ManualAuthResponse_dns_info_ip_info_shortlink_ip_info* n = new ManualAuthResponse_dns_info_ip_info_shortlink_ip_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ManualAuthResponse_dns_info_ip_info_shortlink_ip_info::Clear() {
// @@protoc_insertion_point(message_clear_start:ManualAuthResponse.dns_info.ip_info.shortlink_ip_info)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_ip()) {
      GOOGLE_DCHECK(!ip_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ip_.UnsafeRawStringPointer())->clear();
    }
    if (has_host()) {
      GOOGLE_DCHECK(!host_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*host_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ManualAuthResponse_dns_info_ip_info_shortlink_ip_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ManualAuthResponse.dns_info.ip_info.shortlink_ip_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ip = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ManualAuthResponse.dns_info.ip_info.shortlink_ip_info.ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string host = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ManualAuthResponse.dns_info.ip_info.shortlink_ip_info.host");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ManualAuthResponse.dns_info.ip_info.shortlink_ip_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ManualAuthResponse.dns_info.ip_info.shortlink_ip_info)
  return false;
#undef DO_
}

void ManualAuthResponse_dns_info_ip_info_shortlink_ip_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ManualAuthResponse.dns_info.ip_info.shortlink_ip_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ip = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthResponse.dns_info.ip_info.shortlink_ip_info.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ip(), output);
  }

  // optional string host = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthResponse.dns_info.ip_info.shortlink_ip_info.host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->host(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ManualAuthResponse.dns_info.ip_info.shortlink_ip_info)
}

::google::protobuf::uint8* ManualAuthResponse_dns_info_ip_info_shortlink_ip_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ManualAuthResponse.dns_info.ip_info.shortlink_ip_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ip = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthResponse.dns_info.ip_info.shortlink_ip_info.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  // optional string host = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ManualAuthResponse.dns_info.ip_info.shortlink_ip_info.host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->host(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ManualAuthResponse.dns_info.ip_info.shortlink_ip_info)
  return target;
}

size_t ManualAuthResponse_dns_info_ip_info_shortlink_ip_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ManualAuthResponse.dns_info.ip_info.shortlink_ip_info)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional string host = 4;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ManualAuthResponse_dns_info_ip_info_shortlink_ip_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ManualAuthResponse.dns_info.ip_info.shortlink_ip_info)
  GOOGLE_DCHECK_NE(&from, this);
  const ManualAuthResponse_dns_info_ip_info_shortlink_ip_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ManualAuthResponse_dns_info_ip_info_shortlink_ip_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ManualAuthResponse.dns_info.ip_info.shortlink_ip_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ManualAuthResponse.dns_info.ip_info.shortlink_ip_info)
    MergeFrom(*source);
  }
}

void ManualAuthResponse_dns_info_ip_info_shortlink_ip_info::MergeFrom(const ManualAuthResponse_dns_info_ip_info_shortlink_ip_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ManualAuthResponse.dns_info.ip_info.shortlink_ip_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_host();
      host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
    }
  }
}

void ManualAuthResponse_dns_info_ip_info_shortlink_ip_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ManualAuthResponse.dns_info.ip_info.shortlink_ip_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManualAuthResponse_dns_info_ip_info_shortlink_ip_info::CopyFrom(const ManualAuthResponse_dns_info_ip_info_shortlink_ip_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ManualAuthResponse.dns_info.ip_info.shortlink_ip_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManualAuthResponse_dns_info_ip_info_shortlink_ip_info::IsInitialized() const {
  return true;
}

void ManualAuthResponse_dns_info_ip_info_shortlink_ip_info::Swap(ManualAuthResponse_dns_info_ip_info_shortlink_ip_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ManualAuthResponse_dns_info_ip_info_shortlink_ip_info::InternalSwap(ManualAuthResponse_dns_info_ip_info_shortlink_ip_info* other) {
  ip_.Swap(&other->ip_);
  host_.Swap(&other->host_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ManualAuthResponse_dns_info_ip_info_shortlink_ip_info::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ManualAuthResponse_dns_info_ip_info_shortlink_ip_info

// optional string ip = 3;
bool ManualAuthResponse_dns_info_ip_info_shortlink_ip_info::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ManualAuthResponse_dns_info_ip_info_shortlink_ip_info::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
void ManualAuthResponse_dns_info_ip_info_shortlink_ip_info::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
void ManualAuthResponse_dns_info_ip_info_shortlink_ip_info::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
const ::std::string& ManualAuthResponse_dns_info_ip_info_shortlink_ip_info::ip() const {
  // @@protoc_insertion_point(field_get:ManualAuthResponse.dns_info.ip_info.shortlink_ip_info.ip)
  return ip_.GetNoArena();
}
void ManualAuthResponse_dns_info_ip_info_shortlink_ip_info::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ManualAuthResponse.dns_info.ip_info.shortlink_ip_info.ip)
}
#if LANG_CXX11
void ManualAuthResponse_dns_info_ip_info_shortlink_ip_info::set_ip(::std::string&& value) {
  set_has_ip();
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ManualAuthResponse.dns_info.ip_info.shortlink_ip_info.ip)
}
#endif
void ManualAuthResponse_dns_info_ip_info_shortlink_ip_info::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ManualAuthResponse.dns_info.ip_info.shortlink_ip_info.ip)
}
void ManualAuthResponse_dns_info_ip_info_shortlink_ip_info::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ManualAuthResponse.dns_info.ip_info.shortlink_ip_info.ip)
}
::std::string* ManualAuthResponse_dns_info_ip_info_shortlink_ip_info::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:ManualAuthResponse.dns_info.ip_info.shortlink_ip_info.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManualAuthResponse_dns_info_ip_info_shortlink_ip_info::release_ip() {
  // @@protoc_insertion_point(field_release:ManualAuthResponse.dns_info.ip_info.shortlink_ip_info.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManualAuthResponse_dns_info_ip_info_shortlink_ip_info::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:ManualAuthResponse.dns_info.ip_info.shortlink_ip_info.ip)
}

// optional string host = 4;
bool ManualAuthResponse_dns_info_ip_info_shortlink_ip_info::has_host() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ManualAuthResponse_dns_info_ip_info_shortlink_ip_info::set_has_host() {
  _has_bits_[0] |= 0x00000002u;
}
void ManualAuthResponse_dns_info_ip_info_shortlink_ip_info::clear_has_host() {
  _has_bits_[0] &= ~0x00000002u;
}
void ManualAuthResponse_dns_info_ip_info_shortlink_ip_info::clear_host() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_host();
}
const ::std::string& ManualAuthResponse_dns_info_ip_info_shortlink_ip_info::host() const {
  // @@protoc_insertion_point(field_get:ManualAuthResponse.dns_info.ip_info.shortlink_ip_info.host)
  return host_.GetNoArena();
}
void ManualAuthResponse_dns_info_ip_info_shortlink_ip_info::set_host(const ::std::string& value) {
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ManualAuthResponse.dns_info.ip_info.shortlink_ip_info.host)
}
#if LANG_CXX11
void ManualAuthResponse_dns_info_ip_info_shortlink_ip_info::set_host(::std::string&& value) {
  set_has_host();
  host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ManualAuthResponse.dns_info.ip_info.shortlink_ip_info.host)
}
#endif
void ManualAuthResponse_dns_info_ip_info_shortlink_ip_info::set_host(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ManualAuthResponse.dns_info.ip_info.shortlink_ip_info.host)
}
void ManualAuthResponse_dns_info_ip_info_shortlink_ip_info::set_host(const char* value, size_t size) {
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ManualAuthResponse.dns_info.ip_info.shortlink_ip_info.host)
}
::std::string* ManualAuthResponse_dns_info_ip_info_shortlink_ip_info::mutable_host() {
  set_has_host();
  // @@protoc_insertion_point(field_mutable:ManualAuthResponse.dns_info.ip_info.shortlink_ip_info.host)
  return host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManualAuthResponse_dns_info_ip_info_shortlink_ip_info::release_host() {
  // @@protoc_insertion_point(field_release:ManualAuthResponse.dns_info.ip_info.shortlink_ip_info.host)
  clear_has_host();
  return host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManualAuthResponse_dns_info_ip_info_shortlink_ip_info::set_allocated_host(::std::string* host) {
  if (host != NULL) {
    set_has_host();
  } else {
    clear_has_host();
  }
  host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:ManualAuthResponse.dns_info.ip_info.shortlink_ip_info.host)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ManualAuthResponse_dns_info_ip_info::kLonglinkIpCntFieldNumber;
const int ManualAuthResponse_dns_info_ip_info::kShortlinkIpCntFieldNumber;
const int ManualAuthResponse_dns_info_ip_info::kLonglinkFieldNumber;
const int ManualAuthResponse_dns_info_ip_info::kShortlinkFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ManualAuthResponse_dns_info_ip_info::ManualAuthResponse_dns_info_ip_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ManualAuthResponse.dns_info.ip_info)
}
ManualAuthResponse_dns_info_ip_info::ManualAuthResponse_dns_info_ip_info(const ManualAuthResponse_dns_info_ip_info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      longlink_(from.longlink_),
      shortlink_(from.shortlink_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&longlink_ip_cnt_, &from.longlink_ip_cnt_,
    reinterpret_cast<char*>(&shortlink_ip_cnt_) -
    reinterpret_cast<char*>(&longlink_ip_cnt_) + sizeof(shortlink_ip_cnt_));
  // @@protoc_insertion_point(copy_constructor:ManualAuthResponse.dns_info.ip_info)
}

void ManualAuthResponse_dns_info_ip_info::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&longlink_ip_cnt_, 0, reinterpret_cast<char*>(&shortlink_ip_cnt_) -
    reinterpret_cast<char*>(&longlink_ip_cnt_) + sizeof(shortlink_ip_cnt_));
}

ManualAuthResponse_dns_info_ip_info::~ManualAuthResponse_dns_info_ip_info() {
  // @@protoc_insertion_point(destructor:ManualAuthResponse.dns_info.ip_info)
  SharedDtor();
}

void ManualAuthResponse_dns_info_ip_info::SharedDtor() {
}

void ManualAuthResponse_dns_info_ip_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ManualAuthResponse_dns_info_ip_info::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ManualAuthResponse_dns_info_ip_info& ManualAuthResponse_dns_info_ip_info::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

ManualAuthResponse_dns_info_ip_info* ManualAuthResponse_dns_info_ip_info::New(::google::protobuf::Arena* arena) const {
  ManualAuthResponse_dns_info_ip_info* n = new ManualAuthResponse_dns_info_ip_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ManualAuthResponse_dns_info_ip_info::Clear() {
// @@protoc_insertion_point(message_clear_start:ManualAuthResponse.dns_info.ip_info)
  longlink_.Clear();
  shortlink_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&longlink_ip_cnt_, 0, reinterpret_cast<char*>(&shortlink_ip_cnt_) -
      reinterpret_cast<char*>(&longlink_ip_cnt_) + sizeof(shortlink_ip_cnt_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ManualAuthResponse_dns_info_ip_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ManualAuthResponse.dns_info.ip_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 longlink_ip_cnt = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_longlink_ip_cnt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &longlink_ip_cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 shortlink_ip_cnt = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_shortlink_ip_cnt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shortlink_ip_cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ManualAuthResponse.dns_info.ip_info.longlink_ip_info longlink = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_longlink()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ManualAuthResponse.dns_info.ip_info.shortlink_ip_info shortlink = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shortlink()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ManualAuthResponse.dns_info.ip_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ManualAuthResponse.dns_info.ip_info)
  return false;
#undef DO_
}

void ManualAuthResponse_dns_info_ip_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ManualAuthResponse.dns_info.ip_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 longlink_ip_cnt = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->longlink_ip_cnt(), output);
  }

  // optional int32 shortlink_ip_cnt = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->shortlink_ip_cnt(), output);
  }

  // repeated .ManualAuthResponse.dns_info.ip_info.longlink_ip_info longlink = 3;
  for (unsigned int i = 0, n = this->longlink_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->longlink(i), output);
  }

  // repeated .ManualAuthResponse.dns_info.ip_info.shortlink_ip_info shortlink = 4;
  for (unsigned int i = 0, n = this->shortlink_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->shortlink(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ManualAuthResponse.dns_info.ip_info)
}

::google::protobuf::uint8* ManualAuthResponse_dns_info_ip_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ManualAuthResponse.dns_info.ip_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 longlink_ip_cnt = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->longlink_ip_cnt(), target);
  }

  // optional int32 shortlink_ip_cnt = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->shortlink_ip_cnt(), target);
  }

  // repeated .ManualAuthResponse.dns_info.ip_info.longlink_ip_info longlink = 3;
  for (unsigned int i = 0, n = this->longlink_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->longlink(i), deterministic, target);
  }

  // repeated .ManualAuthResponse.dns_info.ip_info.shortlink_ip_info shortlink = 4;
  for (unsigned int i = 0, n = this->shortlink_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->shortlink(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ManualAuthResponse.dns_info.ip_info)
  return target;
}

size_t ManualAuthResponse_dns_info_ip_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ManualAuthResponse.dns_info.ip_info)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .ManualAuthResponse.dns_info.ip_info.longlink_ip_info longlink = 3;
  {
    unsigned int count = this->longlink_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->longlink(i));
    }
  }

  // repeated .ManualAuthResponse.dns_info.ip_info.shortlink_ip_info shortlink = 4;
  {
    unsigned int count = this->shortlink_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shortlink(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 longlink_ip_cnt = 1;
    if (has_longlink_ip_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->longlink_ip_cnt());
    }

    // optional int32 shortlink_ip_cnt = 2;
    if (has_shortlink_ip_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shortlink_ip_cnt());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ManualAuthResponse_dns_info_ip_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ManualAuthResponse.dns_info.ip_info)
  GOOGLE_DCHECK_NE(&from, this);
  const ManualAuthResponse_dns_info_ip_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ManualAuthResponse_dns_info_ip_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ManualAuthResponse.dns_info.ip_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ManualAuthResponse.dns_info.ip_info)
    MergeFrom(*source);
  }
}

void ManualAuthResponse_dns_info_ip_info::MergeFrom(const ManualAuthResponse_dns_info_ip_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ManualAuthResponse.dns_info.ip_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  longlink_.MergeFrom(from.longlink_);
  shortlink_.MergeFrom(from.shortlink_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      longlink_ip_cnt_ = from.longlink_ip_cnt_;
    }
    if (cached_has_bits & 0x00000002u) {
      shortlink_ip_cnt_ = from.shortlink_ip_cnt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ManualAuthResponse_dns_info_ip_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ManualAuthResponse.dns_info.ip_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManualAuthResponse_dns_info_ip_info::CopyFrom(const ManualAuthResponse_dns_info_ip_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ManualAuthResponse.dns_info.ip_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManualAuthResponse_dns_info_ip_info::IsInitialized() const {
  return true;
}

void ManualAuthResponse_dns_info_ip_info::Swap(ManualAuthResponse_dns_info_ip_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ManualAuthResponse_dns_info_ip_info::InternalSwap(ManualAuthResponse_dns_info_ip_info* other) {
  longlink_.InternalSwap(&other->longlink_);
  shortlink_.InternalSwap(&other->shortlink_);
  std::swap(longlink_ip_cnt_, other->longlink_ip_cnt_);
  std::swap(shortlink_ip_cnt_, other->shortlink_ip_cnt_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ManualAuthResponse_dns_info_ip_info::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ManualAuthResponse_dns_info_ip_info

// optional int32 longlink_ip_cnt = 1;
bool ManualAuthResponse_dns_info_ip_info::has_longlink_ip_cnt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ManualAuthResponse_dns_info_ip_info::set_has_longlink_ip_cnt() {
  _has_bits_[0] |= 0x00000001u;
}
void ManualAuthResponse_dns_info_ip_info::clear_has_longlink_ip_cnt() {
  _has_bits_[0] &= ~0x00000001u;
}
void ManualAuthResponse_dns_info_ip_info::clear_longlink_ip_cnt() {
  longlink_ip_cnt_ = 0;
  clear_has_longlink_ip_cnt();
}
::google::protobuf::int32 ManualAuthResponse_dns_info_ip_info::longlink_ip_cnt() const {
  // @@protoc_insertion_point(field_get:ManualAuthResponse.dns_info.ip_info.longlink_ip_cnt)
  return longlink_ip_cnt_;
}
void ManualAuthResponse_dns_info_ip_info::set_longlink_ip_cnt(::google::protobuf::int32 value) {
  set_has_longlink_ip_cnt();
  longlink_ip_cnt_ = value;
  // @@protoc_insertion_point(field_set:ManualAuthResponse.dns_info.ip_info.longlink_ip_cnt)
}

// optional int32 shortlink_ip_cnt = 2;
bool ManualAuthResponse_dns_info_ip_info::has_shortlink_ip_cnt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ManualAuthResponse_dns_info_ip_info::set_has_shortlink_ip_cnt() {
  _has_bits_[0] |= 0x00000002u;
}
void ManualAuthResponse_dns_info_ip_info::clear_has_shortlink_ip_cnt() {
  _has_bits_[0] &= ~0x00000002u;
}
void ManualAuthResponse_dns_info_ip_info::clear_shortlink_ip_cnt() {
  shortlink_ip_cnt_ = 0;
  clear_has_shortlink_ip_cnt();
}
::google::protobuf::int32 ManualAuthResponse_dns_info_ip_info::shortlink_ip_cnt() const {
  // @@protoc_insertion_point(field_get:ManualAuthResponse.dns_info.ip_info.shortlink_ip_cnt)
  return shortlink_ip_cnt_;
}
void ManualAuthResponse_dns_info_ip_info::set_shortlink_ip_cnt(::google::protobuf::int32 value) {
  set_has_shortlink_ip_cnt();
  shortlink_ip_cnt_ = value;
  // @@protoc_insertion_point(field_set:ManualAuthResponse.dns_info.ip_info.shortlink_ip_cnt)
}

// repeated .ManualAuthResponse.dns_info.ip_info.longlink_ip_info longlink = 3;
int ManualAuthResponse_dns_info_ip_info::longlink_size() const {
  return longlink_.size();
}
void ManualAuthResponse_dns_info_ip_info::clear_longlink() {
  longlink_.Clear();
}
const ::ManualAuthResponse_dns_info_ip_info_longlink_ip_info& ManualAuthResponse_dns_info_ip_info::longlink(int index) const {
  // @@protoc_insertion_point(field_get:ManualAuthResponse.dns_info.ip_info.longlink)
  return longlink_.Get(index);
}
::ManualAuthResponse_dns_info_ip_info_longlink_ip_info* ManualAuthResponse_dns_info_ip_info::mutable_longlink(int index) {
  // @@protoc_insertion_point(field_mutable:ManualAuthResponse.dns_info.ip_info.longlink)
  return longlink_.Mutable(index);
}
::ManualAuthResponse_dns_info_ip_info_longlink_ip_info* ManualAuthResponse_dns_info_ip_info::add_longlink() {
  // @@protoc_insertion_point(field_add:ManualAuthResponse.dns_info.ip_info.longlink)
  return longlink_.Add();
}
::google::protobuf::RepeatedPtrField< ::ManualAuthResponse_dns_info_ip_info_longlink_ip_info >*
ManualAuthResponse_dns_info_ip_info::mutable_longlink() {
  // @@protoc_insertion_point(field_mutable_list:ManualAuthResponse.dns_info.ip_info.longlink)
  return &longlink_;
}
const ::google::protobuf::RepeatedPtrField< ::ManualAuthResponse_dns_info_ip_info_longlink_ip_info >&
ManualAuthResponse_dns_info_ip_info::longlink() const {
  // @@protoc_insertion_point(field_list:ManualAuthResponse.dns_info.ip_info.longlink)
  return longlink_;
}

// repeated .ManualAuthResponse.dns_info.ip_info.shortlink_ip_info shortlink = 4;
int ManualAuthResponse_dns_info_ip_info::shortlink_size() const {
  return shortlink_.size();
}
void ManualAuthResponse_dns_info_ip_info::clear_shortlink() {
  shortlink_.Clear();
}
const ::ManualAuthResponse_dns_info_ip_info_shortlink_ip_info& ManualAuthResponse_dns_info_ip_info::shortlink(int index) const {
  // @@protoc_insertion_point(field_get:ManualAuthResponse.dns_info.ip_info.shortlink)
  return shortlink_.Get(index);
}
::ManualAuthResponse_dns_info_ip_info_shortlink_ip_info* ManualAuthResponse_dns_info_ip_info::mutable_shortlink(int index) {
  // @@protoc_insertion_point(field_mutable:ManualAuthResponse.dns_info.ip_info.shortlink)
  return shortlink_.Mutable(index);
}
::ManualAuthResponse_dns_info_ip_info_shortlink_ip_info* ManualAuthResponse_dns_info_ip_info::add_shortlink() {
  // @@protoc_insertion_point(field_add:ManualAuthResponse.dns_info.ip_info.shortlink)
  return shortlink_.Add();
}
::google::protobuf::RepeatedPtrField< ::ManualAuthResponse_dns_info_ip_info_shortlink_ip_info >*
ManualAuthResponse_dns_info_ip_info::mutable_shortlink() {
  // @@protoc_insertion_point(field_mutable_list:ManualAuthResponse.dns_info.ip_info.shortlink)
  return &shortlink_;
}
const ::google::protobuf::RepeatedPtrField< ::ManualAuthResponse_dns_info_ip_info_shortlink_ip_info >&
ManualAuthResponse_dns_info_ip_info::shortlink() const {
  // @@protoc_insertion_point(field_list:ManualAuthResponse.dns_info.ip_info.shortlink)
  return shortlink_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ManualAuthResponse_dns_info::kRedirectFieldNumber;
const int ManualAuthResponse_dns_info::kIpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ManualAuthResponse_dns_info::ManualAuthResponse_dns_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ManualAuthResponse.dns_info)
}
ManualAuthResponse_dns_info::ManualAuthResponse_dns_info(const ManualAuthResponse_dns_info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_redirect()) {
    redirect_ = new ::ManualAuthResponse_dns_info_redirect_info(*from.redirect_);
  } else {
    redirect_ = NULL;
  }
  if (from.has_ip()) {
    ip_ = new ::ManualAuthResponse_dns_info_ip_info(*from.ip_);
  } else {
    ip_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ManualAuthResponse.dns_info)
}

void ManualAuthResponse_dns_info::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&redirect_, 0, reinterpret_cast<char*>(&ip_) -
    reinterpret_cast<char*>(&redirect_) + sizeof(ip_));
}

ManualAuthResponse_dns_info::~ManualAuthResponse_dns_info() {
  // @@protoc_insertion_point(destructor:ManualAuthResponse.dns_info)
  SharedDtor();
}

void ManualAuthResponse_dns_info::SharedDtor() {
  if (this != internal_default_instance()) {
    delete redirect_;
  }
  if (this != internal_default_instance()) {
    delete ip_;
  }
}

void ManualAuthResponse_dns_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ManualAuthResponse_dns_info::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ManualAuthResponse_dns_info& ManualAuthResponse_dns_info::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

ManualAuthResponse_dns_info* ManualAuthResponse_dns_info::New(::google::protobuf::Arena* arena) const {
  ManualAuthResponse_dns_info* n = new ManualAuthResponse_dns_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ManualAuthResponse_dns_info::Clear() {
// @@protoc_insertion_point(message_clear_start:ManualAuthResponse.dns_info)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_redirect()) {
      GOOGLE_DCHECK(redirect_ != NULL);
      redirect_->::ManualAuthResponse_dns_info_redirect_info::Clear();
    }
    if (has_ip()) {
      GOOGLE_DCHECK(ip_ != NULL);
      ip_->::ManualAuthResponse_dns_info_ip_info::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ManualAuthResponse_dns_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ManualAuthResponse.dns_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ManualAuthResponse.dns_info.redirect_info redirect = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_redirect()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ManualAuthResponse.dns_info.ip_info ip = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ManualAuthResponse.dns_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ManualAuthResponse.dns_info)
  return false;
#undef DO_
}

void ManualAuthResponse_dns_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ManualAuthResponse.dns_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ManualAuthResponse.dns_info.redirect_info redirect = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->redirect_, output);
  }

  // optional .ManualAuthResponse.dns_info.ip_info ip = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->ip_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ManualAuthResponse.dns_info)
}

::google::protobuf::uint8* ManualAuthResponse_dns_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ManualAuthResponse.dns_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ManualAuthResponse.dns_info.redirect_info redirect = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->redirect_, deterministic, target);
  }

  // optional .ManualAuthResponse.dns_info.ip_info ip = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->ip_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ManualAuthResponse.dns_info)
  return target;
}

size_t ManualAuthResponse_dns_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ManualAuthResponse.dns_info)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .ManualAuthResponse.dns_info.redirect_info redirect = 1;
    if (has_redirect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->redirect_);
    }

    // optional .ManualAuthResponse.dns_info.ip_info ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ip_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ManualAuthResponse_dns_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ManualAuthResponse.dns_info)
  GOOGLE_DCHECK_NE(&from, this);
  const ManualAuthResponse_dns_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ManualAuthResponse_dns_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ManualAuthResponse.dns_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ManualAuthResponse.dns_info)
    MergeFrom(*source);
  }
}

void ManualAuthResponse_dns_info::MergeFrom(const ManualAuthResponse_dns_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ManualAuthResponse.dns_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_redirect()->::ManualAuthResponse_dns_info_redirect_info::MergeFrom(from.redirect());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_ip()->::ManualAuthResponse_dns_info_ip_info::MergeFrom(from.ip());
    }
  }
}

void ManualAuthResponse_dns_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ManualAuthResponse.dns_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManualAuthResponse_dns_info::CopyFrom(const ManualAuthResponse_dns_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ManualAuthResponse.dns_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManualAuthResponse_dns_info::IsInitialized() const {
  return true;
}

void ManualAuthResponse_dns_info::Swap(ManualAuthResponse_dns_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ManualAuthResponse_dns_info::InternalSwap(ManualAuthResponse_dns_info* other) {
  std::swap(redirect_, other->redirect_);
  std::swap(ip_, other->ip_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ManualAuthResponse_dns_info::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ManualAuthResponse_dns_info

// optional .ManualAuthResponse.dns_info.redirect_info redirect = 1;
bool ManualAuthResponse_dns_info::has_redirect() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ManualAuthResponse_dns_info::set_has_redirect() {
  _has_bits_[0] |= 0x00000001u;
}
void ManualAuthResponse_dns_info::clear_has_redirect() {
  _has_bits_[0] &= ~0x00000001u;
}
void ManualAuthResponse_dns_info::clear_redirect() {
  if (redirect_ != NULL) redirect_->::ManualAuthResponse_dns_info_redirect_info::Clear();
  clear_has_redirect();
}
const ::ManualAuthResponse_dns_info_redirect_info& ManualAuthResponse_dns_info::redirect() const {
  // @@protoc_insertion_point(field_get:ManualAuthResponse.dns_info.redirect)
  return redirect_ != NULL ? *redirect_
                         : *::ManualAuthResponse_dns_info_redirect_info::internal_default_instance();
}
::ManualAuthResponse_dns_info_redirect_info* ManualAuthResponse_dns_info::mutable_redirect() {
  set_has_redirect();
  if (redirect_ == NULL) {
    redirect_ = new ::ManualAuthResponse_dns_info_redirect_info;
  }
  // @@protoc_insertion_point(field_mutable:ManualAuthResponse.dns_info.redirect)
  return redirect_;
}
::ManualAuthResponse_dns_info_redirect_info* ManualAuthResponse_dns_info::release_redirect() {
  // @@protoc_insertion_point(field_release:ManualAuthResponse.dns_info.redirect)
  clear_has_redirect();
  ::ManualAuthResponse_dns_info_redirect_info* temp = redirect_;
  redirect_ = NULL;
  return temp;
}
void ManualAuthResponse_dns_info::set_allocated_redirect(::ManualAuthResponse_dns_info_redirect_info* redirect) {
  delete redirect_;
  redirect_ = redirect;
  if (redirect) {
    set_has_redirect();
  } else {
    clear_has_redirect();
  }
  // @@protoc_insertion_point(field_set_allocated:ManualAuthResponse.dns_info.redirect)
}

// optional .ManualAuthResponse.dns_info.ip_info ip = 3;
bool ManualAuthResponse_dns_info::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ManualAuthResponse_dns_info::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
void ManualAuthResponse_dns_info::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
void ManualAuthResponse_dns_info::clear_ip() {
  if (ip_ != NULL) ip_->::ManualAuthResponse_dns_info_ip_info::Clear();
  clear_has_ip();
}
const ::ManualAuthResponse_dns_info_ip_info& ManualAuthResponse_dns_info::ip() const {
  // @@protoc_insertion_point(field_get:ManualAuthResponse.dns_info.ip)
  return ip_ != NULL ? *ip_
                         : *::ManualAuthResponse_dns_info_ip_info::internal_default_instance();
}
::ManualAuthResponse_dns_info_ip_info* ManualAuthResponse_dns_info::mutable_ip() {
  set_has_ip();
  if (ip_ == NULL) {
    ip_ = new ::ManualAuthResponse_dns_info_ip_info;
  }
  // @@protoc_insertion_point(field_mutable:ManualAuthResponse.dns_info.ip)
  return ip_;
}
::ManualAuthResponse_dns_info_ip_info* ManualAuthResponse_dns_info::release_ip() {
  // @@protoc_insertion_point(field_release:ManualAuthResponse.dns_info.ip)
  clear_has_ip();
  ::ManualAuthResponse_dns_info_ip_info* temp = ip_;
  ip_ = NULL;
  return temp;
}
void ManualAuthResponse_dns_info::set_allocated_ip(::ManualAuthResponse_dns_info_ip_info* ip) {
  delete ip_;
  ip_ = ip;
  if (ip) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  // @@protoc_insertion_point(field_set_allocated:ManualAuthResponse.dns_info.ip)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ManualAuthResponse::kResultFieldNumber;
const int ManualAuthResponse::kUnifyFlagFieldNumber;
const int ManualAuthResponse::kAuthParamFieldNumber;
const int ManualAuthResponse::kAccountInfoFieldNumber;
const int ManualAuthResponse::kDnsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ManualAuthResponse::ManualAuthResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ManualAuthResponse)
}
ManualAuthResponse::ManualAuthResponse(const ManualAuthResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_result()) {
    result_ = new ::ManualAuthResponse_AuthResult(*from.result_);
  } else {
    result_ = NULL;
  }
  if (from.has_authparam()) {
    authparam_ = new ::ManualAuthResponse_AuthParam(*from.authparam_);
  } else {
    authparam_ = NULL;
  }
  if (from.has_accountinfo()) {
    accountinfo_ = new ::ManualAuthResponse_AccountInfo(*from.accountinfo_);
  } else {
    accountinfo_ = NULL;
  }
  if (from.has_dns()) {
    dns_ = new ::ManualAuthResponse_dns_info(*from.dns_);
  } else {
    dns_ = NULL;
  }
  unifyflag_ = from.unifyflag_;
  // @@protoc_insertion_point(copy_constructor:ManualAuthResponse)
}

void ManualAuthResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&result_, 0, reinterpret_cast<char*>(&unifyflag_) -
    reinterpret_cast<char*>(&result_) + sizeof(unifyflag_));
}

ManualAuthResponse::~ManualAuthResponse() {
  // @@protoc_insertion_point(destructor:ManualAuthResponse)
  SharedDtor();
}

void ManualAuthResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete result_;
  }
  if (this != internal_default_instance()) {
    delete authparam_;
  }
  if (this != internal_default_instance()) {
    delete accountinfo_;
  }
  if (this != internal_default_instance()) {
    delete dns_;
  }
}

void ManualAuthResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ManualAuthResponse::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ManualAuthResponse& ManualAuthResponse::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

ManualAuthResponse* ManualAuthResponse::New(::google::protobuf::Arena* arena) const {
  ManualAuthResponse* n = new ManualAuthResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ManualAuthResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ManualAuthResponse)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_result()) {
      GOOGLE_DCHECK(result_ != NULL);
      result_->::ManualAuthResponse_AuthResult::Clear();
    }
    if (has_authparam()) {
      GOOGLE_DCHECK(authparam_ != NULL);
      authparam_->::ManualAuthResponse_AuthParam::Clear();
    }
    if (has_accountinfo()) {
      GOOGLE_DCHECK(accountinfo_ != NULL);
      accountinfo_->::ManualAuthResponse_AccountInfo::Clear();
    }
    if (has_dns()) {
      GOOGLE_DCHECK(dns_ != NULL);
      dns_->::ManualAuthResponse_dns_info::Clear();
    }
  }
  unifyflag_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ManualAuthResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ManualAuthResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ManualAuthResponse.AuthResult result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 unifyFlag = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_unifyflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unifyflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ManualAuthResponse.AuthParam authParam = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_authparam()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ManualAuthResponse.AccountInfo accountInfo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_accountinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ManualAuthResponse.dns_info dns = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dns()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ManualAuthResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ManualAuthResponse)
  return false;
#undef DO_
}

void ManualAuthResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ManualAuthResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ManualAuthResponse.AuthResult result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->result_, output);
  }

  // required int32 unifyFlag = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->unifyflag(), output);
  }

  // required .ManualAuthResponse.AuthParam authParam = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->authparam_, output);
  }

  // optional .ManualAuthResponse.AccountInfo accountInfo = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->accountinfo_, output);
  }

  // optional .ManualAuthResponse.dns_info dns = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->dns_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ManualAuthResponse)
}

::google::protobuf::uint8* ManualAuthResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ManualAuthResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ManualAuthResponse.AuthResult result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->result_, deterministic, target);
  }

  // required int32 unifyFlag = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->unifyflag(), target);
  }

  // required .ManualAuthResponse.AuthParam authParam = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->authparam_, deterministic, target);
  }

  // optional .ManualAuthResponse.AccountInfo accountInfo = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->accountinfo_, deterministic, target);
  }

  // optional .ManualAuthResponse.dns_info dns = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->dns_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ManualAuthResponse)
  return target;
}

size_t ManualAuthResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ManualAuthResponse)
  size_t total_size = 0;

  if (has_result()) {
    // required .ManualAuthResponse.AuthResult result = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->result_);
  }

  if (has_authparam()) {
    // required .ManualAuthResponse.AuthParam authParam = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->authparam_);
  }

  if (has_unifyflag()) {
    // required int32 unifyFlag = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->unifyflag());
  }

  return total_size;
}
size_t ManualAuthResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ManualAuthResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000013) ^ 0x00000013) == 0) {  // All required fields are present.
    // required .ManualAuthResponse.AuthResult result = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->result_);

    // required .ManualAuthResponse.AuthParam authParam = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->authparam_);

    // required int32 unifyFlag = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->unifyflag());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 12u) {
    // optional .ManualAuthResponse.AccountInfo accountInfo = 4;
    if (has_accountinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->accountinfo_);
    }

    // optional .ManualAuthResponse.dns_info dns = 5;
    if (has_dns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->dns_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ManualAuthResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ManualAuthResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ManualAuthResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ManualAuthResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ManualAuthResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ManualAuthResponse)
    MergeFrom(*source);
  }
}

void ManualAuthResponse::MergeFrom(const ManualAuthResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ManualAuthResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_result()->::ManualAuthResponse_AuthResult::MergeFrom(from.result());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_authparam()->::ManualAuthResponse_AuthParam::MergeFrom(from.authparam());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_accountinfo()->::ManualAuthResponse_AccountInfo::MergeFrom(from.accountinfo());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_dns()->::ManualAuthResponse_dns_info::MergeFrom(from.dns());
    }
    if (cached_has_bits & 0x00000010u) {
      unifyflag_ = from.unifyflag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ManualAuthResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ManualAuthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManualAuthResponse::CopyFrom(const ManualAuthResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ManualAuthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManualAuthResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000013) != 0x00000013) return false;
  if (has_result()) {
    if (!this->result_->IsInitialized()) return false;
  }
  if (has_authparam()) {
    if (!this->authparam_->IsInitialized()) return false;
  }
  return true;
}

void ManualAuthResponse::Swap(ManualAuthResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ManualAuthResponse::InternalSwap(ManualAuthResponse* other) {
  std::swap(result_, other->result_);
  std::swap(authparam_, other->authparam_);
  std::swap(accountinfo_, other->accountinfo_);
  std::swap(dns_, other->dns_);
  std::swap(unifyflag_, other->unifyflag_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ManualAuthResponse::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ManualAuthResponse

// required .ManualAuthResponse.AuthResult result = 1;
bool ManualAuthResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ManualAuthResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void ManualAuthResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void ManualAuthResponse::clear_result() {
  if (result_ != NULL) result_->::ManualAuthResponse_AuthResult::Clear();
  clear_has_result();
}
const ::ManualAuthResponse_AuthResult& ManualAuthResponse::result() const {
  // @@protoc_insertion_point(field_get:ManualAuthResponse.result)
  return result_ != NULL ? *result_
                         : *::ManualAuthResponse_AuthResult::internal_default_instance();
}
::ManualAuthResponse_AuthResult* ManualAuthResponse::mutable_result() {
  set_has_result();
  if (result_ == NULL) {
    result_ = new ::ManualAuthResponse_AuthResult;
  }
  // @@protoc_insertion_point(field_mutable:ManualAuthResponse.result)
  return result_;
}
::ManualAuthResponse_AuthResult* ManualAuthResponse::release_result() {
  // @@protoc_insertion_point(field_release:ManualAuthResponse.result)
  clear_has_result();
  ::ManualAuthResponse_AuthResult* temp = result_;
  result_ = NULL;
  return temp;
}
void ManualAuthResponse::set_allocated_result(::ManualAuthResponse_AuthResult* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:ManualAuthResponse.result)
}

// required int32 unifyFlag = 2;
bool ManualAuthResponse::has_unifyflag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ManualAuthResponse::set_has_unifyflag() {
  _has_bits_[0] |= 0x00000010u;
}
void ManualAuthResponse::clear_has_unifyflag() {
  _has_bits_[0] &= ~0x00000010u;
}
void ManualAuthResponse::clear_unifyflag() {
  unifyflag_ = 0;
  clear_has_unifyflag();
}
::google::protobuf::int32 ManualAuthResponse::unifyflag() const {
  // @@protoc_insertion_point(field_get:ManualAuthResponse.unifyFlag)
  return unifyflag_;
}
void ManualAuthResponse::set_unifyflag(::google::protobuf::int32 value) {
  set_has_unifyflag();
  unifyflag_ = value;
  // @@protoc_insertion_point(field_set:ManualAuthResponse.unifyFlag)
}

// required .ManualAuthResponse.AuthParam authParam = 3;
bool ManualAuthResponse::has_authparam() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ManualAuthResponse::set_has_authparam() {
  _has_bits_[0] |= 0x00000002u;
}
void ManualAuthResponse::clear_has_authparam() {
  _has_bits_[0] &= ~0x00000002u;
}
void ManualAuthResponse::clear_authparam() {
  if (authparam_ != NULL) authparam_->::ManualAuthResponse_AuthParam::Clear();
  clear_has_authparam();
}
const ::ManualAuthResponse_AuthParam& ManualAuthResponse::authparam() const {
  // @@protoc_insertion_point(field_get:ManualAuthResponse.authParam)
  return authparam_ != NULL ? *authparam_
                         : *::ManualAuthResponse_AuthParam::internal_default_instance();
}
::ManualAuthResponse_AuthParam* ManualAuthResponse::mutable_authparam() {
  set_has_authparam();
  if (authparam_ == NULL) {
    authparam_ = new ::ManualAuthResponse_AuthParam;
  }
  // @@protoc_insertion_point(field_mutable:ManualAuthResponse.authParam)
  return authparam_;
}
::ManualAuthResponse_AuthParam* ManualAuthResponse::release_authparam() {
  // @@protoc_insertion_point(field_release:ManualAuthResponse.authParam)
  clear_has_authparam();
  ::ManualAuthResponse_AuthParam* temp = authparam_;
  authparam_ = NULL;
  return temp;
}
void ManualAuthResponse::set_allocated_authparam(::ManualAuthResponse_AuthParam* authparam) {
  delete authparam_;
  authparam_ = authparam;
  if (authparam) {
    set_has_authparam();
  } else {
    clear_has_authparam();
  }
  // @@protoc_insertion_point(field_set_allocated:ManualAuthResponse.authParam)
}

// optional .ManualAuthResponse.AccountInfo accountInfo = 4;
bool ManualAuthResponse::has_accountinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ManualAuthResponse::set_has_accountinfo() {
  _has_bits_[0] |= 0x00000004u;
}
void ManualAuthResponse::clear_has_accountinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
void ManualAuthResponse::clear_accountinfo() {
  if (accountinfo_ != NULL) accountinfo_->::ManualAuthResponse_AccountInfo::Clear();
  clear_has_accountinfo();
}
const ::ManualAuthResponse_AccountInfo& ManualAuthResponse::accountinfo() const {
  // @@protoc_insertion_point(field_get:ManualAuthResponse.accountInfo)
  return accountinfo_ != NULL ? *accountinfo_
                         : *::ManualAuthResponse_AccountInfo::internal_default_instance();
}
::ManualAuthResponse_AccountInfo* ManualAuthResponse::mutable_accountinfo() {
  set_has_accountinfo();
  if (accountinfo_ == NULL) {
    accountinfo_ = new ::ManualAuthResponse_AccountInfo;
  }
  // @@protoc_insertion_point(field_mutable:ManualAuthResponse.accountInfo)
  return accountinfo_;
}
::ManualAuthResponse_AccountInfo* ManualAuthResponse::release_accountinfo() {
  // @@protoc_insertion_point(field_release:ManualAuthResponse.accountInfo)
  clear_has_accountinfo();
  ::ManualAuthResponse_AccountInfo* temp = accountinfo_;
  accountinfo_ = NULL;
  return temp;
}
void ManualAuthResponse::set_allocated_accountinfo(::ManualAuthResponse_AccountInfo* accountinfo) {
  delete accountinfo_;
  accountinfo_ = accountinfo;
  if (accountinfo) {
    set_has_accountinfo();
  } else {
    clear_has_accountinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:ManualAuthResponse.accountInfo)
}

// optional .ManualAuthResponse.dns_info dns = 5;
bool ManualAuthResponse::has_dns() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ManualAuthResponse::set_has_dns() {
  _has_bits_[0] |= 0x00000008u;
}
void ManualAuthResponse::clear_has_dns() {
  _has_bits_[0] &= ~0x00000008u;
}
void ManualAuthResponse::clear_dns() {
  if (dns_ != NULL) dns_->::ManualAuthResponse_dns_info::Clear();
  clear_has_dns();
}
const ::ManualAuthResponse_dns_info& ManualAuthResponse::dns() const {
  // @@protoc_insertion_point(field_get:ManualAuthResponse.dns)
  return dns_ != NULL ? *dns_
                         : *::ManualAuthResponse_dns_info::internal_default_instance();
}
::ManualAuthResponse_dns_info* ManualAuthResponse::mutable_dns() {
  set_has_dns();
  if (dns_ == NULL) {
    dns_ = new ::ManualAuthResponse_dns_info;
  }
  // @@protoc_insertion_point(field_mutable:ManualAuthResponse.dns)
  return dns_;
}
::ManualAuthResponse_dns_info* ManualAuthResponse::release_dns() {
  // @@protoc_insertion_point(field_release:ManualAuthResponse.dns)
  clear_has_dns();
  ::ManualAuthResponse_dns_info* temp = dns_;
  dns_ = NULL;
  return temp;
}
void ManualAuthResponse::set_allocated_dns(::ManualAuthResponse_dns_info* dns) {
  delete dns_;
  dns_ = dns;
  if (dns) {
    set_has_dns();
  } else {
    clear_has_dns();
  }
  // @@protoc_insertion_point(field_set_allocated:ManualAuthResponse.dns)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NewInitRequest::kLoginFieldNumber;
const int NewInitRequest::kWxidFieldNumber;
const int NewInitRequest::kSyncKeyCurFieldNumber;
const int NewInitRequest::kSyncKeyMaxFieldNumber;
const int NewInitRequest::kLanguageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NewInitRequest::NewInitRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NewInitRequest)
}
NewInitRequest::NewInitRequest(const NewInitRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  wxid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_wxid()) {
    wxid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wxid_);
  }
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_language()) {
    language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  if (from.has_login()) {
    login_ = new ::LoginInfo(*from.login_);
  } else {
    login_ = NULL;
  }
  if (from.has_sync_key_cur()) {
    sync_key_cur_ = new ::SKBuiltinBuffer_t(*from.sync_key_cur_);
  } else {
    sync_key_cur_ = NULL;
  }
  if (from.has_sync_key_max()) {
    sync_key_max_ = new ::SKBuiltinBuffer_t(*from.sync_key_max_);
  } else {
    sync_key_max_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NewInitRequest)
}

void NewInitRequest::SharedCtor() {
  _cached_size_ = 0;
  wxid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&login_, 0, reinterpret_cast<char*>(&sync_key_max_) -
    reinterpret_cast<char*>(&login_) + sizeof(sync_key_max_));
}

NewInitRequest::~NewInitRequest() {
  // @@protoc_insertion_point(destructor:NewInitRequest)
  SharedDtor();
}

void NewInitRequest::SharedDtor() {
  wxid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete login_;
  }
  if (this != internal_default_instance()) {
    delete sync_key_cur_;
  }
  if (this != internal_default_instance()) {
    delete sync_key_max_;
  }
}

void NewInitRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewInitRequest::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NewInitRequest& NewInitRequest::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

NewInitRequest* NewInitRequest::New(::google::protobuf::Arena* arena) const {
  NewInitRequest* n = new NewInitRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NewInitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:NewInitRequest)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_wxid()) {
      GOOGLE_DCHECK(!wxid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*wxid_.UnsafeRawStringPointer())->clear();
    }
    if (has_language()) {
      GOOGLE_DCHECK(!language_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*language_.UnsafeRawStringPointer())->clear();
    }
    if (has_login()) {
      GOOGLE_DCHECK(login_ != NULL);
      login_->::LoginInfo::Clear();
    }
    if (has_sync_key_cur()) {
      GOOGLE_DCHECK(sync_key_cur_ != NULL);
      sync_key_cur_->::SKBuiltinBuffer_t::Clear();
    }
    if (has_sync_key_max()) {
      GOOGLE_DCHECK(sync_key_max_ != NULL);
      sync_key_max_->::SKBuiltinBuffer_t::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NewInitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NewInitRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .LoginInfo login = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string wxid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->wxid().data(), this->wxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NewInitRequest.wxid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SKBuiltinBuffer_t sync_key_cur = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sync_key_cur()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SKBuiltinBuffer_t sync_key_max = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sync_key_max()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string language = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NewInitRequest.language");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NewInitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NewInitRequest)
  return false;
#undef DO_
}

void NewInitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NewInitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .LoginInfo login = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->login_, output);
  }

  // optional string wxid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wxid().data(), this->wxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NewInitRequest.wxid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->wxid(), output);
  }

  // optional .SKBuiltinBuffer_t sync_key_cur = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->sync_key_cur_, output);
  }

  // optional .SKBuiltinBuffer_t sync_key_max = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->sync_key_max_, output);
  }

  // optional string language = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NewInitRequest.language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->language(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NewInitRequest)
}

::google::protobuf::uint8* NewInitRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NewInitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .LoginInfo login = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->login_, deterministic, target);
  }

  // optional string wxid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wxid().data(), this->wxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NewInitRequest.wxid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->wxid(), target);
  }

  // optional .SKBuiltinBuffer_t sync_key_cur = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->sync_key_cur_, deterministic, target);
  }

  // optional .SKBuiltinBuffer_t sync_key_max = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->sync_key_max_, deterministic, target);
  }

  // optional string language = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NewInitRequest.language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->language(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NewInitRequest)
  return target;
}

size_t NewInitRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NewInitRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string wxid = 2;
    if (has_wxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wxid());
    }

    // optional string language = 5;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language());
    }

    // optional .LoginInfo login = 1;
    if (has_login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->login_);
    }

    // optional .SKBuiltinBuffer_t sync_key_cur = 3;
    if (has_sync_key_cur()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sync_key_cur_);
    }

    // optional .SKBuiltinBuffer_t sync_key_max = 4;
    if (has_sync_key_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sync_key_max_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewInitRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NewInitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NewInitRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NewInitRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NewInitRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NewInitRequest)
    MergeFrom(*source);
  }
}

void NewInitRequest::MergeFrom(const NewInitRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NewInitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_wxid();
      wxid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wxid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_language();
      language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_login()->::LoginInfo::MergeFrom(from.login());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_sync_key_cur()->::SKBuiltinBuffer_t::MergeFrom(from.sync_key_cur());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_sync_key_max()->::SKBuiltinBuffer_t::MergeFrom(from.sync_key_max());
    }
  }
}

void NewInitRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NewInitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewInitRequest::CopyFrom(const NewInitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NewInitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewInitRequest::IsInitialized() const {
  if (has_sync_key_cur()) {
    if (!this->sync_key_cur_->IsInitialized()) return false;
  }
  if (has_sync_key_max()) {
    if (!this->sync_key_max_->IsInitialized()) return false;
  }
  return true;
}

void NewInitRequest::Swap(NewInitRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NewInitRequest::InternalSwap(NewInitRequest* other) {
  wxid_.Swap(&other->wxid_);
  language_.Swap(&other->language_);
  std::swap(login_, other->login_);
  std::swap(sync_key_cur_, other->sync_key_cur_);
  std::swap(sync_key_max_, other->sync_key_max_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NewInitRequest::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NewInitRequest

// optional .LoginInfo login = 1;
bool NewInitRequest::has_login() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NewInitRequest::set_has_login() {
  _has_bits_[0] |= 0x00000004u;
}
void NewInitRequest::clear_has_login() {
  _has_bits_[0] &= ~0x00000004u;
}
void NewInitRequest::clear_login() {
  if (login_ != NULL) login_->::LoginInfo::Clear();
  clear_has_login();
}
const ::LoginInfo& NewInitRequest::login() const {
  // @@protoc_insertion_point(field_get:NewInitRequest.login)
  return login_ != NULL ? *login_
                         : *::LoginInfo::internal_default_instance();
}
::LoginInfo* NewInitRequest::mutable_login() {
  set_has_login();
  if (login_ == NULL) {
    login_ = new ::LoginInfo;
  }
  // @@protoc_insertion_point(field_mutable:NewInitRequest.login)
  return login_;
}
::LoginInfo* NewInitRequest::release_login() {
  // @@protoc_insertion_point(field_release:NewInitRequest.login)
  clear_has_login();
  ::LoginInfo* temp = login_;
  login_ = NULL;
  return temp;
}
void NewInitRequest::set_allocated_login(::LoginInfo* login) {
  delete login_;
  login_ = login;
  if (login) {
    set_has_login();
  } else {
    clear_has_login();
  }
  // @@protoc_insertion_point(field_set_allocated:NewInitRequest.login)
}

// optional string wxid = 2;
bool NewInitRequest::has_wxid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NewInitRequest::set_has_wxid() {
  _has_bits_[0] |= 0x00000001u;
}
void NewInitRequest::clear_has_wxid() {
  _has_bits_[0] &= ~0x00000001u;
}
void NewInitRequest::clear_wxid() {
  wxid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_wxid();
}
const ::std::string& NewInitRequest::wxid() const {
  // @@protoc_insertion_point(field_get:NewInitRequest.wxid)
  return wxid_.GetNoArena();
}
void NewInitRequest::set_wxid(const ::std::string& value) {
  set_has_wxid();
  wxid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NewInitRequest.wxid)
}
#if LANG_CXX11
void NewInitRequest::set_wxid(::std::string&& value) {
  set_has_wxid();
  wxid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NewInitRequest.wxid)
}
#endif
void NewInitRequest::set_wxid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_wxid();
  wxid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NewInitRequest.wxid)
}
void NewInitRequest::set_wxid(const char* value, size_t size) {
  set_has_wxid();
  wxid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NewInitRequest.wxid)
}
::std::string* NewInitRequest::mutable_wxid() {
  set_has_wxid();
  // @@protoc_insertion_point(field_mutable:NewInitRequest.wxid)
  return wxid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewInitRequest::release_wxid() {
  // @@protoc_insertion_point(field_release:NewInitRequest.wxid)
  clear_has_wxid();
  return wxid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewInitRequest::set_allocated_wxid(::std::string* wxid) {
  if (wxid != NULL) {
    set_has_wxid();
  } else {
    clear_has_wxid();
  }
  wxid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wxid);
  // @@protoc_insertion_point(field_set_allocated:NewInitRequest.wxid)
}

// optional .SKBuiltinBuffer_t sync_key_cur = 3;
bool NewInitRequest::has_sync_key_cur() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void NewInitRequest::set_has_sync_key_cur() {
  _has_bits_[0] |= 0x00000008u;
}
void NewInitRequest::clear_has_sync_key_cur() {
  _has_bits_[0] &= ~0x00000008u;
}
void NewInitRequest::clear_sync_key_cur() {
  if (sync_key_cur_ != NULL) sync_key_cur_->::SKBuiltinBuffer_t::Clear();
  clear_has_sync_key_cur();
}
const ::SKBuiltinBuffer_t& NewInitRequest::sync_key_cur() const {
  // @@protoc_insertion_point(field_get:NewInitRequest.sync_key_cur)
  return sync_key_cur_ != NULL ? *sync_key_cur_
                         : *::SKBuiltinBuffer_t::internal_default_instance();
}
::SKBuiltinBuffer_t* NewInitRequest::mutable_sync_key_cur() {
  set_has_sync_key_cur();
  if (sync_key_cur_ == NULL) {
    sync_key_cur_ = new ::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:NewInitRequest.sync_key_cur)
  return sync_key_cur_;
}
::SKBuiltinBuffer_t* NewInitRequest::release_sync_key_cur() {
  // @@protoc_insertion_point(field_release:NewInitRequest.sync_key_cur)
  clear_has_sync_key_cur();
  ::SKBuiltinBuffer_t* temp = sync_key_cur_;
  sync_key_cur_ = NULL;
  return temp;
}
void NewInitRequest::set_allocated_sync_key_cur(::SKBuiltinBuffer_t* sync_key_cur) {
  delete sync_key_cur_;
  sync_key_cur_ = sync_key_cur;
  if (sync_key_cur) {
    set_has_sync_key_cur();
  } else {
    clear_has_sync_key_cur();
  }
  // @@protoc_insertion_point(field_set_allocated:NewInitRequest.sync_key_cur)
}

// optional .SKBuiltinBuffer_t sync_key_max = 4;
bool NewInitRequest::has_sync_key_max() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void NewInitRequest::set_has_sync_key_max() {
  _has_bits_[0] |= 0x00000010u;
}
void NewInitRequest::clear_has_sync_key_max() {
  _has_bits_[0] &= ~0x00000010u;
}
void NewInitRequest::clear_sync_key_max() {
  if (sync_key_max_ != NULL) sync_key_max_->::SKBuiltinBuffer_t::Clear();
  clear_has_sync_key_max();
}
const ::SKBuiltinBuffer_t& NewInitRequest::sync_key_max() const {
  // @@protoc_insertion_point(field_get:NewInitRequest.sync_key_max)
  return sync_key_max_ != NULL ? *sync_key_max_
                         : *::SKBuiltinBuffer_t::internal_default_instance();
}
::SKBuiltinBuffer_t* NewInitRequest::mutable_sync_key_max() {
  set_has_sync_key_max();
  if (sync_key_max_ == NULL) {
    sync_key_max_ = new ::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:NewInitRequest.sync_key_max)
  return sync_key_max_;
}
::SKBuiltinBuffer_t* NewInitRequest::release_sync_key_max() {
  // @@protoc_insertion_point(field_release:NewInitRequest.sync_key_max)
  clear_has_sync_key_max();
  ::SKBuiltinBuffer_t* temp = sync_key_max_;
  sync_key_max_ = NULL;
  return temp;
}
void NewInitRequest::set_allocated_sync_key_max(::SKBuiltinBuffer_t* sync_key_max) {
  delete sync_key_max_;
  sync_key_max_ = sync_key_max;
  if (sync_key_max) {
    set_has_sync_key_max();
  } else {
    clear_has_sync_key_max();
  }
  // @@protoc_insertion_point(field_set_allocated:NewInitRequest.sync_key_max)
}

// optional string language = 5;
bool NewInitRequest::has_language() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NewInitRequest::set_has_language() {
  _has_bits_[0] |= 0x00000002u;
}
void NewInitRequest::clear_has_language() {
  _has_bits_[0] &= ~0x00000002u;
}
void NewInitRequest::clear_language() {
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_language();
}
const ::std::string& NewInitRequest::language() const {
  // @@protoc_insertion_point(field_get:NewInitRequest.language)
  return language_.GetNoArena();
}
void NewInitRequest::set_language(const ::std::string& value) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NewInitRequest.language)
}
#if LANG_CXX11
void NewInitRequest::set_language(::std::string&& value) {
  set_has_language();
  language_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NewInitRequest.language)
}
#endif
void NewInitRequest::set_language(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NewInitRequest.language)
}
void NewInitRequest::set_language(const char* value, size_t size) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NewInitRequest.language)
}
::std::string* NewInitRequest::mutable_language() {
  set_has_language();
  // @@protoc_insertion_point(field_mutable:NewInitRequest.language)
  return language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewInitRequest::release_language() {
  // @@protoc_insertion_point(field_release:NewInitRequest.language)
  clear_has_language();
  return language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewInitRequest::set_allocated_language(::std::string* language) {
  if (language != NULL) {
    set_has_language();
  } else {
    clear_has_language();
  }
  language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:NewInitRequest.language)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NewInitResponse::kTag1FieldNumber;
const int NewInitResponse::kSyncKeyCurFieldNumber;
const int NewInitResponse::kSyncKeyMaxFieldNumber;
const int NewInitResponse::kContinueFlagFieldNumber;
const int NewInitResponse::kCntListFieldNumber;
const int NewInitResponse::kTag7FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NewInitResponse::NewInitResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NewInitResponse)
}
NewInitResponse::NewInitResponse(const NewInitResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      tag7_(from.tag7_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tag1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tag1()) {
    tag1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag1_);
  }
  sync_key_cur_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sync_key_cur()) {
    sync_key_cur_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sync_key_cur_);
  }
  sync_key_max_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sync_key_max()) {
    sync_key_max_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sync_key_max_);
  }
  ::memcpy(&continue_flag_, &from.continue_flag_,
    reinterpret_cast<char*>(&cntlist_) -
    reinterpret_cast<char*>(&continue_flag_) + sizeof(cntlist_));
  // @@protoc_insertion_point(copy_constructor:NewInitResponse)
}

void NewInitResponse::SharedCtor() {
  _cached_size_ = 0;
  tag1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sync_key_cur_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sync_key_max_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&continue_flag_, 0, reinterpret_cast<char*>(&cntlist_) -
    reinterpret_cast<char*>(&continue_flag_) + sizeof(cntlist_));
}

NewInitResponse::~NewInitResponse() {
  // @@protoc_insertion_point(destructor:NewInitResponse)
  SharedDtor();
}

void NewInitResponse::SharedDtor() {
  tag1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sync_key_cur_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sync_key_max_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NewInitResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewInitResponse::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NewInitResponse& NewInitResponse::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

NewInitResponse* NewInitResponse::New(::google::protobuf::Arena* arena) const {
  NewInitResponse* n = new NewInitResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NewInitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:NewInitResponse)
  tag7_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_tag1()) {
      GOOGLE_DCHECK(!tag1_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tag1_.UnsafeRawStringPointer())->clear();
    }
    if (has_sync_key_cur()) {
      GOOGLE_DCHECK(!sync_key_cur_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sync_key_cur_.UnsafeRawStringPointer())->clear();
    }
    if (has_sync_key_max()) {
      GOOGLE_DCHECK(!sync_key_max_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sync_key_max_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 24u) {
    ::memset(&continue_flag_, 0, reinterpret_cast<char*>(&cntlist_) -
      reinterpret_cast<char*>(&continue_flag_) + sizeof(cntlist_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NewInitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NewInitResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes tag1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tag1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sync_key_cur = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sync_key_cur()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sync_key_max = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sync_key_max()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 continue_flag = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_continue_flag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &continue_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cntList = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_cntlist();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cntlist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .common_msg tag7 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tag7()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NewInitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NewInitResponse)
  return false;
#undef DO_
}

void NewInitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NewInitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes tag1 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->tag1(), output);
  }

  // optional bytes sync_key_cur = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->sync_key_cur(), output);
  }

  // optional bytes sync_key_max = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->sync_key_max(), output);
  }

  // optional int32 continue_flag = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->continue_flag(), output);
  }

  // optional int32 cntList = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cntlist(), output);
  }

  // repeated .common_msg tag7 = 7;
  for (unsigned int i = 0, n = this->tag7_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->tag7(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NewInitResponse)
}

::google::protobuf::uint8* NewInitResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NewInitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes tag1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->tag1(), target);
  }

  // optional bytes sync_key_cur = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->sync_key_cur(), target);
  }

  // optional bytes sync_key_max = 3;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->sync_key_max(), target);
  }

  // optional int32 continue_flag = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->continue_flag(), target);
  }

  // optional int32 cntList = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cntlist(), target);
  }

  // repeated .common_msg tag7 = 7;
  for (unsigned int i = 0, n = this->tag7_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->tag7(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NewInitResponse)
  return target;
}

size_t NewInitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NewInitResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .common_msg tag7 = 7;
  {
    unsigned int count = this->tag7_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tag7(i));
    }
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional bytes tag1 = 1;
    if (has_tag1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tag1());
    }

    // optional bytes sync_key_cur = 2;
    if (has_sync_key_cur()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sync_key_cur());
    }

    // optional bytes sync_key_max = 3;
    if (has_sync_key_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sync_key_max());
    }

    // optional int32 continue_flag = 4;
    if (has_continue_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->continue_flag());
    }

    // optional int32 cntList = 6;
    if (has_cntlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cntlist());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewInitResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NewInitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const NewInitResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NewInitResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NewInitResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NewInitResponse)
    MergeFrom(*source);
  }
}

void NewInitResponse::MergeFrom(const NewInitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NewInitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tag7_.MergeFrom(from.tag7_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_tag1();
      tag1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag1_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_sync_key_cur();
      sync_key_cur_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sync_key_cur_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_sync_key_max();
      sync_key_max_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sync_key_max_);
    }
    if (cached_has_bits & 0x00000008u) {
      continue_flag_ = from.continue_flag_;
    }
    if (cached_has_bits & 0x00000010u) {
      cntlist_ = from.cntlist_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NewInitResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NewInitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewInitResponse::CopyFrom(const NewInitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NewInitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewInitResponse::IsInitialized() const {
  return true;
}

void NewInitResponse::Swap(NewInitResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NewInitResponse::InternalSwap(NewInitResponse* other) {
  tag7_.InternalSwap(&other->tag7_);
  tag1_.Swap(&other->tag1_);
  sync_key_cur_.Swap(&other->sync_key_cur_);
  sync_key_max_.Swap(&other->sync_key_max_);
  std::swap(continue_flag_, other->continue_flag_);
  std::swap(cntlist_, other->cntlist_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NewInitResponse::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NewInitResponse

// optional bytes tag1 = 1;
bool NewInitResponse::has_tag1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NewInitResponse::set_has_tag1() {
  _has_bits_[0] |= 0x00000001u;
}
void NewInitResponse::clear_has_tag1() {
  _has_bits_[0] &= ~0x00000001u;
}
void NewInitResponse::clear_tag1() {
  tag1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tag1();
}
const ::std::string& NewInitResponse::tag1() const {
  // @@protoc_insertion_point(field_get:NewInitResponse.tag1)
  return tag1_.GetNoArena();
}
void NewInitResponse::set_tag1(const ::std::string& value) {
  set_has_tag1();
  tag1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NewInitResponse.tag1)
}
#if LANG_CXX11
void NewInitResponse::set_tag1(::std::string&& value) {
  set_has_tag1();
  tag1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NewInitResponse.tag1)
}
#endif
void NewInitResponse::set_tag1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tag1();
  tag1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NewInitResponse.tag1)
}
void NewInitResponse::set_tag1(const void* value, size_t size) {
  set_has_tag1();
  tag1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NewInitResponse.tag1)
}
::std::string* NewInitResponse::mutable_tag1() {
  set_has_tag1();
  // @@protoc_insertion_point(field_mutable:NewInitResponse.tag1)
  return tag1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewInitResponse::release_tag1() {
  // @@protoc_insertion_point(field_release:NewInitResponse.tag1)
  clear_has_tag1();
  return tag1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewInitResponse::set_allocated_tag1(::std::string* tag1) {
  if (tag1 != NULL) {
    set_has_tag1();
  } else {
    clear_has_tag1();
  }
  tag1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag1);
  // @@protoc_insertion_point(field_set_allocated:NewInitResponse.tag1)
}

// optional bytes sync_key_cur = 2;
bool NewInitResponse::has_sync_key_cur() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NewInitResponse::set_has_sync_key_cur() {
  _has_bits_[0] |= 0x00000002u;
}
void NewInitResponse::clear_has_sync_key_cur() {
  _has_bits_[0] &= ~0x00000002u;
}
void NewInitResponse::clear_sync_key_cur() {
  sync_key_cur_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sync_key_cur();
}
const ::std::string& NewInitResponse::sync_key_cur() const {
  // @@protoc_insertion_point(field_get:NewInitResponse.sync_key_cur)
  return sync_key_cur_.GetNoArena();
}
void NewInitResponse::set_sync_key_cur(const ::std::string& value) {
  set_has_sync_key_cur();
  sync_key_cur_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NewInitResponse.sync_key_cur)
}
#if LANG_CXX11
void NewInitResponse::set_sync_key_cur(::std::string&& value) {
  set_has_sync_key_cur();
  sync_key_cur_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NewInitResponse.sync_key_cur)
}
#endif
void NewInitResponse::set_sync_key_cur(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sync_key_cur();
  sync_key_cur_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NewInitResponse.sync_key_cur)
}
void NewInitResponse::set_sync_key_cur(const void* value, size_t size) {
  set_has_sync_key_cur();
  sync_key_cur_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NewInitResponse.sync_key_cur)
}
::std::string* NewInitResponse::mutable_sync_key_cur() {
  set_has_sync_key_cur();
  // @@protoc_insertion_point(field_mutable:NewInitResponse.sync_key_cur)
  return sync_key_cur_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewInitResponse::release_sync_key_cur() {
  // @@protoc_insertion_point(field_release:NewInitResponse.sync_key_cur)
  clear_has_sync_key_cur();
  return sync_key_cur_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewInitResponse::set_allocated_sync_key_cur(::std::string* sync_key_cur) {
  if (sync_key_cur != NULL) {
    set_has_sync_key_cur();
  } else {
    clear_has_sync_key_cur();
  }
  sync_key_cur_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sync_key_cur);
  // @@protoc_insertion_point(field_set_allocated:NewInitResponse.sync_key_cur)
}

// optional bytes sync_key_max = 3;
bool NewInitResponse::has_sync_key_max() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NewInitResponse::set_has_sync_key_max() {
  _has_bits_[0] |= 0x00000004u;
}
void NewInitResponse::clear_has_sync_key_max() {
  _has_bits_[0] &= ~0x00000004u;
}
void NewInitResponse::clear_sync_key_max() {
  sync_key_max_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sync_key_max();
}
const ::std::string& NewInitResponse::sync_key_max() const {
  // @@protoc_insertion_point(field_get:NewInitResponse.sync_key_max)
  return sync_key_max_.GetNoArena();
}
void NewInitResponse::set_sync_key_max(const ::std::string& value) {
  set_has_sync_key_max();
  sync_key_max_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NewInitResponse.sync_key_max)
}
#if LANG_CXX11
void NewInitResponse::set_sync_key_max(::std::string&& value) {
  set_has_sync_key_max();
  sync_key_max_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NewInitResponse.sync_key_max)
}
#endif
void NewInitResponse::set_sync_key_max(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sync_key_max();
  sync_key_max_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NewInitResponse.sync_key_max)
}
void NewInitResponse::set_sync_key_max(const void* value, size_t size) {
  set_has_sync_key_max();
  sync_key_max_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NewInitResponse.sync_key_max)
}
::std::string* NewInitResponse::mutable_sync_key_max() {
  set_has_sync_key_max();
  // @@protoc_insertion_point(field_mutable:NewInitResponse.sync_key_max)
  return sync_key_max_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NewInitResponse::release_sync_key_max() {
  // @@protoc_insertion_point(field_release:NewInitResponse.sync_key_max)
  clear_has_sync_key_max();
  return sync_key_max_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NewInitResponse::set_allocated_sync_key_max(::std::string* sync_key_max) {
  if (sync_key_max != NULL) {
    set_has_sync_key_max();
  } else {
    clear_has_sync_key_max();
  }
  sync_key_max_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sync_key_max);
  // @@protoc_insertion_point(field_set_allocated:NewInitResponse.sync_key_max)
}

// optional int32 continue_flag = 4;
bool NewInitResponse::has_continue_flag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void NewInitResponse::set_has_continue_flag() {
  _has_bits_[0] |= 0x00000008u;
}
void NewInitResponse::clear_has_continue_flag() {
  _has_bits_[0] &= ~0x00000008u;
}
void NewInitResponse::clear_continue_flag() {
  continue_flag_ = 0;
  clear_has_continue_flag();
}
::google::protobuf::int32 NewInitResponse::continue_flag() const {
  // @@protoc_insertion_point(field_get:NewInitResponse.continue_flag)
  return continue_flag_;
}
void NewInitResponse::set_continue_flag(::google::protobuf::int32 value) {
  set_has_continue_flag();
  continue_flag_ = value;
  // @@protoc_insertion_point(field_set:NewInitResponse.continue_flag)
}

// optional int32 cntList = 6;
bool NewInitResponse::has_cntlist() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void NewInitResponse::set_has_cntlist() {
  _has_bits_[0] |= 0x00000010u;
}
void NewInitResponse::clear_has_cntlist() {
  _has_bits_[0] &= ~0x00000010u;
}
void NewInitResponse::clear_cntlist() {
  cntlist_ = 0;
  clear_has_cntlist();
}
::google::protobuf::int32 NewInitResponse::cntlist() const {
  // @@protoc_insertion_point(field_get:NewInitResponse.cntList)
  return cntlist_;
}
void NewInitResponse::set_cntlist(::google::protobuf::int32 value) {
  set_has_cntlist();
  cntlist_ = value;
  // @@protoc_insertion_point(field_set:NewInitResponse.cntList)
}

// repeated .common_msg tag7 = 7;
int NewInitResponse::tag7_size() const {
  return tag7_.size();
}
void NewInitResponse::clear_tag7() {
  tag7_.Clear();
}
const ::common_msg& NewInitResponse::tag7(int index) const {
  // @@protoc_insertion_point(field_get:NewInitResponse.tag7)
  return tag7_.Get(index);
}
::common_msg* NewInitResponse::mutable_tag7(int index) {
  // @@protoc_insertion_point(field_mutable:NewInitResponse.tag7)
  return tag7_.Mutable(index);
}
::common_msg* NewInitResponse::add_tag7() {
  // @@protoc_insertion_point(field_add:NewInitResponse.tag7)
  return tag7_.Add();
}
::google::protobuf::RepeatedPtrField< ::common_msg >*
NewInitResponse::mutable_tag7() {
  // @@protoc_insertion_point(field_mutable_list:NewInitResponse.tag7)
  return &tag7_;
}
const ::google::protobuf::RepeatedPtrField< ::common_msg >&
NewInitResponse::tag7() const {
  // @@protoc_insertion_point(field_list:NewInitResponse.tag7)
  return tag7_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int new_sync_req_continue_flag::kFlagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

new_sync_req_continue_flag::new_sync_req_continue_flag()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:new_sync_req.continue_flag)
}
new_sync_req_continue_flag::new_sync_req_continue_flag(const new_sync_req_continue_flag& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  flag_ = from.flag_;
  // @@protoc_insertion_point(copy_constructor:new_sync_req.continue_flag)
}

void new_sync_req_continue_flag::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
}

new_sync_req_continue_flag::~new_sync_req_continue_flag() {
  // @@protoc_insertion_point(destructor:new_sync_req.continue_flag)
  SharedDtor();
}

void new_sync_req_continue_flag::SharedDtor() {
}

void new_sync_req_continue_flag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* new_sync_req_continue_flag::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const new_sync_req_continue_flag& new_sync_req_continue_flag::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

new_sync_req_continue_flag* new_sync_req_continue_flag::New(::google::protobuf::Arena* arena) const {
  new_sync_req_continue_flag* n = new new_sync_req_continue_flag;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void new_sync_req_continue_flag::Clear() {
// @@protoc_insertion_point(message_clear_start:new_sync_req.continue_flag)
  flag_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool new_sync_req_continue_flag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:new_sync_req.continue_flag)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_flag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:new_sync_req.continue_flag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:new_sync_req.continue_flag)
  return false;
#undef DO_
}

void new_sync_req_continue_flag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:new_sync_req.continue_flag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 flag = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:new_sync_req.continue_flag)
}

::google::protobuf::uint8* new_sync_req_continue_flag::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:new_sync_req.continue_flag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 flag = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:new_sync_req.continue_flag)
  return target;
}

size_t new_sync_req_continue_flag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:new_sync_req.continue_flag)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 flag = 1;
  if (has_flag()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->flag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void new_sync_req_continue_flag::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:new_sync_req.continue_flag)
  GOOGLE_DCHECK_NE(&from, this);
  const new_sync_req_continue_flag* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const new_sync_req_continue_flag>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:new_sync_req.continue_flag)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:new_sync_req.continue_flag)
    MergeFrom(*source);
  }
}

void new_sync_req_continue_flag::MergeFrom(const new_sync_req_continue_flag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:new_sync_req.continue_flag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_flag()) {
    set_flag(from.flag());
  }
}

void new_sync_req_continue_flag::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:new_sync_req.continue_flag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void new_sync_req_continue_flag::CopyFrom(const new_sync_req_continue_flag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:new_sync_req.continue_flag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool new_sync_req_continue_flag::IsInitialized() const {
  return true;
}

void new_sync_req_continue_flag::Swap(new_sync_req_continue_flag* other) {
  if (other == this) return;
  InternalSwap(other);
}
void new_sync_req_continue_flag::InternalSwap(new_sync_req_continue_flag* other) {
  std::swap(flag_, other->flag_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata new_sync_req_continue_flag::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// new_sync_req_continue_flag

// optional int32 flag = 1;
bool new_sync_req_continue_flag::has_flag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void new_sync_req_continue_flag::set_has_flag() {
  _has_bits_[0] |= 0x00000001u;
}
void new_sync_req_continue_flag::clear_has_flag() {
  _has_bits_[0] &= ~0x00000001u;
}
void new_sync_req_continue_flag::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
::google::protobuf::int32 new_sync_req_continue_flag::flag() const {
  // @@protoc_insertion_point(field_get:new_sync_req.continue_flag.flag)
  return flag_;
}
void new_sync_req_continue_flag::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:new_sync_req.continue_flag.flag)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int new_sync_req::kFlagFieldNumber;
const int new_sync_req::kSelectorFieldNumber;
const int new_sync_req::kSyncKeyFieldNumber;
const int new_sync_req::kSceneFieldNumber;
const int new_sync_req::kDeviceFieldNumber;
const int new_sync_req::kSyncMsgDigestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

new_sync_req::new_sync_req()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:new_sync_req)
}
new_sync_req::new_sync_req(const new_sync_req& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sync_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sync_key()) {
    sync_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sync_key_);
  }
  device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_device()) {
    device_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_);
  }
  if (from.has_flag()) {
    flag_ = new ::new_sync_req_continue_flag(*from.flag_);
  } else {
    flag_ = NULL;
  }
  ::memcpy(&selector_, &from.selector_,
    reinterpret_cast<char*>(&sync_msg_digest_) -
    reinterpret_cast<char*>(&selector_) + sizeof(sync_msg_digest_));
  // @@protoc_insertion_point(copy_constructor:new_sync_req)
}

void new_sync_req::SharedCtor() {
  _cached_size_ = 0;
  sync_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&flag_, 0, reinterpret_cast<char*>(&sync_msg_digest_) -
    reinterpret_cast<char*>(&flag_) + sizeof(sync_msg_digest_));
}

new_sync_req::~new_sync_req() {
  // @@protoc_insertion_point(destructor:new_sync_req)
  SharedDtor();
}

void new_sync_req::SharedDtor() {
  sync_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete flag_;
  }
}

void new_sync_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* new_sync_req::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const new_sync_req& new_sync_req::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

new_sync_req* new_sync_req::New(::google::protobuf::Arena* arena) const {
  new_sync_req* n = new new_sync_req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void new_sync_req::Clear() {
// @@protoc_insertion_point(message_clear_start:new_sync_req)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_sync_key()) {
      GOOGLE_DCHECK(!sync_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sync_key_.UnsafeRawStringPointer())->clear();
    }
    if (has_device()) {
      GOOGLE_DCHECK(!device_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*device_.UnsafeRawStringPointer())->clear();
    }
    if (has_flag()) {
      GOOGLE_DCHECK(flag_ != NULL);
      flag_->::new_sync_req_continue_flag::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 56u) {
    ::memset(&selector_, 0, reinterpret_cast<char*>(&sync_msg_digest_) -
      reinterpret_cast<char*>(&selector_) + sizeof(sync_msg_digest_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool new_sync_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:new_sync_req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .new_sync_req.continue_flag flag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 selector = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_selector();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &selector_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sync_Key = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sync_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 scene = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_scene();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string device = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device().data(), this->device().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "new_sync_req.device");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sync_msg_digest = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_sync_msg_digest();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sync_msg_digest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:new_sync_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:new_sync_req)
  return false;
#undef DO_
}

void new_sync_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:new_sync_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .new_sync_req.continue_flag flag = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->flag_, output);
  }

  // optional int32 selector = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->selector(), output);
  }

  // optional bytes sync_Key = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->sync_key(), output);
  }

  // optional int32 scene = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->scene(), output);
  }

  // optional string device = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "new_sync_req.device");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->device(), output);
  }

  // optional int32 sync_msg_digest = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sync_msg_digest(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:new_sync_req)
}

::google::protobuf::uint8* new_sync_req::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:new_sync_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .new_sync_req.continue_flag flag = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->flag_, deterministic, target);
  }

  // optional int32 selector = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->selector(), target);
  }

  // optional bytes sync_Key = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->sync_key(), target);
  }

  // optional int32 scene = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->scene(), target);
  }

  // optional string device = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "new_sync_req.device");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->device(), target);
  }

  // optional int32 sync_msg_digest = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sync_msg_digest(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:new_sync_req)
  return target;
}

size_t new_sync_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:new_sync_req)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional bytes sync_Key = 3;
    if (has_sync_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sync_key());
    }

    // optional string device = 5;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device());
    }

    // optional .new_sync_req.continue_flag flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->flag_);
    }

    // optional int32 selector = 2;
    if (has_selector()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->selector());
    }

    // optional int32 scene = 4;
    if (has_scene()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene());
    }

    // optional int32 sync_msg_digest = 6;
    if (has_sync_msg_digest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sync_msg_digest());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void new_sync_req::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:new_sync_req)
  GOOGLE_DCHECK_NE(&from, this);
  const new_sync_req* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const new_sync_req>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:new_sync_req)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:new_sync_req)
    MergeFrom(*source);
  }
}

void new_sync_req::MergeFrom(const new_sync_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:new_sync_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sync_key();
      sync_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sync_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_device();
      device_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_flag()->::new_sync_req_continue_flag::MergeFrom(from.flag());
    }
    if (cached_has_bits & 0x00000008u) {
      selector_ = from.selector_;
    }
    if (cached_has_bits & 0x00000010u) {
      scene_ = from.scene_;
    }
    if (cached_has_bits & 0x00000020u) {
      sync_msg_digest_ = from.sync_msg_digest_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void new_sync_req::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:new_sync_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void new_sync_req::CopyFrom(const new_sync_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:new_sync_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool new_sync_req::IsInitialized() const {
  return true;
}

void new_sync_req::Swap(new_sync_req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void new_sync_req::InternalSwap(new_sync_req* other) {
  sync_key_.Swap(&other->sync_key_);
  device_.Swap(&other->device_);
  std::swap(flag_, other->flag_);
  std::swap(selector_, other->selector_);
  std::swap(scene_, other->scene_);
  std::swap(sync_msg_digest_, other->sync_msg_digest_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata new_sync_req::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// new_sync_req

// optional .new_sync_req.continue_flag flag = 1;
bool new_sync_req::has_flag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void new_sync_req::set_has_flag() {
  _has_bits_[0] |= 0x00000004u;
}
void new_sync_req::clear_has_flag() {
  _has_bits_[0] &= ~0x00000004u;
}
void new_sync_req::clear_flag() {
  if (flag_ != NULL) flag_->::new_sync_req_continue_flag::Clear();
  clear_has_flag();
}
const ::new_sync_req_continue_flag& new_sync_req::flag() const {
  // @@protoc_insertion_point(field_get:new_sync_req.flag)
  return flag_ != NULL ? *flag_
                         : *::new_sync_req_continue_flag::internal_default_instance();
}
::new_sync_req_continue_flag* new_sync_req::mutable_flag() {
  set_has_flag();
  if (flag_ == NULL) {
    flag_ = new ::new_sync_req_continue_flag;
  }
  // @@protoc_insertion_point(field_mutable:new_sync_req.flag)
  return flag_;
}
::new_sync_req_continue_flag* new_sync_req::release_flag() {
  // @@protoc_insertion_point(field_release:new_sync_req.flag)
  clear_has_flag();
  ::new_sync_req_continue_flag* temp = flag_;
  flag_ = NULL;
  return temp;
}
void new_sync_req::set_allocated_flag(::new_sync_req_continue_flag* flag) {
  delete flag_;
  flag_ = flag;
  if (flag) {
    set_has_flag();
  } else {
    clear_has_flag();
  }
  // @@protoc_insertion_point(field_set_allocated:new_sync_req.flag)
}

// optional int32 selector = 2;
bool new_sync_req::has_selector() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void new_sync_req::set_has_selector() {
  _has_bits_[0] |= 0x00000008u;
}
void new_sync_req::clear_has_selector() {
  _has_bits_[0] &= ~0x00000008u;
}
void new_sync_req::clear_selector() {
  selector_ = 0;
  clear_has_selector();
}
::google::protobuf::int32 new_sync_req::selector() const {
  // @@protoc_insertion_point(field_get:new_sync_req.selector)
  return selector_;
}
void new_sync_req::set_selector(::google::protobuf::int32 value) {
  set_has_selector();
  selector_ = value;
  // @@protoc_insertion_point(field_set:new_sync_req.selector)
}

// optional bytes sync_Key = 3;
bool new_sync_req::has_sync_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void new_sync_req::set_has_sync_key() {
  _has_bits_[0] |= 0x00000001u;
}
void new_sync_req::clear_has_sync_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void new_sync_req::clear_sync_key() {
  sync_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sync_key();
}
const ::std::string& new_sync_req::sync_key() const {
  // @@protoc_insertion_point(field_get:new_sync_req.sync_Key)
  return sync_key_.GetNoArena();
}
void new_sync_req::set_sync_key(const ::std::string& value) {
  set_has_sync_key();
  sync_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:new_sync_req.sync_Key)
}
#if LANG_CXX11
void new_sync_req::set_sync_key(::std::string&& value) {
  set_has_sync_key();
  sync_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:new_sync_req.sync_Key)
}
#endif
void new_sync_req::set_sync_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sync_key();
  sync_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:new_sync_req.sync_Key)
}
void new_sync_req::set_sync_key(const void* value, size_t size) {
  set_has_sync_key();
  sync_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:new_sync_req.sync_Key)
}
::std::string* new_sync_req::mutable_sync_key() {
  set_has_sync_key();
  // @@protoc_insertion_point(field_mutable:new_sync_req.sync_Key)
  return sync_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* new_sync_req::release_sync_key() {
  // @@protoc_insertion_point(field_release:new_sync_req.sync_Key)
  clear_has_sync_key();
  return sync_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void new_sync_req::set_allocated_sync_key(::std::string* sync_key) {
  if (sync_key != NULL) {
    set_has_sync_key();
  } else {
    clear_has_sync_key();
  }
  sync_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sync_key);
  // @@protoc_insertion_point(field_set_allocated:new_sync_req.sync_Key)
}

// optional int32 scene = 4;
bool new_sync_req::has_scene() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void new_sync_req::set_has_scene() {
  _has_bits_[0] |= 0x00000010u;
}
void new_sync_req::clear_has_scene() {
  _has_bits_[0] &= ~0x00000010u;
}
void new_sync_req::clear_scene() {
  scene_ = 0;
  clear_has_scene();
}
::google::protobuf::int32 new_sync_req::scene() const {
  // @@protoc_insertion_point(field_get:new_sync_req.scene)
  return scene_;
}
void new_sync_req::set_scene(::google::protobuf::int32 value) {
  set_has_scene();
  scene_ = value;
  // @@protoc_insertion_point(field_set:new_sync_req.scene)
}

// optional string device = 5;
bool new_sync_req::has_device() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void new_sync_req::set_has_device() {
  _has_bits_[0] |= 0x00000002u;
}
void new_sync_req::clear_has_device() {
  _has_bits_[0] &= ~0x00000002u;
}
void new_sync_req::clear_device() {
  device_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_device();
}
const ::std::string& new_sync_req::device() const {
  // @@protoc_insertion_point(field_get:new_sync_req.device)
  return device_.GetNoArena();
}
void new_sync_req::set_device(const ::std::string& value) {
  set_has_device();
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:new_sync_req.device)
}
#if LANG_CXX11
void new_sync_req::set_device(::std::string&& value) {
  set_has_device();
  device_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:new_sync_req.device)
}
#endif
void new_sync_req::set_device(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_device();
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:new_sync_req.device)
}
void new_sync_req::set_device(const char* value, size_t size) {
  set_has_device();
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:new_sync_req.device)
}
::std::string* new_sync_req::mutable_device() {
  set_has_device();
  // @@protoc_insertion_point(field_mutable:new_sync_req.device)
  return device_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* new_sync_req::release_device() {
  // @@protoc_insertion_point(field_release:new_sync_req.device)
  clear_has_device();
  return device_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void new_sync_req::set_allocated_device(::std::string* device) {
  if (device != NULL) {
    set_has_device();
  } else {
    clear_has_device();
  }
  device_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device);
  // @@protoc_insertion_point(field_set_allocated:new_sync_req.device)
}

// optional int32 sync_msg_digest = 6;
bool new_sync_req::has_sync_msg_digest() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void new_sync_req::set_has_sync_msg_digest() {
  _has_bits_[0] |= 0x00000020u;
}
void new_sync_req::clear_has_sync_msg_digest() {
  _has_bits_[0] &= ~0x00000020u;
}
void new_sync_req::clear_sync_msg_digest() {
  sync_msg_digest_ = 0;
  clear_has_sync_msg_digest();
}
::google::protobuf::int32 new_sync_req::sync_msg_digest() const {
  // @@protoc_insertion_point(field_get:new_sync_req.sync_msg_digest)
  return sync_msg_digest_;
}
void new_sync_req::set_sync_msg_digest(::google::protobuf::int32 value) {
  set_has_sync_msg_digest();
  sync_msg_digest_ = value;
  // @@protoc_insertion_point(field_set:new_sync_req.sync_msg_digest)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int new_sync_resp_new_msg::kCntListFieldNumber;
const int new_sync_resp_new_msg::kTag2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

new_sync_resp_new_msg::new_sync_resp_new_msg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:new_sync_resp.new_msg)
}
new_sync_resp_new_msg::new_sync_resp_new_msg(const new_sync_resp_new_msg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      tag2_(from.tag2_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cntlist_ = from.cntlist_;
  // @@protoc_insertion_point(copy_constructor:new_sync_resp.new_msg)
}

void new_sync_resp_new_msg::SharedCtor() {
  _cached_size_ = 0;
  cntlist_ = 0;
}

new_sync_resp_new_msg::~new_sync_resp_new_msg() {
  // @@protoc_insertion_point(destructor:new_sync_resp.new_msg)
  SharedDtor();
}

void new_sync_resp_new_msg::SharedDtor() {
}

void new_sync_resp_new_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* new_sync_resp_new_msg::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const new_sync_resp_new_msg& new_sync_resp_new_msg::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

new_sync_resp_new_msg* new_sync_resp_new_msg::New(::google::protobuf::Arena* arena) const {
  new_sync_resp_new_msg* n = new new_sync_resp_new_msg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void new_sync_resp_new_msg::Clear() {
// @@protoc_insertion_point(message_clear_start:new_sync_resp.new_msg)
  tag2_.Clear();
  cntlist_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool new_sync_resp_new_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:new_sync_resp.new_msg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cntList = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_cntlist();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cntlist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .common_msg tag2 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tag2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:new_sync_resp.new_msg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:new_sync_resp.new_msg)
  return false;
#undef DO_
}

void new_sync_resp_new_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:new_sync_resp.new_msg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cntList = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cntlist(), output);
  }

  // repeated .common_msg tag2 = 2;
  for (unsigned int i = 0, n = this->tag2_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tag2(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:new_sync_resp.new_msg)
}

::google::protobuf::uint8* new_sync_resp_new_msg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:new_sync_resp.new_msg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cntList = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cntlist(), target);
  }

  // repeated .common_msg tag2 = 2;
  for (unsigned int i = 0, n = this->tag2_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->tag2(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:new_sync_resp.new_msg)
  return target;
}

size_t new_sync_resp_new_msg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:new_sync_resp.new_msg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .common_msg tag2 = 2;
  {
    unsigned int count = this->tag2_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tag2(i));
    }
  }

  // optional int32 cntList = 1;
  if (has_cntlist()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cntlist());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void new_sync_resp_new_msg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:new_sync_resp.new_msg)
  GOOGLE_DCHECK_NE(&from, this);
  const new_sync_resp_new_msg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const new_sync_resp_new_msg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:new_sync_resp.new_msg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:new_sync_resp.new_msg)
    MergeFrom(*source);
  }
}

void new_sync_resp_new_msg::MergeFrom(const new_sync_resp_new_msg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:new_sync_resp.new_msg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tag2_.MergeFrom(from.tag2_);
  if (from.has_cntlist()) {
    set_cntlist(from.cntlist());
  }
}

void new_sync_resp_new_msg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:new_sync_resp.new_msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void new_sync_resp_new_msg::CopyFrom(const new_sync_resp_new_msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:new_sync_resp.new_msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool new_sync_resp_new_msg::IsInitialized() const {
  return true;
}

void new_sync_resp_new_msg::Swap(new_sync_resp_new_msg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void new_sync_resp_new_msg::InternalSwap(new_sync_resp_new_msg* other) {
  tag2_.InternalSwap(&other->tag2_);
  std::swap(cntlist_, other->cntlist_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata new_sync_resp_new_msg::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// new_sync_resp_new_msg

// optional int32 cntList = 1;
bool new_sync_resp_new_msg::has_cntlist() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void new_sync_resp_new_msg::set_has_cntlist() {
  _has_bits_[0] |= 0x00000001u;
}
void new_sync_resp_new_msg::clear_has_cntlist() {
  _has_bits_[0] &= ~0x00000001u;
}
void new_sync_resp_new_msg::clear_cntlist() {
  cntlist_ = 0;
  clear_has_cntlist();
}
::google::protobuf::int32 new_sync_resp_new_msg::cntlist() const {
  // @@protoc_insertion_point(field_get:new_sync_resp.new_msg.cntList)
  return cntlist_;
}
void new_sync_resp_new_msg::set_cntlist(::google::protobuf::int32 value) {
  set_has_cntlist();
  cntlist_ = value;
  // @@protoc_insertion_point(field_set:new_sync_resp.new_msg.cntList)
}

// repeated .common_msg tag2 = 2;
int new_sync_resp_new_msg::tag2_size() const {
  return tag2_.size();
}
void new_sync_resp_new_msg::clear_tag2() {
  tag2_.Clear();
}
const ::common_msg& new_sync_resp_new_msg::tag2(int index) const {
  // @@protoc_insertion_point(field_get:new_sync_resp.new_msg.tag2)
  return tag2_.Get(index);
}
::common_msg* new_sync_resp_new_msg::mutable_tag2(int index) {
  // @@protoc_insertion_point(field_mutable:new_sync_resp.new_msg.tag2)
  return tag2_.Mutable(index);
}
::common_msg* new_sync_resp_new_msg::add_tag2() {
  // @@protoc_insertion_point(field_add:new_sync_resp.new_msg.tag2)
  return tag2_.Add();
}
::google::protobuf::RepeatedPtrField< ::common_msg >*
new_sync_resp_new_msg::mutable_tag2() {
  // @@protoc_insertion_point(field_mutable_list:new_sync_resp.new_msg.tag2)
  return &tag2_;
}
const ::google::protobuf::RepeatedPtrField< ::common_msg >&
new_sync_resp_new_msg::tag2() const {
  // @@protoc_insertion_point(field_list:new_sync_resp.new_msg.tag2)
  return tag2_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int new_sync_resp::kTag1FieldNumber;
const int new_sync_resp::kMsgFieldNumber;
const int new_sync_resp::kTag3FieldNumber;
const int new_sync_resp::kSyncKeyFieldNumber;
const int new_sync_resp::kTag5FieldNumber;
const int new_sync_resp::kTag6FieldNumber;
const int new_sync_resp::kUtcFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

new_sync_resp::new_sync_resp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:new_sync_resp)
}
new_sync_resp::new_sync_resp(const new_sync_resp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sync_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sync_key()) {
    sync_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sync_key_);
  }
  if (from.has_msg()) {
    msg_ = new ::new_sync_resp_new_msg(*from.msg_);
  } else {
    msg_ = NULL;
  }
  ::memcpy(&tag1_, &from.tag1_,
    reinterpret_cast<char*>(&utc_) -
    reinterpret_cast<char*>(&tag1_) + sizeof(utc_));
  // @@protoc_insertion_point(copy_constructor:new_sync_resp)
}

void new_sync_resp::SharedCtor() {
  _cached_size_ = 0;
  sync_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&msg_, 0, reinterpret_cast<char*>(&utc_) -
    reinterpret_cast<char*>(&msg_) + sizeof(utc_));
}

new_sync_resp::~new_sync_resp() {
  // @@protoc_insertion_point(destructor:new_sync_resp)
  SharedDtor();
}

void new_sync_resp::SharedDtor() {
  sync_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete msg_;
  }
}

void new_sync_resp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* new_sync_resp::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const new_sync_resp& new_sync_resp::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

new_sync_resp* new_sync_resp::New(::google::protobuf::Arena* arena) const {
  new_sync_resp* n = new new_sync_resp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void new_sync_resp::Clear() {
// @@protoc_insertion_point(message_clear_start:new_sync_resp)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_sync_key()) {
      GOOGLE_DCHECK(!sync_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sync_key_.UnsafeRawStringPointer())->clear();
    }
    if (has_msg()) {
      GOOGLE_DCHECK(msg_ != NULL);
      msg_->::new_sync_resp_new_msg::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 124u) {
    ::memset(&tag1_, 0, reinterpret_cast<char*>(&utc_) -
      reinterpret_cast<char*>(&tag1_) + sizeof(utc_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool new_sync_resp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:new_sync_resp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tag1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_tag1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .new_sync_resp.new_msg msg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tag3 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_tag3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sync_key = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sync_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tag5 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_tag5();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tag6 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_tag6();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag6_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 utc = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_utc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &utc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:new_sync_resp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:new_sync_resp)
  return false;
#undef DO_
}

void new_sync_resp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:new_sync_resp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 tag1 = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tag1(), output);
  }

  // optional .new_sync_resp.new_msg msg = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->msg_, output);
  }

  // optional int32 tag3 = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tag3(), output);
  }

  // optional bytes sync_key = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->sync_key(), output);
  }

  // optional int32 tag5 = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->tag5(), output);
  }

  // optional int32 tag6 = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->tag6(), output);
  }

  // optional int32 utc = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->utc(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:new_sync_resp)
}

::google::protobuf::uint8* new_sync_resp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:new_sync_resp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 tag1 = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tag1(), target);
  }

  // optional .new_sync_resp.new_msg msg = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->msg_, deterministic, target);
  }

  // optional int32 tag3 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tag3(), target);
  }

  // optional bytes sync_key = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->sync_key(), target);
  }

  // optional int32 tag5 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->tag5(), target);
  }

  // optional int32 tag6 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->tag6(), target);
  }

  // optional int32 utc = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->utc(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:new_sync_resp)
  return target;
}

size_t new_sync_resp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:new_sync_resp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional bytes sync_key = 4;
    if (has_sync_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sync_key());
    }

    // optional .new_sync_resp.new_msg msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->msg_);
    }

    // optional int32 tag1 = 1;
    if (has_tag1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag1());
    }

    // optional int32 tag3 = 3;
    if (has_tag3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag3());
    }

    // optional int32 tag5 = 5;
    if (has_tag5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag5());
    }

    // optional int32 tag6 = 6;
    if (has_tag6()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag6());
    }

    // optional int32 utc = 7;
    if (has_utc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->utc());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void new_sync_resp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:new_sync_resp)
  GOOGLE_DCHECK_NE(&from, this);
  const new_sync_resp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const new_sync_resp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:new_sync_resp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:new_sync_resp)
    MergeFrom(*source);
  }
}

void new_sync_resp::MergeFrom(const new_sync_resp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:new_sync_resp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sync_key();
      sync_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sync_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_msg()->::new_sync_resp_new_msg::MergeFrom(from.msg());
    }
    if (cached_has_bits & 0x00000004u) {
      tag1_ = from.tag1_;
    }
    if (cached_has_bits & 0x00000008u) {
      tag3_ = from.tag3_;
    }
    if (cached_has_bits & 0x00000010u) {
      tag5_ = from.tag5_;
    }
    if (cached_has_bits & 0x00000020u) {
      tag6_ = from.tag6_;
    }
    if (cached_has_bits & 0x00000040u) {
      utc_ = from.utc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void new_sync_resp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:new_sync_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void new_sync_resp::CopyFrom(const new_sync_resp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:new_sync_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool new_sync_resp::IsInitialized() const {
  return true;
}

void new_sync_resp::Swap(new_sync_resp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void new_sync_resp::InternalSwap(new_sync_resp* other) {
  sync_key_.Swap(&other->sync_key_);
  std::swap(msg_, other->msg_);
  std::swap(tag1_, other->tag1_);
  std::swap(tag3_, other->tag3_);
  std::swap(tag5_, other->tag5_);
  std::swap(tag6_, other->tag6_);
  std::swap(utc_, other->utc_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata new_sync_resp::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// new_sync_resp

// optional int32 tag1 = 1;
bool new_sync_resp::has_tag1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void new_sync_resp::set_has_tag1() {
  _has_bits_[0] |= 0x00000004u;
}
void new_sync_resp::clear_has_tag1() {
  _has_bits_[0] &= ~0x00000004u;
}
void new_sync_resp::clear_tag1() {
  tag1_ = 0;
  clear_has_tag1();
}
::google::protobuf::int32 new_sync_resp::tag1() const {
  // @@protoc_insertion_point(field_get:new_sync_resp.tag1)
  return tag1_;
}
void new_sync_resp::set_tag1(::google::protobuf::int32 value) {
  set_has_tag1();
  tag1_ = value;
  // @@protoc_insertion_point(field_set:new_sync_resp.tag1)
}

// optional .new_sync_resp.new_msg msg = 2;
bool new_sync_resp::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void new_sync_resp::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
void new_sync_resp::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
void new_sync_resp::clear_msg() {
  if (msg_ != NULL) msg_->::new_sync_resp_new_msg::Clear();
  clear_has_msg();
}
const ::new_sync_resp_new_msg& new_sync_resp::msg() const {
  // @@protoc_insertion_point(field_get:new_sync_resp.msg)
  return msg_ != NULL ? *msg_
                         : *::new_sync_resp_new_msg::internal_default_instance();
}
::new_sync_resp_new_msg* new_sync_resp::mutable_msg() {
  set_has_msg();
  if (msg_ == NULL) {
    msg_ = new ::new_sync_resp_new_msg;
  }
  // @@protoc_insertion_point(field_mutable:new_sync_resp.msg)
  return msg_;
}
::new_sync_resp_new_msg* new_sync_resp::release_msg() {
  // @@protoc_insertion_point(field_release:new_sync_resp.msg)
  clear_has_msg();
  ::new_sync_resp_new_msg* temp = msg_;
  msg_ = NULL;
  return temp;
}
void new_sync_resp::set_allocated_msg(::new_sync_resp_new_msg* msg) {
  delete msg_;
  msg_ = msg;
  if (msg) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  // @@protoc_insertion_point(field_set_allocated:new_sync_resp.msg)
}

// optional int32 tag3 = 3;
bool new_sync_resp::has_tag3() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void new_sync_resp::set_has_tag3() {
  _has_bits_[0] |= 0x00000008u;
}
void new_sync_resp::clear_has_tag3() {
  _has_bits_[0] &= ~0x00000008u;
}
void new_sync_resp::clear_tag3() {
  tag3_ = 0;
  clear_has_tag3();
}
::google::protobuf::int32 new_sync_resp::tag3() const {
  // @@protoc_insertion_point(field_get:new_sync_resp.tag3)
  return tag3_;
}
void new_sync_resp::set_tag3(::google::protobuf::int32 value) {
  set_has_tag3();
  tag3_ = value;
  // @@protoc_insertion_point(field_set:new_sync_resp.tag3)
}

// optional bytes sync_key = 4;
bool new_sync_resp::has_sync_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void new_sync_resp::set_has_sync_key() {
  _has_bits_[0] |= 0x00000001u;
}
void new_sync_resp::clear_has_sync_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void new_sync_resp::clear_sync_key() {
  sync_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sync_key();
}
const ::std::string& new_sync_resp::sync_key() const {
  // @@protoc_insertion_point(field_get:new_sync_resp.sync_key)
  return sync_key_.GetNoArena();
}
void new_sync_resp::set_sync_key(const ::std::string& value) {
  set_has_sync_key();
  sync_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:new_sync_resp.sync_key)
}
#if LANG_CXX11
void new_sync_resp::set_sync_key(::std::string&& value) {
  set_has_sync_key();
  sync_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:new_sync_resp.sync_key)
}
#endif
void new_sync_resp::set_sync_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sync_key();
  sync_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:new_sync_resp.sync_key)
}
void new_sync_resp::set_sync_key(const void* value, size_t size) {
  set_has_sync_key();
  sync_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:new_sync_resp.sync_key)
}
::std::string* new_sync_resp::mutable_sync_key() {
  set_has_sync_key();
  // @@protoc_insertion_point(field_mutable:new_sync_resp.sync_key)
  return sync_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* new_sync_resp::release_sync_key() {
  // @@protoc_insertion_point(field_release:new_sync_resp.sync_key)
  clear_has_sync_key();
  return sync_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void new_sync_resp::set_allocated_sync_key(::std::string* sync_key) {
  if (sync_key != NULL) {
    set_has_sync_key();
  } else {
    clear_has_sync_key();
  }
  sync_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sync_key);
  // @@protoc_insertion_point(field_set_allocated:new_sync_resp.sync_key)
}

// optional int32 tag5 = 5;
bool new_sync_resp::has_tag5() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void new_sync_resp::set_has_tag5() {
  _has_bits_[0] |= 0x00000010u;
}
void new_sync_resp::clear_has_tag5() {
  _has_bits_[0] &= ~0x00000010u;
}
void new_sync_resp::clear_tag5() {
  tag5_ = 0;
  clear_has_tag5();
}
::google::protobuf::int32 new_sync_resp::tag5() const {
  // @@protoc_insertion_point(field_get:new_sync_resp.tag5)
  return tag5_;
}
void new_sync_resp::set_tag5(::google::protobuf::int32 value) {
  set_has_tag5();
  tag5_ = value;
  // @@protoc_insertion_point(field_set:new_sync_resp.tag5)
}

// optional int32 tag6 = 6;
bool new_sync_resp::has_tag6() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void new_sync_resp::set_has_tag6() {
  _has_bits_[0] |= 0x00000020u;
}
void new_sync_resp::clear_has_tag6() {
  _has_bits_[0] &= ~0x00000020u;
}
void new_sync_resp::clear_tag6() {
  tag6_ = 0;
  clear_has_tag6();
}
::google::protobuf::int32 new_sync_resp::tag6() const {
  // @@protoc_insertion_point(field_get:new_sync_resp.tag6)
  return tag6_;
}
void new_sync_resp::set_tag6(::google::protobuf::int32 value) {
  set_has_tag6();
  tag6_ = value;
  // @@protoc_insertion_point(field_set:new_sync_resp.tag6)
}

// optional int32 utc = 7;
bool new_sync_resp::has_utc() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void new_sync_resp::set_has_utc() {
  _has_bits_[0] |= 0x00000040u;
}
void new_sync_resp::clear_has_utc() {
  _has_bits_[0] &= ~0x00000040u;
}
void new_sync_resp::clear_utc() {
  utc_ = 0;
  clear_has_utc();
}
::google::protobuf::int32 new_sync_resp::utc() const {
  // @@protoc_insertion_point(field_get:new_sync_resp.utc)
  return utc_;
}
void new_sync_resp::set_utc(::google::protobuf::int32 value) {
  set_has_utc();
  utc_ = value;
  // @@protoc_insertion_point(field_set:new_sync_resp.utc)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int new_send_msg_req_msg_info::kToFieldNumber;
const int new_send_msg_req_msg_info::kContentFieldNumber;
const int new_send_msg_req_msg_info::kTypeFieldNumber;
const int new_send_msg_req_msg_info::kUtcFieldNumber;
const int new_send_msg_req_msg_info::kClientIdFieldNumber;
const int new_send_msg_req_msg_info::kAtListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

new_send_msg_req_msg_info::new_send_msg_req_msg_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:new_send_msg_req.msg_info)
}
new_send_msg_req_msg_info::new_send_msg_req_msg_info(const new_send_msg_req_msg_info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_content()) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  at_list_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_at_list()) {
    at_list_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.at_list_);
  }
  if (from.has_to()) {
    to_ = new ::Wxid(*from.to_);
  } else {
    to_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&client_id_) -
    reinterpret_cast<char*>(&type_) + sizeof(client_id_));
  // @@protoc_insertion_point(copy_constructor:new_send_msg_req.msg_info)
}

void new_send_msg_req_msg_info::SharedCtor() {
  _cached_size_ = 0;
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  at_list_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&to_, 0, reinterpret_cast<char*>(&client_id_) -
    reinterpret_cast<char*>(&to_) + sizeof(client_id_));
}

new_send_msg_req_msg_info::~new_send_msg_req_msg_info() {
  // @@protoc_insertion_point(destructor:new_send_msg_req.msg_info)
  SharedDtor();
}

void new_send_msg_req_msg_info::SharedDtor() {
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  at_list_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete to_;
  }
}

void new_send_msg_req_msg_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* new_send_msg_req_msg_info::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const new_send_msg_req_msg_info& new_send_msg_req_msg_info::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

new_send_msg_req_msg_info* new_send_msg_req_msg_info::New(::google::protobuf::Arena* arena) const {
  new_send_msg_req_msg_info* n = new new_send_msg_req_msg_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void new_send_msg_req_msg_info::Clear() {
// @@protoc_insertion_point(message_clear_start:new_send_msg_req.msg_info)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_content()) {
      GOOGLE_DCHECK(!content_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*content_.UnsafeRawStringPointer())->clear();
    }
    if (has_at_list()) {
      GOOGLE_DCHECK(!at_list_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*at_list_.UnsafeRawStringPointer())->clear();
    }
    if (has_to()) {
      GOOGLE_DCHECK(to_ != NULL);
      to_->::Wxid::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 56u) {
    ::memset(&type_, 0, reinterpret_cast<char*>(&client_id_) -
      reinterpret_cast<char*>(&type_) + sizeof(client_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool new_send_msg_req_msg_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:new_send_msg_req.msg_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Wxid to = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_to()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes content = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 utc = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_utc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &utc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 client_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_client_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string at_list = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_at_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->at_list().data(), this->at_list().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "new_send_msg_req.msg_info.at_list");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:new_send_msg_req.msg_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:new_send_msg_req.msg_info)
  return false;
#undef DO_
}

void new_send_msg_req_msg_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:new_send_msg_req.msg_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Wxid to = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->to_, output);
  }

  // optional bytes content = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->content(), output);
  }

  // optional int32 type = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // optional int32 utc = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->utc(), output);
  }

  // optional int32 client_id = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->client_id(), output);
  }

  // optional string at_list = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->at_list().data(), this->at_list().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "new_send_msg_req.msg_info.at_list");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->at_list(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:new_send_msg_req.msg_info)
}

::google::protobuf::uint8* new_send_msg_req_msg_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:new_send_msg_req.msg_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Wxid to = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->to_, deterministic, target);
  }

  // optional bytes content = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->content(), target);
  }

  // optional int32 type = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // optional int32 utc = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->utc(), target);
  }

  // optional int32 client_id = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->client_id(), target);
  }

  // optional string at_list = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->at_list().data(), this->at_list().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "new_send_msg_req.msg_info.at_list");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->at_list(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:new_send_msg_req.msg_info)
  return target;
}

size_t new_send_msg_req_msg_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:new_send_msg_req.msg_info)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional bytes content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

    // optional string at_list = 6;
    if (has_at_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->at_list());
    }

    // optional .Wxid to = 1;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->to_);
    }

    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 utc = 4;
    if (has_utc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->utc());
    }

    // optional int32 client_id = 5;
    if (has_client_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void new_send_msg_req_msg_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:new_send_msg_req.msg_info)
  GOOGLE_DCHECK_NE(&from, this);
  const new_send_msg_req_msg_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const new_send_msg_req_msg_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:new_send_msg_req.msg_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:new_send_msg_req.msg_info)
    MergeFrom(*source);
  }
}

void new_send_msg_req_msg_info::MergeFrom(const new_send_msg_req_msg_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:new_send_msg_req.msg_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_content();
      content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_at_list();
      at_list_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.at_list_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_to()->::Wxid::MergeFrom(from.to());
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000010u) {
      utc_ = from.utc_;
    }
    if (cached_has_bits & 0x00000020u) {
      client_id_ = from.client_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void new_send_msg_req_msg_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:new_send_msg_req.msg_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void new_send_msg_req_msg_info::CopyFrom(const new_send_msg_req_msg_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:new_send_msg_req.msg_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool new_send_msg_req_msg_info::IsInitialized() const {
  return true;
}

void new_send_msg_req_msg_info::Swap(new_send_msg_req_msg_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void new_send_msg_req_msg_info::InternalSwap(new_send_msg_req_msg_info* other) {
  content_.Swap(&other->content_);
  at_list_.Swap(&other->at_list_);
  std::swap(to_, other->to_);
  std::swap(type_, other->type_);
  std::swap(utc_, other->utc_);
  std::swap(client_id_, other->client_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata new_send_msg_req_msg_info::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// new_send_msg_req_msg_info

// optional .Wxid to = 1;
bool new_send_msg_req_msg_info::has_to() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void new_send_msg_req_msg_info::set_has_to() {
  _has_bits_[0] |= 0x00000004u;
}
void new_send_msg_req_msg_info::clear_has_to() {
  _has_bits_[0] &= ~0x00000004u;
}
void new_send_msg_req_msg_info::clear_to() {
  if (to_ != NULL) to_->::Wxid::Clear();
  clear_has_to();
}
const ::Wxid& new_send_msg_req_msg_info::to() const {
  // @@protoc_insertion_point(field_get:new_send_msg_req.msg_info.to)
  return to_ != NULL ? *to_
                         : *::Wxid::internal_default_instance();
}
::Wxid* new_send_msg_req_msg_info::mutable_to() {
  set_has_to();
  if (to_ == NULL) {
    to_ = new ::Wxid;
  }
  // @@protoc_insertion_point(field_mutable:new_send_msg_req.msg_info.to)
  return to_;
}
::Wxid* new_send_msg_req_msg_info::release_to() {
  // @@protoc_insertion_point(field_release:new_send_msg_req.msg_info.to)
  clear_has_to();
  ::Wxid* temp = to_;
  to_ = NULL;
  return temp;
}
void new_send_msg_req_msg_info::set_allocated_to(::Wxid* to) {
  delete to_;
  to_ = to;
  if (to) {
    set_has_to();
  } else {
    clear_has_to();
  }
  // @@protoc_insertion_point(field_set_allocated:new_send_msg_req.msg_info.to)
}

// optional bytes content = 2;
bool new_send_msg_req_msg_info::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void new_send_msg_req_msg_info::set_has_content() {
  _has_bits_[0] |= 0x00000001u;
}
void new_send_msg_req_msg_info::clear_has_content() {
  _has_bits_[0] &= ~0x00000001u;
}
void new_send_msg_req_msg_info::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
const ::std::string& new_send_msg_req_msg_info::content() const {
  // @@protoc_insertion_point(field_get:new_send_msg_req.msg_info.content)
  return content_.GetNoArena();
}
void new_send_msg_req_msg_info::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:new_send_msg_req.msg_info.content)
}
#if LANG_CXX11
void new_send_msg_req_msg_info::set_content(::std::string&& value) {
  set_has_content();
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:new_send_msg_req.msg_info.content)
}
#endif
void new_send_msg_req_msg_info::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:new_send_msg_req.msg_info.content)
}
void new_send_msg_req_msg_info::set_content(const void* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:new_send_msg_req.msg_info.content)
}
::std::string* new_send_msg_req_msg_info::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:new_send_msg_req.msg_info.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* new_send_msg_req_msg_info::release_content() {
  // @@protoc_insertion_point(field_release:new_send_msg_req.msg_info.content)
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void new_send_msg_req_msg_info::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:new_send_msg_req.msg_info.content)
}

// optional int32 type = 3;
bool new_send_msg_req_msg_info::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void new_send_msg_req_msg_info::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
void new_send_msg_req_msg_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void new_send_msg_req_msg_info::clear_type() {
  type_ = 0;
  clear_has_type();
}
::google::protobuf::int32 new_send_msg_req_msg_info::type() const {
  // @@protoc_insertion_point(field_get:new_send_msg_req.msg_info.type)
  return type_;
}
void new_send_msg_req_msg_info::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:new_send_msg_req.msg_info.type)
}

// optional int32 utc = 4;
bool new_send_msg_req_msg_info::has_utc() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void new_send_msg_req_msg_info::set_has_utc() {
  _has_bits_[0] |= 0x00000010u;
}
void new_send_msg_req_msg_info::clear_has_utc() {
  _has_bits_[0] &= ~0x00000010u;
}
void new_send_msg_req_msg_info::clear_utc() {
  utc_ = 0;
  clear_has_utc();
}
::google::protobuf::int32 new_send_msg_req_msg_info::utc() const {
  // @@protoc_insertion_point(field_get:new_send_msg_req.msg_info.utc)
  return utc_;
}
void new_send_msg_req_msg_info::set_utc(::google::protobuf::int32 value) {
  set_has_utc();
  utc_ = value;
  // @@protoc_insertion_point(field_set:new_send_msg_req.msg_info.utc)
}

// optional int32 client_id = 5;
bool new_send_msg_req_msg_info::has_client_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void new_send_msg_req_msg_info::set_has_client_id() {
  _has_bits_[0] |= 0x00000020u;
}
void new_send_msg_req_msg_info::clear_has_client_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void new_send_msg_req_msg_info::clear_client_id() {
  client_id_ = 0;
  clear_has_client_id();
}
::google::protobuf::int32 new_send_msg_req_msg_info::client_id() const {
  // @@protoc_insertion_point(field_get:new_send_msg_req.msg_info.client_id)
  return client_id_;
}
void new_send_msg_req_msg_info::set_client_id(::google::protobuf::int32 value) {
  set_has_client_id();
  client_id_ = value;
  // @@protoc_insertion_point(field_set:new_send_msg_req.msg_info.client_id)
}

// optional string at_list = 6;
bool new_send_msg_req_msg_info::has_at_list() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void new_send_msg_req_msg_info::set_has_at_list() {
  _has_bits_[0] |= 0x00000002u;
}
void new_send_msg_req_msg_info::clear_has_at_list() {
  _has_bits_[0] &= ~0x00000002u;
}
void new_send_msg_req_msg_info::clear_at_list() {
  at_list_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_at_list();
}
const ::std::string& new_send_msg_req_msg_info::at_list() const {
  // @@protoc_insertion_point(field_get:new_send_msg_req.msg_info.at_list)
  return at_list_.GetNoArena();
}
void new_send_msg_req_msg_info::set_at_list(const ::std::string& value) {
  set_has_at_list();
  at_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:new_send_msg_req.msg_info.at_list)
}
#if LANG_CXX11
void new_send_msg_req_msg_info::set_at_list(::std::string&& value) {
  set_has_at_list();
  at_list_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:new_send_msg_req.msg_info.at_list)
}
#endif
void new_send_msg_req_msg_info::set_at_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_at_list();
  at_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:new_send_msg_req.msg_info.at_list)
}
void new_send_msg_req_msg_info::set_at_list(const char* value, size_t size) {
  set_has_at_list();
  at_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:new_send_msg_req.msg_info.at_list)
}
::std::string* new_send_msg_req_msg_info::mutable_at_list() {
  set_has_at_list();
  // @@protoc_insertion_point(field_mutable:new_send_msg_req.msg_info.at_list)
  return at_list_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* new_send_msg_req_msg_info::release_at_list() {
  // @@protoc_insertion_point(field_release:new_send_msg_req.msg_info.at_list)
  clear_has_at_list();
  return at_list_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void new_send_msg_req_msg_info::set_allocated_at_list(::std::string* at_list) {
  if (at_list != NULL) {
    set_has_at_list();
  } else {
    clear_has_at_list();
  }
  at_list_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), at_list);
  // @@protoc_insertion_point(field_set_allocated:new_send_msg_req.msg_info.at_list)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int new_send_msg_req::kCntFieldNumber;
const int new_send_msg_req::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

new_send_msg_req::new_send_msg_req()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:new_send_msg_req)
}
new_send_msg_req::new_send_msg_req(const new_send_msg_req& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_msg()) {
    msg_ = new ::new_send_msg_req_msg_info(*from.msg_);
  } else {
    msg_ = NULL;
  }
  cnt_ = from.cnt_;
  // @@protoc_insertion_point(copy_constructor:new_send_msg_req)
}

void new_send_msg_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&msg_, 0, reinterpret_cast<char*>(&cnt_) -
    reinterpret_cast<char*>(&msg_) + sizeof(cnt_));
}

new_send_msg_req::~new_send_msg_req() {
  // @@protoc_insertion_point(destructor:new_send_msg_req)
  SharedDtor();
}

void new_send_msg_req::SharedDtor() {
  if (this != internal_default_instance()) {
    delete msg_;
  }
}

void new_send_msg_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* new_send_msg_req::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const new_send_msg_req& new_send_msg_req::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

new_send_msg_req* new_send_msg_req::New(::google::protobuf::Arena* arena) const {
  new_send_msg_req* n = new new_send_msg_req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void new_send_msg_req::Clear() {
// @@protoc_insertion_point(message_clear_start:new_send_msg_req)
  if (has_msg()) {
    GOOGLE_DCHECK(msg_ != NULL);
    msg_->::new_send_msg_req_msg_info::Clear();
  }
  cnt_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool new_send_msg_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:new_send_msg_req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cnt = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_cnt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .new_send_msg_req.msg_info msg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:new_send_msg_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:new_send_msg_req)
  return false;
#undef DO_
}

void new_send_msg_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:new_send_msg_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cnt = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cnt(), output);
  }

  // optional .new_send_msg_req.msg_info msg = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->msg_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:new_send_msg_req)
}

::google::protobuf::uint8* new_send_msg_req::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:new_send_msg_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cnt = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cnt(), target);
  }

  // optional .new_send_msg_req.msg_info msg = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->msg_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:new_send_msg_req)
  return target;
}

size_t new_send_msg_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:new_send_msg_req)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .new_send_msg_req.msg_info msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->msg_);
    }

    // optional int32 cnt = 1;
    if (has_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cnt());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void new_send_msg_req::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:new_send_msg_req)
  GOOGLE_DCHECK_NE(&from, this);
  const new_send_msg_req* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const new_send_msg_req>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:new_send_msg_req)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:new_send_msg_req)
    MergeFrom(*source);
  }
}

void new_send_msg_req::MergeFrom(const new_send_msg_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:new_send_msg_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_msg()->::new_send_msg_req_msg_info::MergeFrom(from.msg());
    }
    if (cached_has_bits & 0x00000002u) {
      cnt_ = from.cnt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void new_send_msg_req::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:new_send_msg_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void new_send_msg_req::CopyFrom(const new_send_msg_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:new_send_msg_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool new_send_msg_req::IsInitialized() const {
  return true;
}

void new_send_msg_req::Swap(new_send_msg_req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void new_send_msg_req::InternalSwap(new_send_msg_req* other) {
  std::swap(msg_, other->msg_);
  std::swap(cnt_, other->cnt_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata new_send_msg_req::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// new_send_msg_req

// optional int32 cnt = 1;
bool new_send_msg_req::has_cnt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void new_send_msg_req::set_has_cnt() {
  _has_bits_[0] |= 0x00000002u;
}
void new_send_msg_req::clear_has_cnt() {
  _has_bits_[0] &= ~0x00000002u;
}
void new_send_msg_req::clear_cnt() {
  cnt_ = 0;
  clear_has_cnt();
}
::google::protobuf::int32 new_send_msg_req::cnt() const {
  // @@protoc_insertion_point(field_get:new_send_msg_req.cnt)
  return cnt_;
}
void new_send_msg_req::set_cnt(::google::protobuf::int32 value) {
  set_has_cnt();
  cnt_ = value;
  // @@protoc_insertion_point(field_set:new_send_msg_req.cnt)
}

// optional .new_send_msg_req.msg_info msg = 2;
bool new_send_msg_req::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void new_send_msg_req::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
void new_send_msg_req::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
void new_send_msg_req::clear_msg() {
  if (msg_ != NULL) msg_->::new_send_msg_req_msg_info::Clear();
  clear_has_msg();
}
const ::new_send_msg_req_msg_info& new_send_msg_req::msg() const {
  // @@protoc_insertion_point(field_get:new_send_msg_req.msg)
  return msg_ != NULL ? *msg_
                         : *::new_send_msg_req_msg_info::internal_default_instance();
}
::new_send_msg_req_msg_info* new_send_msg_req::mutable_msg() {
  set_has_msg();
  if (msg_ == NULL) {
    msg_ = new ::new_send_msg_req_msg_info;
  }
  // @@protoc_insertion_point(field_mutable:new_send_msg_req.msg)
  return msg_;
}
::new_send_msg_req_msg_info* new_send_msg_req::release_msg() {
  // @@protoc_insertion_point(field_release:new_send_msg_req.msg)
  clear_has_msg();
  ::new_send_msg_req_msg_info* temp = msg_;
  msg_ = NULL;
  return temp;
}
void new_send_msg_req::set_allocated_msg(::new_send_msg_req_msg_info* msg) {
  delete msg_;
  msg_ = msg;
  if (msg) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  // @@protoc_insertion_point(field_set_allocated:new_send_msg_req.msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int new_send_msg_resp_result::kCodeFieldNumber;
const int new_send_msg_resp_result::kToFieldNumber;
const int new_send_msg_resp_result::kTypeFieldNumber;
const int new_send_msg_resp_result::kSvridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

new_send_msg_resp_result::new_send_msg_resp_result()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:new_send_msg_resp.result)
}
new_send_msg_resp_result::new_send_msg_resp_result(const new_send_msg_resp_result& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_to()) {
    to_ = new ::Wxid(*from.to_);
  } else {
    to_ = NULL;
  }
  ::memcpy(&code_, &from.code_,
    reinterpret_cast<char*>(&svrid_) -
    reinterpret_cast<char*>(&code_) + sizeof(svrid_));
  // @@protoc_insertion_point(copy_constructor:new_send_msg_resp.result)
}

void new_send_msg_resp_result::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&to_, 0, reinterpret_cast<char*>(&svrid_) -
    reinterpret_cast<char*>(&to_) + sizeof(svrid_));
}

new_send_msg_resp_result::~new_send_msg_resp_result() {
  // @@protoc_insertion_point(destructor:new_send_msg_resp.result)
  SharedDtor();
}

void new_send_msg_resp_result::SharedDtor() {
  if (this != internal_default_instance()) {
    delete to_;
  }
}

void new_send_msg_resp_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* new_send_msg_resp_result::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const new_send_msg_resp_result& new_send_msg_resp_result::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

new_send_msg_resp_result* new_send_msg_resp_result::New(::google::protobuf::Arena* arena) const {
  new_send_msg_resp_result* n = new new_send_msg_resp_result;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void new_send_msg_resp_result::Clear() {
// @@protoc_insertion_point(message_clear_start:new_send_msg_resp.result)
  if (has_to()) {
    GOOGLE_DCHECK(to_ != NULL);
    to_->::Wxid::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&code_, 0, reinterpret_cast<char*>(&svrid_) -
      reinterpret_cast<char*>(&code_) + sizeof(svrid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool new_send_msg_resp_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:new_send_msg_resp.result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Wxid to = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_to()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 svrid = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_svrid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &svrid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:new_send_msg_resp.result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:new_send_msg_resp.result)
  return false;
#undef DO_
}

void new_send_msg_resp_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:new_send_msg_resp.result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 code = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // optional .Wxid to = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->to_, output);
  }

  // optional int32 type = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->type(), output);
  }

  // optional int64 svrid = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->svrid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:new_send_msg_resp.result)
}

::google::protobuf::uint8* new_send_msg_resp_result::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:new_send_msg_resp.result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // optional .Wxid to = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->to_, deterministic, target);
  }

  // optional int32 type = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->type(), target);
  }

  // optional int64 svrid = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->svrid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:new_send_msg_resp.result)
  return target;
}

size_t new_send_msg_resp_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:new_send_msg_resp.result)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .Wxid to = 2;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->to_);
    }

    // optional int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // optional int32 type = 7;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int64 svrid = 8;
    if (has_svrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->svrid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void new_send_msg_resp_result::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:new_send_msg_resp.result)
  GOOGLE_DCHECK_NE(&from, this);
  const new_send_msg_resp_result* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const new_send_msg_resp_result>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:new_send_msg_resp.result)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:new_send_msg_resp.result)
    MergeFrom(*source);
  }
}

void new_send_msg_resp_result::MergeFrom(const new_send_msg_resp_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:new_send_msg_resp.result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_to()->::Wxid::MergeFrom(from.to());
    }
    if (cached_has_bits & 0x00000002u) {
      code_ = from.code_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      svrid_ = from.svrid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void new_send_msg_resp_result::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:new_send_msg_resp.result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void new_send_msg_resp_result::CopyFrom(const new_send_msg_resp_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:new_send_msg_resp.result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool new_send_msg_resp_result::IsInitialized() const {
  return true;
}

void new_send_msg_resp_result::Swap(new_send_msg_resp_result* other) {
  if (other == this) return;
  InternalSwap(other);
}
void new_send_msg_resp_result::InternalSwap(new_send_msg_resp_result* other) {
  std::swap(to_, other->to_);
  std::swap(code_, other->code_);
  std::swap(type_, other->type_);
  std::swap(svrid_, other->svrid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata new_send_msg_resp_result::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// new_send_msg_resp_result

// optional int32 code = 1;
bool new_send_msg_resp_result::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void new_send_msg_resp_result::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
void new_send_msg_resp_result::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void new_send_msg_resp_result::clear_code() {
  code_ = 0;
  clear_has_code();
}
::google::protobuf::int32 new_send_msg_resp_result::code() const {
  // @@protoc_insertion_point(field_get:new_send_msg_resp.result.code)
  return code_;
}
void new_send_msg_resp_result::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:new_send_msg_resp.result.code)
}

// optional .Wxid to = 2;
bool new_send_msg_resp_result::has_to() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void new_send_msg_resp_result::set_has_to() {
  _has_bits_[0] |= 0x00000001u;
}
void new_send_msg_resp_result::clear_has_to() {
  _has_bits_[0] &= ~0x00000001u;
}
void new_send_msg_resp_result::clear_to() {
  if (to_ != NULL) to_->::Wxid::Clear();
  clear_has_to();
}
const ::Wxid& new_send_msg_resp_result::to() const {
  // @@protoc_insertion_point(field_get:new_send_msg_resp.result.to)
  return to_ != NULL ? *to_
                         : *::Wxid::internal_default_instance();
}
::Wxid* new_send_msg_resp_result::mutable_to() {
  set_has_to();
  if (to_ == NULL) {
    to_ = new ::Wxid;
  }
  // @@protoc_insertion_point(field_mutable:new_send_msg_resp.result.to)
  return to_;
}
::Wxid* new_send_msg_resp_result::release_to() {
  // @@protoc_insertion_point(field_release:new_send_msg_resp.result.to)
  clear_has_to();
  ::Wxid* temp = to_;
  to_ = NULL;
  return temp;
}
void new_send_msg_resp_result::set_allocated_to(::Wxid* to) {
  delete to_;
  to_ = to;
  if (to) {
    set_has_to();
  } else {
    clear_has_to();
  }
  // @@protoc_insertion_point(field_set_allocated:new_send_msg_resp.result.to)
}

// optional int32 type = 7;
bool new_send_msg_resp_result::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void new_send_msg_resp_result::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void new_send_msg_resp_result::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void new_send_msg_resp_result::clear_type() {
  type_ = 0;
  clear_has_type();
}
::google::protobuf::int32 new_send_msg_resp_result::type() const {
  // @@protoc_insertion_point(field_get:new_send_msg_resp.result.type)
  return type_;
}
void new_send_msg_resp_result::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:new_send_msg_resp.result.type)
}

// optional int64 svrid = 8;
bool new_send_msg_resp_result::has_svrid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void new_send_msg_resp_result::set_has_svrid() {
  _has_bits_[0] |= 0x00000008u;
}
void new_send_msg_resp_result::clear_has_svrid() {
  _has_bits_[0] &= ~0x00000008u;
}
void new_send_msg_resp_result::clear_svrid() {
  svrid_ = GOOGLE_LONGLONG(0);
  clear_has_svrid();
}
::google::protobuf::int64 new_send_msg_resp_result::svrid() const {
  // @@protoc_insertion_point(field_get:new_send_msg_resp.result.svrid)
  return svrid_;
}
void new_send_msg_resp_result::set_svrid(::google::protobuf::int64 value) {
  set_has_svrid();
  svrid_ = value;
  // @@protoc_insertion_point(field_set:new_send_msg_resp.result.svrid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int new_send_msg_resp::kTag1FieldNumber;
const int new_send_msg_resp::kCntFieldNumber;
const int new_send_msg_resp::kResFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

new_send_msg_resp::new_send_msg_resp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:new_send_msg_resp)
}
new_send_msg_resp::new_send_msg_resp(const new_send_msg_resp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tag1()) {
    tag1_ = new ::mmStr(*from.tag1_);
  } else {
    tag1_ = NULL;
  }
  if (from.has_res()) {
    res_ = new ::new_send_msg_resp_result(*from.res_);
  } else {
    res_ = NULL;
  }
  cnt_ = from.cnt_;
  // @@protoc_insertion_point(copy_constructor:new_send_msg_resp)
}

void new_send_msg_resp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&tag1_, 0, reinterpret_cast<char*>(&cnt_) -
    reinterpret_cast<char*>(&tag1_) + sizeof(cnt_));
}

new_send_msg_resp::~new_send_msg_resp() {
  // @@protoc_insertion_point(destructor:new_send_msg_resp)
  SharedDtor();
}

void new_send_msg_resp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete tag1_;
  }
  if (this != internal_default_instance()) {
    delete res_;
  }
}

void new_send_msg_resp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* new_send_msg_resp::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const new_send_msg_resp& new_send_msg_resp::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

new_send_msg_resp* new_send_msg_resp::New(::google::protobuf::Arena* arena) const {
  new_send_msg_resp* n = new new_send_msg_resp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void new_send_msg_resp::Clear() {
// @@protoc_insertion_point(message_clear_start:new_send_msg_resp)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_tag1()) {
      GOOGLE_DCHECK(tag1_ != NULL);
      tag1_->::mmStr::Clear();
    }
    if (has_res()) {
      GOOGLE_DCHECK(res_ != NULL);
      res_->::new_send_msg_resp_result::Clear();
    }
  }
  cnt_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool new_send_msg_resp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:new_send_msg_resp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mmStr tag1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tag1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cnt = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_cnt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .new_send_msg_resp.result res = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_res()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:new_send_msg_resp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:new_send_msg_resp)
  return false;
#undef DO_
}

void new_send_msg_resp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:new_send_msg_resp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mmStr tag1 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->tag1_, output);
  }

  // optional int32 cnt = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cnt(), output);
  }

  // optional .new_send_msg_resp.result res = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->res_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:new_send_msg_resp)
}

::google::protobuf::uint8* new_send_msg_resp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:new_send_msg_resp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mmStr tag1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->tag1_, deterministic, target);
  }

  // optional int32 cnt = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cnt(), target);
  }

  // optional .new_send_msg_resp.result res = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->res_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:new_send_msg_resp)
  return target;
}

size_t new_send_msg_resp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:new_send_msg_resp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .mmStr tag1 = 1;
    if (has_tag1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->tag1_);
    }

    // optional .new_send_msg_resp.result res = 3;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->res_);
    }

    // optional int32 cnt = 2;
    if (has_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cnt());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void new_send_msg_resp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:new_send_msg_resp)
  GOOGLE_DCHECK_NE(&from, this);
  const new_send_msg_resp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const new_send_msg_resp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:new_send_msg_resp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:new_send_msg_resp)
    MergeFrom(*source);
  }
}

void new_send_msg_resp::MergeFrom(const new_send_msg_resp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:new_send_msg_resp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_tag1()->::mmStr::MergeFrom(from.tag1());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_res()->::new_send_msg_resp_result::MergeFrom(from.res());
    }
    if (cached_has_bits & 0x00000004u) {
      cnt_ = from.cnt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void new_send_msg_resp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:new_send_msg_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void new_send_msg_resp::CopyFrom(const new_send_msg_resp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:new_send_msg_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool new_send_msg_resp::IsInitialized() const {
  return true;
}

void new_send_msg_resp::Swap(new_send_msg_resp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void new_send_msg_resp::InternalSwap(new_send_msg_resp* other) {
  std::swap(tag1_, other->tag1_);
  std::swap(res_, other->res_);
  std::swap(cnt_, other->cnt_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata new_send_msg_resp::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// new_send_msg_resp

// optional .mmStr tag1 = 1;
bool new_send_msg_resp::has_tag1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void new_send_msg_resp::set_has_tag1() {
  _has_bits_[0] |= 0x00000001u;
}
void new_send_msg_resp::clear_has_tag1() {
  _has_bits_[0] &= ~0x00000001u;
}
void new_send_msg_resp::clear_tag1() {
  if (tag1_ != NULL) tag1_->::mmStr::Clear();
  clear_has_tag1();
}
const ::mmStr& new_send_msg_resp::tag1() const {
  // @@protoc_insertion_point(field_get:new_send_msg_resp.tag1)
  return tag1_ != NULL ? *tag1_
                         : *::mmStr::internal_default_instance();
}
::mmStr* new_send_msg_resp::mutable_tag1() {
  set_has_tag1();
  if (tag1_ == NULL) {
    tag1_ = new ::mmStr;
  }
  // @@protoc_insertion_point(field_mutable:new_send_msg_resp.tag1)
  return tag1_;
}
::mmStr* new_send_msg_resp::release_tag1() {
  // @@protoc_insertion_point(field_release:new_send_msg_resp.tag1)
  clear_has_tag1();
  ::mmStr* temp = tag1_;
  tag1_ = NULL;
  return temp;
}
void new_send_msg_resp::set_allocated_tag1(::mmStr* tag1) {
  delete tag1_;
  tag1_ = tag1;
  if (tag1) {
    set_has_tag1();
  } else {
    clear_has_tag1();
  }
  // @@protoc_insertion_point(field_set_allocated:new_send_msg_resp.tag1)
}

// optional int32 cnt = 2;
bool new_send_msg_resp::has_cnt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void new_send_msg_resp::set_has_cnt() {
  _has_bits_[0] |= 0x00000004u;
}
void new_send_msg_resp::clear_has_cnt() {
  _has_bits_[0] &= ~0x00000004u;
}
void new_send_msg_resp::clear_cnt() {
  cnt_ = 0;
  clear_has_cnt();
}
::google::protobuf::int32 new_send_msg_resp::cnt() const {
  // @@protoc_insertion_point(field_get:new_send_msg_resp.cnt)
  return cnt_;
}
void new_send_msg_resp::set_cnt(::google::protobuf::int32 value) {
  set_has_cnt();
  cnt_ = value;
  // @@protoc_insertion_point(field_set:new_send_msg_resp.cnt)
}

// optional .new_send_msg_resp.result res = 3;
bool new_send_msg_resp::has_res() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void new_send_msg_resp::set_has_res() {
  _has_bits_[0] |= 0x00000002u;
}
void new_send_msg_resp::clear_has_res() {
  _has_bits_[0] &= ~0x00000002u;
}
void new_send_msg_resp::clear_res() {
  if (res_ != NULL) res_->::new_send_msg_resp_result::Clear();
  clear_has_res();
}
const ::new_send_msg_resp_result& new_send_msg_resp::res() const {
  // @@protoc_insertion_point(field_get:new_send_msg_resp.res)
  return res_ != NULL ? *res_
                         : *::new_send_msg_resp_result::internal_default_instance();
}
::new_send_msg_resp_result* new_send_msg_resp::mutable_res() {
  set_has_res();
  if (res_ == NULL) {
    res_ = new ::new_send_msg_resp_result;
  }
  // @@protoc_insertion_point(field_mutable:new_send_msg_resp.res)
  return res_;
}
::new_send_msg_resp_result* new_send_msg_resp::release_res() {
  // @@protoc_insertion_point(field_release:new_send_msg_resp.res)
  clear_has_res();
  ::new_send_msg_resp_result* temp = res_;
  res_ = NULL;
  return temp;
}
void new_send_msg_resp::set_allocated_res(::new_send_msg_resp_result* res) {
  delete res_;
  res_ = res;
  if (res) {
    set_has_res();
  } else {
    clear_has_res();
  }
  // @@protoc_insertion_point(field_set_allocated:new_send_msg_resp.res)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int new_send_app_msg_req_appmsg_info::kFromWxidFieldNumber;
const int new_send_app_msg_req_appmsg_info::kAppWxidFieldNumber;
const int new_send_app_msg_req_appmsg_info::kTag3FieldNumber;
const int new_send_app_msg_req_appmsg_info::kToWxidFieldNumber;
const int new_send_app_msg_req_appmsg_info::kTypeFieldNumber;
const int new_send_app_msg_req_appmsg_info::kContentFieldNumber;
const int new_send_app_msg_req_appmsg_info::kUtcFieldNumber;
const int new_send_app_msg_req_appmsg_info::kClientIdFieldNumber;
const int new_send_app_msg_req_appmsg_info::kTag10FieldNumber;
const int new_send_app_msg_req_appmsg_info::kTag11FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

new_send_app_msg_req_appmsg_info::new_send_app_msg_req_appmsg_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:new_send_app_msg_req.appmsg_info)
}
new_send_app_msg_req_appmsg_info::new_send_app_msg_req_appmsg_info(const new_send_app_msg_req_appmsg_info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  from_wxid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_from_wxid()) {
    from_wxid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_wxid_);
  }
  app_wxid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_app_wxid()) {
    app_wxid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_wxid_);
  }
  to_wxid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_to_wxid()) {
    to_wxid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_wxid_);
  }
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_content()) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_client_id()) {
    client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  ::memcpy(&tag3_, &from.tag3_,
    reinterpret_cast<char*>(&tag11_) -
    reinterpret_cast<char*>(&tag3_) + sizeof(tag11_));
  // @@protoc_insertion_point(copy_constructor:new_send_app_msg_req.appmsg_info)
}

void new_send_app_msg_req_appmsg_info::SharedCtor() {
  _cached_size_ = 0;
  from_wxid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_wxid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_wxid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tag3_, 0, reinterpret_cast<char*>(&tag11_) -
    reinterpret_cast<char*>(&tag3_) + sizeof(tag11_));
}

new_send_app_msg_req_appmsg_info::~new_send_app_msg_req_appmsg_info() {
  // @@protoc_insertion_point(destructor:new_send_app_msg_req.appmsg_info)
  SharedDtor();
}

void new_send_app_msg_req_appmsg_info::SharedDtor() {
  from_wxid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_wxid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_wxid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void new_send_app_msg_req_appmsg_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* new_send_app_msg_req_appmsg_info::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const new_send_app_msg_req_appmsg_info& new_send_app_msg_req_appmsg_info::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

new_send_app_msg_req_appmsg_info* new_send_app_msg_req_appmsg_info::New(::google::protobuf::Arena* arena) const {
  new_send_app_msg_req_appmsg_info* n = new new_send_app_msg_req_appmsg_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void new_send_app_msg_req_appmsg_info::Clear() {
// @@protoc_insertion_point(message_clear_start:new_send_app_msg_req.appmsg_info)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_from_wxid()) {
      GOOGLE_DCHECK(!from_wxid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*from_wxid_.UnsafeRawStringPointer())->clear();
    }
    if (has_app_wxid()) {
      GOOGLE_DCHECK(!app_wxid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*app_wxid_.UnsafeRawStringPointer())->clear();
    }
    if (has_to_wxid()) {
      GOOGLE_DCHECK(!to_wxid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*to_wxid_.UnsafeRawStringPointer())->clear();
    }
    if (has_content()) {
      GOOGLE_DCHECK(!content_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*content_.UnsafeRawStringPointer())->clear();
    }
    if (has_client_id()) {
      GOOGLE_DCHECK(!client_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*client_id_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 224u) {
    ::memset(&tag3_, 0, reinterpret_cast<char*>(&utc_) -
      reinterpret_cast<char*>(&tag3_) + sizeof(utc_));
  }
  if (_has_bits_[8 / 32] & 768u) {
    ::memset(&tag10_, 0, reinterpret_cast<char*>(&tag11_) -
      reinterpret_cast<char*>(&tag10_) + sizeof(tag11_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool new_send_app_msg_req_appmsg_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:new_send_app_msg_req.appmsg_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string from_wxid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_wxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->from_wxid().data(), this->from_wxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "new_send_app_msg_req.appmsg_info.from_wxid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string app_wxid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_wxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->app_wxid().data(), this->app_wxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "new_send_app_msg_req.appmsg_info.app_wxid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tag3 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_tag3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string to_wxid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_wxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->to_wxid().data(), this->to_wxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "new_send_app_msg_req.appmsg_info.to_wxid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string content = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "new_send_app_msg_req.appmsg_info.content");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 utc = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_utc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &utc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string client_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->client_id().data(), this->client_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "new_send_app_msg_req.appmsg_info.client_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tag10 = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_tag10();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag10_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tag11 = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_tag11();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag11_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:new_send_app_msg_req.appmsg_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:new_send_app_msg_req.appmsg_info)
  return false;
#undef DO_
}

void new_send_app_msg_req_appmsg_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:new_send_app_msg_req.appmsg_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string from_wxid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from_wxid().data(), this->from_wxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "new_send_app_msg_req.appmsg_info.from_wxid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->from_wxid(), output);
  }

  // optional string app_wxid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_wxid().data(), this->app_wxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "new_send_app_msg_req.appmsg_info.app_wxid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->app_wxid(), output);
  }

  // optional int32 tag3 = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tag3(), output);
  }

  // optional string to_wxid = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to_wxid().data(), this->to_wxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "new_send_app_msg_req.appmsg_info.to_wxid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->to_wxid(), output);
  }

  // optional int32 type = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->type(), output);
  }

  // optional string content = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "new_send_app_msg_req.appmsg_info.content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->content(), output);
  }

  // optional int32 utc = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->utc(), output);
  }

  // optional string client_id = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_id().data(), this->client_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "new_send_app_msg_req.appmsg_info.client_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->client_id(), output);
  }

  // optional int32 tag10 = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->tag10(), output);
  }

  // optional int32 tag11 = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->tag11(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:new_send_app_msg_req.appmsg_info)
}

::google::protobuf::uint8* new_send_app_msg_req_appmsg_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:new_send_app_msg_req.appmsg_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string from_wxid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from_wxid().data(), this->from_wxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "new_send_app_msg_req.appmsg_info.from_wxid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->from_wxid(), target);
  }

  // optional string app_wxid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_wxid().data(), this->app_wxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "new_send_app_msg_req.appmsg_info.app_wxid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->app_wxid(), target);
  }

  // optional int32 tag3 = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tag3(), target);
  }

  // optional string to_wxid = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to_wxid().data(), this->to_wxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "new_send_app_msg_req.appmsg_info.to_wxid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->to_wxid(), target);
  }

  // optional int32 type = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->type(), target);
  }

  // optional string content = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "new_send_app_msg_req.appmsg_info.content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->content(), target);
  }

  // optional int32 utc = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->utc(), target);
  }

  // optional string client_id = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_id().data(), this->client_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "new_send_app_msg_req.appmsg_info.client_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->client_id(), target);
  }

  // optional int32 tag10 = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->tag10(), target);
  }

  // optional int32 tag11 = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->tag11(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:new_send_app_msg_req.appmsg_info)
  return target;
}

size_t new_send_app_msg_req_appmsg_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:new_send_app_msg_req.appmsg_info)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string from_wxid = 1;
    if (has_from_wxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_wxid());
    }

    // optional string app_wxid = 2;
    if (has_app_wxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_wxid());
    }

    // optional string to_wxid = 4;
    if (has_to_wxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to_wxid());
    }

    // optional string content = 6;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional string client_id = 8;
    if (has_client_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_id());
    }

    // optional int32 tag3 = 3;
    if (has_tag3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag3());
    }

    // optional int32 type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 utc = 7;
    if (has_utc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->utc());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional int32 tag10 = 10;
    if (has_tag10()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag10());
    }

    // optional int32 tag11 = 11;
    if (has_tag11()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag11());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void new_send_app_msg_req_appmsg_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:new_send_app_msg_req.appmsg_info)
  GOOGLE_DCHECK_NE(&from, this);
  const new_send_app_msg_req_appmsg_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const new_send_app_msg_req_appmsg_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:new_send_app_msg_req.appmsg_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:new_send_app_msg_req.appmsg_info)
    MergeFrom(*source);
  }
}

void new_send_app_msg_req_appmsg_info::MergeFrom(const new_send_app_msg_req_appmsg_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:new_send_app_msg_req.appmsg_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_from_wxid();
      from_wxid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_wxid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_app_wxid();
      app_wxid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_wxid_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_to_wxid();
      to_wxid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_wxid_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_content();
      content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_client_id();
      client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id_);
    }
    if (cached_has_bits & 0x00000020u) {
      tag3_ = from.tag3_;
    }
    if (cached_has_bits & 0x00000040u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000080u) {
      utc_ = from.utc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      tag10_ = from.tag10_;
    }
    if (cached_has_bits & 0x00000200u) {
      tag11_ = from.tag11_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void new_send_app_msg_req_appmsg_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:new_send_app_msg_req.appmsg_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void new_send_app_msg_req_appmsg_info::CopyFrom(const new_send_app_msg_req_appmsg_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:new_send_app_msg_req.appmsg_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool new_send_app_msg_req_appmsg_info::IsInitialized() const {
  return true;
}

void new_send_app_msg_req_appmsg_info::Swap(new_send_app_msg_req_appmsg_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void new_send_app_msg_req_appmsg_info::InternalSwap(new_send_app_msg_req_appmsg_info* other) {
  from_wxid_.Swap(&other->from_wxid_);
  app_wxid_.Swap(&other->app_wxid_);
  to_wxid_.Swap(&other->to_wxid_);
  content_.Swap(&other->content_);
  client_id_.Swap(&other->client_id_);
  std::swap(tag3_, other->tag3_);
  std::swap(type_, other->type_);
  std::swap(utc_, other->utc_);
  std::swap(tag10_, other->tag10_);
  std::swap(tag11_, other->tag11_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata new_send_app_msg_req_appmsg_info::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// new_send_app_msg_req_appmsg_info

// optional string from_wxid = 1;
bool new_send_app_msg_req_appmsg_info::has_from_wxid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void new_send_app_msg_req_appmsg_info::set_has_from_wxid() {
  _has_bits_[0] |= 0x00000001u;
}
void new_send_app_msg_req_appmsg_info::clear_has_from_wxid() {
  _has_bits_[0] &= ~0x00000001u;
}
void new_send_app_msg_req_appmsg_info::clear_from_wxid() {
  from_wxid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_from_wxid();
}
const ::std::string& new_send_app_msg_req_appmsg_info::from_wxid() const {
  // @@protoc_insertion_point(field_get:new_send_app_msg_req.appmsg_info.from_wxid)
  return from_wxid_.GetNoArena();
}
void new_send_app_msg_req_appmsg_info::set_from_wxid(const ::std::string& value) {
  set_has_from_wxid();
  from_wxid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:new_send_app_msg_req.appmsg_info.from_wxid)
}
#if LANG_CXX11
void new_send_app_msg_req_appmsg_info::set_from_wxid(::std::string&& value) {
  set_has_from_wxid();
  from_wxid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:new_send_app_msg_req.appmsg_info.from_wxid)
}
#endif
void new_send_app_msg_req_appmsg_info::set_from_wxid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_from_wxid();
  from_wxid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:new_send_app_msg_req.appmsg_info.from_wxid)
}
void new_send_app_msg_req_appmsg_info::set_from_wxid(const char* value, size_t size) {
  set_has_from_wxid();
  from_wxid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:new_send_app_msg_req.appmsg_info.from_wxid)
}
::std::string* new_send_app_msg_req_appmsg_info::mutable_from_wxid() {
  set_has_from_wxid();
  // @@protoc_insertion_point(field_mutable:new_send_app_msg_req.appmsg_info.from_wxid)
  return from_wxid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* new_send_app_msg_req_appmsg_info::release_from_wxid() {
  // @@protoc_insertion_point(field_release:new_send_app_msg_req.appmsg_info.from_wxid)
  clear_has_from_wxid();
  return from_wxid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void new_send_app_msg_req_appmsg_info::set_allocated_from_wxid(::std::string* from_wxid) {
  if (from_wxid != NULL) {
    set_has_from_wxid();
  } else {
    clear_has_from_wxid();
  }
  from_wxid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_wxid);
  // @@protoc_insertion_point(field_set_allocated:new_send_app_msg_req.appmsg_info.from_wxid)
}

// optional string app_wxid = 2;
bool new_send_app_msg_req_appmsg_info::has_app_wxid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void new_send_app_msg_req_appmsg_info::set_has_app_wxid() {
  _has_bits_[0] |= 0x00000002u;
}
void new_send_app_msg_req_appmsg_info::clear_has_app_wxid() {
  _has_bits_[0] &= ~0x00000002u;
}
void new_send_app_msg_req_appmsg_info::clear_app_wxid() {
  app_wxid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_app_wxid();
}
const ::std::string& new_send_app_msg_req_appmsg_info::app_wxid() const {
  // @@protoc_insertion_point(field_get:new_send_app_msg_req.appmsg_info.app_wxid)
  return app_wxid_.GetNoArena();
}
void new_send_app_msg_req_appmsg_info::set_app_wxid(const ::std::string& value) {
  set_has_app_wxid();
  app_wxid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:new_send_app_msg_req.appmsg_info.app_wxid)
}
#if LANG_CXX11
void new_send_app_msg_req_appmsg_info::set_app_wxid(::std::string&& value) {
  set_has_app_wxid();
  app_wxid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:new_send_app_msg_req.appmsg_info.app_wxid)
}
#endif
void new_send_app_msg_req_appmsg_info::set_app_wxid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_app_wxid();
  app_wxid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:new_send_app_msg_req.appmsg_info.app_wxid)
}
void new_send_app_msg_req_appmsg_info::set_app_wxid(const char* value, size_t size) {
  set_has_app_wxid();
  app_wxid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:new_send_app_msg_req.appmsg_info.app_wxid)
}
::std::string* new_send_app_msg_req_appmsg_info::mutable_app_wxid() {
  set_has_app_wxid();
  // @@protoc_insertion_point(field_mutable:new_send_app_msg_req.appmsg_info.app_wxid)
  return app_wxid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* new_send_app_msg_req_appmsg_info::release_app_wxid() {
  // @@protoc_insertion_point(field_release:new_send_app_msg_req.appmsg_info.app_wxid)
  clear_has_app_wxid();
  return app_wxid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void new_send_app_msg_req_appmsg_info::set_allocated_app_wxid(::std::string* app_wxid) {
  if (app_wxid != NULL) {
    set_has_app_wxid();
  } else {
    clear_has_app_wxid();
  }
  app_wxid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_wxid);
  // @@protoc_insertion_point(field_set_allocated:new_send_app_msg_req.appmsg_info.app_wxid)
}

// optional int32 tag3 = 3;
bool new_send_app_msg_req_appmsg_info::has_tag3() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void new_send_app_msg_req_appmsg_info::set_has_tag3() {
  _has_bits_[0] |= 0x00000020u;
}
void new_send_app_msg_req_appmsg_info::clear_has_tag3() {
  _has_bits_[0] &= ~0x00000020u;
}
void new_send_app_msg_req_appmsg_info::clear_tag3() {
  tag3_ = 0;
  clear_has_tag3();
}
::google::protobuf::int32 new_send_app_msg_req_appmsg_info::tag3() const {
  // @@protoc_insertion_point(field_get:new_send_app_msg_req.appmsg_info.tag3)
  return tag3_;
}
void new_send_app_msg_req_appmsg_info::set_tag3(::google::protobuf::int32 value) {
  set_has_tag3();
  tag3_ = value;
  // @@protoc_insertion_point(field_set:new_send_app_msg_req.appmsg_info.tag3)
}

// optional string to_wxid = 4;
bool new_send_app_msg_req_appmsg_info::has_to_wxid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void new_send_app_msg_req_appmsg_info::set_has_to_wxid() {
  _has_bits_[0] |= 0x00000004u;
}
void new_send_app_msg_req_appmsg_info::clear_has_to_wxid() {
  _has_bits_[0] &= ~0x00000004u;
}
void new_send_app_msg_req_appmsg_info::clear_to_wxid() {
  to_wxid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_to_wxid();
}
const ::std::string& new_send_app_msg_req_appmsg_info::to_wxid() const {
  // @@protoc_insertion_point(field_get:new_send_app_msg_req.appmsg_info.to_wxid)
  return to_wxid_.GetNoArena();
}
void new_send_app_msg_req_appmsg_info::set_to_wxid(const ::std::string& value) {
  set_has_to_wxid();
  to_wxid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:new_send_app_msg_req.appmsg_info.to_wxid)
}
#if LANG_CXX11
void new_send_app_msg_req_appmsg_info::set_to_wxid(::std::string&& value) {
  set_has_to_wxid();
  to_wxid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:new_send_app_msg_req.appmsg_info.to_wxid)
}
#endif
void new_send_app_msg_req_appmsg_info::set_to_wxid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_to_wxid();
  to_wxid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:new_send_app_msg_req.appmsg_info.to_wxid)
}
void new_send_app_msg_req_appmsg_info::set_to_wxid(const char* value, size_t size) {
  set_has_to_wxid();
  to_wxid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:new_send_app_msg_req.appmsg_info.to_wxid)
}
::std::string* new_send_app_msg_req_appmsg_info::mutable_to_wxid() {
  set_has_to_wxid();
  // @@protoc_insertion_point(field_mutable:new_send_app_msg_req.appmsg_info.to_wxid)
  return to_wxid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* new_send_app_msg_req_appmsg_info::release_to_wxid() {
  // @@protoc_insertion_point(field_release:new_send_app_msg_req.appmsg_info.to_wxid)
  clear_has_to_wxid();
  return to_wxid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void new_send_app_msg_req_appmsg_info::set_allocated_to_wxid(::std::string* to_wxid) {
  if (to_wxid != NULL) {
    set_has_to_wxid();
  } else {
    clear_has_to_wxid();
  }
  to_wxid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_wxid);
  // @@protoc_insertion_point(field_set_allocated:new_send_app_msg_req.appmsg_info.to_wxid)
}

// optional int32 type = 5;
bool new_send_app_msg_req_appmsg_info::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void new_send_app_msg_req_appmsg_info::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
void new_send_app_msg_req_appmsg_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
void new_send_app_msg_req_appmsg_info::clear_type() {
  type_ = 0;
  clear_has_type();
}
::google::protobuf::int32 new_send_app_msg_req_appmsg_info::type() const {
  // @@protoc_insertion_point(field_get:new_send_app_msg_req.appmsg_info.type)
  return type_;
}
void new_send_app_msg_req_appmsg_info::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:new_send_app_msg_req.appmsg_info.type)
}

// optional string content = 6;
bool new_send_app_msg_req_appmsg_info::has_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void new_send_app_msg_req_appmsg_info::set_has_content() {
  _has_bits_[0] |= 0x00000008u;
}
void new_send_app_msg_req_appmsg_info::clear_has_content() {
  _has_bits_[0] &= ~0x00000008u;
}
void new_send_app_msg_req_appmsg_info::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
const ::std::string& new_send_app_msg_req_appmsg_info::content() const {
  // @@protoc_insertion_point(field_get:new_send_app_msg_req.appmsg_info.content)
  return content_.GetNoArena();
}
void new_send_app_msg_req_appmsg_info::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:new_send_app_msg_req.appmsg_info.content)
}
#if LANG_CXX11
void new_send_app_msg_req_appmsg_info::set_content(::std::string&& value) {
  set_has_content();
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:new_send_app_msg_req.appmsg_info.content)
}
#endif
void new_send_app_msg_req_appmsg_info::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:new_send_app_msg_req.appmsg_info.content)
}
void new_send_app_msg_req_appmsg_info::set_content(const char* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:new_send_app_msg_req.appmsg_info.content)
}
::std::string* new_send_app_msg_req_appmsg_info::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:new_send_app_msg_req.appmsg_info.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* new_send_app_msg_req_appmsg_info::release_content() {
  // @@protoc_insertion_point(field_release:new_send_app_msg_req.appmsg_info.content)
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void new_send_app_msg_req_appmsg_info::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:new_send_app_msg_req.appmsg_info.content)
}

// optional int32 utc = 7;
bool new_send_app_msg_req_appmsg_info::has_utc() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void new_send_app_msg_req_appmsg_info::set_has_utc() {
  _has_bits_[0] |= 0x00000080u;
}
void new_send_app_msg_req_appmsg_info::clear_has_utc() {
  _has_bits_[0] &= ~0x00000080u;
}
void new_send_app_msg_req_appmsg_info::clear_utc() {
  utc_ = 0;
  clear_has_utc();
}
::google::protobuf::int32 new_send_app_msg_req_appmsg_info::utc() const {
  // @@protoc_insertion_point(field_get:new_send_app_msg_req.appmsg_info.utc)
  return utc_;
}
void new_send_app_msg_req_appmsg_info::set_utc(::google::protobuf::int32 value) {
  set_has_utc();
  utc_ = value;
  // @@protoc_insertion_point(field_set:new_send_app_msg_req.appmsg_info.utc)
}

// optional string client_id = 8;
bool new_send_app_msg_req_appmsg_info::has_client_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void new_send_app_msg_req_appmsg_info::set_has_client_id() {
  _has_bits_[0] |= 0x00000010u;
}
void new_send_app_msg_req_appmsg_info::clear_has_client_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void new_send_app_msg_req_appmsg_info::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_client_id();
}
const ::std::string& new_send_app_msg_req_appmsg_info::client_id() const {
  // @@protoc_insertion_point(field_get:new_send_app_msg_req.appmsg_info.client_id)
  return client_id_.GetNoArena();
}
void new_send_app_msg_req_appmsg_info::set_client_id(const ::std::string& value) {
  set_has_client_id();
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:new_send_app_msg_req.appmsg_info.client_id)
}
#if LANG_CXX11
void new_send_app_msg_req_appmsg_info::set_client_id(::std::string&& value) {
  set_has_client_id();
  client_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:new_send_app_msg_req.appmsg_info.client_id)
}
#endif
void new_send_app_msg_req_appmsg_info::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_client_id();
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:new_send_app_msg_req.appmsg_info.client_id)
}
void new_send_app_msg_req_appmsg_info::set_client_id(const char* value, size_t size) {
  set_has_client_id();
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:new_send_app_msg_req.appmsg_info.client_id)
}
::std::string* new_send_app_msg_req_appmsg_info::mutable_client_id() {
  set_has_client_id();
  // @@protoc_insertion_point(field_mutable:new_send_app_msg_req.appmsg_info.client_id)
  return client_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* new_send_app_msg_req_appmsg_info::release_client_id() {
  // @@protoc_insertion_point(field_release:new_send_app_msg_req.appmsg_info.client_id)
  clear_has_client_id();
  return client_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void new_send_app_msg_req_appmsg_info::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    set_has_client_id();
  } else {
    clear_has_client_id();
  }
  client_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:new_send_app_msg_req.appmsg_info.client_id)
}

// optional int32 tag10 = 10;
bool new_send_app_msg_req_appmsg_info::has_tag10() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void new_send_app_msg_req_appmsg_info::set_has_tag10() {
  _has_bits_[0] |= 0x00000100u;
}
void new_send_app_msg_req_appmsg_info::clear_has_tag10() {
  _has_bits_[0] &= ~0x00000100u;
}
void new_send_app_msg_req_appmsg_info::clear_tag10() {
  tag10_ = 0;
  clear_has_tag10();
}
::google::protobuf::int32 new_send_app_msg_req_appmsg_info::tag10() const {
  // @@protoc_insertion_point(field_get:new_send_app_msg_req.appmsg_info.tag10)
  return tag10_;
}
void new_send_app_msg_req_appmsg_info::set_tag10(::google::protobuf::int32 value) {
  set_has_tag10();
  tag10_ = value;
  // @@protoc_insertion_point(field_set:new_send_app_msg_req.appmsg_info.tag10)
}

// optional int32 tag11 = 11;
bool new_send_app_msg_req_appmsg_info::has_tag11() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void new_send_app_msg_req_appmsg_info::set_has_tag11() {
  _has_bits_[0] |= 0x00000200u;
}
void new_send_app_msg_req_appmsg_info::clear_has_tag11() {
  _has_bits_[0] &= ~0x00000200u;
}
void new_send_app_msg_req_appmsg_info::clear_tag11() {
  tag11_ = 0;
  clear_has_tag11();
}
::google::protobuf::int32 new_send_app_msg_req_appmsg_info::tag11() const {
  // @@protoc_insertion_point(field_get:new_send_app_msg_req.appmsg_info.tag11)
  return tag11_;
}
void new_send_app_msg_req_appmsg_info::set_tag11(::google::protobuf::int32 value) {
  set_has_tag11();
  tag11_ = value;
  // @@protoc_insertion_point(field_set:new_send_app_msg_req.appmsg_info.tag11)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int new_send_app_msg_req::kLoginFieldNumber;
const int new_send_app_msg_req::kInfoFieldNumber;
const int new_send_app_msg_req::kTag4FieldNumber;
const int new_send_app_msg_req::kTag6FieldNumber;
const int new_send_app_msg_req::kTag7FieldNumber;
const int new_send_app_msg_req::kFromSceneFieldNumber;
const int new_send_app_msg_req::kTag9FieldNumber;
const int new_send_app_msg_req::kTag10FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

new_send_app_msg_req::new_send_app_msg_req()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:new_send_app_msg_req)
}
new_send_app_msg_req::new_send_app_msg_req(const new_send_app_msg_req& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tag7_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tag7()) {
    tag7_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag7_);
  }
  fromscene_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fromscene()) {
    fromscene_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fromscene_);
  }
  if (from.has_login()) {
    login_ = new ::LoginInfo(*from.login_);
  } else {
    login_ = NULL;
  }
  if (from.has_info()) {
    info_ = new ::new_send_app_msg_req_appmsg_info(*from.info_);
  } else {
    info_ = NULL;
  }
  ::memcpy(&tag4_, &from.tag4_,
    reinterpret_cast<char*>(&tag10_) -
    reinterpret_cast<char*>(&tag4_) + sizeof(tag10_));
  // @@protoc_insertion_point(copy_constructor:new_send_app_msg_req)
}

void new_send_app_msg_req::SharedCtor() {
  _cached_size_ = 0;
  tag7_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fromscene_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&login_, 0, reinterpret_cast<char*>(&tag10_) -
    reinterpret_cast<char*>(&login_) + sizeof(tag10_));
}

new_send_app_msg_req::~new_send_app_msg_req() {
  // @@protoc_insertion_point(destructor:new_send_app_msg_req)
  SharedDtor();
}

void new_send_app_msg_req::SharedDtor() {
  tag7_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fromscene_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete login_;
  }
  if (this != internal_default_instance()) {
    delete info_;
  }
}

void new_send_app_msg_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* new_send_app_msg_req::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const new_send_app_msg_req& new_send_app_msg_req::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

new_send_app_msg_req* new_send_app_msg_req::New(::google::protobuf::Arena* arena) const {
  new_send_app_msg_req* n = new new_send_app_msg_req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void new_send_app_msg_req::Clear() {
// @@protoc_insertion_point(message_clear_start:new_send_app_msg_req)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_tag7()) {
      GOOGLE_DCHECK(!tag7_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tag7_.UnsafeRawStringPointer())->clear();
    }
    if (has_fromscene()) {
      GOOGLE_DCHECK(!fromscene_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fromscene_.UnsafeRawStringPointer())->clear();
    }
    if (has_login()) {
      GOOGLE_DCHECK(login_ != NULL);
      login_->::LoginInfo::Clear();
    }
    if (has_info()) {
      GOOGLE_DCHECK(info_ != NULL);
      info_->::new_send_app_msg_req_appmsg_info::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 240u) {
    ::memset(&tag4_, 0, reinterpret_cast<char*>(&tag10_) -
      reinterpret_cast<char*>(&tag4_) + sizeof(tag10_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool new_send_app_msg_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:new_send_app_msg_req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .LoginInfo login = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .new_send_app_msg_req.appmsg_info info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tag4 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_tag4();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tag6 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_tag6();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag6_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string tag7 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag7()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag7().data(), this->tag7().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "new_send_app_msg_req.tag7");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string fromScene = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromscene()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fromscene().data(), this->fromscene().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "new_send_app_msg_req.fromScene");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tag9 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_tag9();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag9_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tag10 = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_tag10();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag10_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:new_send_app_msg_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:new_send_app_msg_req)
  return false;
#undef DO_
}

void new_send_app_msg_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:new_send_app_msg_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .LoginInfo login = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->login_, output);
  }

  // optional .new_send_app_msg_req.appmsg_info info = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->info_, output);
  }

  // optional int32 tag4 = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tag4(), output);
  }

  // optional int32 tag6 = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->tag6(), output);
  }

  // optional string tag7 = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag7().data(), this->tag7().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "new_send_app_msg_req.tag7");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->tag7(), output);
  }

  // optional string fromScene = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromscene().data(), this->fromscene().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "new_send_app_msg_req.fromScene");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->fromscene(), output);
  }

  // optional int32 tag9 = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->tag9(), output);
  }

  // optional int32 tag10 = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->tag10(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:new_send_app_msg_req)
}

::google::protobuf::uint8* new_send_app_msg_req::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:new_send_app_msg_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .LoginInfo login = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->login_, deterministic, target);
  }

  // optional .new_send_app_msg_req.appmsg_info info = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->info_, deterministic, target);
  }

  // optional int32 tag4 = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->tag4(), target);
  }

  // optional int32 tag6 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->tag6(), target);
  }

  // optional string tag7 = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag7().data(), this->tag7().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "new_send_app_msg_req.tag7");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->tag7(), target);
  }

  // optional string fromScene = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromscene().data(), this->fromscene().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "new_send_app_msg_req.fromScene");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->fromscene(), target);
  }

  // optional int32 tag9 = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->tag9(), target);
  }

  // optional int32 tag10 = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->tag10(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:new_send_app_msg_req)
  return target;
}

size_t new_send_app_msg_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:new_send_app_msg_req)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string tag7 = 7;
    if (has_tag7()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag7());
    }

    // optional string fromScene = 8;
    if (has_fromscene()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fromscene());
    }

    // optional .LoginInfo login = 1;
    if (has_login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->login_);
    }

    // optional .new_send_app_msg_req.appmsg_info info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->info_);
    }

    // optional int32 tag4 = 4;
    if (has_tag4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag4());
    }

    // optional int32 tag6 = 6;
    if (has_tag6()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag6());
    }

    // optional int32 tag9 = 9;
    if (has_tag9()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag9());
    }

    // optional int32 tag10 = 10;
    if (has_tag10()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag10());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void new_send_app_msg_req::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:new_send_app_msg_req)
  GOOGLE_DCHECK_NE(&from, this);
  const new_send_app_msg_req* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const new_send_app_msg_req>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:new_send_app_msg_req)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:new_send_app_msg_req)
    MergeFrom(*source);
  }
}

void new_send_app_msg_req::MergeFrom(const new_send_app_msg_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:new_send_app_msg_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_tag7();
      tag7_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag7_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_fromscene();
      fromscene_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fromscene_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_login()->::LoginInfo::MergeFrom(from.login());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_info()->::new_send_app_msg_req_appmsg_info::MergeFrom(from.info());
    }
    if (cached_has_bits & 0x00000010u) {
      tag4_ = from.tag4_;
    }
    if (cached_has_bits & 0x00000020u) {
      tag6_ = from.tag6_;
    }
    if (cached_has_bits & 0x00000040u) {
      tag9_ = from.tag9_;
    }
    if (cached_has_bits & 0x00000080u) {
      tag10_ = from.tag10_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void new_send_app_msg_req::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:new_send_app_msg_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void new_send_app_msg_req::CopyFrom(const new_send_app_msg_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:new_send_app_msg_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool new_send_app_msg_req::IsInitialized() const {
  return true;
}

void new_send_app_msg_req::Swap(new_send_app_msg_req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void new_send_app_msg_req::InternalSwap(new_send_app_msg_req* other) {
  tag7_.Swap(&other->tag7_);
  fromscene_.Swap(&other->fromscene_);
  std::swap(login_, other->login_);
  std::swap(info_, other->info_);
  std::swap(tag4_, other->tag4_);
  std::swap(tag6_, other->tag6_);
  std::swap(tag9_, other->tag9_);
  std::swap(tag10_, other->tag10_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata new_send_app_msg_req::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// new_send_app_msg_req

// optional .LoginInfo login = 1;
bool new_send_app_msg_req::has_login() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void new_send_app_msg_req::set_has_login() {
  _has_bits_[0] |= 0x00000004u;
}
void new_send_app_msg_req::clear_has_login() {
  _has_bits_[0] &= ~0x00000004u;
}
void new_send_app_msg_req::clear_login() {
  if (login_ != NULL) login_->::LoginInfo::Clear();
  clear_has_login();
}
const ::LoginInfo& new_send_app_msg_req::login() const {
  // @@protoc_insertion_point(field_get:new_send_app_msg_req.login)
  return login_ != NULL ? *login_
                         : *::LoginInfo::internal_default_instance();
}
::LoginInfo* new_send_app_msg_req::mutable_login() {
  set_has_login();
  if (login_ == NULL) {
    login_ = new ::LoginInfo;
  }
  // @@protoc_insertion_point(field_mutable:new_send_app_msg_req.login)
  return login_;
}
::LoginInfo* new_send_app_msg_req::release_login() {
  // @@protoc_insertion_point(field_release:new_send_app_msg_req.login)
  clear_has_login();
  ::LoginInfo* temp = login_;
  login_ = NULL;
  return temp;
}
void new_send_app_msg_req::set_allocated_login(::LoginInfo* login) {
  delete login_;
  login_ = login;
  if (login) {
    set_has_login();
  } else {
    clear_has_login();
  }
  // @@protoc_insertion_point(field_set_allocated:new_send_app_msg_req.login)
}

// optional .new_send_app_msg_req.appmsg_info info = 2;
bool new_send_app_msg_req::has_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void new_send_app_msg_req::set_has_info() {
  _has_bits_[0] |= 0x00000008u;
}
void new_send_app_msg_req::clear_has_info() {
  _has_bits_[0] &= ~0x00000008u;
}
void new_send_app_msg_req::clear_info() {
  if (info_ != NULL) info_->::new_send_app_msg_req_appmsg_info::Clear();
  clear_has_info();
}
const ::new_send_app_msg_req_appmsg_info& new_send_app_msg_req::info() const {
  // @@protoc_insertion_point(field_get:new_send_app_msg_req.info)
  return info_ != NULL ? *info_
                         : *::new_send_app_msg_req_appmsg_info::internal_default_instance();
}
::new_send_app_msg_req_appmsg_info* new_send_app_msg_req::mutable_info() {
  set_has_info();
  if (info_ == NULL) {
    info_ = new ::new_send_app_msg_req_appmsg_info;
  }
  // @@protoc_insertion_point(field_mutable:new_send_app_msg_req.info)
  return info_;
}
::new_send_app_msg_req_appmsg_info* new_send_app_msg_req::release_info() {
  // @@protoc_insertion_point(field_release:new_send_app_msg_req.info)
  clear_has_info();
  ::new_send_app_msg_req_appmsg_info* temp = info_;
  info_ = NULL;
  return temp;
}
void new_send_app_msg_req::set_allocated_info(::new_send_app_msg_req_appmsg_info* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:new_send_app_msg_req.info)
}

// optional int32 tag4 = 4;
bool new_send_app_msg_req::has_tag4() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void new_send_app_msg_req::set_has_tag4() {
  _has_bits_[0] |= 0x00000010u;
}
void new_send_app_msg_req::clear_has_tag4() {
  _has_bits_[0] &= ~0x00000010u;
}
void new_send_app_msg_req::clear_tag4() {
  tag4_ = 0;
  clear_has_tag4();
}
::google::protobuf::int32 new_send_app_msg_req::tag4() const {
  // @@protoc_insertion_point(field_get:new_send_app_msg_req.tag4)
  return tag4_;
}
void new_send_app_msg_req::set_tag4(::google::protobuf::int32 value) {
  set_has_tag4();
  tag4_ = value;
  // @@protoc_insertion_point(field_set:new_send_app_msg_req.tag4)
}

// optional int32 tag6 = 6;
bool new_send_app_msg_req::has_tag6() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void new_send_app_msg_req::set_has_tag6() {
  _has_bits_[0] |= 0x00000020u;
}
void new_send_app_msg_req::clear_has_tag6() {
  _has_bits_[0] &= ~0x00000020u;
}
void new_send_app_msg_req::clear_tag6() {
  tag6_ = 0;
  clear_has_tag6();
}
::google::protobuf::int32 new_send_app_msg_req::tag6() const {
  // @@protoc_insertion_point(field_get:new_send_app_msg_req.tag6)
  return tag6_;
}
void new_send_app_msg_req::set_tag6(::google::protobuf::int32 value) {
  set_has_tag6();
  tag6_ = value;
  // @@protoc_insertion_point(field_set:new_send_app_msg_req.tag6)
}

// optional string tag7 = 7;
bool new_send_app_msg_req::has_tag7() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void new_send_app_msg_req::set_has_tag7() {
  _has_bits_[0] |= 0x00000001u;
}
void new_send_app_msg_req::clear_has_tag7() {
  _has_bits_[0] &= ~0x00000001u;
}
void new_send_app_msg_req::clear_tag7() {
  tag7_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tag7();
}
const ::std::string& new_send_app_msg_req::tag7() const {
  // @@protoc_insertion_point(field_get:new_send_app_msg_req.tag7)
  return tag7_.GetNoArena();
}
void new_send_app_msg_req::set_tag7(const ::std::string& value) {
  set_has_tag7();
  tag7_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:new_send_app_msg_req.tag7)
}
#if LANG_CXX11
void new_send_app_msg_req::set_tag7(::std::string&& value) {
  set_has_tag7();
  tag7_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:new_send_app_msg_req.tag7)
}
#endif
void new_send_app_msg_req::set_tag7(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tag7();
  tag7_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:new_send_app_msg_req.tag7)
}
void new_send_app_msg_req::set_tag7(const char* value, size_t size) {
  set_has_tag7();
  tag7_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:new_send_app_msg_req.tag7)
}
::std::string* new_send_app_msg_req::mutable_tag7() {
  set_has_tag7();
  // @@protoc_insertion_point(field_mutable:new_send_app_msg_req.tag7)
  return tag7_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* new_send_app_msg_req::release_tag7() {
  // @@protoc_insertion_point(field_release:new_send_app_msg_req.tag7)
  clear_has_tag7();
  return tag7_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void new_send_app_msg_req::set_allocated_tag7(::std::string* tag7) {
  if (tag7 != NULL) {
    set_has_tag7();
  } else {
    clear_has_tag7();
  }
  tag7_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag7);
  // @@protoc_insertion_point(field_set_allocated:new_send_app_msg_req.tag7)
}

// optional string fromScene = 8;
bool new_send_app_msg_req::has_fromscene() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void new_send_app_msg_req::set_has_fromscene() {
  _has_bits_[0] |= 0x00000002u;
}
void new_send_app_msg_req::clear_has_fromscene() {
  _has_bits_[0] &= ~0x00000002u;
}
void new_send_app_msg_req::clear_fromscene() {
  fromscene_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fromscene();
}
const ::std::string& new_send_app_msg_req::fromscene() const {
  // @@protoc_insertion_point(field_get:new_send_app_msg_req.fromScene)
  return fromscene_.GetNoArena();
}
void new_send_app_msg_req::set_fromscene(const ::std::string& value) {
  set_has_fromscene();
  fromscene_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:new_send_app_msg_req.fromScene)
}
#if LANG_CXX11
void new_send_app_msg_req::set_fromscene(::std::string&& value) {
  set_has_fromscene();
  fromscene_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:new_send_app_msg_req.fromScene)
}
#endif
void new_send_app_msg_req::set_fromscene(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fromscene();
  fromscene_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:new_send_app_msg_req.fromScene)
}
void new_send_app_msg_req::set_fromscene(const char* value, size_t size) {
  set_has_fromscene();
  fromscene_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:new_send_app_msg_req.fromScene)
}
::std::string* new_send_app_msg_req::mutable_fromscene() {
  set_has_fromscene();
  // @@protoc_insertion_point(field_mutable:new_send_app_msg_req.fromScene)
  return fromscene_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* new_send_app_msg_req::release_fromscene() {
  // @@protoc_insertion_point(field_release:new_send_app_msg_req.fromScene)
  clear_has_fromscene();
  return fromscene_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void new_send_app_msg_req::set_allocated_fromscene(::std::string* fromscene) {
  if (fromscene != NULL) {
    set_has_fromscene();
  } else {
    clear_has_fromscene();
  }
  fromscene_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fromscene);
  // @@protoc_insertion_point(field_set_allocated:new_send_app_msg_req.fromScene)
}

// optional int32 tag9 = 9;
bool new_send_app_msg_req::has_tag9() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void new_send_app_msg_req::set_has_tag9() {
  _has_bits_[0] |= 0x00000040u;
}
void new_send_app_msg_req::clear_has_tag9() {
  _has_bits_[0] &= ~0x00000040u;
}
void new_send_app_msg_req::clear_tag9() {
  tag9_ = 0;
  clear_has_tag9();
}
::google::protobuf::int32 new_send_app_msg_req::tag9() const {
  // @@protoc_insertion_point(field_get:new_send_app_msg_req.tag9)
  return tag9_;
}
void new_send_app_msg_req::set_tag9(::google::protobuf::int32 value) {
  set_has_tag9();
  tag9_ = value;
  // @@protoc_insertion_point(field_set:new_send_app_msg_req.tag9)
}

// optional int32 tag10 = 10;
bool new_send_app_msg_req::has_tag10() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void new_send_app_msg_req::set_has_tag10() {
  _has_bits_[0] |= 0x00000080u;
}
void new_send_app_msg_req::clear_has_tag10() {
  _has_bits_[0] &= ~0x00000080u;
}
void new_send_app_msg_req::clear_tag10() {
  tag10_ = 0;
  clear_has_tag10();
}
::google::protobuf::int32 new_send_app_msg_req::tag10() const {
  // @@protoc_insertion_point(field_get:new_send_app_msg_req.tag10)
  return tag10_;
}
void new_send_app_msg_req::set_tag10(::google::protobuf::int32 value) {
  set_has_tag10();
  tag10_ = value;
  // @@protoc_insertion_point(field_set:new_send_app_msg_req.tag10)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int new_send_app_msg_resp::kTag1FieldNumber;
const int new_send_app_msg_resp::kFromWxidFieldNumber;
const int new_send_app_msg_resp::kToWxidFieldNumber;
const int new_send_app_msg_resp::kSyncKeyIdFieldNumber;
const int new_send_app_msg_resp::kClientIdFieldNumber;
const int new_send_app_msg_resp::kUtcFieldNumber;
const int new_send_app_msg_resp::kTypeFieldNumber;
const int new_send_app_msg_resp::kSvridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

new_send_app_msg_resp::new_send_app_msg_resp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:new_send_app_msg_resp)
}
new_send_app_msg_resp::new_send_app_msg_resp(const new_send_app_msg_resp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  from_wxid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_from_wxid()) {
    from_wxid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_wxid_);
  }
  to_wxid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_to_wxid()) {
    to_wxid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_wxid_);
  }
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_client_id()) {
    client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  if (from.has_tag1()) {
    tag1_ = new ::mmStr(*from.tag1_);
  } else {
    tag1_ = NULL;
  }
  ::memcpy(&sync_key_id_, &from.sync_key_id_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&sync_key_id_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:new_send_app_msg_resp)
}

void new_send_app_msg_resp::SharedCtor() {
  _cached_size_ = 0;
  from_wxid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_wxid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tag1_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&tag1_) + sizeof(type_));
}

new_send_app_msg_resp::~new_send_app_msg_resp() {
  // @@protoc_insertion_point(destructor:new_send_app_msg_resp)
  SharedDtor();
}

void new_send_app_msg_resp::SharedDtor() {
  from_wxid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_wxid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete tag1_;
  }
}

void new_send_app_msg_resp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* new_send_app_msg_resp::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const new_send_app_msg_resp& new_send_app_msg_resp::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

new_send_app_msg_resp* new_send_app_msg_resp::New(::google::protobuf::Arena* arena) const {
  new_send_app_msg_resp* n = new new_send_app_msg_resp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void new_send_app_msg_resp::Clear() {
// @@protoc_insertion_point(message_clear_start:new_send_app_msg_resp)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_from_wxid()) {
      GOOGLE_DCHECK(!from_wxid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*from_wxid_.UnsafeRawStringPointer())->clear();
    }
    if (has_to_wxid()) {
      GOOGLE_DCHECK(!to_wxid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*to_wxid_.UnsafeRawStringPointer())->clear();
    }
    if (has_client_id()) {
      GOOGLE_DCHECK(!client_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*client_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_tag1()) {
      GOOGLE_DCHECK(tag1_ != NULL);
      tag1_->::mmStr::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 240u) {
    ::memset(&sync_key_id_, 0, reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&sync_key_id_) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool new_send_app_msg_resp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:new_send_app_msg_resp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mmStr tag1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tag1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string from_wxid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_wxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->from_wxid().data(), this->from_wxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "new_send_app_msg_resp.from_wxid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string to_wxid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_wxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->to_wxid().data(), this->to_wxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "new_send_app_msg_resp.to_wxid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sync_key_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_sync_key_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sync_key_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string client_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->client_id().data(), this->client_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "new_send_app_msg_resp.client_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 utc = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_utc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &utc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 svrid = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_svrid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &svrid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:new_send_app_msg_resp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:new_send_app_msg_resp)
  return false;
#undef DO_
}

void new_send_app_msg_resp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:new_send_app_msg_resp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mmStr tag1 = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->tag1_, output);
  }

  // optional string from_wxid = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from_wxid().data(), this->from_wxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "new_send_app_msg_resp.from_wxid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->from_wxid(), output);
  }

  // optional string to_wxid = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to_wxid().data(), this->to_wxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "new_send_app_msg_resp.to_wxid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->to_wxid(), output);
  }

  // optional int32 sync_key_id = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sync_key_id(), output);
  }

  // optional string client_id = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_id().data(), this->client_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "new_send_app_msg_resp.client_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->client_id(), output);
  }

  // optional int32 utc = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->utc(), output);
  }

  // optional int32 type = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->type(), output);
  }

  // optional int64 svrid = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->svrid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:new_send_app_msg_resp)
}

::google::protobuf::uint8* new_send_app_msg_resp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:new_send_app_msg_resp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mmStr tag1 = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->tag1_, deterministic, target);
  }

  // optional string from_wxid = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from_wxid().data(), this->from_wxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "new_send_app_msg_resp.from_wxid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->from_wxid(), target);
  }

  // optional string to_wxid = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to_wxid().data(), this->to_wxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "new_send_app_msg_resp.to_wxid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->to_wxid(), target);
  }

  // optional int32 sync_key_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sync_key_id(), target);
  }

  // optional string client_id = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_id().data(), this->client_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "new_send_app_msg_resp.client_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->client_id(), target);
  }

  // optional int32 utc = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->utc(), target);
  }

  // optional int32 type = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->type(), target);
  }

  // optional int64 svrid = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->svrid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:new_send_app_msg_resp)
  return target;
}

size_t new_send_app_msg_resp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:new_send_app_msg_resp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string from_wxid = 3;
    if (has_from_wxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_wxid());
    }

    // optional string to_wxid = 4;
    if (has_to_wxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to_wxid());
    }

    // optional string client_id = 6;
    if (has_client_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_id());
    }

    // optional .mmStr tag1 = 1;
    if (has_tag1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->tag1_);
    }

    // optional int32 sync_key_id = 5;
    if (has_sync_key_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sync_key_id());
    }

    // optional int32 utc = 7;
    if (has_utc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->utc());
    }

    // optional int64 svrid = 9;
    if (has_svrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->svrid());
    }

    // optional int32 type = 8;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void new_send_app_msg_resp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:new_send_app_msg_resp)
  GOOGLE_DCHECK_NE(&from, this);
  const new_send_app_msg_resp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const new_send_app_msg_resp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:new_send_app_msg_resp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:new_send_app_msg_resp)
    MergeFrom(*source);
  }
}

void new_send_app_msg_resp::MergeFrom(const new_send_app_msg_resp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:new_send_app_msg_resp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_from_wxid();
      from_wxid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_wxid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_to_wxid();
      to_wxid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_wxid_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_client_id();
      client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_tag1()->::mmStr::MergeFrom(from.tag1());
    }
    if (cached_has_bits & 0x00000010u) {
      sync_key_id_ = from.sync_key_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      utc_ = from.utc_;
    }
    if (cached_has_bits & 0x00000040u) {
      svrid_ = from.svrid_;
    }
    if (cached_has_bits & 0x00000080u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void new_send_app_msg_resp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:new_send_app_msg_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void new_send_app_msg_resp::CopyFrom(const new_send_app_msg_resp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:new_send_app_msg_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool new_send_app_msg_resp::IsInitialized() const {
  return true;
}

void new_send_app_msg_resp::Swap(new_send_app_msg_resp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void new_send_app_msg_resp::InternalSwap(new_send_app_msg_resp* other) {
  from_wxid_.Swap(&other->from_wxid_);
  to_wxid_.Swap(&other->to_wxid_);
  client_id_.Swap(&other->client_id_);
  std::swap(tag1_, other->tag1_);
  std::swap(sync_key_id_, other->sync_key_id_);
  std::swap(utc_, other->utc_);
  std::swap(svrid_, other->svrid_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata new_send_app_msg_resp::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// new_send_app_msg_resp

// optional .mmStr tag1 = 1;
bool new_send_app_msg_resp::has_tag1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void new_send_app_msg_resp::set_has_tag1() {
  _has_bits_[0] |= 0x00000008u;
}
void new_send_app_msg_resp::clear_has_tag1() {
  _has_bits_[0] &= ~0x00000008u;
}
void new_send_app_msg_resp::clear_tag1() {
  if (tag1_ != NULL) tag1_->::mmStr::Clear();
  clear_has_tag1();
}
const ::mmStr& new_send_app_msg_resp::tag1() const {
  // @@protoc_insertion_point(field_get:new_send_app_msg_resp.tag1)
  return tag1_ != NULL ? *tag1_
                         : *::mmStr::internal_default_instance();
}
::mmStr* new_send_app_msg_resp::mutable_tag1() {
  set_has_tag1();
  if (tag1_ == NULL) {
    tag1_ = new ::mmStr;
  }
  // @@protoc_insertion_point(field_mutable:new_send_app_msg_resp.tag1)
  return tag1_;
}
::mmStr* new_send_app_msg_resp::release_tag1() {
  // @@protoc_insertion_point(field_release:new_send_app_msg_resp.tag1)
  clear_has_tag1();
  ::mmStr* temp = tag1_;
  tag1_ = NULL;
  return temp;
}
void new_send_app_msg_resp::set_allocated_tag1(::mmStr* tag1) {
  delete tag1_;
  tag1_ = tag1;
  if (tag1) {
    set_has_tag1();
  } else {
    clear_has_tag1();
  }
  // @@protoc_insertion_point(field_set_allocated:new_send_app_msg_resp.tag1)
}

// optional string from_wxid = 3;
bool new_send_app_msg_resp::has_from_wxid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void new_send_app_msg_resp::set_has_from_wxid() {
  _has_bits_[0] |= 0x00000001u;
}
void new_send_app_msg_resp::clear_has_from_wxid() {
  _has_bits_[0] &= ~0x00000001u;
}
void new_send_app_msg_resp::clear_from_wxid() {
  from_wxid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_from_wxid();
}
const ::std::string& new_send_app_msg_resp::from_wxid() const {
  // @@protoc_insertion_point(field_get:new_send_app_msg_resp.from_wxid)
  return from_wxid_.GetNoArena();
}
void new_send_app_msg_resp::set_from_wxid(const ::std::string& value) {
  set_has_from_wxid();
  from_wxid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:new_send_app_msg_resp.from_wxid)
}
#if LANG_CXX11
void new_send_app_msg_resp::set_from_wxid(::std::string&& value) {
  set_has_from_wxid();
  from_wxid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:new_send_app_msg_resp.from_wxid)
}
#endif
void new_send_app_msg_resp::set_from_wxid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_from_wxid();
  from_wxid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:new_send_app_msg_resp.from_wxid)
}
void new_send_app_msg_resp::set_from_wxid(const char* value, size_t size) {
  set_has_from_wxid();
  from_wxid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:new_send_app_msg_resp.from_wxid)
}
::std::string* new_send_app_msg_resp::mutable_from_wxid() {
  set_has_from_wxid();
  // @@protoc_insertion_point(field_mutable:new_send_app_msg_resp.from_wxid)
  return from_wxid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* new_send_app_msg_resp::release_from_wxid() {
  // @@protoc_insertion_point(field_release:new_send_app_msg_resp.from_wxid)
  clear_has_from_wxid();
  return from_wxid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void new_send_app_msg_resp::set_allocated_from_wxid(::std::string* from_wxid) {
  if (from_wxid != NULL) {
    set_has_from_wxid();
  } else {
    clear_has_from_wxid();
  }
  from_wxid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_wxid);
  // @@protoc_insertion_point(field_set_allocated:new_send_app_msg_resp.from_wxid)
}

// optional string to_wxid = 4;
bool new_send_app_msg_resp::has_to_wxid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void new_send_app_msg_resp::set_has_to_wxid() {
  _has_bits_[0] |= 0x00000002u;
}
void new_send_app_msg_resp::clear_has_to_wxid() {
  _has_bits_[0] &= ~0x00000002u;
}
void new_send_app_msg_resp::clear_to_wxid() {
  to_wxid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_to_wxid();
}
const ::std::string& new_send_app_msg_resp::to_wxid() const {
  // @@protoc_insertion_point(field_get:new_send_app_msg_resp.to_wxid)
  return to_wxid_.GetNoArena();
}
void new_send_app_msg_resp::set_to_wxid(const ::std::string& value) {
  set_has_to_wxid();
  to_wxid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:new_send_app_msg_resp.to_wxid)
}
#if LANG_CXX11
void new_send_app_msg_resp::set_to_wxid(::std::string&& value) {
  set_has_to_wxid();
  to_wxid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:new_send_app_msg_resp.to_wxid)
}
#endif
void new_send_app_msg_resp::set_to_wxid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_to_wxid();
  to_wxid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:new_send_app_msg_resp.to_wxid)
}
void new_send_app_msg_resp::set_to_wxid(const char* value, size_t size) {
  set_has_to_wxid();
  to_wxid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:new_send_app_msg_resp.to_wxid)
}
::std::string* new_send_app_msg_resp::mutable_to_wxid() {
  set_has_to_wxid();
  // @@protoc_insertion_point(field_mutable:new_send_app_msg_resp.to_wxid)
  return to_wxid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* new_send_app_msg_resp::release_to_wxid() {
  // @@protoc_insertion_point(field_release:new_send_app_msg_resp.to_wxid)
  clear_has_to_wxid();
  return to_wxid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void new_send_app_msg_resp::set_allocated_to_wxid(::std::string* to_wxid) {
  if (to_wxid != NULL) {
    set_has_to_wxid();
  } else {
    clear_has_to_wxid();
  }
  to_wxid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_wxid);
  // @@protoc_insertion_point(field_set_allocated:new_send_app_msg_resp.to_wxid)
}

// optional int32 sync_key_id = 5;
bool new_send_app_msg_resp::has_sync_key_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void new_send_app_msg_resp::set_has_sync_key_id() {
  _has_bits_[0] |= 0x00000010u;
}
void new_send_app_msg_resp::clear_has_sync_key_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void new_send_app_msg_resp::clear_sync_key_id() {
  sync_key_id_ = 0;
  clear_has_sync_key_id();
}
::google::protobuf::int32 new_send_app_msg_resp::sync_key_id() const {
  // @@protoc_insertion_point(field_get:new_send_app_msg_resp.sync_key_id)
  return sync_key_id_;
}
void new_send_app_msg_resp::set_sync_key_id(::google::protobuf::int32 value) {
  set_has_sync_key_id();
  sync_key_id_ = value;
  // @@protoc_insertion_point(field_set:new_send_app_msg_resp.sync_key_id)
}

// optional string client_id = 6;
bool new_send_app_msg_resp::has_client_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void new_send_app_msg_resp::set_has_client_id() {
  _has_bits_[0] |= 0x00000004u;
}
void new_send_app_msg_resp::clear_has_client_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void new_send_app_msg_resp::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_client_id();
}
const ::std::string& new_send_app_msg_resp::client_id() const {
  // @@protoc_insertion_point(field_get:new_send_app_msg_resp.client_id)
  return client_id_.GetNoArena();
}
void new_send_app_msg_resp::set_client_id(const ::std::string& value) {
  set_has_client_id();
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:new_send_app_msg_resp.client_id)
}
#if LANG_CXX11
void new_send_app_msg_resp::set_client_id(::std::string&& value) {
  set_has_client_id();
  client_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:new_send_app_msg_resp.client_id)
}
#endif
void new_send_app_msg_resp::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_client_id();
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:new_send_app_msg_resp.client_id)
}
void new_send_app_msg_resp::set_client_id(const char* value, size_t size) {
  set_has_client_id();
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:new_send_app_msg_resp.client_id)
}
::std::string* new_send_app_msg_resp::mutable_client_id() {
  set_has_client_id();
  // @@protoc_insertion_point(field_mutable:new_send_app_msg_resp.client_id)
  return client_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* new_send_app_msg_resp::release_client_id() {
  // @@protoc_insertion_point(field_release:new_send_app_msg_resp.client_id)
  clear_has_client_id();
  return client_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void new_send_app_msg_resp::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    set_has_client_id();
  } else {
    clear_has_client_id();
  }
  client_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:new_send_app_msg_resp.client_id)
}

// optional int32 utc = 7;
bool new_send_app_msg_resp::has_utc() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void new_send_app_msg_resp::set_has_utc() {
  _has_bits_[0] |= 0x00000020u;
}
void new_send_app_msg_resp::clear_has_utc() {
  _has_bits_[0] &= ~0x00000020u;
}
void new_send_app_msg_resp::clear_utc() {
  utc_ = 0;
  clear_has_utc();
}
::google::protobuf::int32 new_send_app_msg_resp::utc() const {
  // @@protoc_insertion_point(field_get:new_send_app_msg_resp.utc)
  return utc_;
}
void new_send_app_msg_resp::set_utc(::google::protobuf::int32 value) {
  set_has_utc();
  utc_ = value;
  // @@protoc_insertion_point(field_set:new_send_app_msg_resp.utc)
}

// optional int32 type = 8;
bool new_send_app_msg_resp::has_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void new_send_app_msg_resp::set_has_type() {
  _has_bits_[0] |= 0x00000080u;
}
void new_send_app_msg_resp::clear_has_type() {
  _has_bits_[0] &= ~0x00000080u;
}
void new_send_app_msg_resp::clear_type() {
  type_ = 0;
  clear_has_type();
}
::google::protobuf::int32 new_send_app_msg_resp::type() const {
  // @@protoc_insertion_point(field_get:new_send_app_msg_resp.type)
  return type_;
}
void new_send_app_msg_resp::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:new_send_app_msg_resp.type)
}

// optional int64 svrid = 9;
bool new_send_app_msg_resp::has_svrid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void new_send_app_msg_resp::set_has_svrid() {
  _has_bits_[0] |= 0x00000040u;
}
void new_send_app_msg_resp::clear_has_svrid() {
  _has_bits_[0] &= ~0x00000040u;
}
void new_send_app_msg_resp::clear_svrid() {
  svrid_ = GOOGLE_LONGLONG(0);
  clear_has_svrid();
}
::google::protobuf::int64 new_send_app_msg_resp::svrid() const {
  // @@protoc_insertion_point(field_get:new_send_app_msg_resp.svrid)
  return svrid_;
}
void new_send_app_msg_resp::set_svrid(::google::protobuf::int64 value) {
  set_has_svrid();
  svrid_ = value;
  // @@protoc_insertion_point(field_set:new_send_app_msg_resp.svrid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int verify_user_req_user_info::kWxidFieldNumber;
const int verify_user_req_user_info::kTicketFieldNumber;
const int verify_user_req_user_info::kAntiTicketFieldNumber;
const int verify_user_req_user_info::kTag4FieldNumber;
const int verify_user_req_user_info::kTag8FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

verify_user_req_user_info::verify_user_req_user_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:verify_user_req.user_info)
}
verify_user_req_user_info::verify_user_req_user_info(const verify_user_req_user_info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  wxid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_wxid()) {
    wxid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wxid_);
  }
  ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ticket()) {
    ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_);
  }
  anti_ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_anti_ticket()) {
    anti_ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.anti_ticket_);
  }
  ::memcpy(&tag4_, &from.tag4_,
    reinterpret_cast<char*>(&tag8_) -
    reinterpret_cast<char*>(&tag4_) + sizeof(tag8_));
  // @@protoc_insertion_point(copy_constructor:verify_user_req.user_info)
}

void verify_user_req_user_info::SharedCtor() {
  _cached_size_ = 0;
  wxid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  anti_ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tag4_, 0, reinterpret_cast<char*>(&tag8_) -
    reinterpret_cast<char*>(&tag4_) + sizeof(tag8_));
}

verify_user_req_user_info::~verify_user_req_user_info() {
  // @@protoc_insertion_point(destructor:verify_user_req.user_info)
  SharedDtor();
}

void verify_user_req_user_info::SharedDtor() {
  wxid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  anti_ticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void verify_user_req_user_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* verify_user_req_user_info::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const verify_user_req_user_info& verify_user_req_user_info::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

verify_user_req_user_info* verify_user_req_user_info::New(::google::protobuf::Arena* arena) const {
  verify_user_req_user_info* n = new verify_user_req_user_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void verify_user_req_user_info::Clear() {
// @@protoc_insertion_point(message_clear_start:verify_user_req.user_info)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_wxid()) {
      GOOGLE_DCHECK(!wxid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*wxid_.UnsafeRawStringPointer())->clear();
    }
    if (has_ticket()) {
      GOOGLE_DCHECK(!ticket_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ticket_.UnsafeRawStringPointer())->clear();
    }
    if (has_anti_ticket()) {
      GOOGLE_DCHECK(!anti_ticket_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*anti_ticket_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 24u) {
    ::memset(&tag4_, 0, reinterpret_cast<char*>(&tag8_) -
      reinterpret_cast<char*>(&tag4_) + sizeof(tag8_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool verify_user_req_user_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:verify_user_req.user_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string wxid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->wxid().data(), this->wxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "verify_user_req.user_info.wxid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ticket = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ticket()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ticket().data(), this->ticket().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "verify_user_req.user_info.ticket");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string anti_ticket = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_anti_ticket()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->anti_ticket().data(), this->anti_ticket().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "verify_user_req.user_info.anti_ticket");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tag4 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_tag4();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tag8 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_tag8();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag8_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:verify_user_req.user_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:verify_user_req.user_info)
  return false;
#undef DO_
}

void verify_user_req_user_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:verify_user_req.user_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string wxid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wxid().data(), this->wxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "verify_user_req.user_info.wxid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->wxid(), output);
  }

  // optional string ticket = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ticket().data(), this->ticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "verify_user_req.user_info.ticket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ticket(), output);
  }

  // optional string anti_ticket = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->anti_ticket().data(), this->anti_ticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "verify_user_req.user_info.anti_ticket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->anti_ticket(), output);
  }

  // optional int32 tag4 = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tag4(), output);
  }

  // optional int32 tag8 = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->tag8(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:verify_user_req.user_info)
}

::google::protobuf::uint8* verify_user_req_user_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:verify_user_req.user_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string wxid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wxid().data(), this->wxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "verify_user_req.user_info.wxid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->wxid(), target);
  }

  // optional string ticket = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ticket().data(), this->ticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "verify_user_req.user_info.ticket");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ticket(), target);
  }

  // optional string anti_ticket = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->anti_ticket().data(), this->anti_ticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "verify_user_req.user_info.anti_ticket");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->anti_ticket(), target);
  }

  // optional int32 tag4 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->tag4(), target);
  }

  // optional int32 tag8 = 8;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->tag8(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:verify_user_req.user_info)
  return target;
}

size_t verify_user_req_user_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:verify_user_req.user_info)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string wxid = 1;
    if (has_wxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wxid());
    }

    // optional string ticket = 2;
    if (has_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ticket());
    }

    // optional string anti_ticket = 3;
    if (has_anti_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->anti_ticket());
    }

    // optional int32 tag4 = 4;
    if (has_tag4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag4());
    }

    // optional int32 tag8 = 8;
    if (has_tag8()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag8());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void verify_user_req_user_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:verify_user_req.user_info)
  GOOGLE_DCHECK_NE(&from, this);
  const verify_user_req_user_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const verify_user_req_user_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:verify_user_req.user_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:verify_user_req.user_info)
    MergeFrom(*source);
  }
}

void verify_user_req_user_info::MergeFrom(const verify_user_req_user_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:verify_user_req.user_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_wxid();
      wxid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wxid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_ticket();
      ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_anti_ticket();
      anti_ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.anti_ticket_);
    }
    if (cached_has_bits & 0x00000008u) {
      tag4_ = from.tag4_;
    }
    if (cached_has_bits & 0x00000010u) {
      tag8_ = from.tag8_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void verify_user_req_user_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:verify_user_req.user_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void verify_user_req_user_info::CopyFrom(const verify_user_req_user_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:verify_user_req.user_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool verify_user_req_user_info::IsInitialized() const {
  return true;
}

void verify_user_req_user_info::Swap(verify_user_req_user_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void verify_user_req_user_info::InternalSwap(verify_user_req_user_info* other) {
  wxid_.Swap(&other->wxid_);
  ticket_.Swap(&other->ticket_);
  anti_ticket_.Swap(&other->anti_ticket_);
  std::swap(tag4_, other->tag4_);
  std::swap(tag8_, other->tag8_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata verify_user_req_user_info::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// verify_user_req_user_info

// optional string wxid = 1;
bool verify_user_req_user_info::has_wxid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void verify_user_req_user_info::set_has_wxid() {
  _has_bits_[0] |= 0x00000001u;
}
void verify_user_req_user_info::clear_has_wxid() {
  _has_bits_[0] &= ~0x00000001u;
}
void verify_user_req_user_info::clear_wxid() {
  wxid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_wxid();
}
const ::std::string& verify_user_req_user_info::wxid() const {
  // @@protoc_insertion_point(field_get:verify_user_req.user_info.wxid)
  return wxid_.GetNoArena();
}
void verify_user_req_user_info::set_wxid(const ::std::string& value) {
  set_has_wxid();
  wxid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:verify_user_req.user_info.wxid)
}
#if LANG_CXX11
void verify_user_req_user_info::set_wxid(::std::string&& value) {
  set_has_wxid();
  wxid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:verify_user_req.user_info.wxid)
}
#endif
void verify_user_req_user_info::set_wxid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_wxid();
  wxid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:verify_user_req.user_info.wxid)
}
void verify_user_req_user_info::set_wxid(const char* value, size_t size) {
  set_has_wxid();
  wxid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:verify_user_req.user_info.wxid)
}
::std::string* verify_user_req_user_info::mutable_wxid() {
  set_has_wxid();
  // @@protoc_insertion_point(field_mutable:verify_user_req.user_info.wxid)
  return wxid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* verify_user_req_user_info::release_wxid() {
  // @@protoc_insertion_point(field_release:verify_user_req.user_info.wxid)
  clear_has_wxid();
  return wxid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void verify_user_req_user_info::set_allocated_wxid(::std::string* wxid) {
  if (wxid != NULL) {
    set_has_wxid();
  } else {
    clear_has_wxid();
  }
  wxid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wxid);
  // @@protoc_insertion_point(field_set_allocated:verify_user_req.user_info.wxid)
}

// optional string ticket = 2;
bool verify_user_req_user_info::has_ticket() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void verify_user_req_user_info::set_has_ticket() {
  _has_bits_[0] |= 0x00000002u;
}
void verify_user_req_user_info::clear_has_ticket() {
  _has_bits_[0] &= ~0x00000002u;
}
void verify_user_req_user_info::clear_ticket() {
  ticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ticket();
}
const ::std::string& verify_user_req_user_info::ticket() const {
  // @@protoc_insertion_point(field_get:verify_user_req.user_info.ticket)
  return ticket_.GetNoArena();
}
void verify_user_req_user_info::set_ticket(const ::std::string& value) {
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:verify_user_req.user_info.ticket)
}
#if LANG_CXX11
void verify_user_req_user_info::set_ticket(::std::string&& value) {
  set_has_ticket();
  ticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:verify_user_req.user_info.ticket)
}
#endif
void verify_user_req_user_info::set_ticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:verify_user_req.user_info.ticket)
}
void verify_user_req_user_info::set_ticket(const char* value, size_t size) {
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:verify_user_req.user_info.ticket)
}
::std::string* verify_user_req_user_info::mutable_ticket() {
  set_has_ticket();
  // @@protoc_insertion_point(field_mutable:verify_user_req.user_info.ticket)
  return ticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* verify_user_req_user_info::release_ticket() {
  // @@protoc_insertion_point(field_release:verify_user_req.user_info.ticket)
  clear_has_ticket();
  return ticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void verify_user_req_user_info::set_allocated_ticket(::std::string* ticket) {
  if (ticket != NULL) {
    set_has_ticket();
  } else {
    clear_has_ticket();
  }
  ticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ticket);
  // @@protoc_insertion_point(field_set_allocated:verify_user_req.user_info.ticket)
}

// optional string anti_ticket = 3;
bool verify_user_req_user_info::has_anti_ticket() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void verify_user_req_user_info::set_has_anti_ticket() {
  _has_bits_[0] |= 0x00000004u;
}
void verify_user_req_user_info::clear_has_anti_ticket() {
  _has_bits_[0] &= ~0x00000004u;
}
void verify_user_req_user_info::clear_anti_ticket() {
  anti_ticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_anti_ticket();
}
const ::std::string& verify_user_req_user_info::anti_ticket() const {
  // @@protoc_insertion_point(field_get:verify_user_req.user_info.anti_ticket)
  return anti_ticket_.GetNoArena();
}
void verify_user_req_user_info::set_anti_ticket(const ::std::string& value) {
  set_has_anti_ticket();
  anti_ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:verify_user_req.user_info.anti_ticket)
}
#if LANG_CXX11
void verify_user_req_user_info::set_anti_ticket(::std::string&& value) {
  set_has_anti_ticket();
  anti_ticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:verify_user_req.user_info.anti_ticket)
}
#endif
void verify_user_req_user_info::set_anti_ticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_anti_ticket();
  anti_ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:verify_user_req.user_info.anti_ticket)
}
void verify_user_req_user_info::set_anti_ticket(const char* value, size_t size) {
  set_has_anti_ticket();
  anti_ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:verify_user_req.user_info.anti_ticket)
}
::std::string* verify_user_req_user_info::mutable_anti_ticket() {
  set_has_anti_ticket();
  // @@protoc_insertion_point(field_mutable:verify_user_req.user_info.anti_ticket)
  return anti_ticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* verify_user_req_user_info::release_anti_ticket() {
  // @@protoc_insertion_point(field_release:verify_user_req.user_info.anti_ticket)
  clear_has_anti_ticket();
  return anti_ticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void verify_user_req_user_info::set_allocated_anti_ticket(::std::string* anti_ticket) {
  if (anti_ticket != NULL) {
    set_has_anti_ticket();
  } else {
    clear_has_anti_ticket();
  }
  anti_ticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), anti_ticket);
  // @@protoc_insertion_point(field_set_allocated:verify_user_req.user_info.anti_ticket)
}

// optional int32 tag4 = 4;
bool verify_user_req_user_info::has_tag4() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void verify_user_req_user_info::set_has_tag4() {
  _has_bits_[0] |= 0x00000008u;
}
void verify_user_req_user_info::clear_has_tag4() {
  _has_bits_[0] &= ~0x00000008u;
}
void verify_user_req_user_info::clear_tag4() {
  tag4_ = 0;
  clear_has_tag4();
}
::google::protobuf::int32 verify_user_req_user_info::tag4() const {
  // @@protoc_insertion_point(field_get:verify_user_req.user_info.tag4)
  return tag4_;
}
void verify_user_req_user_info::set_tag4(::google::protobuf::int32 value) {
  set_has_tag4();
  tag4_ = value;
  // @@protoc_insertion_point(field_set:verify_user_req.user_info.tag4)
}

// optional int32 tag8 = 8;
bool verify_user_req_user_info::has_tag8() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void verify_user_req_user_info::set_has_tag8() {
  _has_bits_[0] |= 0x00000010u;
}
void verify_user_req_user_info::clear_has_tag8() {
  _has_bits_[0] &= ~0x00000010u;
}
void verify_user_req_user_info::clear_tag8() {
  tag8_ = 0;
  clear_has_tag8();
}
::google::protobuf::int32 verify_user_req_user_info::tag8() const {
  // @@protoc_insertion_point(field_get:verify_user_req.user_info.tag8)
  return tag8_;
}
void verify_user_req_user_info::set_tag8(::google::protobuf::int32 value) {
  set_has_tag8();
  tag8_ = value;
  // @@protoc_insertion_point(field_set:verify_user_req.user_info.tag8)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int verify_user_req::kLoginFieldNumber;
const int verify_user_req::kOpCodeFieldNumber;
const int verify_user_req::kTag3FieldNumber;
const int verify_user_req::kUserFieldNumber;
const int verify_user_req::kContentFieldNumber;
const int verify_user_req::kTag6FieldNumber;
const int verify_user_req::kSceneFieldNumber;
const int verify_user_req::kDeviceInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

verify_user_req::verify_user_req()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:verify_user_req)
}
verify_user_req::verify_user_req(const verify_user_req& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_content()) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  scene_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_scene()) {
    scene_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scene_);
  }
  if (from.has_login()) {
    login_ = new ::LoginInfo(*from.login_);
  } else {
    login_ = NULL;
  }
  if (from.has_user()) {
    user_ = new ::verify_user_req_user_info(*from.user_);
  } else {
    user_ = NULL;
  }
  if (from.has_device_info()) {
    device_info_ = new ::mmStr(*from.device_info_);
  } else {
    device_info_ = NULL;
  }
  ::memcpy(&op_code_, &from.op_code_,
    reinterpret_cast<char*>(&tag6_) -
    reinterpret_cast<char*>(&op_code_) + sizeof(tag6_));
  // @@protoc_insertion_point(copy_constructor:verify_user_req)
}

void verify_user_req::SharedCtor() {
  _cached_size_ = 0;
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scene_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&login_, 0, reinterpret_cast<char*>(&tag6_) -
    reinterpret_cast<char*>(&login_) + sizeof(tag6_));
}

verify_user_req::~verify_user_req() {
  // @@protoc_insertion_point(destructor:verify_user_req)
  SharedDtor();
}

void verify_user_req::SharedDtor() {
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scene_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete login_;
  }
  if (this != internal_default_instance()) {
    delete user_;
  }
  if (this != internal_default_instance()) {
    delete device_info_;
  }
}

void verify_user_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* verify_user_req::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const verify_user_req& verify_user_req::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

verify_user_req* verify_user_req::New(::google::protobuf::Arena* arena) const {
  verify_user_req* n = new verify_user_req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void verify_user_req::Clear() {
// @@protoc_insertion_point(message_clear_start:verify_user_req)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_content()) {
      GOOGLE_DCHECK(!content_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*content_.UnsafeRawStringPointer())->clear();
    }
    if (has_scene()) {
      GOOGLE_DCHECK(!scene_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*scene_.UnsafeRawStringPointer())->clear();
    }
    if (has_login()) {
      GOOGLE_DCHECK(login_ != NULL);
      login_->::LoginInfo::Clear();
    }
    if (has_user()) {
      GOOGLE_DCHECK(user_ != NULL);
      user_->::verify_user_req_user_info::Clear();
    }
    if (has_device_info()) {
      GOOGLE_DCHECK(device_info_ != NULL);
      device_info_->::mmStr::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 224u) {
    ::memset(&op_code_, 0, reinterpret_cast<char*>(&tag6_) -
      reinterpret_cast<char*>(&op_code_) + sizeof(tag6_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool verify_user_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:verify_user_req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .LoginInfo login = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 op_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_op_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &op_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tag3 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_tag3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .verify_user_req.user_info user = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string content = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "verify_user_req.content");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tag6 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_tag6();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag6_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string scene = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scene()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->scene().data(), this->scene().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "verify_user_req.scene");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mmStr device_info = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:verify_user_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:verify_user_req)
  return false;
#undef DO_
}

void verify_user_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:verify_user_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .LoginInfo login = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->login_, output);
  }

  // optional int32 op_code = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->op_code(), output);
  }

  // optional int32 tag3 = 3;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tag3(), output);
  }

  // optional .verify_user_req.user_info user = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->user_, output);
  }

  // optional string content = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "verify_user_req.content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->content(), output);
  }

  // optional int32 tag6 = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->tag6(), output);
  }

  // optional string scene = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scene().data(), this->scene().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "verify_user_req.scene");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->scene(), output);
  }

  // optional .mmStr device_info = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->device_info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:verify_user_req)
}

::google::protobuf::uint8* verify_user_req::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:verify_user_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .LoginInfo login = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->login_, deterministic, target);
  }

  // optional int32 op_code = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->op_code(), target);
  }

  // optional int32 tag3 = 3;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tag3(), target);
  }

  // optional .verify_user_req.user_info user = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->user_, deterministic, target);
  }

  // optional string content = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "verify_user_req.content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->content(), target);
  }

  // optional int32 tag6 = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->tag6(), target);
  }

  // optional string scene = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scene().data(), this->scene().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "verify_user_req.scene");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->scene(), target);
  }

  // optional .mmStr device_info = 8;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->device_info_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:verify_user_req)
  return target;
}

size_t verify_user_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:verify_user_req)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string content = 5;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional string scene = 7;
    if (has_scene()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scene());
    }

    // optional .LoginInfo login = 1;
    if (has_login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->login_);
    }

    // optional .verify_user_req.user_info user = 4;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->user_);
    }

    // optional .mmStr device_info = 8;
    if (has_device_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->device_info_);
    }

    // optional int32 op_code = 2;
    if (has_op_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->op_code());
    }

    // optional int32 tag3 = 3;
    if (has_tag3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag3());
    }

    // optional int32 tag6 = 6;
    if (has_tag6()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag6());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void verify_user_req::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:verify_user_req)
  GOOGLE_DCHECK_NE(&from, this);
  const verify_user_req* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const verify_user_req>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:verify_user_req)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:verify_user_req)
    MergeFrom(*source);
  }
}

void verify_user_req::MergeFrom(const verify_user_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:verify_user_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_content();
      content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_scene();
      scene_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scene_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_login()->::LoginInfo::MergeFrom(from.login());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_user()->::verify_user_req_user_info::MergeFrom(from.user());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_device_info()->::mmStr::MergeFrom(from.device_info());
    }
    if (cached_has_bits & 0x00000020u) {
      op_code_ = from.op_code_;
    }
    if (cached_has_bits & 0x00000040u) {
      tag3_ = from.tag3_;
    }
    if (cached_has_bits & 0x00000080u) {
      tag6_ = from.tag6_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void verify_user_req::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:verify_user_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void verify_user_req::CopyFrom(const verify_user_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:verify_user_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool verify_user_req::IsInitialized() const {
  return true;
}

void verify_user_req::Swap(verify_user_req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void verify_user_req::InternalSwap(verify_user_req* other) {
  content_.Swap(&other->content_);
  scene_.Swap(&other->scene_);
  std::swap(login_, other->login_);
  std::swap(user_, other->user_);
  std::swap(device_info_, other->device_info_);
  std::swap(op_code_, other->op_code_);
  std::swap(tag3_, other->tag3_);
  std::swap(tag6_, other->tag6_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata verify_user_req::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// verify_user_req

// optional .LoginInfo login = 1;
bool verify_user_req::has_login() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void verify_user_req::set_has_login() {
  _has_bits_[0] |= 0x00000004u;
}
void verify_user_req::clear_has_login() {
  _has_bits_[0] &= ~0x00000004u;
}
void verify_user_req::clear_login() {
  if (login_ != NULL) login_->::LoginInfo::Clear();
  clear_has_login();
}
const ::LoginInfo& verify_user_req::login() const {
  // @@protoc_insertion_point(field_get:verify_user_req.login)
  return login_ != NULL ? *login_
                         : *::LoginInfo::internal_default_instance();
}
::LoginInfo* verify_user_req::mutable_login() {
  set_has_login();
  if (login_ == NULL) {
    login_ = new ::LoginInfo;
  }
  // @@protoc_insertion_point(field_mutable:verify_user_req.login)
  return login_;
}
::LoginInfo* verify_user_req::release_login() {
  // @@protoc_insertion_point(field_release:verify_user_req.login)
  clear_has_login();
  ::LoginInfo* temp = login_;
  login_ = NULL;
  return temp;
}
void verify_user_req::set_allocated_login(::LoginInfo* login) {
  delete login_;
  login_ = login;
  if (login) {
    set_has_login();
  } else {
    clear_has_login();
  }
  // @@protoc_insertion_point(field_set_allocated:verify_user_req.login)
}

// optional int32 op_code = 2;
bool verify_user_req::has_op_code() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void verify_user_req::set_has_op_code() {
  _has_bits_[0] |= 0x00000020u;
}
void verify_user_req::clear_has_op_code() {
  _has_bits_[0] &= ~0x00000020u;
}
void verify_user_req::clear_op_code() {
  op_code_ = 0;
  clear_has_op_code();
}
::google::protobuf::int32 verify_user_req::op_code() const {
  // @@protoc_insertion_point(field_get:verify_user_req.op_code)
  return op_code_;
}
void verify_user_req::set_op_code(::google::protobuf::int32 value) {
  set_has_op_code();
  op_code_ = value;
  // @@protoc_insertion_point(field_set:verify_user_req.op_code)
}

// optional int32 tag3 = 3;
bool verify_user_req::has_tag3() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void verify_user_req::set_has_tag3() {
  _has_bits_[0] |= 0x00000040u;
}
void verify_user_req::clear_has_tag3() {
  _has_bits_[0] &= ~0x00000040u;
}
void verify_user_req::clear_tag3() {
  tag3_ = 0;
  clear_has_tag3();
}
::google::protobuf::int32 verify_user_req::tag3() const {
  // @@protoc_insertion_point(field_get:verify_user_req.tag3)
  return tag3_;
}
void verify_user_req::set_tag3(::google::protobuf::int32 value) {
  set_has_tag3();
  tag3_ = value;
  // @@protoc_insertion_point(field_set:verify_user_req.tag3)
}

// optional .verify_user_req.user_info user = 4;
bool verify_user_req::has_user() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void verify_user_req::set_has_user() {
  _has_bits_[0] |= 0x00000008u;
}
void verify_user_req::clear_has_user() {
  _has_bits_[0] &= ~0x00000008u;
}
void verify_user_req::clear_user() {
  if (user_ != NULL) user_->::verify_user_req_user_info::Clear();
  clear_has_user();
}
const ::verify_user_req_user_info& verify_user_req::user() const {
  // @@protoc_insertion_point(field_get:verify_user_req.user)
  return user_ != NULL ? *user_
                         : *::verify_user_req_user_info::internal_default_instance();
}
::verify_user_req_user_info* verify_user_req::mutable_user() {
  set_has_user();
  if (user_ == NULL) {
    user_ = new ::verify_user_req_user_info;
  }
  // @@protoc_insertion_point(field_mutable:verify_user_req.user)
  return user_;
}
::verify_user_req_user_info* verify_user_req::release_user() {
  // @@protoc_insertion_point(field_release:verify_user_req.user)
  clear_has_user();
  ::verify_user_req_user_info* temp = user_;
  user_ = NULL;
  return temp;
}
void verify_user_req::set_allocated_user(::verify_user_req_user_info* user) {
  delete user_;
  user_ = user;
  if (user) {
    set_has_user();
  } else {
    clear_has_user();
  }
  // @@protoc_insertion_point(field_set_allocated:verify_user_req.user)
}

// optional string content = 5;
bool verify_user_req::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void verify_user_req::set_has_content() {
  _has_bits_[0] |= 0x00000001u;
}
void verify_user_req::clear_has_content() {
  _has_bits_[0] &= ~0x00000001u;
}
void verify_user_req::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
const ::std::string& verify_user_req::content() const {
  // @@protoc_insertion_point(field_get:verify_user_req.content)
  return content_.GetNoArena();
}
void verify_user_req::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:verify_user_req.content)
}
#if LANG_CXX11
void verify_user_req::set_content(::std::string&& value) {
  set_has_content();
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:verify_user_req.content)
}
#endif
void verify_user_req::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:verify_user_req.content)
}
void verify_user_req::set_content(const char* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:verify_user_req.content)
}
::std::string* verify_user_req::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:verify_user_req.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* verify_user_req::release_content() {
  // @@protoc_insertion_point(field_release:verify_user_req.content)
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void verify_user_req::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:verify_user_req.content)
}

// optional int32 tag6 = 6;
bool verify_user_req::has_tag6() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void verify_user_req::set_has_tag6() {
  _has_bits_[0] |= 0x00000080u;
}
void verify_user_req::clear_has_tag6() {
  _has_bits_[0] &= ~0x00000080u;
}
void verify_user_req::clear_tag6() {
  tag6_ = 0;
  clear_has_tag6();
}
::google::protobuf::int32 verify_user_req::tag6() const {
  // @@protoc_insertion_point(field_get:verify_user_req.tag6)
  return tag6_;
}
void verify_user_req::set_tag6(::google::protobuf::int32 value) {
  set_has_tag6();
  tag6_ = value;
  // @@protoc_insertion_point(field_set:verify_user_req.tag6)
}

// optional string scene = 7;
bool verify_user_req::has_scene() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void verify_user_req::set_has_scene() {
  _has_bits_[0] |= 0x00000002u;
}
void verify_user_req::clear_has_scene() {
  _has_bits_[0] &= ~0x00000002u;
}
void verify_user_req::clear_scene() {
  scene_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_scene();
}
const ::std::string& verify_user_req::scene() const {
  // @@protoc_insertion_point(field_get:verify_user_req.scene)
  return scene_.GetNoArena();
}
void verify_user_req::set_scene(const ::std::string& value) {
  set_has_scene();
  scene_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:verify_user_req.scene)
}
#if LANG_CXX11
void verify_user_req::set_scene(::std::string&& value) {
  set_has_scene();
  scene_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:verify_user_req.scene)
}
#endif
void verify_user_req::set_scene(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_scene();
  scene_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:verify_user_req.scene)
}
void verify_user_req::set_scene(const char* value, size_t size) {
  set_has_scene();
  scene_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:verify_user_req.scene)
}
::std::string* verify_user_req::mutable_scene() {
  set_has_scene();
  // @@protoc_insertion_point(field_mutable:verify_user_req.scene)
  return scene_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* verify_user_req::release_scene() {
  // @@protoc_insertion_point(field_release:verify_user_req.scene)
  clear_has_scene();
  return scene_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void verify_user_req::set_allocated_scene(::std::string* scene) {
  if (scene != NULL) {
    set_has_scene();
  } else {
    clear_has_scene();
  }
  scene_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scene);
  // @@protoc_insertion_point(field_set_allocated:verify_user_req.scene)
}

// optional .mmStr device_info = 8;
bool verify_user_req::has_device_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void verify_user_req::set_has_device_info() {
  _has_bits_[0] |= 0x00000010u;
}
void verify_user_req::clear_has_device_info() {
  _has_bits_[0] &= ~0x00000010u;
}
void verify_user_req::clear_device_info() {
  if (device_info_ != NULL) device_info_->::mmStr::Clear();
  clear_has_device_info();
}
const ::mmStr& verify_user_req::device_info() const {
  // @@protoc_insertion_point(field_get:verify_user_req.device_info)
  return device_info_ != NULL ? *device_info_
                         : *::mmStr::internal_default_instance();
}
::mmStr* verify_user_req::mutable_device_info() {
  set_has_device_info();
  if (device_info_ == NULL) {
    device_info_ = new ::mmStr;
  }
  // @@protoc_insertion_point(field_mutable:verify_user_req.device_info)
  return device_info_;
}
::mmStr* verify_user_req::release_device_info() {
  // @@protoc_insertion_point(field_release:verify_user_req.device_info)
  clear_has_device_info();
  ::mmStr* temp = device_info_;
  device_info_ = NULL;
  return temp;
}
void verify_user_req::set_allocated_device_info(::mmStr* device_info) {
  delete device_info_;
  device_info_ = device_info;
  if (device_info) {
    set_has_device_info();
  } else {
    clear_has_device_info();
  }
  // @@protoc_insertion_point(field_set_allocated:verify_user_req.device_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int verify_user_resp::kResFieldNumber;
const int verify_user_resp::kWxidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

verify_user_resp::verify_user_resp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:verify_user_resp)
}
verify_user_resp::verify_user_resp(const verify_user_resp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  wxid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_wxid()) {
    wxid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wxid_);
  }
  if (from.has_res()) {
    res_ = new ::mmRes(*from.res_);
  } else {
    res_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:verify_user_resp)
}

void verify_user_resp::SharedCtor() {
  _cached_size_ = 0;
  wxid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  res_ = NULL;
}

verify_user_resp::~verify_user_resp() {
  // @@protoc_insertion_point(destructor:verify_user_resp)
  SharedDtor();
}

void verify_user_resp::SharedDtor() {
  wxid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete res_;
  }
}

void verify_user_resp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* verify_user_resp::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const verify_user_resp& verify_user_resp::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

verify_user_resp* verify_user_resp::New(::google::protobuf::Arena* arena) const {
  verify_user_resp* n = new verify_user_resp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void verify_user_resp::Clear() {
// @@protoc_insertion_point(message_clear_start:verify_user_resp)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_wxid()) {
      GOOGLE_DCHECK(!wxid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*wxid_.UnsafeRawStringPointer())->clear();
    }
    if (has_res()) {
      GOOGLE_DCHECK(res_ != NULL);
      res_->::mmRes::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool verify_user_resp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:verify_user_resp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mmRes res = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_res()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string wxid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->wxid().data(), this->wxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "verify_user_resp.wxid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:verify_user_resp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:verify_user_resp)
  return false;
#undef DO_
}

void verify_user_resp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:verify_user_resp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mmRes res = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->res_, output);
  }

  // optional string wxid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wxid().data(), this->wxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "verify_user_resp.wxid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->wxid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:verify_user_resp)
}

::google::protobuf::uint8* verify_user_resp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:verify_user_resp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mmRes res = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->res_, deterministic, target);
  }

  // optional string wxid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wxid().data(), this->wxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "verify_user_resp.wxid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->wxid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:verify_user_resp)
  return target;
}

size_t verify_user_resp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:verify_user_resp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string wxid = 2;
    if (has_wxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wxid());
    }

    // optional .mmRes res = 1;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->res_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void verify_user_resp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:verify_user_resp)
  GOOGLE_DCHECK_NE(&from, this);
  const verify_user_resp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const verify_user_resp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:verify_user_resp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:verify_user_resp)
    MergeFrom(*source);
  }
}

void verify_user_resp::MergeFrom(const verify_user_resp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:verify_user_resp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_wxid();
      wxid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wxid_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_res()->::mmRes::MergeFrom(from.res());
    }
  }
}

void verify_user_resp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:verify_user_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void verify_user_resp::CopyFrom(const verify_user_resp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:verify_user_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool verify_user_resp::IsInitialized() const {
  return true;
}

void verify_user_resp::Swap(verify_user_resp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void verify_user_resp::InternalSwap(verify_user_resp* other) {
  wxid_.Swap(&other->wxid_);
  std::swap(res_, other->res_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata verify_user_resp::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// verify_user_resp

// optional .mmRes res = 1;
bool verify_user_resp::has_res() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void verify_user_resp::set_has_res() {
  _has_bits_[0] |= 0x00000002u;
}
void verify_user_resp::clear_has_res() {
  _has_bits_[0] &= ~0x00000002u;
}
void verify_user_resp::clear_res() {
  if (res_ != NULL) res_->::mmRes::Clear();
  clear_has_res();
}
const ::mmRes& verify_user_resp::res() const {
  // @@protoc_insertion_point(field_get:verify_user_resp.res)
  return res_ != NULL ? *res_
                         : *::mmRes::internal_default_instance();
}
::mmRes* verify_user_resp::mutable_res() {
  set_has_res();
  if (res_ == NULL) {
    res_ = new ::mmRes;
  }
  // @@protoc_insertion_point(field_mutable:verify_user_resp.res)
  return res_;
}
::mmRes* verify_user_resp::release_res() {
  // @@protoc_insertion_point(field_release:verify_user_resp.res)
  clear_has_res();
  ::mmRes* temp = res_;
  res_ = NULL;
  return temp;
}
void verify_user_resp::set_allocated_res(::mmRes* res) {
  delete res_;
  res_ = res;
  if (res) {
    set_has_res();
  } else {
    clear_has_res();
  }
  // @@protoc_insertion_point(field_set_allocated:verify_user_resp.res)
}

// optional string wxid = 2;
bool verify_user_resp::has_wxid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void verify_user_resp::set_has_wxid() {
  _has_bits_[0] |= 0x00000001u;
}
void verify_user_resp::clear_has_wxid() {
  _has_bits_[0] &= ~0x00000001u;
}
void verify_user_resp::clear_wxid() {
  wxid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_wxid();
}
const ::std::string& verify_user_resp::wxid() const {
  // @@protoc_insertion_point(field_get:verify_user_resp.wxid)
  return wxid_.GetNoArena();
}
void verify_user_resp::set_wxid(const ::std::string& value) {
  set_has_wxid();
  wxid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:verify_user_resp.wxid)
}
#if LANG_CXX11
void verify_user_resp::set_wxid(::std::string&& value) {
  set_has_wxid();
  wxid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:verify_user_resp.wxid)
}
#endif
void verify_user_resp::set_wxid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_wxid();
  wxid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:verify_user_resp.wxid)
}
void verify_user_resp::set_wxid(const char* value, size_t size) {
  set_has_wxid();
  wxid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:verify_user_resp.wxid)
}
::std::string* verify_user_resp::mutable_wxid() {
  set_has_wxid();
  // @@protoc_insertion_point(field_mutable:verify_user_resp.wxid)
  return wxid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* verify_user_resp::release_wxid() {
  // @@protoc_insertion_point(field_release:verify_user_resp.wxid)
  clear_has_wxid();
  return wxid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void verify_user_resp::set_allocated_wxid(::std::string* wxid) {
  if (wxid != NULL) {
    set_has_wxid();
  } else {
    clear_has_wxid();
  }
  wxid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wxid);
  // @@protoc_insertion_point(field_set_allocated:verify_user_resp.wxid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int receive_wxhb_req::kLoginFieldNumber;
const int receive_wxhb_req::kCmdFieldNumber;
const int receive_wxhb_req::kTag3FieldNumber;
const int receive_wxhb_req::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

receive_wxhb_req::receive_wxhb_req()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:receive_wxhb_req)
}
receive_wxhb_req::receive_wxhb_req(const receive_wxhb_req& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_login()) {
    login_ = new ::LoginInfo(*from.login_);
  } else {
    login_ = NULL;
  }
  if (from.has_info()) {
    info_ = new ::mmStr(*from.info_);
  } else {
    info_ = NULL;
  }
  ::memcpy(&cmd_, &from.cmd_,
    reinterpret_cast<char*>(&tag3_) -
    reinterpret_cast<char*>(&cmd_) + sizeof(tag3_));
  // @@protoc_insertion_point(copy_constructor:receive_wxhb_req)
}

void receive_wxhb_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&login_, 0, reinterpret_cast<char*>(&tag3_) -
    reinterpret_cast<char*>(&login_) + sizeof(tag3_));
}

receive_wxhb_req::~receive_wxhb_req() {
  // @@protoc_insertion_point(destructor:receive_wxhb_req)
  SharedDtor();
}

void receive_wxhb_req::SharedDtor() {
  if (this != internal_default_instance()) {
    delete login_;
  }
  if (this != internal_default_instance()) {
    delete info_;
  }
}

void receive_wxhb_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* receive_wxhb_req::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const receive_wxhb_req& receive_wxhb_req::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

receive_wxhb_req* receive_wxhb_req::New(::google::protobuf::Arena* arena) const {
  receive_wxhb_req* n = new receive_wxhb_req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void receive_wxhb_req::Clear() {
// @@protoc_insertion_point(message_clear_start:receive_wxhb_req)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_login()) {
      GOOGLE_DCHECK(login_ != NULL);
      login_->::LoginInfo::Clear();
    }
    if (has_info()) {
      GOOGLE_DCHECK(info_ != NULL);
      info_->::mmStr::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&cmd_, 0, reinterpret_cast<char*>(&tag3_) -
      reinterpret_cast<char*>(&cmd_) + sizeof(tag3_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool receive_wxhb_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:receive_wxhb_req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .LoginInfo login = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cmd = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_cmd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tag3 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_tag3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mmStr info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:receive_wxhb_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:receive_wxhb_req)
  return false;
#undef DO_
}

void receive_wxhb_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:receive_wxhb_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .LoginInfo login = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->login_, output);
  }

  // optional int32 cmd = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cmd(), output);
  }

  // optional int32 tag3 = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tag3(), output);
  }

  // optional .mmStr info = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:receive_wxhb_req)
}

::google::protobuf::uint8* receive_wxhb_req::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:receive_wxhb_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .LoginInfo login = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->login_, deterministic, target);
  }

  // optional int32 cmd = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cmd(), target);
  }

  // optional int32 tag3 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tag3(), target);
  }

  // optional .mmStr info = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->info_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:receive_wxhb_req)
  return target;
}

size_t receive_wxhb_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:receive_wxhb_req)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .LoginInfo login = 1;
    if (has_login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->login_);
    }

    // optional .mmStr info = 4;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->info_);
    }

    // optional int32 cmd = 2;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }

    // optional int32 tag3 = 3;
    if (has_tag3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag3());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void receive_wxhb_req::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:receive_wxhb_req)
  GOOGLE_DCHECK_NE(&from, this);
  const receive_wxhb_req* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const receive_wxhb_req>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:receive_wxhb_req)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:receive_wxhb_req)
    MergeFrom(*source);
  }
}

void receive_wxhb_req::MergeFrom(const receive_wxhb_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:receive_wxhb_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_login()->::LoginInfo::MergeFrom(from.login());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_info()->::mmStr::MergeFrom(from.info());
    }
    if (cached_has_bits & 0x00000004u) {
      cmd_ = from.cmd_;
    }
    if (cached_has_bits & 0x00000008u) {
      tag3_ = from.tag3_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void receive_wxhb_req::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:receive_wxhb_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void receive_wxhb_req::CopyFrom(const receive_wxhb_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:receive_wxhb_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool receive_wxhb_req::IsInitialized() const {
  return true;
}

void receive_wxhb_req::Swap(receive_wxhb_req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void receive_wxhb_req::InternalSwap(receive_wxhb_req* other) {
  std::swap(login_, other->login_);
  std::swap(info_, other->info_);
  std::swap(cmd_, other->cmd_);
  std::swap(tag3_, other->tag3_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata receive_wxhb_req::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// receive_wxhb_req

// optional .LoginInfo login = 1;
bool receive_wxhb_req::has_login() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void receive_wxhb_req::set_has_login() {
  _has_bits_[0] |= 0x00000001u;
}
void receive_wxhb_req::clear_has_login() {
  _has_bits_[0] &= ~0x00000001u;
}
void receive_wxhb_req::clear_login() {
  if (login_ != NULL) login_->::LoginInfo::Clear();
  clear_has_login();
}
const ::LoginInfo& receive_wxhb_req::login() const {
  // @@protoc_insertion_point(field_get:receive_wxhb_req.login)
  return login_ != NULL ? *login_
                         : *::LoginInfo::internal_default_instance();
}
::LoginInfo* receive_wxhb_req::mutable_login() {
  set_has_login();
  if (login_ == NULL) {
    login_ = new ::LoginInfo;
  }
  // @@protoc_insertion_point(field_mutable:receive_wxhb_req.login)
  return login_;
}
::LoginInfo* receive_wxhb_req::release_login() {
  // @@protoc_insertion_point(field_release:receive_wxhb_req.login)
  clear_has_login();
  ::LoginInfo* temp = login_;
  login_ = NULL;
  return temp;
}
void receive_wxhb_req::set_allocated_login(::LoginInfo* login) {
  delete login_;
  login_ = login;
  if (login) {
    set_has_login();
  } else {
    clear_has_login();
  }
  // @@protoc_insertion_point(field_set_allocated:receive_wxhb_req.login)
}

// optional int32 cmd = 2;
bool receive_wxhb_req::has_cmd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void receive_wxhb_req::set_has_cmd() {
  _has_bits_[0] |= 0x00000004u;
}
void receive_wxhb_req::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000004u;
}
void receive_wxhb_req::clear_cmd() {
  cmd_ = 0;
  clear_has_cmd();
}
::google::protobuf::int32 receive_wxhb_req::cmd() const {
  // @@protoc_insertion_point(field_get:receive_wxhb_req.cmd)
  return cmd_;
}
void receive_wxhb_req::set_cmd(::google::protobuf::int32 value) {
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:receive_wxhb_req.cmd)
}

// optional int32 tag3 = 3;
bool receive_wxhb_req::has_tag3() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void receive_wxhb_req::set_has_tag3() {
  _has_bits_[0] |= 0x00000008u;
}
void receive_wxhb_req::clear_has_tag3() {
  _has_bits_[0] &= ~0x00000008u;
}
void receive_wxhb_req::clear_tag3() {
  tag3_ = 0;
  clear_has_tag3();
}
::google::protobuf::int32 receive_wxhb_req::tag3() const {
  // @@protoc_insertion_point(field_get:receive_wxhb_req.tag3)
  return tag3_;
}
void receive_wxhb_req::set_tag3(::google::protobuf::int32 value) {
  set_has_tag3();
  tag3_ = value;
  // @@protoc_insertion_point(field_set:receive_wxhb_req.tag3)
}

// optional .mmStr info = 4;
bool receive_wxhb_req::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void receive_wxhb_req::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
void receive_wxhb_req::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
void receive_wxhb_req::clear_info() {
  if (info_ != NULL) info_->::mmStr::Clear();
  clear_has_info();
}
const ::mmStr& receive_wxhb_req::info() const {
  // @@protoc_insertion_point(field_get:receive_wxhb_req.info)
  return info_ != NULL ? *info_
                         : *::mmStr::internal_default_instance();
}
::mmStr* receive_wxhb_req::mutable_info() {
  set_has_info();
  if (info_ == NULL) {
    info_ = new ::mmStr;
  }
  // @@protoc_insertion_point(field_mutable:receive_wxhb_req.info)
  return info_;
}
::mmStr* receive_wxhb_req::release_info() {
  // @@protoc_insertion_point(field_release:receive_wxhb_req.info)
  clear_has_info();
  ::mmStr* temp = info_;
  info_ = NULL;
  return temp;
}
void receive_wxhb_req::set_allocated_info(::mmStr* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:receive_wxhb_req.info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int receive_wxhb_resp_TAG1_TAG1::kTag1FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

receive_wxhb_resp_TAG1_TAG1::receive_wxhb_resp_TAG1_TAG1()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:receive_wxhb_resp.TAG1.TAG1)
}
receive_wxhb_resp_TAG1_TAG1::receive_wxhb_resp_TAG1_TAG1(const receive_wxhb_resp_TAG1_TAG1& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tag1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tag1()) {
    tag1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag1_);
  }
  // @@protoc_insertion_point(copy_constructor:receive_wxhb_resp.TAG1.TAG1)
}

void receive_wxhb_resp_TAG1_TAG1::SharedCtor() {
  _cached_size_ = 0;
  tag1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

receive_wxhb_resp_TAG1_TAG1::~receive_wxhb_resp_TAG1_TAG1() {
  // @@protoc_insertion_point(destructor:receive_wxhb_resp.TAG1.TAG1)
  SharedDtor();
}

void receive_wxhb_resp_TAG1_TAG1::SharedDtor() {
  tag1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void receive_wxhb_resp_TAG1_TAG1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* receive_wxhb_resp_TAG1_TAG1::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const receive_wxhb_resp_TAG1_TAG1& receive_wxhb_resp_TAG1_TAG1::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

receive_wxhb_resp_TAG1_TAG1* receive_wxhb_resp_TAG1_TAG1::New(::google::protobuf::Arena* arena) const {
  receive_wxhb_resp_TAG1_TAG1* n = new receive_wxhb_resp_TAG1_TAG1;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void receive_wxhb_resp_TAG1_TAG1::Clear() {
// @@protoc_insertion_point(message_clear_start:receive_wxhb_resp.TAG1.TAG1)
  if (has_tag1()) {
    GOOGLE_DCHECK(!tag1_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*tag1_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool receive_wxhb_resp_TAG1_TAG1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:receive_wxhb_resp.TAG1.TAG1)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string tag1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag1().data(), this->tag1().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "receive_wxhb_resp.TAG1.TAG1.tag1");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:receive_wxhb_resp.TAG1.TAG1)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:receive_wxhb_resp.TAG1.TAG1)
  return false;
#undef DO_
}

void receive_wxhb_resp_TAG1_TAG1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:receive_wxhb_resp.TAG1.TAG1)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string tag1 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag1().data(), this->tag1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "receive_wxhb_resp.TAG1.TAG1.tag1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tag1(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:receive_wxhb_resp.TAG1.TAG1)
}

::google::protobuf::uint8* receive_wxhb_resp_TAG1_TAG1::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:receive_wxhb_resp.TAG1.TAG1)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string tag1 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag1().data(), this->tag1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "receive_wxhb_resp.TAG1.TAG1.tag1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tag1(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:receive_wxhb_resp.TAG1.TAG1)
  return target;
}

size_t receive_wxhb_resp_TAG1_TAG1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:receive_wxhb_resp.TAG1.TAG1)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string tag1 = 1;
  if (has_tag1()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tag1());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void receive_wxhb_resp_TAG1_TAG1::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:receive_wxhb_resp.TAG1.TAG1)
  GOOGLE_DCHECK_NE(&from, this);
  const receive_wxhb_resp_TAG1_TAG1* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const receive_wxhb_resp_TAG1_TAG1>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:receive_wxhb_resp.TAG1.TAG1)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:receive_wxhb_resp.TAG1.TAG1)
    MergeFrom(*source);
  }
}

void receive_wxhb_resp_TAG1_TAG1::MergeFrom(const receive_wxhb_resp_TAG1_TAG1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:receive_wxhb_resp.TAG1.TAG1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tag1()) {
    set_has_tag1();
    tag1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag1_);
  }
}

void receive_wxhb_resp_TAG1_TAG1::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:receive_wxhb_resp.TAG1.TAG1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void receive_wxhb_resp_TAG1_TAG1::CopyFrom(const receive_wxhb_resp_TAG1_TAG1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:receive_wxhb_resp.TAG1.TAG1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool receive_wxhb_resp_TAG1_TAG1::IsInitialized() const {
  return true;
}

void receive_wxhb_resp_TAG1_TAG1::Swap(receive_wxhb_resp_TAG1_TAG1* other) {
  if (other == this) return;
  InternalSwap(other);
}
void receive_wxhb_resp_TAG1_TAG1::InternalSwap(receive_wxhb_resp_TAG1_TAG1* other) {
  tag1_.Swap(&other->tag1_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata receive_wxhb_resp_TAG1_TAG1::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// receive_wxhb_resp_TAG1_TAG1

// optional string tag1 = 1;
bool receive_wxhb_resp_TAG1_TAG1::has_tag1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void receive_wxhb_resp_TAG1_TAG1::set_has_tag1() {
  _has_bits_[0] |= 0x00000001u;
}
void receive_wxhb_resp_TAG1_TAG1::clear_has_tag1() {
  _has_bits_[0] &= ~0x00000001u;
}
void receive_wxhb_resp_TAG1_TAG1::clear_tag1() {
  tag1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tag1();
}
const ::std::string& receive_wxhb_resp_TAG1_TAG1::tag1() const {
  // @@protoc_insertion_point(field_get:receive_wxhb_resp.TAG1.TAG1.tag1)
  return tag1_.GetNoArena();
}
void receive_wxhb_resp_TAG1_TAG1::set_tag1(const ::std::string& value) {
  set_has_tag1();
  tag1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:receive_wxhb_resp.TAG1.TAG1.tag1)
}
#if LANG_CXX11
void receive_wxhb_resp_TAG1_TAG1::set_tag1(::std::string&& value) {
  set_has_tag1();
  tag1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:receive_wxhb_resp.TAG1.TAG1.tag1)
}
#endif
void receive_wxhb_resp_TAG1_TAG1::set_tag1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tag1();
  tag1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:receive_wxhb_resp.TAG1.TAG1.tag1)
}
void receive_wxhb_resp_TAG1_TAG1::set_tag1(const char* value, size_t size) {
  set_has_tag1();
  tag1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:receive_wxhb_resp.TAG1.TAG1.tag1)
}
::std::string* receive_wxhb_resp_TAG1_TAG1::mutable_tag1() {
  set_has_tag1();
  // @@protoc_insertion_point(field_mutable:receive_wxhb_resp.TAG1.TAG1.tag1)
  return tag1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* receive_wxhb_resp_TAG1_TAG1::release_tag1() {
  // @@protoc_insertion_point(field_release:receive_wxhb_resp.TAG1.TAG1.tag1)
  clear_has_tag1();
  return tag1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void receive_wxhb_resp_TAG1_TAG1::set_allocated_tag1(::std::string* tag1) {
  if (tag1 != NULL) {
    set_has_tag1();
  } else {
    clear_has_tag1();
  }
  tag1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag1);
  // @@protoc_insertion_point(field_set_allocated:receive_wxhb_resp.TAG1.TAG1.tag1)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int receive_wxhb_resp_TAG1::kTag1FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

receive_wxhb_resp_TAG1::receive_wxhb_resp_TAG1()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:receive_wxhb_resp.TAG1)
}
receive_wxhb_resp_TAG1::receive_wxhb_resp_TAG1(const receive_wxhb_resp_TAG1& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tag1_ = from.tag1_;
  // @@protoc_insertion_point(copy_constructor:receive_wxhb_resp.TAG1)
}

void receive_wxhb_resp_TAG1::SharedCtor() {
  _cached_size_ = 0;
  tag1_ = 0;
}

receive_wxhb_resp_TAG1::~receive_wxhb_resp_TAG1() {
  // @@protoc_insertion_point(destructor:receive_wxhb_resp.TAG1)
  SharedDtor();
}

void receive_wxhb_resp_TAG1::SharedDtor() {
}

void receive_wxhb_resp_TAG1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* receive_wxhb_resp_TAG1::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const receive_wxhb_resp_TAG1& receive_wxhb_resp_TAG1::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

receive_wxhb_resp_TAG1* receive_wxhb_resp_TAG1::New(::google::protobuf::Arena* arena) const {
  receive_wxhb_resp_TAG1* n = new receive_wxhb_resp_TAG1;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void receive_wxhb_resp_TAG1::Clear() {
// @@protoc_insertion_point(message_clear_start:receive_wxhb_resp.TAG1)
  tag1_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool receive_wxhb_resp_TAG1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:receive_wxhb_resp.TAG1)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tag1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_tag1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:receive_wxhb_resp.TAG1)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:receive_wxhb_resp.TAG1)
  return false;
#undef DO_
}

void receive_wxhb_resp_TAG1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:receive_wxhb_resp.TAG1)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 tag1 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tag1(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:receive_wxhb_resp.TAG1)
}

::google::protobuf::uint8* receive_wxhb_resp_TAG1::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:receive_wxhb_resp.TAG1)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 tag1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tag1(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:receive_wxhb_resp.TAG1)
  return target;
}

size_t receive_wxhb_resp_TAG1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:receive_wxhb_resp.TAG1)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 tag1 = 1;
  if (has_tag1()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tag1());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void receive_wxhb_resp_TAG1::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:receive_wxhb_resp.TAG1)
  GOOGLE_DCHECK_NE(&from, this);
  const receive_wxhb_resp_TAG1* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const receive_wxhb_resp_TAG1>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:receive_wxhb_resp.TAG1)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:receive_wxhb_resp.TAG1)
    MergeFrom(*source);
  }
}

void receive_wxhb_resp_TAG1::MergeFrom(const receive_wxhb_resp_TAG1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:receive_wxhb_resp.TAG1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tag1()) {
    set_tag1(from.tag1());
  }
}

void receive_wxhb_resp_TAG1::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:receive_wxhb_resp.TAG1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void receive_wxhb_resp_TAG1::CopyFrom(const receive_wxhb_resp_TAG1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:receive_wxhb_resp.TAG1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool receive_wxhb_resp_TAG1::IsInitialized() const {
  return true;
}

void receive_wxhb_resp_TAG1::Swap(receive_wxhb_resp_TAG1* other) {
  if (other == this) return;
  InternalSwap(other);
}
void receive_wxhb_resp_TAG1::InternalSwap(receive_wxhb_resp_TAG1* other) {
  std::swap(tag1_, other->tag1_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata receive_wxhb_resp_TAG1::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// receive_wxhb_resp_TAG1

// optional int32 tag1 = 1;
bool receive_wxhb_resp_TAG1::has_tag1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void receive_wxhb_resp_TAG1::set_has_tag1() {
  _has_bits_[0] |= 0x00000001u;
}
void receive_wxhb_resp_TAG1::clear_has_tag1() {
  _has_bits_[0] &= ~0x00000001u;
}
void receive_wxhb_resp_TAG1::clear_tag1() {
  tag1_ = 0;
  clear_has_tag1();
}
::google::protobuf::int32 receive_wxhb_resp_TAG1::tag1() const {
  // @@protoc_insertion_point(field_get:receive_wxhb_resp.TAG1.tag1)
  return tag1_;
}
void receive_wxhb_resp_TAG1::set_tag1(::google::protobuf::int32 value) {
  set_has_tag1();
  tag1_ = value;
  // @@protoc_insertion_point(field_set:receive_wxhb_resp.TAG1.tag1)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int receive_wxhb_resp::kTag1FieldNumber;
const int receive_wxhb_resp::kHbInfoFieldNumber;
const int receive_wxhb_resp::kCmdFieldNumber;
const int receive_wxhb_resp::kRetCodeFieldNumber;
const int receive_wxhb_resp::kRetMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

receive_wxhb_resp::receive_wxhb_resp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:receive_wxhb_resp)
}
receive_wxhb_resp::receive_wxhb_resp(const receive_wxhb_resp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ret_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ret_msg()) {
    ret_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_msg_);
  }
  if (from.has_tag1()) {
    tag1_ = new ::receive_wxhb_resp_TAG1(*from.tag1_);
  } else {
    tag1_ = NULL;
  }
  if (from.has_hb_info()) {
    hb_info_ = new ::mmStr(*from.hb_info_);
  } else {
    hb_info_ = NULL;
  }
  ::memcpy(&cmd_, &from.cmd_,
    reinterpret_cast<char*>(&ret_code_) -
    reinterpret_cast<char*>(&cmd_) + sizeof(ret_code_));
  // @@protoc_insertion_point(copy_constructor:receive_wxhb_resp)
}

void receive_wxhb_resp::SharedCtor() {
  _cached_size_ = 0;
  ret_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tag1_, 0, reinterpret_cast<char*>(&ret_code_) -
    reinterpret_cast<char*>(&tag1_) + sizeof(ret_code_));
}

receive_wxhb_resp::~receive_wxhb_resp() {
  // @@protoc_insertion_point(destructor:receive_wxhb_resp)
  SharedDtor();
}

void receive_wxhb_resp::SharedDtor() {
  ret_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete tag1_;
  }
  if (this != internal_default_instance()) {
    delete hb_info_;
  }
}

void receive_wxhb_resp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* receive_wxhb_resp::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const receive_wxhb_resp& receive_wxhb_resp::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

receive_wxhb_resp* receive_wxhb_resp::New(::google::protobuf::Arena* arena) const {
  receive_wxhb_resp* n = new receive_wxhb_resp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void receive_wxhb_resp::Clear() {
// @@protoc_insertion_point(message_clear_start:receive_wxhb_resp)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_ret_msg()) {
      GOOGLE_DCHECK(!ret_msg_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ret_msg_.UnsafeRawStringPointer())->clear();
    }
    if (has_tag1()) {
      GOOGLE_DCHECK(tag1_ != NULL);
      tag1_->::receive_wxhb_resp_TAG1::Clear();
    }
    if (has_hb_info()) {
      GOOGLE_DCHECK(hb_info_ != NULL);
      hb_info_->::mmStr::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 24u) {
    ::memset(&cmd_, 0, reinterpret_cast<char*>(&ret_code_) -
      reinterpret_cast<char*>(&cmd_) + sizeof(ret_code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool receive_wxhb_resp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:receive_wxhb_resp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .receive_wxhb_resp.TAG1 tag1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tag1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mmStr hb_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hb_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cmd = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_cmd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ret_code = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_ret_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ret_msg = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ret_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ret_msg().data(), this->ret_msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "receive_wxhb_resp.ret_msg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:receive_wxhb_resp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:receive_wxhb_resp)
  return false;
#undef DO_
}

void receive_wxhb_resp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:receive_wxhb_resp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .receive_wxhb_resp.TAG1 tag1 = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->tag1_, output);
  }

  // optional .mmStr hb_info = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->hb_info_, output);
  }

  // optional int32 cmd = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cmd(), output);
  }

  // optional int32 ret_code = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ret_code(), output);
  }

  // optional string ret_msg = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ret_msg().data(), this->ret_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "receive_wxhb_resp.ret_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->ret_msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:receive_wxhb_resp)
}

::google::protobuf::uint8* receive_wxhb_resp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:receive_wxhb_resp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .receive_wxhb_resp.TAG1 tag1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->tag1_, deterministic, target);
  }

  // optional .mmStr hb_info = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->hb_info_, deterministic, target);
  }

  // optional int32 cmd = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cmd(), target);
  }

  // optional int32 ret_code = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ret_code(), target);
  }

  // optional string ret_msg = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ret_msg().data(), this->ret_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "receive_wxhb_resp.ret_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->ret_msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:receive_wxhb_resp)
  return target;
}

size_t receive_wxhb_resp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:receive_wxhb_resp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string ret_msg = 7;
    if (has_ret_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ret_msg());
    }

    // optional .receive_wxhb_resp.TAG1 tag1 = 1;
    if (has_tag1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->tag1_);
    }

    // optional .mmStr hb_info = 2;
    if (has_hb_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->hb_info_);
    }

    // optional int32 cmd = 5;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }

    // optional int32 ret_code = 6;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void receive_wxhb_resp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:receive_wxhb_resp)
  GOOGLE_DCHECK_NE(&from, this);
  const receive_wxhb_resp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const receive_wxhb_resp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:receive_wxhb_resp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:receive_wxhb_resp)
    MergeFrom(*source);
  }
}

void receive_wxhb_resp::MergeFrom(const receive_wxhb_resp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:receive_wxhb_resp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ret_msg();
      ret_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_msg_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_tag1()->::receive_wxhb_resp_TAG1::MergeFrom(from.tag1());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_hb_info()->::mmStr::MergeFrom(from.hb_info());
    }
    if (cached_has_bits & 0x00000008u) {
      cmd_ = from.cmd_;
    }
    if (cached_has_bits & 0x00000010u) {
      ret_code_ = from.ret_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void receive_wxhb_resp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:receive_wxhb_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void receive_wxhb_resp::CopyFrom(const receive_wxhb_resp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:receive_wxhb_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool receive_wxhb_resp::IsInitialized() const {
  return true;
}

void receive_wxhb_resp::Swap(receive_wxhb_resp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void receive_wxhb_resp::InternalSwap(receive_wxhb_resp* other) {
  ret_msg_.Swap(&other->ret_msg_);
  std::swap(tag1_, other->tag1_);
  std::swap(hb_info_, other->hb_info_);
  std::swap(cmd_, other->cmd_);
  std::swap(ret_code_, other->ret_code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata receive_wxhb_resp::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// receive_wxhb_resp

// optional .receive_wxhb_resp.TAG1 tag1 = 1;
bool receive_wxhb_resp::has_tag1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void receive_wxhb_resp::set_has_tag1() {
  _has_bits_[0] |= 0x00000002u;
}
void receive_wxhb_resp::clear_has_tag1() {
  _has_bits_[0] &= ~0x00000002u;
}
void receive_wxhb_resp::clear_tag1() {
  if (tag1_ != NULL) tag1_->::receive_wxhb_resp_TAG1::Clear();
  clear_has_tag1();
}
const ::receive_wxhb_resp_TAG1& receive_wxhb_resp::tag1() const {
  // @@protoc_insertion_point(field_get:receive_wxhb_resp.tag1)
  return tag1_ != NULL ? *tag1_
                         : *::receive_wxhb_resp_TAG1::internal_default_instance();
}
::receive_wxhb_resp_TAG1* receive_wxhb_resp::mutable_tag1() {
  set_has_tag1();
  if (tag1_ == NULL) {
    tag1_ = new ::receive_wxhb_resp_TAG1;
  }
  // @@protoc_insertion_point(field_mutable:receive_wxhb_resp.tag1)
  return tag1_;
}
::receive_wxhb_resp_TAG1* receive_wxhb_resp::release_tag1() {
  // @@protoc_insertion_point(field_release:receive_wxhb_resp.tag1)
  clear_has_tag1();
  ::receive_wxhb_resp_TAG1* temp = tag1_;
  tag1_ = NULL;
  return temp;
}
void receive_wxhb_resp::set_allocated_tag1(::receive_wxhb_resp_TAG1* tag1) {
  delete tag1_;
  tag1_ = tag1;
  if (tag1) {
    set_has_tag1();
  } else {
    clear_has_tag1();
  }
  // @@protoc_insertion_point(field_set_allocated:receive_wxhb_resp.tag1)
}

// optional .mmStr hb_info = 2;
bool receive_wxhb_resp::has_hb_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void receive_wxhb_resp::set_has_hb_info() {
  _has_bits_[0] |= 0x00000004u;
}
void receive_wxhb_resp::clear_has_hb_info() {
  _has_bits_[0] &= ~0x00000004u;
}
void receive_wxhb_resp::clear_hb_info() {
  if (hb_info_ != NULL) hb_info_->::mmStr::Clear();
  clear_has_hb_info();
}
const ::mmStr& receive_wxhb_resp::hb_info() const {
  // @@protoc_insertion_point(field_get:receive_wxhb_resp.hb_info)
  return hb_info_ != NULL ? *hb_info_
                         : *::mmStr::internal_default_instance();
}
::mmStr* receive_wxhb_resp::mutable_hb_info() {
  set_has_hb_info();
  if (hb_info_ == NULL) {
    hb_info_ = new ::mmStr;
  }
  // @@protoc_insertion_point(field_mutable:receive_wxhb_resp.hb_info)
  return hb_info_;
}
::mmStr* receive_wxhb_resp::release_hb_info() {
  // @@protoc_insertion_point(field_release:receive_wxhb_resp.hb_info)
  clear_has_hb_info();
  ::mmStr* temp = hb_info_;
  hb_info_ = NULL;
  return temp;
}
void receive_wxhb_resp::set_allocated_hb_info(::mmStr* hb_info) {
  delete hb_info_;
  hb_info_ = hb_info;
  if (hb_info) {
    set_has_hb_info();
  } else {
    clear_has_hb_info();
  }
  // @@protoc_insertion_point(field_set_allocated:receive_wxhb_resp.hb_info)
}

// optional int32 cmd = 5;
bool receive_wxhb_resp::has_cmd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void receive_wxhb_resp::set_has_cmd() {
  _has_bits_[0] |= 0x00000008u;
}
void receive_wxhb_resp::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000008u;
}
void receive_wxhb_resp::clear_cmd() {
  cmd_ = 0;
  clear_has_cmd();
}
::google::protobuf::int32 receive_wxhb_resp::cmd() const {
  // @@protoc_insertion_point(field_get:receive_wxhb_resp.cmd)
  return cmd_;
}
void receive_wxhb_resp::set_cmd(::google::protobuf::int32 value) {
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:receive_wxhb_resp.cmd)
}

// optional int32 ret_code = 6;
bool receive_wxhb_resp::has_ret_code() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void receive_wxhb_resp::set_has_ret_code() {
  _has_bits_[0] |= 0x00000010u;
}
void receive_wxhb_resp::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000010u;
}
void receive_wxhb_resp::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
::google::protobuf::int32 receive_wxhb_resp::ret_code() const {
  // @@protoc_insertion_point(field_get:receive_wxhb_resp.ret_code)
  return ret_code_;
}
void receive_wxhb_resp::set_ret_code(::google::protobuf::int32 value) {
  set_has_ret_code();
  ret_code_ = value;
  // @@protoc_insertion_point(field_set:receive_wxhb_resp.ret_code)
}

// optional string ret_msg = 7;
bool receive_wxhb_resp::has_ret_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void receive_wxhb_resp::set_has_ret_msg() {
  _has_bits_[0] |= 0x00000001u;
}
void receive_wxhb_resp::clear_has_ret_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
void receive_wxhb_resp::clear_ret_msg() {
  ret_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ret_msg();
}
const ::std::string& receive_wxhb_resp::ret_msg() const {
  // @@protoc_insertion_point(field_get:receive_wxhb_resp.ret_msg)
  return ret_msg_.GetNoArena();
}
void receive_wxhb_resp::set_ret_msg(const ::std::string& value) {
  set_has_ret_msg();
  ret_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:receive_wxhb_resp.ret_msg)
}
#if LANG_CXX11
void receive_wxhb_resp::set_ret_msg(::std::string&& value) {
  set_has_ret_msg();
  ret_msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:receive_wxhb_resp.ret_msg)
}
#endif
void receive_wxhb_resp::set_ret_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ret_msg();
  ret_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:receive_wxhb_resp.ret_msg)
}
void receive_wxhb_resp::set_ret_msg(const char* value, size_t size) {
  set_has_ret_msg();
  ret_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:receive_wxhb_resp.ret_msg)
}
::std::string* receive_wxhb_resp::mutable_ret_msg() {
  set_has_ret_msg();
  // @@protoc_insertion_point(field_mutable:receive_wxhb_resp.ret_msg)
  return ret_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* receive_wxhb_resp::release_ret_msg() {
  // @@protoc_insertion_point(field_release:receive_wxhb_resp.ret_msg)
  clear_has_ret_msg();
  return ret_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void receive_wxhb_resp::set_allocated_ret_msg(::std::string* ret_msg) {
  if (ret_msg != NULL) {
    set_has_ret_msg();
  } else {
    clear_has_ret_msg();
  }
  ret_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ret_msg);
  // @@protoc_insertion_point(field_set_allocated:receive_wxhb_resp.ret_msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int open_wxhb_req::kLoginFieldNumber;
const int open_wxhb_req::kCmdFieldNumber;
const int open_wxhb_req::kTag3FieldNumber;
const int open_wxhb_req::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

open_wxhb_req::open_wxhb_req()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:open_wxhb_req)
}
open_wxhb_req::open_wxhb_req(const open_wxhb_req& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_login()) {
    login_ = new ::LoginInfo(*from.login_);
  } else {
    login_ = NULL;
  }
  if (from.has_info()) {
    info_ = new ::mmStr(*from.info_);
  } else {
    info_ = NULL;
  }
  ::memcpy(&cmd_, &from.cmd_,
    reinterpret_cast<char*>(&tag3_) -
    reinterpret_cast<char*>(&cmd_) + sizeof(tag3_));
  // @@protoc_insertion_point(copy_constructor:open_wxhb_req)
}

void open_wxhb_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&login_, 0, reinterpret_cast<char*>(&tag3_) -
    reinterpret_cast<char*>(&login_) + sizeof(tag3_));
}

open_wxhb_req::~open_wxhb_req() {
  // @@protoc_insertion_point(destructor:open_wxhb_req)
  SharedDtor();
}

void open_wxhb_req::SharedDtor() {
  if (this != internal_default_instance()) {
    delete login_;
  }
  if (this != internal_default_instance()) {
    delete info_;
  }
}

void open_wxhb_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* open_wxhb_req::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const open_wxhb_req& open_wxhb_req::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

open_wxhb_req* open_wxhb_req::New(::google::protobuf::Arena* arena) const {
  open_wxhb_req* n = new open_wxhb_req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void open_wxhb_req::Clear() {
// @@protoc_insertion_point(message_clear_start:open_wxhb_req)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_login()) {
      GOOGLE_DCHECK(login_ != NULL);
      login_->::LoginInfo::Clear();
    }
    if (has_info()) {
      GOOGLE_DCHECK(info_ != NULL);
      info_->::mmStr::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&cmd_, 0, reinterpret_cast<char*>(&tag3_) -
      reinterpret_cast<char*>(&cmd_) + sizeof(tag3_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool open_wxhb_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:open_wxhb_req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .LoginInfo login = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cmd = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_cmd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tag3 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_tag3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mmStr info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:open_wxhb_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:open_wxhb_req)
  return false;
#undef DO_
}

void open_wxhb_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:open_wxhb_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .LoginInfo login = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->login_, output);
  }

  // optional int32 cmd = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cmd(), output);
  }

  // optional int32 tag3 = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tag3(), output);
  }

  // optional .mmStr info = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:open_wxhb_req)
}

::google::protobuf::uint8* open_wxhb_req::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:open_wxhb_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .LoginInfo login = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->login_, deterministic, target);
  }

  // optional int32 cmd = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cmd(), target);
  }

  // optional int32 tag3 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tag3(), target);
  }

  // optional .mmStr info = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->info_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:open_wxhb_req)
  return target;
}

size_t open_wxhb_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:open_wxhb_req)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .LoginInfo login = 1;
    if (has_login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->login_);
    }

    // optional .mmStr info = 4;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->info_);
    }

    // optional int32 cmd = 2;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }

    // optional int32 tag3 = 3;
    if (has_tag3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag3());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void open_wxhb_req::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:open_wxhb_req)
  GOOGLE_DCHECK_NE(&from, this);
  const open_wxhb_req* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const open_wxhb_req>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:open_wxhb_req)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:open_wxhb_req)
    MergeFrom(*source);
  }
}

void open_wxhb_req::MergeFrom(const open_wxhb_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:open_wxhb_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_login()->::LoginInfo::MergeFrom(from.login());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_info()->::mmStr::MergeFrom(from.info());
    }
    if (cached_has_bits & 0x00000004u) {
      cmd_ = from.cmd_;
    }
    if (cached_has_bits & 0x00000008u) {
      tag3_ = from.tag3_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void open_wxhb_req::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:open_wxhb_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void open_wxhb_req::CopyFrom(const open_wxhb_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_wxhb_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool open_wxhb_req::IsInitialized() const {
  return true;
}

void open_wxhb_req::Swap(open_wxhb_req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void open_wxhb_req::InternalSwap(open_wxhb_req* other) {
  std::swap(login_, other->login_);
  std::swap(info_, other->info_);
  std::swap(cmd_, other->cmd_);
  std::swap(tag3_, other->tag3_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata open_wxhb_req::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// open_wxhb_req

// optional .LoginInfo login = 1;
bool open_wxhb_req::has_login() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void open_wxhb_req::set_has_login() {
  _has_bits_[0] |= 0x00000001u;
}
void open_wxhb_req::clear_has_login() {
  _has_bits_[0] &= ~0x00000001u;
}
void open_wxhb_req::clear_login() {
  if (login_ != NULL) login_->::LoginInfo::Clear();
  clear_has_login();
}
const ::LoginInfo& open_wxhb_req::login() const {
  // @@protoc_insertion_point(field_get:open_wxhb_req.login)
  return login_ != NULL ? *login_
                         : *::LoginInfo::internal_default_instance();
}
::LoginInfo* open_wxhb_req::mutable_login() {
  set_has_login();
  if (login_ == NULL) {
    login_ = new ::LoginInfo;
  }
  // @@protoc_insertion_point(field_mutable:open_wxhb_req.login)
  return login_;
}
::LoginInfo* open_wxhb_req::release_login() {
  // @@protoc_insertion_point(field_release:open_wxhb_req.login)
  clear_has_login();
  ::LoginInfo* temp = login_;
  login_ = NULL;
  return temp;
}
void open_wxhb_req::set_allocated_login(::LoginInfo* login) {
  delete login_;
  login_ = login;
  if (login) {
    set_has_login();
  } else {
    clear_has_login();
  }
  // @@protoc_insertion_point(field_set_allocated:open_wxhb_req.login)
}

// optional int32 cmd = 2;
bool open_wxhb_req::has_cmd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void open_wxhb_req::set_has_cmd() {
  _has_bits_[0] |= 0x00000004u;
}
void open_wxhb_req::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000004u;
}
void open_wxhb_req::clear_cmd() {
  cmd_ = 0;
  clear_has_cmd();
}
::google::protobuf::int32 open_wxhb_req::cmd() const {
  // @@protoc_insertion_point(field_get:open_wxhb_req.cmd)
  return cmd_;
}
void open_wxhb_req::set_cmd(::google::protobuf::int32 value) {
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:open_wxhb_req.cmd)
}

// optional int32 tag3 = 3;
bool open_wxhb_req::has_tag3() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void open_wxhb_req::set_has_tag3() {
  _has_bits_[0] |= 0x00000008u;
}
void open_wxhb_req::clear_has_tag3() {
  _has_bits_[0] &= ~0x00000008u;
}
void open_wxhb_req::clear_tag3() {
  tag3_ = 0;
  clear_has_tag3();
}
::google::protobuf::int32 open_wxhb_req::tag3() const {
  // @@protoc_insertion_point(field_get:open_wxhb_req.tag3)
  return tag3_;
}
void open_wxhb_req::set_tag3(::google::protobuf::int32 value) {
  set_has_tag3();
  tag3_ = value;
  // @@protoc_insertion_point(field_set:open_wxhb_req.tag3)
}

// optional .mmStr info = 4;
bool open_wxhb_req::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void open_wxhb_req::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
void open_wxhb_req::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
void open_wxhb_req::clear_info() {
  if (info_ != NULL) info_->::mmStr::Clear();
  clear_has_info();
}
const ::mmStr& open_wxhb_req::info() const {
  // @@protoc_insertion_point(field_get:open_wxhb_req.info)
  return info_ != NULL ? *info_
                         : *::mmStr::internal_default_instance();
}
::mmStr* open_wxhb_req::mutable_info() {
  set_has_info();
  if (info_ == NULL) {
    info_ = new ::mmStr;
  }
  // @@protoc_insertion_point(field_mutable:open_wxhb_req.info)
  return info_;
}
::mmStr* open_wxhb_req::release_info() {
  // @@protoc_insertion_point(field_release:open_wxhb_req.info)
  clear_has_info();
  ::mmStr* temp = info_;
  info_ = NULL;
  return temp;
}
void open_wxhb_req::set_allocated_info(::mmStr* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:open_wxhb_req.info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int open_wxhb_resp_TAG1_TAG1::kTag1FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

open_wxhb_resp_TAG1_TAG1::open_wxhb_resp_TAG1_TAG1()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:open_wxhb_resp.TAG1.TAG1)
}
open_wxhb_resp_TAG1_TAG1::open_wxhb_resp_TAG1_TAG1(const open_wxhb_resp_TAG1_TAG1& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tag1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tag1()) {
    tag1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag1_);
  }
  // @@protoc_insertion_point(copy_constructor:open_wxhb_resp.TAG1.TAG1)
}

void open_wxhb_resp_TAG1_TAG1::SharedCtor() {
  _cached_size_ = 0;
  tag1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

open_wxhb_resp_TAG1_TAG1::~open_wxhb_resp_TAG1_TAG1() {
  // @@protoc_insertion_point(destructor:open_wxhb_resp.TAG1.TAG1)
  SharedDtor();
}

void open_wxhb_resp_TAG1_TAG1::SharedDtor() {
  tag1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void open_wxhb_resp_TAG1_TAG1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* open_wxhb_resp_TAG1_TAG1::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const open_wxhb_resp_TAG1_TAG1& open_wxhb_resp_TAG1_TAG1::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

open_wxhb_resp_TAG1_TAG1* open_wxhb_resp_TAG1_TAG1::New(::google::protobuf::Arena* arena) const {
  open_wxhb_resp_TAG1_TAG1* n = new open_wxhb_resp_TAG1_TAG1;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void open_wxhb_resp_TAG1_TAG1::Clear() {
// @@protoc_insertion_point(message_clear_start:open_wxhb_resp.TAG1.TAG1)
  if (has_tag1()) {
    GOOGLE_DCHECK(!tag1_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*tag1_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool open_wxhb_resp_TAG1_TAG1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:open_wxhb_resp.TAG1.TAG1)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string tag1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag1().data(), this->tag1().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "open_wxhb_resp.TAG1.TAG1.tag1");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:open_wxhb_resp.TAG1.TAG1)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:open_wxhb_resp.TAG1.TAG1)
  return false;
#undef DO_
}

void open_wxhb_resp_TAG1_TAG1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:open_wxhb_resp.TAG1.TAG1)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string tag1 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag1().data(), this->tag1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "open_wxhb_resp.TAG1.TAG1.tag1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tag1(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:open_wxhb_resp.TAG1.TAG1)
}

::google::protobuf::uint8* open_wxhb_resp_TAG1_TAG1::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:open_wxhb_resp.TAG1.TAG1)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string tag1 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag1().data(), this->tag1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "open_wxhb_resp.TAG1.TAG1.tag1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tag1(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:open_wxhb_resp.TAG1.TAG1)
  return target;
}

size_t open_wxhb_resp_TAG1_TAG1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:open_wxhb_resp.TAG1.TAG1)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string tag1 = 1;
  if (has_tag1()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tag1());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void open_wxhb_resp_TAG1_TAG1::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:open_wxhb_resp.TAG1.TAG1)
  GOOGLE_DCHECK_NE(&from, this);
  const open_wxhb_resp_TAG1_TAG1* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const open_wxhb_resp_TAG1_TAG1>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:open_wxhb_resp.TAG1.TAG1)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:open_wxhb_resp.TAG1.TAG1)
    MergeFrom(*source);
  }
}

void open_wxhb_resp_TAG1_TAG1::MergeFrom(const open_wxhb_resp_TAG1_TAG1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:open_wxhb_resp.TAG1.TAG1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tag1()) {
    set_has_tag1();
    tag1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag1_);
  }
}

void open_wxhb_resp_TAG1_TAG1::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:open_wxhb_resp.TAG1.TAG1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void open_wxhb_resp_TAG1_TAG1::CopyFrom(const open_wxhb_resp_TAG1_TAG1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_wxhb_resp.TAG1.TAG1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool open_wxhb_resp_TAG1_TAG1::IsInitialized() const {
  return true;
}

void open_wxhb_resp_TAG1_TAG1::Swap(open_wxhb_resp_TAG1_TAG1* other) {
  if (other == this) return;
  InternalSwap(other);
}
void open_wxhb_resp_TAG1_TAG1::InternalSwap(open_wxhb_resp_TAG1_TAG1* other) {
  tag1_.Swap(&other->tag1_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata open_wxhb_resp_TAG1_TAG1::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// open_wxhb_resp_TAG1_TAG1

// optional string tag1 = 1;
bool open_wxhb_resp_TAG1_TAG1::has_tag1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void open_wxhb_resp_TAG1_TAG1::set_has_tag1() {
  _has_bits_[0] |= 0x00000001u;
}
void open_wxhb_resp_TAG1_TAG1::clear_has_tag1() {
  _has_bits_[0] &= ~0x00000001u;
}
void open_wxhb_resp_TAG1_TAG1::clear_tag1() {
  tag1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tag1();
}
const ::std::string& open_wxhb_resp_TAG1_TAG1::tag1() const {
  // @@protoc_insertion_point(field_get:open_wxhb_resp.TAG1.TAG1.tag1)
  return tag1_.GetNoArena();
}
void open_wxhb_resp_TAG1_TAG1::set_tag1(const ::std::string& value) {
  set_has_tag1();
  tag1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:open_wxhb_resp.TAG1.TAG1.tag1)
}
#if LANG_CXX11
void open_wxhb_resp_TAG1_TAG1::set_tag1(::std::string&& value) {
  set_has_tag1();
  tag1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:open_wxhb_resp.TAG1.TAG1.tag1)
}
#endif
void open_wxhb_resp_TAG1_TAG1::set_tag1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tag1();
  tag1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:open_wxhb_resp.TAG1.TAG1.tag1)
}
void open_wxhb_resp_TAG1_TAG1::set_tag1(const char* value, size_t size) {
  set_has_tag1();
  tag1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:open_wxhb_resp.TAG1.TAG1.tag1)
}
::std::string* open_wxhb_resp_TAG1_TAG1::mutable_tag1() {
  set_has_tag1();
  // @@protoc_insertion_point(field_mutable:open_wxhb_resp.TAG1.TAG1.tag1)
  return tag1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* open_wxhb_resp_TAG1_TAG1::release_tag1() {
  // @@protoc_insertion_point(field_release:open_wxhb_resp.TAG1.TAG1.tag1)
  clear_has_tag1();
  return tag1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void open_wxhb_resp_TAG1_TAG1::set_allocated_tag1(::std::string* tag1) {
  if (tag1 != NULL) {
    set_has_tag1();
  } else {
    clear_has_tag1();
  }
  tag1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag1);
  // @@protoc_insertion_point(field_set_allocated:open_wxhb_resp.TAG1.TAG1.tag1)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int open_wxhb_resp_TAG1::kTag1FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

open_wxhb_resp_TAG1::open_wxhb_resp_TAG1()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:open_wxhb_resp.TAG1)
}
open_wxhb_resp_TAG1::open_wxhb_resp_TAG1(const open_wxhb_resp_TAG1& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tag1_ = from.tag1_;
  // @@protoc_insertion_point(copy_constructor:open_wxhb_resp.TAG1)
}

void open_wxhb_resp_TAG1::SharedCtor() {
  _cached_size_ = 0;
  tag1_ = 0;
}

open_wxhb_resp_TAG1::~open_wxhb_resp_TAG1() {
  // @@protoc_insertion_point(destructor:open_wxhb_resp.TAG1)
  SharedDtor();
}

void open_wxhb_resp_TAG1::SharedDtor() {
}

void open_wxhb_resp_TAG1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* open_wxhb_resp_TAG1::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const open_wxhb_resp_TAG1& open_wxhb_resp_TAG1::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

open_wxhb_resp_TAG1* open_wxhb_resp_TAG1::New(::google::protobuf::Arena* arena) const {
  open_wxhb_resp_TAG1* n = new open_wxhb_resp_TAG1;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void open_wxhb_resp_TAG1::Clear() {
// @@protoc_insertion_point(message_clear_start:open_wxhb_resp.TAG1)
  tag1_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool open_wxhb_resp_TAG1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:open_wxhb_resp.TAG1)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tag1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_tag1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:open_wxhb_resp.TAG1)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:open_wxhb_resp.TAG1)
  return false;
#undef DO_
}

void open_wxhb_resp_TAG1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:open_wxhb_resp.TAG1)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 tag1 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tag1(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:open_wxhb_resp.TAG1)
}

::google::protobuf::uint8* open_wxhb_resp_TAG1::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:open_wxhb_resp.TAG1)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 tag1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tag1(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:open_wxhb_resp.TAG1)
  return target;
}

size_t open_wxhb_resp_TAG1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:open_wxhb_resp.TAG1)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 tag1 = 1;
  if (has_tag1()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tag1());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void open_wxhb_resp_TAG1::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:open_wxhb_resp.TAG1)
  GOOGLE_DCHECK_NE(&from, this);
  const open_wxhb_resp_TAG1* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const open_wxhb_resp_TAG1>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:open_wxhb_resp.TAG1)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:open_wxhb_resp.TAG1)
    MergeFrom(*source);
  }
}

void open_wxhb_resp_TAG1::MergeFrom(const open_wxhb_resp_TAG1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:open_wxhb_resp.TAG1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tag1()) {
    set_tag1(from.tag1());
  }
}

void open_wxhb_resp_TAG1::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:open_wxhb_resp.TAG1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void open_wxhb_resp_TAG1::CopyFrom(const open_wxhb_resp_TAG1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_wxhb_resp.TAG1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool open_wxhb_resp_TAG1::IsInitialized() const {
  return true;
}

void open_wxhb_resp_TAG1::Swap(open_wxhb_resp_TAG1* other) {
  if (other == this) return;
  InternalSwap(other);
}
void open_wxhb_resp_TAG1::InternalSwap(open_wxhb_resp_TAG1* other) {
  std::swap(tag1_, other->tag1_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata open_wxhb_resp_TAG1::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// open_wxhb_resp_TAG1

// optional int32 tag1 = 1;
bool open_wxhb_resp_TAG1::has_tag1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void open_wxhb_resp_TAG1::set_has_tag1() {
  _has_bits_[0] |= 0x00000001u;
}
void open_wxhb_resp_TAG1::clear_has_tag1() {
  _has_bits_[0] &= ~0x00000001u;
}
void open_wxhb_resp_TAG1::clear_tag1() {
  tag1_ = 0;
  clear_has_tag1();
}
::google::protobuf::int32 open_wxhb_resp_TAG1::tag1() const {
  // @@protoc_insertion_point(field_get:open_wxhb_resp.TAG1.tag1)
  return tag1_;
}
void open_wxhb_resp_TAG1::set_tag1(::google::protobuf::int32 value) {
  set_has_tag1();
  tag1_ = value;
  // @@protoc_insertion_point(field_set:open_wxhb_resp.TAG1.tag1)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int open_wxhb_resp::kTag1FieldNumber;
const int open_wxhb_resp::kResFieldNumber;
const int open_wxhb_resp::kCmdFieldNumber;
const int open_wxhb_resp::kRetCodeFieldNumber;
const int open_wxhb_resp::kRetMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

open_wxhb_resp::open_wxhb_resp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:open_wxhb_resp)
}
open_wxhb_resp::open_wxhb_resp(const open_wxhb_resp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ret_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ret_msg()) {
    ret_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_msg_);
  }
  if (from.has_tag1()) {
    tag1_ = new ::open_wxhb_resp_TAG1(*from.tag1_);
  } else {
    tag1_ = NULL;
  }
  if (from.has_res()) {
    res_ = new ::mmStr(*from.res_);
  } else {
    res_ = NULL;
  }
  ::memcpy(&cmd_, &from.cmd_,
    reinterpret_cast<char*>(&ret_code_) -
    reinterpret_cast<char*>(&cmd_) + sizeof(ret_code_));
  // @@protoc_insertion_point(copy_constructor:open_wxhb_resp)
}

void open_wxhb_resp::SharedCtor() {
  _cached_size_ = 0;
  ret_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tag1_, 0, reinterpret_cast<char*>(&ret_code_) -
    reinterpret_cast<char*>(&tag1_) + sizeof(ret_code_));
}

open_wxhb_resp::~open_wxhb_resp() {
  // @@protoc_insertion_point(destructor:open_wxhb_resp)
  SharedDtor();
}

void open_wxhb_resp::SharedDtor() {
  ret_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete tag1_;
  }
  if (this != internal_default_instance()) {
    delete res_;
  }
}

void open_wxhb_resp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* open_wxhb_resp::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const open_wxhb_resp& open_wxhb_resp::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

open_wxhb_resp* open_wxhb_resp::New(::google::protobuf::Arena* arena) const {
  open_wxhb_resp* n = new open_wxhb_resp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void open_wxhb_resp::Clear() {
// @@protoc_insertion_point(message_clear_start:open_wxhb_resp)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_ret_msg()) {
      GOOGLE_DCHECK(!ret_msg_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ret_msg_.UnsafeRawStringPointer())->clear();
    }
    if (has_tag1()) {
      GOOGLE_DCHECK(tag1_ != NULL);
      tag1_->::open_wxhb_resp_TAG1::Clear();
    }
    if (has_res()) {
      GOOGLE_DCHECK(res_ != NULL);
      res_->::mmStr::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 24u) {
    ::memset(&cmd_, 0, reinterpret_cast<char*>(&ret_code_) -
      reinterpret_cast<char*>(&cmd_) + sizeof(ret_code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool open_wxhb_resp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:open_wxhb_resp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .open_wxhb_resp.TAG1 tag1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tag1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mmStr res = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_res()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cmd = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_cmd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ret_code = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_ret_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ret_msg = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ret_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ret_msg().data(), this->ret_msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "open_wxhb_resp.ret_msg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:open_wxhb_resp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:open_wxhb_resp)
  return false;
#undef DO_
}

void open_wxhb_resp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:open_wxhb_resp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .open_wxhb_resp.TAG1 tag1 = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->tag1_, output);
  }

  // optional .mmStr res = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->res_, output);
  }

  // optional int32 cmd = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cmd(), output);
  }

  // optional int32 ret_code = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ret_code(), output);
  }

  // optional string ret_msg = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ret_msg().data(), this->ret_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "open_wxhb_resp.ret_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->ret_msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:open_wxhb_resp)
}

::google::protobuf::uint8* open_wxhb_resp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:open_wxhb_resp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .open_wxhb_resp.TAG1 tag1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->tag1_, deterministic, target);
  }

  // optional .mmStr res = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->res_, deterministic, target);
  }

  // optional int32 cmd = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cmd(), target);
  }

  // optional int32 ret_code = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ret_code(), target);
  }

  // optional string ret_msg = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ret_msg().data(), this->ret_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "open_wxhb_resp.ret_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->ret_msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:open_wxhb_resp)
  return target;
}

size_t open_wxhb_resp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:open_wxhb_resp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string ret_msg = 7;
    if (has_ret_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ret_msg());
    }

    // optional .open_wxhb_resp.TAG1 tag1 = 1;
    if (has_tag1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->tag1_);
    }

    // optional .mmStr res = 2;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->res_);
    }

    // optional int32 cmd = 5;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }

    // optional int32 ret_code = 6;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void open_wxhb_resp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:open_wxhb_resp)
  GOOGLE_DCHECK_NE(&from, this);
  const open_wxhb_resp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const open_wxhb_resp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:open_wxhb_resp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:open_wxhb_resp)
    MergeFrom(*source);
  }
}

void open_wxhb_resp::MergeFrom(const open_wxhb_resp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:open_wxhb_resp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ret_msg();
      ret_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_msg_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_tag1()->::open_wxhb_resp_TAG1::MergeFrom(from.tag1());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_res()->::mmStr::MergeFrom(from.res());
    }
    if (cached_has_bits & 0x00000008u) {
      cmd_ = from.cmd_;
    }
    if (cached_has_bits & 0x00000010u) {
      ret_code_ = from.ret_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void open_wxhb_resp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:open_wxhb_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void open_wxhb_resp::CopyFrom(const open_wxhb_resp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:open_wxhb_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool open_wxhb_resp::IsInitialized() const {
  return true;
}

void open_wxhb_resp::Swap(open_wxhb_resp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void open_wxhb_resp::InternalSwap(open_wxhb_resp* other) {
  ret_msg_.Swap(&other->ret_msg_);
  std::swap(tag1_, other->tag1_);
  std::swap(res_, other->res_);
  std::swap(cmd_, other->cmd_);
  std::swap(ret_code_, other->ret_code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata open_wxhb_resp::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// open_wxhb_resp

// optional .open_wxhb_resp.TAG1 tag1 = 1;
bool open_wxhb_resp::has_tag1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void open_wxhb_resp::set_has_tag1() {
  _has_bits_[0] |= 0x00000002u;
}
void open_wxhb_resp::clear_has_tag1() {
  _has_bits_[0] &= ~0x00000002u;
}
void open_wxhb_resp::clear_tag1() {
  if (tag1_ != NULL) tag1_->::open_wxhb_resp_TAG1::Clear();
  clear_has_tag1();
}
const ::open_wxhb_resp_TAG1& open_wxhb_resp::tag1() const {
  // @@protoc_insertion_point(field_get:open_wxhb_resp.tag1)
  return tag1_ != NULL ? *tag1_
                         : *::open_wxhb_resp_TAG1::internal_default_instance();
}
::open_wxhb_resp_TAG1* open_wxhb_resp::mutable_tag1() {
  set_has_tag1();
  if (tag1_ == NULL) {
    tag1_ = new ::open_wxhb_resp_TAG1;
  }
  // @@protoc_insertion_point(field_mutable:open_wxhb_resp.tag1)
  return tag1_;
}
::open_wxhb_resp_TAG1* open_wxhb_resp::release_tag1() {
  // @@protoc_insertion_point(field_release:open_wxhb_resp.tag1)
  clear_has_tag1();
  ::open_wxhb_resp_TAG1* temp = tag1_;
  tag1_ = NULL;
  return temp;
}
void open_wxhb_resp::set_allocated_tag1(::open_wxhb_resp_TAG1* tag1) {
  delete tag1_;
  tag1_ = tag1;
  if (tag1) {
    set_has_tag1();
  } else {
    clear_has_tag1();
  }
  // @@protoc_insertion_point(field_set_allocated:open_wxhb_resp.tag1)
}

// optional .mmStr res = 2;
bool open_wxhb_resp::has_res() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void open_wxhb_resp::set_has_res() {
  _has_bits_[0] |= 0x00000004u;
}
void open_wxhb_resp::clear_has_res() {
  _has_bits_[0] &= ~0x00000004u;
}
void open_wxhb_resp::clear_res() {
  if (res_ != NULL) res_->::mmStr::Clear();
  clear_has_res();
}
const ::mmStr& open_wxhb_resp::res() const {
  // @@protoc_insertion_point(field_get:open_wxhb_resp.res)
  return res_ != NULL ? *res_
                         : *::mmStr::internal_default_instance();
}
::mmStr* open_wxhb_resp::mutable_res() {
  set_has_res();
  if (res_ == NULL) {
    res_ = new ::mmStr;
  }
  // @@protoc_insertion_point(field_mutable:open_wxhb_resp.res)
  return res_;
}
::mmStr* open_wxhb_resp::release_res() {
  // @@protoc_insertion_point(field_release:open_wxhb_resp.res)
  clear_has_res();
  ::mmStr* temp = res_;
  res_ = NULL;
  return temp;
}
void open_wxhb_resp::set_allocated_res(::mmStr* res) {
  delete res_;
  res_ = res;
  if (res) {
    set_has_res();
  } else {
    clear_has_res();
  }
  // @@protoc_insertion_point(field_set_allocated:open_wxhb_resp.res)
}

// optional int32 cmd = 5;
bool open_wxhb_resp::has_cmd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void open_wxhb_resp::set_has_cmd() {
  _has_bits_[0] |= 0x00000008u;
}
void open_wxhb_resp::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000008u;
}
void open_wxhb_resp::clear_cmd() {
  cmd_ = 0;
  clear_has_cmd();
}
::google::protobuf::int32 open_wxhb_resp::cmd() const {
  // @@protoc_insertion_point(field_get:open_wxhb_resp.cmd)
  return cmd_;
}
void open_wxhb_resp::set_cmd(::google::protobuf::int32 value) {
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:open_wxhb_resp.cmd)
}

// optional int32 ret_code = 6;
bool open_wxhb_resp::has_ret_code() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void open_wxhb_resp::set_has_ret_code() {
  _has_bits_[0] |= 0x00000010u;
}
void open_wxhb_resp::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000010u;
}
void open_wxhb_resp::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
::google::protobuf::int32 open_wxhb_resp::ret_code() const {
  // @@protoc_insertion_point(field_get:open_wxhb_resp.ret_code)
  return ret_code_;
}
void open_wxhb_resp::set_ret_code(::google::protobuf::int32 value) {
  set_has_ret_code();
  ret_code_ = value;
  // @@protoc_insertion_point(field_set:open_wxhb_resp.ret_code)
}

// optional string ret_msg = 7;
bool open_wxhb_resp::has_ret_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void open_wxhb_resp::set_has_ret_msg() {
  _has_bits_[0] |= 0x00000001u;
}
void open_wxhb_resp::clear_has_ret_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
void open_wxhb_resp::clear_ret_msg() {
  ret_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ret_msg();
}
const ::std::string& open_wxhb_resp::ret_msg() const {
  // @@protoc_insertion_point(field_get:open_wxhb_resp.ret_msg)
  return ret_msg_.GetNoArena();
}
void open_wxhb_resp::set_ret_msg(const ::std::string& value) {
  set_has_ret_msg();
  ret_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:open_wxhb_resp.ret_msg)
}
#if LANG_CXX11
void open_wxhb_resp::set_ret_msg(::std::string&& value) {
  set_has_ret_msg();
  ret_msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:open_wxhb_resp.ret_msg)
}
#endif
void open_wxhb_resp::set_ret_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ret_msg();
  ret_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:open_wxhb_resp.ret_msg)
}
void open_wxhb_resp::set_ret_msg(const char* value, size_t size) {
  set_has_ret_msg();
  ret_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:open_wxhb_resp.ret_msg)
}
::std::string* open_wxhb_resp::mutable_ret_msg() {
  set_has_ret_msg();
  // @@protoc_insertion_point(field_mutable:open_wxhb_resp.ret_msg)
  return ret_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* open_wxhb_resp::release_ret_msg() {
  // @@protoc_insertion_point(field_release:open_wxhb_resp.ret_msg)
  clear_has_ret_msg();
  return ret_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void open_wxhb_resp::set_allocated_ret_msg(::std::string* ret_msg) {
  if (ret_msg != NULL) {
    set_has_ret_msg();
  } else {
    clear_has_ret_msg();
  }
  ret_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ret_msg);
  // @@protoc_insertion_point(field_set_allocated:open_wxhb_resp.ret_msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int qry_detail_wxhb_req::kLoginFieldNumber;
const int qry_detail_wxhb_req::kCmdFieldNumber;
const int qry_detail_wxhb_req::kTag3FieldNumber;
const int qry_detail_wxhb_req::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

qry_detail_wxhb_req::qry_detail_wxhb_req()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qry_detail_wxhb_req)
}
qry_detail_wxhb_req::qry_detail_wxhb_req(const qry_detail_wxhb_req& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_login()) {
    login_ = new ::LoginInfo(*from.login_);
  } else {
    login_ = NULL;
  }
  if (from.has_info()) {
    info_ = new ::mmStr(*from.info_);
  } else {
    info_ = NULL;
  }
  ::memcpy(&cmd_, &from.cmd_,
    reinterpret_cast<char*>(&tag3_) -
    reinterpret_cast<char*>(&cmd_) + sizeof(tag3_));
  // @@protoc_insertion_point(copy_constructor:qry_detail_wxhb_req)
}

void qry_detail_wxhb_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&login_, 0, reinterpret_cast<char*>(&tag3_) -
    reinterpret_cast<char*>(&login_) + sizeof(tag3_));
}

qry_detail_wxhb_req::~qry_detail_wxhb_req() {
  // @@protoc_insertion_point(destructor:qry_detail_wxhb_req)
  SharedDtor();
}

void qry_detail_wxhb_req::SharedDtor() {
  if (this != internal_default_instance()) {
    delete login_;
  }
  if (this != internal_default_instance()) {
    delete info_;
  }
}

void qry_detail_wxhb_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* qry_detail_wxhb_req::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const qry_detail_wxhb_req& qry_detail_wxhb_req::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

qry_detail_wxhb_req* qry_detail_wxhb_req::New(::google::protobuf::Arena* arena) const {
  qry_detail_wxhb_req* n = new qry_detail_wxhb_req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void qry_detail_wxhb_req::Clear() {
// @@protoc_insertion_point(message_clear_start:qry_detail_wxhb_req)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_login()) {
      GOOGLE_DCHECK(login_ != NULL);
      login_->::LoginInfo::Clear();
    }
    if (has_info()) {
      GOOGLE_DCHECK(info_ != NULL);
      info_->::mmStr::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&cmd_, 0, reinterpret_cast<char*>(&tag3_) -
      reinterpret_cast<char*>(&cmd_) + sizeof(tag3_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool qry_detail_wxhb_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qry_detail_wxhb_req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .LoginInfo login = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cmd = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_cmd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tag3 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_tag3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mmStr info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qry_detail_wxhb_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qry_detail_wxhb_req)
  return false;
#undef DO_
}

void qry_detail_wxhb_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qry_detail_wxhb_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .LoginInfo login = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->login_, output);
  }

  // optional int32 cmd = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cmd(), output);
  }

  // optional int32 tag3 = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tag3(), output);
  }

  // optional .mmStr info = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qry_detail_wxhb_req)
}

::google::protobuf::uint8* qry_detail_wxhb_req::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qry_detail_wxhb_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .LoginInfo login = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->login_, deterministic, target);
  }

  // optional int32 cmd = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cmd(), target);
  }

  // optional int32 tag3 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tag3(), target);
  }

  // optional .mmStr info = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->info_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qry_detail_wxhb_req)
  return target;
}

size_t qry_detail_wxhb_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qry_detail_wxhb_req)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .LoginInfo login = 1;
    if (has_login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->login_);
    }

    // optional .mmStr info = 4;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->info_);
    }

    // optional int32 cmd = 2;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }

    // optional int32 tag3 = 3;
    if (has_tag3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag3());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void qry_detail_wxhb_req::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qry_detail_wxhb_req)
  GOOGLE_DCHECK_NE(&from, this);
  const qry_detail_wxhb_req* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const qry_detail_wxhb_req>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qry_detail_wxhb_req)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qry_detail_wxhb_req)
    MergeFrom(*source);
  }
}

void qry_detail_wxhb_req::MergeFrom(const qry_detail_wxhb_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qry_detail_wxhb_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_login()->::LoginInfo::MergeFrom(from.login());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_info()->::mmStr::MergeFrom(from.info());
    }
    if (cached_has_bits & 0x00000004u) {
      cmd_ = from.cmd_;
    }
    if (cached_has_bits & 0x00000008u) {
      tag3_ = from.tag3_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void qry_detail_wxhb_req::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qry_detail_wxhb_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void qry_detail_wxhb_req::CopyFrom(const qry_detail_wxhb_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qry_detail_wxhb_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool qry_detail_wxhb_req::IsInitialized() const {
  return true;
}

void qry_detail_wxhb_req::Swap(qry_detail_wxhb_req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void qry_detail_wxhb_req::InternalSwap(qry_detail_wxhb_req* other) {
  std::swap(login_, other->login_);
  std::swap(info_, other->info_);
  std::swap(cmd_, other->cmd_);
  std::swap(tag3_, other->tag3_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata qry_detail_wxhb_req::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// qry_detail_wxhb_req

// optional .LoginInfo login = 1;
bool qry_detail_wxhb_req::has_login() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void qry_detail_wxhb_req::set_has_login() {
  _has_bits_[0] |= 0x00000001u;
}
void qry_detail_wxhb_req::clear_has_login() {
  _has_bits_[0] &= ~0x00000001u;
}
void qry_detail_wxhb_req::clear_login() {
  if (login_ != NULL) login_->::LoginInfo::Clear();
  clear_has_login();
}
const ::LoginInfo& qry_detail_wxhb_req::login() const {
  // @@protoc_insertion_point(field_get:qry_detail_wxhb_req.login)
  return login_ != NULL ? *login_
                         : *::LoginInfo::internal_default_instance();
}
::LoginInfo* qry_detail_wxhb_req::mutable_login() {
  set_has_login();
  if (login_ == NULL) {
    login_ = new ::LoginInfo;
  }
  // @@protoc_insertion_point(field_mutable:qry_detail_wxhb_req.login)
  return login_;
}
::LoginInfo* qry_detail_wxhb_req::release_login() {
  // @@protoc_insertion_point(field_release:qry_detail_wxhb_req.login)
  clear_has_login();
  ::LoginInfo* temp = login_;
  login_ = NULL;
  return temp;
}
void qry_detail_wxhb_req::set_allocated_login(::LoginInfo* login) {
  delete login_;
  login_ = login;
  if (login) {
    set_has_login();
  } else {
    clear_has_login();
  }
  // @@protoc_insertion_point(field_set_allocated:qry_detail_wxhb_req.login)
}

// optional int32 cmd = 2;
bool qry_detail_wxhb_req::has_cmd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void qry_detail_wxhb_req::set_has_cmd() {
  _has_bits_[0] |= 0x00000004u;
}
void qry_detail_wxhb_req::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000004u;
}
void qry_detail_wxhb_req::clear_cmd() {
  cmd_ = 0;
  clear_has_cmd();
}
::google::protobuf::int32 qry_detail_wxhb_req::cmd() const {
  // @@protoc_insertion_point(field_get:qry_detail_wxhb_req.cmd)
  return cmd_;
}
void qry_detail_wxhb_req::set_cmd(::google::protobuf::int32 value) {
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:qry_detail_wxhb_req.cmd)
}

// optional int32 tag3 = 3;
bool qry_detail_wxhb_req::has_tag3() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void qry_detail_wxhb_req::set_has_tag3() {
  _has_bits_[0] |= 0x00000008u;
}
void qry_detail_wxhb_req::clear_has_tag3() {
  _has_bits_[0] &= ~0x00000008u;
}
void qry_detail_wxhb_req::clear_tag3() {
  tag3_ = 0;
  clear_has_tag3();
}
::google::protobuf::int32 qry_detail_wxhb_req::tag3() const {
  // @@protoc_insertion_point(field_get:qry_detail_wxhb_req.tag3)
  return tag3_;
}
void qry_detail_wxhb_req::set_tag3(::google::protobuf::int32 value) {
  set_has_tag3();
  tag3_ = value;
  // @@protoc_insertion_point(field_set:qry_detail_wxhb_req.tag3)
}

// optional .mmStr info = 4;
bool qry_detail_wxhb_req::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void qry_detail_wxhb_req::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
void qry_detail_wxhb_req::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
void qry_detail_wxhb_req::clear_info() {
  if (info_ != NULL) info_->::mmStr::Clear();
  clear_has_info();
}
const ::mmStr& qry_detail_wxhb_req::info() const {
  // @@protoc_insertion_point(field_get:qry_detail_wxhb_req.info)
  return info_ != NULL ? *info_
                         : *::mmStr::internal_default_instance();
}
::mmStr* qry_detail_wxhb_req::mutable_info() {
  set_has_info();
  if (info_ == NULL) {
    info_ = new ::mmStr;
  }
  // @@protoc_insertion_point(field_mutable:qry_detail_wxhb_req.info)
  return info_;
}
::mmStr* qry_detail_wxhb_req::release_info() {
  // @@protoc_insertion_point(field_release:qry_detail_wxhb_req.info)
  clear_has_info();
  ::mmStr* temp = info_;
  info_ = NULL;
  return temp;
}
void qry_detail_wxhb_req::set_allocated_info(::mmStr* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:qry_detail_wxhb_req.info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int qry_detail_wxhb_resp_TAG1_TAG1::kTag1FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

qry_detail_wxhb_resp_TAG1_TAG1::qry_detail_wxhb_resp_TAG1_TAG1()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qry_detail_wxhb_resp.TAG1.TAG1)
}
qry_detail_wxhb_resp_TAG1_TAG1::qry_detail_wxhb_resp_TAG1_TAG1(const qry_detail_wxhb_resp_TAG1_TAG1& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tag1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tag1()) {
    tag1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag1_);
  }
  // @@protoc_insertion_point(copy_constructor:qry_detail_wxhb_resp.TAG1.TAG1)
}

void qry_detail_wxhb_resp_TAG1_TAG1::SharedCtor() {
  _cached_size_ = 0;
  tag1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

qry_detail_wxhb_resp_TAG1_TAG1::~qry_detail_wxhb_resp_TAG1_TAG1() {
  // @@protoc_insertion_point(destructor:qry_detail_wxhb_resp.TAG1.TAG1)
  SharedDtor();
}

void qry_detail_wxhb_resp_TAG1_TAG1::SharedDtor() {
  tag1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void qry_detail_wxhb_resp_TAG1_TAG1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* qry_detail_wxhb_resp_TAG1_TAG1::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const qry_detail_wxhb_resp_TAG1_TAG1& qry_detail_wxhb_resp_TAG1_TAG1::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

qry_detail_wxhb_resp_TAG1_TAG1* qry_detail_wxhb_resp_TAG1_TAG1::New(::google::protobuf::Arena* arena) const {
  qry_detail_wxhb_resp_TAG1_TAG1* n = new qry_detail_wxhb_resp_TAG1_TAG1;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void qry_detail_wxhb_resp_TAG1_TAG1::Clear() {
// @@protoc_insertion_point(message_clear_start:qry_detail_wxhb_resp.TAG1.TAG1)
  if (has_tag1()) {
    GOOGLE_DCHECK(!tag1_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*tag1_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool qry_detail_wxhb_resp_TAG1_TAG1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qry_detail_wxhb_resp.TAG1.TAG1)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string tag1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag1().data(), this->tag1().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "qry_detail_wxhb_resp.TAG1.TAG1.tag1");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qry_detail_wxhb_resp.TAG1.TAG1)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qry_detail_wxhb_resp.TAG1.TAG1)
  return false;
#undef DO_
}

void qry_detail_wxhb_resp_TAG1_TAG1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qry_detail_wxhb_resp.TAG1.TAG1)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string tag1 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag1().data(), this->tag1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qry_detail_wxhb_resp.TAG1.TAG1.tag1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tag1(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qry_detail_wxhb_resp.TAG1.TAG1)
}

::google::protobuf::uint8* qry_detail_wxhb_resp_TAG1_TAG1::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qry_detail_wxhb_resp.TAG1.TAG1)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string tag1 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag1().data(), this->tag1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qry_detail_wxhb_resp.TAG1.TAG1.tag1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tag1(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qry_detail_wxhb_resp.TAG1.TAG1)
  return target;
}

size_t qry_detail_wxhb_resp_TAG1_TAG1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qry_detail_wxhb_resp.TAG1.TAG1)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string tag1 = 1;
  if (has_tag1()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tag1());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void qry_detail_wxhb_resp_TAG1_TAG1::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qry_detail_wxhb_resp.TAG1.TAG1)
  GOOGLE_DCHECK_NE(&from, this);
  const qry_detail_wxhb_resp_TAG1_TAG1* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const qry_detail_wxhb_resp_TAG1_TAG1>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qry_detail_wxhb_resp.TAG1.TAG1)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qry_detail_wxhb_resp.TAG1.TAG1)
    MergeFrom(*source);
  }
}

void qry_detail_wxhb_resp_TAG1_TAG1::MergeFrom(const qry_detail_wxhb_resp_TAG1_TAG1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qry_detail_wxhb_resp.TAG1.TAG1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tag1()) {
    set_has_tag1();
    tag1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag1_);
  }
}

void qry_detail_wxhb_resp_TAG1_TAG1::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qry_detail_wxhb_resp.TAG1.TAG1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void qry_detail_wxhb_resp_TAG1_TAG1::CopyFrom(const qry_detail_wxhb_resp_TAG1_TAG1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qry_detail_wxhb_resp.TAG1.TAG1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool qry_detail_wxhb_resp_TAG1_TAG1::IsInitialized() const {
  return true;
}

void qry_detail_wxhb_resp_TAG1_TAG1::Swap(qry_detail_wxhb_resp_TAG1_TAG1* other) {
  if (other == this) return;
  InternalSwap(other);
}
void qry_detail_wxhb_resp_TAG1_TAG1::InternalSwap(qry_detail_wxhb_resp_TAG1_TAG1* other) {
  tag1_.Swap(&other->tag1_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata qry_detail_wxhb_resp_TAG1_TAG1::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// qry_detail_wxhb_resp_TAG1_TAG1

// optional string tag1 = 1;
bool qry_detail_wxhb_resp_TAG1_TAG1::has_tag1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void qry_detail_wxhb_resp_TAG1_TAG1::set_has_tag1() {
  _has_bits_[0] |= 0x00000001u;
}
void qry_detail_wxhb_resp_TAG1_TAG1::clear_has_tag1() {
  _has_bits_[0] &= ~0x00000001u;
}
void qry_detail_wxhb_resp_TAG1_TAG1::clear_tag1() {
  tag1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tag1();
}
const ::std::string& qry_detail_wxhb_resp_TAG1_TAG1::tag1() const {
  // @@protoc_insertion_point(field_get:qry_detail_wxhb_resp.TAG1.TAG1.tag1)
  return tag1_.GetNoArena();
}
void qry_detail_wxhb_resp_TAG1_TAG1::set_tag1(const ::std::string& value) {
  set_has_tag1();
  tag1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qry_detail_wxhb_resp.TAG1.TAG1.tag1)
}
#if LANG_CXX11
void qry_detail_wxhb_resp_TAG1_TAG1::set_tag1(::std::string&& value) {
  set_has_tag1();
  tag1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qry_detail_wxhb_resp.TAG1.TAG1.tag1)
}
#endif
void qry_detail_wxhb_resp_TAG1_TAG1::set_tag1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tag1();
  tag1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qry_detail_wxhb_resp.TAG1.TAG1.tag1)
}
void qry_detail_wxhb_resp_TAG1_TAG1::set_tag1(const char* value, size_t size) {
  set_has_tag1();
  tag1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qry_detail_wxhb_resp.TAG1.TAG1.tag1)
}
::std::string* qry_detail_wxhb_resp_TAG1_TAG1::mutable_tag1() {
  set_has_tag1();
  // @@protoc_insertion_point(field_mutable:qry_detail_wxhb_resp.TAG1.TAG1.tag1)
  return tag1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* qry_detail_wxhb_resp_TAG1_TAG1::release_tag1() {
  // @@protoc_insertion_point(field_release:qry_detail_wxhb_resp.TAG1.TAG1.tag1)
  clear_has_tag1();
  return tag1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void qry_detail_wxhb_resp_TAG1_TAG1::set_allocated_tag1(::std::string* tag1) {
  if (tag1 != NULL) {
    set_has_tag1();
  } else {
    clear_has_tag1();
  }
  tag1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag1);
  // @@protoc_insertion_point(field_set_allocated:qry_detail_wxhb_resp.TAG1.TAG1.tag1)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int qry_detail_wxhb_resp_TAG1::kTag1FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

qry_detail_wxhb_resp_TAG1::qry_detail_wxhb_resp_TAG1()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qry_detail_wxhb_resp.TAG1)
}
qry_detail_wxhb_resp_TAG1::qry_detail_wxhb_resp_TAG1(const qry_detail_wxhb_resp_TAG1& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tag1_ = from.tag1_;
  // @@protoc_insertion_point(copy_constructor:qry_detail_wxhb_resp.TAG1)
}

void qry_detail_wxhb_resp_TAG1::SharedCtor() {
  _cached_size_ = 0;
  tag1_ = 0;
}

qry_detail_wxhb_resp_TAG1::~qry_detail_wxhb_resp_TAG1() {
  // @@protoc_insertion_point(destructor:qry_detail_wxhb_resp.TAG1)
  SharedDtor();
}

void qry_detail_wxhb_resp_TAG1::SharedDtor() {
}

void qry_detail_wxhb_resp_TAG1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* qry_detail_wxhb_resp_TAG1::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const qry_detail_wxhb_resp_TAG1& qry_detail_wxhb_resp_TAG1::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

qry_detail_wxhb_resp_TAG1* qry_detail_wxhb_resp_TAG1::New(::google::protobuf::Arena* arena) const {
  qry_detail_wxhb_resp_TAG1* n = new qry_detail_wxhb_resp_TAG1;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void qry_detail_wxhb_resp_TAG1::Clear() {
// @@protoc_insertion_point(message_clear_start:qry_detail_wxhb_resp.TAG1)
  tag1_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool qry_detail_wxhb_resp_TAG1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qry_detail_wxhb_resp.TAG1)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tag1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_tag1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qry_detail_wxhb_resp.TAG1)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qry_detail_wxhb_resp.TAG1)
  return false;
#undef DO_
}

void qry_detail_wxhb_resp_TAG1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qry_detail_wxhb_resp.TAG1)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 tag1 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tag1(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qry_detail_wxhb_resp.TAG1)
}

::google::protobuf::uint8* qry_detail_wxhb_resp_TAG1::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qry_detail_wxhb_resp.TAG1)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 tag1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tag1(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qry_detail_wxhb_resp.TAG1)
  return target;
}

size_t qry_detail_wxhb_resp_TAG1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qry_detail_wxhb_resp.TAG1)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 tag1 = 1;
  if (has_tag1()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tag1());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void qry_detail_wxhb_resp_TAG1::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qry_detail_wxhb_resp.TAG1)
  GOOGLE_DCHECK_NE(&from, this);
  const qry_detail_wxhb_resp_TAG1* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const qry_detail_wxhb_resp_TAG1>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qry_detail_wxhb_resp.TAG1)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qry_detail_wxhb_resp.TAG1)
    MergeFrom(*source);
  }
}

void qry_detail_wxhb_resp_TAG1::MergeFrom(const qry_detail_wxhb_resp_TAG1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qry_detail_wxhb_resp.TAG1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tag1()) {
    set_tag1(from.tag1());
  }
}

void qry_detail_wxhb_resp_TAG1::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qry_detail_wxhb_resp.TAG1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void qry_detail_wxhb_resp_TAG1::CopyFrom(const qry_detail_wxhb_resp_TAG1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qry_detail_wxhb_resp.TAG1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool qry_detail_wxhb_resp_TAG1::IsInitialized() const {
  return true;
}

void qry_detail_wxhb_resp_TAG1::Swap(qry_detail_wxhb_resp_TAG1* other) {
  if (other == this) return;
  InternalSwap(other);
}
void qry_detail_wxhb_resp_TAG1::InternalSwap(qry_detail_wxhb_resp_TAG1* other) {
  std::swap(tag1_, other->tag1_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata qry_detail_wxhb_resp_TAG1::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// qry_detail_wxhb_resp_TAG1

// optional int32 tag1 = 1;
bool qry_detail_wxhb_resp_TAG1::has_tag1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void qry_detail_wxhb_resp_TAG1::set_has_tag1() {
  _has_bits_[0] |= 0x00000001u;
}
void qry_detail_wxhb_resp_TAG1::clear_has_tag1() {
  _has_bits_[0] &= ~0x00000001u;
}
void qry_detail_wxhb_resp_TAG1::clear_tag1() {
  tag1_ = 0;
  clear_has_tag1();
}
::google::protobuf::int32 qry_detail_wxhb_resp_TAG1::tag1() const {
  // @@protoc_insertion_point(field_get:qry_detail_wxhb_resp.TAG1.tag1)
  return tag1_;
}
void qry_detail_wxhb_resp_TAG1::set_tag1(::google::protobuf::int32 value) {
  set_has_tag1();
  tag1_ = value;
  // @@protoc_insertion_point(field_set:qry_detail_wxhb_resp.TAG1.tag1)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int qry_detail_wxhb_resp::kTag1FieldNumber;
const int qry_detail_wxhb_resp::kResFieldNumber;
const int qry_detail_wxhb_resp::kCmdFieldNumber;
const int qry_detail_wxhb_resp::kRetCodeFieldNumber;
const int qry_detail_wxhb_resp::kRetMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

qry_detail_wxhb_resp::qry_detail_wxhb_resp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:qry_detail_wxhb_resp)
}
qry_detail_wxhb_resp::qry_detail_wxhb_resp(const qry_detail_wxhb_resp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ret_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ret_msg()) {
    ret_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_msg_);
  }
  if (from.has_tag1()) {
    tag1_ = new ::qry_detail_wxhb_resp_TAG1(*from.tag1_);
  } else {
    tag1_ = NULL;
  }
  if (from.has_res()) {
    res_ = new ::mmStr(*from.res_);
  } else {
    res_ = NULL;
  }
  ::memcpy(&cmd_, &from.cmd_,
    reinterpret_cast<char*>(&ret_code_) -
    reinterpret_cast<char*>(&cmd_) + sizeof(ret_code_));
  // @@protoc_insertion_point(copy_constructor:qry_detail_wxhb_resp)
}

void qry_detail_wxhb_resp::SharedCtor() {
  _cached_size_ = 0;
  ret_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tag1_, 0, reinterpret_cast<char*>(&ret_code_) -
    reinterpret_cast<char*>(&tag1_) + sizeof(ret_code_));
}

qry_detail_wxhb_resp::~qry_detail_wxhb_resp() {
  // @@protoc_insertion_point(destructor:qry_detail_wxhb_resp)
  SharedDtor();
}

void qry_detail_wxhb_resp::SharedDtor() {
  ret_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete tag1_;
  }
  if (this != internal_default_instance()) {
    delete res_;
  }
}

void qry_detail_wxhb_resp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* qry_detail_wxhb_resp::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const qry_detail_wxhb_resp& qry_detail_wxhb_resp::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

qry_detail_wxhb_resp* qry_detail_wxhb_resp::New(::google::protobuf::Arena* arena) const {
  qry_detail_wxhb_resp* n = new qry_detail_wxhb_resp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void qry_detail_wxhb_resp::Clear() {
// @@protoc_insertion_point(message_clear_start:qry_detail_wxhb_resp)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_ret_msg()) {
      GOOGLE_DCHECK(!ret_msg_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ret_msg_.UnsafeRawStringPointer())->clear();
    }
    if (has_tag1()) {
      GOOGLE_DCHECK(tag1_ != NULL);
      tag1_->::qry_detail_wxhb_resp_TAG1::Clear();
    }
    if (has_res()) {
      GOOGLE_DCHECK(res_ != NULL);
      res_->::mmStr::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 24u) {
    ::memset(&cmd_, 0, reinterpret_cast<char*>(&ret_code_) -
      reinterpret_cast<char*>(&cmd_) + sizeof(ret_code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool qry_detail_wxhb_resp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qry_detail_wxhb_resp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .qry_detail_wxhb_resp.TAG1 tag1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tag1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mmStr res = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_res()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cmd = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_cmd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ret_code = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_ret_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ret_msg = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ret_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ret_msg().data(), this->ret_msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "qry_detail_wxhb_resp.ret_msg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qry_detail_wxhb_resp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qry_detail_wxhb_resp)
  return false;
#undef DO_
}

void qry_detail_wxhb_resp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qry_detail_wxhb_resp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .qry_detail_wxhb_resp.TAG1 tag1 = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->tag1_, output);
  }

  // optional .mmStr res = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->res_, output);
  }

  // optional int32 cmd = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cmd(), output);
  }

  // optional int32 ret_code = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ret_code(), output);
  }

  // optional string ret_msg = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ret_msg().data(), this->ret_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qry_detail_wxhb_resp.ret_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->ret_msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qry_detail_wxhb_resp)
}

::google::protobuf::uint8* qry_detail_wxhb_resp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qry_detail_wxhb_resp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .qry_detail_wxhb_resp.TAG1 tag1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->tag1_, deterministic, target);
  }

  // optional .mmStr res = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->res_, deterministic, target);
  }

  // optional int32 cmd = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cmd(), target);
  }

  // optional int32 ret_code = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ret_code(), target);
  }

  // optional string ret_msg = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ret_msg().data(), this->ret_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qry_detail_wxhb_resp.ret_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->ret_msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qry_detail_wxhb_resp)
  return target;
}

size_t qry_detail_wxhb_resp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qry_detail_wxhb_resp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string ret_msg = 7;
    if (has_ret_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ret_msg());
    }

    // optional .qry_detail_wxhb_resp.TAG1 tag1 = 1;
    if (has_tag1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->tag1_);
    }

    // optional .mmStr res = 2;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->res_);
    }

    // optional int32 cmd = 5;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }

    // optional int32 ret_code = 6;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void qry_detail_wxhb_resp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qry_detail_wxhb_resp)
  GOOGLE_DCHECK_NE(&from, this);
  const qry_detail_wxhb_resp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const qry_detail_wxhb_resp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qry_detail_wxhb_resp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qry_detail_wxhb_resp)
    MergeFrom(*source);
  }
}

void qry_detail_wxhb_resp::MergeFrom(const qry_detail_wxhb_resp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qry_detail_wxhb_resp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ret_msg();
      ret_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_msg_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_tag1()->::qry_detail_wxhb_resp_TAG1::MergeFrom(from.tag1());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_res()->::mmStr::MergeFrom(from.res());
    }
    if (cached_has_bits & 0x00000008u) {
      cmd_ = from.cmd_;
    }
    if (cached_has_bits & 0x00000010u) {
      ret_code_ = from.ret_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void qry_detail_wxhb_resp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qry_detail_wxhb_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void qry_detail_wxhb_resp::CopyFrom(const qry_detail_wxhb_resp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qry_detail_wxhb_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool qry_detail_wxhb_resp::IsInitialized() const {
  return true;
}

void qry_detail_wxhb_resp::Swap(qry_detail_wxhb_resp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void qry_detail_wxhb_resp::InternalSwap(qry_detail_wxhb_resp* other) {
  ret_msg_.Swap(&other->ret_msg_);
  std::swap(tag1_, other->tag1_);
  std::swap(res_, other->res_);
  std::swap(cmd_, other->cmd_);
  std::swap(ret_code_, other->ret_code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata qry_detail_wxhb_resp::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// qry_detail_wxhb_resp

// optional .qry_detail_wxhb_resp.TAG1 tag1 = 1;
bool qry_detail_wxhb_resp::has_tag1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void qry_detail_wxhb_resp::set_has_tag1() {
  _has_bits_[0] |= 0x00000002u;
}
void qry_detail_wxhb_resp::clear_has_tag1() {
  _has_bits_[0] &= ~0x00000002u;
}
void qry_detail_wxhb_resp::clear_tag1() {
  if (tag1_ != NULL) tag1_->::qry_detail_wxhb_resp_TAG1::Clear();
  clear_has_tag1();
}
const ::qry_detail_wxhb_resp_TAG1& qry_detail_wxhb_resp::tag1() const {
  // @@protoc_insertion_point(field_get:qry_detail_wxhb_resp.tag1)
  return tag1_ != NULL ? *tag1_
                         : *::qry_detail_wxhb_resp_TAG1::internal_default_instance();
}
::qry_detail_wxhb_resp_TAG1* qry_detail_wxhb_resp::mutable_tag1() {
  set_has_tag1();
  if (tag1_ == NULL) {
    tag1_ = new ::qry_detail_wxhb_resp_TAG1;
  }
  // @@protoc_insertion_point(field_mutable:qry_detail_wxhb_resp.tag1)
  return tag1_;
}
::qry_detail_wxhb_resp_TAG1* qry_detail_wxhb_resp::release_tag1() {
  // @@protoc_insertion_point(field_release:qry_detail_wxhb_resp.tag1)
  clear_has_tag1();
  ::qry_detail_wxhb_resp_TAG1* temp = tag1_;
  tag1_ = NULL;
  return temp;
}
void qry_detail_wxhb_resp::set_allocated_tag1(::qry_detail_wxhb_resp_TAG1* tag1) {
  delete tag1_;
  tag1_ = tag1;
  if (tag1) {
    set_has_tag1();
  } else {
    clear_has_tag1();
  }
  // @@protoc_insertion_point(field_set_allocated:qry_detail_wxhb_resp.tag1)
}

// optional .mmStr res = 2;
bool qry_detail_wxhb_resp::has_res() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void qry_detail_wxhb_resp::set_has_res() {
  _has_bits_[0] |= 0x00000004u;
}
void qry_detail_wxhb_resp::clear_has_res() {
  _has_bits_[0] &= ~0x00000004u;
}
void qry_detail_wxhb_resp::clear_res() {
  if (res_ != NULL) res_->::mmStr::Clear();
  clear_has_res();
}
const ::mmStr& qry_detail_wxhb_resp::res() const {
  // @@protoc_insertion_point(field_get:qry_detail_wxhb_resp.res)
  return res_ != NULL ? *res_
                         : *::mmStr::internal_default_instance();
}
::mmStr* qry_detail_wxhb_resp::mutable_res() {
  set_has_res();
  if (res_ == NULL) {
    res_ = new ::mmStr;
  }
  // @@protoc_insertion_point(field_mutable:qry_detail_wxhb_resp.res)
  return res_;
}
::mmStr* qry_detail_wxhb_resp::release_res() {
  // @@protoc_insertion_point(field_release:qry_detail_wxhb_resp.res)
  clear_has_res();
  ::mmStr* temp = res_;
  res_ = NULL;
  return temp;
}
void qry_detail_wxhb_resp::set_allocated_res(::mmStr* res) {
  delete res_;
  res_ = res;
  if (res) {
    set_has_res();
  } else {
    clear_has_res();
  }
  // @@protoc_insertion_point(field_set_allocated:qry_detail_wxhb_resp.res)
}

// optional int32 cmd = 5;
bool qry_detail_wxhb_resp::has_cmd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void qry_detail_wxhb_resp::set_has_cmd() {
  _has_bits_[0] |= 0x00000008u;
}
void qry_detail_wxhb_resp::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000008u;
}
void qry_detail_wxhb_resp::clear_cmd() {
  cmd_ = 0;
  clear_has_cmd();
}
::google::protobuf::int32 qry_detail_wxhb_resp::cmd() const {
  // @@protoc_insertion_point(field_get:qry_detail_wxhb_resp.cmd)
  return cmd_;
}
void qry_detail_wxhb_resp::set_cmd(::google::protobuf::int32 value) {
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:qry_detail_wxhb_resp.cmd)
}

// optional int32 ret_code = 6;
bool qry_detail_wxhb_resp::has_ret_code() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void qry_detail_wxhb_resp::set_has_ret_code() {
  _has_bits_[0] |= 0x00000010u;
}
void qry_detail_wxhb_resp::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000010u;
}
void qry_detail_wxhb_resp::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
::google::protobuf::int32 qry_detail_wxhb_resp::ret_code() const {
  // @@protoc_insertion_point(field_get:qry_detail_wxhb_resp.ret_code)
  return ret_code_;
}
void qry_detail_wxhb_resp::set_ret_code(::google::protobuf::int32 value) {
  set_has_ret_code();
  ret_code_ = value;
  // @@protoc_insertion_point(field_set:qry_detail_wxhb_resp.ret_code)
}

// optional string ret_msg = 7;
bool qry_detail_wxhb_resp::has_ret_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void qry_detail_wxhb_resp::set_has_ret_msg() {
  _has_bits_[0] |= 0x00000001u;
}
void qry_detail_wxhb_resp::clear_has_ret_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
void qry_detail_wxhb_resp::clear_ret_msg() {
  ret_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ret_msg();
}
const ::std::string& qry_detail_wxhb_resp::ret_msg() const {
  // @@protoc_insertion_point(field_get:qry_detail_wxhb_resp.ret_msg)
  return ret_msg_.GetNoArena();
}
void qry_detail_wxhb_resp::set_ret_msg(const ::std::string& value) {
  set_has_ret_msg();
  ret_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qry_detail_wxhb_resp.ret_msg)
}
#if LANG_CXX11
void qry_detail_wxhb_resp::set_ret_msg(::std::string&& value) {
  set_has_ret_msg();
  ret_msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qry_detail_wxhb_resp.ret_msg)
}
#endif
void qry_detail_wxhb_resp::set_ret_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ret_msg();
  ret_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qry_detail_wxhb_resp.ret_msg)
}
void qry_detail_wxhb_resp::set_ret_msg(const char* value, size_t size) {
  set_has_ret_msg();
  ret_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qry_detail_wxhb_resp.ret_msg)
}
::std::string* qry_detail_wxhb_resp::mutable_ret_msg() {
  set_has_ret_msg();
  // @@protoc_insertion_point(field_mutable:qry_detail_wxhb_resp.ret_msg)
  return ret_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* qry_detail_wxhb_resp::release_ret_msg() {
  // @@protoc_insertion_point(field_release:qry_detail_wxhb_resp.ret_msg)
  clear_has_ret_msg();
  return ret_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void qry_detail_wxhb_resp::set_allocated_ret_msg(::std::string* ret_msg) {
  if (ret_msg != NULL) {
    set_has_ret_msg();
  } else {
    clear_has_ret_msg();
  }
  ret_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ret_msg);
  // @@protoc_insertion_point(field_set_allocated:qry_detail_wxhb_resp.ret_msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int send_emoji_req_emoji_info_TAG4::kTag1FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

send_emoji_req_emoji_info_TAG4::send_emoji_req_emoji_info_TAG4()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:send_emoji_req.emoji_info.TAG4)
}
send_emoji_req_emoji_info_TAG4::send_emoji_req_emoji_info_TAG4(const send_emoji_req_emoji_info_TAG4& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tag1_ = from.tag1_;
  // @@protoc_insertion_point(copy_constructor:send_emoji_req.emoji_info.TAG4)
}

void send_emoji_req_emoji_info_TAG4::SharedCtor() {
  _cached_size_ = 0;
  tag1_ = 0;
}

send_emoji_req_emoji_info_TAG4::~send_emoji_req_emoji_info_TAG4() {
  // @@protoc_insertion_point(destructor:send_emoji_req.emoji_info.TAG4)
  SharedDtor();
}

void send_emoji_req_emoji_info_TAG4::SharedDtor() {
}

void send_emoji_req_emoji_info_TAG4::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* send_emoji_req_emoji_info_TAG4::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const send_emoji_req_emoji_info_TAG4& send_emoji_req_emoji_info_TAG4::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

send_emoji_req_emoji_info_TAG4* send_emoji_req_emoji_info_TAG4::New(::google::protobuf::Arena* arena) const {
  send_emoji_req_emoji_info_TAG4* n = new send_emoji_req_emoji_info_TAG4;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void send_emoji_req_emoji_info_TAG4::Clear() {
// @@protoc_insertion_point(message_clear_start:send_emoji_req.emoji_info.TAG4)
  tag1_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool send_emoji_req_emoji_info_TAG4::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:send_emoji_req.emoji_info.TAG4)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tag1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_tag1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:send_emoji_req.emoji_info.TAG4)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:send_emoji_req.emoji_info.TAG4)
  return false;
#undef DO_
}

void send_emoji_req_emoji_info_TAG4::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:send_emoji_req.emoji_info.TAG4)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 tag1 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tag1(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:send_emoji_req.emoji_info.TAG4)
}

::google::protobuf::uint8* send_emoji_req_emoji_info_TAG4::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:send_emoji_req.emoji_info.TAG4)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 tag1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tag1(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:send_emoji_req.emoji_info.TAG4)
  return target;
}

size_t send_emoji_req_emoji_info_TAG4::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:send_emoji_req.emoji_info.TAG4)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 tag1 = 1;
  if (has_tag1()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tag1());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void send_emoji_req_emoji_info_TAG4::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:send_emoji_req.emoji_info.TAG4)
  GOOGLE_DCHECK_NE(&from, this);
  const send_emoji_req_emoji_info_TAG4* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const send_emoji_req_emoji_info_TAG4>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:send_emoji_req.emoji_info.TAG4)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:send_emoji_req.emoji_info.TAG4)
    MergeFrom(*source);
  }
}

void send_emoji_req_emoji_info_TAG4::MergeFrom(const send_emoji_req_emoji_info_TAG4& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:send_emoji_req.emoji_info.TAG4)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tag1()) {
    set_tag1(from.tag1());
  }
}

void send_emoji_req_emoji_info_TAG4::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:send_emoji_req.emoji_info.TAG4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void send_emoji_req_emoji_info_TAG4::CopyFrom(const send_emoji_req_emoji_info_TAG4& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:send_emoji_req.emoji_info.TAG4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool send_emoji_req_emoji_info_TAG4::IsInitialized() const {
  return true;
}

void send_emoji_req_emoji_info_TAG4::Swap(send_emoji_req_emoji_info_TAG4* other) {
  if (other == this) return;
  InternalSwap(other);
}
void send_emoji_req_emoji_info_TAG4::InternalSwap(send_emoji_req_emoji_info_TAG4* other) {
  std::swap(tag1_, other->tag1_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata send_emoji_req_emoji_info_TAG4::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// send_emoji_req_emoji_info_TAG4

// optional int32 tag1 = 1;
bool send_emoji_req_emoji_info_TAG4::has_tag1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void send_emoji_req_emoji_info_TAG4::set_has_tag1() {
  _has_bits_[0] |= 0x00000001u;
}
void send_emoji_req_emoji_info_TAG4::clear_has_tag1() {
  _has_bits_[0] &= ~0x00000001u;
}
void send_emoji_req_emoji_info_TAG4::clear_tag1() {
  tag1_ = 0;
  clear_has_tag1();
}
::google::protobuf::int32 send_emoji_req_emoji_info_TAG4::tag1() const {
  // @@protoc_insertion_point(field_get:send_emoji_req.emoji_info.TAG4.tag1)
  return tag1_;
}
void send_emoji_req_emoji_info_TAG4::set_tag1(::google::protobuf::int32 value) {
  set_has_tag1();
  tag1_ = value;
  // @@protoc_insertion_point(field_set:send_emoji_req.emoji_info.TAG4.tag1)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int send_emoji_req_emoji_info::kAnimationIdFieldNumber;
const int send_emoji_req_emoji_info::kTag2FieldNumber;
const int send_emoji_req_emoji_info::kTag3FieldNumber;
const int send_emoji_req_emoji_info::kTag4FieldNumber;
const int send_emoji_req_emoji_info::kTag5FieldNumber;
const int send_emoji_req_emoji_info::kToWxidFieldNumber;
const int send_emoji_req_emoji_info::kGameExtFieldNumber;
const int send_emoji_req_emoji_info::kTag8FieldNumber;
const int send_emoji_req_emoji_info::kUtcFieldNumber;
const int send_emoji_req_emoji_info::kTag11FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

send_emoji_req_emoji_info::send_emoji_req_emoji_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:send_emoji_req.emoji_info)
}
send_emoji_req_emoji_info::send_emoji_req_emoji_info(const send_emoji_req_emoji_info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  animation_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_animation_id()) {
    animation_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.animation_id_);
  }
  to_wxid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_to_wxid()) {
    to_wxid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_wxid_);
  }
  game_ext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_game_ext()) {
    game_ext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_ext_);
  }
  tag8_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tag8()) {
    tag8_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag8_);
  }
  utc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_utc()) {
    utc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.utc_);
  }
  if (from.has_tag4()) {
    tag4_ = new ::send_emoji_req_emoji_info_TAG4(*from.tag4_);
  } else {
    tag4_ = NULL;
  }
  ::memcpy(&tag2_, &from.tag2_,
    reinterpret_cast<char*>(&tag11_) -
    reinterpret_cast<char*>(&tag2_) + sizeof(tag11_));
  // @@protoc_insertion_point(copy_constructor:send_emoji_req.emoji_info)
}

void send_emoji_req_emoji_info::SharedCtor() {
  _cached_size_ = 0;
  animation_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_wxid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_ext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag8_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  utc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tag4_, 0, reinterpret_cast<char*>(&tag11_) -
    reinterpret_cast<char*>(&tag4_) + sizeof(tag11_));
}

send_emoji_req_emoji_info::~send_emoji_req_emoji_info() {
  // @@protoc_insertion_point(destructor:send_emoji_req.emoji_info)
  SharedDtor();
}

void send_emoji_req_emoji_info::SharedDtor() {
  animation_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_wxid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_ext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag8_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  utc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete tag4_;
  }
}

void send_emoji_req_emoji_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* send_emoji_req_emoji_info::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const send_emoji_req_emoji_info& send_emoji_req_emoji_info::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

send_emoji_req_emoji_info* send_emoji_req_emoji_info::New(::google::protobuf::Arena* arena) const {
  send_emoji_req_emoji_info* n = new send_emoji_req_emoji_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void send_emoji_req_emoji_info::Clear() {
// @@protoc_insertion_point(message_clear_start:send_emoji_req.emoji_info)
  if (_has_bits_[0 / 32] & 63u) {
    if (has_animation_id()) {
      GOOGLE_DCHECK(!animation_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*animation_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_to_wxid()) {
      GOOGLE_DCHECK(!to_wxid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*to_wxid_.UnsafeRawStringPointer())->clear();
    }
    if (has_game_ext()) {
      GOOGLE_DCHECK(!game_ext_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*game_ext_.UnsafeRawStringPointer())->clear();
    }
    if (has_tag8()) {
      GOOGLE_DCHECK(!tag8_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tag8_.UnsafeRawStringPointer())->clear();
    }
    if (has_utc()) {
      GOOGLE_DCHECK(!utc_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*utc_.UnsafeRawStringPointer())->clear();
    }
    if (has_tag4()) {
      GOOGLE_DCHECK(tag4_ != NULL);
      tag4_->::send_emoji_req_emoji_info_TAG4::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 192u) {
    ::memset(&tag2_, 0, reinterpret_cast<char*>(&tag3_) -
      reinterpret_cast<char*>(&tag2_) + sizeof(tag3_));
  }
  if (_has_bits_[8 / 32] & 768u) {
    ::memset(&tag5_, 0, reinterpret_cast<char*>(&tag11_) -
      reinterpret_cast<char*>(&tag5_) + sizeof(tag11_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool send_emoji_req_emoji_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:send_emoji_req.emoji_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string animation_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_animation_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->animation_id().data(), this->animation_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "send_emoji_req.emoji_info.animation_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tag2 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_tag2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tag3 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_tag3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .send_emoji_req.emoji_info.TAG4 tag4 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tag4()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tag5 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_tag5();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string to_wxid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_wxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->to_wxid().data(), this->to_wxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "send_emoji_req.emoji_info.to_wxid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string game_ext = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_ext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_ext().data(), this->game_ext().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "send_emoji_req.emoji_info.game_ext");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string tag8 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag8()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag8().data(), this->tag8().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "send_emoji_req.emoji_info.tag8");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string utc = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_utc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->utc().data(), this->utc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "send_emoji_req.emoji_info.utc");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tag11 = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_tag11();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag11_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:send_emoji_req.emoji_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:send_emoji_req.emoji_info)
  return false;
#undef DO_
}

void send_emoji_req_emoji_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:send_emoji_req.emoji_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string animation_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->animation_id().data(), this->animation_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "send_emoji_req.emoji_info.animation_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->animation_id(), output);
  }

  // optional int32 tag2 = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tag2(), output);
  }

  // optional int32 tag3 = 3;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tag3(), output);
  }

  // optional .send_emoji_req.emoji_info.TAG4 tag4 = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->tag4_, output);
  }

  // optional int32 tag5 = 5;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->tag5(), output);
  }

  // optional string to_wxid = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to_wxid().data(), this->to_wxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "send_emoji_req.emoji_info.to_wxid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->to_wxid(), output);
  }

  // optional string game_ext = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_ext().data(), this->game_ext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "send_emoji_req.emoji_info.game_ext");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->game_ext(), output);
  }

  // optional string tag8 = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag8().data(), this->tag8().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "send_emoji_req.emoji_info.tag8");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->tag8(), output);
  }

  // optional string utc = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->utc().data(), this->utc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "send_emoji_req.emoji_info.utc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->utc(), output);
  }

  // optional int32 tag11 = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->tag11(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:send_emoji_req.emoji_info)
}

::google::protobuf::uint8* send_emoji_req_emoji_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:send_emoji_req.emoji_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string animation_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->animation_id().data(), this->animation_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "send_emoji_req.emoji_info.animation_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->animation_id(), target);
  }

  // optional int32 tag2 = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tag2(), target);
  }

  // optional int32 tag3 = 3;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tag3(), target);
  }

  // optional .send_emoji_req.emoji_info.TAG4 tag4 = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->tag4_, deterministic, target);
  }

  // optional int32 tag5 = 5;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->tag5(), target);
  }

  // optional string to_wxid = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to_wxid().data(), this->to_wxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "send_emoji_req.emoji_info.to_wxid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->to_wxid(), target);
  }

  // optional string game_ext = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_ext().data(), this->game_ext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "send_emoji_req.emoji_info.game_ext");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->game_ext(), target);
  }

  // optional string tag8 = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag8().data(), this->tag8().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "send_emoji_req.emoji_info.tag8");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->tag8(), target);
  }

  // optional string utc = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->utc().data(), this->utc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "send_emoji_req.emoji_info.utc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->utc(), target);
  }

  // optional int32 tag11 = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->tag11(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:send_emoji_req.emoji_info)
  return target;
}

size_t send_emoji_req_emoji_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:send_emoji_req.emoji_info)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string animation_id = 1;
    if (has_animation_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->animation_id());
    }

    // optional string to_wxid = 6;
    if (has_to_wxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to_wxid());
    }

    // optional string game_ext = 7;
    if (has_game_ext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_ext());
    }

    // optional string tag8 = 8;
    if (has_tag8()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag8());
    }

    // optional string utc = 9;
    if (has_utc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->utc());
    }

    // optional .send_emoji_req.emoji_info.TAG4 tag4 = 4;
    if (has_tag4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->tag4_);
    }

    // optional int32 tag2 = 2;
    if (has_tag2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag2());
    }

    // optional int32 tag3 = 3;
    if (has_tag3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag3());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional int32 tag5 = 5;
    if (has_tag5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag5());
    }

    // optional int32 tag11 = 11;
    if (has_tag11()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag11());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void send_emoji_req_emoji_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:send_emoji_req.emoji_info)
  GOOGLE_DCHECK_NE(&from, this);
  const send_emoji_req_emoji_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const send_emoji_req_emoji_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:send_emoji_req.emoji_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:send_emoji_req.emoji_info)
    MergeFrom(*source);
  }
}

void send_emoji_req_emoji_info::MergeFrom(const send_emoji_req_emoji_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:send_emoji_req.emoji_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_animation_id();
      animation_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.animation_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_to_wxid();
      to_wxid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_wxid_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_game_ext();
      game_ext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_ext_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_tag8();
      tag8_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag8_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_utc();
      utc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.utc_);
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_tag4()->::send_emoji_req_emoji_info_TAG4::MergeFrom(from.tag4());
    }
    if (cached_has_bits & 0x00000040u) {
      tag2_ = from.tag2_;
    }
    if (cached_has_bits & 0x00000080u) {
      tag3_ = from.tag3_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      tag5_ = from.tag5_;
    }
    if (cached_has_bits & 0x00000200u) {
      tag11_ = from.tag11_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void send_emoji_req_emoji_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:send_emoji_req.emoji_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void send_emoji_req_emoji_info::CopyFrom(const send_emoji_req_emoji_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:send_emoji_req.emoji_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool send_emoji_req_emoji_info::IsInitialized() const {
  return true;
}

void send_emoji_req_emoji_info::Swap(send_emoji_req_emoji_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void send_emoji_req_emoji_info::InternalSwap(send_emoji_req_emoji_info* other) {
  animation_id_.Swap(&other->animation_id_);
  to_wxid_.Swap(&other->to_wxid_);
  game_ext_.Swap(&other->game_ext_);
  tag8_.Swap(&other->tag8_);
  utc_.Swap(&other->utc_);
  std::swap(tag4_, other->tag4_);
  std::swap(tag2_, other->tag2_);
  std::swap(tag3_, other->tag3_);
  std::swap(tag5_, other->tag5_);
  std::swap(tag11_, other->tag11_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata send_emoji_req_emoji_info::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// send_emoji_req_emoji_info

// optional string animation_id = 1;
bool send_emoji_req_emoji_info::has_animation_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void send_emoji_req_emoji_info::set_has_animation_id() {
  _has_bits_[0] |= 0x00000001u;
}
void send_emoji_req_emoji_info::clear_has_animation_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void send_emoji_req_emoji_info::clear_animation_id() {
  animation_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_animation_id();
}
const ::std::string& send_emoji_req_emoji_info::animation_id() const {
  // @@protoc_insertion_point(field_get:send_emoji_req.emoji_info.animation_id)
  return animation_id_.GetNoArena();
}
void send_emoji_req_emoji_info::set_animation_id(const ::std::string& value) {
  set_has_animation_id();
  animation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:send_emoji_req.emoji_info.animation_id)
}
#if LANG_CXX11
void send_emoji_req_emoji_info::set_animation_id(::std::string&& value) {
  set_has_animation_id();
  animation_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:send_emoji_req.emoji_info.animation_id)
}
#endif
void send_emoji_req_emoji_info::set_animation_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_animation_id();
  animation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:send_emoji_req.emoji_info.animation_id)
}
void send_emoji_req_emoji_info::set_animation_id(const char* value, size_t size) {
  set_has_animation_id();
  animation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:send_emoji_req.emoji_info.animation_id)
}
::std::string* send_emoji_req_emoji_info::mutable_animation_id() {
  set_has_animation_id();
  // @@protoc_insertion_point(field_mutable:send_emoji_req.emoji_info.animation_id)
  return animation_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* send_emoji_req_emoji_info::release_animation_id() {
  // @@protoc_insertion_point(field_release:send_emoji_req.emoji_info.animation_id)
  clear_has_animation_id();
  return animation_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void send_emoji_req_emoji_info::set_allocated_animation_id(::std::string* animation_id) {
  if (animation_id != NULL) {
    set_has_animation_id();
  } else {
    clear_has_animation_id();
  }
  animation_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), animation_id);
  // @@protoc_insertion_point(field_set_allocated:send_emoji_req.emoji_info.animation_id)
}

// optional int32 tag2 = 2;
bool send_emoji_req_emoji_info::has_tag2() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void send_emoji_req_emoji_info::set_has_tag2() {
  _has_bits_[0] |= 0x00000040u;
}
void send_emoji_req_emoji_info::clear_has_tag2() {
  _has_bits_[0] &= ~0x00000040u;
}
void send_emoji_req_emoji_info::clear_tag2() {
  tag2_ = 0;
  clear_has_tag2();
}
::google::protobuf::int32 send_emoji_req_emoji_info::tag2() const {
  // @@protoc_insertion_point(field_get:send_emoji_req.emoji_info.tag2)
  return tag2_;
}
void send_emoji_req_emoji_info::set_tag2(::google::protobuf::int32 value) {
  set_has_tag2();
  tag2_ = value;
  // @@protoc_insertion_point(field_set:send_emoji_req.emoji_info.tag2)
}

// optional int32 tag3 = 3;
bool send_emoji_req_emoji_info::has_tag3() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void send_emoji_req_emoji_info::set_has_tag3() {
  _has_bits_[0] |= 0x00000080u;
}
void send_emoji_req_emoji_info::clear_has_tag3() {
  _has_bits_[0] &= ~0x00000080u;
}
void send_emoji_req_emoji_info::clear_tag3() {
  tag3_ = 0;
  clear_has_tag3();
}
::google::protobuf::int32 send_emoji_req_emoji_info::tag3() const {
  // @@protoc_insertion_point(field_get:send_emoji_req.emoji_info.tag3)
  return tag3_;
}
void send_emoji_req_emoji_info::set_tag3(::google::protobuf::int32 value) {
  set_has_tag3();
  tag3_ = value;
  // @@protoc_insertion_point(field_set:send_emoji_req.emoji_info.tag3)
}

// optional .send_emoji_req.emoji_info.TAG4 tag4 = 4;
bool send_emoji_req_emoji_info::has_tag4() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void send_emoji_req_emoji_info::set_has_tag4() {
  _has_bits_[0] |= 0x00000020u;
}
void send_emoji_req_emoji_info::clear_has_tag4() {
  _has_bits_[0] &= ~0x00000020u;
}
void send_emoji_req_emoji_info::clear_tag4() {
  if (tag4_ != NULL) tag4_->::send_emoji_req_emoji_info_TAG4::Clear();
  clear_has_tag4();
}
const ::send_emoji_req_emoji_info_TAG4& send_emoji_req_emoji_info::tag4() const {
  // @@protoc_insertion_point(field_get:send_emoji_req.emoji_info.tag4)
  return tag4_ != NULL ? *tag4_
                         : *::send_emoji_req_emoji_info_TAG4::internal_default_instance();
}
::send_emoji_req_emoji_info_TAG4* send_emoji_req_emoji_info::mutable_tag4() {
  set_has_tag4();
  if (tag4_ == NULL) {
    tag4_ = new ::send_emoji_req_emoji_info_TAG4;
  }
  // @@protoc_insertion_point(field_mutable:send_emoji_req.emoji_info.tag4)
  return tag4_;
}
::send_emoji_req_emoji_info_TAG4* send_emoji_req_emoji_info::release_tag4() {
  // @@protoc_insertion_point(field_release:send_emoji_req.emoji_info.tag4)
  clear_has_tag4();
  ::send_emoji_req_emoji_info_TAG4* temp = tag4_;
  tag4_ = NULL;
  return temp;
}
void send_emoji_req_emoji_info::set_allocated_tag4(::send_emoji_req_emoji_info_TAG4* tag4) {
  delete tag4_;
  tag4_ = tag4;
  if (tag4) {
    set_has_tag4();
  } else {
    clear_has_tag4();
  }
  // @@protoc_insertion_point(field_set_allocated:send_emoji_req.emoji_info.tag4)
}

// optional int32 tag5 = 5;
bool send_emoji_req_emoji_info::has_tag5() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void send_emoji_req_emoji_info::set_has_tag5() {
  _has_bits_[0] |= 0x00000100u;
}
void send_emoji_req_emoji_info::clear_has_tag5() {
  _has_bits_[0] &= ~0x00000100u;
}
void send_emoji_req_emoji_info::clear_tag5() {
  tag5_ = 0;
  clear_has_tag5();
}
::google::protobuf::int32 send_emoji_req_emoji_info::tag5() const {
  // @@protoc_insertion_point(field_get:send_emoji_req.emoji_info.tag5)
  return tag5_;
}
void send_emoji_req_emoji_info::set_tag5(::google::protobuf::int32 value) {
  set_has_tag5();
  tag5_ = value;
  // @@protoc_insertion_point(field_set:send_emoji_req.emoji_info.tag5)
}

// optional string to_wxid = 6;
bool send_emoji_req_emoji_info::has_to_wxid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void send_emoji_req_emoji_info::set_has_to_wxid() {
  _has_bits_[0] |= 0x00000002u;
}
void send_emoji_req_emoji_info::clear_has_to_wxid() {
  _has_bits_[0] &= ~0x00000002u;
}
void send_emoji_req_emoji_info::clear_to_wxid() {
  to_wxid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_to_wxid();
}
const ::std::string& send_emoji_req_emoji_info::to_wxid() const {
  // @@protoc_insertion_point(field_get:send_emoji_req.emoji_info.to_wxid)
  return to_wxid_.GetNoArena();
}
void send_emoji_req_emoji_info::set_to_wxid(const ::std::string& value) {
  set_has_to_wxid();
  to_wxid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:send_emoji_req.emoji_info.to_wxid)
}
#if LANG_CXX11
void send_emoji_req_emoji_info::set_to_wxid(::std::string&& value) {
  set_has_to_wxid();
  to_wxid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:send_emoji_req.emoji_info.to_wxid)
}
#endif
void send_emoji_req_emoji_info::set_to_wxid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_to_wxid();
  to_wxid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:send_emoji_req.emoji_info.to_wxid)
}
void send_emoji_req_emoji_info::set_to_wxid(const char* value, size_t size) {
  set_has_to_wxid();
  to_wxid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:send_emoji_req.emoji_info.to_wxid)
}
::std::string* send_emoji_req_emoji_info::mutable_to_wxid() {
  set_has_to_wxid();
  // @@protoc_insertion_point(field_mutable:send_emoji_req.emoji_info.to_wxid)
  return to_wxid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* send_emoji_req_emoji_info::release_to_wxid() {
  // @@protoc_insertion_point(field_release:send_emoji_req.emoji_info.to_wxid)
  clear_has_to_wxid();
  return to_wxid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void send_emoji_req_emoji_info::set_allocated_to_wxid(::std::string* to_wxid) {
  if (to_wxid != NULL) {
    set_has_to_wxid();
  } else {
    clear_has_to_wxid();
  }
  to_wxid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_wxid);
  // @@protoc_insertion_point(field_set_allocated:send_emoji_req.emoji_info.to_wxid)
}

// optional string game_ext = 7;
bool send_emoji_req_emoji_info::has_game_ext() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void send_emoji_req_emoji_info::set_has_game_ext() {
  _has_bits_[0] |= 0x00000004u;
}
void send_emoji_req_emoji_info::clear_has_game_ext() {
  _has_bits_[0] &= ~0x00000004u;
}
void send_emoji_req_emoji_info::clear_game_ext() {
  game_ext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_game_ext();
}
const ::std::string& send_emoji_req_emoji_info::game_ext() const {
  // @@protoc_insertion_point(field_get:send_emoji_req.emoji_info.game_ext)
  return game_ext_.GetNoArena();
}
void send_emoji_req_emoji_info::set_game_ext(const ::std::string& value) {
  set_has_game_ext();
  game_ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:send_emoji_req.emoji_info.game_ext)
}
#if LANG_CXX11
void send_emoji_req_emoji_info::set_game_ext(::std::string&& value) {
  set_has_game_ext();
  game_ext_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:send_emoji_req.emoji_info.game_ext)
}
#endif
void send_emoji_req_emoji_info::set_game_ext(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_game_ext();
  game_ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:send_emoji_req.emoji_info.game_ext)
}
void send_emoji_req_emoji_info::set_game_ext(const char* value, size_t size) {
  set_has_game_ext();
  game_ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:send_emoji_req.emoji_info.game_ext)
}
::std::string* send_emoji_req_emoji_info::mutable_game_ext() {
  set_has_game_ext();
  // @@protoc_insertion_point(field_mutable:send_emoji_req.emoji_info.game_ext)
  return game_ext_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* send_emoji_req_emoji_info::release_game_ext() {
  // @@protoc_insertion_point(field_release:send_emoji_req.emoji_info.game_ext)
  clear_has_game_ext();
  return game_ext_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void send_emoji_req_emoji_info::set_allocated_game_ext(::std::string* game_ext) {
  if (game_ext != NULL) {
    set_has_game_ext();
  } else {
    clear_has_game_ext();
  }
  game_ext_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), game_ext);
  // @@protoc_insertion_point(field_set_allocated:send_emoji_req.emoji_info.game_ext)
}

// optional string tag8 = 8;
bool send_emoji_req_emoji_info::has_tag8() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void send_emoji_req_emoji_info::set_has_tag8() {
  _has_bits_[0] |= 0x00000008u;
}
void send_emoji_req_emoji_info::clear_has_tag8() {
  _has_bits_[0] &= ~0x00000008u;
}
void send_emoji_req_emoji_info::clear_tag8() {
  tag8_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tag8();
}
const ::std::string& send_emoji_req_emoji_info::tag8() const {
  // @@protoc_insertion_point(field_get:send_emoji_req.emoji_info.tag8)
  return tag8_.GetNoArena();
}
void send_emoji_req_emoji_info::set_tag8(const ::std::string& value) {
  set_has_tag8();
  tag8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:send_emoji_req.emoji_info.tag8)
}
#if LANG_CXX11
void send_emoji_req_emoji_info::set_tag8(::std::string&& value) {
  set_has_tag8();
  tag8_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:send_emoji_req.emoji_info.tag8)
}
#endif
void send_emoji_req_emoji_info::set_tag8(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tag8();
  tag8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:send_emoji_req.emoji_info.tag8)
}
void send_emoji_req_emoji_info::set_tag8(const char* value, size_t size) {
  set_has_tag8();
  tag8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:send_emoji_req.emoji_info.tag8)
}
::std::string* send_emoji_req_emoji_info::mutable_tag8() {
  set_has_tag8();
  // @@protoc_insertion_point(field_mutable:send_emoji_req.emoji_info.tag8)
  return tag8_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* send_emoji_req_emoji_info::release_tag8() {
  // @@protoc_insertion_point(field_release:send_emoji_req.emoji_info.tag8)
  clear_has_tag8();
  return tag8_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void send_emoji_req_emoji_info::set_allocated_tag8(::std::string* tag8) {
  if (tag8 != NULL) {
    set_has_tag8();
  } else {
    clear_has_tag8();
  }
  tag8_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag8);
  // @@protoc_insertion_point(field_set_allocated:send_emoji_req.emoji_info.tag8)
}

// optional string utc = 9;
bool send_emoji_req_emoji_info::has_utc() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void send_emoji_req_emoji_info::set_has_utc() {
  _has_bits_[0] |= 0x00000010u;
}
void send_emoji_req_emoji_info::clear_has_utc() {
  _has_bits_[0] &= ~0x00000010u;
}
void send_emoji_req_emoji_info::clear_utc() {
  utc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_utc();
}
const ::std::string& send_emoji_req_emoji_info::utc() const {
  // @@protoc_insertion_point(field_get:send_emoji_req.emoji_info.utc)
  return utc_.GetNoArena();
}
void send_emoji_req_emoji_info::set_utc(const ::std::string& value) {
  set_has_utc();
  utc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:send_emoji_req.emoji_info.utc)
}
#if LANG_CXX11
void send_emoji_req_emoji_info::set_utc(::std::string&& value) {
  set_has_utc();
  utc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:send_emoji_req.emoji_info.utc)
}
#endif
void send_emoji_req_emoji_info::set_utc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_utc();
  utc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:send_emoji_req.emoji_info.utc)
}
void send_emoji_req_emoji_info::set_utc(const char* value, size_t size) {
  set_has_utc();
  utc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:send_emoji_req.emoji_info.utc)
}
::std::string* send_emoji_req_emoji_info::mutable_utc() {
  set_has_utc();
  // @@protoc_insertion_point(field_mutable:send_emoji_req.emoji_info.utc)
  return utc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* send_emoji_req_emoji_info::release_utc() {
  // @@protoc_insertion_point(field_release:send_emoji_req.emoji_info.utc)
  clear_has_utc();
  return utc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void send_emoji_req_emoji_info::set_allocated_utc(::std::string* utc) {
  if (utc != NULL) {
    set_has_utc();
  } else {
    clear_has_utc();
  }
  utc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), utc);
  // @@protoc_insertion_point(field_set_allocated:send_emoji_req.emoji_info.utc)
}

// optional int32 tag11 = 11;
bool send_emoji_req_emoji_info::has_tag11() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void send_emoji_req_emoji_info::set_has_tag11() {
  _has_bits_[0] |= 0x00000200u;
}
void send_emoji_req_emoji_info::clear_has_tag11() {
  _has_bits_[0] &= ~0x00000200u;
}
void send_emoji_req_emoji_info::clear_tag11() {
  tag11_ = 0;
  clear_has_tag11();
}
::google::protobuf::int32 send_emoji_req_emoji_info::tag11() const {
  // @@protoc_insertion_point(field_get:send_emoji_req.emoji_info.tag11)
  return tag11_;
}
void send_emoji_req_emoji_info::set_tag11(::google::protobuf::int32 value) {
  set_has_tag11();
  tag11_ = value;
  // @@protoc_insertion_point(field_set:send_emoji_req.emoji_info.tag11)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int send_emoji_req::kLoginFieldNumber;
const int send_emoji_req::kTag2FieldNumber;
const int send_emoji_req::kEmojiFieldNumber;
const int send_emoji_req::kTag4FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

send_emoji_req::send_emoji_req()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:send_emoji_req)
}
send_emoji_req::send_emoji_req(const send_emoji_req& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_login()) {
    login_ = new ::LoginInfo(*from.login_);
  } else {
    login_ = NULL;
  }
  if (from.has_emoji()) {
    emoji_ = new ::send_emoji_req_emoji_info(*from.emoji_);
  } else {
    emoji_ = NULL;
  }
  ::memcpy(&tag2_, &from.tag2_,
    reinterpret_cast<char*>(&tag4_) -
    reinterpret_cast<char*>(&tag2_) + sizeof(tag4_));
  // @@protoc_insertion_point(copy_constructor:send_emoji_req)
}

void send_emoji_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&login_, 0, reinterpret_cast<char*>(&tag4_) -
    reinterpret_cast<char*>(&login_) + sizeof(tag4_));
}

send_emoji_req::~send_emoji_req() {
  // @@protoc_insertion_point(destructor:send_emoji_req)
  SharedDtor();
}

void send_emoji_req::SharedDtor() {
  if (this != internal_default_instance()) {
    delete login_;
  }
  if (this != internal_default_instance()) {
    delete emoji_;
  }
}

void send_emoji_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* send_emoji_req::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const send_emoji_req& send_emoji_req::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

send_emoji_req* send_emoji_req::New(::google::protobuf::Arena* arena) const {
  send_emoji_req* n = new send_emoji_req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void send_emoji_req::Clear() {
// @@protoc_insertion_point(message_clear_start:send_emoji_req)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_login()) {
      GOOGLE_DCHECK(login_ != NULL);
      login_->::LoginInfo::Clear();
    }
    if (has_emoji()) {
      GOOGLE_DCHECK(emoji_ != NULL);
      emoji_->::send_emoji_req_emoji_info::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&tag2_, 0, reinterpret_cast<char*>(&tag4_) -
      reinterpret_cast<char*>(&tag2_) + sizeof(tag4_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool send_emoji_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:send_emoji_req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .LoginInfo login = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tag2 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_tag2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .send_emoji_req.emoji_info emoji = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_emoji()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tag4 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_tag4();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:send_emoji_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:send_emoji_req)
  return false;
#undef DO_
}

void send_emoji_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:send_emoji_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .LoginInfo login = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->login_, output);
  }

  // optional int32 tag2 = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tag2(), output);
  }

  // optional .send_emoji_req.emoji_info emoji = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->emoji_, output);
  }

  // optional int32 tag4 = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tag4(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:send_emoji_req)
}

::google::protobuf::uint8* send_emoji_req::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:send_emoji_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .LoginInfo login = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->login_, deterministic, target);
  }

  // optional int32 tag2 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tag2(), target);
  }

  // optional .send_emoji_req.emoji_info emoji = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->emoji_, deterministic, target);
  }

  // optional int32 tag4 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->tag4(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:send_emoji_req)
  return target;
}

size_t send_emoji_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:send_emoji_req)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .LoginInfo login = 1;
    if (has_login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->login_);
    }

    // optional .send_emoji_req.emoji_info emoji = 3;
    if (has_emoji()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->emoji_);
    }

    // optional int32 tag2 = 2;
    if (has_tag2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag2());
    }

    // optional int32 tag4 = 4;
    if (has_tag4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag4());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void send_emoji_req::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:send_emoji_req)
  GOOGLE_DCHECK_NE(&from, this);
  const send_emoji_req* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const send_emoji_req>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:send_emoji_req)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:send_emoji_req)
    MergeFrom(*source);
  }
}

void send_emoji_req::MergeFrom(const send_emoji_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:send_emoji_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_login()->::LoginInfo::MergeFrom(from.login());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_emoji()->::send_emoji_req_emoji_info::MergeFrom(from.emoji());
    }
    if (cached_has_bits & 0x00000004u) {
      tag2_ = from.tag2_;
    }
    if (cached_has_bits & 0x00000008u) {
      tag4_ = from.tag4_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void send_emoji_req::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:send_emoji_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void send_emoji_req::CopyFrom(const send_emoji_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:send_emoji_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool send_emoji_req::IsInitialized() const {
  return true;
}

void send_emoji_req::Swap(send_emoji_req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void send_emoji_req::InternalSwap(send_emoji_req* other) {
  std::swap(login_, other->login_);
  std::swap(emoji_, other->emoji_);
  std::swap(tag2_, other->tag2_);
  std::swap(tag4_, other->tag4_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata send_emoji_req::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// send_emoji_req

// optional .LoginInfo login = 1;
bool send_emoji_req::has_login() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void send_emoji_req::set_has_login() {
  _has_bits_[0] |= 0x00000001u;
}
void send_emoji_req::clear_has_login() {
  _has_bits_[0] &= ~0x00000001u;
}
void send_emoji_req::clear_login() {
  if (login_ != NULL) login_->::LoginInfo::Clear();
  clear_has_login();
}
const ::LoginInfo& send_emoji_req::login() const {
  // @@protoc_insertion_point(field_get:send_emoji_req.login)
  return login_ != NULL ? *login_
                         : *::LoginInfo::internal_default_instance();
}
::LoginInfo* send_emoji_req::mutable_login() {
  set_has_login();
  if (login_ == NULL) {
    login_ = new ::LoginInfo;
  }
  // @@protoc_insertion_point(field_mutable:send_emoji_req.login)
  return login_;
}
::LoginInfo* send_emoji_req::release_login() {
  // @@protoc_insertion_point(field_release:send_emoji_req.login)
  clear_has_login();
  ::LoginInfo* temp = login_;
  login_ = NULL;
  return temp;
}
void send_emoji_req::set_allocated_login(::LoginInfo* login) {
  delete login_;
  login_ = login;
  if (login) {
    set_has_login();
  } else {
    clear_has_login();
  }
  // @@protoc_insertion_point(field_set_allocated:send_emoji_req.login)
}

// optional int32 tag2 = 2;
bool send_emoji_req::has_tag2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void send_emoji_req::set_has_tag2() {
  _has_bits_[0] |= 0x00000004u;
}
void send_emoji_req::clear_has_tag2() {
  _has_bits_[0] &= ~0x00000004u;
}
void send_emoji_req::clear_tag2() {
  tag2_ = 0;
  clear_has_tag2();
}
::google::protobuf::int32 send_emoji_req::tag2() const {
  // @@protoc_insertion_point(field_get:send_emoji_req.tag2)
  return tag2_;
}
void send_emoji_req::set_tag2(::google::protobuf::int32 value) {
  set_has_tag2();
  tag2_ = value;
  // @@protoc_insertion_point(field_set:send_emoji_req.tag2)
}

// optional .send_emoji_req.emoji_info emoji = 3;
bool send_emoji_req::has_emoji() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void send_emoji_req::set_has_emoji() {
  _has_bits_[0] |= 0x00000002u;
}
void send_emoji_req::clear_has_emoji() {
  _has_bits_[0] &= ~0x00000002u;
}
void send_emoji_req::clear_emoji() {
  if (emoji_ != NULL) emoji_->::send_emoji_req_emoji_info::Clear();
  clear_has_emoji();
}
const ::send_emoji_req_emoji_info& send_emoji_req::emoji() const {
  // @@protoc_insertion_point(field_get:send_emoji_req.emoji)
  return emoji_ != NULL ? *emoji_
                         : *::send_emoji_req_emoji_info::internal_default_instance();
}
::send_emoji_req_emoji_info* send_emoji_req::mutable_emoji() {
  set_has_emoji();
  if (emoji_ == NULL) {
    emoji_ = new ::send_emoji_req_emoji_info;
  }
  // @@protoc_insertion_point(field_mutable:send_emoji_req.emoji)
  return emoji_;
}
::send_emoji_req_emoji_info* send_emoji_req::release_emoji() {
  // @@protoc_insertion_point(field_release:send_emoji_req.emoji)
  clear_has_emoji();
  ::send_emoji_req_emoji_info* temp = emoji_;
  emoji_ = NULL;
  return temp;
}
void send_emoji_req::set_allocated_emoji(::send_emoji_req_emoji_info* emoji) {
  delete emoji_;
  emoji_ = emoji;
  if (emoji) {
    set_has_emoji();
  } else {
    clear_has_emoji();
  }
  // @@protoc_insertion_point(field_set_allocated:send_emoji_req.emoji)
}

// optional int32 tag4 = 4;
bool send_emoji_req::has_tag4() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void send_emoji_req::set_has_tag4() {
  _has_bits_[0] |= 0x00000008u;
}
void send_emoji_req::clear_has_tag4() {
  _has_bits_[0] &= ~0x00000008u;
}
void send_emoji_req::clear_tag4() {
  tag4_ = 0;
  clear_has_tag4();
}
::google::protobuf::int32 send_emoji_req::tag4() const {
  // @@protoc_insertion_point(field_get:send_emoji_req.tag4)
  return tag4_;
}
void send_emoji_req::set_tag4(::google::protobuf::int32 value) {
  set_has_tag4();
  tag4_ = value;
  // @@protoc_insertion_point(field_set:send_emoji_req.tag4)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int send_emoji_resp_result::kCodeFieldNumber;
const int send_emoji_resp_result::kTag2FieldNumber;
const int send_emoji_resp_result::kTag3FieldNumber;
const int send_emoji_resp_result::kFileNameFieldNumber;
const int send_emoji_resp_result::kSvridFieldNumber;
const int send_emoji_resp_result::kTag6FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

send_emoji_resp_result::send_emoji_resp_result()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:send_emoji_resp.result)
}
send_emoji_resp_result::send_emoji_resp_result(const send_emoji_resp_result& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_name()) {
    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  ::memcpy(&code_, &from.code_,
    reinterpret_cast<char*>(&tag6_) -
    reinterpret_cast<char*>(&code_) + sizeof(tag6_));
  // @@protoc_insertion_point(copy_constructor:send_emoji_resp.result)
}

void send_emoji_resp_result::SharedCtor() {
  _cached_size_ = 0;
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&code_, 0, reinterpret_cast<char*>(&tag6_) -
    reinterpret_cast<char*>(&code_) + sizeof(tag6_));
}

send_emoji_resp_result::~send_emoji_resp_result() {
  // @@protoc_insertion_point(destructor:send_emoji_resp.result)
  SharedDtor();
}

void send_emoji_resp_result::SharedDtor() {
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void send_emoji_resp_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* send_emoji_resp_result::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const send_emoji_resp_result& send_emoji_resp_result::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

send_emoji_resp_result* send_emoji_resp_result::New(::google::protobuf::Arena* arena) const {
  send_emoji_resp_result* n = new send_emoji_resp_result;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void send_emoji_resp_result::Clear() {
// @@protoc_insertion_point(message_clear_start:send_emoji_resp.result)
  if (has_file_name()) {
    GOOGLE_DCHECK(!file_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*file_name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 62u) {
    ::memset(&code_, 0, reinterpret_cast<char*>(&tag6_) -
      reinterpret_cast<char*>(&code_) + sizeof(tag6_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool send_emoji_resp_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:send_emoji_resp.result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tag2 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_tag2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tag3 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_tag3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string file_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "send_emoji_resp.result.file_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 svrid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_svrid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &svrid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tag6 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_tag6();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag6_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:send_emoji_resp.result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:send_emoji_resp.result)
  return false;
#undef DO_
}

void send_emoji_resp_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:send_emoji_resp.result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 code = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // optional int32 tag2 = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tag2(), output);
  }

  // optional int32 tag3 = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tag3(), output);
  }

  // optional string file_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "send_emoji_resp.result.file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->file_name(), output);
  }

  // optional int32 svrid = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->svrid(), output);
  }

  // optional int32 tag6 = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->tag6(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:send_emoji_resp.result)
}

::google::protobuf::uint8* send_emoji_resp_result::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:send_emoji_resp.result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // optional int32 tag2 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tag2(), target);
  }

  // optional int32 tag3 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tag3(), target);
  }

  // optional string file_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "send_emoji_resp.result.file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->file_name(), target);
  }

  // optional int32 svrid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->svrid(), target);
  }

  // optional int32 tag6 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->tag6(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:send_emoji_resp.result)
  return target;
}

size_t send_emoji_resp_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:send_emoji_resp.result)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string file_name = 4;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

    // optional int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // optional int32 tag2 = 2;
    if (has_tag2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag2());
    }

    // optional int32 tag3 = 3;
    if (has_tag3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag3());
    }

    // optional int32 svrid = 5;
    if (has_svrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->svrid());
    }

    // optional int32 tag6 = 6;
    if (has_tag6()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag6());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void send_emoji_resp_result::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:send_emoji_resp.result)
  GOOGLE_DCHECK_NE(&from, this);
  const send_emoji_resp_result* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const send_emoji_resp_result>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:send_emoji_resp.result)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:send_emoji_resp.result)
    MergeFrom(*source);
  }
}

void send_emoji_resp_result::MergeFrom(const send_emoji_resp_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:send_emoji_resp.result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_file_name();
      file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      code_ = from.code_;
    }
    if (cached_has_bits & 0x00000004u) {
      tag2_ = from.tag2_;
    }
    if (cached_has_bits & 0x00000008u) {
      tag3_ = from.tag3_;
    }
    if (cached_has_bits & 0x00000010u) {
      svrid_ = from.svrid_;
    }
    if (cached_has_bits & 0x00000020u) {
      tag6_ = from.tag6_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void send_emoji_resp_result::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:send_emoji_resp.result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void send_emoji_resp_result::CopyFrom(const send_emoji_resp_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:send_emoji_resp.result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool send_emoji_resp_result::IsInitialized() const {
  return true;
}

void send_emoji_resp_result::Swap(send_emoji_resp_result* other) {
  if (other == this) return;
  InternalSwap(other);
}
void send_emoji_resp_result::InternalSwap(send_emoji_resp_result* other) {
  file_name_.Swap(&other->file_name_);
  std::swap(code_, other->code_);
  std::swap(tag2_, other->tag2_);
  std::swap(tag3_, other->tag3_);
  std::swap(svrid_, other->svrid_);
  std::swap(tag6_, other->tag6_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata send_emoji_resp_result::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// send_emoji_resp_result

// optional int32 code = 1;
bool send_emoji_resp_result::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void send_emoji_resp_result::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
void send_emoji_resp_result::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void send_emoji_resp_result::clear_code() {
  code_ = 0;
  clear_has_code();
}
::google::protobuf::int32 send_emoji_resp_result::code() const {
  // @@protoc_insertion_point(field_get:send_emoji_resp.result.code)
  return code_;
}
void send_emoji_resp_result::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:send_emoji_resp.result.code)
}

// optional int32 tag2 = 2;
bool send_emoji_resp_result::has_tag2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void send_emoji_resp_result::set_has_tag2() {
  _has_bits_[0] |= 0x00000004u;
}
void send_emoji_resp_result::clear_has_tag2() {
  _has_bits_[0] &= ~0x00000004u;
}
void send_emoji_resp_result::clear_tag2() {
  tag2_ = 0;
  clear_has_tag2();
}
::google::protobuf::int32 send_emoji_resp_result::tag2() const {
  // @@protoc_insertion_point(field_get:send_emoji_resp.result.tag2)
  return tag2_;
}
void send_emoji_resp_result::set_tag2(::google::protobuf::int32 value) {
  set_has_tag2();
  tag2_ = value;
  // @@protoc_insertion_point(field_set:send_emoji_resp.result.tag2)
}

// optional int32 tag3 = 3;
bool send_emoji_resp_result::has_tag3() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void send_emoji_resp_result::set_has_tag3() {
  _has_bits_[0] |= 0x00000008u;
}
void send_emoji_resp_result::clear_has_tag3() {
  _has_bits_[0] &= ~0x00000008u;
}
void send_emoji_resp_result::clear_tag3() {
  tag3_ = 0;
  clear_has_tag3();
}
::google::protobuf::int32 send_emoji_resp_result::tag3() const {
  // @@protoc_insertion_point(field_get:send_emoji_resp.result.tag3)
  return tag3_;
}
void send_emoji_resp_result::set_tag3(::google::protobuf::int32 value) {
  set_has_tag3();
  tag3_ = value;
  // @@protoc_insertion_point(field_set:send_emoji_resp.result.tag3)
}

// optional string file_name = 4;
bool send_emoji_resp_result::has_file_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void send_emoji_resp_result::set_has_file_name() {
  _has_bits_[0] |= 0x00000001u;
}
void send_emoji_resp_result::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void send_emoji_resp_result::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_name();
}
const ::std::string& send_emoji_resp_result::file_name() const {
  // @@protoc_insertion_point(field_get:send_emoji_resp.result.file_name)
  return file_name_.GetNoArena();
}
void send_emoji_resp_result::set_file_name(const ::std::string& value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:send_emoji_resp.result.file_name)
}
#if LANG_CXX11
void send_emoji_resp_result::set_file_name(::std::string&& value) {
  set_has_file_name();
  file_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:send_emoji_resp.result.file_name)
}
#endif
void send_emoji_resp_result::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:send_emoji_resp.result.file_name)
}
void send_emoji_resp_result::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:send_emoji_resp.result.file_name)
}
::std::string* send_emoji_resp_result::mutable_file_name() {
  set_has_file_name();
  // @@protoc_insertion_point(field_mutable:send_emoji_resp.result.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* send_emoji_resp_result::release_file_name() {
  // @@protoc_insertion_point(field_release:send_emoji_resp.result.file_name)
  clear_has_file_name();
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void send_emoji_resp_result::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    set_has_file_name();
  } else {
    clear_has_file_name();
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:send_emoji_resp.result.file_name)
}

// optional int32 svrid = 5;
bool send_emoji_resp_result::has_svrid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void send_emoji_resp_result::set_has_svrid() {
  _has_bits_[0] |= 0x00000010u;
}
void send_emoji_resp_result::clear_has_svrid() {
  _has_bits_[0] &= ~0x00000010u;
}
void send_emoji_resp_result::clear_svrid() {
  svrid_ = 0;
  clear_has_svrid();
}
::google::protobuf::int32 send_emoji_resp_result::svrid() const {
  // @@protoc_insertion_point(field_get:send_emoji_resp.result.svrid)
  return svrid_;
}
void send_emoji_resp_result::set_svrid(::google::protobuf::int32 value) {
  set_has_svrid();
  svrid_ = value;
  // @@protoc_insertion_point(field_set:send_emoji_resp.result.svrid)
}

// optional int32 tag6 = 6;
bool send_emoji_resp_result::has_tag6() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void send_emoji_resp_result::set_has_tag6() {
  _has_bits_[0] |= 0x00000020u;
}
void send_emoji_resp_result::clear_has_tag6() {
  _has_bits_[0] &= ~0x00000020u;
}
void send_emoji_resp_result::clear_tag6() {
  tag6_ = 0;
  clear_has_tag6();
}
::google::protobuf::int32 send_emoji_resp_result::tag6() const {
  // @@protoc_insertion_point(field_get:send_emoji_resp.result.tag6)
  return tag6_;
}
void send_emoji_resp_result::set_tag6(::google::protobuf::int32 value) {
  set_has_tag6();
  tag6_ = value;
  // @@protoc_insertion_point(field_set:send_emoji_resp.result.tag6)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int send_emoji_resp::kResFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

send_emoji_resp::send_emoji_resp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:send_emoji_resp)
}
send_emoji_resp::send_emoji_resp(const send_emoji_resp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_res()) {
    res_ = new ::send_emoji_resp_result(*from.res_);
  } else {
    res_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:send_emoji_resp)
}

void send_emoji_resp::SharedCtor() {
  _cached_size_ = 0;
  res_ = NULL;
}

send_emoji_resp::~send_emoji_resp() {
  // @@protoc_insertion_point(destructor:send_emoji_resp)
  SharedDtor();
}

void send_emoji_resp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete res_;
  }
}

void send_emoji_resp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* send_emoji_resp::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const send_emoji_resp& send_emoji_resp::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

send_emoji_resp* send_emoji_resp::New(::google::protobuf::Arena* arena) const {
  send_emoji_resp* n = new send_emoji_resp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void send_emoji_resp::Clear() {
// @@protoc_insertion_point(message_clear_start:send_emoji_resp)
  if (has_res()) {
    GOOGLE_DCHECK(res_ != NULL);
    res_->::send_emoji_resp_result::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool send_emoji_resp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:send_emoji_resp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .send_emoji_resp.result res = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_res()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:send_emoji_resp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:send_emoji_resp)
  return false;
#undef DO_
}

void send_emoji_resp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:send_emoji_resp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .send_emoji_resp.result res = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->res_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:send_emoji_resp)
}

::google::protobuf::uint8* send_emoji_resp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:send_emoji_resp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .send_emoji_resp.result res = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->res_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:send_emoji_resp)
  return target;
}

size_t send_emoji_resp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:send_emoji_resp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .send_emoji_resp.result res = 3;
  if (has_res()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->res_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void send_emoji_resp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:send_emoji_resp)
  GOOGLE_DCHECK_NE(&from, this);
  const send_emoji_resp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const send_emoji_resp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:send_emoji_resp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:send_emoji_resp)
    MergeFrom(*source);
  }
}

void send_emoji_resp::MergeFrom(const send_emoji_resp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:send_emoji_resp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_res()) {
    mutable_res()->::send_emoji_resp_result::MergeFrom(from.res());
  }
}

void send_emoji_resp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:send_emoji_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void send_emoji_resp::CopyFrom(const send_emoji_resp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:send_emoji_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool send_emoji_resp::IsInitialized() const {
  return true;
}

void send_emoji_resp::Swap(send_emoji_resp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void send_emoji_resp::InternalSwap(send_emoji_resp* other) {
  std::swap(res_, other->res_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata send_emoji_resp::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// send_emoji_resp

// optional .send_emoji_resp.result res = 3;
bool send_emoji_resp::has_res() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void send_emoji_resp::set_has_res() {
  _has_bits_[0] |= 0x00000001u;
}
void send_emoji_resp::clear_has_res() {
  _has_bits_[0] &= ~0x00000001u;
}
void send_emoji_resp::clear_res() {
  if (res_ != NULL) res_->::send_emoji_resp_result::Clear();
  clear_has_res();
}
const ::send_emoji_resp_result& send_emoji_resp::res() const {
  // @@protoc_insertion_point(field_get:send_emoji_resp.res)
  return res_ != NULL ? *res_
                         : *::send_emoji_resp_result::internal_default_instance();
}
::send_emoji_resp_result* send_emoji_resp::mutable_res() {
  set_has_res();
  if (res_ == NULL) {
    res_ = new ::send_emoji_resp_result;
  }
  // @@protoc_insertion_point(field_mutable:send_emoji_resp.res)
  return res_;
}
::send_emoji_resp_result* send_emoji_resp::release_res() {
  // @@protoc_insertion_point(field_release:send_emoji_resp.res)
  clear_has_res();
  ::send_emoji_resp_result* temp = res_;
  res_ = NULL;
  return temp;
}
void send_emoji_resp::set_allocated_res(::send_emoji_resp_result* res) {
  delete res_;
  res_ = res;
  if (res) {
    set_has_res();
  } else {
    clear_has_res();
  }
  // @@protoc_insertion_point(field_set_allocated:send_emoji_resp.res)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int transfer_operation_req::kLoginFieldNumber;
const int transfer_operation_req::kTag2FieldNumber;
const int transfer_operation_req::kTag3FieldNumber;
const int transfer_operation_req::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

transfer_operation_req::transfer_operation_req()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:transfer_operation_req)
}
transfer_operation_req::transfer_operation_req(const transfer_operation_req& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_login()) {
    login_ = new ::LoginInfo(*from.login_);
  } else {
    login_ = NULL;
  }
  if (from.has_info()) {
    info_ = new ::mmStr(*from.info_);
  } else {
    info_ = NULL;
  }
  ::memcpy(&tag2_, &from.tag2_,
    reinterpret_cast<char*>(&tag3_) -
    reinterpret_cast<char*>(&tag2_) + sizeof(tag3_));
  // @@protoc_insertion_point(copy_constructor:transfer_operation_req)
}

void transfer_operation_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&login_, 0, reinterpret_cast<char*>(&tag3_) -
    reinterpret_cast<char*>(&login_) + sizeof(tag3_));
}

transfer_operation_req::~transfer_operation_req() {
  // @@protoc_insertion_point(destructor:transfer_operation_req)
  SharedDtor();
}

void transfer_operation_req::SharedDtor() {
  if (this != internal_default_instance()) {
    delete login_;
  }
  if (this != internal_default_instance()) {
    delete info_;
  }
}

void transfer_operation_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* transfer_operation_req::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const transfer_operation_req& transfer_operation_req::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

transfer_operation_req* transfer_operation_req::New(::google::protobuf::Arena* arena) const {
  transfer_operation_req* n = new transfer_operation_req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void transfer_operation_req::Clear() {
// @@protoc_insertion_point(message_clear_start:transfer_operation_req)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_login()) {
      GOOGLE_DCHECK(login_ != NULL);
      login_->::LoginInfo::Clear();
    }
    if (has_info()) {
      GOOGLE_DCHECK(info_ != NULL);
      info_->::mmStr::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&tag2_, 0, reinterpret_cast<char*>(&tag3_) -
      reinterpret_cast<char*>(&tag2_) + sizeof(tag3_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool transfer_operation_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transfer_operation_req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .LoginInfo login = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tag2 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_tag2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tag3 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_tag3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mmStr info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transfer_operation_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transfer_operation_req)
  return false;
#undef DO_
}

void transfer_operation_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transfer_operation_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .LoginInfo login = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->login_, output);
  }

  // optional int32 tag2 = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tag2(), output);
  }

  // optional int32 tag3 = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tag3(), output);
  }

  // optional .mmStr info = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:transfer_operation_req)
}

::google::protobuf::uint8* transfer_operation_req::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:transfer_operation_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .LoginInfo login = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->login_, deterministic, target);
  }

  // optional int32 tag2 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tag2(), target);
  }

  // optional int32 tag3 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tag3(), target);
  }

  // optional .mmStr info = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->info_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transfer_operation_req)
  return target;
}

size_t transfer_operation_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transfer_operation_req)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .LoginInfo login = 1;
    if (has_login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->login_);
    }

    // optional .mmStr info = 4;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->info_);
    }

    // optional int32 tag2 = 2;
    if (has_tag2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag2());
    }

    // optional int32 tag3 = 3;
    if (has_tag3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag3());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void transfer_operation_req::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transfer_operation_req)
  GOOGLE_DCHECK_NE(&from, this);
  const transfer_operation_req* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const transfer_operation_req>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transfer_operation_req)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transfer_operation_req)
    MergeFrom(*source);
  }
}

void transfer_operation_req::MergeFrom(const transfer_operation_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transfer_operation_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_login()->::LoginInfo::MergeFrom(from.login());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_info()->::mmStr::MergeFrom(from.info());
    }
    if (cached_has_bits & 0x00000004u) {
      tag2_ = from.tag2_;
    }
    if (cached_has_bits & 0x00000008u) {
      tag3_ = from.tag3_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void transfer_operation_req::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transfer_operation_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void transfer_operation_req::CopyFrom(const transfer_operation_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transfer_operation_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool transfer_operation_req::IsInitialized() const {
  return true;
}

void transfer_operation_req::Swap(transfer_operation_req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void transfer_operation_req::InternalSwap(transfer_operation_req* other) {
  std::swap(login_, other->login_);
  std::swap(info_, other->info_);
  std::swap(tag2_, other->tag2_);
  std::swap(tag3_, other->tag3_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata transfer_operation_req::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// transfer_operation_req

// optional .LoginInfo login = 1;
bool transfer_operation_req::has_login() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void transfer_operation_req::set_has_login() {
  _has_bits_[0] |= 0x00000001u;
}
void transfer_operation_req::clear_has_login() {
  _has_bits_[0] &= ~0x00000001u;
}
void transfer_operation_req::clear_login() {
  if (login_ != NULL) login_->::LoginInfo::Clear();
  clear_has_login();
}
const ::LoginInfo& transfer_operation_req::login() const {
  // @@protoc_insertion_point(field_get:transfer_operation_req.login)
  return login_ != NULL ? *login_
                         : *::LoginInfo::internal_default_instance();
}
::LoginInfo* transfer_operation_req::mutable_login() {
  set_has_login();
  if (login_ == NULL) {
    login_ = new ::LoginInfo;
  }
  // @@protoc_insertion_point(field_mutable:transfer_operation_req.login)
  return login_;
}
::LoginInfo* transfer_operation_req::release_login() {
  // @@protoc_insertion_point(field_release:transfer_operation_req.login)
  clear_has_login();
  ::LoginInfo* temp = login_;
  login_ = NULL;
  return temp;
}
void transfer_operation_req::set_allocated_login(::LoginInfo* login) {
  delete login_;
  login_ = login;
  if (login) {
    set_has_login();
  } else {
    clear_has_login();
  }
  // @@protoc_insertion_point(field_set_allocated:transfer_operation_req.login)
}

// optional int32 tag2 = 2;
bool transfer_operation_req::has_tag2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void transfer_operation_req::set_has_tag2() {
  _has_bits_[0] |= 0x00000004u;
}
void transfer_operation_req::clear_has_tag2() {
  _has_bits_[0] &= ~0x00000004u;
}
void transfer_operation_req::clear_tag2() {
  tag2_ = 0;
  clear_has_tag2();
}
::google::protobuf::int32 transfer_operation_req::tag2() const {
  // @@protoc_insertion_point(field_get:transfer_operation_req.tag2)
  return tag2_;
}
void transfer_operation_req::set_tag2(::google::protobuf::int32 value) {
  set_has_tag2();
  tag2_ = value;
  // @@protoc_insertion_point(field_set:transfer_operation_req.tag2)
}

// optional int32 tag3 = 3;
bool transfer_operation_req::has_tag3() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void transfer_operation_req::set_has_tag3() {
  _has_bits_[0] |= 0x00000008u;
}
void transfer_operation_req::clear_has_tag3() {
  _has_bits_[0] &= ~0x00000008u;
}
void transfer_operation_req::clear_tag3() {
  tag3_ = 0;
  clear_has_tag3();
}
::google::protobuf::int32 transfer_operation_req::tag3() const {
  // @@protoc_insertion_point(field_get:transfer_operation_req.tag3)
  return tag3_;
}
void transfer_operation_req::set_tag3(::google::protobuf::int32 value) {
  set_has_tag3();
  tag3_ = value;
  // @@protoc_insertion_point(field_set:transfer_operation_req.tag3)
}

// optional .mmStr info = 4;
bool transfer_operation_req::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void transfer_operation_req::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
void transfer_operation_req::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
void transfer_operation_req::clear_info() {
  if (info_ != NULL) info_->::mmStr::Clear();
  clear_has_info();
}
const ::mmStr& transfer_operation_req::info() const {
  // @@protoc_insertion_point(field_get:transfer_operation_req.info)
  return info_ != NULL ? *info_
                         : *::mmStr::internal_default_instance();
}
::mmStr* transfer_operation_req::mutable_info() {
  set_has_info();
  if (info_ == NULL) {
    info_ = new ::mmStr;
  }
  // @@protoc_insertion_point(field_mutable:transfer_operation_req.info)
  return info_;
}
::mmStr* transfer_operation_req::release_info() {
  // @@protoc_insertion_point(field_release:transfer_operation_req.info)
  clear_has_info();
  ::mmStr* temp = info_;
  info_ = NULL;
  return temp;
}
void transfer_operation_req::set_allocated_info(::mmStr* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:transfer_operation_req.info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int transfer_operation_resp::kResFieldNumber;
const int transfer_operation_resp::kRetCodeFieldNumber;
const int transfer_operation_resp::kRetMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

transfer_operation_resp::transfer_operation_resp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:transfer_operation_resp)
}
transfer_operation_resp::transfer_operation_resp(const transfer_operation_resp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ret_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ret_msg()) {
    ret_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_msg_);
  }
  if (from.has_res()) {
    res_ = new ::mmStr(*from.res_);
  } else {
    res_ = NULL;
  }
  ret_code_ = from.ret_code_;
  // @@protoc_insertion_point(copy_constructor:transfer_operation_resp)
}

void transfer_operation_resp::SharedCtor() {
  _cached_size_ = 0;
  ret_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&res_, 0, reinterpret_cast<char*>(&ret_code_) -
    reinterpret_cast<char*>(&res_) + sizeof(ret_code_));
}

transfer_operation_resp::~transfer_operation_resp() {
  // @@protoc_insertion_point(destructor:transfer_operation_resp)
  SharedDtor();
}

void transfer_operation_resp::SharedDtor() {
  ret_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete res_;
  }
}

void transfer_operation_resp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* transfer_operation_resp::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const transfer_operation_resp& transfer_operation_resp::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

transfer_operation_resp* transfer_operation_resp::New(::google::protobuf::Arena* arena) const {
  transfer_operation_resp* n = new transfer_operation_resp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void transfer_operation_resp::Clear() {
// @@protoc_insertion_point(message_clear_start:transfer_operation_resp)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_ret_msg()) {
      GOOGLE_DCHECK(!ret_msg_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ret_msg_.UnsafeRawStringPointer())->clear();
    }
    if (has_res()) {
      GOOGLE_DCHECK(res_ != NULL);
      res_->::mmStr::Clear();
    }
  }
  ret_code_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool transfer_operation_resp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transfer_operation_resp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mmStr res = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_res()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ret_code = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_ret_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ret_msg = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ret_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ret_msg().data(), this->ret_msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "transfer_operation_resp.ret_msg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transfer_operation_resp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transfer_operation_resp)
  return false;
#undef DO_
}

void transfer_operation_resp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transfer_operation_resp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mmStr res = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->res_, output);
  }

  // optional int32 ret_code = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ret_code(), output);
  }

  // optional string ret_msg = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ret_msg().data(), this->ret_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transfer_operation_resp.ret_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->ret_msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:transfer_operation_resp)
}

::google::protobuf::uint8* transfer_operation_resp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:transfer_operation_resp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mmStr res = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->res_, deterministic, target);
  }

  // optional int32 ret_code = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ret_code(), target);
  }

  // optional string ret_msg = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ret_msg().data(), this->ret_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transfer_operation_resp.ret_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->ret_msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transfer_operation_resp)
  return target;
}

size_t transfer_operation_resp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transfer_operation_resp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string ret_msg = 7;
    if (has_ret_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ret_msg());
    }

    // optional .mmStr res = 2;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->res_);
    }

    // optional int32 ret_code = 6;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void transfer_operation_resp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transfer_operation_resp)
  GOOGLE_DCHECK_NE(&from, this);
  const transfer_operation_resp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const transfer_operation_resp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transfer_operation_resp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transfer_operation_resp)
    MergeFrom(*source);
  }
}

void transfer_operation_resp::MergeFrom(const transfer_operation_resp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transfer_operation_resp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ret_msg();
      ret_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_msg_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_res()->::mmStr::MergeFrom(from.res());
    }
    if (cached_has_bits & 0x00000004u) {
      ret_code_ = from.ret_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void transfer_operation_resp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transfer_operation_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void transfer_operation_resp::CopyFrom(const transfer_operation_resp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transfer_operation_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool transfer_operation_resp::IsInitialized() const {
  return true;
}

void transfer_operation_resp::Swap(transfer_operation_resp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void transfer_operation_resp::InternalSwap(transfer_operation_resp* other) {
  ret_msg_.Swap(&other->ret_msg_);
  std::swap(res_, other->res_);
  std::swap(ret_code_, other->ret_code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata transfer_operation_resp::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// transfer_operation_resp

// optional .mmStr res = 2;
bool transfer_operation_resp::has_res() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void transfer_operation_resp::set_has_res() {
  _has_bits_[0] |= 0x00000002u;
}
void transfer_operation_resp::clear_has_res() {
  _has_bits_[0] &= ~0x00000002u;
}
void transfer_operation_resp::clear_res() {
  if (res_ != NULL) res_->::mmStr::Clear();
  clear_has_res();
}
const ::mmStr& transfer_operation_resp::res() const {
  // @@protoc_insertion_point(field_get:transfer_operation_resp.res)
  return res_ != NULL ? *res_
                         : *::mmStr::internal_default_instance();
}
::mmStr* transfer_operation_resp::mutable_res() {
  set_has_res();
  if (res_ == NULL) {
    res_ = new ::mmStr;
  }
  // @@protoc_insertion_point(field_mutable:transfer_operation_resp.res)
  return res_;
}
::mmStr* transfer_operation_resp::release_res() {
  // @@protoc_insertion_point(field_release:transfer_operation_resp.res)
  clear_has_res();
  ::mmStr* temp = res_;
  res_ = NULL;
  return temp;
}
void transfer_operation_resp::set_allocated_res(::mmStr* res) {
  delete res_;
  res_ = res;
  if (res) {
    set_has_res();
  } else {
    clear_has_res();
  }
  // @@protoc_insertion_point(field_set_allocated:transfer_operation_resp.res)
}

// optional int32 ret_code = 6;
bool transfer_operation_resp::has_ret_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void transfer_operation_resp::set_has_ret_code() {
  _has_bits_[0] |= 0x00000004u;
}
void transfer_operation_resp::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000004u;
}
void transfer_operation_resp::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
::google::protobuf::int32 transfer_operation_resp::ret_code() const {
  // @@protoc_insertion_point(field_get:transfer_operation_resp.ret_code)
  return ret_code_;
}
void transfer_operation_resp::set_ret_code(::google::protobuf::int32 value) {
  set_has_ret_code();
  ret_code_ = value;
  // @@protoc_insertion_point(field_set:transfer_operation_resp.ret_code)
}

// optional string ret_msg = 7;
bool transfer_operation_resp::has_ret_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void transfer_operation_resp::set_has_ret_msg() {
  _has_bits_[0] |= 0x00000001u;
}
void transfer_operation_resp::clear_has_ret_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
void transfer_operation_resp::clear_ret_msg() {
  ret_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ret_msg();
}
const ::std::string& transfer_operation_resp::ret_msg() const {
  // @@protoc_insertion_point(field_get:transfer_operation_resp.ret_msg)
  return ret_msg_.GetNoArena();
}
void transfer_operation_resp::set_ret_msg(const ::std::string& value) {
  set_has_ret_msg();
  ret_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transfer_operation_resp.ret_msg)
}
#if LANG_CXX11
void transfer_operation_resp::set_ret_msg(::std::string&& value) {
  set_has_ret_msg();
  ret_msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:transfer_operation_resp.ret_msg)
}
#endif
void transfer_operation_resp::set_ret_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ret_msg();
  ret_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transfer_operation_resp.ret_msg)
}
void transfer_operation_resp::set_ret_msg(const char* value, size_t size) {
  set_has_ret_msg();
  ret_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transfer_operation_resp.ret_msg)
}
::std::string* transfer_operation_resp::mutable_ret_msg() {
  set_has_ret_msg();
  // @@protoc_insertion_point(field_mutable:transfer_operation_resp.ret_msg)
  return ret_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* transfer_operation_resp::release_ret_msg() {
  // @@protoc_insertion_point(field_release:transfer_operation_resp.ret_msg)
  clear_has_ret_msg();
  return ret_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void transfer_operation_resp::set_allocated_ret_msg(::std::string* ret_msg) {
  if (ret_msg != NULL) {
    set_has_ret_msg();
  } else {
    clear_has_ret_msg();
  }
  ret_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ret_msg);
  // @@protoc_insertion_point(field_set_allocated:transfer_operation_resp.ret_msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int transfer_query_req::kLoginFieldNumber;
const int transfer_query_req::kTag2FieldNumber;
const int transfer_query_req::kTag3FieldNumber;
const int transfer_query_req::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

transfer_query_req::transfer_query_req()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:transfer_query_req)
}
transfer_query_req::transfer_query_req(const transfer_query_req& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_login()) {
    login_ = new ::LoginInfo(*from.login_);
  } else {
    login_ = NULL;
  }
  if (from.has_info()) {
    info_ = new ::mmStr(*from.info_);
  } else {
    info_ = NULL;
  }
  ::memcpy(&tag2_, &from.tag2_,
    reinterpret_cast<char*>(&tag3_) -
    reinterpret_cast<char*>(&tag2_) + sizeof(tag3_));
  // @@protoc_insertion_point(copy_constructor:transfer_query_req)
}

void transfer_query_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&login_, 0, reinterpret_cast<char*>(&tag3_) -
    reinterpret_cast<char*>(&login_) + sizeof(tag3_));
}

transfer_query_req::~transfer_query_req() {
  // @@protoc_insertion_point(destructor:transfer_query_req)
  SharedDtor();
}

void transfer_query_req::SharedDtor() {
  if (this != internal_default_instance()) {
    delete login_;
  }
  if (this != internal_default_instance()) {
    delete info_;
  }
}

void transfer_query_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* transfer_query_req::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const transfer_query_req& transfer_query_req::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

transfer_query_req* transfer_query_req::New(::google::protobuf::Arena* arena) const {
  transfer_query_req* n = new transfer_query_req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void transfer_query_req::Clear() {
// @@protoc_insertion_point(message_clear_start:transfer_query_req)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_login()) {
      GOOGLE_DCHECK(login_ != NULL);
      login_->::LoginInfo::Clear();
    }
    if (has_info()) {
      GOOGLE_DCHECK(info_ != NULL);
      info_->::mmStr::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&tag2_, 0, reinterpret_cast<char*>(&tag3_) -
      reinterpret_cast<char*>(&tag2_) + sizeof(tag3_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool transfer_query_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transfer_query_req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .LoginInfo login = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tag2 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_tag2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tag3 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_tag3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mmStr info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transfer_query_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transfer_query_req)
  return false;
#undef DO_
}

void transfer_query_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transfer_query_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .LoginInfo login = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->login_, output);
  }

  // optional int32 tag2 = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tag2(), output);
  }

  // optional int32 tag3 = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tag3(), output);
  }

  // optional .mmStr info = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:transfer_query_req)
}

::google::protobuf::uint8* transfer_query_req::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:transfer_query_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .LoginInfo login = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->login_, deterministic, target);
  }

  // optional int32 tag2 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tag2(), target);
  }

  // optional int32 tag3 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tag3(), target);
  }

  // optional .mmStr info = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->info_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transfer_query_req)
  return target;
}

size_t transfer_query_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transfer_query_req)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .LoginInfo login = 1;
    if (has_login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->login_);
    }

    // optional .mmStr info = 4;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->info_);
    }

    // optional int32 tag2 = 2;
    if (has_tag2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag2());
    }

    // optional int32 tag3 = 3;
    if (has_tag3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag3());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void transfer_query_req::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transfer_query_req)
  GOOGLE_DCHECK_NE(&from, this);
  const transfer_query_req* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const transfer_query_req>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transfer_query_req)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transfer_query_req)
    MergeFrom(*source);
  }
}

void transfer_query_req::MergeFrom(const transfer_query_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transfer_query_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_login()->::LoginInfo::MergeFrom(from.login());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_info()->::mmStr::MergeFrom(from.info());
    }
    if (cached_has_bits & 0x00000004u) {
      tag2_ = from.tag2_;
    }
    if (cached_has_bits & 0x00000008u) {
      tag3_ = from.tag3_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void transfer_query_req::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transfer_query_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void transfer_query_req::CopyFrom(const transfer_query_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transfer_query_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool transfer_query_req::IsInitialized() const {
  return true;
}

void transfer_query_req::Swap(transfer_query_req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void transfer_query_req::InternalSwap(transfer_query_req* other) {
  std::swap(login_, other->login_);
  std::swap(info_, other->info_);
  std::swap(tag2_, other->tag2_);
  std::swap(tag3_, other->tag3_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata transfer_query_req::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// transfer_query_req

// optional .LoginInfo login = 1;
bool transfer_query_req::has_login() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void transfer_query_req::set_has_login() {
  _has_bits_[0] |= 0x00000001u;
}
void transfer_query_req::clear_has_login() {
  _has_bits_[0] &= ~0x00000001u;
}
void transfer_query_req::clear_login() {
  if (login_ != NULL) login_->::LoginInfo::Clear();
  clear_has_login();
}
const ::LoginInfo& transfer_query_req::login() const {
  // @@protoc_insertion_point(field_get:transfer_query_req.login)
  return login_ != NULL ? *login_
                         : *::LoginInfo::internal_default_instance();
}
::LoginInfo* transfer_query_req::mutable_login() {
  set_has_login();
  if (login_ == NULL) {
    login_ = new ::LoginInfo;
  }
  // @@protoc_insertion_point(field_mutable:transfer_query_req.login)
  return login_;
}
::LoginInfo* transfer_query_req::release_login() {
  // @@protoc_insertion_point(field_release:transfer_query_req.login)
  clear_has_login();
  ::LoginInfo* temp = login_;
  login_ = NULL;
  return temp;
}
void transfer_query_req::set_allocated_login(::LoginInfo* login) {
  delete login_;
  login_ = login;
  if (login) {
    set_has_login();
  } else {
    clear_has_login();
  }
  // @@protoc_insertion_point(field_set_allocated:transfer_query_req.login)
}

// optional int32 tag2 = 2;
bool transfer_query_req::has_tag2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void transfer_query_req::set_has_tag2() {
  _has_bits_[0] |= 0x00000004u;
}
void transfer_query_req::clear_has_tag2() {
  _has_bits_[0] &= ~0x00000004u;
}
void transfer_query_req::clear_tag2() {
  tag2_ = 0;
  clear_has_tag2();
}
::google::protobuf::int32 transfer_query_req::tag2() const {
  // @@protoc_insertion_point(field_get:transfer_query_req.tag2)
  return tag2_;
}
void transfer_query_req::set_tag2(::google::protobuf::int32 value) {
  set_has_tag2();
  tag2_ = value;
  // @@protoc_insertion_point(field_set:transfer_query_req.tag2)
}

// optional int32 tag3 = 3;
bool transfer_query_req::has_tag3() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void transfer_query_req::set_has_tag3() {
  _has_bits_[0] |= 0x00000008u;
}
void transfer_query_req::clear_has_tag3() {
  _has_bits_[0] &= ~0x00000008u;
}
void transfer_query_req::clear_tag3() {
  tag3_ = 0;
  clear_has_tag3();
}
::google::protobuf::int32 transfer_query_req::tag3() const {
  // @@protoc_insertion_point(field_get:transfer_query_req.tag3)
  return tag3_;
}
void transfer_query_req::set_tag3(::google::protobuf::int32 value) {
  set_has_tag3();
  tag3_ = value;
  // @@protoc_insertion_point(field_set:transfer_query_req.tag3)
}

// optional .mmStr info = 4;
bool transfer_query_req::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void transfer_query_req::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
void transfer_query_req::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
void transfer_query_req::clear_info() {
  if (info_ != NULL) info_->::mmStr::Clear();
  clear_has_info();
}
const ::mmStr& transfer_query_req::info() const {
  // @@protoc_insertion_point(field_get:transfer_query_req.info)
  return info_ != NULL ? *info_
                         : *::mmStr::internal_default_instance();
}
::mmStr* transfer_query_req::mutable_info() {
  set_has_info();
  if (info_ == NULL) {
    info_ = new ::mmStr;
  }
  // @@protoc_insertion_point(field_mutable:transfer_query_req.info)
  return info_;
}
::mmStr* transfer_query_req::release_info() {
  // @@protoc_insertion_point(field_release:transfer_query_req.info)
  clear_has_info();
  ::mmStr* temp = info_;
  info_ = NULL;
  return temp;
}
void transfer_query_req::set_allocated_info(::mmStr* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:transfer_query_req.info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int transfer_query_resp::kResFieldNumber;
const int transfer_query_resp::kRetCodeFieldNumber;
const int transfer_query_resp::kRetMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

transfer_query_resp::transfer_query_resp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:transfer_query_resp)
}
transfer_query_resp::transfer_query_resp(const transfer_query_resp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ret_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ret_msg()) {
    ret_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_msg_);
  }
  if (from.has_res()) {
    res_ = new ::mmStr(*from.res_);
  } else {
    res_ = NULL;
  }
  ret_code_ = from.ret_code_;
  // @@protoc_insertion_point(copy_constructor:transfer_query_resp)
}

void transfer_query_resp::SharedCtor() {
  _cached_size_ = 0;
  ret_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&res_, 0, reinterpret_cast<char*>(&ret_code_) -
    reinterpret_cast<char*>(&res_) + sizeof(ret_code_));
}

transfer_query_resp::~transfer_query_resp() {
  // @@protoc_insertion_point(destructor:transfer_query_resp)
  SharedDtor();
}

void transfer_query_resp::SharedDtor() {
  ret_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete res_;
  }
}

void transfer_query_resp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* transfer_query_resp::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const transfer_query_resp& transfer_query_resp::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

transfer_query_resp* transfer_query_resp::New(::google::protobuf::Arena* arena) const {
  transfer_query_resp* n = new transfer_query_resp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void transfer_query_resp::Clear() {
// @@protoc_insertion_point(message_clear_start:transfer_query_resp)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_ret_msg()) {
      GOOGLE_DCHECK(!ret_msg_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ret_msg_.UnsafeRawStringPointer())->clear();
    }
    if (has_res()) {
      GOOGLE_DCHECK(res_ != NULL);
      res_->::mmStr::Clear();
    }
  }
  ret_code_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool transfer_query_resp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transfer_query_resp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mmStr res = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_res()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ret_code = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_ret_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ret_msg = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ret_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ret_msg().data(), this->ret_msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "transfer_query_resp.ret_msg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transfer_query_resp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transfer_query_resp)
  return false;
#undef DO_
}

void transfer_query_resp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transfer_query_resp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mmStr res = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->res_, output);
  }

  // optional int32 ret_code = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ret_code(), output);
  }

  // optional string ret_msg = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ret_msg().data(), this->ret_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transfer_query_resp.ret_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->ret_msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:transfer_query_resp)
}

::google::protobuf::uint8* transfer_query_resp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:transfer_query_resp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mmStr res = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->res_, deterministic, target);
  }

  // optional int32 ret_code = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ret_code(), target);
  }

  // optional string ret_msg = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ret_msg().data(), this->ret_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transfer_query_resp.ret_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->ret_msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transfer_query_resp)
  return target;
}

size_t transfer_query_resp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transfer_query_resp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string ret_msg = 7;
    if (has_ret_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ret_msg());
    }

    // optional .mmStr res = 2;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->res_);
    }

    // optional int32 ret_code = 6;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void transfer_query_resp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transfer_query_resp)
  GOOGLE_DCHECK_NE(&from, this);
  const transfer_query_resp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const transfer_query_resp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transfer_query_resp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transfer_query_resp)
    MergeFrom(*source);
  }
}

void transfer_query_resp::MergeFrom(const transfer_query_resp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transfer_query_resp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ret_msg();
      ret_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_msg_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_res()->::mmStr::MergeFrom(from.res());
    }
    if (cached_has_bits & 0x00000004u) {
      ret_code_ = from.ret_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void transfer_query_resp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transfer_query_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void transfer_query_resp::CopyFrom(const transfer_query_resp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transfer_query_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool transfer_query_resp::IsInitialized() const {
  return true;
}

void transfer_query_resp::Swap(transfer_query_resp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void transfer_query_resp::InternalSwap(transfer_query_resp* other) {
  ret_msg_.Swap(&other->ret_msg_);
  std::swap(res_, other->res_);
  std::swap(ret_code_, other->ret_code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata transfer_query_resp::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// transfer_query_resp

// optional .mmStr res = 2;
bool transfer_query_resp::has_res() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void transfer_query_resp::set_has_res() {
  _has_bits_[0] |= 0x00000002u;
}
void transfer_query_resp::clear_has_res() {
  _has_bits_[0] &= ~0x00000002u;
}
void transfer_query_resp::clear_res() {
  if (res_ != NULL) res_->::mmStr::Clear();
  clear_has_res();
}
const ::mmStr& transfer_query_resp::res() const {
  // @@protoc_insertion_point(field_get:transfer_query_resp.res)
  return res_ != NULL ? *res_
                         : *::mmStr::internal_default_instance();
}
::mmStr* transfer_query_resp::mutable_res() {
  set_has_res();
  if (res_ == NULL) {
    res_ = new ::mmStr;
  }
  // @@protoc_insertion_point(field_mutable:transfer_query_resp.res)
  return res_;
}
::mmStr* transfer_query_resp::release_res() {
  // @@protoc_insertion_point(field_release:transfer_query_resp.res)
  clear_has_res();
  ::mmStr* temp = res_;
  res_ = NULL;
  return temp;
}
void transfer_query_resp::set_allocated_res(::mmStr* res) {
  delete res_;
  res_ = res;
  if (res) {
    set_has_res();
  } else {
    clear_has_res();
  }
  // @@protoc_insertion_point(field_set_allocated:transfer_query_resp.res)
}

// optional int32 ret_code = 6;
bool transfer_query_resp::has_ret_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void transfer_query_resp::set_has_ret_code() {
  _has_bits_[0] |= 0x00000004u;
}
void transfer_query_resp::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000004u;
}
void transfer_query_resp::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
::google::protobuf::int32 transfer_query_resp::ret_code() const {
  // @@protoc_insertion_point(field_get:transfer_query_resp.ret_code)
  return ret_code_;
}
void transfer_query_resp::set_ret_code(::google::protobuf::int32 value) {
  set_has_ret_code();
  ret_code_ = value;
  // @@protoc_insertion_point(field_set:transfer_query_resp.ret_code)
}

// optional string ret_msg = 7;
bool transfer_query_resp::has_ret_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void transfer_query_resp::set_has_ret_msg() {
  _has_bits_[0] |= 0x00000001u;
}
void transfer_query_resp::clear_has_ret_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
void transfer_query_resp::clear_ret_msg() {
  ret_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ret_msg();
}
const ::std::string& transfer_query_resp::ret_msg() const {
  // @@protoc_insertion_point(field_get:transfer_query_resp.ret_msg)
  return ret_msg_.GetNoArena();
}
void transfer_query_resp::set_ret_msg(const ::std::string& value) {
  set_has_ret_msg();
  ret_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transfer_query_resp.ret_msg)
}
#if LANG_CXX11
void transfer_query_resp::set_ret_msg(::std::string&& value) {
  set_has_ret_msg();
  ret_msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:transfer_query_resp.ret_msg)
}
#endif
void transfer_query_resp::set_ret_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ret_msg();
  ret_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transfer_query_resp.ret_msg)
}
void transfer_query_resp::set_ret_msg(const char* value, size_t size) {
  set_has_ret_msg();
  ret_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transfer_query_resp.ret_msg)
}
::std::string* transfer_query_resp::mutable_ret_msg() {
  set_has_ret_msg();
  // @@protoc_insertion_point(field_mutable:transfer_query_resp.ret_msg)
  return ret_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* transfer_query_resp::release_ret_msg() {
  // @@protoc_insertion_point(field_release:transfer_query_resp.ret_msg)
  clear_has_ret_msg();
  return ret_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void transfer_query_resp::set_allocated_ret_msg(::std::string* ret_msg) {
  if (ret_msg != NULL) {
    set_has_ret_msg();
  } else {
    clear_has_ret_msg();
  }
  ret_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ret_msg);
  // @@protoc_insertion_point(field_set_allocated:transfer_query_resp.ret_msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int get_contact_req_TAG7::kTag1FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

get_contact_req_TAG7::get_contact_req_TAG7()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:get_contact_req.TAG7)
}
get_contact_req_TAG7::get_contact_req_TAG7(const get_contact_req_TAG7& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tag1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tag1()) {
    tag1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag1_);
  }
  // @@protoc_insertion_point(copy_constructor:get_contact_req.TAG7)
}

void get_contact_req_TAG7::SharedCtor() {
  _cached_size_ = 0;
  tag1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

get_contact_req_TAG7::~get_contact_req_TAG7() {
  // @@protoc_insertion_point(destructor:get_contact_req.TAG7)
  SharedDtor();
}

void get_contact_req_TAG7::SharedDtor() {
  tag1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void get_contact_req_TAG7::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_contact_req_TAG7::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const get_contact_req_TAG7& get_contact_req_TAG7::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

get_contact_req_TAG7* get_contact_req_TAG7::New(::google::protobuf::Arena* arena) const {
  get_contact_req_TAG7* n = new get_contact_req_TAG7;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void get_contact_req_TAG7::Clear() {
// @@protoc_insertion_point(message_clear_start:get_contact_req.TAG7)
  if (has_tag1()) {
    GOOGLE_DCHECK(!tag1_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*tag1_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool get_contact_req_TAG7::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:get_contact_req.TAG7)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string tag1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag1().data(), this->tag1().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "get_contact_req.TAG7.tag1");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:get_contact_req.TAG7)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:get_contact_req.TAG7)
  return false;
#undef DO_
}

void get_contact_req_TAG7::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:get_contact_req.TAG7)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string tag1 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag1().data(), this->tag1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "get_contact_req.TAG7.tag1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tag1(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:get_contact_req.TAG7)
}

::google::protobuf::uint8* get_contact_req_TAG7::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:get_contact_req.TAG7)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string tag1 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag1().data(), this->tag1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "get_contact_req.TAG7.tag1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tag1(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:get_contact_req.TAG7)
  return target;
}

size_t get_contact_req_TAG7::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:get_contact_req.TAG7)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string tag1 = 1;
  if (has_tag1()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tag1());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_contact_req_TAG7::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:get_contact_req.TAG7)
  GOOGLE_DCHECK_NE(&from, this);
  const get_contact_req_TAG7* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const get_contact_req_TAG7>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:get_contact_req.TAG7)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:get_contact_req.TAG7)
    MergeFrom(*source);
  }
}

void get_contact_req_TAG7::MergeFrom(const get_contact_req_TAG7& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:get_contact_req.TAG7)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tag1()) {
    set_has_tag1();
    tag1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag1_);
  }
}

void get_contact_req_TAG7::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:get_contact_req.TAG7)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_contact_req_TAG7::CopyFrom(const get_contact_req_TAG7& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:get_contact_req.TAG7)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_contact_req_TAG7::IsInitialized() const {
  return true;
}

void get_contact_req_TAG7::Swap(get_contact_req_TAG7* other) {
  if (other == this) return;
  InternalSwap(other);
}
void get_contact_req_TAG7::InternalSwap(get_contact_req_TAG7* other) {
  tag1_.Swap(&other->tag1_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata get_contact_req_TAG7::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// get_contact_req_TAG7

// optional string tag1 = 1;
bool get_contact_req_TAG7::has_tag1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void get_contact_req_TAG7::set_has_tag1() {
  _has_bits_[0] |= 0x00000001u;
}
void get_contact_req_TAG7::clear_has_tag1() {
  _has_bits_[0] &= ~0x00000001u;
}
void get_contact_req_TAG7::clear_tag1() {
  tag1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tag1();
}
const ::std::string& get_contact_req_TAG7::tag1() const {
  // @@protoc_insertion_point(field_get:get_contact_req.TAG7.tag1)
  return tag1_.GetNoArena();
}
void get_contact_req_TAG7::set_tag1(const ::std::string& value) {
  set_has_tag1();
  tag1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:get_contact_req.TAG7.tag1)
}
#if LANG_CXX11
void get_contact_req_TAG7::set_tag1(::std::string&& value) {
  set_has_tag1();
  tag1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:get_contact_req.TAG7.tag1)
}
#endif
void get_contact_req_TAG7::set_tag1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tag1();
  tag1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:get_contact_req.TAG7.tag1)
}
void get_contact_req_TAG7::set_tag1(const char* value, size_t size) {
  set_has_tag1();
  tag1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:get_contact_req.TAG7.tag1)
}
::std::string* get_contact_req_TAG7::mutable_tag1() {
  set_has_tag1();
  // @@protoc_insertion_point(field_mutable:get_contact_req.TAG7.tag1)
  return tag1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* get_contact_req_TAG7::release_tag1() {
  // @@protoc_insertion_point(field_release:get_contact_req.TAG7.tag1)
  clear_has_tag1();
  return tag1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void get_contact_req_TAG7::set_allocated_tag1(::std::string* tag1) {
  if (tag1 != NULL) {
    set_has_tag1();
  } else {
    clear_has_tag1();
  }
  tag1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag1);
  // @@protoc_insertion_point(field_set_allocated:get_contact_req.TAG7.tag1)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int get_contact_req::kLoginFieldNumber;
const int get_contact_req::kTag2FieldNumber;
const int get_contact_req::kWxidFieldNumber;
const int get_contact_req::kTag4FieldNumber;
const int get_contact_req::kTag6FieldNumber;
const int get_contact_req::kTag7FieldNumber;
const int get_contact_req::kTag8FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

get_contact_req::get_contact_req()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:get_contact_req)
}
get_contact_req::get_contact_req(const get_contact_req& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_login()) {
    login_ = new ::LoginInfo(*from.login_);
  } else {
    login_ = NULL;
  }
  if (from.has_wxid()) {
    wxid_ = new ::Wxid(*from.wxid_);
  } else {
    wxid_ = NULL;
  }
  if (from.has_tag7()) {
    tag7_ = new ::get_contact_req_TAG7(*from.tag7_);
  } else {
    tag7_ = NULL;
  }
  ::memcpy(&tag2_, &from.tag2_,
    reinterpret_cast<char*>(&tag8_) -
    reinterpret_cast<char*>(&tag2_) + sizeof(tag8_));
  // @@protoc_insertion_point(copy_constructor:get_contact_req)
}

void get_contact_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&login_, 0, reinterpret_cast<char*>(&tag8_) -
    reinterpret_cast<char*>(&login_) + sizeof(tag8_));
}

get_contact_req::~get_contact_req() {
  // @@protoc_insertion_point(destructor:get_contact_req)
  SharedDtor();
}

void get_contact_req::SharedDtor() {
  if (this != internal_default_instance()) {
    delete login_;
  }
  if (this != internal_default_instance()) {
    delete wxid_;
  }
  if (this != internal_default_instance()) {
    delete tag7_;
  }
}

void get_contact_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_contact_req::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const get_contact_req& get_contact_req::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

get_contact_req* get_contact_req::New(::google::protobuf::Arena* arena) const {
  get_contact_req* n = new get_contact_req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void get_contact_req::Clear() {
// @@protoc_insertion_point(message_clear_start:get_contact_req)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_login()) {
      GOOGLE_DCHECK(login_ != NULL);
      login_->::LoginInfo::Clear();
    }
    if (has_wxid()) {
      GOOGLE_DCHECK(wxid_ != NULL);
      wxid_->::Wxid::Clear();
    }
    if (has_tag7()) {
      GOOGLE_DCHECK(tag7_ != NULL);
      tag7_->::get_contact_req_TAG7::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 120u) {
    ::memset(&tag2_, 0, reinterpret_cast<char*>(&tag8_) -
      reinterpret_cast<char*>(&tag2_) + sizeof(tag8_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool get_contact_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:get_contact_req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .LoginInfo login = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tag2 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_tag2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Wxid wxid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wxid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tag4 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_tag4();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tag6 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_tag6();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag6_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .get_contact_req.TAG7 tag7 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tag7()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tag8 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_tag8();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag8_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:get_contact_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:get_contact_req)
  return false;
#undef DO_
}

void get_contact_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:get_contact_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .LoginInfo login = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->login_, output);
  }

  // optional int32 tag2 = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tag2(), output);
  }

  // optional .Wxid wxid = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->wxid_, output);
  }

  // optional int32 tag4 = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tag4(), output);
  }

  // optional int32 tag6 = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->tag6(), output);
  }

  // optional .get_contact_req.TAG7 tag7 = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->tag7_, output);
  }

  // optional int32 tag8 = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->tag8(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:get_contact_req)
}

::google::protobuf::uint8* get_contact_req::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:get_contact_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .LoginInfo login = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->login_, deterministic, target);
  }

  // optional int32 tag2 = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tag2(), target);
  }

  // optional .Wxid wxid = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->wxid_, deterministic, target);
  }

  // optional int32 tag4 = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->tag4(), target);
  }

  // optional int32 tag6 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->tag6(), target);
  }

  // optional .get_contact_req.TAG7 tag7 = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->tag7_, deterministic, target);
  }

  // optional int32 tag8 = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->tag8(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:get_contact_req)
  return target;
}

size_t get_contact_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:get_contact_req)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional .LoginInfo login = 1;
    if (has_login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->login_);
    }

    // optional .Wxid wxid = 3;
    if (has_wxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->wxid_);
    }

    // optional .get_contact_req.TAG7 tag7 = 7;
    if (has_tag7()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->tag7_);
    }

    // optional int32 tag2 = 2;
    if (has_tag2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag2());
    }

    // optional int32 tag4 = 4;
    if (has_tag4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag4());
    }

    // optional int32 tag6 = 6;
    if (has_tag6()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag6());
    }

    // optional int32 tag8 = 8;
    if (has_tag8()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag8());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_contact_req::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:get_contact_req)
  GOOGLE_DCHECK_NE(&from, this);
  const get_contact_req* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const get_contact_req>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:get_contact_req)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:get_contact_req)
    MergeFrom(*source);
  }
}

void get_contact_req::MergeFrom(const get_contact_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:get_contact_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_login()->::LoginInfo::MergeFrom(from.login());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_wxid()->::Wxid::MergeFrom(from.wxid());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_tag7()->::get_contact_req_TAG7::MergeFrom(from.tag7());
    }
    if (cached_has_bits & 0x00000008u) {
      tag2_ = from.tag2_;
    }
    if (cached_has_bits & 0x00000010u) {
      tag4_ = from.tag4_;
    }
    if (cached_has_bits & 0x00000020u) {
      tag6_ = from.tag6_;
    }
    if (cached_has_bits & 0x00000040u) {
      tag8_ = from.tag8_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void get_contact_req::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:get_contact_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_contact_req::CopyFrom(const get_contact_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:get_contact_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_contact_req::IsInitialized() const {
  return true;
}

void get_contact_req::Swap(get_contact_req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void get_contact_req::InternalSwap(get_contact_req* other) {
  std::swap(login_, other->login_);
  std::swap(wxid_, other->wxid_);
  std::swap(tag7_, other->tag7_);
  std::swap(tag2_, other->tag2_);
  std::swap(tag4_, other->tag4_);
  std::swap(tag6_, other->tag6_);
  std::swap(tag8_, other->tag8_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata get_contact_req::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// get_contact_req

// optional .LoginInfo login = 1;
bool get_contact_req::has_login() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void get_contact_req::set_has_login() {
  _has_bits_[0] |= 0x00000001u;
}
void get_contact_req::clear_has_login() {
  _has_bits_[0] &= ~0x00000001u;
}
void get_contact_req::clear_login() {
  if (login_ != NULL) login_->::LoginInfo::Clear();
  clear_has_login();
}
const ::LoginInfo& get_contact_req::login() const {
  // @@protoc_insertion_point(field_get:get_contact_req.login)
  return login_ != NULL ? *login_
                         : *::LoginInfo::internal_default_instance();
}
::LoginInfo* get_contact_req::mutable_login() {
  set_has_login();
  if (login_ == NULL) {
    login_ = new ::LoginInfo;
  }
  // @@protoc_insertion_point(field_mutable:get_contact_req.login)
  return login_;
}
::LoginInfo* get_contact_req::release_login() {
  // @@protoc_insertion_point(field_release:get_contact_req.login)
  clear_has_login();
  ::LoginInfo* temp = login_;
  login_ = NULL;
  return temp;
}
void get_contact_req::set_allocated_login(::LoginInfo* login) {
  delete login_;
  login_ = login;
  if (login) {
    set_has_login();
  } else {
    clear_has_login();
  }
  // @@protoc_insertion_point(field_set_allocated:get_contact_req.login)
}

// optional int32 tag2 = 2;
bool get_contact_req::has_tag2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void get_contact_req::set_has_tag2() {
  _has_bits_[0] |= 0x00000008u;
}
void get_contact_req::clear_has_tag2() {
  _has_bits_[0] &= ~0x00000008u;
}
void get_contact_req::clear_tag2() {
  tag2_ = 0;
  clear_has_tag2();
}
::google::protobuf::int32 get_contact_req::tag2() const {
  // @@protoc_insertion_point(field_get:get_contact_req.tag2)
  return tag2_;
}
void get_contact_req::set_tag2(::google::protobuf::int32 value) {
  set_has_tag2();
  tag2_ = value;
  // @@protoc_insertion_point(field_set:get_contact_req.tag2)
}

// optional .Wxid wxid = 3;
bool get_contact_req::has_wxid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void get_contact_req::set_has_wxid() {
  _has_bits_[0] |= 0x00000002u;
}
void get_contact_req::clear_has_wxid() {
  _has_bits_[0] &= ~0x00000002u;
}
void get_contact_req::clear_wxid() {
  if (wxid_ != NULL) wxid_->::Wxid::Clear();
  clear_has_wxid();
}
const ::Wxid& get_contact_req::wxid() const {
  // @@protoc_insertion_point(field_get:get_contact_req.wxid)
  return wxid_ != NULL ? *wxid_
                         : *::Wxid::internal_default_instance();
}
::Wxid* get_contact_req::mutable_wxid() {
  set_has_wxid();
  if (wxid_ == NULL) {
    wxid_ = new ::Wxid;
  }
  // @@protoc_insertion_point(field_mutable:get_contact_req.wxid)
  return wxid_;
}
::Wxid* get_contact_req::release_wxid() {
  // @@protoc_insertion_point(field_release:get_contact_req.wxid)
  clear_has_wxid();
  ::Wxid* temp = wxid_;
  wxid_ = NULL;
  return temp;
}
void get_contact_req::set_allocated_wxid(::Wxid* wxid) {
  delete wxid_;
  wxid_ = wxid;
  if (wxid) {
    set_has_wxid();
  } else {
    clear_has_wxid();
  }
  // @@protoc_insertion_point(field_set_allocated:get_contact_req.wxid)
}

// optional int32 tag4 = 4;
bool get_contact_req::has_tag4() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void get_contact_req::set_has_tag4() {
  _has_bits_[0] |= 0x00000010u;
}
void get_contact_req::clear_has_tag4() {
  _has_bits_[0] &= ~0x00000010u;
}
void get_contact_req::clear_tag4() {
  tag4_ = 0;
  clear_has_tag4();
}
::google::protobuf::int32 get_contact_req::tag4() const {
  // @@protoc_insertion_point(field_get:get_contact_req.tag4)
  return tag4_;
}
void get_contact_req::set_tag4(::google::protobuf::int32 value) {
  set_has_tag4();
  tag4_ = value;
  // @@protoc_insertion_point(field_set:get_contact_req.tag4)
}

// optional int32 tag6 = 6;
bool get_contact_req::has_tag6() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void get_contact_req::set_has_tag6() {
  _has_bits_[0] |= 0x00000020u;
}
void get_contact_req::clear_has_tag6() {
  _has_bits_[0] &= ~0x00000020u;
}
void get_contact_req::clear_tag6() {
  tag6_ = 0;
  clear_has_tag6();
}
::google::protobuf::int32 get_contact_req::tag6() const {
  // @@protoc_insertion_point(field_get:get_contact_req.tag6)
  return tag6_;
}
void get_contact_req::set_tag6(::google::protobuf::int32 value) {
  set_has_tag6();
  tag6_ = value;
  // @@protoc_insertion_point(field_set:get_contact_req.tag6)
}

// optional .get_contact_req.TAG7 tag7 = 7;
bool get_contact_req::has_tag7() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void get_contact_req::set_has_tag7() {
  _has_bits_[0] |= 0x00000004u;
}
void get_contact_req::clear_has_tag7() {
  _has_bits_[0] &= ~0x00000004u;
}
void get_contact_req::clear_tag7() {
  if (tag7_ != NULL) tag7_->::get_contact_req_TAG7::Clear();
  clear_has_tag7();
}
const ::get_contact_req_TAG7& get_contact_req::tag7() const {
  // @@protoc_insertion_point(field_get:get_contact_req.tag7)
  return tag7_ != NULL ? *tag7_
                         : *::get_contact_req_TAG7::internal_default_instance();
}
::get_contact_req_TAG7* get_contact_req::mutable_tag7() {
  set_has_tag7();
  if (tag7_ == NULL) {
    tag7_ = new ::get_contact_req_TAG7;
  }
  // @@protoc_insertion_point(field_mutable:get_contact_req.tag7)
  return tag7_;
}
::get_contact_req_TAG7* get_contact_req::release_tag7() {
  // @@protoc_insertion_point(field_release:get_contact_req.tag7)
  clear_has_tag7();
  ::get_contact_req_TAG7* temp = tag7_;
  tag7_ = NULL;
  return temp;
}
void get_contact_req::set_allocated_tag7(::get_contact_req_TAG7* tag7) {
  delete tag7_;
  tag7_ = tag7;
  if (tag7) {
    set_has_tag7();
  } else {
    clear_has_tag7();
  }
  // @@protoc_insertion_point(field_set_allocated:get_contact_req.tag7)
}

// optional int32 tag8 = 8;
bool get_contact_req::has_tag8() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void get_contact_req::set_has_tag8() {
  _has_bits_[0] |= 0x00000040u;
}
void get_contact_req::clear_has_tag8() {
  _has_bits_[0] &= ~0x00000040u;
}
void get_contact_req::clear_tag8() {
  tag8_ = 0;
  clear_has_tag8();
}
::google::protobuf::int32 get_contact_req::tag8() const {
  // @@protoc_insertion_point(field_get:get_contact_req.tag8)
  return tag8_;
}
void get_contact_req::set_tag8(::google::protobuf::int32 value) {
  set_has_tag8();
  tag8_ = value;
  // @@protoc_insertion_point(field_set:get_contact_req.tag8)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int get_contact_resp_ticket_info::kWxidFieldNumber;
const int get_contact_resp_ticket_info::kTicketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

get_contact_resp_ticket_info::get_contact_resp_ticket_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:get_contact_resp.ticket_info)
}
get_contact_resp_ticket_info::get_contact_resp_ticket_info(const get_contact_resp_ticket_info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  wxid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_wxid()) {
    wxid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wxid_);
  }
  ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ticket()) {
    ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_);
  }
  // @@protoc_insertion_point(copy_constructor:get_contact_resp.ticket_info)
}

void get_contact_resp_ticket_info::SharedCtor() {
  _cached_size_ = 0;
  wxid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

get_contact_resp_ticket_info::~get_contact_resp_ticket_info() {
  // @@protoc_insertion_point(destructor:get_contact_resp.ticket_info)
  SharedDtor();
}

void get_contact_resp_ticket_info::SharedDtor() {
  wxid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void get_contact_resp_ticket_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_contact_resp_ticket_info::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const get_contact_resp_ticket_info& get_contact_resp_ticket_info::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

get_contact_resp_ticket_info* get_contact_resp_ticket_info::New(::google::protobuf::Arena* arena) const {
  get_contact_resp_ticket_info* n = new get_contact_resp_ticket_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void get_contact_resp_ticket_info::Clear() {
// @@protoc_insertion_point(message_clear_start:get_contact_resp.ticket_info)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_wxid()) {
      GOOGLE_DCHECK(!wxid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*wxid_.UnsafeRawStringPointer())->clear();
    }
    if (has_ticket()) {
      GOOGLE_DCHECK(!ticket_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ticket_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool get_contact_resp_ticket_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:get_contact_resp.ticket_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string wxid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->wxid().data(), this->wxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "get_contact_resp.ticket_info.wxid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ticket = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ticket()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ticket().data(), this->ticket().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "get_contact_resp.ticket_info.ticket");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:get_contact_resp.ticket_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:get_contact_resp.ticket_info)
  return false;
#undef DO_
}

void get_contact_resp_ticket_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:get_contact_resp.ticket_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string wxid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wxid().data(), this->wxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "get_contact_resp.ticket_info.wxid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->wxid(), output);
  }

  // optional string ticket = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ticket().data(), this->ticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "get_contact_resp.ticket_info.ticket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ticket(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:get_contact_resp.ticket_info)
}

::google::protobuf::uint8* get_contact_resp_ticket_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:get_contact_resp.ticket_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string wxid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wxid().data(), this->wxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "get_contact_resp.ticket_info.wxid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->wxid(), target);
  }

  // optional string ticket = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ticket().data(), this->ticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "get_contact_resp.ticket_info.ticket");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ticket(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:get_contact_resp.ticket_info)
  return target;
}

size_t get_contact_resp_ticket_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:get_contact_resp.ticket_info)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string wxid = 1;
    if (has_wxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wxid());
    }

    // optional string ticket = 2;
    if (has_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ticket());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_contact_resp_ticket_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:get_contact_resp.ticket_info)
  GOOGLE_DCHECK_NE(&from, this);
  const get_contact_resp_ticket_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const get_contact_resp_ticket_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:get_contact_resp.ticket_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:get_contact_resp.ticket_info)
    MergeFrom(*source);
  }
}

void get_contact_resp_ticket_info::MergeFrom(const get_contact_resp_ticket_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:get_contact_resp.ticket_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_wxid();
      wxid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wxid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_ticket();
      ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_);
    }
  }
}

void get_contact_resp_ticket_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:get_contact_resp.ticket_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_contact_resp_ticket_info::CopyFrom(const get_contact_resp_ticket_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:get_contact_resp.ticket_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_contact_resp_ticket_info::IsInitialized() const {
  return true;
}

void get_contact_resp_ticket_info::Swap(get_contact_resp_ticket_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void get_contact_resp_ticket_info::InternalSwap(get_contact_resp_ticket_info* other) {
  wxid_.Swap(&other->wxid_);
  ticket_.Swap(&other->ticket_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata get_contact_resp_ticket_info::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// get_contact_resp_ticket_info

// optional string wxid = 1;
bool get_contact_resp_ticket_info::has_wxid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void get_contact_resp_ticket_info::set_has_wxid() {
  _has_bits_[0] |= 0x00000001u;
}
void get_contact_resp_ticket_info::clear_has_wxid() {
  _has_bits_[0] &= ~0x00000001u;
}
void get_contact_resp_ticket_info::clear_wxid() {
  wxid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_wxid();
}
const ::std::string& get_contact_resp_ticket_info::wxid() const {
  // @@protoc_insertion_point(field_get:get_contact_resp.ticket_info.wxid)
  return wxid_.GetNoArena();
}
void get_contact_resp_ticket_info::set_wxid(const ::std::string& value) {
  set_has_wxid();
  wxid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:get_contact_resp.ticket_info.wxid)
}
#if LANG_CXX11
void get_contact_resp_ticket_info::set_wxid(::std::string&& value) {
  set_has_wxid();
  wxid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:get_contact_resp.ticket_info.wxid)
}
#endif
void get_contact_resp_ticket_info::set_wxid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_wxid();
  wxid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:get_contact_resp.ticket_info.wxid)
}
void get_contact_resp_ticket_info::set_wxid(const char* value, size_t size) {
  set_has_wxid();
  wxid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:get_contact_resp.ticket_info.wxid)
}
::std::string* get_contact_resp_ticket_info::mutable_wxid() {
  set_has_wxid();
  // @@protoc_insertion_point(field_mutable:get_contact_resp.ticket_info.wxid)
  return wxid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* get_contact_resp_ticket_info::release_wxid() {
  // @@protoc_insertion_point(field_release:get_contact_resp.ticket_info.wxid)
  clear_has_wxid();
  return wxid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void get_contact_resp_ticket_info::set_allocated_wxid(::std::string* wxid) {
  if (wxid != NULL) {
    set_has_wxid();
  } else {
    clear_has_wxid();
  }
  wxid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wxid);
  // @@protoc_insertion_point(field_set_allocated:get_contact_resp.ticket_info.wxid)
}

// optional string ticket = 2;
bool get_contact_resp_ticket_info::has_ticket() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void get_contact_resp_ticket_info::set_has_ticket() {
  _has_bits_[0] |= 0x00000002u;
}
void get_contact_resp_ticket_info::clear_has_ticket() {
  _has_bits_[0] &= ~0x00000002u;
}
void get_contact_resp_ticket_info::clear_ticket() {
  ticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ticket();
}
const ::std::string& get_contact_resp_ticket_info::ticket() const {
  // @@protoc_insertion_point(field_get:get_contact_resp.ticket_info.ticket)
  return ticket_.GetNoArena();
}
void get_contact_resp_ticket_info::set_ticket(const ::std::string& value) {
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:get_contact_resp.ticket_info.ticket)
}
#if LANG_CXX11
void get_contact_resp_ticket_info::set_ticket(::std::string&& value) {
  set_has_ticket();
  ticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:get_contact_resp.ticket_info.ticket)
}
#endif
void get_contact_resp_ticket_info::set_ticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:get_contact_resp.ticket_info.ticket)
}
void get_contact_resp_ticket_info::set_ticket(const char* value, size_t size) {
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:get_contact_resp.ticket_info.ticket)
}
::std::string* get_contact_resp_ticket_info::mutable_ticket() {
  set_has_ticket();
  // @@protoc_insertion_point(field_mutable:get_contact_resp.ticket_info.ticket)
  return ticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* get_contact_resp_ticket_info::release_ticket() {
  // @@protoc_insertion_point(field_release:get_contact_resp.ticket_info.ticket)
  clear_has_ticket();
  return ticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void get_contact_resp_ticket_info::set_allocated_ticket(::std::string* ticket) {
  if (ticket != NULL) {
    set_has_ticket();
  } else {
    clear_has_ticket();
  }
  ticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ticket);
  // @@protoc_insertion_point(field_set_allocated:get_contact_resp.ticket_info.ticket)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int get_contact_resp::kInfoFieldNumber;
const int get_contact_resp::kTicketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

get_contact_resp::get_contact_resp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:get_contact_resp)
}
get_contact_resp::get_contact_resp(const get_contact_resp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_info()) {
    info_ = new ::contact_info(*from.info_);
  } else {
    info_ = NULL;
  }
  if (from.has_ticket()) {
    ticket_ = new ::get_contact_resp_ticket_info(*from.ticket_);
  } else {
    ticket_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:get_contact_resp)
}

void get_contact_resp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&info_, 0, reinterpret_cast<char*>(&ticket_) -
    reinterpret_cast<char*>(&info_) + sizeof(ticket_));
}

get_contact_resp::~get_contact_resp() {
  // @@protoc_insertion_point(destructor:get_contact_resp)
  SharedDtor();
}

void get_contact_resp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete info_;
  }
  if (this != internal_default_instance()) {
    delete ticket_;
  }
}

void get_contact_resp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_contact_resp::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const get_contact_resp& get_contact_resp::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

get_contact_resp* get_contact_resp::New(::google::protobuf::Arena* arena) const {
  get_contact_resp* n = new get_contact_resp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void get_contact_resp::Clear() {
// @@protoc_insertion_point(message_clear_start:get_contact_resp)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_info()) {
      GOOGLE_DCHECK(info_ != NULL);
      info_->::contact_info::Clear();
    }
    if (has_ticket()) {
      GOOGLE_DCHECK(ticket_ != NULL);
      ticket_->::get_contact_resp_ticket_info::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool get_contact_resp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:get_contact_resp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .contact_info info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .get_contact_resp.ticket_info ticket = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ticket()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:get_contact_resp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:get_contact_resp)
  return false;
#undef DO_
}

void get_contact_resp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:get_contact_resp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .contact_info info = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->info_, output);
  }

  // optional .get_contact_resp.ticket_info ticket = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->ticket_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:get_contact_resp)
}

::google::protobuf::uint8* get_contact_resp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:get_contact_resp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .contact_info info = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->info_, deterministic, target);
  }

  // optional .get_contact_resp.ticket_info ticket = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->ticket_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:get_contact_resp)
  return target;
}

size_t get_contact_resp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:get_contact_resp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .contact_info info = 3;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->info_);
    }

    // optional .get_contact_resp.ticket_info ticket = 5;
    if (has_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ticket_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_contact_resp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:get_contact_resp)
  GOOGLE_DCHECK_NE(&from, this);
  const get_contact_resp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const get_contact_resp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:get_contact_resp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:get_contact_resp)
    MergeFrom(*source);
  }
}

void get_contact_resp::MergeFrom(const get_contact_resp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:get_contact_resp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_info()->::contact_info::MergeFrom(from.info());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_ticket()->::get_contact_resp_ticket_info::MergeFrom(from.ticket());
    }
  }
}

void get_contact_resp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:get_contact_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_contact_resp::CopyFrom(const get_contact_resp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:get_contact_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_contact_resp::IsInitialized() const {
  return true;
}

void get_contact_resp::Swap(get_contact_resp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void get_contact_resp::InternalSwap(get_contact_resp* other) {
  std::swap(info_, other->info_);
  std::swap(ticket_, other->ticket_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata get_contact_resp::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// get_contact_resp

// optional .contact_info info = 3;
bool get_contact_resp::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void get_contact_resp::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
void get_contact_resp::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
void get_contact_resp::clear_info() {
  if (info_ != NULL) info_->::contact_info::Clear();
  clear_has_info();
}
const ::contact_info& get_contact_resp::info() const {
  // @@protoc_insertion_point(field_get:get_contact_resp.info)
  return info_ != NULL ? *info_
                         : *::contact_info::internal_default_instance();
}
::contact_info* get_contact_resp::mutable_info() {
  set_has_info();
  if (info_ == NULL) {
    info_ = new ::contact_info;
  }
  // @@protoc_insertion_point(field_mutable:get_contact_resp.info)
  return info_;
}
::contact_info* get_contact_resp::release_info() {
  // @@protoc_insertion_point(field_release:get_contact_resp.info)
  clear_has_info();
  ::contact_info* temp = info_;
  info_ = NULL;
  return temp;
}
void get_contact_resp::set_allocated_info(::contact_info* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:get_contact_resp.info)
}

// optional .get_contact_resp.ticket_info ticket = 5;
bool get_contact_resp::has_ticket() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void get_contact_resp::set_has_ticket() {
  _has_bits_[0] |= 0x00000002u;
}
void get_contact_resp::clear_has_ticket() {
  _has_bits_[0] &= ~0x00000002u;
}
void get_contact_resp::clear_ticket() {
  if (ticket_ != NULL) ticket_->::get_contact_resp_ticket_info::Clear();
  clear_has_ticket();
}
const ::get_contact_resp_ticket_info& get_contact_resp::ticket() const {
  // @@protoc_insertion_point(field_get:get_contact_resp.ticket)
  return ticket_ != NULL ? *ticket_
                         : *::get_contact_resp_ticket_info::internal_default_instance();
}
::get_contact_resp_ticket_info* get_contact_resp::mutable_ticket() {
  set_has_ticket();
  if (ticket_ == NULL) {
    ticket_ = new ::get_contact_resp_ticket_info;
  }
  // @@protoc_insertion_point(field_mutable:get_contact_resp.ticket)
  return ticket_;
}
::get_contact_resp_ticket_info* get_contact_resp::release_ticket() {
  // @@protoc_insertion_point(field_release:get_contact_resp.ticket)
  clear_has_ticket();
  ::get_contact_resp_ticket_info* temp = ticket_;
  ticket_ = NULL;
  return temp;
}
void get_contact_resp::set_allocated_ticket(::get_contact_resp_ticket_info* ticket) {
  delete ticket_;
  ticket_ = ticket;
  if (ticket) {
    set_has_ticket();
  } else {
    clear_has_ticket();
  }
  // @@protoc_insertion_point(field_set_allocated:get_contact_resp.ticket)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int create_chatroom_req_TAG2::kTag1FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

create_chatroom_req_TAG2::create_chatroom_req_TAG2()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:create_chatroom_req.TAG2)
}
create_chatroom_req_TAG2::create_chatroom_req_TAG2(const create_chatroom_req_TAG2& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tag1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tag1()) {
    tag1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag1_);
  }
  // @@protoc_insertion_point(copy_constructor:create_chatroom_req.TAG2)
}

void create_chatroom_req_TAG2::SharedCtor() {
  _cached_size_ = 0;
  tag1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

create_chatroom_req_TAG2::~create_chatroom_req_TAG2() {
  // @@protoc_insertion_point(destructor:create_chatroom_req.TAG2)
  SharedDtor();
}

void create_chatroom_req_TAG2::SharedDtor() {
  tag1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void create_chatroom_req_TAG2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* create_chatroom_req_TAG2::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const create_chatroom_req_TAG2& create_chatroom_req_TAG2::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

create_chatroom_req_TAG2* create_chatroom_req_TAG2::New(::google::protobuf::Arena* arena) const {
  create_chatroom_req_TAG2* n = new create_chatroom_req_TAG2;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void create_chatroom_req_TAG2::Clear() {
// @@protoc_insertion_point(message_clear_start:create_chatroom_req.TAG2)
  if (has_tag1()) {
    GOOGLE_DCHECK(!tag1_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*tag1_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool create_chatroom_req_TAG2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:create_chatroom_req.TAG2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string tag1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag1().data(), this->tag1().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "create_chatroom_req.TAG2.tag1");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:create_chatroom_req.TAG2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:create_chatroom_req.TAG2)
  return false;
#undef DO_
}

void create_chatroom_req_TAG2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:create_chatroom_req.TAG2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string tag1 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag1().data(), this->tag1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "create_chatroom_req.TAG2.tag1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tag1(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:create_chatroom_req.TAG2)
}

::google::protobuf::uint8* create_chatroom_req_TAG2::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:create_chatroom_req.TAG2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string tag1 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag1().data(), this->tag1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "create_chatroom_req.TAG2.tag1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tag1(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:create_chatroom_req.TAG2)
  return target;
}

size_t create_chatroom_req_TAG2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:create_chatroom_req.TAG2)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string tag1 = 1;
  if (has_tag1()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tag1());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void create_chatroom_req_TAG2::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:create_chatroom_req.TAG2)
  GOOGLE_DCHECK_NE(&from, this);
  const create_chatroom_req_TAG2* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const create_chatroom_req_TAG2>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:create_chatroom_req.TAG2)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:create_chatroom_req.TAG2)
    MergeFrom(*source);
  }
}

void create_chatroom_req_TAG2::MergeFrom(const create_chatroom_req_TAG2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:create_chatroom_req.TAG2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tag1()) {
    set_has_tag1();
    tag1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag1_);
  }
}

void create_chatroom_req_TAG2::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:create_chatroom_req.TAG2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void create_chatroom_req_TAG2::CopyFrom(const create_chatroom_req_TAG2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:create_chatroom_req.TAG2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool create_chatroom_req_TAG2::IsInitialized() const {
  return true;
}

void create_chatroom_req_TAG2::Swap(create_chatroom_req_TAG2* other) {
  if (other == this) return;
  InternalSwap(other);
}
void create_chatroom_req_TAG2::InternalSwap(create_chatroom_req_TAG2* other) {
  tag1_.Swap(&other->tag1_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata create_chatroom_req_TAG2::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// create_chatroom_req_TAG2

// optional string tag1 = 1;
bool create_chatroom_req_TAG2::has_tag1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void create_chatroom_req_TAG2::set_has_tag1() {
  _has_bits_[0] |= 0x00000001u;
}
void create_chatroom_req_TAG2::clear_has_tag1() {
  _has_bits_[0] &= ~0x00000001u;
}
void create_chatroom_req_TAG2::clear_tag1() {
  tag1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tag1();
}
const ::std::string& create_chatroom_req_TAG2::tag1() const {
  // @@protoc_insertion_point(field_get:create_chatroom_req.TAG2.tag1)
  return tag1_.GetNoArena();
}
void create_chatroom_req_TAG2::set_tag1(const ::std::string& value) {
  set_has_tag1();
  tag1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:create_chatroom_req.TAG2.tag1)
}
#if LANG_CXX11
void create_chatroom_req_TAG2::set_tag1(::std::string&& value) {
  set_has_tag1();
  tag1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:create_chatroom_req.TAG2.tag1)
}
#endif
void create_chatroom_req_TAG2::set_tag1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tag1();
  tag1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:create_chatroom_req.TAG2.tag1)
}
void create_chatroom_req_TAG2::set_tag1(const char* value, size_t size) {
  set_has_tag1();
  tag1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:create_chatroom_req.TAG2.tag1)
}
::std::string* create_chatroom_req_TAG2::mutable_tag1() {
  set_has_tag1();
  // @@protoc_insertion_point(field_mutable:create_chatroom_req.TAG2.tag1)
  return tag1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* create_chatroom_req_TAG2::release_tag1() {
  // @@protoc_insertion_point(field_release:create_chatroom_req.TAG2.tag1)
  clear_has_tag1();
  return tag1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void create_chatroom_req_TAG2::set_allocated_tag1(::std::string* tag1) {
  if (tag1 != NULL) {
    set_has_tag1();
  } else {
    clear_has_tag1();
  }
  tag1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag1);
  // @@protoc_insertion_point(field_set_allocated:create_chatroom_req.TAG2.tag1)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int create_chatroom_req_member_info::kWxidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

create_chatroom_req_member_info::create_chatroom_req_member_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:create_chatroom_req.member_info)
}
create_chatroom_req_member_info::create_chatroom_req_member_info(const create_chatroom_req_member_info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_wxid()) {
    wxid_ = new ::Wxid(*from.wxid_);
  } else {
    wxid_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:create_chatroom_req.member_info)
}

void create_chatroom_req_member_info::SharedCtor() {
  _cached_size_ = 0;
  wxid_ = NULL;
}

create_chatroom_req_member_info::~create_chatroom_req_member_info() {
  // @@protoc_insertion_point(destructor:create_chatroom_req.member_info)
  SharedDtor();
}

void create_chatroom_req_member_info::SharedDtor() {
  if (this != internal_default_instance()) {
    delete wxid_;
  }
}

void create_chatroom_req_member_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* create_chatroom_req_member_info::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const create_chatroom_req_member_info& create_chatroom_req_member_info::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

create_chatroom_req_member_info* create_chatroom_req_member_info::New(::google::protobuf::Arena* arena) const {
  create_chatroom_req_member_info* n = new create_chatroom_req_member_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void create_chatroom_req_member_info::Clear() {
// @@protoc_insertion_point(message_clear_start:create_chatroom_req.member_info)
  if (has_wxid()) {
    GOOGLE_DCHECK(wxid_ != NULL);
    wxid_->::Wxid::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool create_chatroom_req_member_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:create_chatroom_req.member_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Wxid wxid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wxid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:create_chatroom_req.member_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:create_chatroom_req.member_info)
  return false;
#undef DO_
}

void create_chatroom_req_member_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:create_chatroom_req.member_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Wxid wxid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->wxid_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:create_chatroom_req.member_info)
}

::google::protobuf::uint8* create_chatroom_req_member_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:create_chatroom_req.member_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Wxid wxid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->wxid_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:create_chatroom_req.member_info)
  return target;
}

size_t create_chatroom_req_member_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:create_chatroom_req.member_info)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .Wxid wxid = 1;
  if (has_wxid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->wxid_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void create_chatroom_req_member_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:create_chatroom_req.member_info)
  GOOGLE_DCHECK_NE(&from, this);
  const create_chatroom_req_member_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const create_chatroom_req_member_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:create_chatroom_req.member_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:create_chatroom_req.member_info)
    MergeFrom(*source);
  }
}

void create_chatroom_req_member_info::MergeFrom(const create_chatroom_req_member_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:create_chatroom_req.member_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_wxid()) {
    mutable_wxid()->::Wxid::MergeFrom(from.wxid());
  }
}

void create_chatroom_req_member_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:create_chatroom_req.member_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void create_chatroom_req_member_info::CopyFrom(const create_chatroom_req_member_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:create_chatroom_req.member_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool create_chatroom_req_member_info::IsInitialized() const {
  return true;
}

void create_chatroom_req_member_info::Swap(create_chatroom_req_member_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void create_chatroom_req_member_info::InternalSwap(create_chatroom_req_member_info* other) {
  std::swap(wxid_, other->wxid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata create_chatroom_req_member_info::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// create_chatroom_req_member_info

// optional .Wxid wxid = 1;
bool create_chatroom_req_member_info::has_wxid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void create_chatroom_req_member_info::set_has_wxid() {
  _has_bits_[0] |= 0x00000001u;
}
void create_chatroom_req_member_info::clear_has_wxid() {
  _has_bits_[0] &= ~0x00000001u;
}
void create_chatroom_req_member_info::clear_wxid() {
  if (wxid_ != NULL) wxid_->::Wxid::Clear();
  clear_has_wxid();
}
const ::Wxid& create_chatroom_req_member_info::wxid() const {
  // @@protoc_insertion_point(field_get:create_chatroom_req.member_info.wxid)
  return wxid_ != NULL ? *wxid_
                         : *::Wxid::internal_default_instance();
}
::Wxid* create_chatroom_req_member_info::mutable_wxid() {
  set_has_wxid();
  if (wxid_ == NULL) {
    wxid_ = new ::Wxid;
  }
  // @@protoc_insertion_point(field_mutable:create_chatroom_req.member_info.wxid)
  return wxid_;
}
::Wxid* create_chatroom_req_member_info::release_wxid() {
  // @@protoc_insertion_point(field_release:create_chatroom_req.member_info.wxid)
  clear_has_wxid();
  ::Wxid* temp = wxid_;
  wxid_ = NULL;
  return temp;
}
void create_chatroom_req_member_info::set_allocated_wxid(::Wxid* wxid) {
  delete wxid_;
  wxid_ = wxid;
  if (wxid) {
    set_has_wxid();
  } else {
    clear_has_wxid();
  }
  // @@protoc_insertion_point(field_set_allocated:create_chatroom_req.member_info.wxid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int create_chatroom_req::kLoginFieldNumber;
const int create_chatroom_req::kTag2FieldNumber;
const int create_chatroom_req::kMemberCntFieldNumber;
const int create_chatroom_req::kMemberFieldNumber;
const int create_chatroom_req::kTag5FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

create_chatroom_req::create_chatroom_req()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:create_chatroom_req)
}
create_chatroom_req::create_chatroom_req(const create_chatroom_req& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      member_(from.member_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_login()) {
    login_ = new ::LoginInfo(*from.login_);
  } else {
    login_ = NULL;
  }
  if (from.has_tag2()) {
    tag2_ = new ::create_chatroom_req_TAG2(*from.tag2_);
  } else {
    tag2_ = NULL;
  }
  ::memcpy(&member_cnt_, &from.member_cnt_,
    reinterpret_cast<char*>(&tag5_) -
    reinterpret_cast<char*>(&member_cnt_) + sizeof(tag5_));
  // @@protoc_insertion_point(copy_constructor:create_chatroom_req)
}

void create_chatroom_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&login_, 0, reinterpret_cast<char*>(&tag5_) -
    reinterpret_cast<char*>(&login_) + sizeof(tag5_));
}

create_chatroom_req::~create_chatroom_req() {
  // @@protoc_insertion_point(destructor:create_chatroom_req)
  SharedDtor();
}

void create_chatroom_req::SharedDtor() {
  if (this != internal_default_instance()) {
    delete login_;
  }
  if (this != internal_default_instance()) {
    delete tag2_;
  }
}

void create_chatroom_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* create_chatroom_req::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const create_chatroom_req& create_chatroom_req::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

create_chatroom_req* create_chatroom_req::New(::google::protobuf::Arena* arena) const {
  create_chatroom_req* n = new create_chatroom_req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void create_chatroom_req::Clear() {
// @@protoc_insertion_point(message_clear_start:create_chatroom_req)
  member_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_login()) {
      GOOGLE_DCHECK(login_ != NULL);
      login_->::LoginInfo::Clear();
    }
    if (has_tag2()) {
      GOOGLE_DCHECK(tag2_ != NULL);
      tag2_->::create_chatroom_req_TAG2::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&member_cnt_, 0, reinterpret_cast<char*>(&tag5_) -
      reinterpret_cast<char*>(&member_cnt_) + sizeof(tag5_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool create_chatroom_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:create_chatroom_req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .LoginInfo login = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .create_chatroom_req.TAG2 tag2 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tag2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 member_cnt = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_member_cnt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &member_cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .create_chatroom_req.member_info member = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_member()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tag5 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_tag5();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:create_chatroom_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:create_chatroom_req)
  return false;
#undef DO_
}

void create_chatroom_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:create_chatroom_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .LoginInfo login = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->login_, output);
  }

  // optional .create_chatroom_req.TAG2 tag2 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->tag2_, output);
  }

  // optional int32 member_cnt = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->member_cnt(), output);
  }

  // repeated .create_chatroom_req.member_info member = 4;
  for (unsigned int i = 0, n = this->member_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->member(i), output);
  }

  // optional int32 tag5 = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->tag5(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:create_chatroom_req)
}

::google::protobuf::uint8* create_chatroom_req::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:create_chatroom_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .LoginInfo login = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->login_, deterministic, target);
  }

  // optional .create_chatroom_req.TAG2 tag2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->tag2_, deterministic, target);
  }

  // optional int32 member_cnt = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->member_cnt(), target);
  }

  // repeated .create_chatroom_req.member_info member = 4;
  for (unsigned int i = 0, n = this->member_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->member(i), deterministic, target);
  }

  // optional int32 tag5 = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->tag5(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:create_chatroom_req)
  return target;
}

size_t create_chatroom_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:create_chatroom_req)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .create_chatroom_req.member_info member = 4;
  {
    unsigned int count = this->member_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->member(i));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional .LoginInfo login = 1;
    if (has_login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->login_);
    }

    // optional .create_chatroom_req.TAG2 tag2 = 2;
    if (has_tag2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->tag2_);
    }

    // optional int32 member_cnt = 3;
    if (has_member_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->member_cnt());
    }

    // optional int32 tag5 = 5;
    if (has_tag5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag5());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void create_chatroom_req::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:create_chatroom_req)
  GOOGLE_DCHECK_NE(&from, this);
  const create_chatroom_req* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const create_chatroom_req>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:create_chatroom_req)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:create_chatroom_req)
    MergeFrom(*source);
  }
}

void create_chatroom_req::MergeFrom(const create_chatroom_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:create_chatroom_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  member_.MergeFrom(from.member_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_login()->::LoginInfo::MergeFrom(from.login());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_tag2()->::create_chatroom_req_TAG2::MergeFrom(from.tag2());
    }
    if (cached_has_bits & 0x00000004u) {
      member_cnt_ = from.member_cnt_;
    }
    if (cached_has_bits & 0x00000008u) {
      tag5_ = from.tag5_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void create_chatroom_req::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:create_chatroom_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void create_chatroom_req::CopyFrom(const create_chatroom_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:create_chatroom_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool create_chatroom_req::IsInitialized() const {
  return true;
}

void create_chatroom_req::Swap(create_chatroom_req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void create_chatroom_req::InternalSwap(create_chatroom_req* other) {
  member_.InternalSwap(&other->member_);
  std::swap(login_, other->login_);
  std::swap(tag2_, other->tag2_);
  std::swap(member_cnt_, other->member_cnt_);
  std::swap(tag5_, other->tag5_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata create_chatroom_req::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// create_chatroom_req

// optional .LoginInfo login = 1;
bool create_chatroom_req::has_login() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void create_chatroom_req::set_has_login() {
  _has_bits_[0] |= 0x00000001u;
}
void create_chatroom_req::clear_has_login() {
  _has_bits_[0] &= ~0x00000001u;
}
void create_chatroom_req::clear_login() {
  if (login_ != NULL) login_->::LoginInfo::Clear();
  clear_has_login();
}
const ::LoginInfo& create_chatroom_req::login() const {
  // @@protoc_insertion_point(field_get:create_chatroom_req.login)
  return login_ != NULL ? *login_
                         : *::LoginInfo::internal_default_instance();
}
::LoginInfo* create_chatroom_req::mutable_login() {
  set_has_login();
  if (login_ == NULL) {
    login_ = new ::LoginInfo;
  }
  // @@protoc_insertion_point(field_mutable:create_chatroom_req.login)
  return login_;
}
::LoginInfo* create_chatroom_req::release_login() {
  // @@protoc_insertion_point(field_release:create_chatroom_req.login)
  clear_has_login();
  ::LoginInfo* temp = login_;
  login_ = NULL;
  return temp;
}
void create_chatroom_req::set_allocated_login(::LoginInfo* login) {
  delete login_;
  login_ = login;
  if (login) {
    set_has_login();
  } else {
    clear_has_login();
  }
  // @@protoc_insertion_point(field_set_allocated:create_chatroom_req.login)
}

// optional .create_chatroom_req.TAG2 tag2 = 2;
bool create_chatroom_req::has_tag2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void create_chatroom_req::set_has_tag2() {
  _has_bits_[0] |= 0x00000002u;
}
void create_chatroom_req::clear_has_tag2() {
  _has_bits_[0] &= ~0x00000002u;
}
void create_chatroom_req::clear_tag2() {
  if (tag2_ != NULL) tag2_->::create_chatroom_req_TAG2::Clear();
  clear_has_tag2();
}
const ::create_chatroom_req_TAG2& create_chatroom_req::tag2() const {
  // @@protoc_insertion_point(field_get:create_chatroom_req.tag2)
  return tag2_ != NULL ? *tag2_
                         : *::create_chatroom_req_TAG2::internal_default_instance();
}
::create_chatroom_req_TAG2* create_chatroom_req::mutable_tag2() {
  set_has_tag2();
  if (tag2_ == NULL) {
    tag2_ = new ::create_chatroom_req_TAG2;
  }
  // @@protoc_insertion_point(field_mutable:create_chatroom_req.tag2)
  return tag2_;
}
::create_chatroom_req_TAG2* create_chatroom_req::release_tag2() {
  // @@protoc_insertion_point(field_release:create_chatroom_req.tag2)
  clear_has_tag2();
  ::create_chatroom_req_TAG2* temp = tag2_;
  tag2_ = NULL;
  return temp;
}
void create_chatroom_req::set_allocated_tag2(::create_chatroom_req_TAG2* tag2) {
  delete tag2_;
  tag2_ = tag2;
  if (tag2) {
    set_has_tag2();
  } else {
    clear_has_tag2();
  }
  // @@protoc_insertion_point(field_set_allocated:create_chatroom_req.tag2)
}

// optional int32 member_cnt = 3;
bool create_chatroom_req::has_member_cnt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void create_chatroom_req::set_has_member_cnt() {
  _has_bits_[0] |= 0x00000004u;
}
void create_chatroom_req::clear_has_member_cnt() {
  _has_bits_[0] &= ~0x00000004u;
}
void create_chatroom_req::clear_member_cnt() {
  member_cnt_ = 0;
  clear_has_member_cnt();
}
::google::protobuf::int32 create_chatroom_req::member_cnt() const {
  // @@protoc_insertion_point(field_get:create_chatroom_req.member_cnt)
  return member_cnt_;
}
void create_chatroom_req::set_member_cnt(::google::protobuf::int32 value) {
  set_has_member_cnt();
  member_cnt_ = value;
  // @@protoc_insertion_point(field_set:create_chatroom_req.member_cnt)
}

// repeated .create_chatroom_req.member_info member = 4;
int create_chatroom_req::member_size() const {
  return member_.size();
}
void create_chatroom_req::clear_member() {
  member_.Clear();
}
const ::create_chatroom_req_member_info& create_chatroom_req::member(int index) const {
  // @@protoc_insertion_point(field_get:create_chatroom_req.member)
  return member_.Get(index);
}
::create_chatroom_req_member_info* create_chatroom_req::mutable_member(int index) {
  // @@protoc_insertion_point(field_mutable:create_chatroom_req.member)
  return member_.Mutable(index);
}
::create_chatroom_req_member_info* create_chatroom_req::add_member() {
  // @@protoc_insertion_point(field_add:create_chatroom_req.member)
  return member_.Add();
}
::google::protobuf::RepeatedPtrField< ::create_chatroom_req_member_info >*
create_chatroom_req::mutable_member() {
  // @@protoc_insertion_point(field_mutable_list:create_chatroom_req.member)
  return &member_;
}
const ::google::protobuf::RepeatedPtrField< ::create_chatroom_req_member_info >&
create_chatroom_req::member() const {
  // @@protoc_insertion_point(field_list:create_chatroom_req.member)
  return member_;
}

// optional int32 tag5 = 5;
bool create_chatroom_req::has_tag5() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void create_chatroom_req::set_has_tag5() {
  _has_bits_[0] |= 0x00000008u;
}
void create_chatroom_req::clear_has_tag5() {
  _has_bits_[0] &= ~0x00000008u;
}
void create_chatroom_req::clear_tag5() {
  tag5_ = 0;
  clear_has_tag5();
}
::google::protobuf::int32 create_chatroom_req::tag5() const {
  // @@protoc_insertion_point(field_get:create_chatroom_req.tag5)
  return tag5_;
}
void create_chatroom_req::set_tag5(::google::protobuf::int32 value) {
  set_has_tag5();
  tag5_ = value;
  // @@protoc_insertion_point(field_set:create_chatroom_req.tag5)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int create_chatroom_resp_result_err_msg::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

create_chatroom_resp_result_err_msg::create_chatroom_resp_result_err_msg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:create_chatroom_resp.result.err_msg)
}
create_chatroom_resp_result_err_msg::create_chatroom_resp_result_err_msg(const create_chatroom_resp_result_err_msg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_msg()) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:create_chatroom_resp.result.err_msg)
}

void create_chatroom_resp_result_err_msg::SharedCtor() {
  _cached_size_ = 0;
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

create_chatroom_resp_result_err_msg::~create_chatroom_resp_result_err_msg() {
  // @@protoc_insertion_point(destructor:create_chatroom_resp.result.err_msg)
  SharedDtor();
}

void create_chatroom_resp_result_err_msg::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void create_chatroom_resp_result_err_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* create_chatroom_resp_result_err_msg::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const create_chatroom_resp_result_err_msg& create_chatroom_resp_result_err_msg::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

create_chatroom_resp_result_err_msg* create_chatroom_resp_result_err_msg::New(::google::protobuf::Arena* arena) const {
  create_chatroom_resp_result_err_msg* n = new create_chatroom_resp_result_err_msg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void create_chatroom_resp_result_err_msg::Clear() {
// @@protoc_insertion_point(message_clear_start:create_chatroom_resp.result.err_msg)
  if (has_msg()) {
    GOOGLE_DCHECK(!msg_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*msg_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool create_chatroom_resp_result_err_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:create_chatroom_resp.result.err_msg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msg = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "create_chatroom_resp.result.err_msg.msg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:create_chatroom_resp.result.err_msg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:create_chatroom_resp.result.err_msg)
  return false;
#undef DO_
}

void create_chatroom_resp_result_err_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:create_chatroom_resp.result.err_msg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string msg = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "create_chatroom_resp.result.err_msg.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:create_chatroom_resp.result.err_msg)
}

::google::protobuf::uint8* create_chatroom_resp_result_err_msg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:create_chatroom_resp.result.err_msg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string msg = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "create_chatroom_resp.result.err_msg.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:create_chatroom_resp.result.err_msg)
  return target;
}

size_t create_chatroom_resp_result_err_msg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:create_chatroom_resp.result.err_msg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string msg = 1;
  if (has_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void create_chatroom_resp_result_err_msg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:create_chatroom_resp.result.err_msg)
  GOOGLE_DCHECK_NE(&from, this);
  const create_chatroom_resp_result_err_msg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const create_chatroom_resp_result_err_msg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:create_chatroom_resp.result.err_msg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:create_chatroom_resp.result.err_msg)
    MergeFrom(*source);
  }
}

void create_chatroom_resp_result_err_msg::MergeFrom(const create_chatroom_resp_result_err_msg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:create_chatroom_resp.result.err_msg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_msg()) {
    set_has_msg();
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void create_chatroom_resp_result_err_msg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:create_chatroom_resp.result.err_msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void create_chatroom_resp_result_err_msg::CopyFrom(const create_chatroom_resp_result_err_msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:create_chatroom_resp.result.err_msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool create_chatroom_resp_result_err_msg::IsInitialized() const {
  return true;
}

void create_chatroom_resp_result_err_msg::Swap(create_chatroom_resp_result_err_msg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void create_chatroom_resp_result_err_msg::InternalSwap(create_chatroom_resp_result_err_msg* other) {
  msg_.Swap(&other->msg_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata create_chatroom_resp_result_err_msg::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// create_chatroom_resp_result_err_msg

// optional string msg = 1;
bool create_chatroom_resp_result_err_msg::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void create_chatroom_resp_result_err_msg::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
void create_chatroom_resp_result_err_msg::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
void create_chatroom_resp_result_err_msg::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
const ::std::string& create_chatroom_resp_result_err_msg::msg() const {
  // @@protoc_insertion_point(field_get:create_chatroom_resp.result.err_msg.msg)
  return msg_.GetNoArena();
}
void create_chatroom_resp_result_err_msg::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:create_chatroom_resp.result.err_msg.msg)
}
#if LANG_CXX11
void create_chatroom_resp_result_err_msg::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:create_chatroom_resp.result.err_msg.msg)
}
#endif
void create_chatroom_resp_result_err_msg::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:create_chatroom_resp.result.err_msg.msg)
}
void create_chatroom_resp_result_err_msg::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:create_chatroom_resp.result.err_msg.msg)
}
::std::string* create_chatroom_resp_result_err_msg::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:create_chatroom_resp.result.err_msg.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* create_chatroom_resp_result_err_msg::release_msg() {
  // @@protoc_insertion_point(field_release:create_chatroom_resp.result.err_msg.msg)
  clear_has_msg();
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void create_chatroom_resp_result_err_msg::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:create_chatroom_resp.result.err_msg.msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int create_chatroom_resp_result::kCodeFieldNumber;
const int create_chatroom_resp_result::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

create_chatroom_resp_result::create_chatroom_resp_result()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:create_chatroom_resp.result)
}
create_chatroom_resp_result::create_chatroom_resp_result(const create_chatroom_resp_result& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_msg()) {
    msg_ = new ::create_chatroom_resp_result_err_msg(*from.msg_);
  } else {
    msg_ = NULL;
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:create_chatroom_resp.result)
}

void create_chatroom_resp_result::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&msg_, 0, reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&msg_) + sizeof(code_));
}

create_chatroom_resp_result::~create_chatroom_resp_result() {
  // @@protoc_insertion_point(destructor:create_chatroom_resp.result)
  SharedDtor();
}

void create_chatroom_resp_result::SharedDtor() {
  if (this != internal_default_instance()) {
    delete msg_;
  }
}

void create_chatroom_resp_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* create_chatroom_resp_result::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const create_chatroom_resp_result& create_chatroom_resp_result::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

create_chatroom_resp_result* create_chatroom_resp_result::New(::google::protobuf::Arena* arena) const {
  create_chatroom_resp_result* n = new create_chatroom_resp_result;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void create_chatroom_resp_result::Clear() {
// @@protoc_insertion_point(message_clear_start:create_chatroom_resp.result)
  if (has_msg()) {
    GOOGLE_DCHECK(msg_ != NULL);
    msg_->::create_chatroom_resp_result_err_msg::Clear();
  }
  code_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool create_chatroom_resp_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:create_chatroom_resp.result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .create_chatroom_resp.result.err_msg msg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:create_chatroom_resp.result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:create_chatroom_resp.result)
  return false;
#undef DO_
}

void create_chatroom_resp_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:create_chatroom_resp.result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 code = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // optional .create_chatroom_resp.result.err_msg msg = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->msg_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:create_chatroom_resp.result)
}

::google::protobuf::uint8* create_chatroom_resp_result::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:create_chatroom_resp.result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // optional .create_chatroom_resp.result.err_msg msg = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->msg_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:create_chatroom_resp.result)
  return target;
}

size_t create_chatroom_resp_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:create_chatroom_resp.result)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .create_chatroom_resp.result.err_msg msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->msg_);
    }

    // optional int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void create_chatroom_resp_result::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:create_chatroom_resp.result)
  GOOGLE_DCHECK_NE(&from, this);
  const create_chatroom_resp_result* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const create_chatroom_resp_result>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:create_chatroom_resp.result)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:create_chatroom_resp.result)
    MergeFrom(*source);
  }
}

void create_chatroom_resp_result::MergeFrom(const create_chatroom_resp_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:create_chatroom_resp.result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_msg()->::create_chatroom_resp_result_err_msg::MergeFrom(from.msg());
    }
    if (cached_has_bits & 0x00000002u) {
      code_ = from.code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void create_chatroom_resp_result::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:create_chatroom_resp.result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void create_chatroom_resp_result::CopyFrom(const create_chatroom_resp_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:create_chatroom_resp.result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool create_chatroom_resp_result::IsInitialized() const {
  return true;
}

void create_chatroom_resp_result::Swap(create_chatroom_resp_result* other) {
  if (other == this) return;
  InternalSwap(other);
}
void create_chatroom_resp_result::InternalSwap(create_chatroom_resp_result* other) {
  std::swap(msg_, other->msg_);
  std::swap(code_, other->code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata create_chatroom_resp_result::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// create_chatroom_resp_result

// optional int32 code = 1;
bool create_chatroom_resp_result::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void create_chatroom_resp_result::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
void create_chatroom_resp_result::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void create_chatroom_resp_result::clear_code() {
  code_ = 0;
  clear_has_code();
}
::google::protobuf::int32 create_chatroom_resp_result::code() const {
  // @@protoc_insertion_point(field_get:create_chatroom_resp.result.code)
  return code_;
}
void create_chatroom_resp_result::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:create_chatroom_resp.result.code)
}

// optional .create_chatroom_resp.result.err_msg msg = 2;
bool create_chatroom_resp_result::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void create_chatroom_resp_result::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
void create_chatroom_resp_result::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
void create_chatroom_resp_result::clear_msg() {
  if (msg_ != NULL) msg_->::create_chatroom_resp_result_err_msg::Clear();
  clear_has_msg();
}
const ::create_chatroom_resp_result_err_msg& create_chatroom_resp_result::msg() const {
  // @@protoc_insertion_point(field_get:create_chatroom_resp.result.msg)
  return msg_ != NULL ? *msg_
                         : *::create_chatroom_resp_result_err_msg::internal_default_instance();
}
::create_chatroom_resp_result_err_msg* create_chatroom_resp_result::mutable_msg() {
  set_has_msg();
  if (msg_ == NULL) {
    msg_ = new ::create_chatroom_resp_result_err_msg;
  }
  // @@protoc_insertion_point(field_mutable:create_chatroom_resp.result.msg)
  return msg_;
}
::create_chatroom_resp_result_err_msg* create_chatroom_resp_result::release_msg() {
  // @@protoc_insertion_point(field_release:create_chatroom_resp.result.msg)
  clear_has_msg();
  ::create_chatroom_resp_result_err_msg* temp = msg_;
  msg_ = NULL;
  return temp;
}
void create_chatroom_resp_result::set_allocated_msg(::create_chatroom_resp_result_err_msg* msg) {
  delete msg_;
  msg_ = msg;
  if (msg) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  // @@protoc_insertion_point(field_set_allocated:create_chatroom_resp.result.msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int create_chatroom_resp_member_info_nick_name_info::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

create_chatroom_resp_member_info_nick_name_info::create_chatroom_resp_member_info_nick_name_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:create_chatroom_resp.member_info.nick_name_info)
}
create_chatroom_resp_member_info_nick_name_info::create_chatroom_resp_member_info_nick_name_info(const create_chatroom_resp_member_info_nick_name_info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:create_chatroom_resp.member_info.nick_name_info)
}

void create_chatroom_resp_member_info_nick_name_info::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

create_chatroom_resp_member_info_nick_name_info::~create_chatroom_resp_member_info_nick_name_info() {
  // @@protoc_insertion_point(destructor:create_chatroom_resp.member_info.nick_name_info)
  SharedDtor();
}

void create_chatroom_resp_member_info_nick_name_info::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void create_chatroom_resp_member_info_nick_name_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* create_chatroom_resp_member_info_nick_name_info::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const create_chatroom_resp_member_info_nick_name_info& create_chatroom_resp_member_info_nick_name_info::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

create_chatroom_resp_member_info_nick_name_info* create_chatroom_resp_member_info_nick_name_info::New(::google::protobuf::Arena* arena) const {
  create_chatroom_resp_member_info_nick_name_info* n = new create_chatroom_resp_member_info_nick_name_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void create_chatroom_resp_member_info_nick_name_info::Clear() {
// @@protoc_insertion_point(message_clear_start:create_chatroom_resp.member_info.nick_name_info)
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool create_chatroom_resp_member_info_nick_name_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:create_chatroom_resp.member_info.nick_name_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "create_chatroom_resp.member_info.nick_name_info.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:create_chatroom_resp.member_info.nick_name_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:create_chatroom_resp.member_info.nick_name_info)
  return false;
#undef DO_
}

void create_chatroom_resp_member_info_nick_name_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:create_chatroom_resp.member_info.nick_name_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "create_chatroom_resp.member_info.nick_name_info.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:create_chatroom_resp.member_info.nick_name_info)
}

::google::protobuf::uint8* create_chatroom_resp_member_info_nick_name_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:create_chatroom_resp.member_info.nick_name_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "create_chatroom_resp.member_info.nick_name_info.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:create_chatroom_resp.member_info.nick_name_info)
  return target;
}

size_t create_chatroom_resp_member_info_nick_name_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:create_chatroom_resp.member_info.nick_name_info)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void create_chatroom_resp_member_info_nick_name_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:create_chatroom_resp.member_info.nick_name_info)
  GOOGLE_DCHECK_NE(&from, this);
  const create_chatroom_resp_member_info_nick_name_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const create_chatroom_resp_member_info_nick_name_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:create_chatroom_resp.member_info.nick_name_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:create_chatroom_resp.member_info.nick_name_info)
    MergeFrom(*source);
  }
}

void create_chatroom_resp_member_info_nick_name_info::MergeFrom(const create_chatroom_resp_member_info_nick_name_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:create_chatroom_resp.member_info.nick_name_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_name()) {
    set_has_name();
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void create_chatroom_resp_member_info_nick_name_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:create_chatroom_resp.member_info.nick_name_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void create_chatroom_resp_member_info_nick_name_info::CopyFrom(const create_chatroom_resp_member_info_nick_name_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:create_chatroom_resp.member_info.nick_name_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool create_chatroom_resp_member_info_nick_name_info::IsInitialized() const {
  return true;
}

void create_chatroom_resp_member_info_nick_name_info::Swap(create_chatroom_resp_member_info_nick_name_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void create_chatroom_resp_member_info_nick_name_info::InternalSwap(create_chatroom_resp_member_info_nick_name_info* other) {
  name_.Swap(&other->name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata create_chatroom_resp_member_info_nick_name_info::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// create_chatroom_resp_member_info_nick_name_info

// optional string name = 1;
bool create_chatroom_resp_member_info_nick_name_info::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void create_chatroom_resp_member_info_nick_name_info::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void create_chatroom_resp_member_info_nick_name_info::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void create_chatroom_resp_member_info_nick_name_info::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& create_chatroom_resp_member_info_nick_name_info::name() const {
  // @@protoc_insertion_point(field_get:create_chatroom_resp.member_info.nick_name_info.name)
  return name_.GetNoArena();
}
void create_chatroom_resp_member_info_nick_name_info::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:create_chatroom_resp.member_info.nick_name_info.name)
}
#if LANG_CXX11
void create_chatroom_resp_member_info_nick_name_info::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:create_chatroom_resp.member_info.nick_name_info.name)
}
#endif
void create_chatroom_resp_member_info_nick_name_info::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:create_chatroom_resp.member_info.nick_name_info.name)
}
void create_chatroom_resp_member_info_nick_name_info::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:create_chatroom_resp.member_info.nick_name_info.name)
}
::std::string* create_chatroom_resp_member_info_nick_name_info::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:create_chatroom_resp.member_info.nick_name_info.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* create_chatroom_resp_member_info_nick_name_info::release_name() {
  // @@protoc_insertion_point(field_release:create_chatroom_resp.member_info.nick_name_info.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void create_chatroom_resp_member_info_nick_name_info::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:create_chatroom_resp.member_info.nick_name_info.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int create_chatroom_resp_member_info::kWxidFieldNumber;
const int create_chatroom_resp_member_info::kNickNameFieldNumber;
const int create_chatroom_resp_member_info::kQianmingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

create_chatroom_resp_member_info::create_chatroom_resp_member_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:create_chatroom_resp.member_info)
}
create_chatroom_resp_member_info::create_chatroom_resp_member_info(const create_chatroom_resp_member_info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  qianming_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_qianming()) {
    qianming_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qianming_);
  }
  if (from.has_wxid()) {
    wxid_ = new ::Wxid(*from.wxid_);
  } else {
    wxid_ = NULL;
  }
  if (from.has_nick_name()) {
    nick_name_ = new ::create_chatroom_resp_member_info_nick_name_info(*from.nick_name_);
  } else {
    nick_name_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:create_chatroom_resp.member_info)
}

void create_chatroom_resp_member_info::SharedCtor() {
  _cached_size_ = 0;
  qianming_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&wxid_, 0, reinterpret_cast<char*>(&nick_name_) -
    reinterpret_cast<char*>(&wxid_) + sizeof(nick_name_));
}

create_chatroom_resp_member_info::~create_chatroom_resp_member_info() {
  // @@protoc_insertion_point(destructor:create_chatroom_resp.member_info)
  SharedDtor();
}

void create_chatroom_resp_member_info::SharedDtor() {
  qianming_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete wxid_;
  }
  if (this != internal_default_instance()) {
    delete nick_name_;
  }
}

void create_chatroom_resp_member_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* create_chatroom_resp_member_info::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const create_chatroom_resp_member_info& create_chatroom_resp_member_info::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

create_chatroom_resp_member_info* create_chatroom_resp_member_info::New(::google::protobuf::Arena* arena) const {
  create_chatroom_resp_member_info* n = new create_chatroom_resp_member_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void create_chatroom_resp_member_info::Clear() {
// @@protoc_insertion_point(message_clear_start:create_chatroom_resp.member_info)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_qianming()) {
      GOOGLE_DCHECK(!qianming_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*qianming_.UnsafeRawStringPointer())->clear();
    }
    if (has_wxid()) {
      GOOGLE_DCHECK(wxid_ != NULL);
      wxid_->::Wxid::Clear();
    }
    if (has_nick_name()) {
      GOOGLE_DCHECK(nick_name_ != NULL);
      nick_name_->::create_chatroom_resp_member_info_nick_name_info::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool create_chatroom_resp_member_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:create_chatroom_resp.member_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Wxid wxid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wxid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .create_chatroom_resp.member_info.nick_name_info nick_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nick_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string qianming = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_qianming()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->qianming().data(), this->qianming().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "create_chatroom_resp.member_info.qianming");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:create_chatroom_resp.member_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:create_chatroom_resp.member_info)
  return false;
#undef DO_
}

void create_chatroom_resp_member_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:create_chatroom_resp.member_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Wxid wxid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->wxid_, output);
  }

  // optional .create_chatroom_resp.member_info.nick_name_info nick_name = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->nick_name_, output);
  }

  // optional string qianming = 15;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->qianming().data(), this->qianming().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "create_chatroom_resp.member_info.qianming");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->qianming(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:create_chatroom_resp.member_info)
}

::google::protobuf::uint8* create_chatroom_resp_member_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:create_chatroom_resp.member_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Wxid wxid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->wxid_, deterministic, target);
  }

  // optional .create_chatroom_resp.member_info.nick_name_info nick_name = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->nick_name_, deterministic, target);
  }

  // optional string qianming = 15;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->qianming().data(), this->qianming().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "create_chatroom_resp.member_info.qianming");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->qianming(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:create_chatroom_resp.member_info)
  return target;
}

size_t create_chatroom_resp_member_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:create_chatroom_resp.member_info)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string qianming = 15;
    if (has_qianming()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->qianming());
    }

    // optional .Wxid wxid = 1;
    if (has_wxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->wxid_);
    }

    // optional .create_chatroom_resp.member_info.nick_name_info nick_name = 3;
    if (has_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->nick_name_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void create_chatroom_resp_member_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:create_chatroom_resp.member_info)
  GOOGLE_DCHECK_NE(&from, this);
  const create_chatroom_resp_member_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const create_chatroom_resp_member_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:create_chatroom_resp.member_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:create_chatroom_resp.member_info)
    MergeFrom(*source);
  }
}

void create_chatroom_resp_member_info::MergeFrom(const create_chatroom_resp_member_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:create_chatroom_resp.member_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_qianming();
      qianming_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qianming_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_wxid()->::Wxid::MergeFrom(from.wxid());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_nick_name()->::create_chatroom_resp_member_info_nick_name_info::MergeFrom(from.nick_name());
    }
  }
}

void create_chatroom_resp_member_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:create_chatroom_resp.member_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void create_chatroom_resp_member_info::CopyFrom(const create_chatroom_resp_member_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:create_chatroom_resp.member_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool create_chatroom_resp_member_info::IsInitialized() const {
  return true;
}

void create_chatroom_resp_member_info::Swap(create_chatroom_resp_member_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void create_chatroom_resp_member_info::InternalSwap(create_chatroom_resp_member_info* other) {
  qianming_.Swap(&other->qianming_);
  std::swap(wxid_, other->wxid_);
  std::swap(nick_name_, other->nick_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata create_chatroom_resp_member_info::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// create_chatroom_resp_member_info

// optional .Wxid wxid = 1;
bool create_chatroom_resp_member_info::has_wxid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void create_chatroom_resp_member_info::set_has_wxid() {
  _has_bits_[0] |= 0x00000002u;
}
void create_chatroom_resp_member_info::clear_has_wxid() {
  _has_bits_[0] &= ~0x00000002u;
}
void create_chatroom_resp_member_info::clear_wxid() {
  if (wxid_ != NULL) wxid_->::Wxid::Clear();
  clear_has_wxid();
}
const ::Wxid& create_chatroom_resp_member_info::wxid() const {
  // @@protoc_insertion_point(field_get:create_chatroom_resp.member_info.wxid)
  return wxid_ != NULL ? *wxid_
                         : *::Wxid::internal_default_instance();
}
::Wxid* create_chatroom_resp_member_info::mutable_wxid() {
  set_has_wxid();
  if (wxid_ == NULL) {
    wxid_ = new ::Wxid;
  }
  // @@protoc_insertion_point(field_mutable:create_chatroom_resp.member_info.wxid)
  return wxid_;
}
::Wxid* create_chatroom_resp_member_info::release_wxid() {
  // @@protoc_insertion_point(field_release:create_chatroom_resp.member_info.wxid)
  clear_has_wxid();
  ::Wxid* temp = wxid_;
  wxid_ = NULL;
  return temp;
}
void create_chatroom_resp_member_info::set_allocated_wxid(::Wxid* wxid) {
  delete wxid_;
  wxid_ = wxid;
  if (wxid) {
    set_has_wxid();
  } else {
    clear_has_wxid();
  }
  // @@protoc_insertion_point(field_set_allocated:create_chatroom_resp.member_info.wxid)
}

// optional .create_chatroom_resp.member_info.nick_name_info nick_name = 3;
bool create_chatroom_resp_member_info::has_nick_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void create_chatroom_resp_member_info::set_has_nick_name() {
  _has_bits_[0] |= 0x00000004u;
}
void create_chatroom_resp_member_info::clear_has_nick_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void create_chatroom_resp_member_info::clear_nick_name() {
  if (nick_name_ != NULL) nick_name_->::create_chatroom_resp_member_info_nick_name_info::Clear();
  clear_has_nick_name();
}
const ::create_chatroom_resp_member_info_nick_name_info& create_chatroom_resp_member_info::nick_name() const {
  // @@protoc_insertion_point(field_get:create_chatroom_resp.member_info.nick_name)
  return nick_name_ != NULL ? *nick_name_
                         : *::create_chatroom_resp_member_info_nick_name_info::internal_default_instance();
}
::create_chatroom_resp_member_info_nick_name_info* create_chatroom_resp_member_info::mutable_nick_name() {
  set_has_nick_name();
  if (nick_name_ == NULL) {
    nick_name_ = new ::create_chatroom_resp_member_info_nick_name_info;
  }
  // @@protoc_insertion_point(field_mutable:create_chatroom_resp.member_info.nick_name)
  return nick_name_;
}
::create_chatroom_resp_member_info_nick_name_info* create_chatroom_resp_member_info::release_nick_name() {
  // @@protoc_insertion_point(field_release:create_chatroom_resp.member_info.nick_name)
  clear_has_nick_name();
  ::create_chatroom_resp_member_info_nick_name_info* temp = nick_name_;
  nick_name_ = NULL;
  return temp;
}
void create_chatroom_resp_member_info::set_allocated_nick_name(::create_chatroom_resp_member_info_nick_name_info* nick_name) {
  delete nick_name_;
  nick_name_ = nick_name;
  if (nick_name) {
    set_has_nick_name();
  } else {
    clear_has_nick_name();
  }
  // @@protoc_insertion_point(field_set_allocated:create_chatroom_resp.member_info.nick_name)
}

// optional string qianming = 15;
bool create_chatroom_resp_member_info::has_qianming() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void create_chatroom_resp_member_info::set_has_qianming() {
  _has_bits_[0] |= 0x00000001u;
}
void create_chatroom_resp_member_info::clear_has_qianming() {
  _has_bits_[0] &= ~0x00000001u;
}
void create_chatroom_resp_member_info::clear_qianming() {
  qianming_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_qianming();
}
const ::std::string& create_chatroom_resp_member_info::qianming() const {
  // @@protoc_insertion_point(field_get:create_chatroom_resp.member_info.qianming)
  return qianming_.GetNoArena();
}
void create_chatroom_resp_member_info::set_qianming(const ::std::string& value) {
  set_has_qianming();
  qianming_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:create_chatroom_resp.member_info.qianming)
}
#if LANG_CXX11
void create_chatroom_resp_member_info::set_qianming(::std::string&& value) {
  set_has_qianming();
  qianming_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:create_chatroom_resp.member_info.qianming)
}
#endif
void create_chatroom_resp_member_info::set_qianming(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_qianming();
  qianming_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:create_chatroom_resp.member_info.qianming)
}
void create_chatroom_resp_member_info::set_qianming(const char* value, size_t size) {
  set_has_qianming();
  qianming_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:create_chatroom_resp.member_info.qianming)
}
::std::string* create_chatroom_resp_member_info::mutable_qianming() {
  set_has_qianming();
  // @@protoc_insertion_point(field_mutable:create_chatroom_resp.member_info.qianming)
  return qianming_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* create_chatroom_resp_member_info::release_qianming() {
  // @@protoc_insertion_point(field_release:create_chatroom_resp.member_info.qianming)
  clear_has_qianming();
  return qianming_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void create_chatroom_resp_member_info::set_allocated_qianming(::std::string* qianming) {
  if (qianming != NULL) {
    set_has_qianming();
  } else {
    clear_has_qianming();
  }
  qianming_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), qianming);
  // @@protoc_insertion_point(field_set_allocated:create_chatroom_resp.member_info.qianming)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int create_chatroom_resp_chatroom_avatar::kLenFieldNumber;
const int create_chatroom_resp_chatroom_avatar::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

create_chatroom_resp_chatroom_avatar::create_chatroom_resp_chatroom_avatar()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:create_chatroom_resp.chatroom_avatar)
}
create_chatroom_resp_chatroom_avatar::create_chatroom_resp_chatroom_avatar(const create_chatroom_resp_chatroom_avatar& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  len_ = from.len_;
  // @@protoc_insertion_point(copy_constructor:create_chatroom_resp.chatroom_avatar)
}

void create_chatroom_resp_chatroom_avatar::SharedCtor() {
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  len_ = 0;
}

create_chatroom_resp_chatroom_avatar::~create_chatroom_resp_chatroom_avatar() {
  // @@protoc_insertion_point(destructor:create_chatroom_resp.chatroom_avatar)
  SharedDtor();
}

void create_chatroom_resp_chatroom_avatar::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void create_chatroom_resp_chatroom_avatar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* create_chatroom_resp_chatroom_avatar::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const create_chatroom_resp_chatroom_avatar& create_chatroom_resp_chatroom_avatar::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

create_chatroom_resp_chatroom_avatar* create_chatroom_resp_chatroom_avatar::New(::google::protobuf::Arena* arena) const {
  create_chatroom_resp_chatroom_avatar* n = new create_chatroom_resp_chatroom_avatar;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void create_chatroom_resp_chatroom_avatar::Clear() {
// @@protoc_insertion_point(message_clear_start:create_chatroom_resp.chatroom_avatar)
  if (has_data()) {
    GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*data_.UnsafeRawStringPointer())->clear();
  }
  len_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool create_chatroom_resp_chatroom_avatar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:create_chatroom_resp.chatroom_avatar)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 len = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_len();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &len_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:create_chatroom_resp.chatroom_avatar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:create_chatroom_resp.chatroom_avatar)
  return false;
#undef DO_
}

void create_chatroom_resp_chatroom_avatar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:create_chatroom_resp.chatroom_avatar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 len = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->len(), output);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:create_chatroom_resp.chatroom_avatar)
}

::google::protobuf::uint8* create_chatroom_resp_chatroom_avatar::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:create_chatroom_resp.chatroom_avatar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 len = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->len(), target);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:create_chatroom_resp.chatroom_avatar)
  return target;
}

size_t create_chatroom_resp_chatroom_avatar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:create_chatroom_resp.chatroom_avatar)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional int32 len = 1;
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->len());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void create_chatroom_resp_chatroom_avatar::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:create_chatroom_resp.chatroom_avatar)
  GOOGLE_DCHECK_NE(&from, this);
  const create_chatroom_resp_chatroom_avatar* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const create_chatroom_resp_chatroom_avatar>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:create_chatroom_resp.chatroom_avatar)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:create_chatroom_resp.chatroom_avatar)
    MergeFrom(*source);
  }
}

void create_chatroom_resp_chatroom_avatar::MergeFrom(const create_chatroom_resp_chatroom_avatar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:create_chatroom_resp.chatroom_avatar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      len_ = from.len_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void create_chatroom_resp_chatroom_avatar::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:create_chatroom_resp.chatroom_avatar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void create_chatroom_resp_chatroom_avatar::CopyFrom(const create_chatroom_resp_chatroom_avatar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:create_chatroom_resp.chatroom_avatar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool create_chatroom_resp_chatroom_avatar::IsInitialized() const {
  return true;
}

void create_chatroom_resp_chatroom_avatar::Swap(create_chatroom_resp_chatroom_avatar* other) {
  if (other == this) return;
  InternalSwap(other);
}
void create_chatroom_resp_chatroom_avatar::InternalSwap(create_chatroom_resp_chatroom_avatar* other) {
  data_.Swap(&other->data_);
  std::swap(len_, other->len_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata create_chatroom_resp_chatroom_avatar::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// create_chatroom_resp_chatroom_avatar

// optional int32 len = 1;
bool create_chatroom_resp_chatroom_avatar::has_len() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void create_chatroom_resp_chatroom_avatar::set_has_len() {
  _has_bits_[0] |= 0x00000002u;
}
void create_chatroom_resp_chatroom_avatar::clear_has_len() {
  _has_bits_[0] &= ~0x00000002u;
}
void create_chatroom_resp_chatroom_avatar::clear_len() {
  len_ = 0;
  clear_has_len();
}
::google::protobuf::int32 create_chatroom_resp_chatroom_avatar::len() const {
  // @@protoc_insertion_point(field_get:create_chatroom_resp.chatroom_avatar.len)
  return len_;
}
void create_chatroom_resp_chatroom_avatar::set_len(::google::protobuf::int32 value) {
  set_has_len();
  len_ = value;
  // @@protoc_insertion_point(field_set:create_chatroom_resp.chatroom_avatar.len)
}

// optional bytes data = 2;
bool create_chatroom_resp_chatroom_avatar::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void create_chatroom_resp_chatroom_avatar::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void create_chatroom_resp_chatroom_avatar::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void create_chatroom_resp_chatroom_avatar::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& create_chatroom_resp_chatroom_avatar::data() const {
  // @@protoc_insertion_point(field_get:create_chatroom_resp.chatroom_avatar.data)
  return data_.GetNoArena();
}
void create_chatroom_resp_chatroom_avatar::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:create_chatroom_resp.chatroom_avatar.data)
}
#if LANG_CXX11
void create_chatroom_resp_chatroom_avatar::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:create_chatroom_resp.chatroom_avatar.data)
}
#endif
void create_chatroom_resp_chatroom_avatar::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:create_chatroom_resp.chatroom_avatar.data)
}
void create_chatroom_resp_chatroom_avatar::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:create_chatroom_resp.chatroom_avatar.data)
}
::std::string* create_chatroom_resp_chatroom_avatar::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:create_chatroom_resp.chatroom_avatar.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* create_chatroom_resp_chatroom_avatar::release_data() {
  // @@protoc_insertion_point(field_release:create_chatroom_resp.chatroom_avatar.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void create_chatroom_resp_chatroom_avatar::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:create_chatroom_resp.chatroom_avatar.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int create_chatroom_resp::kResFieldNumber;
const int create_chatroom_resp::kMemberCntFieldNumber;
const int create_chatroom_resp::kMemberFieldNumber;
const int create_chatroom_resp::kChatroomWxidFieldNumber;
const int create_chatroom_resp::kAvatarFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

create_chatroom_resp::create_chatroom_resp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:create_chatroom_resp)
}
create_chatroom_resp::create_chatroom_resp(const create_chatroom_resp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      member_(from.member_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_res()) {
    res_ = new ::create_chatroom_resp_result(*from.res_);
  } else {
    res_ = NULL;
  }
  if (from.has_chatroom_wxid()) {
    chatroom_wxid_ = new ::Wxid(*from.chatroom_wxid_);
  } else {
    chatroom_wxid_ = NULL;
  }
  if (from.has_avatar()) {
    avatar_ = new ::create_chatroom_resp_chatroom_avatar(*from.avatar_);
  } else {
    avatar_ = NULL;
  }
  member_cnt_ = from.member_cnt_;
  // @@protoc_insertion_point(copy_constructor:create_chatroom_resp)
}

void create_chatroom_resp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&res_, 0, reinterpret_cast<char*>(&member_cnt_) -
    reinterpret_cast<char*>(&res_) + sizeof(member_cnt_));
}

create_chatroom_resp::~create_chatroom_resp() {
  // @@protoc_insertion_point(destructor:create_chatroom_resp)
  SharedDtor();
}

void create_chatroom_resp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete res_;
  }
  if (this != internal_default_instance()) {
    delete chatroom_wxid_;
  }
  if (this != internal_default_instance()) {
    delete avatar_;
  }
}

void create_chatroom_resp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* create_chatroom_resp::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const create_chatroom_resp& create_chatroom_resp::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

create_chatroom_resp* create_chatroom_resp::New(::google::protobuf::Arena* arena) const {
  create_chatroom_resp* n = new create_chatroom_resp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void create_chatroom_resp::Clear() {
// @@protoc_insertion_point(message_clear_start:create_chatroom_resp)
  member_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_res()) {
      GOOGLE_DCHECK(res_ != NULL);
      res_->::create_chatroom_resp_result::Clear();
    }
    if (has_chatroom_wxid()) {
      GOOGLE_DCHECK(chatroom_wxid_ != NULL);
      chatroom_wxid_->::Wxid::Clear();
    }
    if (has_avatar()) {
      GOOGLE_DCHECK(avatar_ != NULL);
      avatar_->::create_chatroom_resp_chatroom_avatar::Clear();
    }
  }
  member_cnt_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool create_chatroom_resp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:create_chatroom_resp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .create_chatroom_resp.result res = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_res()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 member_cnt = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_member_cnt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &member_cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .create_chatroom_resp.member_info member = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_member()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Wxid chatroom_wxid = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chatroom_wxid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .create_chatroom_resp.chatroom_avatar avatar = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_avatar()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:create_chatroom_resp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:create_chatroom_resp)
  return false;
#undef DO_
}

void create_chatroom_resp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:create_chatroom_resp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .create_chatroom_resp.result res = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->res_, output);
  }

  // optional int32 member_cnt = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->member_cnt(), output);
  }

  // repeated .create_chatroom_resp.member_info member = 6;
  for (unsigned int i = 0, n = this->member_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->member(i), output);
  }

  // optional .Wxid chatroom_wxid = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->chatroom_wxid_, output);
  }

  // optional .create_chatroom_resp.chatroom_avatar avatar = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->avatar_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:create_chatroom_resp)
}

::google::protobuf::uint8* create_chatroom_resp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:create_chatroom_resp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .create_chatroom_resp.result res = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->res_, deterministic, target);
  }

  // optional int32 member_cnt = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->member_cnt(), target);
  }

  // repeated .create_chatroom_resp.member_info member = 6;
  for (unsigned int i = 0, n = this->member_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->member(i), deterministic, target);
  }

  // optional .Wxid chatroom_wxid = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->chatroom_wxid_, deterministic, target);
  }

  // optional .create_chatroom_resp.chatroom_avatar avatar = 8;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->avatar_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:create_chatroom_resp)
  return target;
}

size_t create_chatroom_resp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:create_chatroom_resp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .create_chatroom_resp.member_info member = 6;
  {
    unsigned int count = this->member_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->member(i));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional .create_chatroom_resp.result res = 1;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->res_);
    }

    // optional .Wxid chatroom_wxid = 7;
    if (has_chatroom_wxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->chatroom_wxid_);
    }

    // optional .create_chatroom_resp.chatroom_avatar avatar = 8;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->avatar_);
    }

    // optional int32 member_cnt = 5;
    if (has_member_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->member_cnt());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void create_chatroom_resp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:create_chatroom_resp)
  GOOGLE_DCHECK_NE(&from, this);
  const create_chatroom_resp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const create_chatroom_resp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:create_chatroom_resp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:create_chatroom_resp)
    MergeFrom(*source);
  }
}

void create_chatroom_resp::MergeFrom(const create_chatroom_resp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:create_chatroom_resp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  member_.MergeFrom(from.member_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_res()->::create_chatroom_resp_result::MergeFrom(from.res());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_chatroom_wxid()->::Wxid::MergeFrom(from.chatroom_wxid());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_avatar()->::create_chatroom_resp_chatroom_avatar::MergeFrom(from.avatar());
    }
    if (cached_has_bits & 0x00000008u) {
      member_cnt_ = from.member_cnt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void create_chatroom_resp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:create_chatroom_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void create_chatroom_resp::CopyFrom(const create_chatroom_resp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:create_chatroom_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool create_chatroom_resp::IsInitialized() const {
  return true;
}

void create_chatroom_resp::Swap(create_chatroom_resp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void create_chatroom_resp::InternalSwap(create_chatroom_resp* other) {
  member_.InternalSwap(&other->member_);
  std::swap(res_, other->res_);
  std::swap(chatroom_wxid_, other->chatroom_wxid_);
  std::swap(avatar_, other->avatar_);
  std::swap(member_cnt_, other->member_cnt_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata create_chatroom_resp::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// create_chatroom_resp

// optional .create_chatroom_resp.result res = 1;
bool create_chatroom_resp::has_res() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void create_chatroom_resp::set_has_res() {
  _has_bits_[0] |= 0x00000001u;
}
void create_chatroom_resp::clear_has_res() {
  _has_bits_[0] &= ~0x00000001u;
}
void create_chatroom_resp::clear_res() {
  if (res_ != NULL) res_->::create_chatroom_resp_result::Clear();
  clear_has_res();
}
const ::create_chatroom_resp_result& create_chatroom_resp::res() const {
  // @@protoc_insertion_point(field_get:create_chatroom_resp.res)
  return res_ != NULL ? *res_
                         : *::create_chatroom_resp_result::internal_default_instance();
}
::create_chatroom_resp_result* create_chatroom_resp::mutable_res() {
  set_has_res();
  if (res_ == NULL) {
    res_ = new ::create_chatroom_resp_result;
  }
  // @@protoc_insertion_point(field_mutable:create_chatroom_resp.res)
  return res_;
}
::create_chatroom_resp_result* create_chatroom_resp::release_res() {
  // @@protoc_insertion_point(field_release:create_chatroom_resp.res)
  clear_has_res();
  ::create_chatroom_resp_result* temp = res_;
  res_ = NULL;
  return temp;
}
void create_chatroom_resp::set_allocated_res(::create_chatroom_resp_result* res) {
  delete res_;
  res_ = res;
  if (res) {
    set_has_res();
  } else {
    clear_has_res();
  }
  // @@protoc_insertion_point(field_set_allocated:create_chatroom_resp.res)
}

// optional int32 member_cnt = 5;
bool create_chatroom_resp::has_member_cnt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void create_chatroom_resp::set_has_member_cnt() {
  _has_bits_[0] |= 0x00000008u;
}
void create_chatroom_resp::clear_has_member_cnt() {
  _has_bits_[0] &= ~0x00000008u;
}
void create_chatroom_resp::clear_member_cnt() {
  member_cnt_ = 0;
  clear_has_member_cnt();
}
::google::protobuf::int32 create_chatroom_resp::member_cnt() const {
  // @@protoc_insertion_point(field_get:create_chatroom_resp.member_cnt)
  return member_cnt_;
}
void create_chatroom_resp::set_member_cnt(::google::protobuf::int32 value) {
  set_has_member_cnt();
  member_cnt_ = value;
  // @@protoc_insertion_point(field_set:create_chatroom_resp.member_cnt)
}

// repeated .create_chatroom_resp.member_info member = 6;
int create_chatroom_resp::member_size() const {
  return member_.size();
}
void create_chatroom_resp::clear_member() {
  member_.Clear();
}
const ::create_chatroom_resp_member_info& create_chatroom_resp::member(int index) const {
  // @@protoc_insertion_point(field_get:create_chatroom_resp.member)
  return member_.Get(index);
}
::create_chatroom_resp_member_info* create_chatroom_resp::mutable_member(int index) {
  // @@protoc_insertion_point(field_mutable:create_chatroom_resp.member)
  return member_.Mutable(index);
}
::create_chatroom_resp_member_info* create_chatroom_resp::add_member() {
  // @@protoc_insertion_point(field_add:create_chatroom_resp.member)
  return member_.Add();
}
::google::protobuf::RepeatedPtrField< ::create_chatroom_resp_member_info >*
create_chatroom_resp::mutable_member() {
  // @@protoc_insertion_point(field_mutable_list:create_chatroom_resp.member)
  return &member_;
}
const ::google::protobuf::RepeatedPtrField< ::create_chatroom_resp_member_info >&
create_chatroom_resp::member() const {
  // @@protoc_insertion_point(field_list:create_chatroom_resp.member)
  return member_;
}

// optional .Wxid chatroom_wxid = 7;
bool create_chatroom_resp::has_chatroom_wxid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void create_chatroom_resp::set_has_chatroom_wxid() {
  _has_bits_[0] |= 0x00000002u;
}
void create_chatroom_resp::clear_has_chatroom_wxid() {
  _has_bits_[0] &= ~0x00000002u;
}
void create_chatroom_resp::clear_chatroom_wxid() {
  if (chatroom_wxid_ != NULL) chatroom_wxid_->::Wxid::Clear();
  clear_has_chatroom_wxid();
}
const ::Wxid& create_chatroom_resp::chatroom_wxid() const {
  // @@protoc_insertion_point(field_get:create_chatroom_resp.chatroom_wxid)
  return chatroom_wxid_ != NULL ? *chatroom_wxid_
                         : *::Wxid::internal_default_instance();
}
::Wxid* create_chatroom_resp::mutable_chatroom_wxid() {
  set_has_chatroom_wxid();
  if (chatroom_wxid_ == NULL) {
    chatroom_wxid_ = new ::Wxid;
  }
  // @@protoc_insertion_point(field_mutable:create_chatroom_resp.chatroom_wxid)
  return chatroom_wxid_;
}
::Wxid* create_chatroom_resp::release_chatroom_wxid() {
  // @@protoc_insertion_point(field_release:create_chatroom_resp.chatroom_wxid)
  clear_has_chatroom_wxid();
  ::Wxid* temp = chatroom_wxid_;
  chatroom_wxid_ = NULL;
  return temp;
}
void create_chatroom_resp::set_allocated_chatroom_wxid(::Wxid* chatroom_wxid) {
  delete chatroom_wxid_;
  chatroom_wxid_ = chatroom_wxid;
  if (chatroom_wxid) {
    set_has_chatroom_wxid();
  } else {
    clear_has_chatroom_wxid();
  }
  // @@protoc_insertion_point(field_set_allocated:create_chatroom_resp.chatroom_wxid)
}

// optional .create_chatroom_resp.chatroom_avatar avatar = 8;
bool create_chatroom_resp::has_avatar() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void create_chatroom_resp::set_has_avatar() {
  _has_bits_[0] |= 0x00000004u;
}
void create_chatroom_resp::clear_has_avatar() {
  _has_bits_[0] &= ~0x00000004u;
}
void create_chatroom_resp::clear_avatar() {
  if (avatar_ != NULL) avatar_->::create_chatroom_resp_chatroom_avatar::Clear();
  clear_has_avatar();
}
const ::create_chatroom_resp_chatroom_avatar& create_chatroom_resp::avatar() const {
  // @@protoc_insertion_point(field_get:create_chatroom_resp.avatar)
  return avatar_ != NULL ? *avatar_
                         : *::create_chatroom_resp_chatroom_avatar::internal_default_instance();
}
::create_chatroom_resp_chatroom_avatar* create_chatroom_resp::mutable_avatar() {
  set_has_avatar();
  if (avatar_ == NULL) {
    avatar_ = new ::create_chatroom_resp_chatroom_avatar;
  }
  // @@protoc_insertion_point(field_mutable:create_chatroom_resp.avatar)
  return avatar_;
}
::create_chatroom_resp_chatroom_avatar* create_chatroom_resp::release_avatar() {
  // @@protoc_insertion_point(field_release:create_chatroom_resp.avatar)
  clear_has_avatar();
  ::create_chatroom_resp_chatroom_avatar* temp = avatar_;
  avatar_ = NULL;
  return temp;
}
void create_chatroom_resp::set_allocated_avatar(::create_chatroom_resp_chatroom_avatar* avatar) {
  delete avatar_;
  avatar_ = avatar;
  if (avatar) {
    set_has_avatar();
  } else {
    clear_has_avatar();
  }
  // @@protoc_insertion_point(field_set_allocated:create_chatroom_resp.avatar)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mm_facing_create_chatroom_req::kLoginFieldNumber;
const int mm_facing_create_chatroom_req::kOpCodeFieldNumber;
const int mm_facing_create_chatroom_req::kChatroomPwdFieldNumber;
const int mm_facing_create_chatroom_req::kLonFieldNumber;
const int mm_facing_create_chatroom_req::kLatFieldNumber;
const int mm_facing_create_chatroom_req::kTag6FieldNumber;
const int mm_facing_create_chatroom_req::kTag9FieldNumber;
const int mm_facing_create_chatroom_req::kTag10FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mm_facing_create_chatroom_req::mm_facing_create_chatroom_req()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mm_facing_create_chatroom_req)
}
mm_facing_create_chatroom_req::mm_facing_create_chatroom_req(const mm_facing_create_chatroom_req& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chatroom_pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_chatroom_pwd()) {
    chatroom_pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chatroom_pwd_);
  }
  tag10_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tag10()) {
    tag10_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag10_);
  }
  if (from.has_login()) {
    login_ = new ::LoginInfo(*from.login_);
  } else {
    login_ = NULL;
  }
  ::memcpy(&op_code_, &from.op_code_,
    reinterpret_cast<char*>(&tag9_) -
    reinterpret_cast<char*>(&op_code_) + sizeof(tag9_));
  // @@protoc_insertion_point(copy_constructor:mm_facing_create_chatroom_req)
}

void mm_facing_create_chatroom_req::SharedCtor() {
  _cached_size_ = 0;
  chatroom_pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag10_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&login_, 0, reinterpret_cast<char*>(&tag9_) -
    reinterpret_cast<char*>(&login_) + sizeof(tag9_));
}

mm_facing_create_chatroom_req::~mm_facing_create_chatroom_req() {
  // @@protoc_insertion_point(destructor:mm_facing_create_chatroom_req)
  SharedDtor();
}

void mm_facing_create_chatroom_req::SharedDtor() {
  chatroom_pwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag10_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete login_;
  }
}

void mm_facing_create_chatroom_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mm_facing_create_chatroom_req::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const mm_facing_create_chatroom_req& mm_facing_create_chatroom_req::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

mm_facing_create_chatroom_req* mm_facing_create_chatroom_req::New(::google::protobuf::Arena* arena) const {
  mm_facing_create_chatroom_req* n = new mm_facing_create_chatroom_req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void mm_facing_create_chatroom_req::Clear() {
// @@protoc_insertion_point(message_clear_start:mm_facing_create_chatroom_req)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_chatroom_pwd()) {
      GOOGLE_DCHECK(!chatroom_pwd_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*chatroom_pwd_.UnsafeRawStringPointer())->clear();
    }
    if (has_tag10()) {
      GOOGLE_DCHECK(!tag10_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tag10_.UnsafeRawStringPointer())->clear();
    }
    if (has_login()) {
      GOOGLE_DCHECK(login_ != NULL);
      login_->::LoginInfo::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 248u) {
    ::memset(&op_code_, 0, reinterpret_cast<char*>(&tag9_) -
      reinterpret_cast<char*>(&op_code_) + sizeof(tag9_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool mm_facing_create_chatroom_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mm_facing_create_chatroom_req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .LoginInfo login = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 op_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_op_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &op_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string chatroom_pwd = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chatroom_pwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->chatroom_pwd().data(), this->chatroom_pwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mm_facing_create_chatroom_req.chatroom_pwd");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float lon = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_lon();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float lat = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_lat();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tag6 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_tag6();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag6_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tag9 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_tag9();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag9_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string tag10 = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag10()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag10().data(), this->tag10().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mm_facing_create_chatroom_req.tag10");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mm_facing_create_chatroom_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mm_facing_create_chatroom_req)
  return false;
#undef DO_
}

void mm_facing_create_chatroom_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mm_facing_create_chatroom_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .LoginInfo login = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->login_, output);
  }

  // optional int32 op_code = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->op_code(), output);
  }

  // optional string chatroom_pwd = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chatroom_pwd().data(), this->chatroom_pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mm_facing_create_chatroom_req.chatroom_pwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->chatroom_pwd(), output);
  }

  // optional float lon = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->lon(), output);
  }

  // optional float lat = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->lat(), output);
  }

  // optional int32 tag6 = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->tag6(), output);
  }

  // optional int32 tag9 = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->tag9(), output);
  }

  // optional string tag10 = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag10().data(), this->tag10().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mm_facing_create_chatroom_req.tag10");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->tag10(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mm_facing_create_chatroom_req)
}

::google::protobuf::uint8* mm_facing_create_chatroom_req::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mm_facing_create_chatroom_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .LoginInfo login = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->login_, deterministic, target);
  }

  // optional int32 op_code = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->op_code(), target);
  }

  // optional string chatroom_pwd = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chatroom_pwd().data(), this->chatroom_pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mm_facing_create_chatroom_req.chatroom_pwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->chatroom_pwd(), target);
  }

  // optional float lon = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->lon(), target);
  }

  // optional float lat = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->lat(), target);
  }

  // optional int32 tag6 = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->tag6(), target);
  }

  // optional int32 tag9 = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->tag9(), target);
  }

  // optional string tag10 = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag10().data(), this->tag10().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mm_facing_create_chatroom_req.tag10");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->tag10(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mm_facing_create_chatroom_req)
  return target;
}

size_t mm_facing_create_chatroom_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mm_facing_create_chatroom_req)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string chatroom_pwd = 3;
    if (has_chatroom_pwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chatroom_pwd());
    }

    // optional string tag10 = 10;
    if (has_tag10()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag10());
    }

    // optional .LoginInfo login = 1;
    if (has_login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->login_);
    }

    // optional int32 op_code = 2;
    if (has_op_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->op_code());
    }

    // optional float lon = 4;
    if (has_lon()) {
      total_size += 1 + 4;
    }

    // optional float lat = 5;
    if (has_lat()) {
      total_size += 1 + 4;
    }

    // optional int32 tag6 = 6;
    if (has_tag6()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag6());
    }

    // optional int32 tag9 = 9;
    if (has_tag9()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag9());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mm_facing_create_chatroom_req::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mm_facing_create_chatroom_req)
  GOOGLE_DCHECK_NE(&from, this);
  const mm_facing_create_chatroom_req* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const mm_facing_create_chatroom_req>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mm_facing_create_chatroom_req)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mm_facing_create_chatroom_req)
    MergeFrom(*source);
  }
}

void mm_facing_create_chatroom_req::MergeFrom(const mm_facing_create_chatroom_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mm_facing_create_chatroom_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_chatroom_pwd();
      chatroom_pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chatroom_pwd_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_tag10();
      tag10_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag10_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_login()->::LoginInfo::MergeFrom(from.login());
    }
    if (cached_has_bits & 0x00000008u) {
      op_code_ = from.op_code_;
    }
    if (cached_has_bits & 0x00000010u) {
      lon_ = from.lon_;
    }
    if (cached_has_bits & 0x00000020u) {
      lat_ = from.lat_;
    }
    if (cached_has_bits & 0x00000040u) {
      tag6_ = from.tag6_;
    }
    if (cached_has_bits & 0x00000080u) {
      tag9_ = from.tag9_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void mm_facing_create_chatroom_req::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mm_facing_create_chatroom_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mm_facing_create_chatroom_req::CopyFrom(const mm_facing_create_chatroom_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mm_facing_create_chatroom_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mm_facing_create_chatroom_req::IsInitialized() const {
  return true;
}

void mm_facing_create_chatroom_req::Swap(mm_facing_create_chatroom_req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mm_facing_create_chatroom_req::InternalSwap(mm_facing_create_chatroom_req* other) {
  chatroom_pwd_.Swap(&other->chatroom_pwd_);
  tag10_.Swap(&other->tag10_);
  std::swap(login_, other->login_);
  std::swap(op_code_, other->op_code_);
  std::swap(lon_, other->lon_);
  std::swap(lat_, other->lat_);
  std::swap(tag6_, other->tag6_);
  std::swap(tag9_, other->tag9_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata mm_facing_create_chatroom_req::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// mm_facing_create_chatroom_req

// optional .LoginInfo login = 1;
bool mm_facing_create_chatroom_req::has_login() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void mm_facing_create_chatroom_req::set_has_login() {
  _has_bits_[0] |= 0x00000004u;
}
void mm_facing_create_chatroom_req::clear_has_login() {
  _has_bits_[0] &= ~0x00000004u;
}
void mm_facing_create_chatroom_req::clear_login() {
  if (login_ != NULL) login_->::LoginInfo::Clear();
  clear_has_login();
}
const ::LoginInfo& mm_facing_create_chatroom_req::login() const {
  // @@protoc_insertion_point(field_get:mm_facing_create_chatroom_req.login)
  return login_ != NULL ? *login_
                         : *::LoginInfo::internal_default_instance();
}
::LoginInfo* mm_facing_create_chatroom_req::mutable_login() {
  set_has_login();
  if (login_ == NULL) {
    login_ = new ::LoginInfo;
  }
  // @@protoc_insertion_point(field_mutable:mm_facing_create_chatroom_req.login)
  return login_;
}
::LoginInfo* mm_facing_create_chatroom_req::release_login() {
  // @@protoc_insertion_point(field_release:mm_facing_create_chatroom_req.login)
  clear_has_login();
  ::LoginInfo* temp = login_;
  login_ = NULL;
  return temp;
}
void mm_facing_create_chatroom_req::set_allocated_login(::LoginInfo* login) {
  delete login_;
  login_ = login;
  if (login) {
    set_has_login();
  } else {
    clear_has_login();
  }
  // @@protoc_insertion_point(field_set_allocated:mm_facing_create_chatroom_req.login)
}

// optional int32 op_code = 2;
bool mm_facing_create_chatroom_req::has_op_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void mm_facing_create_chatroom_req::set_has_op_code() {
  _has_bits_[0] |= 0x00000008u;
}
void mm_facing_create_chatroom_req::clear_has_op_code() {
  _has_bits_[0] &= ~0x00000008u;
}
void mm_facing_create_chatroom_req::clear_op_code() {
  op_code_ = 0;
  clear_has_op_code();
}
::google::protobuf::int32 mm_facing_create_chatroom_req::op_code() const {
  // @@protoc_insertion_point(field_get:mm_facing_create_chatroom_req.op_code)
  return op_code_;
}
void mm_facing_create_chatroom_req::set_op_code(::google::protobuf::int32 value) {
  set_has_op_code();
  op_code_ = value;
  // @@protoc_insertion_point(field_set:mm_facing_create_chatroom_req.op_code)
}

// optional string chatroom_pwd = 3;
bool mm_facing_create_chatroom_req::has_chatroom_pwd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void mm_facing_create_chatroom_req::set_has_chatroom_pwd() {
  _has_bits_[0] |= 0x00000001u;
}
void mm_facing_create_chatroom_req::clear_has_chatroom_pwd() {
  _has_bits_[0] &= ~0x00000001u;
}
void mm_facing_create_chatroom_req::clear_chatroom_pwd() {
  chatroom_pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chatroom_pwd();
}
const ::std::string& mm_facing_create_chatroom_req::chatroom_pwd() const {
  // @@protoc_insertion_point(field_get:mm_facing_create_chatroom_req.chatroom_pwd)
  return chatroom_pwd_.GetNoArena();
}
void mm_facing_create_chatroom_req::set_chatroom_pwd(const ::std::string& value) {
  set_has_chatroom_pwd();
  chatroom_pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mm_facing_create_chatroom_req.chatroom_pwd)
}
#if LANG_CXX11
void mm_facing_create_chatroom_req::set_chatroom_pwd(::std::string&& value) {
  set_has_chatroom_pwd();
  chatroom_pwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mm_facing_create_chatroom_req.chatroom_pwd)
}
#endif
void mm_facing_create_chatroom_req::set_chatroom_pwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_chatroom_pwd();
  chatroom_pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mm_facing_create_chatroom_req.chatroom_pwd)
}
void mm_facing_create_chatroom_req::set_chatroom_pwd(const char* value, size_t size) {
  set_has_chatroom_pwd();
  chatroom_pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mm_facing_create_chatroom_req.chatroom_pwd)
}
::std::string* mm_facing_create_chatroom_req::mutable_chatroom_pwd() {
  set_has_chatroom_pwd();
  // @@protoc_insertion_point(field_mutable:mm_facing_create_chatroom_req.chatroom_pwd)
  return chatroom_pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* mm_facing_create_chatroom_req::release_chatroom_pwd() {
  // @@protoc_insertion_point(field_release:mm_facing_create_chatroom_req.chatroom_pwd)
  clear_has_chatroom_pwd();
  return chatroom_pwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void mm_facing_create_chatroom_req::set_allocated_chatroom_pwd(::std::string* chatroom_pwd) {
  if (chatroom_pwd != NULL) {
    set_has_chatroom_pwd();
  } else {
    clear_has_chatroom_pwd();
  }
  chatroom_pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chatroom_pwd);
  // @@protoc_insertion_point(field_set_allocated:mm_facing_create_chatroom_req.chatroom_pwd)
}

// optional float lon = 4;
bool mm_facing_create_chatroom_req::has_lon() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void mm_facing_create_chatroom_req::set_has_lon() {
  _has_bits_[0] |= 0x00000010u;
}
void mm_facing_create_chatroom_req::clear_has_lon() {
  _has_bits_[0] &= ~0x00000010u;
}
void mm_facing_create_chatroom_req::clear_lon() {
  lon_ = 0;
  clear_has_lon();
}
float mm_facing_create_chatroom_req::lon() const {
  // @@protoc_insertion_point(field_get:mm_facing_create_chatroom_req.lon)
  return lon_;
}
void mm_facing_create_chatroom_req::set_lon(float value) {
  set_has_lon();
  lon_ = value;
  // @@protoc_insertion_point(field_set:mm_facing_create_chatroom_req.lon)
}

// optional float lat = 5;
bool mm_facing_create_chatroom_req::has_lat() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void mm_facing_create_chatroom_req::set_has_lat() {
  _has_bits_[0] |= 0x00000020u;
}
void mm_facing_create_chatroom_req::clear_has_lat() {
  _has_bits_[0] &= ~0x00000020u;
}
void mm_facing_create_chatroom_req::clear_lat() {
  lat_ = 0;
  clear_has_lat();
}
float mm_facing_create_chatroom_req::lat() const {
  // @@protoc_insertion_point(field_get:mm_facing_create_chatroom_req.lat)
  return lat_;
}
void mm_facing_create_chatroom_req::set_lat(float value) {
  set_has_lat();
  lat_ = value;
  // @@protoc_insertion_point(field_set:mm_facing_create_chatroom_req.lat)
}

// optional int32 tag6 = 6;
bool mm_facing_create_chatroom_req::has_tag6() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void mm_facing_create_chatroom_req::set_has_tag6() {
  _has_bits_[0] |= 0x00000040u;
}
void mm_facing_create_chatroom_req::clear_has_tag6() {
  _has_bits_[0] &= ~0x00000040u;
}
void mm_facing_create_chatroom_req::clear_tag6() {
  tag6_ = 0;
  clear_has_tag6();
}
::google::protobuf::int32 mm_facing_create_chatroom_req::tag6() const {
  // @@protoc_insertion_point(field_get:mm_facing_create_chatroom_req.tag6)
  return tag6_;
}
void mm_facing_create_chatroom_req::set_tag6(::google::protobuf::int32 value) {
  set_has_tag6();
  tag6_ = value;
  // @@protoc_insertion_point(field_set:mm_facing_create_chatroom_req.tag6)
}

// optional int32 tag9 = 9;
bool mm_facing_create_chatroom_req::has_tag9() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void mm_facing_create_chatroom_req::set_has_tag9() {
  _has_bits_[0] |= 0x00000080u;
}
void mm_facing_create_chatroom_req::clear_has_tag9() {
  _has_bits_[0] &= ~0x00000080u;
}
void mm_facing_create_chatroom_req::clear_tag9() {
  tag9_ = 0;
  clear_has_tag9();
}
::google::protobuf::int32 mm_facing_create_chatroom_req::tag9() const {
  // @@protoc_insertion_point(field_get:mm_facing_create_chatroom_req.tag9)
  return tag9_;
}
void mm_facing_create_chatroom_req::set_tag9(::google::protobuf::int32 value) {
  set_has_tag9();
  tag9_ = value;
  // @@protoc_insertion_point(field_set:mm_facing_create_chatroom_req.tag9)
}

// optional string tag10 = 10;
bool mm_facing_create_chatroom_req::has_tag10() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void mm_facing_create_chatroom_req::set_has_tag10() {
  _has_bits_[0] |= 0x00000002u;
}
void mm_facing_create_chatroom_req::clear_has_tag10() {
  _has_bits_[0] &= ~0x00000002u;
}
void mm_facing_create_chatroom_req::clear_tag10() {
  tag10_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tag10();
}
const ::std::string& mm_facing_create_chatroom_req::tag10() const {
  // @@protoc_insertion_point(field_get:mm_facing_create_chatroom_req.tag10)
  return tag10_.GetNoArena();
}
void mm_facing_create_chatroom_req::set_tag10(const ::std::string& value) {
  set_has_tag10();
  tag10_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mm_facing_create_chatroom_req.tag10)
}
#if LANG_CXX11
void mm_facing_create_chatroom_req::set_tag10(::std::string&& value) {
  set_has_tag10();
  tag10_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mm_facing_create_chatroom_req.tag10)
}
#endif
void mm_facing_create_chatroom_req::set_tag10(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tag10();
  tag10_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mm_facing_create_chatroom_req.tag10)
}
void mm_facing_create_chatroom_req::set_tag10(const char* value, size_t size) {
  set_has_tag10();
  tag10_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mm_facing_create_chatroom_req.tag10)
}
::std::string* mm_facing_create_chatroom_req::mutable_tag10() {
  set_has_tag10();
  // @@protoc_insertion_point(field_mutable:mm_facing_create_chatroom_req.tag10)
  return tag10_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* mm_facing_create_chatroom_req::release_tag10() {
  // @@protoc_insertion_point(field_release:mm_facing_create_chatroom_req.tag10)
  clear_has_tag10();
  return tag10_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void mm_facing_create_chatroom_req::set_allocated_tag10(::std::string* tag10) {
  if (tag10 != NULL) {
    set_has_tag10();
  } else {
    clear_has_tag10();
  }
  tag10_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag10);
  // @@protoc_insertion_point(field_set_allocated:mm_facing_create_chatroom_req.tag10)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mm_facing_create_chatroom_resp_result_err_msg::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mm_facing_create_chatroom_resp_result_err_msg::mm_facing_create_chatroom_resp_result_err_msg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mm_facing_create_chatroom_resp.result.err_msg)
}
mm_facing_create_chatroom_resp_result_err_msg::mm_facing_create_chatroom_resp_result_err_msg(const mm_facing_create_chatroom_resp_result_err_msg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_msg()) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:mm_facing_create_chatroom_resp.result.err_msg)
}

void mm_facing_create_chatroom_resp_result_err_msg::SharedCtor() {
  _cached_size_ = 0;
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

mm_facing_create_chatroom_resp_result_err_msg::~mm_facing_create_chatroom_resp_result_err_msg() {
  // @@protoc_insertion_point(destructor:mm_facing_create_chatroom_resp.result.err_msg)
  SharedDtor();
}

void mm_facing_create_chatroom_resp_result_err_msg::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mm_facing_create_chatroom_resp_result_err_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mm_facing_create_chatroom_resp_result_err_msg::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const mm_facing_create_chatroom_resp_result_err_msg& mm_facing_create_chatroom_resp_result_err_msg::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

mm_facing_create_chatroom_resp_result_err_msg* mm_facing_create_chatroom_resp_result_err_msg::New(::google::protobuf::Arena* arena) const {
  mm_facing_create_chatroom_resp_result_err_msg* n = new mm_facing_create_chatroom_resp_result_err_msg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void mm_facing_create_chatroom_resp_result_err_msg::Clear() {
// @@protoc_insertion_point(message_clear_start:mm_facing_create_chatroom_resp.result.err_msg)
  if (has_msg()) {
    GOOGLE_DCHECK(!msg_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*msg_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool mm_facing_create_chatroom_resp_result_err_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mm_facing_create_chatroom_resp.result.err_msg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msg = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mm_facing_create_chatroom_resp.result.err_msg.msg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mm_facing_create_chatroom_resp.result.err_msg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mm_facing_create_chatroom_resp.result.err_msg)
  return false;
#undef DO_
}

void mm_facing_create_chatroom_resp_result_err_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mm_facing_create_chatroom_resp.result.err_msg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string msg = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mm_facing_create_chatroom_resp.result.err_msg.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mm_facing_create_chatroom_resp.result.err_msg)
}

::google::protobuf::uint8* mm_facing_create_chatroom_resp_result_err_msg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mm_facing_create_chatroom_resp.result.err_msg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string msg = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mm_facing_create_chatroom_resp.result.err_msg.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mm_facing_create_chatroom_resp.result.err_msg)
  return target;
}

size_t mm_facing_create_chatroom_resp_result_err_msg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mm_facing_create_chatroom_resp.result.err_msg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string msg = 1;
  if (has_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mm_facing_create_chatroom_resp_result_err_msg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mm_facing_create_chatroom_resp.result.err_msg)
  GOOGLE_DCHECK_NE(&from, this);
  const mm_facing_create_chatroom_resp_result_err_msg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const mm_facing_create_chatroom_resp_result_err_msg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mm_facing_create_chatroom_resp.result.err_msg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mm_facing_create_chatroom_resp.result.err_msg)
    MergeFrom(*source);
  }
}

void mm_facing_create_chatroom_resp_result_err_msg::MergeFrom(const mm_facing_create_chatroom_resp_result_err_msg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mm_facing_create_chatroom_resp.result.err_msg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_msg()) {
    set_has_msg();
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void mm_facing_create_chatroom_resp_result_err_msg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mm_facing_create_chatroom_resp.result.err_msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mm_facing_create_chatroom_resp_result_err_msg::CopyFrom(const mm_facing_create_chatroom_resp_result_err_msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mm_facing_create_chatroom_resp.result.err_msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mm_facing_create_chatroom_resp_result_err_msg::IsInitialized() const {
  return true;
}

void mm_facing_create_chatroom_resp_result_err_msg::Swap(mm_facing_create_chatroom_resp_result_err_msg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mm_facing_create_chatroom_resp_result_err_msg::InternalSwap(mm_facing_create_chatroom_resp_result_err_msg* other) {
  msg_.Swap(&other->msg_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata mm_facing_create_chatroom_resp_result_err_msg::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// mm_facing_create_chatroom_resp_result_err_msg

// optional string msg = 1;
bool mm_facing_create_chatroom_resp_result_err_msg::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void mm_facing_create_chatroom_resp_result_err_msg::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
void mm_facing_create_chatroom_resp_result_err_msg::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
void mm_facing_create_chatroom_resp_result_err_msg::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
const ::std::string& mm_facing_create_chatroom_resp_result_err_msg::msg() const {
  // @@protoc_insertion_point(field_get:mm_facing_create_chatroom_resp.result.err_msg.msg)
  return msg_.GetNoArena();
}
void mm_facing_create_chatroom_resp_result_err_msg::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mm_facing_create_chatroom_resp.result.err_msg.msg)
}
#if LANG_CXX11
void mm_facing_create_chatroom_resp_result_err_msg::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mm_facing_create_chatroom_resp.result.err_msg.msg)
}
#endif
void mm_facing_create_chatroom_resp_result_err_msg::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mm_facing_create_chatroom_resp.result.err_msg.msg)
}
void mm_facing_create_chatroom_resp_result_err_msg::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mm_facing_create_chatroom_resp.result.err_msg.msg)
}
::std::string* mm_facing_create_chatroom_resp_result_err_msg::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:mm_facing_create_chatroom_resp.result.err_msg.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* mm_facing_create_chatroom_resp_result_err_msg::release_msg() {
  // @@protoc_insertion_point(field_release:mm_facing_create_chatroom_resp.result.err_msg.msg)
  clear_has_msg();
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void mm_facing_create_chatroom_resp_result_err_msg::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:mm_facing_create_chatroom_resp.result.err_msg.msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mm_facing_create_chatroom_resp_result::kCodeFieldNumber;
const int mm_facing_create_chatroom_resp_result::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mm_facing_create_chatroom_resp_result::mm_facing_create_chatroom_resp_result()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mm_facing_create_chatroom_resp.result)
}
mm_facing_create_chatroom_resp_result::mm_facing_create_chatroom_resp_result(const mm_facing_create_chatroom_resp_result& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_msg()) {
    msg_ = new ::mm_facing_create_chatroom_resp_result_err_msg(*from.msg_);
  } else {
    msg_ = NULL;
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:mm_facing_create_chatroom_resp.result)
}

void mm_facing_create_chatroom_resp_result::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&msg_, 0, reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&msg_) + sizeof(code_));
}

mm_facing_create_chatroom_resp_result::~mm_facing_create_chatroom_resp_result() {
  // @@protoc_insertion_point(destructor:mm_facing_create_chatroom_resp.result)
  SharedDtor();
}

void mm_facing_create_chatroom_resp_result::SharedDtor() {
  if (this != internal_default_instance()) {
    delete msg_;
  }
}

void mm_facing_create_chatroom_resp_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mm_facing_create_chatroom_resp_result::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const mm_facing_create_chatroom_resp_result& mm_facing_create_chatroom_resp_result::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

mm_facing_create_chatroom_resp_result* mm_facing_create_chatroom_resp_result::New(::google::protobuf::Arena* arena) const {
  mm_facing_create_chatroom_resp_result* n = new mm_facing_create_chatroom_resp_result;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void mm_facing_create_chatroom_resp_result::Clear() {
// @@protoc_insertion_point(message_clear_start:mm_facing_create_chatroom_resp.result)
  if (has_msg()) {
    GOOGLE_DCHECK(msg_ != NULL);
    msg_->::mm_facing_create_chatroom_resp_result_err_msg::Clear();
  }
  code_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool mm_facing_create_chatroom_resp_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mm_facing_create_chatroom_resp.result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mm_facing_create_chatroom_resp.result.err_msg msg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mm_facing_create_chatroom_resp.result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mm_facing_create_chatroom_resp.result)
  return false;
#undef DO_
}

void mm_facing_create_chatroom_resp_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mm_facing_create_chatroom_resp.result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 code = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // optional .mm_facing_create_chatroom_resp.result.err_msg msg = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->msg_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mm_facing_create_chatroom_resp.result)
}

::google::protobuf::uint8* mm_facing_create_chatroom_resp_result::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mm_facing_create_chatroom_resp.result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // optional .mm_facing_create_chatroom_resp.result.err_msg msg = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->msg_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mm_facing_create_chatroom_resp.result)
  return target;
}

size_t mm_facing_create_chatroom_resp_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mm_facing_create_chatroom_resp.result)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .mm_facing_create_chatroom_resp.result.err_msg msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->msg_);
    }

    // optional int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mm_facing_create_chatroom_resp_result::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mm_facing_create_chatroom_resp.result)
  GOOGLE_DCHECK_NE(&from, this);
  const mm_facing_create_chatroom_resp_result* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const mm_facing_create_chatroom_resp_result>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mm_facing_create_chatroom_resp.result)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mm_facing_create_chatroom_resp.result)
    MergeFrom(*source);
  }
}

void mm_facing_create_chatroom_resp_result::MergeFrom(const mm_facing_create_chatroom_resp_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mm_facing_create_chatroom_resp.result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_msg()->::mm_facing_create_chatroom_resp_result_err_msg::MergeFrom(from.msg());
    }
    if (cached_has_bits & 0x00000002u) {
      code_ = from.code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void mm_facing_create_chatroom_resp_result::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mm_facing_create_chatroom_resp.result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mm_facing_create_chatroom_resp_result::CopyFrom(const mm_facing_create_chatroom_resp_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mm_facing_create_chatroom_resp.result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mm_facing_create_chatroom_resp_result::IsInitialized() const {
  return true;
}

void mm_facing_create_chatroom_resp_result::Swap(mm_facing_create_chatroom_resp_result* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mm_facing_create_chatroom_resp_result::InternalSwap(mm_facing_create_chatroom_resp_result* other) {
  std::swap(msg_, other->msg_);
  std::swap(code_, other->code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata mm_facing_create_chatroom_resp_result::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// mm_facing_create_chatroom_resp_result

// optional int32 code = 1;
bool mm_facing_create_chatroom_resp_result::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void mm_facing_create_chatroom_resp_result::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
void mm_facing_create_chatroom_resp_result::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void mm_facing_create_chatroom_resp_result::clear_code() {
  code_ = 0;
  clear_has_code();
}
::google::protobuf::int32 mm_facing_create_chatroom_resp_result::code() const {
  // @@protoc_insertion_point(field_get:mm_facing_create_chatroom_resp.result.code)
  return code_;
}
void mm_facing_create_chatroom_resp_result::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:mm_facing_create_chatroom_resp.result.code)
}

// optional .mm_facing_create_chatroom_resp.result.err_msg msg = 2;
bool mm_facing_create_chatroom_resp_result::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void mm_facing_create_chatroom_resp_result::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
void mm_facing_create_chatroom_resp_result::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
void mm_facing_create_chatroom_resp_result::clear_msg() {
  if (msg_ != NULL) msg_->::mm_facing_create_chatroom_resp_result_err_msg::Clear();
  clear_has_msg();
}
const ::mm_facing_create_chatroom_resp_result_err_msg& mm_facing_create_chatroom_resp_result::msg() const {
  // @@protoc_insertion_point(field_get:mm_facing_create_chatroom_resp.result.msg)
  return msg_ != NULL ? *msg_
                         : *::mm_facing_create_chatroom_resp_result_err_msg::internal_default_instance();
}
::mm_facing_create_chatroom_resp_result_err_msg* mm_facing_create_chatroom_resp_result::mutable_msg() {
  set_has_msg();
  if (msg_ == NULL) {
    msg_ = new ::mm_facing_create_chatroom_resp_result_err_msg;
  }
  // @@protoc_insertion_point(field_mutable:mm_facing_create_chatroom_resp.result.msg)
  return msg_;
}
::mm_facing_create_chatroom_resp_result_err_msg* mm_facing_create_chatroom_resp_result::release_msg() {
  // @@protoc_insertion_point(field_release:mm_facing_create_chatroom_resp.result.msg)
  clear_has_msg();
  ::mm_facing_create_chatroom_resp_result_err_msg* temp = msg_;
  msg_ = NULL;
  return temp;
}
void mm_facing_create_chatroom_resp_result::set_allocated_msg(::mm_facing_create_chatroom_resp_result_err_msg* msg) {
  delete msg_;
  msg_ = msg;
  if (msg) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  // @@protoc_insertion_point(field_set_allocated:mm_facing_create_chatroom_resp.result.msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mm_facing_create_chatroom_resp_member_info::kMsgFieldNumber;
const int mm_facing_create_chatroom_resp_member_info::kNickNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mm_facing_create_chatroom_resp_member_info::mm_facing_create_chatroom_resp_member_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mm_facing_create_chatroom_resp.member_info)
}
mm_facing_create_chatroom_resp_member_info::mm_facing_create_chatroom_resp_member_info(const mm_facing_create_chatroom_resp_member_info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_msg()) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  nick_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nick_name()) {
    nick_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nick_name_);
  }
  // @@protoc_insertion_point(copy_constructor:mm_facing_create_chatroom_resp.member_info)
}

void mm_facing_create_chatroom_resp_member_info::SharedCtor() {
  _cached_size_ = 0;
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nick_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

mm_facing_create_chatroom_resp_member_info::~mm_facing_create_chatroom_resp_member_info() {
  // @@protoc_insertion_point(destructor:mm_facing_create_chatroom_resp.member_info)
  SharedDtor();
}

void mm_facing_create_chatroom_resp_member_info::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nick_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void mm_facing_create_chatroom_resp_member_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mm_facing_create_chatroom_resp_member_info::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const mm_facing_create_chatroom_resp_member_info& mm_facing_create_chatroom_resp_member_info::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

mm_facing_create_chatroom_resp_member_info* mm_facing_create_chatroom_resp_member_info::New(::google::protobuf::Arena* arena) const {
  mm_facing_create_chatroom_resp_member_info* n = new mm_facing_create_chatroom_resp_member_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void mm_facing_create_chatroom_resp_member_info::Clear() {
// @@protoc_insertion_point(message_clear_start:mm_facing_create_chatroom_resp.member_info)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_msg()) {
      GOOGLE_DCHECK(!msg_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*msg_.UnsafeRawStringPointer())->clear();
    }
    if (has_nick_name()) {
      GOOGLE_DCHECK(!nick_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*nick_name_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool mm_facing_create_chatroom_resp_member_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mm_facing_create_chatroom_resp.member_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msg = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mm_facing_create_chatroom_resp.member_info.msg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string nick_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nick_name().data(), this->nick_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mm_facing_create_chatroom_resp.member_info.nick_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mm_facing_create_chatroom_resp.member_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mm_facing_create_chatroom_resp.member_info)
  return false;
#undef DO_
}

void mm_facing_create_chatroom_resp_member_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mm_facing_create_chatroom_resp.member_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string msg = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mm_facing_create_chatroom_resp.member_info.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->msg(), output);
  }

  // optional string nick_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mm_facing_create_chatroom_resp.member_info.nick_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->nick_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mm_facing_create_chatroom_resp.member_info)
}

::google::protobuf::uint8* mm_facing_create_chatroom_resp_member_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mm_facing_create_chatroom_resp.member_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string msg = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mm_facing_create_chatroom_resp.member_info.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg(), target);
  }

  // optional string nick_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mm_facing_create_chatroom_resp.member_info.nick_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nick_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mm_facing_create_chatroom_resp.member_info)
  return target;
}

size_t mm_facing_create_chatroom_resp_member_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mm_facing_create_chatroom_resp.member_info)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string msg = 1;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

    // optional string nick_name = 3;
    if (has_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick_name());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mm_facing_create_chatroom_resp_member_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mm_facing_create_chatroom_resp.member_info)
  GOOGLE_DCHECK_NE(&from, this);
  const mm_facing_create_chatroom_resp_member_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const mm_facing_create_chatroom_resp_member_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mm_facing_create_chatroom_resp.member_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mm_facing_create_chatroom_resp.member_info)
    MergeFrom(*source);
  }
}

void mm_facing_create_chatroom_resp_member_info::MergeFrom(const mm_facing_create_chatroom_resp_member_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mm_facing_create_chatroom_resp.member_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_msg();
      msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_nick_name();
      nick_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nick_name_);
    }
  }
}

void mm_facing_create_chatroom_resp_member_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mm_facing_create_chatroom_resp.member_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mm_facing_create_chatroom_resp_member_info::CopyFrom(const mm_facing_create_chatroom_resp_member_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mm_facing_create_chatroom_resp.member_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mm_facing_create_chatroom_resp_member_info::IsInitialized() const {
  return true;
}

void mm_facing_create_chatroom_resp_member_info::Swap(mm_facing_create_chatroom_resp_member_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mm_facing_create_chatroom_resp_member_info::InternalSwap(mm_facing_create_chatroom_resp_member_info* other) {
  msg_.Swap(&other->msg_);
  nick_name_.Swap(&other->nick_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata mm_facing_create_chatroom_resp_member_info::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// mm_facing_create_chatroom_resp_member_info

// optional string msg = 1;
bool mm_facing_create_chatroom_resp_member_info::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void mm_facing_create_chatroom_resp_member_info::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
void mm_facing_create_chatroom_resp_member_info::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
void mm_facing_create_chatroom_resp_member_info::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
const ::std::string& mm_facing_create_chatroom_resp_member_info::msg() const {
  // @@protoc_insertion_point(field_get:mm_facing_create_chatroom_resp.member_info.msg)
  return msg_.GetNoArena();
}
void mm_facing_create_chatroom_resp_member_info::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mm_facing_create_chatroom_resp.member_info.msg)
}
#if LANG_CXX11
void mm_facing_create_chatroom_resp_member_info::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mm_facing_create_chatroom_resp.member_info.msg)
}
#endif
void mm_facing_create_chatroom_resp_member_info::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mm_facing_create_chatroom_resp.member_info.msg)
}
void mm_facing_create_chatroom_resp_member_info::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mm_facing_create_chatroom_resp.member_info.msg)
}
::std::string* mm_facing_create_chatroom_resp_member_info::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:mm_facing_create_chatroom_resp.member_info.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* mm_facing_create_chatroom_resp_member_info::release_msg() {
  // @@protoc_insertion_point(field_release:mm_facing_create_chatroom_resp.member_info.msg)
  clear_has_msg();
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void mm_facing_create_chatroom_resp_member_info::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:mm_facing_create_chatroom_resp.member_info.msg)
}

// optional string nick_name = 3;
bool mm_facing_create_chatroom_resp_member_info::has_nick_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void mm_facing_create_chatroom_resp_member_info::set_has_nick_name() {
  _has_bits_[0] |= 0x00000002u;
}
void mm_facing_create_chatroom_resp_member_info::clear_has_nick_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void mm_facing_create_chatroom_resp_member_info::clear_nick_name() {
  nick_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nick_name();
}
const ::std::string& mm_facing_create_chatroom_resp_member_info::nick_name() const {
  // @@protoc_insertion_point(field_get:mm_facing_create_chatroom_resp.member_info.nick_name)
  return nick_name_.GetNoArena();
}
void mm_facing_create_chatroom_resp_member_info::set_nick_name(const ::std::string& value) {
  set_has_nick_name();
  nick_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mm_facing_create_chatroom_resp.member_info.nick_name)
}
#if LANG_CXX11
void mm_facing_create_chatroom_resp_member_info::set_nick_name(::std::string&& value) {
  set_has_nick_name();
  nick_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mm_facing_create_chatroom_resp.member_info.nick_name)
}
#endif
void mm_facing_create_chatroom_resp_member_info::set_nick_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nick_name();
  nick_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mm_facing_create_chatroom_resp.member_info.nick_name)
}
void mm_facing_create_chatroom_resp_member_info::set_nick_name(const char* value, size_t size) {
  set_has_nick_name();
  nick_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mm_facing_create_chatroom_resp.member_info.nick_name)
}
::std::string* mm_facing_create_chatroom_resp_member_info::mutable_nick_name() {
  set_has_nick_name();
  // @@protoc_insertion_point(field_mutable:mm_facing_create_chatroom_resp.member_info.nick_name)
  return nick_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* mm_facing_create_chatroom_resp_member_info::release_nick_name() {
  // @@protoc_insertion_point(field_release:mm_facing_create_chatroom_resp.member_info.nick_name)
  clear_has_nick_name();
  return nick_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void mm_facing_create_chatroom_resp_member_info::set_allocated_nick_name(::std::string* nick_name) {
  if (nick_name != NULL) {
    set_has_nick_name();
  } else {
    clear_has_nick_name();
  }
  nick_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick_name);
  // @@protoc_insertion_point(field_set_allocated:mm_facing_create_chatroom_resp.member_info.nick_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mm_facing_create_chatroom_resp::kResFieldNumber;
const int mm_facing_create_chatroom_resp::kMemberCntFieldNumber;
const int mm_facing_create_chatroom_resp::kMemberFieldNumber;
const int mm_facing_create_chatroom_resp::kWxidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mm_facing_create_chatroom_resp::mm_facing_create_chatroom_resp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mm_facing_create_chatroom_resp)
}
mm_facing_create_chatroom_resp::mm_facing_create_chatroom_resp(const mm_facing_create_chatroom_resp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      member_(from.member_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  wxid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_wxid()) {
    wxid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wxid_);
  }
  if (from.has_res()) {
    res_ = new ::mm_facing_create_chatroom_resp_result(*from.res_);
  } else {
    res_ = NULL;
  }
  member_cnt_ = from.member_cnt_;
  // @@protoc_insertion_point(copy_constructor:mm_facing_create_chatroom_resp)
}

void mm_facing_create_chatroom_resp::SharedCtor() {
  _cached_size_ = 0;
  wxid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&res_, 0, reinterpret_cast<char*>(&member_cnt_) -
    reinterpret_cast<char*>(&res_) + sizeof(member_cnt_));
}

mm_facing_create_chatroom_resp::~mm_facing_create_chatroom_resp() {
  // @@protoc_insertion_point(destructor:mm_facing_create_chatroom_resp)
  SharedDtor();
}

void mm_facing_create_chatroom_resp::SharedDtor() {
  wxid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete res_;
  }
}

void mm_facing_create_chatroom_resp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mm_facing_create_chatroom_resp::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const mm_facing_create_chatroom_resp& mm_facing_create_chatroom_resp::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

mm_facing_create_chatroom_resp* mm_facing_create_chatroom_resp::New(::google::protobuf::Arena* arena) const {
  mm_facing_create_chatroom_resp* n = new mm_facing_create_chatroom_resp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void mm_facing_create_chatroom_resp::Clear() {
// @@protoc_insertion_point(message_clear_start:mm_facing_create_chatroom_resp)
  member_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_wxid()) {
      GOOGLE_DCHECK(!wxid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*wxid_.UnsafeRawStringPointer())->clear();
    }
    if (has_res()) {
      GOOGLE_DCHECK(res_ != NULL);
      res_->::mm_facing_create_chatroom_resp_result::Clear();
    }
  }
  member_cnt_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool mm_facing_create_chatroom_resp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mm_facing_create_chatroom_resp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mm_facing_create_chatroom_resp.result res = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_res()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 member_cnt = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_member_cnt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &member_cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mm_facing_create_chatroom_resp.member_info member = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_member()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string wxid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->wxid().data(), this->wxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mm_facing_create_chatroom_resp.wxid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mm_facing_create_chatroom_resp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mm_facing_create_chatroom_resp)
  return false;
#undef DO_
}

void mm_facing_create_chatroom_resp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mm_facing_create_chatroom_resp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mm_facing_create_chatroom_resp.result res = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->res_, output);
  }

  // optional int32 member_cnt = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->member_cnt(), output);
  }

  // repeated .mm_facing_create_chatroom_resp.member_info member = 4;
  for (unsigned int i = 0, n = this->member_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->member(i), output);
  }

  // optional string wxid = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wxid().data(), this->wxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mm_facing_create_chatroom_resp.wxid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->wxid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mm_facing_create_chatroom_resp)
}

::google::protobuf::uint8* mm_facing_create_chatroom_resp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mm_facing_create_chatroom_resp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mm_facing_create_chatroom_resp.result res = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->res_, deterministic, target);
  }

  // optional int32 member_cnt = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->member_cnt(), target);
  }

  // repeated .mm_facing_create_chatroom_resp.member_info member = 4;
  for (unsigned int i = 0, n = this->member_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->member(i), deterministic, target);
  }

  // optional string wxid = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wxid().data(), this->wxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mm_facing_create_chatroom_resp.wxid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->wxid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mm_facing_create_chatroom_resp)
  return target;
}

size_t mm_facing_create_chatroom_resp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mm_facing_create_chatroom_resp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .mm_facing_create_chatroom_resp.member_info member = 4;
  {
    unsigned int count = this->member_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->member(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string wxid = 5;
    if (has_wxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wxid());
    }

    // optional .mm_facing_create_chatroom_resp.result res = 1;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->res_);
    }

    // optional int32 member_cnt = 3;
    if (has_member_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->member_cnt());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mm_facing_create_chatroom_resp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mm_facing_create_chatroom_resp)
  GOOGLE_DCHECK_NE(&from, this);
  const mm_facing_create_chatroom_resp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const mm_facing_create_chatroom_resp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mm_facing_create_chatroom_resp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mm_facing_create_chatroom_resp)
    MergeFrom(*source);
  }
}

void mm_facing_create_chatroom_resp::MergeFrom(const mm_facing_create_chatroom_resp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mm_facing_create_chatroom_resp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  member_.MergeFrom(from.member_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_wxid();
      wxid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wxid_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_res()->::mm_facing_create_chatroom_resp_result::MergeFrom(from.res());
    }
    if (cached_has_bits & 0x00000004u) {
      member_cnt_ = from.member_cnt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void mm_facing_create_chatroom_resp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mm_facing_create_chatroom_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mm_facing_create_chatroom_resp::CopyFrom(const mm_facing_create_chatroom_resp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mm_facing_create_chatroom_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mm_facing_create_chatroom_resp::IsInitialized() const {
  return true;
}

void mm_facing_create_chatroom_resp::Swap(mm_facing_create_chatroom_resp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mm_facing_create_chatroom_resp::InternalSwap(mm_facing_create_chatroom_resp* other) {
  member_.InternalSwap(&other->member_);
  wxid_.Swap(&other->wxid_);
  std::swap(res_, other->res_);
  std::swap(member_cnt_, other->member_cnt_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata mm_facing_create_chatroom_resp::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// mm_facing_create_chatroom_resp

// optional .mm_facing_create_chatroom_resp.result res = 1;
bool mm_facing_create_chatroom_resp::has_res() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void mm_facing_create_chatroom_resp::set_has_res() {
  _has_bits_[0] |= 0x00000002u;
}
void mm_facing_create_chatroom_resp::clear_has_res() {
  _has_bits_[0] &= ~0x00000002u;
}
void mm_facing_create_chatroom_resp::clear_res() {
  if (res_ != NULL) res_->::mm_facing_create_chatroom_resp_result::Clear();
  clear_has_res();
}
const ::mm_facing_create_chatroom_resp_result& mm_facing_create_chatroom_resp::res() const {
  // @@protoc_insertion_point(field_get:mm_facing_create_chatroom_resp.res)
  return res_ != NULL ? *res_
                         : *::mm_facing_create_chatroom_resp_result::internal_default_instance();
}
::mm_facing_create_chatroom_resp_result* mm_facing_create_chatroom_resp::mutable_res() {
  set_has_res();
  if (res_ == NULL) {
    res_ = new ::mm_facing_create_chatroom_resp_result;
  }
  // @@protoc_insertion_point(field_mutable:mm_facing_create_chatroom_resp.res)
  return res_;
}
::mm_facing_create_chatroom_resp_result* mm_facing_create_chatroom_resp::release_res() {
  // @@protoc_insertion_point(field_release:mm_facing_create_chatroom_resp.res)
  clear_has_res();
  ::mm_facing_create_chatroom_resp_result* temp = res_;
  res_ = NULL;
  return temp;
}
void mm_facing_create_chatroom_resp::set_allocated_res(::mm_facing_create_chatroom_resp_result* res) {
  delete res_;
  res_ = res;
  if (res) {
    set_has_res();
  } else {
    clear_has_res();
  }
  // @@protoc_insertion_point(field_set_allocated:mm_facing_create_chatroom_resp.res)
}

// optional int32 member_cnt = 3;
bool mm_facing_create_chatroom_resp::has_member_cnt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void mm_facing_create_chatroom_resp::set_has_member_cnt() {
  _has_bits_[0] |= 0x00000004u;
}
void mm_facing_create_chatroom_resp::clear_has_member_cnt() {
  _has_bits_[0] &= ~0x00000004u;
}
void mm_facing_create_chatroom_resp::clear_member_cnt() {
  member_cnt_ = 0;
  clear_has_member_cnt();
}
::google::protobuf::int32 mm_facing_create_chatroom_resp::member_cnt() const {
  // @@protoc_insertion_point(field_get:mm_facing_create_chatroom_resp.member_cnt)
  return member_cnt_;
}
void mm_facing_create_chatroom_resp::set_member_cnt(::google::protobuf::int32 value) {
  set_has_member_cnt();
  member_cnt_ = value;
  // @@protoc_insertion_point(field_set:mm_facing_create_chatroom_resp.member_cnt)
}

// repeated .mm_facing_create_chatroom_resp.member_info member = 4;
int mm_facing_create_chatroom_resp::member_size() const {
  return member_.size();
}
void mm_facing_create_chatroom_resp::clear_member() {
  member_.Clear();
}
const ::mm_facing_create_chatroom_resp_member_info& mm_facing_create_chatroom_resp::member(int index) const {
  // @@protoc_insertion_point(field_get:mm_facing_create_chatroom_resp.member)
  return member_.Get(index);
}
::mm_facing_create_chatroom_resp_member_info* mm_facing_create_chatroom_resp::mutable_member(int index) {
  // @@protoc_insertion_point(field_mutable:mm_facing_create_chatroom_resp.member)
  return member_.Mutable(index);
}
::mm_facing_create_chatroom_resp_member_info* mm_facing_create_chatroom_resp::add_member() {
  // @@protoc_insertion_point(field_add:mm_facing_create_chatroom_resp.member)
  return member_.Add();
}
::google::protobuf::RepeatedPtrField< ::mm_facing_create_chatroom_resp_member_info >*
mm_facing_create_chatroom_resp::mutable_member() {
  // @@protoc_insertion_point(field_mutable_list:mm_facing_create_chatroom_resp.member)
  return &member_;
}
const ::google::protobuf::RepeatedPtrField< ::mm_facing_create_chatroom_resp_member_info >&
mm_facing_create_chatroom_resp::member() const {
  // @@protoc_insertion_point(field_list:mm_facing_create_chatroom_resp.member)
  return member_;
}

// optional string wxid = 5;
bool mm_facing_create_chatroom_resp::has_wxid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void mm_facing_create_chatroom_resp::set_has_wxid() {
  _has_bits_[0] |= 0x00000001u;
}
void mm_facing_create_chatroom_resp::clear_has_wxid() {
  _has_bits_[0] &= ~0x00000001u;
}
void mm_facing_create_chatroom_resp::clear_wxid() {
  wxid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_wxid();
}
const ::std::string& mm_facing_create_chatroom_resp::wxid() const {
  // @@protoc_insertion_point(field_get:mm_facing_create_chatroom_resp.wxid)
  return wxid_.GetNoArena();
}
void mm_facing_create_chatroom_resp::set_wxid(const ::std::string& value) {
  set_has_wxid();
  wxid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mm_facing_create_chatroom_resp.wxid)
}
#if LANG_CXX11
void mm_facing_create_chatroom_resp::set_wxid(::std::string&& value) {
  set_has_wxid();
  wxid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mm_facing_create_chatroom_resp.wxid)
}
#endif
void mm_facing_create_chatroom_resp::set_wxid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_wxid();
  wxid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mm_facing_create_chatroom_resp.wxid)
}
void mm_facing_create_chatroom_resp::set_wxid(const char* value, size_t size) {
  set_has_wxid();
  wxid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mm_facing_create_chatroom_resp.wxid)
}
::std::string* mm_facing_create_chatroom_resp::mutable_wxid() {
  set_has_wxid();
  // @@protoc_insertion_point(field_mutable:mm_facing_create_chatroom_resp.wxid)
  return wxid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* mm_facing_create_chatroom_resp::release_wxid() {
  // @@protoc_insertion_point(field_release:mm_facing_create_chatroom_resp.wxid)
  clear_has_wxid();
  return wxid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void mm_facing_create_chatroom_resp::set_allocated_wxid(::std::string* wxid) {
  if (wxid != NULL) {
    set_has_wxid();
  } else {
    clear_has_wxid();
  }
  wxid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wxid);
  // @@protoc_insertion_point(field_set_allocated:mm_facing_create_chatroom_resp.wxid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int add_chatroom_member_req_member_info::kWxidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

add_chatroom_member_req_member_info::add_chatroom_member_req_member_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:add_chatroom_member_req.member_info)
}
add_chatroom_member_req_member_info::add_chatroom_member_req_member_info(const add_chatroom_member_req_member_info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_wxid()) {
    wxid_ = new ::Wxid(*from.wxid_);
  } else {
    wxid_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:add_chatroom_member_req.member_info)
}

void add_chatroom_member_req_member_info::SharedCtor() {
  _cached_size_ = 0;
  wxid_ = NULL;
}

add_chatroom_member_req_member_info::~add_chatroom_member_req_member_info() {
  // @@protoc_insertion_point(destructor:add_chatroom_member_req.member_info)
  SharedDtor();
}

void add_chatroom_member_req_member_info::SharedDtor() {
  if (this != internal_default_instance()) {
    delete wxid_;
  }
}

void add_chatroom_member_req_member_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* add_chatroom_member_req_member_info::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const add_chatroom_member_req_member_info& add_chatroom_member_req_member_info::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

add_chatroom_member_req_member_info* add_chatroom_member_req_member_info::New(::google::protobuf::Arena* arena) const {
  add_chatroom_member_req_member_info* n = new add_chatroom_member_req_member_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void add_chatroom_member_req_member_info::Clear() {
// @@protoc_insertion_point(message_clear_start:add_chatroom_member_req.member_info)
  if (has_wxid()) {
    GOOGLE_DCHECK(wxid_ != NULL);
    wxid_->::Wxid::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool add_chatroom_member_req_member_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:add_chatroom_member_req.member_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Wxid wxid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wxid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:add_chatroom_member_req.member_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:add_chatroom_member_req.member_info)
  return false;
#undef DO_
}

void add_chatroom_member_req_member_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:add_chatroom_member_req.member_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Wxid wxid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->wxid_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:add_chatroom_member_req.member_info)
}

::google::protobuf::uint8* add_chatroom_member_req_member_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:add_chatroom_member_req.member_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Wxid wxid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->wxid_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:add_chatroom_member_req.member_info)
  return target;
}

size_t add_chatroom_member_req_member_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:add_chatroom_member_req.member_info)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .Wxid wxid = 1;
  if (has_wxid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->wxid_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void add_chatroom_member_req_member_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:add_chatroom_member_req.member_info)
  GOOGLE_DCHECK_NE(&from, this);
  const add_chatroom_member_req_member_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const add_chatroom_member_req_member_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:add_chatroom_member_req.member_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:add_chatroom_member_req.member_info)
    MergeFrom(*source);
  }
}

void add_chatroom_member_req_member_info::MergeFrom(const add_chatroom_member_req_member_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:add_chatroom_member_req.member_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_wxid()) {
    mutable_wxid()->::Wxid::MergeFrom(from.wxid());
  }
}

void add_chatroom_member_req_member_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:add_chatroom_member_req.member_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void add_chatroom_member_req_member_info::CopyFrom(const add_chatroom_member_req_member_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:add_chatroom_member_req.member_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool add_chatroom_member_req_member_info::IsInitialized() const {
  return true;
}

void add_chatroom_member_req_member_info::Swap(add_chatroom_member_req_member_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void add_chatroom_member_req_member_info::InternalSwap(add_chatroom_member_req_member_info* other) {
  std::swap(wxid_, other->wxid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata add_chatroom_member_req_member_info::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// add_chatroom_member_req_member_info

// optional .Wxid wxid = 1;
bool add_chatroom_member_req_member_info::has_wxid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void add_chatroom_member_req_member_info::set_has_wxid() {
  _has_bits_[0] |= 0x00000001u;
}
void add_chatroom_member_req_member_info::clear_has_wxid() {
  _has_bits_[0] &= ~0x00000001u;
}
void add_chatroom_member_req_member_info::clear_wxid() {
  if (wxid_ != NULL) wxid_->::Wxid::Clear();
  clear_has_wxid();
}
const ::Wxid& add_chatroom_member_req_member_info::wxid() const {
  // @@protoc_insertion_point(field_get:add_chatroom_member_req.member_info.wxid)
  return wxid_ != NULL ? *wxid_
                         : *::Wxid::internal_default_instance();
}
::Wxid* add_chatroom_member_req_member_info::mutable_wxid() {
  set_has_wxid();
  if (wxid_ == NULL) {
    wxid_ = new ::Wxid;
  }
  // @@protoc_insertion_point(field_mutable:add_chatroom_member_req.member_info.wxid)
  return wxid_;
}
::Wxid* add_chatroom_member_req_member_info::release_wxid() {
  // @@protoc_insertion_point(field_release:add_chatroom_member_req.member_info.wxid)
  clear_has_wxid();
  ::Wxid* temp = wxid_;
  wxid_ = NULL;
  return temp;
}
void add_chatroom_member_req_member_info::set_allocated_wxid(::Wxid* wxid) {
  delete wxid_;
  wxid_ = wxid;
  if (wxid) {
    set_has_wxid();
  } else {
    clear_has_wxid();
  }
  // @@protoc_insertion_point(field_set_allocated:add_chatroom_member_req.member_info.wxid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int add_chatroom_member_req_chatroom_info::kWxidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

add_chatroom_member_req_chatroom_info::add_chatroom_member_req_chatroom_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:add_chatroom_member_req.chatroom_info)
}
add_chatroom_member_req_chatroom_info::add_chatroom_member_req_chatroom_info(const add_chatroom_member_req_chatroom_info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  wxid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_wxid()) {
    wxid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wxid_);
  }
  // @@protoc_insertion_point(copy_constructor:add_chatroom_member_req.chatroom_info)
}

void add_chatroom_member_req_chatroom_info::SharedCtor() {
  _cached_size_ = 0;
  wxid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

add_chatroom_member_req_chatroom_info::~add_chatroom_member_req_chatroom_info() {
  // @@protoc_insertion_point(destructor:add_chatroom_member_req.chatroom_info)
  SharedDtor();
}

void add_chatroom_member_req_chatroom_info::SharedDtor() {
  wxid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void add_chatroom_member_req_chatroom_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* add_chatroom_member_req_chatroom_info::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const add_chatroom_member_req_chatroom_info& add_chatroom_member_req_chatroom_info::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

add_chatroom_member_req_chatroom_info* add_chatroom_member_req_chatroom_info::New(::google::protobuf::Arena* arena) const {
  add_chatroom_member_req_chatroom_info* n = new add_chatroom_member_req_chatroom_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void add_chatroom_member_req_chatroom_info::Clear() {
// @@protoc_insertion_point(message_clear_start:add_chatroom_member_req.chatroom_info)
  if (has_wxid()) {
    GOOGLE_DCHECK(!wxid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*wxid_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool add_chatroom_member_req_chatroom_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:add_chatroom_member_req.chatroom_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string wxid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->wxid().data(), this->wxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "add_chatroom_member_req.chatroom_info.wxid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:add_chatroom_member_req.chatroom_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:add_chatroom_member_req.chatroom_info)
  return false;
#undef DO_
}

void add_chatroom_member_req_chatroom_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:add_chatroom_member_req.chatroom_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string wxid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wxid().data(), this->wxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "add_chatroom_member_req.chatroom_info.wxid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->wxid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:add_chatroom_member_req.chatroom_info)
}

::google::protobuf::uint8* add_chatroom_member_req_chatroom_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:add_chatroom_member_req.chatroom_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string wxid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wxid().data(), this->wxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "add_chatroom_member_req.chatroom_info.wxid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->wxid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:add_chatroom_member_req.chatroom_info)
  return target;
}

size_t add_chatroom_member_req_chatroom_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:add_chatroom_member_req.chatroom_info)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string wxid = 1;
  if (has_wxid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->wxid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void add_chatroom_member_req_chatroom_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:add_chatroom_member_req.chatroom_info)
  GOOGLE_DCHECK_NE(&from, this);
  const add_chatroom_member_req_chatroom_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const add_chatroom_member_req_chatroom_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:add_chatroom_member_req.chatroom_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:add_chatroom_member_req.chatroom_info)
    MergeFrom(*source);
  }
}

void add_chatroom_member_req_chatroom_info::MergeFrom(const add_chatroom_member_req_chatroom_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:add_chatroom_member_req.chatroom_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_wxid()) {
    set_has_wxid();
    wxid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wxid_);
  }
}

void add_chatroom_member_req_chatroom_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:add_chatroom_member_req.chatroom_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void add_chatroom_member_req_chatroom_info::CopyFrom(const add_chatroom_member_req_chatroom_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:add_chatroom_member_req.chatroom_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool add_chatroom_member_req_chatroom_info::IsInitialized() const {
  return true;
}

void add_chatroom_member_req_chatroom_info::Swap(add_chatroom_member_req_chatroom_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void add_chatroom_member_req_chatroom_info::InternalSwap(add_chatroom_member_req_chatroom_info* other) {
  wxid_.Swap(&other->wxid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata add_chatroom_member_req_chatroom_info::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// add_chatroom_member_req_chatroom_info

// optional string wxid = 1;
bool add_chatroom_member_req_chatroom_info::has_wxid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void add_chatroom_member_req_chatroom_info::set_has_wxid() {
  _has_bits_[0] |= 0x00000001u;
}
void add_chatroom_member_req_chatroom_info::clear_has_wxid() {
  _has_bits_[0] &= ~0x00000001u;
}
void add_chatroom_member_req_chatroom_info::clear_wxid() {
  wxid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_wxid();
}
const ::std::string& add_chatroom_member_req_chatroom_info::wxid() const {
  // @@protoc_insertion_point(field_get:add_chatroom_member_req.chatroom_info.wxid)
  return wxid_.GetNoArena();
}
void add_chatroom_member_req_chatroom_info::set_wxid(const ::std::string& value) {
  set_has_wxid();
  wxid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:add_chatroom_member_req.chatroom_info.wxid)
}
#if LANG_CXX11
void add_chatroom_member_req_chatroom_info::set_wxid(::std::string&& value) {
  set_has_wxid();
  wxid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:add_chatroom_member_req.chatroom_info.wxid)
}
#endif
void add_chatroom_member_req_chatroom_info::set_wxid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_wxid();
  wxid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:add_chatroom_member_req.chatroom_info.wxid)
}
void add_chatroom_member_req_chatroom_info::set_wxid(const char* value, size_t size) {
  set_has_wxid();
  wxid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:add_chatroom_member_req.chatroom_info.wxid)
}
::std::string* add_chatroom_member_req_chatroom_info::mutable_wxid() {
  set_has_wxid();
  // @@protoc_insertion_point(field_mutable:add_chatroom_member_req.chatroom_info.wxid)
  return wxid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* add_chatroom_member_req_chatroom_info::release_wxid() {
  // @@protoc_insertion_point(field_release:add_chatroom_member_req.chatroom_info.wxid)
  clear_has_wxid();
  return wxid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void add_chatroom_member_req_chatroom_info::set_allocated_wxid(::std::string* wxid) {
  if (wxid != NULL) {
    set_has_wxid();
  } else {
    clear_has_wxid();
  }
  wxid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wxid);
  // @@protoc_insertion_point(field_set_allocated:add_chatroom_member_req.chatroom_info.wxid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int add_chatroom_member_req::kLoginFieldNumber;
const int add_chatroom_member_req::kMemberCntFieldNumber;
const int add_chatroom_member_req::kMemberFieldNumber;
const int add_chatroom_member_req::kChatroomWxidFieldNumber;
const int add_chatroom_member_req::kTag5FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

add_chatroom_member_req::add_chatroom_member_req()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:add_chatroom_member_req)
}
add_chatroom_member_req::add_chatroom_member_req(const add_chatroom_member_req& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      member_(from.member_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_login()) {
    login_ = new ::LoginInfo(*from.login_);
  } else {
    login_ = NULL;
  }
  if (from.has_chatroom_wxid()) {
    chatroom_wxid_ = new ::add_chatroom_member_req_chatroom_info(*from.chatroom_wxid_);
  } else {
    chatroom_wxid_ = NULL;
  }
  ::memcpy(&member_cnt_, &from.member_cnt_,
    reinterpret_cast<char*>(&tag5_) -
    reinterpret_cast<char*>(&member_cnt_) + sizeof(tag5_));
  // @@protoc_insertion_point(copy_constructor:add_chatroom_member_req)
}

void add_chatroom_member_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&login_, 0, reinterpret_cast<char*>(&tag5_) -
    reinterpret_cast<char*>(&login_) + sizeof(tag5_));
}

add_chatroom_member_req::~add_chatroom_member_req() {
  // @@protoc_insertion_point(destructor:add_chatroom_member_req)
  SharedDtor();
}

void add_chatroom_member_req::SharedDtor() {
  if (this != internal_default_instance()) {
    delete login_;
  }
  if (this != internal_default_instance()) {
    delete chatroom_wxid_;
  }
}

void add_chatroom_member_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* add_chatroom_member_req::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const add_chatroom_member_req& add_chatroom_member_req::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

add_chatroom_member_req* add_chatroom_member_req::New(::google::protobuf::Arena* arena) const {
  add_chatroom_member_req* n = new add_chatroom_member_req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void add_chatroom_member_req::Clear() {
// @@protoc_insertion_point(message_clear_start:add_chatroom_member_req)
  member_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_login()) {
      GOOGLE_DCHECK(login_ != NULL);
      login_->::LoginInfo::Clear();
    }
    if (has_chatroom_wxid()) {
      GOOGLE_DCHECK(chatroom_wxid_ != NULL);
      chatroom_wxid_->::add_chatroom_member_req_chatroom_info::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&member_cnt_, 0, reinterpret_cast<char*>(&tag5_) -
      reinterpret_cast<char*>(&member_cnt_) + sizeof(tag5_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool add_chatroom_member_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:add_chatroom_member_req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .LoginInfo login = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 member_cnt = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_member_cnt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &member_cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .add_chatroom_member_req.member_info member = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_member()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .add_chatroom_member_req.chatroom_info chatroom_wxid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chatroom_wxid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tag5 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_tag5();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:add_chatroom_member_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:add_chatroom_member_req)
  return false;
#undef DO_
}

void add_chatroom_member_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:add_chatroom_member_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .LoginInfo login = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->login_, output);
  }

  // optional int32 member_cnt = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->member_cnt(), output);
  }

  // repeated .add_chatroom_member_req.member_info member = 3;
  for (unsigned int i = 0, n = this->member_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->member(i), output);
  }

  // optional .add_chatroom_member_req.chatroom_info chatroom_wxid = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->chatroom_wxid_, output);
  }

  // optional int32 tag5 = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->tag5(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:add_chatroom_member_req)
}

::google::protobuf::uint8* add_chatroom_member_req::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:add_chatroom_member_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .LoginInfo login = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->login_, deterministic, target);
  }

  // optional int32 member_cnt = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->member_cnt(), target);
  }

  // repeated .add_chatroom_member_req.member_info member = 3;
  for (unsigned int i = 0, n = this->member_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->member(i), deterministic, target);
  }

  // optional .add_chatroom_member_req.chatroom_info chatroom_wxid = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->chatroom_wxid_, deterministic, target);
  }

  // optional int32 tag5 = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->tag5(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:add_chatroom_member_req)
  return target;
}

size_t add_chatroom_member_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:add_chatroom_member_req)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .add_chatroom_member_req.member_info member = 3;
  {
    unsigned int count = this->member_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->member(i));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional .LoginInfo login = 1;
    if (has_login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->login_);
    }

    // optional .add_chatroom_member_req.chatroom_info chatroom_wxid = 4;
    if (has_chatroom_wxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->chatroom_wxid_);
    }

    // optional int32 member_cnt = 2;
    if (has_member_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->member_cnt());
    }

    // optional int32 tag5 = 5;
    if (has_tag5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag5());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void add_chatroom_member_req::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:add_chatroom_member_req)
  GOOGLE_DCHECK_NE(&from, this);
  const add_chatroom_member_req* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const add_chatroom_member_req>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:add_chatroom_member_req)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:add_chatroom_member_req)
    MergeFrom(*source);
  }
}

void add_chatroom_member_req::MergeFrom(const add_chatroom_member_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:add_chatroom_member_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  member_.MergeFrom(from.member_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_login()->::LoginInfo::MergeFrom(from.login());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_chatroom_wxid()->::add_chatroom_member_req_chatroom_info::MergeFrom(from.chatroom_wxid());
    }
    if (cached_has_bits & 0x00000004u) {
      member_cnt_ = from.member_cnt_;
    }
    if (cached_has_bits & 0x00000008u) {
      tag5_ = from.tag5_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void add_chatroom_member_req::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:add_chatroom_member_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void add_chatroom_member_req::CopyFrom(const add_chatroom_member_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:add_chatroom_member_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool add_chatroom_member_req::IsInitialized() const {
  return true;
}

void add_chatroom_member_req::Swap(add_chatroom_member_req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void add_chatroom_member_req::InternalSwap(add_chatroom_member_req* other) {
  member_.InternalSwap(&other->member_);
  std::swap(login_, other->login_);
  std::swap(chatroom_wxid_, other->chatroom_wxid_);
  std::swap(member_cnt_, other->member_cnt_);
  std::swap(tag5_, other->tag5_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata add_chatroom_member_req::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// add_chatroom_member_req

// optional .LoginInfo login = 1;
bool add_chatroom_member_req::has_login() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void add_chatroom_member_req::set_has_login() {
  _has_bits_[0] |= 0x00000001u;
}
void add_chatroom_member_req::clear_has_login() {
  _has_bits_[0] &= ~0x00000001u;
}
void add_chatroom_member_req::clear_login() {
  if (login_ != NULL) login_->::LoginInfo::Clear();
  clear_has_login();
}
const ::LoginInfo& add_chatroom_member_req::login() const {
  // @@protoc_insertion_point(field_get:add_chatroom_member_req.login)
  return login_ != NULL ? *login_
                         : *::LoginInfo::internal_default_instance();
}
::LoginInfo* add_chatroom_member_req::mutable_login() {
  set_has_login();
  if (login_ == NULL) {
    login_ = new ::LoginInfo;
  }
  // @@protoc_insertion_point(field_mutable:add_chatroom_member_req.login)
  return login_;
}
::LoginInfo* add_chatroom_member_req::release_login() {
  // @@protoc_insertion_point(field_release:add_chatroom_member_req.login)
  clear_has_login();
  ::LoginInfo* temp = login_;
  login_ = NULL;
  return temp;
}
void add_chatroom_member_req::set_allocated_login(::LoginInfo* login) {
  delete login_;
  login_ = login;
  if (login) {
    set_has_login();
  } else {
    clear_has_login();
  }
  // @@protoc_insertion_point(field_set_allocated:add_chatroom_member_req.login)
}

// optional int32 member_cnt = 2;
bool add_chatroom_member_req::has_member_cnt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void add_chatroom_member_req::set_has_member_cnt() {
  _has_bits_[0] |= 0x00000004u;
}
void add_chatroom_member_req::clear_has_member_cnt() {
  _has_bits_[0] &= ~0x00000004u;
}
void add_chatroom_member_req::clear_member_cnt() {
  member_cnt_ = 0;
  clear_has_member_cnt();
}
::google::protobuf::int32 add_chatroom_member_req::member_cnt() const {
  // @@protoc_insertion_point(field_get:add_chatroom_member_req.member_cnt)
  return member_cnt_;
}
void add_chatroom_member_req::set_member_cnt(::google::protobuf::int32 value) {
  set_has_member_cnt();
  member_cnt_ = value;
  // @@protoc_insertion_point(field_set:add_chatroom_member_req.member_cnt)
}

// repeated .add_chatroom_member_req.member_info member = 3;
int add_chatroom_member_req::member_size() const {
  return member_.size();
}
void add_chatroom_member_req::clear_member() {
  member_.Clear();
}
const ::add_chatroom_member_req_member_info& add_chatroom_member_req::member(int index) const {
  // @@protoc_insertion_point(field_get:add_chatroom_member_req.member)
  return member_.Get(index);
}
::add_chatroom_member_req_member_info* add_chatroom_member_req::mutable_member(int index) {
  // @@protoc_insertion_point(field_mutable:add_chatroom_member_req.member)
  return member_.Mutable(index);
}
::add_chatroom_member_req_member_info* add_chatroom_member_req::add_member() {
  // @@protoc_insertion_point(field_add:add_chatroom_member_req.member)
  return member_.Add();
}
::google::protobuf::RepeatedPtrField< ::add_chatroom_member_req_member_info >*
add_chatroom_member_req::mutable_member() {
  // @@protoc_insertion_point(field_mutable_list:add_chatroom_member_req.member)
  return &member_;
}
const ::google::protobuf::RepeatedPtrField< ::add_chatroom_member_req_member_info >&
add_chatroom_member_req::member() const {
  // @@protoc_insertion_point(field_list:add_chatroom_member_req.member)
  return member_;
}

// optional .add_chatroom_member_req.chatroom_info chatroom_wxid = 4;
bool add_chatroom_member_req::has_chatroom_wxid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void add_chatroom_member_req::set_has_chatroom_wxid() {
  _has_bits_[0] |= 0x00000002u;
}
void add_chatroom_member_req::clear_has_chatroom_wxid() {
  _has_bits_[0] &= ~0x00000002u;
}
void add_chatroom_member_req::clear_chatroom_wxid() {
  if (chatroom_wxid_ != NULL) chatroom_wxid_->::add_chatroom_member_req_chatroom_info::Clear();
  clear_has_chatroom_wxid();
}
const ::add_chatroom_member_req_chatroom_info& add_chatroom_member_req::chatroom_wxid() const {
  // @@protoc_insertion_point(field_get:add_chatroom_member_req.chatroom_wxid)
  return chatroom_wxid_ != NULL ? *chatroom_wxid_
                         : *::add_chatroom_member_req_chatroom_info::internal_default_instance();
}
::add_chatroom_member_req_chatroom_info* add_chatroom_member_req::mutable_chatroom_wxid() {
  set_has_chatroom_wxid();
  if (chatroom_wxid_ == NULL) {
    chatroom_wxid_ = new ::add_chatroom_member_req_chatroom_info;
  }
  // @@protoc_insertion_point(field_mutable:add_chatroom_member_req.chatroom_wxid)
  return chatroom_wxid_;
}
::add_chatroom_member_req_chatroom_info* add_chatroom_member_req::release_chatroom_wxid() {
  // @@protoc_insertion_point(field_release:add_chatroom_member_req.chatroom_wxid)
  clear_has_chatroom_wxid();
  ::add_chatroom_member_req_chatroom_info* temp = chatroom_wxid_;
  chatroom_wxid_ = NULL;
  return temp;
}
void add_chatroom_member_req::set_allocated_chatroom_wxid(::add_chatroom_member_req_chatroom_info* chatroom_wxid) {
  delete chatroom_wxid_;
  chatroom_wxid_ = chatroom_wxid;
  if (chatroom_wxid) {
    set_has_chatroom_wxid();
  } else {
    clear_has_chatroom_wxid();
  }
  // @@protoc_insertion_point(field_set_allocated:add_chatroom_member_req.chatroom_wxid)
}

// optional int32 tag5 = 5;
bool add_chatroom_member_req::has_tag5() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void add_chatroom_member_req::set_has_tag5() {
  _has_bits_[0] |= 0x00000008u;
}
void add_chatroom_member_req::clear_has_tag5() {
  _has_bits_[0] &= ~0x00000008u;
}
void add_chatroom_member_req::clear_tag5() {
  tag5_ = 0;
  clear_has_tag5();
}
::google::protobuf::int32 add_chatroom_member_req::tag5() const {
  // @@protoc_insertion_point(field_get:add_chatroom_member_req.tag5)
  return tag5_;
}
void add_chatroom_member_req::set_tag5(::google::protobuf::int32 value) {
  set_has_tag5();
  tag5_ = value;
  // @@protoc_insertion_point(field_set:add_chatroom_member_req.tag5)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int add_chatroom_member_resp_result_err_msg::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

add_chatroom_member_resp_result_err_msg::add_chatroom_member_resp_result_err_msg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:add_chatroom_member_resp.result.err_msg)
}
add_chatroom_member_resp_result_err_msg::add_chatroom_member_resp_result_err_msg(const add_chatroom_member_resp_result_err_msg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_msg()) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:add_chatroom_member_resp.result.err_msg)
}

void add_chatroom_member_resp_result_err_msg::SharedCtor() {
  _cached_size_ = 0;
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

add_chatroom_member_resp_result_err_msg::~add_chatroom_member_resp_result_err_msg() {
  // @@protoc_insertion_point(destructor:add_chatroom_member_resp.result.err_msg)
  SharedDtor();
}

void add_chatroom_member_resp_result_err_msg::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void add_chatroom_member_resp_result_err_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* add_chatroom_member_resp_result_err_msg::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const add_chatroom_member_resp_result_err_msg& add_chatroom_member_resp_result_err_msg::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

add_chatroom_member_resp_result_err_msg* add_chatroom_member_resp_result_err_msg::New(::google::protobuf::Arena* arena) const {
  add_chatroom_member_resp_result_err_msg* n = new add_chatroom_member_resp_result_err_msg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void add_chatroom_member_resp_result_err_msg::Clear() {
// @@protoc_insertion_point(message_clear_start:add_chatroom_member_resp.result.err_msg)
  if (has_msg()) {
    GOOGLE_DCHECK(!msg_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*msg_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool add_chatroom_member_resp_result_err_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:add_chatroom_member_resp.result.err_msg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msg = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "add_chatroom_member_resp.result.err_msg.msg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:add_chatroom_member_resp.result.err_msg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:add_chatroom_member_resp.result.err_msg)
  return false;
#undef DO_
}

void add_chatroom_member_resp_result_err_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:add_chatroom_member_resp.result.err_msg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string msg = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "add_chatroom_member_resp.result.err_msg.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:add_chatroom_member_resp.result.err_msg)
}

::google::protobuf::uint8* add_chatroom_member_resp_result_err_msg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:add_chatroom_member_resp.result.err_msg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string msg = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "add_chatroom_member_resp.result.err_msg.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:add_chatroom_member_resp.result.err_msg)
  return target;
}

size_t add_chatroom_member_resp_result_err_msg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:add_chatroom_member_resp.result.err_msg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string msg = 1;
  if (has_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void add_chatroom_member_resp_result_err_msg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:add_chatroom_member_resp.result.err_msg)
  GOOGLE_DCHECK_NE(&from, this);
  const add_chatroom_member_resp_result_err_msg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const add_chatroom_member_resp_result_err_msg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:add_chatroom_member_resp.result.err_msg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:add_chatroom_member_resp.result.err_msg)
    MergeFrom(*source);
  }
}

void add_chatroom_member_resp_result_err_msg::MergeFrom(const add_chatroom_member_resp_result_err_msg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:add_chatroom_member_resp.result.err_msg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_msg()) {
    set_has_msg();
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void add_chatroom_member_resp_result_err_msg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:add_chatroom_member_resp.result.err_msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void add_chatroom_member_resp_result_err_msg::CopyFrom(const add_chatroom_member_resp_result_err_msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:add_chatroom_member_resp.result.err_msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool add_chatroom_member_resp_result_err_msg::IsInitialized() const {
  return true;
}

void add_chatroom_member_resp_result_err_msg::Swap(add_chatroom_member_resp_result_err_msg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void add_chatroom_member_resp_result_err_msg::InternalSwap(add_chatroom_member_resp_result_err_msg* other) {
  msg_.Swap(&other->msg_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata add_chatroom_member_resp_result_err_msg::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// add_chatroom_member_resp_result_err_msg

// optional string msg = 1;
bool add_chatroom_member_resp_result_err_msg::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void add_chatroom_member_resp_result_err_msg::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
void add_chatroom_member_resp_result_err_msg::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
void add_chatroom_member_resp_result_err_msg::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
const ::std::string& add_chatroom_member_resp_result_err_msg::msg() const {
  // @@protoc_insertion_point(field_get:add_chatroom_member_resp.result.err_msg.msg)
  return msg_.GetNoArena();
}
void add_chatroom_member_resp_result_err_msg::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:add_chatroom_member_resp.result.err_msg.msg)
}
#if LANG_CXX11
void add_chatroom_member_resp_result_err_msg::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:add_chatroom_member_resp.result.err_msg.msg)
}
#endif
void add_chatroom_member_resp_result_err_msg::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:add_chatroom_member_resp.result.err_msg.msg)
}
void add_chatroom_member_resp_result_err_msg::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:add_chatroom_member_resp.result.err_msg.msg)
}
::std::string* add_chatroom_member_resp_result_err_msg::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:add_chatroom_member_resp.result.err_msg.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* add_chatroom_member_resp_result_err_msg::release_msg() {
  // @@protoc_insertion_point(field_release:add_chatroom_member_resp.result.err_msg.msg)
  clear_has_msg();
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void add_chatroom_member_resp_result_err_msg::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:add_chatroom_member_resp.result.err_msg.msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int add_chatroom_member_resp_result::kCodeFieldNumber;
const int add_chatroom_member_resp_result::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

add_chatroom_member_resp_result::add_chatroom_member_resp_result()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:add_chatroom_member_resp.result)
}
add_chatroom_member_resp_result::add_chatroom_member_resp_result(const add_chatroom_member_resp_result& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_msg()) {
    msg_ = new ::add_chatroom_member_resp_result_err_msg(*from.msg_);
  } else {
    msg_ = NULL;
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:add_chatroom_member_resp.result)
}

void add_chatroom_member_resp_result::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&msg_, 0, reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&msg_) + sizeof(code_));
}

add_chatroom_member_resp_result::~add_chatroom_member_resp_result() {
  // @@protoc_insertion_point(destructor:add_chatroom_member_resp.result)
  SharedDtor();
}

void add_chatroom_member_resp_result::SharedDtor() {
  if (this != internal_default_instance()) {
    delete msg_;
  }
}

void add_chatroom_member_resp_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* add_chatroom_member_resp_result::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const add_chatroom_member_resp_result& add_chatroom_member_resp_result::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

add_chatroom_member_resp_result* add_chatroom_member_resp_result::New(::google::protobuf::Arena* arena) const {
  add_chatroom_member_resp_result* n = new add_chatroom_member_resp_result;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void add_chatroom_member_resp_result::Clear() {
// @@protoc_insertion_point(message_clear_start:add_chatroom_member_resp.result)
  if (has_msg()) {
    GOOGLE_DCHECK(msg_ != NULL);
    msg_->::add_chatroom_member_resp_result_err_msg::Clear();
  }
  code_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool add_chatroom_member_resp_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:add_chatroom_member_resp.result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .add_chatroom_member_resp.result.err_msg msg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:add_chatroom_member_resp.result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:add_chatroom_member_resp.result)
  return false;
#undef DO_
}

void add_chatroom_member_resp_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:add_chatroom_member_resp.result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 code = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // optional .add_chatroom_member_resp.result.err_msg msg = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->msg_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:add_chatroom_member_resp.result)
}

::google::protobuf::uint8* add_chatroom_member_resp_result::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:add_chatroom_member_resp.result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // optional .add_chatroom_member_resp.result.err_msg msg = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->msg_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:add_chatroom_member_resp.result)
  return target;
}

size_t add_chatroom_member_resp_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:add_chatroom_member_resp.result)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .add_chatroom_member_resp.result.err_msg msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->msg_);
    }

    // optional int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void add_chatroom_member_resp_result::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:add_chatroom_member_resp.result)
  GOOGLE_DCHECK_NE(&from, this);
  const add_chatroom_member_resp_result* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const add_chatroom_member_resp_result>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:add_chatroom_member_resp.result)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:add_chatroom_member_resp.result)
    MergeFrom(*source);
  }
}

void add_chatroom_member_resp_result::MergeFrom(const add_chatroom_member_resp_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:add_chatroom_member_resp.result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_msg()->::add_chatroom_member_resp_result_err_msg::MergeFrom(from.msg());
    }
    if (cached_has_bits & 0x00000002u) {
      code_ = from.code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void add_chatroom_member_resp_result::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:add_chatroom_member_resp.result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void add_chatroom_member_resp_result::CopyFrom(const add_chatroom_member_resp_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:add_chatroom_member_resp.result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool add_chatroom_member_resp_result::IsInitialized() const {
  return true;
}

void add_chatroom_member_resp_result::Swap(add_chatroom_member_resp_result* other) {
  if (other == this) return;
  InternalSwap(other);
}
void add_chatroom_member_resp_result::InternalSwap(add_chatroom_member_resp_result* other) {
  std::swap(msg_, other->msg_);
  std::swap(code_, other->code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata add_chatroom_member_resp_result::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// add_chatroom_member_resp_result

// optional int32 code = 1;
bool add_chatroom_member_resp_result::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void add_chatroom_member_resp_result::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
void add_chatroom_member_resp_result::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void add_chatroom_member_resp_result::clear_code() {
  code_ = 0;
  clear_has_code();
}
::google::protobuf::int32 add_chatroom_member_resp_result::code() const {
  // @@protoc_insertion_point(field_get:add_chatroom_member_resp.result.code)
  return code_;
}
void add_chatroom_member_resp_result::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:add_chatroom_member_resp.result.code)
}

// optional .add_chatroom_member_resp.result.err_msg msg = 2;
bool add_chatroom_member_resp_result::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void add_chatroom_member_resp_result::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
void add_chatroom_member_resp_result::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
void add_chatroom_member_resp_result::clear_msg() {
  if (msg_ != NULL) msg_->::add_chatroom_member_resp_result_err_msg::Clear();
  clear_has_msg();
}
const ::add_chatroom_member_resp_result_err_msg& add_chatroom_member_resp_result::msg() const {
  // @@protoc_insertion_point(field_get:add_chatroom_member_resp.result.msg)
  return msg_ != NULL ? *msg_
                         : *::add_chatroom_member_resp_result_err_msg::internal_default_instance();
}
::add_chatroom_member_resp_result_err_msg* add_chatroom_member_resp_result::mutable_msg() {
  set_has_msg();
  if (msg_ == NULL) {
    msg_ = new ::add_chatroom_member_resp_result_err_msg;
  }
  // @@protoc_insertion_point(field_mutable:add_chatroom_member_resp.result.msg)
  return msg_;
}
::add_chatroom_member_resp_result_err_msg* add_chatroom_member_resp_result::release_msg() {
  // @@protoc_insertion_point(field_release:add_chatroom_member_resp.result.msg)
  clear_has_msg();
  ::add_chatroom_member_resp_result_err_msg* temp = msg_;
  msg_ = NULL;
  return temp;
}
void add_chatroom_member_resp_result::set_allocated_msg(::add_chatroom_member_resp_result_err_msg* msg) {
  delete msg_;
  msg_ = msg;
  if (msg) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  // @@protoc_insertion_point(field_set_allocated:add_chatroom_member_resp.result.msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int add_chatroom_member_resp::kResFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

add_chatroom_member_resp::add_chatroom_member_resp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:add_chatroom_member_resp)
}
add_chatroom_member_resp::add_chatroom_member_resp(const add_chatroom_member_resp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_res()) {
    res_ = new ::add_chatroom_member_resp_result(*from.res_);
  } else {
    res_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:add_chatroom_member_resp)
}

void add_chatroom_member_resp::SharedCtor() {
  _cached_size_ = 0;
  res_ = NULL;
}

add_chatroom_member_resp::~add_chatroom_member_resp() {
  // @@protoc_insertion_point(destructor:add_chatroom_member_resp)
  SharedDtor();
}

void add_chatroom_member_resp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete res_;
  }
}

void add_chatroom_member_resp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* add_chatroom_member_resp::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const add_chatroom_member_resp& add_chatroom_member_resp::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

add_chatroom_member_resp* add_chatroom_member_resp::New(::google::protobuf::Arena* arena) const {
  add_chatroom_member_resp* n = new add_chatroom_member_resp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void add_chatroom_member_resp::Clear() {
// @@protoc_insertion_point(message_clear_start:add_chatroom_member_resp)
  if (has_res()) {
    GOOGLE_DCHECK(res_ != NULL);
    res_->::add_chatroom_member_resp_result::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool add_chatroom_member_resp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:add_chatroom_member_resp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .add_chatroom_member_resp.result res = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_res()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:add_chatroom_member_resp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:add_chatroom_member_resp)
  return false;
#undef DO_
}

void add_chatroom_member_resp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:add_chatroom_member_resp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .add_chatroom_member_resp.result res = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->res_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:add_chatroom_member_resp)
}

::google::protobuf::uint8* add_chatroom_member_resp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:add_chatroom_member_resp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .add_chatroom_member_resp.result res = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->res_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:add_chatroom_member_resp)
  return target;
}

size_t add_chatroom_member_resp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:add_chatroom_member_resp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .add_chatroom_member_resp.result res = 1;
  if (has_res()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->res_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void add_chatroom_member_resp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:add_chatroom_member_resp)
  GOOGLE_DCHECK_NE(&from, this);
  const add_chatroom_member_resp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const add_chatroom_member_resp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:add_chatroom_member_resp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:add_chatroom_member_resp)
    MergeFrom(*source);
  }
}

void add_chatroom_member_resp::MergeFrom(const add_chatroom_member_resp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:add_chatroom_member_resp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_res()) {
    mutable_res()->::add_chatroom_member_resp_result::MergeFrom(from.res());
  }
}

void add_chatroom_member_resp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:add_chatroom_member_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void add_chatroom_member_resp::CopyFrom(const add_chatroom_member_resp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:add_chatroom_member_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool add_chatroom_member_resp::IsInitialized() const {
  return true;
}

void add_chatroom_member_resp::Swap(add_chatroom_member_resp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void add_chatroom_member_resp::InternalSwap(add_chatroom_member_resp* other) {
  std::swap(res_, other->res_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata add_chatroom_member_resp::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// add_chatroom_member_resp

// optional .add_chatroom_member_resp.result res = 1;
bool add_chatroom_member_resp::has_res() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void add_chatroom_member_resp::set_has_res() {
  _has_bits_[0] |= 0x00000001u;
}
void add_chatroom_member_resp::clear_has_res() {
  _has_bits_[0] &= ~0x00000001u;
}
void add_chatroom_member_resp::clear_res() {
  if (res_ != NULL) res_->::add_chatroom_member_resp_result::Clear();
  clear_has_res();
}
const ::add_chatroom_member_resp_result& add_chatroom_member_resp::res() const {
  // @@protoc_insertion_point(field_get:add_chatroom_member_resp.res)
  return res_ != NULL ? *res_
                         : *::add_chatroom_member_resp_result::internal_default_instance();
}
::add_chatroom_member_resp_result* add_chatroom_member_resp::mutable_res() {
  set_has_res();
  if (res_ == NULL) {
    res_ = new ::add_chatroom_member_resp_result;
  }
  // @@protoc_insertion_point(field_mutable:add_chatroom_member_resp.res)
  return res_;
}
::add_chatroom_member_resp_result* add_chatroom_member_resp::release_res() {
  // @@protoc_insertion_point(field_release:add_chatroom_member_resp.res)
  clear_has_res();
  ::add_chatroom_member_resp_result* temp = res_;
  res_ = NULL;
  return temp;
}
void add_chatroom_member_resp::set_allocated_res(::add_chatroom_member_resp_result* res) {
  delete res_;
  res_ = res;
  if (res) {
    set_has_res();
  } else {
    clear_has_res();
  }
  // @@protoc_insertion_point(field_set_allocated:add_chatroom_member_resp.res)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int op_set_group_nick_name::kTag1FieldNumber;
const int op_set_group_nick_name::kTag2FieldNumber;
const int op_set_group_nick_name::kTag3FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

op_set_group_nick_name::op_set_group_nick_name()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:op_set_group_nick_name)
}
op_set_group_nick_name::op_set_group_nick_name(const op_set_group_nick_name& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tag1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tag1()) {
    tag1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag1_);
  }
  tag2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tag2()) {
    tag2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag2_);
  }
  tag3_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tag3()) {
    tag3_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag3_);
  }
  // @@protoc_insertion_point(copy_constructor:op_set_group_nick_name)
}

void op_set_group_nick_name::SharedCtor() {
  _cached_size_ = 0;
  tag1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag3_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

op_set_group_nick_name::~op_set_group_nick_name() {
  // @@protoc_insertion_point(destructor:op_set_group_nick_name)
  SharedDtor();
}

void op_set_group_nick_name::SharedDtor() {
  tag1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag2_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag3_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void op_set_group_nick_name::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* op_set_group_nick_name::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const op_set_group_nick_name& op_set_group_nick_name::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

op_set_group_nick_name* op_set_group_nick_name::New(::google::protobuf::Arena* arena) const {
  op_set_group_nick_name* n = new op_set_group_nick_name;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void op_set_group_nick_name::Clear() {
// @@protoc_insertion_point(message_clear_start:op_set_group_nick_name)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_tag1()) {
      GOOGLE_DCHECK(!tag1_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tag1_.UnsafeRawStringPointer())->clear();
    }
    if (has_tag2()) {
      GOOGLE_DCHECK(!tag2_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tag2_.UnsafeRawStringPointer())->clear();
    }
    if (has_tag3()) {
      GOOGLE_DCHECK(!tag3_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tag3_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool op_set_group_nick_name::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:op_set_group_nick_name)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string tag1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag1().data(), this->tag1().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "op_set_group_nick_name.tag1");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string tag2 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag2().data(), this->tag2().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "op_set_group_nick_name.tag2");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes tag3 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tag3()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:op_set_group_nick_name)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:op_set_group_nick_name)
  return false;
#undef DO_
}

void op_set_group_nick_name::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:op_set_group_nick_name)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string tag1 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag1().data(), this->tag1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "op_set_group_nick_name.tag1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tag1(), output);
  }

  // optional string tag2 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag2().data(), this->tag2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "op_set_group_nick_name.tag2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tag2(), output);
  }

  // optional bytes tag3 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->tag3(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:op_set_group_nick_name)
}

::google::protobuf::uint8* op_set_group_nick_name::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:op_set_group_nick_name)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string tag1 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag1().data(), this->tag1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "op_set_group_nick_name.tag1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tag1(), target);
  }

  // optional string tag2 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag2().data(), this->tag2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "op_set_group_nick_name.tag2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tag2(), target);
  }

  // optional bytes tag3 = 3;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->tag3(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:op_set_group_nick_name)
  return target;
}

size_t op_set_group_nick_name::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:op_set_group_nick_name)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string tag1 = 1;
    if (has_tag1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag1());
    }

    // optional string tag2 = 2;
    if (has_tag2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag2());
    }

    // optional bytes tag3 = 3;
    if (has_tag3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tag3());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void op_set_group_nick_name::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:op_set_group_nick_name)
  GOOGLE_DCHECK_NE(&from, this);
  const op_set_group_nick_name* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const op_set_group_nick_name>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:op_set_group_nick_name)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:op_set_group_nick_name)
    MergeFrom(*source);
  }
}

void op_set_group_nick_name::MergeFrom(const op_set_group_nick_name& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:op_set_group_nick_name)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_tag1();
      tag1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag1_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_tag2();
      tag2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag2_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_tag3();
      tag3_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag3_);
    }
  }
}

void op_set_group_nick_name::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:op_set_group_nick_name)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void op_set_group_nick_name::CopyFrom(const op_set_group_nick_name& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:op_set_group_nick_name)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool op_set_group_nick_name::IsInitialized() const {
  return true;
}

void op_set_group_nick_name::Swap(op_set_group_nick_name* other) {
  if (other == this) return;
  InternalSwap(other);
}
void op_set_group_nick_name::InternalSwap(op_set_group_nick_name* other) {
  tag1_.Swap(&other->tag1_);
  tag2_.Swap(&other->tag2_);
  tag3_.Swap(&other->tag3_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata op_set_group_nick_name::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// op_set_group_nick_name

// optional string tag1 = 1;
bool op_set_group_nick_name::has_tag1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void op_set_group_nick_name::set_has_tag1() {
  _has_bits_[0] |= 0x00000001u;
}
void op_set_group_nick_name::clear_has_tag1() {
  _has_bits_[0] &= ~0x00000001u;
}
void op_set_group_nick_name::clear_tag1() {
  tag1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tag1();
}
const ::std::string& op_set_group_nick_name::tag1() const {
  // @@protoc_insertion_point(field_get:op_set_group_nick_name.tag1)
  return tag1_.GetNoArena();
}
void op_set_group_nick_name::set_tag1(const ::std::string& value) {
  set_has_tag1();
  tag1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:op_set_group_nick_name.tag1)
}
#if LANG_CXX11
void op_set_group_nick_name::set_tag1(::std::string&& value) {
  set_has_tag1();
  tag1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:op_set_group_nick_name.tag1)
}
#endif
void op_set_group_nick_name::set_tag1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tag1();
  tag1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:op_set_group_nick_name.tag1)
}
void op_set_group_nick_name::set_tag1(const char* value, size_t size) {
  set_has_tag1();
  tag1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:op_set_group_nick_name.tag1)
}
::std::string* op_set_group_nick_name::mutable_tag1() {
  set_has_tag1();
  // @@protoc_insertion_point(field_mutable:op_set_group_nick_name.tag1)
  return tag1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* op_set_group_nick_name::release_tag1() {
  // @@protoc_insertion_point(field_release:op_set_group_nick_name.tag1)
  clear_has_tag1();
  return tag1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void op_set_group_nick_name::set_allocated_tag1(::std::string* tag1) {
  if (tag1 != NULL) {
    set_has_tag1();
  } else {
    clear_has_tag1();
  }
  tag1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag1);
  // @@protoc_insertion_point(field_set_allocated:op_set_group_nick_name.tag1)
}

// optional string tag2 = 2;
bool op_set_group_nick_name::has_tag2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void op_set_group_nick_name::set_has_tag2() {
  _has_bits_[0] |= 0x00000002u;
}
void op_set_group_nick_name::clear_has_tag2() {
  _has_bits_[0] &= ~0x00000002u;
}
void op_set_group_nick_name::clear_tag2() {
  tag2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tag2();
}
const ::std::string& op_set_group_nick_name::tag2() const {
  // @@protoc_insertion_point(field_get:op_set_group_nick_name.tag2)
  return tag2_.GetNoArena();
}
void op_set_group_nick_name::set_tag2(const ::std::string& value) {
  set_has_tag2();
  tag2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:op_set_group_nick_name.tag2)
}
#if LANG_CXX11
void op_set_group_nick_name::set_tag2(::std::string&& value) {
  set_has_tag2();
  tag2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:op_set_group_nick_name.tag2)
}
#endif
void op_set_group_nick_name::set_tag2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tag2();
  tag2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:op_set_group_nick_name.tag2)
}
void op_set_group_nick_name::set_tag2(const char* value, size_t size) {
  set_has_tag2();
  tag2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:op_set_group_nick_name.tag2)
}
::std::string* op_set_group_nick_name::mutable_tag2() {
  set_has_tag2();
  // @@protoc_insertion_point(field_mutable:op_set_group_nick_name.tag2)
  return tag2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* op_set_group_nick_name::release_tag2() {
  // @@protoc_insertion_point(field_release:op_set_group_nick_name.tag2)
  clear_has_tag2();
  return tag2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void op_set_group_nick_name::set_allocated_tag2(::std::string* tag2) {
  if (tag2 != NULL) {
    set_has_tag2();
  } else {
    clear_has_tag2();
  }
  tag2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag2);
  // @@protoc_insertion_point(field_set_allocated:op_set_group_nick_name.tag2)
}

// optional bytes tag3 = 3;
bool op_set_group_nick_name::has_tag3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void op_set_group_nick_name::set_has_tag3() {
  _has_bits_[0] |= 0x00000004u;
}
void op_set_group_nick_name::clear_has_tag3() {
  _has_bits_[0] &= ~0x00000004u;
}
void op_set_group_nick_name::clear_tag3() {
  tag3_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tag3();
}
const ::std::string& op_set_group_nick_name::tag3() const {
  // @@protoc_insertion_point(field_get:op_set_group_nick_name.tag3)
  return tag3_.GetNoArena();
}
void op_set_group_nick_name::set_tag3(const ::std::string& value) {
  set_has_tag3();
  tag3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:op_set_group_nick_name.tag3)
}
#if LANG_CXX11
void op_set_group_nick_name::set_tag3(::std::string&& value) {
  set_has_tag3();
  tag3_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:op_set_group_nick_name.tag3)
}
#endif
void op_set_group_nick_name::set_tag3(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tag3();
  tag3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:op_set_group_nick_name.tag3)
}
void op_set_group_nick_name::set_tag3(const void* value, size_t size) {
  set_has_tag3();
  tag3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:op_set_group_nick_name.tag3)
}
::std::string* op_set_group_nick_name::mutable_tag3() {
  set_has_tag3();
  // @@protoc_insertion_point(field_mutable:op_set_group_nick_name.tag3)
  return tag3_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* op_set_group_nick_name::release_tag3() {
  // @@protoc_insertion_point(field_release:op_set_group_nick_name.tag3)
  clear_has_tag3();
  return tag3_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void op_set_group_nick_name::set_allocated_tag3(::std::string* tag3) {
  if (tag3 != NULL) {
    set_has_tag3();
  } else {
    clear_has_tag3();
  }
  tag3_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag3);
  // @@protoc_insertion_point(field_set_allocated:op_set_group_nick_name.tag3)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int oplog_req_TAG1_CMD_OPTION::kLenFieldNumber;
const int oplog_req_TAG1_CMD_OPTION::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

oplog_req_TAG1_CMD_OPTION::oplog_req_TAG1_CMD_OPTION()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:oplog_req.TAG1.CMD.OPTION)
}
oplog_req_TAG1_CMD_OPTION::oplog_req_TAG1_CMD_OPTION(const oplog_req_TAG1_CMD_OPTION& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  len_ = from.len_;
  // @@protoc_insertion_point(copy_constructor:oplog_req.TAG1.CMD.OPTION)
}

void oplog_req_TAG1_CMD_OPTION::SharedCtor() {
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  len_ = 0;
}

oplog_req_TAG1_CMD_OPTION::~oplog_req_TAG1_CMD_OPTION() {
  // @@protoc_insertion_point(destructor:oplog_req.TAG1.CMD.OPTION)
  SharedDtor();
}

void oplog_req_TAG1_CMD_OPTION::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void oplog_req_TAG1_CMD_OPTION::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* oplog_req_TAG1_CMD_OPTION::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const oplog_req_TAG1_CMD_OPTION& oplog_req_TAG1_CMD_OPTION::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

oplog_req_TAG1_CMD_OPTION* oplog_req_TAG1_CMD_OPTION::New(::google::protobuf::Arena* arena) const {
  oplog_req_TAG1_CMD_OPTION* n = new oplog_req_TAG1_CMD_OPTION;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void oplog_req_TAG1_CMD_OPTION::Clear() {
// @@protoc_insertion_point(message_clear_start:oplog_req.TAG1.CMD.OPTION)
  if (has_data()) {
    GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*data_.UnsafeRawStringPointer())->clear();
  }
  len_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool oplog_req_TAG1_CMD_OPTION::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:oplog_req.TAG1.CMD.OPTION)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 len = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_len();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &len_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:oplog_req.TAG1.CMD.OPTION)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:oplog_req.TAG1.CMD.OPTION)
  return false;
#undef DO_
}

void oplog_req_TAG1_CMD_OPTION::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:oplog_req.TAG1.CMD.OPTION)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 len = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->len(), output);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:oplog_req.TAG1.CMD.OPTION)
}

::google::protobuf::uint8* oplog_req_TAG1_CMD_OPTION::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:oplog_req.TAG1.CMD.OPTION)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 len = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->len(), target);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:oplog_req.TAG1.CMD.OPTION)
  return target;
}

size_t oplog_req_TAG1_CMD_OPTION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:oplog_req.TAG1.CMD.OPTION)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional int32 len = 1;
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->len());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void oplog_req_TAG1_CMD_OPTION::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:oplog_req.TAG1.CMD.OPTION)
  GOOGLE_DCHECK_NE(&from, this);
  const oplog_req_TAG1_CMD_OPTION* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const oplog_req_TAG1_CMD_OPTION>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:oplog_req.TAG1.CMD.OPTION)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:oplog_req.TAG1.CMD.OPTION)
    MergeFrom(*source);
  }
}

void oplog_req_TAG1_CMD_OPTION::MergeFrom(const oplog_req_TAG1_CMD_OPTION& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:oplog_req.TAG1.CMD.OPTION)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      len_ = from.len_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void oplog_req_TAG1_CMD_OPTION::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:oplog_req.TAG1.CMD.OPTION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void oplog_req_TAG1_CMD_OPTION::CopyFrom(const oplog_req_TAG1_CMD_OPTION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:oplog_req.TAG1.CMD.OPTION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool oplog_req_TAG1_CMD_OPTION::IsInitialized() const {
  return true;
}

void oplog_req_TAG1_CMD_OPTION::Swap(oplog_req_TAG1_CMD_OPTION* other) {
  if (other == this) return;
  InternalSwap(other);
}
void oplog_req_TAG1_CMD_OPTION::InternalSwap(oplog_req_TAG1_CMD_OPTION* other) {
  data_.Swap(&other->data_);
  std::swap(len_, other->len_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata oplog_req_TAG1_CMD_OPTION::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// oplog_req_TAG1_CMD_OPTION

// optional int32 len = 1;
bool oplog_req_TAG1_CMD_OPTION::has_len() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void oplog_req_TAG1_CMD_OPTION::set_has_len() {
  _has_bits_[0] |= 0x00000002u;
}
void oplog_req_TAG1_CMD_OPTION::clear_has_len() {
  _has_bits_[0] &= ~0x00000002u;
}
void oplog_req_TAG1_CMD_OPTION::clear_len() {
  len_ = 0;
  clear_has_len();
}
::google::protobuf::int32 oplog_req_TAG1_CMD_OPTION::len() const {
  // @@protoc_insertion_point(field_get:oplog_req.TAG1.CMD.OPTION.len)
  return len_;
}
void oplog_req_TAG1_CMD_OPTION::set_len(::google::protobuf::int32 value) {
  set_has_len();
  len_ = value;
  // @@protoc_insertion_point(field_set:oplog_req.TAG1.CMD.OPTION.len)
}

// optional bytes data = 2;
bool oplog_req_TAG1_CMD_OPTION::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void oplog_req_TAG1_CMD_OPTION::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void oplog_req_TAG1_CMD_OPTION::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void oplog_req_TAG1_CMD_OPTION::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& oplog_req_TAG1_CMD_OPTION::data() const {
  // @@protoc_insertion_point(field_get:oplog_req.TAG1.CMD.OPTION.data)
  return data_.GetNoArena();
}
void oplog_req_TAG1_CMD_OPTION::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:oplog_req.TAG1.CMD.OPTION.data)
}
#if LANG_CXX11
void oplog_req_TAG1_CMD_OPTION::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:oplog_req.TAG1.CMD.OPTION.data)
}
#endif
void oplog_req_TAG1_CMD_OPTION::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:oplog_req.TAG1.CMD.OPTION.data)
}
void oplog_req_TAG1_CMD_OPTION::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:oplog_req.TAG1.CMD.OPTION.data)
}
::std::string* oplog_req_TAG1_CMD_OPTION::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:oplog_req.TAG1.CMD.OPTION.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* oplog_req_TAG1_CMD_OPTION::release_data() {
  // @@protoc_insertion_point(field_release:oplog_req.TAG1.CMD.OPTION.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void oplog_req_TAG1_CMD_OPTION::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:oplog_req.TAG1.CMD.OPTION.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int oplog_req_TAG1_CMD::kCmdIdFieldNumber;
const int oplog_req_TAG1_CMD::kOptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

oplog_req_TAG1_CMD::oplog_req_TAG1_CMD()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:oplog_req.TAG1.CMD)
}
oplog_req_TAG1_CMD::oplog_req_TAG1_CMD(const oplog_req_TAG1_CMD& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_option()) {
    option_ = new ::oplog_req_TAG1_CMD_OPTION(*from.option_);
  } else {
    option_ = NULL;
  }
  cmd_id_ = from.cmd_id_;
  // @@protoc_insertion_point(copy_constructor:oplog_req.TAG1.CMD)
}

void oplog_req_TAG1_CMD::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&option_, 0, reinterpret_cast<char*>(&cmd_id_) -
    reinterpret_cast<char*>(&option_) + sizeof(cmd_id_));
}

oplog_req_TAG1_CMD::~oplog_req_TAG1_CMD() {
  // @@protoc_insertion_point(destructor:oplog_req.TAG1.CMD)
  SharedDtor();
}

void oplog_req_TAG1_CMD::SharedDtor() {
  if (this != internal_default_instance()) {
    delete option_;
  }
}

void oplog_req_TAG1_CMD::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* oplog_req_TAG1_CMD::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const oplog_req_TAG1_CMD& oplog_req_TAG1_CMD::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

oplog_req_TAG1_CMD* oplog_req_TAG1_CMD::New(::google::protobuf::Arena* arena) const {
  oplog_req_TAG1_CMD* n = new oplog_req_TAG1_CMD;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void oplog_req_TAG1_CMD::Clear() {
// @@protoc_insertion_point(message_clear_start:oplog_req.TAG1.CMD)
  if (has_option()) {
    GOOGLE_DCHECK(option_ != NULL);
    option_->::oplog_req_TAG1_CMD_OPTION::Clear();
  }
  cmd_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool oplog_req_TAG1_CMD::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:oplog_req.TAG1.CMD)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cmd_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_cmd_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .oplog_req.TAG1.CMD.OPTION option = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_option()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:oplog_req.TAG1.CMD)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:oplog_req.TAG1.CMD)
  return false;
#undef DO_
}

void oplog_req_TAG1_CMD::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:oplog_req.TAG1.CMD)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cmd_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd_id(), output);
  }

  // optional .oplog_req.TAG1.CMD.OPTION option = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->option_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:oplog_req.TAG1.CMD)
}

::google::protobuf::uint8* oplog_req_TAG1_CMD::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:oplog_req.TAG1.CMD)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cmd_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd_id(), target);
  }

  // optional .oplog_req.TAG1.CMD.OPTION option = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->option_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:oplog_req.TAG1.CMD)
  return target;
}

size_t oplog_req_TAG1_CMD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:oplog_req.TAG1.CMD)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .oplog_req.TAG1.CMD.OPTION option = 2;
    if (has_option()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->option_);
    }

    // optional int32 cmd_id = 1;
    if (has_cmd_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void oplog_req_TAG1_CMD::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:oplog_req.TAG1.CMD)
  GOOGLE_DCHECK_NE(&from, this);
  const oplog_req_TAG1_CMD* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const oplog_req_TAG1_CMD>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:oplog_req.TAG1.CMD)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:oplog_req.TAG1.CMD)
    MergeFrom(*source);
  }
}

void oplog_req_TAG1_CMD::MergeFrom(const oplog_req_TAG1_CMD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:oplog_req.TAG1.CMD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_option()->::oplog_req_TAG1_CMD_OPTION::MergeFrom(from.option());
    }
    if (cached_has_bits & 0x00000002u) {
      cmd_id_ = from.cmd_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void oplog_req_TAG1_CMD::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:oplog_req.TAG1.CMD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void oplog_req_TAG1_CMD::CopyFrom(const oplog_req_TAG1_CMD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:oplog_req.TAG1.CMD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool oplog_req_TAG1_CMD::IsInitialized() const {
  return true;
}

void oplog_req_TAG1_CMD::Swap(oplog_req_TAG1_CMD* other) {
  if (other == this) return;
  InternalSwap(other);
}
void oplog_req_TAG1_CMD::InternalSwap(oplog_req_TAG1_CMD* other) {
  std::swap(option_, other->option_);
  std::swap(cmd_id_, other->cmd_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata oplog_req_TAG1_CMD::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// oplog_req_TAG1_CMD

// optional int32 cmd_id = 1;
bool oplog_req_TAG1_CMD::has_cmd_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void oplog_req_TAG1_CMD::set_has_cmd_id() {
  _has_bits_[0] |= 0x00000002u;
}
void oplog_req_TAG1_CMD::clear_has_cmd_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void oplog_req_TAG1_CMD::clear_cmd_id() {
  cmd_id_ = 0;
  clear_has_cmd_id();
}
::google::protobuf::int32 oplog_req_TAG1_CMD::cmd_id() const {
  // @@protoc_insertion_point(field_get:oplog_req.TAG1.CMD.cmd_id)
  return cmd_id_;
}
void oplog_req_TAG1_CMD::set_cmd_id(::google::protobuf::int32 value) {
  set_has_cmd_id();
  cmd_id_ = value;
  // @@protoc_insertion_point(field_set:oplog_req.TAG1.CMD.cmd_id)
}

// optional .oplog_req.TAG1.CMD.OPTION option = 2;
bool oplog_req_TAG1_CMD::has_option() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void oplog_req_TAG1_CMD::set_has_option() {
  _has_bits_[0] |= 0x00000001u;
}
void oplog_req_TAG1_CMD::clear_has_option() {
  _has_bits_[0] &= ~0x00000001u;
}
void oplog_req_TAG1_CMD::clear_option() {
  if (option_ != NULL) option_->::oplog_req_TAG1_CMD_OPTION::Clear();
  clear_has_option();
}
const ::oplog_req_TAG1_CMD_OPTION& oplog_req_TAG1_CMD::option() const {
  // @@protoc_insertion_point(field_get:oplog_req.TAG1.CMD.option)
  return option_ != NULL ? *option_
                         : *::oplog_req_TAG1_CMD_OPTION::internal_default_instance();
}
::oplog_req_TAG1_CMD_OPTION* oplog_req_TAG1_CMD::mutable_option() {
  set_has_option();
  if (option_ == NULL) {
    option_ = new ::oplog_req_TAG1_CMD_OPTION;
  }
  // @@protoc_insertion_point(field_mutable:oplog_req.TAG1.CMD.option)
  return option_;
}
::oplog_req_TAG1_CMD_OPTION* oplog_req_TAG1_CMD::release_option() {
  // @@protoc_insertion_point(field_release:oplog_req.TAG1.CMD.option)
  clear_has_option();
  ::oplog_req_TAG1_CMD_OPTION* temp = option_;
  option_ = NULL;
  return temp;
}
void oplog_req_TAG1_CMD::set_allocated_option(::oplog_req_TAG1_CMD_OPTION* option) {
  delete option_;
  option_ = option;
  if (option) {
    set_has_option();
  } else {
    clear_has_option();
  }
  // @@protoc_insertion_point(field_set_allocated:oplog_req.TAG1.CMD.option)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int oplog_req_TAG1::kTag1FieldNumber;
const int oplog_req_TAG1::kCmdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

oplog_req_TAG1::oplog_req_TAG1()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:oplog_req.TAG1)
}
oplog_req_TAG1::oplog_req_TAG1(const oplog_req_TAG1& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_cmd()) {
    cmd_ = new ::oplog_req_TAG1_CMD(*from.cmd_);
  } else {
    cmd_ = NULL;
  }
  tag1_ = from.tag1_;
  // @@protoc_insertion_point(copy_constructor:oplog_req.TAG1)
}

void oplog_req_TAG1::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&cmd_, 0, reinterpret_cast<char*>(&tag1_) -
    reinterpret_cast<char*>(&cmd_) + sizeof(tag1_));
}

oplog_req_TAG1::~oplog_req_TAG1() {
  // @@protoc_insertion_point(destructor:oplog_req.TAG1)
  SharedDtor();
}

void oplog_req_TAG1::SharedDtor() {
  if (this != internal_default_instance()) {
    delete cmd_;
  }
}

void oplog_req_TAG1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* oplog_req_TAG1::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const oplog_req_TAG1& oplog_req_TAG1::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

oplog_req_TAG1* oplog_req_TAG1::New(::google::protobuf::Arena* arena) const {
  oplog_req_TAG1* n = new oplog_req_TAG1;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void oplog_req_TAG1::Clear() {
// @@protoc_insertion_point(message_clear_start:oplog_req.TAG1)
  if (has_cmd()) {
    GOOGLE_DCHECK(cmd_ != NULL);
    cmd_->::oplog_req_TAG1_CMD::Clear();
  }
  tag1_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool oplog_req_TAG1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:oplog_req.TAG1)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tag1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_tag1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .oplog_req.TAG1.CMD cmd = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:oplog_req.TAG1)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:oplog_req.TAG1)
  return false;
#undef DO_
}

void oplog_req_TAG1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:oplog_req.TAG1)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 tag1 = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tag1(), output);
  }

  // optional .oplog_req.TAG1.CMD cmd = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->cmd_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:oplog_req.TAG1)
}

::google::protobuf::uint8* oplog_req_TAG1::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:oplog_req.TAG1)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 tag1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tag1(), target);
  }

  // optional .oplog_req.TAG1.CMD cmd = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->cmd_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:oplog_req.TAG1)
  return target;
}

size_t oplog_req_TAG1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:oplog_req.TAG1)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .oplog_req.TAG1.CMD cmd = 2;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cmd_);
    }

    // optional int32 tag1 = 1;
    if (has_tag1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag1());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void oplog_req_TAG1::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:oplog_req.TAG1)
  GOOGLE_DCHECK_NE(&from, this);
  const oplog_req_TAG1* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const oplog_req_TAG1>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:oplog_req.TAG1)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:oplog_req.TAG1)
    MergeFrom(*source);
  }
}

void oplog_req_TAG1::MergeFrom(const oplog_req_TAG1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:oplog_req.TAG1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_cmd()->::oplog_req_TAG1_CMD::MergeFrom(from.cmd());
    }
    if (cached_has_bits & 0x00000002u) {
      tag1_ = from.tag1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void oplog_req_TAG1::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:oplog_req.TAG1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void oplog_req_TAG1::CopyFrom(const oplog_req_TAG1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:oplog_req.TAG1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool oplog_req_TAG1::IsInitialized() const {
  return true;
}

void oplog_req_TAG1::Swap(oplog_req_TAG1* other) {
  if (other == this) return;
  InternalSwap(other);
}
void oplog_req_TAG1::InternalSwap(oplog_req_TAG1* other) {
  std::swap(cmd_, other->cmd_);
  std::swap(tag1_, other->tag1_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata oplog_req_TAG1::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// oplog_req_TAG1

// optional int32 tag1 = 1;
bool oplog_req_TAG1::has_tag1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void oplog_req_TAG1::set_has_tag1() {
  _has_bits_[0] |= 0x00000002u;
}
void oplog_req_TAG1::clear_has_tag1() {
  _has_bits_[0] &= ~0x00000002u;
}
void oplog_req_TAG1::clear_tag1() {
  tag1_ = 0;
  clear_has_tag1();
}
::google::protobuf::int32 oplog_req_TAG1::tag1() const {
  // @@protoc_insertion_point(field_get:oplog_req.TAG1.tag1)
  return tag1_;
}
void oplog_req_TAG1::set_tag1(::google::protobuf::int32 value) {
  set_has_tag1();
  tag1_ = value;
  // @@protoc_insertion_point(field_set:oplog_req.TAG1.tag1)
}

// optional .oplog_req.TAG1.CMD cmd = 2;
bool oplog_req_TAG1::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void oplog_req_TAG1::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
void oplog_req_TAG1::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
void oplog_req_TAG1::clear_cmd() {
  if (cmd_ != NULL) cmd_->::oplog_req_TAG1_CMD::Clear();
  clear_has_cmd();
}
const ::oplog_req_TAG1_CMD& oplog_req_TAG1::cmd() const {
  // @@protoc_insertion_point(field_get:oplog_req.TAG1.cmd)
  return cmd_ != NULL ? *cmd_
                         : *::oplog_req_TAG1_CMD::internal_default_instance();
}
::oplog_req_TAG1_CMD* oplog_req_TAG1::mutable_cmd() {
  set_has_cmd();
  if (cmd_ == NULL) {
    cmd_ = new ::oplog_req_TAG1_CMD;
  }
  // @@protoc_insertion_point(field_mutable:oplog_req.TAG1.cmd)
  return cmd_;
}
::oplog_req_TAG1_CMD* oplog_req_TAG1::release_cmd() {
  // @@protoc_insertion_point(field_release:oplog_req.TAG1.cmd)
  clear_has_cmd();
  ::oplog_req_TAG1_CMD* temp = cmd_;
  cmd_ = NULL;
  return temp;
}
void oplog_req_TAG1::set_allocated_cmd(::oplog_req_TAG1_CMD* cmd) {
  delete cmd_;
  cmd_ = cmd;
  if (cmd) {
    set_has_cmd();
  } else {
    clear_has_cmd();
  }
  // @@protoc_insertion_point(field_set_allocated:oplog_req.TAG1.cmd)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int oplog_req::kTag1FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

oplog_req::oplog_req()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:oplog_req)
}
oplog_req::oplog_req(const oplog_req& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tag1()) {
    tag1_ = new ::oplog_req_TAG1(*from.tag1_);
  } else {
    tag1_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:oplog_req)
}

void oplog_req::SharedCtor() {
  _cached_size_ = 0;
  tag1_ = NULL;
}

oplog_req::~oplog_req() {
  // @@protoc_insertion_point(destructor:oplog_req)
  SharedDtor();
}

void oplog_req::SharedDtor() {
  if (this != internal_default_instance()) {
    delete tag1_;
  }
}

void oplog_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* oplog_req::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const oplog_req& oplog_req::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

oplog_req* oplog_req::New(::google::protobuf::Arena* arena) const {
  oplog_req* n = new oplog_req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void oplog_req::Clear() {
// @@protoc_insertion_point(message_clear_start:oplog_req)
  if (has_tag1()) {
    GOOGLE_DCHECK(tag1_ != NULL);
    tag1_->::oplog_req_TAG1::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool oplog_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:oplog_req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .oplog_req.TAG1 tag1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tag1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:oplog_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:oplog_req)
  return false;
#undef DO_
}

void oplog_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:oplog_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .oplog_req.TAG1 tag1 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->tag1_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:oplog_req)
}

::google::protobuf::uint8* oplog_req::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:oplog_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .oplog_req.TAG1 tag1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->tag1_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:oplog_req)
  return target;
}

size_t oplog_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:oplog_req)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .oplog_req.TAG1 tag1 = 1;
  if (has_tag1()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->tag1_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void oplog_req::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:oplog_req)
  GOOGLE_DCHECK_NE(&from, this);
  const oplog_req* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const oplog_req>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:oplog_req)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:oplog_req)
    MergeFrom(*source);
  }
}

void oplog_req::MergeFrom(const oplog_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:oplog_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tag1()) {
    mutable_tag1()->::oplog_req_TAG1::MergeFrom(from.tag1());
  }
}

void oplog_req::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:oplog_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void oplog_req::CopyFrom(const oplog_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:oplog_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool oplog_req::IsInitialized() const {
  return true;
}

void oplog_req::Swap(oplog_req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void oplog_req::InternalSwap(oplog_req* other) {
  std::swap(tag1_, other->tag1_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata oplog_req::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// oplog_req

// optional .oplog_req.TAG1 tag1 = 1;
bool oplog_req::has_tag1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void oplog_req::set_has_tag1() {
  _has_bits_[0] |= 0x00000001u;
}
void oplog_req::clear_has_tag1() {
  _has_bits_[0] &= ~0x00000001u;
}
void oplog_req::clear_tag1() {
  if (tag1_ != NULL) tag1_->::oplog_req_TAG1::Clear();
  clear_has_tag1();
}
const ::oplog_req_TAG1& oplog_req::tag1() const {
  // @@protoc_insertion_point(field_get:oplog_req.tag1)
  return tag1_ != NULL ? *tag1_
                         : *::oplog_req_TAG1::internal_default_instance();
}
::oplog_req_TAG1* oplog_req::mutable_tag1() {
  set_has_tag1();
  if (tag1_ == NULL) {
    tag1_ = new ::oplog_req_TAG1;
  }
  // @@protoc_insertion_point(field_mutable:oplog_req.tag1)
  return tag1_;
}
::oplog_req_TAG1* oplog_req::release_tag1() {
  // @@protoc_insertion_point(field_release:oplog_req.tag1)
  clear_has_tag1();
  ::oplog_req_TAG1* temp = tag1_;
  tag1_ = NULL;
  return temp;
}
void oplog_req::set_allocated_tag1(::oplog_req_TAG1* tag1) {
  delete tag1_;
  tag1_ = tag1;
  if (tag1) {
    set_has_tag1();
  } else {
    clear_has_tag1();
  }
  // @@protoc_insertion_point(field_set_allocated:oplog_req.tag1)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int oplog_resp_result::kCodeFieldNumber;
const int oplog_resp_result::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

oplog_resp_result::oplog_resp_result()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:oplog_resp.result)
}
oplog_resp_result::oplog_resp_result(const oplog_resp_result& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_msg()) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:oplog_resp.result)
}

void oplog_resp_result::SharedCtor() {
  _cached_size_ = 0;
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

oplog_resp_result::~oplog_resp_result() {
  // @@protoc_insertion_point(destructor:oplog_resp.result)
  SharedDtor();
}

void oplog_resp_result::SharedDtor() {
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void oplog_resp_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* oplog_resp_result::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const oplog_resp_result& oplog_resp_result::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

oplog_resp_result* oplog_resp_result::New(::google::protobuf::Arena* arena) const {
  oplog_resp_result* n = new oplog_resp_result;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void oplog_resp_result::Clear() {
// @@protoc_insertion_point(message_clear_start:oplog_resp.result)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_code()) {
      GOOGLE_DCHECK(!code_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*code_.UnsafeRawStringPointer())->clear();
    }
    if (has_msg()) {
      GOOGLE_DCHECK(!msg_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*msg_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool oplog_resp_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:oplog_resp.result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_code()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string msg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "oplog_resp.result.msg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:oplog_resp.result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:oplog_resp.result)
  return false;
#undef DO_
}

void oplog_resp_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:oplog_resp.result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->code(), output);
  }

  // optional string msg = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "oplog_resp.result.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:oplog_resp.result)
}

::google::protobuf::uint8* oplog_resp_result::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:oplog_resp.result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes code = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->code(), target);
  }

  // optional string msg = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "oplog_resp.result.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:oplog_resp.result)
  return target;
}

size_t oplog_resp_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:oplog_resp.result)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->code());
    }

    // optional string msg = 3;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void oplog_resp_result::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:oplog_resp.result)
  GOOGLE_DCHECK_NE(&from, this);
  const oplog_resp_result* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const oplog_resp_result>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:oplog_resp.result)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:oplog_resp.result)
    MergeFrom(*source);
  }
}

void oplog_resp_result::MergeFrom(const oplog_resp_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:oplog_resp.result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_msg();
      msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
    }
  }
}

void oplog_resp_result::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:oplog_resp.result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void oplog_resp_result::CopyFrom(const oplog_resp_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:oplog_resp.result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool oplog_resp_result::IsInitialized() const {
  return true;
}

void oplog_resp_result::Swap(oplog_resp_result* other) {
  if (other == this) return;
  InternalSwap(other);
}
void oplog_resp_result::InternalSwap(oplog_resp_result* other) {
  code_.Swap(&other->code_);
  msg_.Swap(&other->msg_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata oplog_resp_result::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// oplog_resp_result

// optional bytes code = 2;
bool oplog_resp_result::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void oplog_resp_result::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
void oplog_resp_result::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
void oplog_resp_result::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
const ::std::string& oplog_resp_result::code() const {
  // @@protoc_insertion_point(field_get:oplog_resp.result.code)
  return code_.GetNoArena();
}
void oplog_resp_result::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:oplog_resp.result.code)
}
#if LANG_CXX11
void oplog_resp_result::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:oplog_resp.result.code)
}
#endif
void oplog_resp_result::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:oplog_resp.result.code)
}
void oplog_resp_result::set_code(const void* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:oplog_resp.result.code)
}
::std::string* oplog_resp_result::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:oplog_resp.result.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* oplog_resp_result::release_code() {
  // @@protoc_insertion_point(field_release:oplog_resp.result.code)
  clear_has_code();
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void oplog_resp_result::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:oplog_resp.result.code)
}

// optional string msg = 3;
bool oplog_resp_result::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void oplog_resp_result::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
void oplog_resp_result::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
void oplog_resp_result::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
const ::std::string& oplog_resp_result::msg() const {
  // @@protoc_insertion_point(field_get:oplog_resp.result.msg)
  return msg_.GetNoArena();
}
void oplog_resp_result::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:oplog_resp.result.msg)
}
#if LANG_CXX11
void oplog_resp_result::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:oplog_resp.result.msg)
}
#endif
void oplog_resp_result::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:oplog_resp.result.msg)
}
void oplog_resp_result::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:oplog_resp.result.msg)
}
::std::string* oplog_resp_result::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:oplog_resp.result.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* oplog_resp_result::release_msg() {
  // @@protoc_insertion_point(field_release:oplog_resp.result.msg)
  clear_has_msg();
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void oplog_resp_result::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:oplog_resp.result.msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int oplog_resp::kResFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

oplog_resp::oplog_resp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:oplog_resp)
}
oplog_resp::oplog_resp(const oplog_resp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_res()) {
    res_ = new ::oplog_resp_result(*from.res_);
  } else {
    res_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:oplog_resp)
}

void oplog_resp::SharedCtor() {
  _cached_size_ = 0;
  res_ = NULL;
}

oplog_resp::~oplog_resp() {
  // @@protoc_insertion_point(destructor:oplog_resp)
  SharedDtor();
}

void oplog_resp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete res_;
  }
}

void oplog_resp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* oplog_resp::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const oplog_resp& oplog_resp::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

oplog_resp* oplog_resp::New(::google::protobuf::Arena* arena) const {
  oplog_resp* n = new oplog_resp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void oplog_resp::Clear() {
// @@protoc_insertion_point(message_clear_start:oplog_resp)
  if (has_res()) {
    GOOGLE_DCHECK(res_ != NULL);
    res_->::oplog_resp_result::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool oplog_resp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:oplog_resp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .oplog_resp.result res = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_res()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:oplog_resp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:oplog_resp)
  return false;
#undef DO_
}

void oplog_resp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:oplog_resp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .oplog_resp.result res = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->res_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:oplog_resp)
}

::google::protobuf::uint8* oplog_resp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:oplog_resp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .oplog_resp.result res = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->res_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:oplog_resp)
  return target;
}

size_t oplog_resp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:oplog_resp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .oplog_resp.result res = 2;
  if (has_res()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->res_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void oplog_resp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:oplog_resp)
  GOOGLE_DCHECK_NE(&from, this);
  const oplog_resp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const oplog_resp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:oplog_resp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:oplog_resp)
    MergeFrom(*source);
  }
}

void oplog_resp::MergeFrom(const oplog_resp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:oplog_resp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_res()) {
    mutable_res()->::oplog_resp_result::MergeFrom(from.res());
  }
}

void oplog_resp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:oplog_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void oplog_resp::CopyFrom(const oplog_resp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:oplog_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool oplog_resp::IsInitialized() const {
  return true;
}

void oplog_resp::Swap(oplog_resp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void oplog_resp::InternalSwap(oplog_resp* other) {
  std::swap(res_, other->res_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata oplog_resp::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// oplog_resp

// optional .oplog_resp.result res = 2;
bool oplog_resp::has_res() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void oplog_resp::set_has_res() {
  _has_bits_[0] |= 0x00000001u;
}
void oplog_resp::clear_has_res() {
  _has_bits_[0] &= ~0x00000001u;
}
void oplog_resp::clear_res() {
  if (res_ != NULL) res_->::oplog_resp_result::Clear();
  clear_has_res();
}
const ::oplog_resp_result& oplog_resp::res() const {
  // @@protoc_insertion_point(field_get:oplog_resp.res)
  return res_ != NULL ? *res_
                         : *::oplog_resp_result::internal_default_instance();
}
::oplog_resp_result* oplog_resp::mutable_res() {
  set_has_res();
  if (res_ == NULL) {
    res_ = new ::oplog_resp_result;
  }
  // @@protoc_insertion_point(field_mutable:oplog_resp.res)
  return res_;
}
::oplog_resp_result* oplog_resp::release_res() {
  // @@protoc_insertion_point(field_release:oplog_resp.res)
  clear_has_res();
  ::oplog_resp_result* temp = res_;
  res_ = NULL;
  return temp;
}
void oplog_resp::set_allocated_res(::oplog_resp_result* res) {
  delete res_;
  res_ = res;
  if (res) {
    set_has_res();
  } else {
    clear_has_res();
  }
  // @@protoc_insertion_point(field_set_allocated:oplog_resp.res)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int revoke_msg_req::kLoginFieldNumber;
const int revoke_msg_req::kClientIdFieldNumber;
const int revoke_msg_req::kNewClientIdFieldNumber;
const int revoke_msg_req::kUtcFieldNumber;
const int revoke_msg_req::kTag5FieldNumber;
const int revoke_msg_req::kFromWxidFieldNumber;
const int revoke_msg_req::kToWxidFieldNumber;
const int revoke_msg_req::kIndexOfRequestFieldNumber;
const int revoke_msg_req::kSvridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

revoke_msg_req::revoke_msg_req()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:revoke_msg_req)
}
revoke_msg_req::revoke_msg_req(const revoke_msg_req& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_client_id()) {
    client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  from_wxid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_from_wxid()) {
    from_wxid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_wxid_);
  }
  to_wxid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_to_wxid()) {
    to_wxid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_wxid_);
  }
  if (from.has_login()) {
    login_ = new ::LoginInfo(*from.login_);
  } else {
    login_ = NULL;
  }
  ::memcpy(&new_client_id_, &from.new_client_id_,
    reinterpret_cast<char*>(&index_of_request_) -
    reinterpret_cast<char*>(&new_client_id_) + sizeof(index_of_request_));
  // @@protoc_insertion_point(copy_constructor:revoke_msg_req)
}

void revoke_msg_req::SharedCtor() {
  _cached_size_ = 0;
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_wxid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_wxid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&login_, 0, reinterpret_cast<char*>(&index_of_request_) -
    reinterpret_cast<char*>(&login_) + sizeof(index_of_request_));
}

revoke_msg_req::~revoke_msg_req() {
  // @@protoc_insertion_point(destructor:revoke_msg_req)
  SharedDtor();
}

void revoke_msg_req::SharedDtor() {
  client_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_wxid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_wxid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete login_;
  }
}

void revoke_msg_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* revoke_msg_req::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const revoke_msg_req& revoke_msg_req::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

revoke_msg_req* revoke_msg_req::New(::google::protobuf::Arena* arena) const {
  revoke_msg_req* n = new revoke_msg_req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void revoke_msg_req::Clear() {
// @@protoc_insertion_point(message_clear_start:revoke_msg_req)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_client_id()) {
      GOOGLE_DCHECK(!client_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*client_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_from_wxid()) {
      GOOGLE_DCHECK(!from_wxid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*from_wxid_.UnsafeRawStringPointer())->clear();
    }
    if (has_to_wxid()) {
      GOOGLE_DCHECK(!to_wxid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*to_wxid_.UnsafeRawStringPointer())->clear();
    }
    if (has_login()) {
      GOOGLE_DCHECK(login_ != NULL);
      login_->::LoginInfo::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 240u) {
    ::memset(&new_client_id_, 0, reinterpret_cast<char*>(&svrid_) -
      reinterpret_cast<char*>(&new_client_id_) + sizeof(svrid_));
  }
  index_of_request_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool revoke_msg_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:revoke_msg_req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .LoginInfo login = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string client_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->client_id().data(), this->client_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "revoke_msg_req.client_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 new_client_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_new_client_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &new_client_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 utc = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_utc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &utc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tag5 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_tag5();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string from_wxid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_wxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->from_wxid().data(), this->from_wxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "revoke_msg_req.from_wxid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string to_wxid = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_wxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->to_wxid().data(), this->to_wxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "revoke_msg_req.to_wxid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 index_of_request = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_index_of_request();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_of_request_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 svrid = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_svrid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &svrid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:revoke_msg_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:revoke_msg_req)
  return false;
#undef DO_
}

void revoke_msg_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:revoke_msg_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .LoginInfo login = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->login_, output);
  }

  // optional string client_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_id().data(), this->client_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "revoke_msg_req.client_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->client_id(), output);
  }

  // optional int64 new_client_id = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->new_client_id(), output);
  }

  // optional int32 utc = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->utc(), output);
  }

  // optional int32 tag5 = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->tag5(), output);
  }

  // optional string from_wxid = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from_wxid().data(), this->from_wxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "revoke_msg_req.from_wxid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->from_wxid(), output);
  }

  // optional string to_wxid = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to_wxid().data(), this->to_wxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "revoke_msg_req.to_wxid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->to_wxid(), output);
  }

  // optional int32 index_of_request = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->index_of_request(), output);
  }

  // optional int64 svrid = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->svrid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:revoke_msg_req)
}

::google::protobuf::uint8* revoke_msg_req::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:revoke_msg_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .LoginInfo login = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->login_, deterministic, target);
  }

  // optional string client_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_id().data(), this->client_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "revoke_msg_req.client_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->client_id(), target);
  }

  // optional int64 new_client_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->new_client_id(), target);
  }

  // optional int32 utc = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->utc(), target);
  }

  // optional int32 tag5 = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->tag5(), target);
  }

  // optional string from_wxid = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from_wxid().data(), this->from_wxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "revoke_msg_req.from_wxid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->from_wxid(), target);
  }

  // optional string to_wxid = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to_wxid().data(), this->to_wxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "revoke_msg_req.to_wxid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->to_wxid(), target);
  }

  // optional int32 index_of_request = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->index_of_request(), target);
  }

  // optional int64 svrid = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->svrid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:revoke_msg_req)
  return target;
}

size_t revoke_msg_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:revoke_msg_req)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string client_id = 2;
    if (has_client_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_id());
    }

    // optional string from_wxid = 6;
    if (has_from_wxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_wxid());
    }

    // optional string to_wxid = 7;
    if (has_to_wxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to_wxid());
    }

    // optional .LoginInfo login = 1;
    if (has_login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->login_);
    }

    // optional int64 new_client_id = 3;
    if (has_new_client_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->new_client_id());
    }

    // optional int32 utc = 4;
    if (has_utc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->utc());
    }

    // optional int32 tag5 = 5;
    if (has_tag5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag5());
    }

    // optional int64 svrid = 9;
    if (has_svrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->svrid());
    }

  }
  // optional int32 index_of_request = 8;
  if (has_index_of_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index_of_request());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void revoke_msg_req::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:revoke_msg_req)
  GOOGLE_DCHECK_NE(&from, this);
  const revoke_msg_req* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const revoke_msg_req>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:revoke_msg_req)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:revoke_msg_req)
    MergeFrom(*source);
  }
}

void revoke_msg_req::MergeFrom(const revoke_msg_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:revoke_msg_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_client_id();
      client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_from_wxid();
      from_wxid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_wxid_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_to_wxid();
      to_wxid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_wxid_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_login()->::LoginInfo::MergeFrom(from.login());
    }
    if (cached_has_bits & 0x00000010u) {
      new_client_id_ = from.new_client_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      utc_ = from.utc_;
    }
    if (cached_has_bits & 0x00000040u) {
      tag5_ = from.tag5_;
    }
    if (cached_has_bits & 0x00000080u) {
      svrid_ = from.svrid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_index_of_request(from.index_of_request());
  }
}

void revoke_msg_req::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:revoke_msg_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void revoke_msg_req::CopyFrom(const revoke_msg_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:revoke_msg_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool revoke_msg_req::IsInitialized() const {
  return true;
}

void revoke_msg_req::Swap(revoke_msg_req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void revoke_msg_req::InternalSwap(revoke_msg_req* other) {
  client_id_.Swap(&other->client_id_);
  from_wxid_.Swap(&other->from_wxid_);
  to_wxid_.Swap(&other->to_wxid_);
  std::swap(login_, other->login_);
  std::swap(new_client_id_, other->new_client_id_);
  std::swap(utc_, other->utc_);
  std::swap(tag5_, other->tag5_);
  std::swap(svrid_, other->svrid_);
  std::swap(index_of_request_, other->index_of_request_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata revoke_msg_req::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// revoke_msg_req

// optional .LoginInfo login = 1;
bool revoke_msg_req::has_login() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void revoke_msg_req::set_has_login() {
  _has_bits_[0] |= 0x00000008u;
}
void revoke_msg_req::clear_has_login() {
  _has_bits_[0] &= ~0x00000008u;
}
void revoke_msg_req::clear_login() {
  if (login_ != NULL) login_->::LoginInfo::Clear();
  clear_has_login();
}
const ::LoginInfo& revoke_msg_req::login() const {
  // @@protoc_insertion_point(field_get:revoke_msg_req.login)
  return login_ != NULL ? *login_
                         : *::LoginInfo::internal_default_instance();
}
::LoginInfo* revoke_msg_req::mutable_login() {
  set_has_login();
  if (login_ == NULL) {
    login_ = new ::LoginInfo;
  }
  // @@protoc_insertion_point(field_mutable:revoke_msg_req.login)
  return login_;
}
::LoginInfo* revoke_msg_req::release_login() {
  // @@protoc_insertion_point(field_release:revoke_msg_req.login)
  clear_has_login();
  ::LoginInfo* temp = login_;
  login_ = NULL;
  return temp;
}
void revoke_msg_req::set_allocated_login(::LoginInfo* login) {
  delete login_;
  login_ = login;
  if (login) {
    set_has_login();
  } else {
    clear_has_login();
  }
  // @@protoc_insertion_point(field_set_allocated:revoke_msg_req.login)
}

// optional string client_id = 2;
bool revoke_msg_req::has_client_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void revoke_msg_req::set_has_client_id() {
  _has_bits_[0] |= 0x00000001u;
}
void revoke_msg_req::clear_has_client_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void revoke_msg_req::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_client_id();
}
const ::std::string& revoke_msg_req::client_id() const {
  // @@protoc_insertion_point(field_get:revoke_msg_req.client_id)
  return client_id_.GetNoArena();
}
void revoke_msg_req::set_client_id(const ::std::string& value) {
  set_has_client_id();
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:revoke_msg_req.client_id)
}
#if LANG_CXX11
void revoke_msg_req::set_client_id(::std::string&& value) {
  set_has_client_id();
  client_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:revoke_msg_req.client_id)
}
#endif
void revoke_msg_req::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_client_id();
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:revoke_msg_req.client_id)
}
void revoke_msg_req::set_client_id(const char* value, size_t size) {
  set_has_client_id();
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:revoke_msg_req.client_id)
}
::std::string* revoke_msg_req::mutable_client_id() {
  set_has_client_id();
  // @@protoc_insertion_point(field_mutable:revoke_msg_req.client_id)
  return client_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* revoke_msg_req::release_client_id() {
  // @@protoc_insertion_point(field_release:revoke_msg_req.client_id)
  clear_has_client_id();
  return client_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void revoke_msg_req::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    set_has_client_id();
  } else {
    clear_has_client_id();
  }
  client_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:revoke_msg_req.client_id)
}

// optional int64 new_client_id = 3;
bool revoke_msg_req::has_new_client_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void revoke_msg_req::set_has_new_client_id() {
  _has_bits_[0] |= 0x00000010u;
}
void revoke_msg_req::clear_has_new_client_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void revoke_msg_req::clear_new_client_id() {
  new_client_id_ = GOOGLE_LONGLONG(0);
  clear_has_new_client_id();
}
::google::protobuf::int64 revoke_msg_req::new_client_id() const {
  // @@protoc_insertion_point(field_get:revoke_msg_req.new_client_id)
  return new_client_id_;
}
void revoke_msg_req::set_new_client_id(::google::protobuf::int64 value) {
  set_has_new_client_id();
  new_client_id_ = value;
  // @@protoc_insertion_point(field_set:revoke_msg_req.new_client_id)
}

// optional int32 utc = 4;
bool revoke_msg_req::has_utc() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void revoke_msg_req::set_has_utc() {
  _has_bits_[0] |= 0x00000020u;
}
void revoke_msg_req::clear_has_utc() {
  _has_bits_[0] &= ~0x00000020u;
}
void revoke_msg_req::clear_utc() {
  utc_ = 0;
  clear_has_utc();
}
::google::protobuf::int32 revoke_msg_req::utc() const {
  // @@protoc_insertion_point(field_get:revoke_msg_req.utc)
  return utc_;
}
void revoke_msg_req::set_utc(::google::protobuf::int32 value) {
  set_has_utc();
  utc_ = value;
  // @@protoc_insertion_point(field_set:revoke_msg_req.utc)
}

// optional int32 tag5 = 5;
bool revoke_msg_req::has_tag5() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void revoke_msg_req::set_has_tag5() {
  _has_bits_[0] |= 0x00000040u;
}
void revoke_msg_req::clear_has_tag5() {
  _has_bits_[0] &= ~0x00000040u;
}
void revoke_msg_req::clear_tag5() {
  tag5_ = 0;
  clear_has_tag5();
}
::google::protobuf::int32 revoke_msg_req::tag5() const {
  // @@protoc_insertion_point(field_get:revoke_msg_req.tag5)
  return tag5_;
}
void revoke_msg_req::set_tag5(::google::protobuf::int32 value) {
  set_has_tag5();
  tag5_ = value;
  // @@protoc_insertion_point(field_set:revoke_msg_req.tag5)
}

// optional string from_wxid = 6;
bool revoke_msg_req::has_from_wxid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void revoke_msg_req::set_has_from_wxid() {
  _has_bits_[0] |= 0x00000002u;
}
void revoke_msg_req::clear_has_from_wxid() {
  _has_bits_[0] &= ~0x00000002u;
}
void revoke_msg_req::clear_from_wxid() {
  from_wxid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_from_wxid();
}
const ::std::string& revoke_msg_req::from_wxid() const {
  // @@protoc_insertion_point(field_get:revoke_msg_req.from_wxid)
  return from_wxid_.GetNoArena();
}
void revoke_msg_req::set_from_wxid(const ::std::string& value) {
  set_has_from_wxid();
  from_wxid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:revoke_msg_req.from_wxid)
}
#if LANG_CXX11
void revoke_msg_req::set_from_wxid(::std::string&& value) {
  set_has_from_wxid();
  from_wxid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:revoke_msg_req.from_wxid)
}
#endif
void revoke_msg_req::set_from_wxid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_from_wxid();
  from_wxid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:revoke_msg_req.from_wxid)
}
void revoke_msg_req::set_from_wxid(const char* value, size_t size) {
  set_has_from_wxid();
  from_wxid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:revoke_msg_req.from_wxid)
}
::std::string* revoke_msg_req::mutable_from_wxid() {
  set_has_from_wxid();
  // @@protoc_insertion_point(field_mutable:revoke_msg_req.from_wxid)
  return from_wxid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* revoke_msg_req::release_from_wxid() {
  // @@protoc_insertion_point(field_release:revoke_msg_req.from_wxid)
  clear_has_from_wxid();
  return from_wxid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void revoke_msg_req::set_allocated_from_wxid(::std::string* from_wxid) {
  if (from_wxid != NULL) {
    set_has_from_wxid();
  } else {
    clear_has_from_wxid();
  }
  from_wxid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_wxid);
  // @@protoc_insertion_point(field_set_allocated:revoke_msg_req.from_wxid)
}

// optional string to_wxid = 7;
bool revoke_msg_req::has_to_wxid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void revoke_msg_req::set_has_to_wxid() {
  _has_bits_[0] |= 0x00000004u;
}
void revoke_msg_req::clear_has_to_wxid() {
  _has_bits_[0] &= ~0x00000004u;
}
void revoke_msg_req::clear_to_wxid() {
  to_wxid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_to_wxid();
}
const ::std::string& revoke_msg_req::to_wxid() const {
  // @@protoc_insertion_point(field_get:revoke_msg_req.to_wxid)
  return to_wxid_.GetNoArena();
}
void revoke_msg_req::set_to_wxid(const ::std::string& value) {
  set_has_to_wxid();
  to_wxid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:revoke_msg_req.to_wxid)
}
#if LANG_CXX11
void revoke_msg_req::set_to_wxid(::std::string&& value) {
  set_has_to_wxid();
  to_wxid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:revoke_msg_req.to_wxid)
}
#endif
void revoke_msg_req::set_to_wxid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_to_wxid();
  to_wxid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:revoke_msg_req.to_wxid)
}
void revoke_msg_req::set_to_wxid(const char* value, size_t size) {
  set_has_to_wxid();
  to_wxid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:revoke_msg_req.to_wxid)
}
::std::string* revoke_msg_req::mutable_to_wxid() {
  set_has_to_wxid();
  // @@protoc_insertion_point(field_mutable:revoke_msg_req.to_wxid)
  return to_wxid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* revoke_msg_req::release_to_wxid() {
  // @@protoc_insertion_point(field_release:revoke_msg_req.to_wxid)
  clear_has_to_wxid();
  return to_wxid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void revoke_msg_req::set_allocated_to_wxid(::std::string* to_wxid) {
  if (to_wxid != NULL) {
    set_has_to_wxid();
  } else {
    clear_has_to_wxid();
  }
  to_wxid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_wxid);
  // @@protoc_insertion_point(field_set_allocated:revoke_msg_req.to_wxid)
}

// optional int32 index_of_request = 8;
bool revoke_msg_req::has_index_of_request() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void revoke_msg_req::set_has_index_of_request() {
  _has_bits_[0] |= 0x00000100u;
}
void revoke_msg_req::clear_has_index_of_request() {
  _has_bits_[0] &= ~0x00000100u;
}
void revoke_msg_req::clear_index_of_request() {
  index_of_request_ = 0;
  clear_has_index_of_request();
}
::google::protobuf::int32 revoke_msg_req::index_of_request() const {
  // @@protoc_insertion_point(field_get:revoke_msg_req.index_of_request)
  return index_of_request_;
}
void revoke_msg_req::set_index_of_request(::google::protobuf::int32 value) {
  set_has_index_of_request();
  index_of_request_ = value;
  // @@protoc_insertion_point(field_set:revoke_msg_req.index_of_request)
}

// optional int64 svrid = 9;
bool revoke_msg_req::has_svrid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void revoke_msg_req::set_has_svrid() {
  _has_bits_[0] |= 0x00000080u;
}
void revoke_msg_req::clear_has_svrid() {
  _has_bits_[0] &= ~0x00000080u;
}
void revoke_msg_req::clear_svrid() {
  svrid_ = GOOGLE_LONGLONG(0);
  clear_has_svrid();
}
::google::protobuf::int64 revoke_msg_req::svrid() const {
  // @@protoc_insertion_point(field_get:revoke_msg_req.svrid)
  return svrid_;
}
void revoke_msg_req::set_svrid(::google::protobuf::int64 value) {
  set_has_svrid();
  svrid_ = value;
  // @@protoc_insertion_point(field_set:revoke_msg_req.svrid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int revoke_msg_resp::kResFieldNumber;
const int revoke_msg_resp::kResponseSysWordingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

revoke_msg_resp::revoke_msg_resp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:revoke_msg_resp)
}
revoke_msg_resp::revoke_msg_resp(const revoke_msg_resp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  response_sys_wording_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_response_sys_wording()) {
    response_sys_wording_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.response_sys_wording_);
  }
  if (from.has_res()) {
    res_ = new ::mmRes(*from.res_);
  } else {
    res_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:revoke_msg_resp)
}

void revoke_msg_resp::SharedCtor() {
  _cached_size_ = 0;
  response_sys_wording_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  res_ = NULL;
}

revoke_msg_resp::~revoke_msg_resp() {
  // @@protoc_insertion_point(destructor:revoke_msg_resp)
  SharedDtor();
}

void revoke_msg_resp::SharedDtor() {
  response_sys_wording_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete res_;
  }
}

void revoke_msg_resp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* revoke_msg_resp::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const revoke_msg_resp& revoke_msg_resp::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

revoke_msg_resp* revoke_msg_resp::New(::google::protobuf::Arena* arena) const {
  revoke_msg_resp* n = new revoke_msg_resp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void revoke_msg_resp::Clear() {
// @@protoc_insertion_point(message_clear_start:revoke_msg_resp)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_response_sys_wording()) {
      GOOGLE_DCHECK(!response_sys_wording_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*response_sys_wording_.UnsafeRawStringPointer())->clear();
    }
    if (has_res()) {
      GOOGLE_DCHECK(res_ != NULL);
      res_->::mmRes::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool revoke_msg_resp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:revoke_msg_resp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mmRes res = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_res()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string response_sys_wording = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_response_sys_wording()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->response_sys_wording().data(), this->response_sys_wording().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "revoke_msg_resp.response_sys_wording");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:revoke_msg_resp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:revoke_msg_resp)
  return false;
#undef DO_
}

void revoke_msg_resp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:revoke_msg_resp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mmRes res = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->res_, output);
  }

  // optional string response_sys_wording = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->response_sys_wording().data(), this->response_sys_wording().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "revoke_msg_resp.response_sys_wording");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->response_sys_wording(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:revoke_msg_resp)
}

::google::protobuf::uint8* revoke_msg_resp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:revoke_msg_resp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mmRes res = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->res_, deterministic, target);
  }

  // optional string response_sys_wording = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->response_sys_wording().data(), this->response_sys_wording().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "revoke_msg_resp.response_sys_wording");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->response_sys_wording(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:revoke_msg_resp)
  return target;
}

size_t revoke_msg_resp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:revoke_msg_resp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string response_sys_wording = 3;
    if (has_response_sys_wording()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->response_sys_wording());
    }

    // optional .mmRes res = 1;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->res_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void revoke_msg_resp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:revoke_msg_resp)
  GOOGLE_DCHECK_NE(&from, this);
  const revoke_msg_resp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const revoke_msg_resp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:revoke_msg_resp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:revoke_msg_resp)
    MergeFrom(*source);
  }
}

void revoke_msg_resp::MergeFrom(const revoke_msg_resp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:revoke_msg_resp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_response_sys_wording();
      response_sys_wording_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.response_sys_wording_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_res()->::mmRes::MergeFrom(from.res());
    }
  }
}

void revoke_msg_resp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:revoke_msg_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void revoke_msg_resp::CopyFrom(const revoke_msg_resp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:revoke_msg_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool revoke_msg_resp::IsInitialized() const {
  return true;
}

void revoke_msg_resp::Swap(revoke_msg_resp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void revoke_msg_resp::InternalSwap(revoke_msg_resp* other) {
  response_sys_wording_.Swap(&other->response_sys_wording_);
  std::swap(res_, other->res_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata revoke_msg_resp::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// revoke_msg_resp

// optional .mmRes res = 1;
bool revoke_msg_resp::has_res() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void revoke_msg_resp::set_has_res() {
  _has_bits_[0] |= 0x00000002u;
}
void revoke_msg_resp::clear_has_res() {
  _has_bits_[0] &= ~0x00000002u;
}
void revoke_msg_resp::clear_res() {
  if (res_ != NULL) res_->::mmRes::Clear();
  clear_has_res();
}
const ::mmRes& revoke_msg_resp::res() const {
  // @@protoc_insertion_point(field_get:revoke_msg_resp.res)
  return res_ != NULL ? *res_
                         : *::mmRes::internal_default_instance();
}
::mmRes* revoke_msg_resp::mutable_res() {
  set_has_res();
  if (res_ == NULL) {
    res_ = new ::mmRes;
  }
  // @@protoc_insertion_point(field_mutable:revoke_msg_resp.res)
  return res_;
}
::mmRes* revoke_msg_resp::release_res() {
  // @@protoc_insertion_point(field_release:revoke_msg_resp.res)
  clear_has_res();
  ::mmRes* temp = res_;
  res_ = NULL;
  return temp;
}
void revoke_msg_resp::set_allocated_res(::mmRes* res) {
  delete res_;
  res_ = res;
  if (res) {
    set_has_res();
  } else {
    clear_has_res();
  }
  // @@protoc_insertion_point(field_set_allocated:revoke_msg_resp.res)
}

// optional string response_sys_wording = 3;
bool revoke_msg_resp::has_response_sys_wording() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void revoke_msg_resp::set_has_response_sys_wording() {
  _has_bits_[0] |= 0x00000001u;
}
void revoke_msg_resp::clear_has_response_sys_wording() {
  _has_bits_[0] &= ~0x00000001u;
}
void revoke_msg_resp::clear_response_sys_wording() {
  response_sys_wording_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_response_sys_wording();
}
const ::std::string& revoke_msg_resp::response_sys_wording() const {
  // @@protoc_insertion_point(field_get:revoke_msg_resp.response_sys_wording)
  return response_sys_wording_.GetNoArena();
}
void revoke_msg_resp::set_response_sys_wording(const ::std::string& value) {
  set_has_response_sys_wording();
  response_sys_wording_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:revoke_msg_resp.response_sys_wording)
}
#if LANG_CXX11
void revoke_msg_resp::set_response_sys_wording(::std::string&& value) {
  set_has_response_sys_wording();
  response_sys_wording_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:revoke_msg_resp.response_sys_wording)
}
#endif
void revoke_msg_resp::set_response_sys_wording(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_response_sys_wording();
  response_sys_wording_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:revoke_msg_resp.response_sys_wording)
}
void revoke_msg_resp::set_response_sys_wording(const char* value, size_t size) {
  set_has_response_sys_wording();
  response_sys_wording_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:revoke_msg_resp.response_sys_wording)
}
::std::string* revoke_msg_resp::mutable_response_sys_wording() {
  set_has_response_sys_wording();
  // @@protoc_insertion_point(field_mutable:revoke_msg_resp.response_sys_wording)
  return response_sys_wording_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* revoke_msg_resp::release_response_sys_wording() {
  // @@protoc_insertion_point(field_release:revoke_msg_resp.response_sys_wording)
  clear_has_response_sys_wording();
  return response_sys_wording_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void revoke_msg_resp::set_allocated_response_sys_wording(::std::string* response_sys_wording) {
  if (response_sys_wording != NULL) {
    set_has_response_sys_wording();
  } else {
    clear_has_response_sys_wording();
  }
  response_sys_wording_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), response_sys_wording);
  // @@protoc_insertion_point(field_set_allocated:revoke_msg_resp.response_sys_wording)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int set_chatroom_announcement_req::kLoginFieldNumber;
const int set_chatroom_announcement_req::kChatroomWxidFieldNumber;
const int set_chatroom_announcement_req::kContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

set_chatroom_announcement_req::set_chatroom_announcement_req()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:set_chatroom_announcement_req)
}
set_chatroom_announcement_req::set_chatroom_announcement_req(const set_chatroom_announcement_req& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chatroom_wxid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_chatroom_wxid()) {
    chatroom_wxid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chatroom_wxid_);
  }
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_content()) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.has_login()) {
    login_ = new ::LoginInfo(*from.login_);
  } else {
    login_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:set_chatroom_announcement_req)
}

void set_chatroom_announcement_req::SharedCtor() {
  _cached_size_ = 0;
  chatroom_wxid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  login_ = NULL;
}

set_chatroom_announcement_req::~set_chatroom_announcement_req() {
  // @@protoc_insertion_point(destructor:set_chatroom_announcement_req)
  SharedDtor();
}

void set_chatroom_announcement_req::SharedDtor() {
  chatroom_wxid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete login_;
  }
}

void set_chatroom_announcement_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* set_chatroom_announcement_req::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const set_chatroom_announcement_req& set_chatroom_announcement_req::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

set_chatroom_announcement_req* set_chatroom_announcement_req::New(::google::protobuf::Arena* arena) const {
  set_chatroom_announcement_req* n = new set_chatroom_announcement_req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void set_chatroom_announcement_req::Clear() {
// @@protoc_insertion_point(message_clear_start:set_chatroom_announcement_req)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_chatroom_wxid()) {
      GOOGLE_DCHECK(!chatroom_wxid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*chatroom_wxid_.UnsafeRawStringPointer())->clear();
    }
    if (has_content()) {
      GOOGLE_DCHECK(!content_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*content_.UnsafeRawStringPointer())->clear();
    }
    if (has_login()) {
      GOOGLE_DCHECK(login_ != NULL);
      login_->::LoginInfo::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool set_chatroom_announcement_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:set_chatroom_announcement_req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .LoginInfo login = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string chatroom_wxid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chatroom_wxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->chatroom_wxid().data(), this->chatroom_wxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "set_chatroom_announcement_req.chatroom_wxid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string content = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "set_chatroom_announcement_req.content");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:set_chatroom_announcement_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:set_chatroom_announcement_req)
  return false;
#undef DO_
}

void set_chatroom_announcement_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:set_chatroom_announcement_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .LoginInfo login = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->login_, output);
  }

  // optional string chatroom_wxid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chatroom_wxid().data(), this->chatroom_wxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "set_chatroom_announcement_req.chatroom_wxid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->chatroom_wxid(), output);
  }

  // optional string content = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "set_chatroom_announcement_req.content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->content(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:set_chatroom_announcement_req)
}

::google::protobuf::uint8* set_chatroom_announcement_req::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:set_chatroom_announcement_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .LoginInfo login = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->login_, deterministic, target);
  }

  // optional string chatroom_wxid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chatroom_wxid().data(), this->chatroom_wxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "set_chatroom_announcement_req.chatroom_wxid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->chatroom_wxid(), target);
  }

  // optional string content = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "set_chatroom_announcement_req.content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->content(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:set_chatroom_announcement_req)
  return target;
}

size_t set_chatroom_announcement_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:set_chatroom_announcement_req)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string chatroom_wxid = 2;
    if (has_chatroom_wxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chatroom_wxid());
    }

    // optional string content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional .LoginInfo login = 1;
    if (has_login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->login_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void set_chatroom_announcement_req::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:set_chatroom_announcement_req)
  GOOGLE_DCHECK_NE(&from, this);
  const set_chatroom_announcement_req* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const set_chatroom_announcement_req>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:set_chatroom_announcement_req)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:set_chatroom_announcement_req)
    MergeFrom(*source);
  }
}

void set_chatroom_announcement_req::MergeFrom(const set_chatroom_announcement_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:set_chatroom_announcement_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_chatroom_wxid();
      chatroom_wxid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chatroom_wxid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_content();
      content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_login()->::LoginInfo::MergeFrom(from.login());
    }
  }
}

void set_chatroom_announcement_req::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:set_chatroom_announcement_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void set_chatroom_announcement_req::CopyFrom(const set_chatroom_announcement_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:set_chatroom_announcement_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool set_chatroom_announcement_req::IsInitialized() const {
  return true;
}

void set_chatroom_announcement_req::Swap(set_chatroom_announcement_req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void set_chatroom_announcement_req::InternalSwap(set_chatroom_announcement_req* other) {
  chatroom_wxid_.Swap(&other->chatroom_wxid_);
  content_.Swap(&other->content_);
  std::swap(login_, other->login_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata set_chatroom_announcement_req::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// set_chatroom_announcement_req

// optional .LoginInfo login = 1;
bool set_chatroom_announcement_req::has_login() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void set_chatroom_announcement_req::set_has_login() {
  _has_bits_[0] |= 0x00000004u;
}
void set_chatroom_announcement_req::clear_has_login() {
  _has_bits_[0] &= ~0x00000004u;
}
void set_chatroom_announcement_req::clear_login() {
  if (login_ != NULL) login_->::LoginInfo::Clear();
  clear_has_login();
}
const ::LoginInfo& set_chatroom_announcement_req::login() const {
  // @@protoc_insertion_point(field_get:set_chatroom_announcement_req.login)
  return login_ != NULL ? *login_
                         : *::LoginInfo::internal_default_instance();
}
::LoginInfo* set_chatroom_announcement_req::mutable_login() {
  set_has_login();
  if (login_ == NULL) {
    login_ = new ::LoginInfo;
  }
  // @@protoc_insertion_point(field_mutable:set_chatroom_announcement_req.login)
  return login_;
}
::LoginInfo* set_chatroom_announcement_req::release_login() {
  // @@protoc_insertion_point(field_release:set_chatroom_announcement_req.login)
  clear_has_login();
  ::LoginInfo* temp = login_;
  login_ = NULL;
  return temp;
}
void set_chatroom_announcement_req::set_allocated_login(::LoginInfo* login) {
  delete login_;
  login_ = login;
  if (login) {
    set_has_login();
  } else {
    clear_has_login();
  }
  // @@protoc_insertion_point(field_set_allocated:set_chatroom_announcement_req.login)
}

// optional string chatroom_wxid = 2;
bool set_chatroom_announcement_req::has_chatroom_wxid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void set_chatroom_announcement_req::set_has_chatroom_wxid() {
  _has_bits_[0] |= 0x00000001u;
}
void set_chatroom_announcement_req::clear_has_chatroom_wxid() {
  _has_bits_[0] &= ~0x00000001u;
}
void set_chatroom_announcement_req::clear_chatroom_wxid() {
  chatroom_wxid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chatroom_wxid();
}
const ::std::string& set_chatroom_announcement_req::chatroom_wxid() const {
  // @@protoc_insertion_point(field_get:set_chatroom_announcement_req.chatroom_wxid)
  return chatroom_wxid_.GetNoArena();
}
void set_chatroom_announcement_req::set_chatroom_wxid(const ::std::string& value) {
  set_has_chatroom_wxid();
  chatroom_wxid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:set_chatroom_announcement_req.chatroom_wxid)
}
#if LANG_CXX11
void set_chatroom_announcement_req::set_chatroom_wxid(::std::string&& value) {
  set_has_chatroom_wxid();
  chatroom_wxid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:set_chatroom_announcement_req.chatroom_wxid)
}
#endif
void set_chatroom_announcement_req::set_chatroom_wxid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_chatroom_wxid();
  chatroom_wxid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:set_chatroom_announcement_req.chatroom_wxid)
}
void set_chatroom_announcement_req::set_chatroom_wxid(const char* value, size_t size) {
  set_has_chatroom_wxid();
  chatroom_wxid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:set_chatroom_announcement_req.chatroom_wxid)
}
::std::string* set_chatroom_announcement_req::mutable_chatroom_wxid() {
  set_has_chatroom_wxid();
  // @@protoc_insertion_point(field_mutable:set_chatroom_announcement_req.chatroom_wxid)
  return chatroom_wxid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* set_chatroom_announcement_req::release_chatroom_wxid() {
  // @@protoc_insertion_point(field_release:set_chatroom_announcement_req.chatroom_wxid)
  clear_has_chatroom_wxid();
  return chatroom_wxid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void set_chatroom_announcement_req::set_allocated_chatroom_wxid(::std::string* chatroom_wxid) {
  if (chatroom_wxid != NULL) {
    set_has_chatroom_wxid();
  } else {
    clear_has_chatroom_wxid();
  }
  chatroom_wxid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chatroom_wxid);
  // @@protoc_insertion_point(field_set_allocated:set_chatroom_announcement_req.chatroom_wxid)
}

// optional string content = 3;
bool set_chatroom_announcement_req::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void set_chatroom_announcement_req::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
void set_chatroom_announcement_req::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
void set_chatroom_announcement_req::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
const ::std::string& set_chatroom_announcement_req::content() const {
  // @@protoc_insertion_point(field_get:set_chatroom_announcement_req.content)
  return content_.GetNoArena();
}
void set_chatroom_announcement_req::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:set_chatroom_announcement_req.content)
}
#if LANG_CXX11
void set_chatroom_announcement_req::set_content(::std::string&& value) {
  set_has_content();
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:set_chatroom_announcement_req.content)
}
#endif
void set_chatroom_announcement_req::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:set_chatroom_announcement_req.content)
}
void set_chatroom_announcement_req::set_content(const char* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:set_chatroom_announcement_req.content)
}
::std::string* set_chatroom_announcement_req::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:set_chatroom_announcement_req.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* set_chatroom_announcement_req::release_content() {
  // @@protoc_insertion_point(field_release:set_chatroom_announcement_req.content)
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void set_chatroom_announcement_req::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:set_chatroom_announcement_req.content)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int set_chatroom_announcement_resp::kResFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

set_chatroom_announcement_resp::set_chatroom_announcement_resp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:set_chatroom_announcement_resp)
}
set_chatroom_announcement_resp::set_chatroom_announcement_resp(const set_chatroom_announcement_resp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_res()) {
    res_ = new ::mmRes(*from.res_);
  } else {
    res_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:set_chatroom_announcement_resp)
}

void set_chatroom_announcement_resp::SharedCtor() {
  _cached_size_ = 0;
  res_ = NULL;
}

set_chatroom_announcement_resp::~set_chatroom_announcement_resp() {
  // @@protoc_insertion_point(destructor:set_chatroom_announcement_resp)
  SharedDtor();
}

void set_chatroom_announcement_resp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete res_;
  }
}

void set_chatroom_announcement_resp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* set_chatroom_announcement_resp::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const set_chatroom_announcement_resp& set_chatroom_announcement_resp::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

set_chatroom_announcement_resp* set_chatroom_announcement_resp::New(::google::protobuf::Arena* arena) const {
  set_chatroom_announcement_resp* n = new set_chatroom_announcement_resp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void set_chatroom_announcement_resp::Clear() {
// @@protoc_insertion_point(message_clear_start:set_chatroom_announcement_resp)
  if (has_res()) {
    GOOGLE_DCHECK(res_ != NULL);
    res_->::mmRes::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool set_chatroom_announcement_resp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:set_chatroom_announcement_resp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mmRes res = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_res()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:set_chatroom_announcement_resp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:set_chatroom_announcement_resp)
  return false;
#undef DO_
}

void set_chatroom_announcement_resp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:set_chatroom_announcement_resp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mmRes res = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->res_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:set_chatroom_announcement_resp)
}

::google::protobuf::uint8* set_chatroom_announcement_resp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:set_chatroom_announcement_resp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mmRes res = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->res_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:set_chatroom_announcement_resp)
  return target;
}

size_t set_chatroom_announcement_resp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:set_chatroom_announcement_resp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .mmRes res = 1;
  if (has_res()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->res_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void set_chatroom_announcement_resp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:set_chatroom_announcement_resp)
  GOOGLE_DCHECK_NE(&from, this);
  const set_chatroom_announcement_resp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const set_chatroom_announcement_resp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:set_chatroom_announcement_resp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:set_chatroom_announcement_resp)
    MergeFrom(*source);
  }
}

void set_chatroom_announcement_resp::MergeFrom(const set_chatroom_announcement_resp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:set_chatroom_announcement_resp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_res()) {
    mutable_res()->::mmRes::MergeFrom(from.res());
  }
}

void set_chatroom_announcement_resp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:set_chatroom_announcement_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void set_chatroom_announcement_resp::CopyFrom(const set_chatroom_announcement_resp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:set_chatroom_announcement_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool set_chatroom_announcement_resp::IsInitialized() const {
  return true;
}

void set_chatroom_announcement_resp::Swap(set_chatroom_announcement_resp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void set_chatroom_announcement_resp::InternalSwap(set_chatroom_announcement_resp* other) {
  std::swap(res_, other->res_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata set_chatroom_announcement_resp::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// set_chatroom_announcement_resp

// optional .mmRes res = 1;
bool set_chatroom_announcement_resp::has_res() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void set_chatroom_announcement_resp::set_has_res() {
  _has_bits_[0] |= 0x00000001u;
}
void set_chatroom_announcement_resp::clear_has_res() {
  _has_bits_[0] &= ~0x00000001u;
}
void set_chatroom_announcement_resp::clear_res() {
  if (res_ != NULL) res_->::mmRes::Clear();
  clear_has_res();
}
const ::mmRes& set_chatroom_announcement_resp::res() const {
  // @@protoc_insertion_point(field_get:set_chatroom_announcement_resp.res)
  return res_ != NULL ? *res_
                         : *::mmRes::internal_default_instance();
}
::mmRes* set_chatroom_announcement_resp::mutable_res() {
  set_has_res();
  if (res_ == NULL) {
    res_ = new ::mmRes;
  }
  // @@protoc_insertion_point(field_mutable:set_chatroom_announcement_resp.res)
  return res_;
}
::mmRes* set_chatroom_announcement_resp::release_res() {
  // @@protoc_insertion_point(field_release:set_chatroom_announcement_resp.res)
  clear_has_res();
  ::mmRes* temp = res_;
  res_ = NULL;
  return temp;
}
void set_chatroom_announcement_resp::set_allocated_res(::mmRes* res) {
  delete res_;
  res_ = res;
  if (res) {
    set_has_res();
  } else {
    clear_has_res();
  }
  // @@protoc_insertion_point(field_set_allocated:set_chatroom_announcement_resp.res)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetLoginQRCodeRequest::kBaseFieldNumber;
const int GetLoginQRCodeRequest::kRandomEncryKeyFieldNumber;
const int GetLoginQRCodeRequest::kOpcodeFieldNumber;
const int GetLoginQRCodeRequest::kDeviceNameFieldNumber;
const int GetLoginQRCodeRequest::kUsernameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetLoginQRCodeRequest::GetLoginQRCodeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GetLoginQRCodeRequest)
}
GetLoginQRCodeRequest::GetLoginQRCodeRequest(const GetLoginQRCodeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  devicename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_devicename()) {
    devicename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicename_);
  }
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.has_base()) {
    base_ = new ::LoginInfo(*from.base_);
  } else {
    base_ = NULL;
  }
  if (from.has_randomencrykey()) {
    randomencrykey_ = new ::sKBuiltinBufferT(*from.randomencrykey_);
  } else {
    randomencrykey_ = NULL;
  }
  opcode_ = from.opcode_;
  // @@protoc_insertion_point(copy_constructor:GetLoginQRCodeRequest)
}

void GetLoginQRCodeRequest::SharedCtor() {
  _cached_size_ = 0;
  devicename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&base_, 0, reinterpret_cast<char*>(&opcode_) -
    reinterpret_cast<char*>(&base_) + sizeof(opcode_));
}

GetLoginQRCodeRequest::~GetLoginQRCodeRequest() {
  // @@protoc_insertion_point(destructor:GetLoginQRCodeRequest)
  SharedDtor();
}

void GetLoginQRCodeRequest::SharedDtor() {
  devicename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete base_;
  }
  if (this != internal_default_instance()) {
    delete randomencrykey_;
  }
}

void GetLoginQRCodeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetLoginQRCodeRequest::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetLoginQRCodeRequest& GetLoginQRCodeRequest::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetLoginQRCodeRequest* GetLoginQRCodeRequest::New(::google::protobuf::Arena* arena) const {
  GetLoginQRCodeRequest* n = new GetLoginQRCodeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetLoginQRCodeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GetLoginQRCodeRequest)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_devicename()) {
      GOOGLE_DCHECK(!devicename_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*devicename_.UnsafeRawStringPointer())->clear();
    }
    if (has_username()) {
      GOOGLE_DCHECK(!username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*username_.UnsafeRawStringPointer())->clear();
    }
    if (has_base()) {
      GOOGLE_DCHECK(base_ != NULL);
      base_->::LoginInfo::Clear();
    }
    if (has_randomencrykey()) {
      GOOGLE_DCHECK(randomencrykey_ != NULL);
      randomencrykey_->::sKBuiltinBufferT::Clear();
    }
  }
  opcode_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetLoginQRCodeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GetLoginQRCodeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .LoginInfo base = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .sKBuiltinBufferT randomEncryKey = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_randomencrykey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 opcode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_opcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string deviceName = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devicename().data(), this->devicename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GetLoginQRCodeRequest.deviceName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string username = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GetLoginQRCodeRequest.username");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GetLoginQRCodeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GetLoginQRCodeRequest)
  return false;
#undef DO_
}

void GetLoginQRCodeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GetLoginQRCodeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .LoginInfo base = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->base_, output);
  }

  // required .sKBuiltinBufferT randomEncryKey = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->randomencrykey_, output);
  }

  // required int32 opcode = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->opcode(), output);
  }

  // optional string deviceName = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicename().data(), this->devicename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GetLoginQRCodeRequest.deviceName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->devicename(), output);
  }

  // optional string username = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GetLoginQRCodeRequest.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->username(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GetLoginQRCodeRequest)
}

::google::protobuf::uint8* GetLoginQRCodeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetLoginQRCodeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .LoginInfo base = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->base_, deterministic, target);
  }

  // required .sKBuiltinBufferT randomEncryKey = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->randomencrykey_, deterministic, target);
  }

  // required int32 opcode = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->opcode(), target);
  }

  // optional string deviceName = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicename().data(), this->devicename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GetLoginQRCodeRequest.deviceName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->devicename(), target);
  }

  // optional string username = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GetLoginQRCodeRequest.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->username(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetLoginQRCodeRequest)
  return target;
}

size_t GetLoginQRCodeRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GetLoginQRCodeRequest)
  size_t total_size = 0;

  if (has_base()) {
    // required .LoginInfo base = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->base_);
  }

  if (has_randomencrykey()) {
    // required .sKBuiltinBufferT randomEncryKey = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->randomencrykey_);
  }

  if (has_opcode()) {
    // required int32 opcode = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->opcode());
  }

  return total_size;
}
size_t GetLoginQRCodeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetLoginQRCodeRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001c) ^ 0x0000001c) == 0) {  // All required fields are present.
    // required .LoginInfo base = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->base_);

    // required .sKBuiltinBufferT randomEncryKey = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->randomencrykey_);

    // required int32 opcode = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->opcode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string deviceName = 4;
    if (has_devicename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicename());
    }

    // optional string username = 5;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLoginQRCodeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GetLoginQRCodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLoginQRCodeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetLoginQRCodeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GetLoginQRCodeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GetLoginQRCodeRequest)
    MergeFrom(*source);
  }
}

void GetLoginQRCodeRequest::MergeFrom(const GetLoginQRCodeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GetLoginQRCodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_devicename();
      devicename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicename_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_base()->::LoginInfo::MergeFrom(from.base());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_randomencrykey()->::sKBuiltinBufferT::MergeFrom(from.randomencrykey());
    }
    if (cached_has_bits & 0x00000010u) {
      opcode_ = from.opcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetLoginQRCodeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GetLoginQRCodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLoginQRCodeRequest::CopyFrom(const GetLoginQRCodeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetLoginQRCodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLoginQRCodeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001c) != 0x0000001c) return false;
  return true;
}

void GetLoginQRCodeRequest::Swap(GetLoginQRCodeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetLoginQRCodeRequest::InternalSwap(GetLoginQRCodeRequest* other) {
  devicename_.Swap(&other->devicename_);
  username_.Swap(&other->username_);
  std::swap(base_, other->base_);
  std::swap(randomencrykey_, other->randomencrykey_);
  std::swap(opcode_, other->opcode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetLoginQRCodeRequest::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetLoginQRCodeRequest

// required .LoginInfo base = 1;
bool GetLoginQRCodeRequest::has_base() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetLoginQRCodeRequest::set_has_base() {
  _has_bits_[0] |= 0x00000004u;
}
void GetLoginQRCodeRequest::clear_has_base() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetLoginQRCodeRequest::clear_base() {
  if (base_ != NULL) base_->::LoginInfo::Clear();
  clear_has_base();
}
const ::LoginInfo& GetLoginQRCodeRequest::base() const {
  // @@protoc_insertion_point(field_get:GetLoginQRCodeRequest.base)
  return base_ != NULL ? *base_
                         : *::LoginInfo::internal_default_instance();
}
::LoginInfo* GetLoginQRCodeRequest::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::LoginInfo;
  }
  // @@protoc_insertion_point(field_mutable:GetLoginQRCodeRequest.base)
  return base_;
}
::LoginInfo* GetLoginQRCodeRequest::release_base() {
  // @@protoc_insertion_point(field_release:GetLoginQRCodeRequest.base)
  clear_has_base();
  ::LoginInfo* temp = base_;
  base_ = NULL;
  return temp;
}
void GetLoginQRCodeRequest::set_allocated_base(::LoginInfo* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:GetLoginQRCodeRequest.base)
}

// required .sKBuiltinBufferT randomEncryKey = 2;
bool GetLoginQRCodeRequest::has_randomencrykey() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GetLoginQRCodeRequest::set_has_randomencrykey() {
  _has_bits_[0] |= 0x00000008u;
}
void GetLoginQRCodeRequest::clear_has_randomencrykey() {
  _has_bits_[0] &= ~0x00000008u;
}
void GetLoginQRCodeRequest::clear_randomencrykey() {
  if (randomencrykey_ != NULL) randomencrykey_->::sKBuiltinBufferT::Clear();
  clear_has_randomencrykey();
}
const ::sKBuiltinBufferT& GetLoginQRCodeRequest::randomencrykey() const {
  // @@protoc_insertion_point(field_get:GetLoginQRCodeRequest.randomEncryKey)
  return randomencrykey_ != NULL ? *randomencrykey_
                         : *::sKBuiltinBufferT::internal_default_instance();
}
::sKBuiltinBufferT* GetLoginQRCodeRequest::mutable_randomencrykey() {
  set_has_randomencrykey();
  if (randomencrykey_ == NULL) {
    randomencrykey_ = new ::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:GetLoginQRCodeRequest.randomEncryKey)
  return randomencrykey_;
}
::sKBuiltinBufferT* GetLoginQRCodeRequest::release_randomencrykey() {
  // @@protoc_insertion_point(field_release:GetLoginQRCodeRequest.randomEncryKey)
  clear_has_randomencrykey();
  ::sKBuiltinBufferT* temp = randomencrykey_;
  randomencrykey_ = NULL;
  return temp;
}
void GetLoginQRCodeRequest::set_allocated_randomencrykey(::sKBuiltinBufferT* randomencrykey) {
  delete randomencrykey_;
  randomencrykey_ = randomencrykey;
  if (randomencrykey) {
    set_has_randomencrykey();
  } else {
    clear_has_randomencrykey();
  }
  // @@protoc_insertion_point(field_set_allocated:GetLoginQRCodeRequest.randomEncryKey)
}

// required int32 opcode = 3;
bool GetLoginQRCodeRequest::has_opcode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GetLoginQRCodeRequest::set_has_opcode() {
  _has_bits_[0] |= 0x00000010u;
}
void GetLoginQRCodeRequest::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000010u;
}
void GetLoginQRCodeRequest::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
::google::protobuf::int32 GetLoginQRCodeRequest::opcode() const {
  // @@protoc_insertion_point(field_get:GetLoginQRCodeRequest.opcode)
  return opcode_;
}
void GetLoginQRCodeRequest::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
  // @@protoc_insertion_point(field_set:GetLoginQRCodeRequest.opcode)
}

// optional string deviceName = 4;
bool GetLoginQRCodeRequest::has_devicename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetLoginQRCodeRequest::set_has_devicename() {
  _has_bits_[0] |= 0x00000001u;
}
void GetLoginQRCodeRequest::clear_has_devicename() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetLoginQRCodeRequest::clear_devicename() {
  devicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_devicename();
}
const ::std::string& GetLoginQRCodeRequest::devicename() const {
  // @@protoc_insertion_point(field_get:GetLoginQRCodeRequest.deviceName)
  return devicename_.GetNoArena();
}
void GetLoginQRCodeRequest::set_devicename(const ::std::string& value) {
  set_has_devicename();
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GetLoginQRCodeRequest.deviceName)
}
#if LANG_CXX11
void GetLoginQRCodeRequest::set_devicename(::std::string&& value) {
  set_has_devicename();
  devicename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetLoginQRCodeRequest.deviceName)
}
#endif
void GetLoginQRCodeRequest::set_devicename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_devicename();
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetLoginQRCodeRequest.deviceName)
}
void GetLoginQRCodeRequest::set_devicename(const char* value, size_t size) {
  set_has_devicename();
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetLoginQRCodeRequest.deviceName)
}
::std::string* GetLoginQRCodeRequest::mutable_devicename() {
  set_has_devicename();
  // @@protoc_insertion_point(field_mutable:GetLoginQRCodeRequest.deviceName)
  return devicename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetLoginQRCodeRequest::release_devicename() {
  // @@protoc_insertion_point(field_release:GetLoginQRCodeRequest.deviceName)
  clear_has_devicename();
  return devicename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetLoginQRCodeRequest::set_allocated_devicename(::std::string* devicename) {
  if (devicename != NULL) {
    set_has_devicename();
  } else {
    clear_has_devicename();
  }
  devicename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicename);
  // @@protoc_insertion_point(field_set_allocated:GetLoginQRCodeRequest.deviceName)
}

// optional string username = 5;
bool GetLoginQRCodeRequest::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetLoginQRCodeRequest::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
void GetLoginQRCodeRequest::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetLoginQRCodeRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
const ::std::string& GetLoginQRCodeRequest::username() const {
  // @@protoc_insertion_point(field_get:GetLoginQRCodeRequest.username)
  return username_.GetNoArena();
}
void GetLoginQRCodeRequest::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GetLoginQRCodeRequest.username)
}
#if LANG_CXX11
void GetLoginQRCodeRequest::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetLoginQRCodeRequest.username)
}
#endif
void GetLoginQRCodeRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetLoginQRCodeRequest.username)
}
void GetLoginQRCodeRequest::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetLoginQRCodeRequest.username)
}
::std::string* GetLoginQRCodeRequest::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:GetLoginQRCodeRequest.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetLoginQRCodeRequest::release_username() {
  // @@protoc_insertion_point(field_release:GetLoginQRCodeRequest.username)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetLoginQRCodeRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:GetLoginQRCodeRequest.username)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int sKBuiltinBufferT::kILenFieldNumber;
const int sKBuiltinBufferT::kBufferFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

sKBuiltinBufferT::sKBuiltinBufferT()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sKBuiltinBufferT)
}
sKBuiltinBufferT::sKBuiltinBufferT(const sKBuiltinBufferT& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  buffer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_buffer()) {
    buffer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buffer_);
  }
  ilen_ = from.ilen_;
  // @@protoc_insertion_point(copy_constructor:sKBuiltinBufferT)
}

void sKBuiltinBufferT::SharedCtor() {
  _cached_size_ = 0;
  buffer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ilen_ = 0;
}

sKBuiltinBufferT::~sKBuiltinBufferT() {
  // @@protoc_insertion_point(destructor:sKBuiltinBufferT)
  SharedDtor();
}

void sKBuiltinBufferT::SharedDtor() {
  buffer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void sKBuiltinBufferT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sKBuiltinBufferT::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const sKBuiltinBufferT& sKBuiltinBufferT::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

sKBuiltinBufferT* sKBuiltinBufferT::New(::google::protobuf::Arena* arena) const {
  sKBuiltinBufferT* n = new sKBuiltinBufferT;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void sKBuiltinBufferT::Clear() {
// @@protoc_insertion_point(message_clear_start:sKBuiltinBufferT)
  if (has_buffer()) {
    GOOGLE_DCHECK(!buffer_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*buffer_.UnsafeRawStringPointer())->clear();
  }
  ilen_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool sKBuiltinBufferT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sKBuiltinBufferT)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ILen = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_ilen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ilen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes Buffer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buffer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sKBuiltinBufferT)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sKBuiltinBufferT)
  return false;
#undef DO_
}

void sKBuiltinBufferT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sKBuiltinBufferT)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ILen = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ilen(), output);
  }

  // optional bytes Buffer = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->buffer(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sKBuiltinBufferT)
}

::google::protobuf::uint8* sKBuiltinBufferT::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sKBuiltinBufferT)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ILen = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ilen(), target);
  }

  // optional bytes Buffer = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->buffer(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sKBuiltinBufferT)
  return target;
}

size_t sKBuiltinBufferT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sKBuiltinBufferT)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes Buffer = 2;
    if (has_buffer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->buffer());
    }

    // optional int32 ILen = 1;
    if (has_ilen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ilen());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sKBuiltinBufferT::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sKBuiltinBufferT)
  GOOGLE_DCHECK_NE(&from, this);
  const sKBuiltinBufferT* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const sKBuiltinBufferT>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sKBuiltinBufferT)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sKBuiltinBufferT)
    MergeFrom(*source);
  }
}

void sKBuiltinBufferT::MergeFrom(const sKBuiltinBufferT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sKBuiltinBufferT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_buffer();
      buffer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buffer_);
    }
    if (cached_has_bits & 0x00000002u) {
      ilen_ = from.ilen_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void sKBuiltinBufferT::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sKBuiltinBufferT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sKBuiltinBufferT::CopyFrom(const sKBuiltinBufferT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sKBuiltinBufferT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sKBuiltinBufferT::IsInitialized() const {
  return true;
}

void sKBuiltinBufferT::Swap(sKBuiltinBufferT* other) {
  if (other == this) return;
  InternalSwap(other);
}
void sKBuiltinBufferT::InternalSwap(sKBuiltinBufferT* other) {
  buffer_.Swap(&other->buffer_);
  std::swap(ilen_, other->ilen_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata sKBuiltinBufferT::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// sKBuiltinBufferT

// optional int32 ILen = 1;
bool sKBuiltinBufferT::has_ilen() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void sKBuiltinBufferT::set_has_ilen() {
  _has_bits_[0] |= 0x00000002u;
}
void sKBuiltinBufferT::clear_has_ilen() {
  _has_bits_[0] &= ~0x00000002u;
}
void sKBuiltinBufferT::clear_ilen() {
  ilen_ = 0;
  clear_has_ilen();
}
::google::protobuf::int32 sKBuiltinBufferT::ilen() const {
  // @@protoc_insertion_point(field_get:sKBuiltinBufferT.ILen)
  return ilen_;
}
void sKBuiltinBufferT::set_ilen(::google::protobuf::int32 value) {
  set_has_ilen();
  ilen_ = value;
  // @@protoc_insertion_point(field_set:sKBuiltinBufferT.ILen)
}

// optional bytes Buffer = 2;
bool sKBuiltinBufferT::has_buffer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void sKBuiltinBufferT::set_has_buffer() {
  _has_bits_[0] |= 0x00000001u;
}
void sKBuiltinBufferT::clear_has_buffer() {
  _has_bits_[0] &= ~0x00000001u;
}
void sKBuiltinBufferT::clear_buffer() {
  buffer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_buffer();
}
const ::std::string& sKBuiltinBufferT::buffer() const {
  // @@protoc_insertion_point(field_get:sKBuiltinBufferT.Buffer)
  return buffer_.GetNoArena();
}
void sKBuiltinBufferT::set_buffer(const ::std::string& value) {
  set_has_buffer();
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sKBuiltinBufferT.Buffer)
}
#if LANG_CXX11
void sKBuiltinBufferT::set_buffer(::std::string&& value) {
  set_has_buffer();
  buffer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sKBuiltinBufferT.Buffer)
}
#endif
void sKBuiltinBufferT::set_buffer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_buffer();
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sKBuiltinBufferT.Buffer)
}
void sKBuiltinBufferT::set_buffer(const void* value, size_t size) {
  set_has_buffer();
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sKBuiltinBufferT.Buffer)
}
::std::string* sKBuiltinBufferT::mutable_buffer() {
  set_has_buffer();
  // @@protoc_insertion_point(field_mutable:sKBuiltinBufferT.Buffer)
  return buffer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* sKBuiltinBufferT::release_buffer() {
  // @@protoc_insertion_point(field_release:sKBuiltinBufferT.Buffer)
  clear_has_buffer();
  return buffer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void sKBuiltinBufferT::set_allocated_buffer(::std::string* buffer) {
  if (buffer != NULL) {
    set_has_buffer();
  } else {
    clear_has_buffer();
  }
  buffer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buffer);
  // @@protoc_insertion_point(field_set_allocated:sKBuiltinBufferT.Buffer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetLoginQRCodeResponse::kBaseFieldNumber;
const int GetLoginQRCodeResponse::kQRCodeFieldNumber;
const int GetLoginQRCodeResponse::kUUIDFieldNumber;
const int GetLoginQRCodeResponse::kCheckTimeFieldNumber;
const int GetLoginQRCodeResponse::kNotifyKeyFieldNumber;
const int GetLoginQRCodeResponse::kExpiredTimeFieldNumber;
const int GetLoginQRCodeResponse::kBlueToothBroadCastUuidFieldNumber;
const int GetLoginQRCodeResponse::kBlueToothBroadCastContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetLoginQRCodeResponse::GetLoginQRCodeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GetLoginQRCodeResponse)
}
GetLoginQRCodeResponse::GetLoginQRCodeResponse(const GetLoginQRCodeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_uuid()) {
    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  bluetoothbroadcastuuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bluetoothbroadcastuuid()) {
    bluetoothbroadcastuuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bluetoothbroadcastuuid_);
  }
  if (from.has_base()) {
    base_ = new ::mmRes(*from.base_);
  } else {
    base_ = NULL;
  }
  if (from.has_qrcode()) {
    qrcode_ = new ::sKBuiltinBufferT(*from.qrcode_);
  } else {
    qrcode_ = NULL;
  }
  if (from.has_notifykey()) {
    notifykey_ = new ::sKBuiltinBufferT(*from.notifykey_);
  } else {
    notifykey_ = NULL;
  }
  if (from.has_bluetoothbroadcastcontent()) {
    bluetoothbroadcastcontent_ = new ::sKBuiltinBufferT(*from.bluetoothbroadcastcontent_);
  } else {
    bluetoothbroadcastcontent_ = NULL;
  }
  ::memcpy(&checktime_, &from.checktime_,
    reinterpret_cast<char*>(&expiredtime_) -
    reinterpret_cast<char*>(&checktime_) + sizeof(expiredtime_));
  // @@protoc_insertion_point(copy_constructor:GetLoginQRCodeResponse)
}

void GetLoginQRCodeResponse::SharedCtor() {
  _cached_size_ = 0;
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bluetoothbroadcastuuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&base_, 0, reinterpret_cast<char*>(&expiredtime_) -
    reinterpret_cast<char*>(&base_) + sizeof(expiredtime_));
}

GetLoginQRCodeResponse::~GetLoginQRCodeResponse() {
  // @@protoc_insertion_point(destructor:GetLoginQRCodeResponse)
  SharedDtor();
}

void GetLoginQRCodeResponse::SharedDtor() {
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bluetoothbroadcastuuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete base_;
  }
  if (this != internal_default_instance()) {
    delete qrcode_;
  }
  if (this != internal_default_instance()) {
    delete notifykey_;
  }
  if (this != internal_default_instance()) {
    delete bluetoothbroadcastcontent_;
  }
}

void GetLoginQRCodeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetLoginQRCodeResponse::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetLoginQRCodeResponse& GetLoginQRCodeResponse::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetLoginQRCodeResponse* GetLoginQRCodeResponse::New(::google::protobuf::Arena* arena) const {
  GetLoginQRCodeResponse* n = new GetLoginQRCodeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetLoginQRCodeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GetLoginQRCodeResponse)
  if (_has_bits_[0 / 32] & 63u) {
    if (has_uuid()) {
      GOOGLE_DCHECK(!uuid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*uuid_.UnsafeRawStringPointer())->clear();
    }
    if (has_bluetoothbroadcastuuid()) {
      GOOGLE_DCHECK(!bluetoothbroadcastuuid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bluetoothbroadcastuuid_.UnsafeRawStringPointer())->clear();
    }
    if (has_base()) {
      GOOGLE_DCHECK(base_ != NULL);
      base_->::mmRes::Clear();
    }
    if (has_qrcode()) {
      GOOGLE_DCHECK(qrcode_ != NULL);
      qrcode_->::sKBuiltinBufferT::Clear();
    }
    if (has_notifykey()) {
      GOOGLE_DCHECK(notifykey_ != NULL);
      notifykey_->::sKBuiltinBufferT::Clear();
    }
    if (has_bluetoothbroadcastcontent()) {
      GOOGLE_DCHECK(bluetoothbroadcastcontent_ != NULL);
      bluetoothbroadcastcontent_->::sKBuiltinBufferT::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 192u) {
    ::memset(&checktime_, 0, reinterpret_cast<char*>(&expiredtime_) -
      reinterpret_cast<char*>(&checktime_) + sizeof(expiredtime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetLoginQRCodeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GetLoginQRCodeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mmRes Base = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .sKBuiltinBufferT QRCode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_qrcode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string UUID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GetLoginQRCodeResponse.UUID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 CheckTime = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_checktime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checktime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sKBuiltinBufferT NotifyKey = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_notifykey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ExpiredTime = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_expiredtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expiredtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string BlueToothBroadCastUuid = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bluetoothbroadcastuuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bluetoothbroadcastuuid().data(), this->bluetoothbroadcastuuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GetLoginQRCodeResponse.BlueToothBroadCastUuid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sKBuiltinBufferT BlueToothBroadCastContent = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bluetoothbroadcastcontent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GetLoginQRCodeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GetLoginQRCodeResponse)
  return false;
#undef DO_
}

void GetLoginQRCodeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GetLoginQRCodeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mmRes Base = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->base_, output);
  }

  // required .sKBuiltinBufferT QRCode = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->qrcode_, output);
  }

  // required string UUID = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GetLoginQRCodeResponse.UUID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->uuid(), output);
  }

  // required int32 CheckTime = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->checktime(), output);
  }

  // optional .sKBuiltinBufferT NotifyKey = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->notifykey_, output);
  }

  // optional int32 ExpiredTime = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->expiredtime(), output);
  }

  // optional string BlueToothBroadCastUuid = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bluetoothbroadcastuuid().data(), this->bluetoothbroadcastuuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GetLoginQRCodeResponse.BlueToothBroadCastUuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->bluetoothbroadcastuuid(), output);
  }

  // optional .sKBuiltinBufferT BlueToothBroadCastContent = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->bluetoothbroadcastcontent_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GetLoginQRCodeResponse)
}

::google::protobuf::uint8* GetLoginQRCodeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetLoginQRCodeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mmRes Base = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->base_, deterministic, target);
  }

  // required .sKBuiltinBufferT QRCode = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->qrcode_, deterministic, target);
  }

  // required string UUID = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GetLoginQRCodeResponse.UUID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->uuid(), target);
  }

  // required int32 CheckTime = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->checktime(), target);
  }

  // optional .sKBuiltinBufferT NotifyKey = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->notifykey_, deterministic, target);
  }

  // optional int32 ExpiredTime = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->expiredtime(), target);
  }

  // optional string BlueToothBroadCastUuid = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bluetoothbroadcastuuid().data(), this->bluetoothbroadcastuuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GetLoginQRCodeResponse.BlueToothBroadCastUuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->bluetoothbroadcastuuid(), target);
  }

  // optional .sKBuiltinBufferT BlueToothBroadCastContent = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->bluetoothbroadcastcontent_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetLoginQRCodeResponse)
  return target;
}

size_t GetLoginQRCodeResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GetLoginQRCodeResponse)
  size_t total_size = 0;

  if (has_uuid()) {
    // required string UUID = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuid());
  }

  if (has_base()) {
    // required .mmRes Base = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->base_);
  }

  if (has_qrcode()) {
    // required .sKBuiltinBufferT QRCode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->qrcode_);
  }

  if (has_checktime()) {
    // required int32 CheckTime = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->checktime());
  }

  return total_size;
}
size_t GetLoginQRCodeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetLoginQRCodeResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000004d) ^ 0x0000004d) == 0) {  // All required fields are present.
    // required string UUID = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuid());

    // required .mmRes Base = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->base_);

    // required .sKBuiltinBufferT QRCode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->qrcode_);

    // required int32 CheckTime = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->checktime());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string BlueToothBroadCastUuid = 7;
  if (has_bluetoothbroadcastuuid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bluetoothbroadcastuuid());
  }

  if (_has_bits_[0 / 32] & 48u) {
    // optional .sKBuiltinBufferT NotifyKey = 5;
    if (has_notifykey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->notifykey_);
    }

    // optional .sKBuiltinBufferT BlueToothBroadCastContent = 8;
    if (has_bluetoothbroadcastcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bluetoothbroadcastcontent_);
    }

  }
  // optional int32 ExpiredTime = 6;
  if (has_expiredtime()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->expiredtime());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLoginQRCodeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GetLoginQRCodeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLoginQRCodeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetLoginQRCodeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GetLoginQRCodeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GetLoginQRCodeResponse)
    MergeFrom(*source);
  }
}

void GetLoginQRCodeResponse::MergeFrom(const GetLoginQRCodeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GetLoginQRCodeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_uuid();
      uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_bluetoothbroadcastuuid();
      bluetoothbroadcastuuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bluetoothbroadcastuuid_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_base()->::mmRes::MergeFrom(from.base());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_qrcode()->::sKBuiltinBufferT::MergeFrom(from.qrcode());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_notifykey()->::sKBuiltinBufferT::MergeFrom(from.notifykey());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_bluetoothbroadcastcontent()->::sKBuiltinBufferT::MergeFrom(from.bluetoothbroadcastcontent());
    }
    if (cached_has_bits & 0x00000040u) {
      checktime_ = from.checktime_;
    }
    if (cached_has_bits & 0x00000080u) {
      expiredtime_ = from.expiredtime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetLoginQRCodeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GetLoginQRCodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLoginQRCodeResponse::CopyFrom(const GetLoginQRCodeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetLoginQRCodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLoginQRCodeResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000004d) != 0x0000004d) return false;
  return true;
}

void GetLoginQRCodeResponse::Swap(GetLoginQRCodeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetLoginQRCodeResponse::InternalSwap(GetLoginQRCodeResponse* other) {
  uuid_.Swap(&other->uuid_);
  bluetoothbroadcastuuid_.Swap(&other->bluetoothbroadcastuuid_);
  std::swap(base_, other->base_);
  std::swap(qrcode_, other->qrcode_);
  std::swap(notifykey_, other->notifykey_);
  std::swap(bluetoothbroadcastcontent_, other->bluetoothbroadcastcontent_);
  std::swap(checktime_, other->checktime_);
  std::swap(expiredtime_, other->expiredtime_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetLoginQRCodeResponse::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetLoginQRCodeResponse

// required .mmRes Base = 1;
bool GetLoginQRCodeResponse::has_base() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetLoginQRCodeResponse::set_has_base() {
  _has_bits_[0] |= 0x00000004u;
}
void GetLoginQRCodeResponse::clear_has_base() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetLoginQRCodeResponse::clear_base() {
  if (base_ != NULL) base_->::mmRes::Clear();
  clear_has_base();
}
const ::mmRes& GetLoginQRCodeResponse::base() const {
  // @@protoc_insertion_point(field_get:GetLoginQRCodeResponse.Base)
  return base_ != NULL ? *base_
                         : *::mmRes::internal_default_instance();
}
::mmRes* GetLoginQRCodeResponse::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::mmRes;
  }
  // @@protoc_insertion_point(field_mutable:GetLoginQRCodeResponse.Base)
  return base_;
}
::mmRes* GetLoginQRCodeResponse::release_base() {
  // @@protoc_insertion_point(field_release:GetLoginQRCodeResponse.Base)
  clear_has_base();
  ::mmRes* temp = base_;
  base_ = NULL;
  return temp;
}
void GetLoginQRCodeResponse::set_allocated_base(::mmRes* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:GetLoginQRCodeResponse.Base)
}

// required .sKBuiltinBufferT QRCode = 2;
bool GetLoginQRCodeResponse::has_qrcode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GetLoginQRCodeResponse::set_has_qrcode() {
  _has_bits_[0] |= 0x00000008u;
}
void GetLoginQRCodeResponse::clear_has_qrcode() {
  _has_bits_[0] &= ~0x00000008u;
}
void GetLoginQRCodeResponse::clear_qrcode() {
  if (qrcode_ != NULL) qrcode_->::sKBuiltinBufferT::Clear();
  clear_has_qrcode();
}
const ::sKBuiltinBufferT& GetLoginQRCodeResponse::qrcode() const {
  // @@protoc_insertion_point(field_get:GetLoginQRCodeResponse.QRCode)
  return qrcode_ != NULL ? *qrcode_
                         : *::sKBuiltinBufferT::internal_default_instance();
}
::sKBuiltinBufferT* GetLoginQRCodeResponse::mutable_qrcode() {
  set_has_qrcode();
  if (qrcode_ == NULL) {
    qrcode_ = new ::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:GetLoginQRCodeResponse.QRCode)
  return qrcode_;
}
::sKBuiltinBufferT* GetLoginQRCodeResponse::release_qrcode() {
  // @@protoc_insertion_point(field_release:GetLoginQRCodeResponse.QRCode)
  clear_has_qrcode();
  ::sKBuiltinBufferT* temp = qrcode_;
  qrcode_ = NULL;
  return temp;
}
void GetLoginQRCodeResponse::set_allocated_qrcode(::sKBuiltinBufferT* qrcode) {
  delete qrcode_;
  qrcode_ = qrcode;
  if (qrcode) {
    set_has_qrcode();
  } else {
    clear_has_qrcode();
  }
  // @@protoc_insertion_point(field_set_allocated:GetLoginQRCodeResponse.QRCode)
}

// required string UUID = 3;
bool GetLoginQRCodeResponse::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetLoginQRCodeResponse::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
void GetLoginQRCodeResponse::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetLoginQRCodeResponse::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uuid();
}
const ::std::string& GetLoginQRCodeResponse::uuid() const {
  // @@protoc_insertion_point(field_get:GetLoginQRCodeResponse.UUID)
  return uuid_.GetNoArena();
}
void GetLoginQRCodeResponse::set_uuid(const ::std::string& value) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GetLoginQRCodeResponse.UUID)
}
#if LANG_CXX11
void GetLoginQRCodeResponse::set_uuid(::std::string&& value) {
  set_has_uuid();
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetLoginQRCodeResponse.UUID)
}
#endif
void GetLoginQRCodeResponse::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetLoginQRCodeResponse.UUID)
}
void GetLoginQRCodeResponse::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetLoginQRCodeResponse.UUID)
}
::std::string* GetLoginQRCodeResponse::mutable_uuid() {
  set_has_uuid();
  // @@protoc_insertion_point(field_mutable:GetLoginQRCodeResponse.UUID)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetLoginQRCodeResponse::release_uuid() {
  // @@protoc_insertion_point(field_release:GetLoginQRCodeResponse.UUID)
  clear_has_uuid();
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetLoginQRCodeResponse::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    set_has_uuid();
  } else {
    clear_has_uuid();
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:GetLoginQRCodeResponse.UUID)
}

// required int32 CheckTime = 4;
bool GetLoginQRCodeResponse::has_checktime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void GetLoginQRCodeResponse::set_has_checktime() {
  _has_bits_[0] |= 0x00000040u;
}
void GetLoginQRCodeResponse::clear_has_checktime() {
  _has_bits_[0] &= ~0x00000040u;
}
void GetLoginQRCodeResponse::clear_checktime() {
  checktime_ = 0;
  clear_has_checktime();
}
::google::protobuf::int32 GetLoginQRCodeResponse::checktime() const {
  // @@protoc_insertion_point(field_get:GetLoginQRCodeResponse.CheckTime)
  return checktime_;
}
void GetLoginQRCodeResponse::set_checktime(::google::protobuf::int32 value) {
  set_has_checktime();
  checktime_ = value;
  // @@protoc_insertion_point(field_set:GetLoginQRCodeResponse.CheckTime)
}

// optional .sKBuiltinBufferT NotifyKey = 5;
bool GetLoginQRCodeResponse::has_notifykey() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GetLoginQRCodeResponse::set_has_notifykey() {
  _has_bits_[0] |= 0x00000010u;
}
void GetLoginQRCodeResponse::clear_has_notifykey() {
  _has_bits_[0] &= ~0x00000010u;
}
void GetLoginQRCodeResponse::clear_notifykey() {
  if (notifykey_ != NULL) notifykey_->::sKBuiltinBufferT::Clear();
  clear_has_notifykey();
}
const ::sKBuiltinBufferT& GetLoginQRCodeResponse::notifykey() const {
  // @@protoc_insertion_point(field_get:GetLoginQRCodeResponse.NotifyKey)
  return notifykey_ != NULL ? *notifykey_
                         : *::sKBuiltinBufferT::internal_default_instance();
}
::sKBuiltinBufferT* GetLoginQRCodeResponse::mutable_notifykey() {
  set_has_notifykey();
  if (notifykey_ == NULL) {
    notifykey_ = new ::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:GetLoginQRCodeResponse.NotifyKey)
  return notifykey_;
}
::sKBuiltinBufferT* GetLoginQRCodeResponse::release_notifykey() {
  // @@protoc_insertion_point(field_release:GetLoginQRCodeResponse.NotifyKey)
  clear_has_notifykey();
  ::sKBuiltinBufferT* temp = notifykey_;
  notifykey_ = NULL;
  return temp;
}
void GetLoginQRCodeResponse::set_allocated_notifykey(::sKBuiltinBufferT* notifykey) {
  delete notifykey_;
  notifykey_ = notifykey;
  if (notifykey) {
    set_has_notifykey();
  } else {
    clear_has_notifykey();
  }
  // @@protoc_insertion_point(field_set_allocated:GetLoginQRCodeResponse.NotifyKey)
}

// optional int32 ExpiredTime = 6;
bool GetLoginQRCodeResponse::has_expiredtime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void GetLoginQRCodeResponse::set_has_expiredtime() {
  _has_bits_[0] |= 0x00000080u;
}
void GetLoginQRCodeResponse::clear_has_expiredtime() {
  _has_bits_[0] &= ~0x00000080u;
}
void GetLoginQRCodeResponse::clear_expiredtime() {
  expiredtime_ = 0;
  clear_has_expiredtime();
}
::google::protobuf::int32 GetLoginQRCodeResponse::expiredtime() const {
  // @@protoc_insertion_point(field_get:GetLoginQRCodeResponse.ExpiredTime)
  return expiredtime_;
}
void GetLoginQRCodeResponse::set_expiredtime(::google::protobuf::int32 value) {
  set_has_expiredtime();
  expiredtime_ = value;
  // @@protoc_insertion_point(field_set:GetLoginQRCodeResponse.ExpiredTime)
}

// optional string BlueToothBroadCastUuid = 7;
bool GetLoginQRCodeResponse::has_bluetoothbroadcastuuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetLoginQRCodeResponse::set_has_bluetoothbroadcastuuid() {
  _has_bits_[0] |= 0x00000002u;
}
void GetLoginQRCodeResponse::clear_has_bluetoothbroadcastuuid() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetLoginQRCodeResponse::clear_bluetoothbroadcastuuid() {
  bluetoothbroadcastuuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bluetoothbroadcastuuid();
}
const ::std::string& GetLoginQRCodeResponse::bluetoothbroadcastuuid() const {
  // @@protoc_insertion_point(field_get:GetLoginQRCodeResponse.BlueToothBroadCastUuid)
  return bluetoothbroadcastuuid_.GetNoArena();
}
void GetLoginQRCodeResponse::set_bluetoothbroadcastuuid(const ::std::string& value) {
  set_has_bluetoothbroadcastuuid();
  bluetoothbroadcastuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GetLoginQRCodeResponse.BlueToothBroadCastUuid)
}
#if LANG_CXX11
void GetLoginQRCodeResponse::set_bluetoothbroadcastuuid(::std::string&& value) {
  set_has_bluetoothbroadcastuuid();
  bluetoothbroadcastuuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetLoginQRCodeResponse.BlueToothBroadCastUuid)
}
#endif
void GetLoginQRCodeResponse::set_bluetoothbroadcastuuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bluetoothbroadcastuuid();
  bluetoothbroadcastuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetLoginQRCodeResponse.BlueToothBroadCastUuid)
}
void GetLoginQRCodeResponse::set_bluetoothbroadcastuuid(const char* value, size_t size) {
  set_has_bluetoothbroadcastuuid();
  bluetoothbroadcastuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetLoginQRCodeResponse.BlueToothBroadCastUuid)
}
::std::string* GetLoginQRCodeResponse::mutable_bluetoothbroadcastuuid() {
  set_has_bluetoothbroadcastuuid();
  // @@protoc_insertion_point(field_mutable:GetLoginQRCodeResponse.BlueToothBroadCastUuid)
  return bluetoothbroadcastuuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetLoginQRCodeResponse::release_bluetoothbroadcastuuid() {
  // @@protoc_insertion_point(field_release:GetLoginQRCodeResponse.BlueToothBroadCastUuid)
  clear_has_bluetoothbroadcastuuid();
  return bluetoothbroadcastuuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetLoginQRCodeResponse::set_allocated_bluetoothbroadcastuuid(::std::string* bluetoothbroadcastuuid) {
  if (bluetoothbroadcastuuid != NULL) {
    set_has_bluetoothbroadcastuuid();
  } else {
    clear_has_bluetoothbroadcastuuid();
  }
  bluetoothbroadcastuuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bluetoothbroadcastuuid);
  // @@protoc_insertion_point(field_set_allocated:GetLoginQRCodeResponse.BlueToothBroadCastUuid)
}

// optional .sKBuiltinBufferT BlueToothBroadCastContent = 8;
bool GetLoginQRCodeResponse::has_bluetoothbroadcastcontent() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void GetLoginQRCodeResponse::set_has_bluetoothbroadcastcontent() {
  _has_bits_[0] |= 0x00000020u;
}
void GetLoginQRCodeResponse::clear_has_bluetoothbroadcastcontent() {
  _has_bits_[0] &= ~0x00000020u;
}
void GetLoginQRCodeResponse::clear_bluetoothbroadcastcontent() {
  if (bluetoothbroadcastcontent_ != NULL) bluetoothbroadcastcontent_->::sKBuiltinBufferT::Clear();
  clear_has_bluetoothbroadcastcontent();
}
const ::sKBuiltinBufferT& GetLoginQRCodeResponse::bluetoothbroadcastcontent() const {
  // @@protoc_insertion_point(field_get:GetLoginQRCodeResponse.BlueToothBroadCastContent)
  return bluetoothbroadcastcontent_ != NULL ? *bluetoothbroadcastcontent_
                         : *::sKBuiltinBufferT::internal_default_instance();
}
::sKBuiltinBufferT* GetLoginQRCodeResponse::mutable_bluetoothbroadcastcontent() {
  set_has_bluetoothbroadcastcontent();
  if (bluetoothbroadcastcontent_ == NULL) {
    bluetoothbroadcastcontent_ = new ::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:GetLoginQRCodeResponse.BlueToothBroadCastContent)
  return bluetoothbroadcastcontent_;
}
::sKBuiltinBufferT* GetLoginQRCodeResponse::release_bluetoothbroadcastcontent() {
  // @@protoc_insertion_point(field_release:GetLoginQRCodeResponse.BlueToothBroadCastContent)
  clear_has_bluetoothbroadcastcontent();
  ::sKBuiltinBufferT* temp = bluetoothbroadcastcontent_;
  bluetoothbroadcastcontent_ = NULL;
  return temp;
}
void GetLoginQRCodeResponse::set_allocated_bluetoothbroadcastcontent(::sKBuiltinBufferT* bluetoothbroadcastcontent) {
  delete bluetoothbroadcastcontent_;
  bluetoothbroadcastcontent_ = bluetoothbroadcastcontent;
  if (bluetoothbroadcastcontent) {
    set_has_bluetoothbroadcastcontent();
  } else {
    clear_has_bluetoothbroadcastcontent();
  }
  // @@protoc_insertion_point(field_set_allocated:GetLoginQRCodeResponse.BlueToothBroadCastContent)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckLoginQRCodeRequest::kBaseFieldNumber;
const int CheckLoginQRCodeRequest::kRandomEncryKeyFieldNumber;
const int CheckLoginQRCodeRequest::kUuidFieldNumber;
const int CheckLoginQRCodeRequest::kTimeStampFieldNumber;
const int CheckLoginQRCodeRequest::kOpcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckLoginQRCodeRequest::CheckLoginQRCodeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CheckLoginQRCodeRequest)
}
CheckLoginQRCodeRequest::CheckLoginQRCodeRequest(const CheckLoginQRCodeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_uuid()) {
    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.has_base()) {
    base_ = new ::LoginInfo(*from.base_);
  } else {
    base_ = NULL;
  }
  if (from.has_randomencrykey()) {
    randomencrykey_ = new ::sKBuiltinBufferT(*from.randomencrykey_);
  } else {
    randomencrykey_ = NULL;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    reinterpret_cast<char*>(&opcode_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(opcode_));
  // @@protoc_insertion_point(copy_constructor:CheckLoginQRCodeRequest)
}

void CheckLoginQRCodeRequest::SharedCtor() {
  _cached_size_ = 0;
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&base_, 0, reinterpret_cast<char*>(&opcode_) -
    reinterpret_cast<char*>(&base_) + sizeof(opcode_));
}

CheckLoginQRCodeRequest::~CheckLoginQRCodeRequest() {
  // @@protoc_insertion_point(destructor:CheckLoginQRCodeRequest)
  SharedDtor();
}

void CheckLoginQRCodeRequest::SharedDtor() {
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete base_;
  }
  if (this != internal_default_instance()) {
    delete randomencrykey_;
  }
}

void CheckLoginQRCodeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckLoginQRCodeRequest::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CheckLoginQRCodeRequest& CheckLoginQRCodeRequest::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

CheckLoginQRCodeRequest* CheckLoginQRCodeRequest::New(::google::protobuf::Arena* arena) const {
  CheckLoginQRCodeRequest* n = new CheckLoginQRCodeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CheckLoginQRCodeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CheckLoginQRCodeRequest)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_uuid()) {
      GOOGLE_DCHECK(!uuid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*uuid_.UnsafeRawStringPointer())->clear();
    }
    if (has_base()) {
      GOOGLE_DCHECK(base_ != NULL);
      base_->::LoginInfo::Clear();
    }
    if (has_randomencrykey()) {
      GOOGLE_DCHECK(randomencrykey_ != NULL);
      randomencrykey_->::sKBuiltinBufferT::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 24u) {
    ::memset(&timestamp_, 0, reinterpret_cast<char*>(&opcode_) -
      reinterpret_cast<char*>(&timestamp_) + sizeof(opcode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CheckLoginQRCodeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CheckLoginQRCodeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .LoginInfo base = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .sKBuiltinBufferT randomEncryKey = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_randomencrykey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string uuid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CheckLoginQRCodeRequest.uuid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 timeStamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 opcode = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_opcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CheckLoginQRCodeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CheckLoginQRCodeRequest)
  return false;
#undef DO_
}

void CheckLoginQRCodeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CheckLoginQRCodeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .LoginInfo base = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->base_, output);
  }

  // required .sKBuiltinBufferT randomEncryKey = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->randomencrykey_, output);
  }

  // required string uuid = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CheckLoginQRCodeRequest.uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->uuid(), output);
  }

  // required int32 timeStamp = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->timestamp(), output);
  }

  // required int32 opcode = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->opcode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CheckLoginQRCodeRequest)
}

::google::protobuf::uint8* CheckLoginQRCodeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CheckLoginQRCodeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .LoginInfo base = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->base_, deterministic, target);
  }

  // required .sKBuiltinBufferT randomEncryKey = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->randomencrykey_, deterministic, target);
  }

  // required string uuid = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CheckLoginQRCodeRequest.uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->uuid(), target);
  }

  // required int32 timeStamp = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->timestamp(), target);
  }

  // required int32 opcode = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->opcode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CheckLoginQRCodeRequest)
  return target;
}

size_t CheckLoginQRCodeRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CheckLoginQRCodeRequest)
  size_t total_size = 0;

  if (has_uuid()) {
    // required string uuid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuid());
  }

  if (has_base()) {
    // required .LoginInfo base = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->base_);
  }

  if (has_randomencrykey()) {
    // required .sKBuiltinBufferT randomEncryKey = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->randomencrykey_);
  }

  if (has_timestamp()) {
    // required int32 timeStamp = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->timestamp());
  }

  if (has_opcode()) {
    // required int32 opcode = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->opcode());
  }

  return total_size;
}
size_t CheckLoginQRCodeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CheckLoginQRCodeRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string uuid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuid());

    // required .LoginInfo base = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->base_);

    // required .sKBuiltinBufferT randomEncryKey = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->randomencrykey_);

    // required int32 timeStamp = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->timestamp());

    // required int32 opcode = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->opcode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckLoginQRCodeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CheckLoginQRCodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckLoginQRCodeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CheckLoginQRCodeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CheckLoginQRCodeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CheckLoginQRCodeRequest)
    MergeFrom(*source);
  }
}

void CheckLoginQRCodeRequest::MergeFrom(const CheckLoginQRCodeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CheckLoginQRCodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_uuid();
      uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_base()->::LoginInfo::MergeFrom(from.base());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_randomencrykey()->::sKBuiltinBufferT::MergeFrom(from.randomencrykey());
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      opcode_ = from.opcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CheckLoginQRCodeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CheckLoginQRCodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckLoginQRCodeRequest::CopyFrom(const CheckLoginQRCodeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CheckLoginQRCodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckLoginQRCodeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void CheckLoginQRCodeRequest::Swap(CheckLoginQRCodeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckLoginQRCodeRequest::InternalSwap(CheckLoginQRCodeRequest* other) {
  uuid_.Swap(&other->uuid_);
  std::swap(base_, other->base_);
  std::swap(randomencrykey_, other->randomencrykey_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(opcode_, other->opcode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CheckLoginQRCodeRequest::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckLoginQRCodeRequest

// required .LoginInfo base = 1;
bool CheckLoginQRCodeRequest::has_base() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CheckLoginQRCodeRequest::set_has_base() {
  _has_bits_[0] |= 0x00000002u;
}
void CheckLoginQRCodeRequest::clear_has_base() {
  _has_bits_[0] &= ~0x00000002u;
}
void CheckLoginQRCodeRequest::clear_base() {
  if (base_ != NULL) base_->::LoginInfo::Clear();
  clear_has_base();
}
const ::LoginInfo& CheckLoginQRCodeRequest::base() const {
  // @@protoc_insertion_point(field_get:CheckLoginQRCodeRequest.base)
  return base_ != NULL ? *base_
                         : *::LoginInfo::internal_default_instance();
}
::LoginInfo* CheckLoginQRCodeRequest::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::LoginInfo;
  }
  // @@protoc_insertion_point(field_mutable:CheckLoginQRCodeRequest.base)
  return base_;
}
::LoginInfo* CheckLoginQRCodeRequest::release_base() {
  // @@protoc_insertion_point(field_release:CheckLoginQRCodeRequest.base)
  clear_has_base();
  ::LoginInfo* temp = base_;
  base_ = NULL;
  return temp;
}
void CheckLoginQRCodeRequest::set_allocated_base(::LoginInfo* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:CheckLoginQRCodeRequest.base)
}

// required .sKBuiltinBufferT randomEncryKey = 2;
bool CheckLoginQRCodeRequest::has_randomencrykey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CheckLoginQRCodeRequest::set_has_randomencrykey() {
  _has_bits_[0] |= 0x00000004u;
}
void CheckLoginQRCodeRequest::clear_has_randomencrykey() {
  _has_bits_[0] &= ~0x00000004u;
}
void CheckLoginQRCodeRequest::clear_randomencrykey() {
  if (randomencrykey_ != NULL) randomencrykey_->::sKBuiltinBufferT::Clear();
  clear_has_randomencrykey();
}
const ::sKBuiltinBufferT& CheckLoginQRCodeRequest::randomencrykey() const {
  // @@protoc_insertion_point(field_get:CheckLoginQRCodeRequest.randomEncryKey)
  return randomencrykey_ != NULL ? *randomencrykey_
                         : *::sKBuiltinBufferT::internal_default_instance();
}
::sKBuiltinBufferT* CheckLoginQRCodeRequest::mutable_randomencrykey() {
  set_has_randomencrykey();
  if (randomencrykey_ == NULL) {
    randomencrykey_ = new ::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:CheckLoginQRCodeRequest.randomEncryKey)
  return randomencrykey_;
}
::sKBuiltinBufferT* CheckLoginQRCodeRequest::release_randomencrykey() {
  // @@protoc_insertion_point(field_release:CheckLoginQRCodeRequest.randomEncryKey)
  clear_has_randomencrykey();
  ::sKBuiltinBufferT* temp = randomencrykey_;
  randomencrykey_ = NULL;
  return temp;
}
void CheckLoginQRCodeRequest::set_allocated_randomencrykey(::sKBuiltinBufferT* randomencrykey) {
  delete randomencrykey_;
  randomencrykey_ = randomencrykey;
  if (randomencrykey) {
    set_has_randomencrykey();
  } else {
    clear_has_randomencrykey();
  }
  // @@protoc_insertion_point(field_set_allocated:CheckLoginQRCodeRequest.randomEncryKey)
}

// required string uuid = 3;
bool CheckLoginQRCodeRequest::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CheckLoginQRCodeRequest::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
void CheckLoginQRCodeRequest::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CheckLoginQRCodeRequest::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uuid();
}
const ::std::string& CheckLoginQRCodeRequest::uuid() const {
  // @@protoc_insertion_point(field_get:CheckLoginQRCodeRequest.uuid)
  return uuid_.GetNoArena();
}
void CheckLoginQRCodeRequest::set_uuid(const ::std::string& value) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CheckLoginQRCodeRequest.uuid)
}
#if LANG_CXX11
void CheckLoginQRCodeRequest::set_uuid(::std::string&& value) {
  set_has_uuid();
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CheckLoginQRCodeRequest.uuid)
}
#endif
void CheckLoginQRCodeRequest::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CheckLoginQRCodeRequest.uuid)
}
void CheckLoginQRCodeRequest::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CheckLoginQRCodeRequest.uuid)
}
::std::string* CheckLoginQRCodeRequest::mutable_uuid() {
  set_has_uuid();
  // @@protoc_insertion_point(field_mutable:CheckLoginQRCodeRequest.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CheckLoginQRCodeRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:CheckLoginQRCodeRequest.uuid)
  clear_has_uuid();
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckLoginQRCodeRequest::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    set_has_uuid();
  } else {
    clear_has_uuid();
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:CheckLoginQRCodeRequest.uuid)
}

// required int32 timeStamp = 4;
bool CheckLoginQRCodeRequest::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CheckLoginQRCodeRequest::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
void CheckLoginQRCodeRequest::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
void CheckLoginQRCodeRequest::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
::google::protobuf::int32 CheckLoginQRCodeRequest::timestamp() const {
  // @@protoc_insertion_point(field_get:CheckLoginQRCodeRequest.timeStamp)
  return timestamp_;
}
void CheckLoginQRCodeRequest::set_timestamp(::google::protobuf::int32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:CheckLoginQRCodeRequest.timeStamp)
}

// required int32 opcode = 5;
bool CheckLoginQRCodeRequest::has_opcode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CheckLoginQRCodeRequest::set_has_opcode() {
  _has_bits_[0] |= 0x00000010u;
}
void CheckLoginQRCodeRequest::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000010u;
}
void CheckLoginQRCodeRequest::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
::google::protobuf::int32 CheckLoginQRCodeRequest::opcode() const {
  // @@protoc_insertion_point(field_get:CheckLoginQRCodeRequest.opcode)
  return opcode_;
}
void CheckLoginQRCodeRequest::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
  // @@protoc_insertion_point(field_set:CheckLoginQRCodeRequest.opcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg::kNotifyDataFieldNumber;
const int CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg::kOpcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg::CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CheckLoginQRCodeResponse.LoginQRCodeNotifyPkg)
}
CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg::CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg(const CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_notifydata()) {
    notifydata_ = new ::sKBuiltinBufferT(*from.notifydata_);
  } else {
    notifydata_ = NULL;
  }
  opcode_ = from.opcode_;
  // @@protoc_insertion_point(copy_constructor:CheckLoginQRCodeResponse.LoginQRCodeNotifyPkg)
}

void CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&notifydata_, 0, reinterpret_cast<char*>(&opcode_) -
    reinterpret_cast<char*>(&notifydata_) + sizeof(opcode_));
}

CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg::~CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg() {
  // @@protoc_insertion_point(destructor:CheckLoginQRCodeResponse.LoginQRCodeNotifyPkg)
  SharedDtor();
}

void CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg::SharedDtor() {
  if (this != internal_default_instance()) {
    delete notifydata_;
  }
}

void CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg& CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg* CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg::New(::google::protobuf::Arena* arena) const {
  CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg* n = new CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg::Clear() {
// @@protoc_insertion_point(message_clear_start:CheckLoginQRCodeResponse.LoginQRCodeNotifyPkg)
  if (has_notifydata()) {
    GOOGLE_DCHECK(notifydata_ != NULL);
    notifydata_->::sKBuiltinBufferT::Clear();
  }
  opcode_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CheckLoginQRCodeResponse.LoginQRCodeNotifyPkg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sKBuiltinBufferT NotifyData = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_notifydata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 Opcode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_opcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CheckLoginQRCodeResponse.LoginQRCodeNotifyPkg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CheckLoginQRCodeResponse.LoginQRCodeNotifyPkg)
  return false;
#undef DO_
}

void CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CheckLoginQRCodeResponse.LoginQRCodeNotifyPkg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sKBuiltinBufferT NotifyData = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->notifydata_, output);
  }

  // optional int32 Opcode = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->opcode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CheckLoginQRCodeResponse.LoginQRCodeNotifyPkg)
}

::google::protobuf::uint8* CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CheckLoginQRCodeResponse.LoginQRCodeNotifyPkg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sKBuiltinBufferT NotifyData = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->notifydata_, deterministic, target);
  }

  // optional int32 Opcode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->opcode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CheckLoginQRCodeResponse.LoginQRCodeNotifyPkg)
  return target;
}

size_t CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CheckLoginQRCodeResponse.LoginQRCodeNotifyPkg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .sKBuiltinBufferT NotifyData = 1;
    if (has_notifydata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->notifydata_);
    }

    // optional int32 Opcode = 2;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opcode());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CheckLoginQRCodeResponse.LoginQRCodeNotifyPkg)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CheckLoginQRCodeResponse.LoginQRCodeNotifyPkg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CheckLoginQRCodeResponse.LoginQRCodeNotifyPkg)
    MergeFrom(*source);
  }
}

void CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg::MergeFrom(const CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CheckLoginQRCodeResponse.LoginQRCodeNotifyPkg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_notifydata()->::sKBuiltinBufferT::MergeFrom(from.notifydata());
    }
    if (cached_has_bits & 0x00000002u) {
      opcode_ = from.opcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CheckLoginQRCodeResponse.LoginQRCodeNotifyPkg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg::CopyFrom(const CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CheckLoginQRCodeResponse.LoginQRCodeNotifyPkg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg::IsInitialized() const {
  return true;
}

void CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg::Swap(CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg::InternalSwap(CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg* other) {
  std::swap(notifydata_, other->notifydata_);
  std::swap(opcode_, other->opcode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg

// optional .sKBuiltinBufferT NotifyData = 1;
bool CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg::has_notifydata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg::set_has_notifydata() {
  _has_bits_[0] |= 0x00000001u;
}
void CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg::clear_has_notifydata() {
  _has_bits_[0] &= ~0x00000001u;
}
void CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg::clear_notifydata() {
  if (notifydata_ != NULL) notifydata_->::sKBuiltinBufferT::Clear();
  clear_has_notifydata();
}
const ::sKBuiltinBufferT& CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg::notifydata() const {
  // @@protoc_insertion_point(field_get:CheckLoginQRCodeResponse.LoginQRCodeNotifyPkg.NotifyData)
  return notifydata_ != NULL ? *notifydata_
                         : *::sKBuiltinBufferT::internal_default_instance();
}
::sKBuiltinBufferT* CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg::mutable_notifydata() {
  set_has_notifydata();
  if (notifydata_ == NULL) {
    notifydata_ = new ::sKBuiltinBufferT;
  }
  // @@protoc_insertion_point(field_mutable:CheckLoginQRCodeResponse.LoginQRCodeNotifyPkg.NotifyData)
  return notifydata_;
}
::sKBuiltinBufferT* CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg::release_notifydata() {
  // @@protoc_insertion_point(field_release:CheckLoginQRCodeResponse.LoginQRCodeNotifyPkg.NotifyData)
  clear_has_notifydata();
  ::sKBuiltinBufferT* temp = notifydata_;
  notifydata_ = NULL;
  return temp;
}
void CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg::set_allocated_notifydata(::sKBuiltinBufferT* notifydata) {
  delete notifydata_;
  notifydata_ = notifydata;
  if (notifydata) {
    set_has_notifydata();
  } else {
    clear_has_notifydata();
  }
  // @@protoc_insertion_point(field_set_allocated:CheckLoginQRCodeResponse.LoginQRCodeNotifyPkg.NotifyData)
}

// optional int32 Opcode = 2;
bool CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg::has_opcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg::set_has_opcode() {
  _has_bits_[0] |= 0x00000002u;
}
void CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000002u;
}
void CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
::google::protobuf::int32 CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg::opcode() const {
  // @@protoc_insertion_point(field_get:CheckLoginQRCodeResponse.LoginQRCodeNotifyPkg.Opcode)
  return opcode_;
}
void CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
  // @@protoc_insertion_point(field_set:CheckLoginQRCodeResponse.LoginQRCodeNotifyPkg.Opcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckLoginQRCodeResponse::kBaseFieldNumber;
const int CheckLoginQRCodeResponse::kNotifyPkgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckLoginQRCodeResponse::CheckLoginQRCodeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CheckLoginQRCodeResponse)
}
CheckLoginQRCodeResponse::CheckLoginQRCodeResponse(const CheckLoginQRCodeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_base()) {
    base_ = new ::mmRes(*from.base_);
  } else {
    base_ = NULL;
  }
  if (from.has_notifypkg()) {
    notifypkg_ = new ::CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg(*from.notifypkg_);
  } else {
    notifypkg_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:CheckLoginQRCodeResponse)
}

void CheckLoginQRCodeResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&base_, 0, reinterpret_cast<char*>(&notifypkg_) -
    reinterpret_cast<char*>(&base_) + sizeof(notifypkg_));
}

CheckLoginQRCodeResponse::~CheckLoginQRCodeResponse() {
  // @@protoc_insertion_point(destructor:CheckLoginQRCodeResponse)
  SharedDtor();
}

void CheckLoginQRCodeResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete base_;
  }
  if (this != internal_default_instance()) {
    delete notifypkg_;
  }
}

void CheckLoginQRCodeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckLoginQRCodeResponse::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CheckLoginQRCodeResponse& CheckLoginQRCodeResponse::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

CheckLoginQRCodeResponse* CheckLoginQRCodeResponse::New(::google::protobuf::Arena* arena) const {
  CheckLoginQRCodeResponse* n = new CheckLoginQRCodeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CheckLoginQRCodeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CheckLoginQRCodeResponse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_base()) {
      GOOGLE_DCHECK(base_ != NULL);
      base_->::mmRes::Clear();
    }
    if (has_notifypkg()) {
      GOOGLE_DCHECK(notifypkg_ != NULL);
      notifypkg_->::CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CheckLoginQRCodeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CheckLoginQRCodeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mmRes base = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CheckLoginQRCodeResponse.LoginQRCodeNotifyPkg notifyPkg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_notifypkg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CheckLoginQRCodeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CheckLoginQRCodeResponse)
  return false;
#undef DO_
}

void CheckLoginQRCodeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CheckLoginQRCodeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mmRes base = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->base_, output);
  }

  // optional .CheckLoginQRCodeResponse.LoginQRCodeNotifyPkg notifyPkg = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->notifypkg_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CheckLoginQRCodeResponse)
}

::google::protobuf::uint8* CheckLoginQRCodeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CheckLoginQRCodeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mmRes base = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->base_, deterministic, target);
  }

  // optional .CheckLoginQRCodeResponse.LoginQRCodeNotifyPkg notifyPkg = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->notifypkg_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CheckLoginQRCodeResponse)
  return target;
}

size_t CheckLoginQRCodeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CheckLoginQRCodeResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .mmRes base = 1;
  if (has_base()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->base_);
  }
  // optional .CheckLoginQRCodeResponse.LoginQRCodeNotifyPkg notifyPkg = 3;
  if (has_notifypkg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->notifypkg_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckLoginQRCodeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CheckLoginQRCodeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckLoginQRCodeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CheckLoginQRCodeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CheckLoginQRCodeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CheckLoginQRCodeResponse)
    MergeFrom(*source);
  }
}

void CheckLoginQRCodeResponse::MergeFrom(const CheckLoginQRCodeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CheckLoginQRCodeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_base()->::mmRes::MergeFrom(from.base());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_notifypkg()->::CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg::MergeFrom(from.notifypkg());
    }
  }
}

void CheckLoginQRCodeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CheckLoginQRCodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckLoginQRCodeResponse::CopyFrom(const CheckLoginQRCodeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CheckLoginQRCodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckLoginQRCodeResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CheckLoginQRCodeResponse::Swap(CheckLoginQRCodeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckLoginQRCodeResponse::InternalSwap(CheckLoginQRCodeResponse* other) {
  std::swap(base_, other->base_);
  std::swap(notifypkg_, other->notifypkg_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CheckLoginQRCodeResponse::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckLoginQRCodeResponse

// required .mmRes base = 1;
bool CheckLoginQRCodeResponse::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CheckLoginQRCodeResponse::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
void CheckLoginQRCodeResponse::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
void CheckLoginQRCodeResponse::clear_base() {
  if (base_ != NULL) base_->::mmRes::Clear();
  clear_has_base();
}
const ::mmRes& CheckLoginQRCodeResponse::base() const {
  // @@protoc_insertion_point(field_get:CheckLoginQRCodeResponse.base)
  return base_ != NULL ? *base_
                         : *::mmRes::internal_default_instance();
}
::mmRes* CheckLoginQRCodeResponse::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::mmRes;
  }
  // @@protoc_insertion_point(field_mutable:CheckLoginQRCodeResponse.base)
  return base_;
}
::mmRes* CheckLoginQRCodeResponse::release_base() {
  // @@protoc_insertion_point(field_release:CheckLoginQRCodeResponse.base)
  clear_has_base();
  ::mmRes* temp = base_;
  base_ = NULL;
  return temp;
}
void CheckLoginQRCodeResponse::set_allocated_base(::mmRes* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:CheckLoginQRCodeResponse.base)
}

// optional .CheckLoginQRCodeResponse.LoginQRCodeNotifyPkg notifyPkg = 3;
bool CheckLoginQRCodeResponse::has_notifypkg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CheckLoginQRCodeResponse::set_has_notifypkg() {
  _has_bits_[0] |= 0x00000002u;
}
void CheckLoginQRCodeResponse::clear_has_notifypkg() {
  _has_bits_[0] &= ~0x00000002u;
}
void CheckLoginQRCodeResponse::clear_notifypkg() {
  if (notifypkg_ != NULL) notifypkg_->::CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg::Clear();
  clear_has_notifypkg();
}
const ::CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg& CheckLoginQRCodeResponse::notifypkg() const {
  // @@protoc_insertion_point(field_get:CheckLoginQRCodeResponse.notifyPkg)
  return notifypkg_ != NULL ? *notifypkg_
                         : *::CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg::internal_default_instance();
}
::CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg* CheckLoginQRCodeResponse::mutable_notifypkg() {
  set_has_notifypkg();
  if (notifypkg_ == NULL) {
    notifypkg_ = new ::CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg;
  }
  // @@protoc_insertion_point(field_mutable:CheckLoginQRCodeResponse.notifyPkg)
  return notifypkg_;
}
::CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg* CheckLoginQRCodeResponse::release_notifypkg() {
  // @@protoc_insertion_point(field_release:CheckLoginQRCodeResponse.notifyPkg)
  clear_has_notifypkg();
  ::CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg* temp = notifypkg_;
  notifypkg_ = NULL;
  return temp;
}
void CheckLoginQRCodeResponse::set_allocated_notifypkg(::CheckLoginQRCodeResponse_LoginQRCodeNotifyPkg* notifypkg) {
  delete notifypkg_;
  notifypkg_ = notifypkg;
  if (notifypkg) {
    set_has_notifypkg();
  } else {
    clear_has_notifypkg();
  }
  // @@protoc_insertion_point(field_set_allocated:CheckLoginQRCodeResponse.notifyPkg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NotifyMsg::kUuidFieldNumber;
const int NotifyMsg::kOpcodeFieldNumber;
const int NotifyMsg::kUsernameFieldNumber;
const int NotifyMsg::kPassFieldNumber;
const int NotifyMsg::kImgurlFieldNumber;
const int NotifyMsg::kUnkownint6FieldNumber;
const int NotifyMsg::kNicknameFieldNumber;
const int NotifyMsg::kUnkownint8FieldNumber;
const int NotifyMsg::kUnkownint10FieldNumber;
const int NotifyMsg::kPlatformFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotifyMsg::NotifyMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NotifyMsg)
}
NotifyMsg::NotifyMsg(const NotifyMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_uuid()) {
    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  pass_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pass()) {
    pass_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pass_);
  }
  imgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_imgurl()) {
    imgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imgurl_);
  }
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nickname()) {
    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  platform_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_platform()) {
    platform_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.platform_);
  }
  ::memcpy(&opcode_, &from.opcode_,
    reinterpret_cast<char*>(&unkownint10_) -
    reinterpret_cast<char*>(&opcode_) + sizeof(unkownint10_));
  // @@protoc_insertion_point(copy_constructor:NotifyMsg)
}

void NotifyMsg::SharedCtor() {
  _cached_size_ = 0;
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pass_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  platform_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&opcode_, 0, reinterpret_cast<char*>(&unkownint10_) -
    reinterpret_cast<char*>(&opcode_) + sizeof(unkownint10_));
}

NotifyMsg::~NotifyMsg() {
  // @@protoc_insertion_point(destructor:NotifyMsg)
  SharedDtor();
}

void NotifyMsg::SharedDtor() {
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pass_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imgurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  platform_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NotifyMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyMsg::descriptor() {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NotifyMsg& NotifyMsg::default_instance() {
  protobuf_mm_2eproto::InitDefaults();
  return *internal_default_instance();
}

NotifyMsg* NotifyMsg::New(::google::protobuf::Arena* arena) const {
  NotifyMsg* n = new NotifyMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NotifyMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:NotifyMsg)
  if (_has_bits_[0 / 32] & 63u) {
    if (has_uuid()) {
      GOOGLE_DCHECK(!uuid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*uuid_.UnsafeRawStringPointer())->clear();
    }
    if (has_username()) {
      GOOGLE_DCHECK(!username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*username_.UnsafeRawStringPointer())->clear();
    }
    if (has_pass()) {
      GOOGLE_DCHECK(!pass_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pass_.UnsafeRawStringPointer())->clear();
    }
    if (has_imgurl()) {
      GOOGLE_DCHECK(!imgurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*imgurl_.UnsafeRawStringPointer())->clear();
    }
    if (has_nickname()) {
      GOOGLE_DCHECK(!nickname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*nickname_.UnsafeRawStringPointer())->clear();
    }
    if (has_platform()) {
      GOOGLE_DCHECK(!platform_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*platform_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 192u) {
    ::memset(&opcode_, 0, reinterpret_cast<char*>(&unkownint6_) -
      reinterpret_cast<char*>(&opcode_) + sizeof(unkownint6_));
  }
  if (_has_bits_[8 / 32] & 768u) {
    ::memset(&unkownint8_, 0, reinterpret_cast<char*>(&unkownint10_) -
      reinterpret_cast<char*>(&unkownint8_) + sizeof(unkownint10_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NotifyMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NotifyMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Uuid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NotifyMsg.Uuid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 Opcode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_opcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Username = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NotifyMsg.Username");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Pass = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pass()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pass().data(), this->pass().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NotifyMsg.Pass");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Imgurl = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imgurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->imgurl().data(), this->imgurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NotifyMsg.Imgurl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 Unkownint6 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_unkownint6();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unkownint6_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Nickname = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NotifyMsg.Nickname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 Unkownint8 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_unkownint8();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unkownint8_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 Unkownint10 = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_unkownint10();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unkownint10_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Platform = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->platform().data(), this->platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NotifyMsg.Platform");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NotifyMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NotifyMsg)
  return false;
#undef DO_
}

void NotifyMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NotifyMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string Uuid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NotifyMsg.Uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uuid(), output);
  }

  // optional int32 Opcode = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->opcode(), output);
  }

  // optional string Username = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NotifyMsg.Username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->username(), output);
  }

  // optional string Pass = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pass().data(), this->pass().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NotifyMsg.Pass");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->pass(), output);
  }

  // optional string Imgurl = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imgurl().data(), this->imgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NotifyMsg.Imgurl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->imgurl(), output);
  }

  // optional int32 Unkownint6 = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->unkownint6(), output);
  }

  // optional string Nickname = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NotifyMsg.Nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->nickname(), output);
  }

  // optional int32 Unkownint8 = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->unkownint8(), output);
  }

  // optional int32 Unkownint10 = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->unkownint10(), output);
  }

  // optional string Platform = 11;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NotifyMsg.Platform");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->platform(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NotifyMsg)
}

::google::protobuf::uint8* NotifyMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NotifyMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string Uuid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NotifyMsg.Uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uuid(), target);
  }

  // optional int32 Opcode = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->opcode(), target);
  }

  // optional string Username = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NotifyMsg.Username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->username(), target);
  }

  // optional string Pass = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pass().data(), this->pass().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NotifyMsg.Pass");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->pass(), target);
  }

  // optional string Imgurl = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imgurl().data(), this->imgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NotifyMsg.Imgurl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->imgurl(), target);
  }

  // optional int32 Unkownint6 = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->unkownint6(), target);
  }

  // optional string Nickname = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NotifyMsg.Nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->nickname(), target);
  }

  // optional int32 Unkownint8 = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->unkownint8(), target);
  }

  // optional int32 Unkownint10 = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->unkownint10(), target);
  }

  // optional string Platform = 11;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NotifyMsg.Platform");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->platform(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NotifyMsg)
  return target;
}

size_t NotifyMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NotifyMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string Uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }

    // optional string Username = 3;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string Pass = 4;
    if (has_pass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pass());
    }

    // optional string Imgurl = 5;
    if (has_imgurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imgurl());
    }

    // optional string Nickname = 7;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional string Platform = 11;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform());
    }

    // optional int32 Opcode = 2;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opcode());
    }

    // optional int32 Unkownint6 = 6;
    if (has_unkownint6()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unkownint6());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional int32 Unkownint8 = 8;
    if (has_unkownint8()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unkownint8());
    }

    // optional int32 Unkownint10 = 10;
    if (has_unkownint10()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unkownint10());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NotifyMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const NotifyMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NotifyMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NotifyMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NotifyMsg)
    MergeFrom(*source);
  }
}

void NotifyMsg::MergeFrom(const NotifyMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NotifyMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_uuid();
      uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_pass();
      pass_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pass_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_imgurl();
      imgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imgurl_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_nickname();
      nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_platform();
      platform_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.platform_);
    }
    if (cached_has_bits & 0x00000040u) {
      opcode_ = from.opcode_;
    }
    if (cached_has_bits & 0x00000080u) {
      unkownint6_ = from.unkownint6_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      unkownint8_ = from.unkownint8_;
    }
    if (cached_has_bits & 0x00000200u) {
      unkownint10_ = from.unkownint10_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NotifyMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NotifyMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyMsg::CopyFrom(const NotifyMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NotifyMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyMsg::IsInitialized() const {
  return true;
}

void NotifyMsg::Swap(NotifyMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NotifyMsg::InternalSwap(NotifyMsg* other) {
  uuid_.Swap(&other->uuid_);
  username_.Swap(&other->username_);
  pass_.Swap(&other->pass_);
  imgurl_.Swap(&other->imgurl_);
  nickname_.Swap(&other->nickname_);
  platform_.Swap(&other->platform_);
  std::swap(opcode_, other->opcode_);
  std::swap(unkownint6_, other->unkownint6_);
  std::swap(unkownint8_, other->unkownint8_);
  std::swap(unkownint10_, other->unkownint10_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NotifyMsg::GetMetadata() const {
  protobuf_mm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NotifyMsg

// optional string Uuid = 1;
bool NotifyMsg::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NotifyMsg::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
void NotifyMsg::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
void NotifyMsg::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uuid();
}
const ::std::string& NotifyMsg::uuid() const {
  // @@protoc_insertion_point(field_get:NotifyMsg.Uuid)
  return uuid_.GetNoArena();
}
void NotifyMsg::set_uuid(const ::std::string& value) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NotifyMsg.Uuid)
}
#if LANG_CXX11
void NotifyMsg::set_uuid(::std::string&& value) {
  set_has_uuid();
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NotifyMsg.Uuid)
}
#endif
void NotifyMsg::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NotifyMsg.Uuid)
}
void NotifyMsg::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NotifyMsg.Uuid)
}
::std::string* NotifyMsg::mutable_uuid() {
  set_has_uuid();
  // @@protoc_insertion_point(field_mutable:NotifyMsg.Uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NotifyMsg::release_uuid() {
  // @@protoc_insertion_point(field_release:NotifyMsg.Uuid)
  clear_has_uuid();
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NotifyMsg::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    set_has_uuid();
  } else {
    clear_has_uuid();
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:NotifyMsg.Uuid)
}

// optional int32 Opcode = 2;
bool NotifyMsg::has_opcode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void NotifyMsg::set_has_opcode() {
  _has_bits_[0] |= 0x00000040u;
}
void NotifyMsg::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000040u;
}
void NotifyMsg::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
::google::protobuf::int32 NotifyMsg::opcode() const {
  // @@protoc_insertion_point(field_get:NotifyMsg.Opcode)
  return opcode_;
}
void NotifyMsg::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
  // @@protoc_insertion_point(field_set:NotifyMsg.Opcode)
}

// optional string Username = 3;
bool NotifyMsg::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NotifyMsg::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
void NotifyMsg::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
void NotifyMsg::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
const ::std::string& NotifyMsg::username() const {
  // @@protoc_insertion_point(field_get:NotifyMsg.Username)
  return username_.GetNoArena();
}
void NotifyMsg::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NotifyMsg.Username)
}
#if LANG_CXX11
void NotifyMsg::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NotifyMsg.Username)
}
#endif
void NotifyMsg::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NotifyMsg.Username)
}
void NotifyMsg::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NotifyMsg.Username)
}
::std::string* NotifyMsg::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:NotifyMsg.Username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NotifyMsg::release_username() {
  // @@protoc_insertion_point(field_release:NotifyMsg.Username)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NotifyMsg::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:NotifyMsg.Username)
}

// optional string Pass = 4;
bool NotifyMsg::has_pass() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NotifyMsg::set_has_pass() {
  _has_bits_[0] |= 0x00000004u;
}
void NotifyMsg::clear_has_pass() {
  _has_bits_[0] &= ~0x00000004u;
}
void NotifyMsg::clear_pass() {
  pass_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pass();
}
const ::std::string& NotifyMsg::pass() const {
  // @@protoc_insertion_point(field_get:NotifyMsg.Pass)
  return pass_.GetNoArena();
}
void NotifyMsg::set_pass(const ::std::string& value) {
  set_has_pass();
  pass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NotifyMsg.Pass)
}
#if LANG_CXX11
void NotifyMsg::set_pass(::std::string&& value) {
  set_has_pass();
  pass_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NotifyMsg.Pass)
}
#endif
void NotifyMsg::set_pass(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pass();
  pass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NotifyMsg.Pass)
}
void NotifyMsg::set_pass(const char* value, size_t size) {
  set_has_pass();
  pass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NotifyMsg.Pass)
}
::std::string* NotifyMsg::mutable_pass() {
  set_has_pass();
  // @@protoc_insertion_point(field_mutable:NotifyMsg.Pass)
  return pass_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NotifyMsg::release_pass() {
  // @@protoc_insertion_point(field_release:NotifyMsg.Pass)
  clear_has_pass();
  return pass_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NotifyMsg::set_allocated_pass(::std::string* pass) {
  if (pass != NULL) {
    set_has_pass();
  } else {
    clear_has_pass();
  }
  pass_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pass);
  // @@protoc_insertion_point(field_set_allocated:NotifyMsg.Pass)
}

// optional string Imgurl = 5;
bool NotifyMsg::has_imgurl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void NotifyMsg::set_has_imgurl() {
  _has_bits_[0] |= 0x00000008u;
}
void NotifyMsg::clear_has_imgurl() {
  _has_bits_[0] &= ~0x00000008u;
}
void NotifyMsg::clear_imgurl() {
  imgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_imgurl();
}
const ::std::string& NotifyMsg::imgurl() const {
  // @@protoc_insertion_point(field_get:NotifyMsg.Imgurl)
  return imgurl_.GetNoArena();
}
void NotifyMsg::set_imgurl(const ::std::string& value) {
  set_has_imgurl();
  imgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NotifyMsg.Imgurl)
}
#if LANG_CXX11
void NotifyMsg::set_imgurl(::std::string&& value) {
  set_has_imgurl();
  imgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NotifyMsg.Imgurl)
}
#endif
void NotifyMsg::set_imgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_imgurl();
  imgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NotifyMsg.Imgurl)
}
void NotifyMsg::set_imgurl(const char* value, size_t size) {
  set_has_imgurl();
  imgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NotifyMsg.Imgurl)
}
::std::string* NotifyMsg::mutable_imgurl() {
  set_has_imgurl();
  // @@protoc_insertion_point(field_mutable:NotifyMsg.Imgurl)
  return imgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NotifyMsg::release_imgurl() {
  // @@protoc_insertion_point(field_release:NotifyMsg.Imgurl)
  clear_has_imgurl();
  return imgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NotifyMsg::set_allocated_imgurl(::std::string* imgurl) {
  if (imgurl != NULL) {
    set_has_imgurl();
  } else {
    clear_has_imgurl();
  }
  imgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imgurl);
  // @@protoc_insertion_point(field_set_allocated:NotifyMsg.Imgurl)
}

// optional int32 Unkownint6 = 6;
bool NotifyMsg::has_unkownint6() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void NotifyMsg::set_has_unkownint6() {
  _has_bits_[0] |= 0x00000080u;
}
void NotifyMsg::clear_has_unkownint6() {
  _has_bits_[0] &= ~0x00000080u;
}
void NotifyMsg::clear_unkownint6() {
  unkownint6_ = 0;
  clear_has_unkownint6();
}
::google::protobuf::int32 NotifyMsg::unkownint6() const {
  // @@protoc_insertion_point(field_get:NotifyMsg.Unkownint6)
  return unkownint6_;
}
void NotifyMsg::set_unkownint6(::google::protobuf::int32 value) {
  set_has_unkownint6();
  unkownint6_ = value;
  // @@protoc_insertion_point(field_set:NotifyMsg.Unkownint6)
}

// optional string Nickname = 7;
bool NotifyMsg::has_nickname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void NotifyMsg::set_has_nickname() {
  _has_bits_[0] |= 0x00000010u;
}
void NotifyMsg::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000010u;
}
void NotifyMsg::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
const ::std::string& NotifyMsg::nickname() const {
  // @@protoc_insertion_point(field_get:NotifyMsg.Nickname)
  return nickname_.GetNoArena();
}
void NotifyMsg::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NotifyMsg.Nickname)
}
#if LANG_CXX11
void NotifyMsg::set_nickname(::std::string&& value) {
  set_has_nickname();
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NotifyMsg.Nickname)
}
#endif
void NotifyMsg::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NotifyMsg.Nickname)
}
void NotifyMsg::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NotifyMsg.Nickname)
}
::std::string* NotifyMsg::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:NotifyMsg.Nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NotifyMsg::release_nickname() {
  // @@protoc_insertion_point(field_release:NotifyMsg.Nickname)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NotifyMsg::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:NotifyMsg.Nickname)
}

// optional int32 Unkownint8 = 8;
bool NotifyMsg::has_unkownint8() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void NotifyMsg::set_has_unkownint8() {
  _has_bits_[0] |= 0x00000100u;
}
void NotifyMsg::clear_has_unkownint8() {
  _has_bits_[0] &= ~0x00000100u;
}
void NotifyMsg::clear_unkownint8() {
  unkownint8_ = 0;
  clear_has_unkownint8();
}
::google::protobuf::int32 NotifyMsg::unkownint8() const {
  // @@protoc_insertion_point(field_get:NotifyMsg.Unkownint8)
  return unkownint8_;
}
void NotifyMsg::set_unkownint8(::google::protobuf::int32 value) {
  set_has_unkownint8();
  unkownint8_ = value;
  // @@protoc_insertion_point(field_set:NotifyMsg.Unkownint8)
}

// optional int32 Unkownint10 = 10;
bool NotifyMsg::has_unkownint10() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void NotifyMsg::set_has_unkownint10() {
  _has_bits_[0] |= 0x00000200u;
}
void NotifyMsg::clear_has_unkownint10() {
  _has_bits_[0] &= ~0x00000200u;
}
void NotifyMsg::clear_unkownint10() {
  unkownint10_ = 0;
  clear_has_unkownint10();
}
::google::protobuf::int32 NotifyMsg::unkownint10() const {
  // @@protoc_insertion_point(field_get:NotifyMsg.Unkownint10)
  return unkownint10_;
}
void NotifyMsg::set_unkownint10(::google::protobuf::int32 value) {
  set_has_unkownint10();
  unkownint10_ = value;
  // @@protoc_insertion_point(field_set:NotifyMsg.Unkownint10)
}

// optional string Platform = 11;
bool NotifyMsg::has_platform() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void NotifyMsg::set_has_platform() {
  _has_bits_[0] |= 0x00000020u;
}
void NotifyMsg::clear_has_platform() {
  _has_bits_[0] &= ~0x00000020u;
}
void NotifyMsg::clear_platform() {
  platform_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_platform();
}
const ::std::string& NotifyMsg::platform() const {
  // @@protoc_insertion_point(field_get:NotifyMsg.Platform)
  return platform_.GetNoArena();
}
void NotifyMsg::set_platform(const ::std::string& value) {
  set_has_platform();
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NotifyMsg.Platform)
}
#if LANG_CXX11
void NotifyMsg::set_platform(::std::string&& value) {
  set_has_platform();
  platform_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NotifyMsg.Platform)
}
#endif
void NotifyMsg::set_platform(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_platform();
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NotifyMsg.Platform)
}
void NotifyMsg::set_platform(const char* value, size_t size) {
  set_has_platform();
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NotifyMsg.Platform)
}
::std::string* NotifyMsg::mutable_platform() {
  set_has_platform();
  // @@protoc_insertion_point(field_mutable:NotifyMsg.Platform)
  return platform_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NotifyMsg::release_platform() {
  // @@protoc_insertion_point(field_release:NotifyMsg.Platform)
  clear_has_platform();
  return platform_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NotifyMsg::set_allocated_platform(::std::string* platform) {
  if (platform != NULL) {
    set_has_platform();
  } else {
    clear_has_platform();
  }
  platform_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), platform);
  // @@protoc_insertion_point(field_set_allocated:NotifyMsg.Platform)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
