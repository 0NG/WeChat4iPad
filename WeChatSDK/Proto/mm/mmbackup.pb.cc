// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mmbackup.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mmbackup.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace micromsg {
class ConnectInfoAddrDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ConnectInfoAddr> {
} _ConnectInfoAddr_default_instance_;
class BakChatCreateQRCodeRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BakChatCreateQRCodeRequest> {
} _BakChatCreateQRCodeRequest_default_instance_;
class BakChatCreateQRcodeResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BakChatCreateQRcodeResponse> {
} _BakChatCreateQRcodeResponse_default_instance_;
class PacketAuthenticateRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PacketAuthenticateRequest> {
} _PacketAuthenticateRequest_default_instance_;
class PacketAuthenticateResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PacketAuthenticateResponse> {
} _PacketAuthenticateResponse_default_instance_;
class BackupStartGeneralInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BackupStartGeneralInfo> {
} _BackupStartGeneralInfo_default_instance_;
class BackupStartRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BackupStartRequest> {
} _BackupStartRequest_default_instance_;
class BackupStartResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BackupStartResponse> {
} _BackupStartResponse_default_instance_;
class BackupRequestSessionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BackupRequestSession> {
} _BackupRequestSession_default_instance_;
class BackupRequestSessionResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BackupRequestSessionResponse> {
} _BackupRequestSessionResponse_default_instance_;
class PacketBackupDataPushDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PacketBackupDataPush> {
} _PacketBackupDataPush_default_instance_;
class PacketBackupDataResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PacketBackupDataResponse> {
} _PacketBackupDataResponse_default_instance_;
class PacketSvrIDRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PacketSvrIDRequest> {
} _PacketSvrIDRequest_default_instance_;
class PacketSvrIDResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PacketSvrIDResponse> {
} _PacketSvrIDResponse_default_instance_;
class PacketBackupDataTagDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PacketBackupDataTag> {
} _PacketBackupDataTag_default_instance_;
class PacketBackupDataTagResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PacketBackupDataTagResponse> {
} _PacketBackupDataTagResponse_default_instance_;
class BackupReportItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BackupReportItem> {
} _BackupReportItem_default_instance_;
class BackupReportListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BackupReportList> {
} _BackupReportList_default_instance_;
class BackupFinishRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BackupFinishRequest> {
} _BackupFinishRequest_default_instance_;
class BackupCommandRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BackupCommandRequest> {
} _BackupCommandRequest_default_instance_;
class BackupCommandResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BackupCommandResponse> {
} _BackupCommandResponse_default_instance_;
class DataConfigInfDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DataConfigInf> {
} _DataConfigInf_default_instance_;
class BackupCancelRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BackupCancelRequest> {
} _BackupCancelRequest_default_instance_;
class GetConnectInfoRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetConnectInfoRequest> {
} _GetConnectInfoRequest_default_instance_;
class GetConnectInfoResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetConnectInfoResponse> {
} _GetConnectInfoResponse_default_instance_;
class BackupHeartBeatRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BackupHeartBeatRequest> {
} _BackupHeartBeatRequest_default_instance_;
class BackupHeartBeatResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BackupHeartBeatResponse> {
} _BackupHeartBeatResponse_default_instance_;

namespace protobuf_mmbackup_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[27];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectInfoAddr, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectInfoAddr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectInfoAddr, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectInfoAddr, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectInfoAddr, portcount_),
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BakChatCreateQRCodeRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BakChatCreateQRCodeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BakChatCreateQRCodeRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BakChatCreateQRCodeRequest, addrcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BakChatCreateQRCodeRequest, addrlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BakChatCreateQRCodeRequest, pcname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BakChatCreateQRCodeRequest, pcacctname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BakChatCreateQRCodeRequest, scene_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BakChatCreateQRCodeRequest, datasize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BakChatCreateQRCodeRequest, wifiname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BakChatCreateQRCodeRequest, op_),
  3,
  4,
  ~0u,
  0,
  1,
  5,
  6,
  2,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BakChatCreateQRcodeResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BakChatCreateQRcodeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BakChatCreateQRcodeResponse, ret_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BakChatCreateQRcodeResponse, qrcodebuffer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BakChatCreateQRcodeResponse, qrcodeurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BakChatCreateQRcodeResponse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BakChatCreateQRcodeResponse, hello_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BakChatCreateQRcodeResponse, ok_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BakChatCreateQRcodeResponse, encryflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BakChatCreateQRcodeResponse, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BakChatCreateQRcodeResponse, tickit_),
  7,
  5,
  0,
  6,
  1,
  2,
  8,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketAuthenticateRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketAuthenticateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketAuthenticateRequest, step_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketAuthenticateRequest, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketAuthenticateRequest, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketAuthenticateRequest, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketAuthenticateRequest, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketAuthenticateRequest, supportext_),
  2,
  0,
  1,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketAuthenticateResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketAuthenticateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketAuthenticateResponse, step_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketAuthenticateResponse, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketAuthenticateResponse, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketAuthenticateResponse, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketAuthenticateResponse, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketAuthenticateResponse, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketAuthenticateResponse, supportext_),
  2,
  3,
  0,
  1,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupStartGeneralInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupStartGeneralInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupStartGeneralInfo, deviceid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupStartGeneralInfo, devicename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupStartGeneralInfo, model_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupStartGeneralInfo, systemname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupStartGeneralInfo, systemversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupStartGeneralInfo, wechatversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupStartGeneralInfo, devicefreespace_),
  0,
  1,
  2,
  3,
  4,
  6,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupStartRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupStartRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupStartRequest, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupStartRequest, bigdatasize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupStartRequest, sessioncount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupStartRequest, msgcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupStartRequest, generalinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupStartRequest, datasize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupStartRequest, transfertype_),
  0,
  2,
  3,
  4,
  1,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupStartResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupStartResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupStartResponse, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupStartResponse, totalcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupStartResponse, totalsize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupStartResponse, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupStartResponse, networkstate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupStartResponse, bigdatasize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupStartResponse, generalinfo_),
  0,
  2,
  3,
  4,
  5,
  6,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupRequestSession, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupRequestSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupRequestSession, sessionname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupRequestSession, timeinterval_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupRequestSessionResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupRequestSessionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupRequestSessionResponse, sessionname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupRequestSessionResponse, timeinterval_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketBackupDataPush, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketBackupDataPush, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketBackupDataPush, dataid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketBackupDataPush, datatype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketBackupDataPush, datasize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketBackupDataPush, startoffset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketBackupDataPush, endoffset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketBackupDataPush, checksum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketBackupDataPush, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketBackupDataPush, progress_),
  0,
  2,
  3,
  4,
  5,
  6,
  1,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketBackupDataResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketBackupDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketBackupDataResponse, dataid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketBackupDataResponse, datatype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketBackupDataResponse, startoffset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketBackupDataResponse, endoffset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketBackupDataResponse, status_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketSvrIDRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketSvrIDRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketSvrIDRequest, svrid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketSvrIDRequest, mediaid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketSvrIDRequest, md5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketSvrIDRequest, bakchatname_),
  ~0u,
  ~0u,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketSvrIDResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketSvrIDResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketSvrIDResponse, svrid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketSvrIDResponse, mediaid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketSvrIDResponse, md5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketSvrIDResponse, bakchatname_),
  ~0u,
  ~0u,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketBackupDataTag, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketBackupDataTag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketBackupDataTag, bakchatname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketBackupDataTag, starttime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketBackupDataTag, endtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketBackupDataTag, msgdataid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketBackupDataTag, nickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketBackupDataTag, mediaidlist_),
  0,
  3,
  4,
  1,
  2,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketBackupDataTagResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketBackupDataTagResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketBackupDataTagResponse, bakchatname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketBackupDataTagResponse, starttime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketBackupDataTagResponse, endtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketBackupDataTagResponse, msgdataid_),
  0,
  2,
  3,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupReportItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupReportItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupReportItem, bakchatname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupReportItem, msgcount_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupReportList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupReportList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupReportList, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupReportList, list_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupFinishRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupFinishRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupFinishRequest, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupFinishRequest, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupFinishRequest, serversessioncount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupFinishRequest, servermessagecount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupFinishRequest, serverfilecount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupFinishRequest, calculatesize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupFinishRequest, serverdatapushsize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupFinishRequest, serverreaddbtotaltime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupFinishRequest, serverreadfiletotaltime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupFinishRequest, servercosttotaltime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupFinishRequest, serverversion_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupCommandRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupCommandRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupCommandRequest, command_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupCommandRequest, data_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupCommandResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupCommandResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupCommandResponse, command_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupCommandResponse, data_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataConfigInf, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataConfigInf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataConfigInf, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataConfigInf, deviceid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataConfigInf, createtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataConfigInf, lastmodifytime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataConfigInf, deviceinfo_),
  0,
  1,
  3,
  4,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupCancelRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupCancelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupCancelRequest, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupCancelRequest, reason_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConnectInfoRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConnectInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConnectInfoRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConnectInfoRequest, url_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConnectInfoResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConnectInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConnectInfoResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConnectInfoResponse, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConnectInfoResponse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConnectInfoResponse, hello_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConnectInfoResponse, ok_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConnectInfoResponse, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConnectInfoResponse, addrcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConnectInfoResponse, addrlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConnectInfoResponse, resource_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConnectInfoResponse, pcname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConnectInfoResponse, pcacctname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConnectInfoResponse, encryflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConnectInfoResponse, scene_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConnectInfoResponse, datasize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetConnectInfoResponse, wifiname_),
  7,
  0,
  8,
  1,
  2,
  9,
  10,
  ~0u,
  3,
  4,
  5,
  11,
  12,
  13,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupHeartBeatRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupHeartBeatRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupHeartBeatRequest, ack_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupHeartBeatResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupHeartBeatResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupHeartBeatResponse, ack_),
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 8, sizeof(ConnectInfoAddr)},
  { 11, 25, sizeof(BakChatCreateQRCodeRequest)},
  { 34, 48, sizeof(BakChatCreateQRcodeResponse)},
  { 57, 68, sizeof(PacketAuthenticateRequest)},
  { 74, 86, sizeof(PacketAuthenticateResponse)},
  { 93, 105, sizeof(BackupStartGeneralInfo)},
  { 112, 124, sizeof(BackupStartRequest)},
  { 131, 143, sizeof(BackupStartResponse)},
  { 150, 157, sizeof(BackupRequestSession)},
  { 159, 166, sizeof(BackupRequestSessionResponse)},
  { 168, 181, sizeof(PacketBackupDataPush)},
  { 189, 199, sizeof(PacketBackupDataResponse)},
  { 204, 213, sizeof(PacketSvrIDRequest)},
  { 217, 226, sizeof(PacketSvrIDResponse)},
  { 230, 241, sizeof(PacketBackupDataTag)},
  { 247, 256, sizeof(PacketBackupDataTagResponse)},
  { 260, 267, sizeof(BackupReportItem)},
  { 269, 276, sizeof(BackupReportList)},
  { 278, 294, sizeof(BackupFinishRequest)},
  { 305, 312, sizeof(BackupCommandRequest)},
  { 314, 321, sizeof(BackupCommandResponse)},
  { 323, 333, sizeof(DataConfigInf)},
  { 338, 345, sizeof(BackupCancelRequest)},
  { 347, 354, sizeof(GetConnectInfoRequest)},
  { 356, 376, sizeof(GetConnectInfoResponse)},
  { 391, 397, sizeof(BackupHeartBeatRequest)},
  { 398, 404, sizeof(BackupHeartBeatResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ConnectInfoAddr_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BakChatCreateQRCodeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BakChatCreateQRcodeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PacketAuthenticateRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PacketAuthenticateResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BackupStartGeneralInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BackupStartRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BackupStartResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BackupRequestSession_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BackupRequestSessionResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PacketBackupDataPush_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PacketBackupDataResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PacketSvrIDRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PacketSvrIDResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PacketBackupDataTag_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PacketBackupDataTagResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BackupReportItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BackupReportList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BackupFinishRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BackupCommandRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BackupCommandResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DataConfigInf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BackupCancelRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetConnectInfoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetConnectInfoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BackupHeartBeatRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BackupHeartBeatResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "mmbackup.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 27);
}

}  // namespace

void TableStruct::Shutdown() {
  _ConnectInfoAddr_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _BakChatCreateQRCodeRequest_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _BakChatCreateQRcodeResponse_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _PacketAuthenticateRequest_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _PacketAuthenticateResponse_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _BackupStartGeneralInfo_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _BackupStartRequest_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _BackupStartResponse_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _BackupRequestSession_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _BackupRequestSessionResponse_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _PacketBackupDataPush_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _PacketBackupDataResponse_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _PacketSvrIDRequest_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _PacketSvrIDResponse_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _PacketBackupDataTag_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _PacketBackupDataTagResponse_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _BackupReportItem_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _BackupReportList_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _BackupFinishRequest_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _BackupCommandRequest_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _BackupCommandResponse_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _DataConfigInf_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _BackupCancelRequest_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _GetConnectInfoRequest_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _GetConnectInfoResponse_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _BackupHeartBeatRequest_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _BackupHeartBeatResponse_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::micromsg::protobuf_mmbuiltintype_2eproto::InitDefaults();
  ::micromsg::protobuf_mmbase_2eproto::InitDefaults();
  _ConnectInfoAddr_default_instance_.DefaultConstruct();
  _BakChatCreateQRCodeRequest_default_instance_.DefaultConstruct();
  _BakChatCreateQRcodeResponse_default_instance_.DefaultConstruct();
  _PacketAuthenticateRequest_default_instance_.DefaultConstruct();
  _PacketAuthenticateResponse_default_instance_.DefaultConstruct();
  _BackupStartGeneralInfo_default_instance_.DefaultConstruct();
  _BackupStartRequest_default_instance_.DefaultConstruct();
  _BackupStartResponse_default_instance_.DefaultConstruct();
  _BackupRequestSession_default_instance_.DefaultConstruct();
  _BackupRequestSessionResponse_default_instance_.DefaultConstruct();
  _PacketBackupDataPush_default_instance_.DefaultConstruct();
  _PacketBackupDataResponse_default_instance_.DefaultConstruct();
  _PacketSvrIDRequest_default_instance_.DefaultConstruct();
  _PacketSvrIDResponse_default_instance_.DefaultConstruct();
  _PacketBackupDataTag_default_instance_.DefaultConstruct();
  _PacketBackupDataTagResponse_default_instance_.DefaultConstruct();
  _BackupReportItem_default_instance_.DefaultConstruct();
  _BackupReportList_default_instance_.DefaultConstruct();
  _BackupFinishRequest_default_instance_.DefaultConstruct();
  _BackupCommandRequest_default_instance_.DefaultConstruct();
  _BackupCommandResponse_default_instance_.DefaultConstruct();
  _DataConfigInf_default_instance_.DefaultConstruct();
  _BackupCancelRequest_default_instance_.DefaultConstruct();
  _GetConnectInfoRequest_default_instance_.DefaultConstruct();
  _GetConnectInfoResponse_default_instance_.DefaultConstruct();
  _BackupHeartBeatRequest_default_instance_.DefaultConstruct();
  _BackupHeartBeatResponse_default_instance_.DefaultConstruct();
  _BakChatCreateQRCodeRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _BakChatCreateQRcodeResponse_default_instance_.get_mutable()->qrcodebuffer_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _BakChatCreateQRcodeResponse_default_instance_.get_mutable()->key_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _BackupStartRequest_default_instance_.get_mutable()->generalinfo_ = const_cast< ::micromsg::BackupStartGeneralInfo*>(
      ::micromsg::BackupStartGeneralInfo::internal_default_instance());
  _BackupStartResponse_default_instance_.get_mutable()->generalinfo_ = const_cast< ::micromsg::BackupStartGeneralInfo*>(
      ::micromsg::BackupStartGeneralInfo::internal_default_instance());
  _BackupFinishRequest_default_instance_.get_mutable()->data_ = const_cast< ::micromsg::BackupReportList*>(
      ::micromsg::BackupReportList::internal_default_instance());
  _DataConfigInf_default_instance_.get_mutable()->deviceinfo_ = const_cast< ::micromsg::BackupStartGeneralInfo*>(
      ::micromsg::BackupStartGeneralInfo::internal_default_instance());
  _GetConnectInfoRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _GetConnectInfoResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GetConnectInfoResponse_default_instance_.get_mutable()->key_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\016mmbackup.proto\022\010micromsg\032\023mmbuiltintyp"
      "e.proto\032\014mmbase.proto\">\n\017ConnectInfoAddr"
      "\022\n\n\002IP\030\001 \001(\t\022\014\n\004Port\030\002 \003(\r\022\021\n\tPortCount\030"
      "\003 \001(\r\"\353\001\n\032BakChatCreateQRCodeRequest\022*\n\013"
      "BaseRequest\030\001 \002(\0132\025.micromsg.BaseRequest"
      "\022\021\n\tAddrCount\030\002 \002(\r\022+\n\010AddrList\030\003 \003(\0132\031."
      "micromsg.ConnectInfoAddr\022\016\n\006PCName\030\004 \001(\t"
      "\022\022\n\nPCAcctName\030\005 \001(\t\022\r\n\005Scene\030\006 \002(\r\022\020\n\010D"
      "ataSize\030\007 \001(\004\022\020\n\010WifiName\030\010 \001(\t\022\n\n\002Op\030\t "
      "\001(\005\"\344\001\n\033BakChatCreateQRcodeResponse\022\013\n\003R"
      "et\030\001 \002(\r\0221\n\014QRCodeBuffer\030\002 \002(\0132\033.microms"
      "g.SKBuiltinBuffer_t\022\021\n\tQRCodeUrl\030\003 \001(\t\022("
      "\n\003Key\030\004 \002(\0132\033.micromsg.SKBuiltinBuffer_t"
      "\022\r\n\005Hello\030\005 \001(\t\022\n\n\002OK\030\006 \001(\t\022\021\n\tEncryFlag"
      "\030\007 \002(\r\022\n\n\002ID\030\010 \001(\t\022\016\n\006Tickit\030\t \001(\t\"v\n\031Pa"
      "cketAuthenticateRequest\022\014\n\004Step\030\001 \002(\005\022\n\n"
      "\002ID\030\002 \002(\t\022\014\n\004Data\030\003 \001(\014\022\017\n\007Version\030\004 \001(\005"
      "\022\014\n\004Type\030\005 \001(\005\022\022\n\nSupportExt\030\006 \001(\005\"\207\001\n\032P"
      "acketAuthenticateResponse\022\014\n\004Step\030\001 \002(\005\022"
      "\016\n\006Status\030\002 \002(\005\022\n\n\002ID\030\003 \002(\t\022\014\n\004Data\030\004 \001("
      "\014\022\017\n\007Version\030\005 \001(\005\022\014\n\004Type\030\006 \001(\005\022\022\n\nSupp"
      "ortExt\030\007 \001(\005\"\250\001\n\026BackupStartGeneralInfo\022"
      "\020\n\010DeviceID\030\001 \002(\t\022\022\n\nDeviceName\030\002 \002(\t\022\r\n"
      "\005Model\030\003 \002(\t\022\022\n\nSystemName\030\004 \002(\t\022\025\n\rSyst"
      "emVersion\030\005 \002(\t\022\025\n\rWechatVersion\030\006 \002(\r\022\027"
      "\n\017DeviceFreeSpace\030\007 \002(\004\"\274\001\n\022BackupStartR"
      "equest\022\n\n\002ID\030\001 \002(\t\022\023\n\013BigDataSize\030\002 \001(\004\022"
      "\024\n\014SessionCount\030\003 \001(\004\022\020\n\010MsgCount\030\004 \001(\004\022"
      "5\n\013GeneralInfo\030\005 \001(\0132 .micromsg.BackupSt"
      "artGeneralInfo\022\020\n\010DataSize\030\006 \001(\004\022\024\n\014Tran"
      "sferType\030\007 \001(\005\"\272\001\n\023BackupStartResponse\022\n"
      "\n\002ID\030\001 \002(\t\022\022\n\nTotalCount\030\002 \002(\004\022\021\n\tTotalS"
      "ize\030\003 \002(\004\022\016\n\006Status\030\004 \002(\005\022\024\n\014NetworkStat"
      "e\030\005 \001(\r\022\023\n\013BigDataSize\030\006 \001(\004\0225\n\013GeneralI"
      "nfo\030\007 \001(\0132 .micromsg.BackupStartGeneralI"
      "nfo\"A\n\024BackupRequestSession\022\023\n\013SessionNa"
      "me\030\001 \003(\t\022\024\n\014TimeInterval\030\002 \003(\003\"I\n\034Backup"
      "RequestSessionResponse\022\023\n\013SessionName\030\001 "
      "\003(\t\022\024\n\014TimeInterval\030\002 \003(\003\"\244\001\n\024PacketBack"
      "upDataPush\022\016\n\006DataID\030\001 \002(\t\022\020\n\010DataType\030\002"
      " \002(\005\022\020\n\010DataSize\030\003 \002(\005\022\023\n\013StartOffset\030\004 "
      "\002(\005\022\021\n\tEndOffset\030\005 \002(\005\022\020\n\010CheckSum\030\006 \001(\005"
      "\022\014\n\004Data\030\007 \001(\014\022\020\n\010Progress\030\010 \001(\005\"t\n\030Pack"
      "etBackupDataResponse\022\016\n\006DataID\030\001 \002(\t\022\020\n\010"
      "DataType\030\002 \002(\005\022\023\n\013StartOffset\030\003 \002(\005\022\021\n\tE"
      "ndOffset\030\004 \002(\005\022\016\n\006Status\030\005 \002(\005\"V\n\022Packet"
      "SvrIDRequest\022\r\n\005SvrID\030\001 \003(\004\022\017\n\007MediaID\030\002"
      " \003(\t\022\013\n\003MD5\030\003 \003(\t\022\023\n\013BakChatName\030\004 \002(\t\"W"
      "\n\023PacketSvrIDResponse\022\r\n\005SvrID\030\001 \003(\004\022\017\n\007"
      "MediaID\030\002 \003(\t\022\013\n\003MD5\030\003 \003(\t\022\023\n\013BakChatNam"
      "e\030\004 \002(\t\"\210\001\n\023PacketBackupDataTag\022\023\n\013BakCh"
      "atName\030\001 \002(\t\022\021\n\tStartTime\030\002 \002(\003\022\017\n\007EndTi"
      "me\030\003 \002(\003\022\021\n\tMsgDataID\030\004 \002(\t\022\020\n\010NickName\030"
      "\005 \002(\t\022\023\n\013MediaIDList\030\006 \003(\t\"i\n\033PacketBack"
      "upDataTagResponse\022\023\n\013BakChatName\030\001 \002(\t\022\021"
      "\n\tStartTime\030\002 \002(\003\022\017\n\007EndTime\030\003 \002(\003\022\021\n\tMs"
      "gDataID\030\004 \002(\t\"9\n\020BackupReportItem\022\023\n\013Bak"
      "ChatName\030\001 \002(\t\022\020\n\010MsgCount\030\002 \002(\r\"K\n\020Back"
      "upReportList\022\r\n\005Count\030\001 \002(\r\022(\n\004List\030\002 \003("
      "\0132\032.micromsg.BackupReportItem\"\303\002\n\023Backup"
      "FinishRequest\022\n\n\002ID\030\001 \002(\t\022(\n\004Data\030\002 \001(\0132"
      "\032.micromsg.BackupReportList\022\032\n\022ServerSes"
      "sionCount\030\003 \001(\r\022\032\n\022ServerMessageCount\030\004 "
      "\001(\r\022\027\n\017ServerFileCount\030\005 \001(\r\022\025\n\rCalculat"
      "eSize\030\006 \001(\r\022\032\n\022ServerDataPushSize\030\007 \001(\r\022"
      "\035\n\025ServerReadDBTotalTime\030\010 \001(\r\022\037\n\027Server"
      "ReadFileTotalTime\030\t \001(\r\022\033\n\023ServerCostTot"
      "alTime\030\n \001(\r\022\025\n\rServerVersion\030\013 \001(\r\"5\n\024B"
      "ackupCommandRequest\022\017\n\007Command\030\001 \002(\005\022\014\n\004"
      "Data\030\002 \001(\014\"6\n\025BackupCommandResponse\022\017\n\007C"
      "ommand\030\001 \002(\005\022\014\n\004Data\030\002 \001(\014\"\225\001\n\rDataConfi"
      "gInf\022\020\n\010UserName\030\001 \002(\t\022\020\n\010Deviceid\030\002 \001(\t"
      "\022\022\n\nCreateTime\030\003 \001(\r\022\026\n\016LastModifyTime\030\004"
      " \001(\r\0224\n\nDeviceInfo\030\005 \001(\0132 .micromsg.Back"
      "upStartGeneralInfo\"1\n\023BackupCancelReques"
      "t\022\n\n\002ID\030\001 \002(\t\022\016\n\006Reason\030\002 \001(\r\"P\n\025GetConn"
      "ectInfoRequest\022*\n\013BaseRequest\030\001 \002(\0132\025.mi"
      "cromsg.BaseRequest\022\013\n\003URL\030\002 \001(\t\"\341\002\n\026GetC"
      "onnectInfoResponse\022,\n\014BaseResponse\030\001 \002(\013"
      "2\026.micromsg.BaseResponse\022\n\n\002ID\030\002 \001(\t\022(\n\003"
      "Key\030\003 \002(\0132\033.micromsg.SKBuiltinBuffer_t\022\r"
      "\n\005Hello\030\004 \001(\t\022\n\n\002OK\030\005 \001(\t\022\014\n\004Type\030\006 \002(\r\022"
      "\021\n\tAddrCount\030\007 \002(\r\022+\n\010AddrList\030\010 \003(\0132\031.m"
      "icromsg.ConnectInfoAddr\022\020\n\010Resource\030\t \001("
      "\t\022\016\n\006PCName\030\n \001(\t\022\022\n\nPCAcctName\030\013 \001(\t\022\021\n"
      "\tEncryFlag\030\014 \001(\r\022\r\n\005Scene\030\r \001(\r\022\020\n\010DataS"
      "ize\030\016 \001(\004\022\020\n\010WifiName\030\017 \001(\t\"%\n\026BackupHea"
      "rtBeatRequest\022\013\n\003ack\030\001 \002(\004\"&\n\027BackupHear"
      "tBeatResponse\022\013\n\003ack\030\001 \002(\004*8\n\020TransferTy"
      "peEnum\022\020\n\014TRANSFER_NEW\020\000\022\022\n\016TRANSFER_ADD"
      "ON\020\001*\245\002\n\017CommandTypeEnum\022\035\n\031COMMAND_REQU"
      "EST_TO_BACKUP\020\001\022\032\n\026COMMAND_CONFIRM_BACKU"
      "P\020\002\022\036\n\032COMMAND_REQUEST_TO_RECOVER\020\003\022\033\n\027C"
      "OMMAND_CONFIRM_RECOVER\020\004\022&\n\"COMMAND_REQU"
      "EST_TO_CONTINUE_BACKUP\020\005\022#\n\037COMMAND_CONF"
      "IRM_CONTINUE_BACKUP\020\006\022\'\n#COMMAND_REQUEST"
      "_TO_CONTINUE_RECOVER\020\007\022$\n COMMAND_CONFIR"
      "M_CONTINUE_RECOVER\020\010*q\n\027StartResponseSta"
      "tusEnum\022\032\n\026START_RESPONSE_SUCCESS\020\000\022\033\n\027S"
      "TART_RESPONSE_ID_WRONG\020\001\022\035\n\031START_RESPON"
      "SE_SIZE_WRONG\020\002"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4015);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mmbackup.proto", &protobuf_RegisterTypes);
  ::micromsg::protobuf_mmbuiltintype_2eproto::AddDescriptors();
  ::micromsg::protobuf_mmbase_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_mmbackup_2eproto

const ::google::protobuf::EnumDescriptor* TransferTypeEnum_descriptor() {
  protobuf_mmbackup_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbackup_2eproto::file_level_enum_descriptors[0];
}
bool TransferTypeEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CommandTypeEnum_descriptor() {
  protobuf_mmbackup_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbackup_2eproto::file_level_enum_descriptors[1];
}
bool CommandTypeEnum_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* StartResponseStatusEnum_descriptor() {
  protobuf_mmbackup_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbackup_2eproto::file_level_enum_descriptors[2];
}
bool StartResponseStatusEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConnectInfoAddr::kIPFieldNumber;
const int ConnectInfoAddr::kPortFieldNumber;
const int ConnectInfoAddr::kPortCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConnectInfoAddr::ConnectInfoAddr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbackup_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.ConnectInfoAddr)
}
ConnectInfoAddr::ConnectInfoAddr(const ConnectInfoAddr& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      port_(from.port_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip()) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  portcount_ = from.portcount_;
  // @@protoc_insertion_point(copy_constructor:micromsg.ConnectInfoAddr)
}

void ConnectInfoAddr::SharedCtor() {
  _cached_size_ = 0;
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  portcount_ = 0u;
}

ConnectInfoAddr::~ConnectInfoAddr() {
  // @@protoc_insertion_point(destructor:micromsg.ConnectInfoAddr)
  SharedDtor();
}

void ConnectInfoAddr::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConnectInfoAddr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectInfoAddr::descriptor() {
  protobuf_mmbackup_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbackup_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConnectInfoAddr& ConnectInfoAddr::default_instance() {
  protobuf_mmbackup_2eproto::InitDefaults();
  return *internal_default_instance();
}

ConnectInfoAddr* ConnectInfoAddr::New(::google::protobuf::Arena* arena) const {
  ConnectInfoAddr* n = new ConnectInfoAddr;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConnectInfoAddr::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.ConnectInfoAddr)
  port_.Clear();
  if (has_ip()) {
    GOOGLE_DCHECK(!ip_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*ip_.UnsafeRawStringPointer())->clear();
  }
  portcount_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConnectInfoAddr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.ConnectInfoAddr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string IP = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ConnectInfoAddr.IP");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 Port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_port())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_port())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 PortCount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_portcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &portcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.ConnectInfoAddr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.ConnectInfoAddr)
  return false;
#undef DO_
}

void ConnectInfoAddr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.ConnectInfoAddr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string IP = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ConnectInfoAddr.IP");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // repeated uint32 Port = 2;
  for (int i = 0, n = this->port_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->port(i), output);
  }

  // optional uint32 PortCount = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->portcount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.ConnectInfoAddr)
}

::google::protobuf::uint8* ConnectInfoAddr::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.ConnectInfoAddr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string IP = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ConnectInfoAddr.IP");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // repeated uint32 Port = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->port_, target);

  // optional uint32 PortCount = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->portcount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.ConnectInfoAddr)
  return target;
}

size_t ConnectInfoAddr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.ConnectInfoAddr)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 Port = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->port_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->port_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string IP = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional uint32 PortCount = 3;
    if (has_portcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->portcount());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectInfoAddr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.ConnectInfoAddr)
  GOOGLE_DCHECK_NE(&from, this);
  const ConnectInfoAddr* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConnectInfoAddr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.ConnectInfoAddr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.ConnectInfoAddr)
    MergeFrom(*source);
  }
}

void ConnectInfoAddr::MergeFrom(const ConnectInfoAddr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.ConnectInfoAddr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  port_.MergeFrom(from.port_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (cached_has_bits & 0x00000002u) {
      portcount_ = from.portcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConnectInfoAddr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.ConnectInfoAddr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectInfoAddr::CopyFrom(const ConnectInfoAddr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.ConnectInfoAddr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectInfoAddr::IsInitialized() const {
  return true;
}

void ConnectInfoAddr::Swap(ConnectInfoAddr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConnectInfoAddr::InternalSwap(ConnectInfoAddr* other) {
  port_.InternalSwap(&other->port_);
  ip_.Swap(&other->ip_);
  std::swap(portcount_, other->portcount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConnectInfoAddr::GetMetadata() const {
  protobuf_mmbackup_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbackup_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConnectInfoAddr

// optional string IP = 1;
bool ConnectInfoAddr::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ConnectInfoAddr::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
void ConnectInfoAddr::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
void ConnectInfoAddr::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
const ::std::string& ConnectInfoAddr::ip() const {
  // @@protoc_insertion_point(field_get:micromsg.ConnectInfoAddr.IP)
  return ip_.GetNoArena();
}
void ConnectInfoAddr::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ConnectInfoAddr.IP)
}
#if LANG_CXX11
void ConnectInfoAddr::set_ip(::std::string&& value) {
  set_has_ip();
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ConnectInfoAddr.IP)
}
#endif
void ConnectInfoAddr::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ConnectInfoAddr.IP)
}
void ConnectInfoAddr::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ConnectInfoAddr.IP)
}
::std::string* ConnectInfoAddr::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:micromsg.ConnectInfoAddr.IP)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConnectInfoAddr::release_ip() {
  // @@protoc_insertion_point(field_release:micromsg.ConnectInfoAddr.IP)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConnectInfoAddr::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ConnectInfoAddr.IP)
}

// repeated uint32 Port = 2;
int ConnectInfoAddr::port_size() const {
  return port_.size();
}
void ConnectInfoAddr::clear_port() {
  port_.Clear();
}
::google::protobuf::uint32 ConnectInfoAddr::port(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.ConnectInfoAddr.Port)
  return port_.Get(index);
}
void ConnectInfoAddr::set_port(int index, ::google::protobuf::uint32 value) {
  port_.Set(index, value);
  // @@protoc_insertion_point(field_set:micromsg.ConnectInfoAddr.Port)
}
void ConnectInfoAddr::add_port(::google::protobuf::uint32 value) {
  port_.Add(value);
  // @@protoc_insertion_point(field_add:micromsg.ConnectInfoAddr.Port)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ConnectInfoAddr::port() const {
  // @@protoc_insertion_point(field_list:micromsg.ConnectInfoAddr.Port)
  return port_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ConnectInfoAddr::mutable_port() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.ConnectInfoAddr.Port)
  return &port_;
}

// optional uint32 PortCount = 3;
bool ConnectInfoAddr::has_portcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ConnectInfoAddr::set_has_portcount() {
  _has_bits_[0] |= 0x00000002u;
}
void ConnectInfoAddr::clear_has_portcount() {
  _has_bits_[0] &= ~0x00000002u;
}
void ConnectInfoAddr::clear_portcount() {
  portcount_ = 0u;
  clear_has_portcount();
}
::google::protobuf::uint32 ConnectInfoAddr::portcount() const {
  // @@protoc_insertion_point(field_get:micromsg.ConnectInfoAddr.PortCount)
  return portcount_;
}
void ConnectInfoAddr::set_portcount(::google::protobuf::uint32 value) {
  set_has_portcount();
  portcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ConnectInfoAddr.PortCount)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BakChatCreateQRCodeRequest::kBaseRequestFieldNumber;
const int BakChatCreateQRCodeRequest::kAddrCountFieldNumber;
const int BakChatCreateQRCodeRequest::kAddrListFieldNumber;
const int BakChatCreateQRCodeRequest::kPCNameFieldNumber;
const int BakChatCreateQRCodeRequest::kPCAcctNameFieldNumber;
const int BakChatCreateQRCodeRequest::kSceneFieldNumber;
const int BakChatCreateQRCodeRequest::kDataSizeFieldNumber;
const int BakChatCreateQRCodeRequest::kWifiNameFieldNumber;
const int BakChatCreateQRCodeRequest::kOpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BakChatCreateQRCodeRequest::BakChatCreateQRCodeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbackup_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BakChatCreateQRCodeRequest)
}
BakChatCreateQRCodeRequest::BakChatCreateQRCodeRequest(const BakChatCreateQRCodeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      addrlist_(from.addrlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pcname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pcname()) {
    pcname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pcname_);
  }
  pcacctname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pcacctname()) {
    pcacctname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pcacctname_);
  }
  wifiname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_wifiname()) {
    wifiname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wifiname_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  ::memcpy(&addrcount_, &from.addrcount_,
    reinterpret_cast<char*>(&op_) -
    reinterpret_cast<char*>(&addrcount_) + sizeof(op_));
  // @@protoc_insertion_point(copy_constructor:micromsg.BakChatCreateQRCodeRequest)
}

void BakChatCreateQRCodeRequest::SharedCtor() {
  _cached_size_ = 0;
  pcname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pcacctname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wifiname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&op_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(op_));
}

BakChatCreateQRCodeRequest::~BakChatCreateQRCodeRequest() {
  // @@protoc_insertion_point(destructor:micromsg.BakChatCreateQRCodeRequest)
  SharedDtor();
}

void BakChatCreateQRCodeRequest::SharedDtor() {
  pcname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pcacctname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wifiname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void BakChatCreateQRCodeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BakChatCreateQRCodeRequest::descriptor() {
  protobuf_mmbackup_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbackup_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BakChatCreateQRCodeRequest& BakChatCreateQRCodeRequest::default_instance() {
  protobuf_mmbackup_2eproto::InitDefaults();
  return *internal_default_instance();
}

BakChatCreateQRCodeRequest* BakChatCreateQRCodeRequest::New(::google::protobuf::Arena* arena) const {
  BakChatCreateQRCodeRequest* n = new BakChatCreateQRCodeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BakChatCreateQRCodeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BakChatCreateQRCodeRequest)
  addrlist_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    if (has_pcname()) {
      GOOGLE_DCHECK(!pcname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pcname_.UnsafeRawStringPointer())->clear();
    }
    if (has_pcacctname()) {
      GOOGLE_DCHECK(!pcacctname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pcacctname_.UnsafeRawStringPointer())->clear();
    }
    if (has_wifiname()) {
      GOOGLE_DCHECK(!wifiname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*wifiname_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 240u) {
    ::memset(&addrcount_, 0, reinterpret_cast<char*>(&op_) -
      reinterpret_cast<char*>(&addrcount_) + sizeof(op_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BakChatCreateQRCodeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BakChatCreateQRCodeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 AddrCount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_addrcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addrcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.ConnectInfoAddr AddrList = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_addrlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string PCName = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pcname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pcname().data(), this->pcname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BakChatCreateQRCodeRequest.PCName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string PCAcctName = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pcacctname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pcacctname().data(), this->pcacctname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BakChatCreateQRCodeRequest.PCAcctName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Scene = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_scene();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 DataSize = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_datasize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &datasize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string WifiName = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wifiname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->wifiname().data(), this->wifiname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BakChatCreateQRCodeRequest.WifiName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 Op = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_op();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &op_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BakChatCreateQRCodeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BakChatCreateQRCodeRequest)
  return false;
#undef DO_
}

void BakChatCreateQRCodeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BakChatCreateQRCodeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required uint32 AddrCount = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->addrcount(), output);
  }

  // repeated .micromsg.ConnectInfoAddr AddrList = 3;
  for (unsigned int i = 0, n = this->addrlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->addrlist(i), output);
  }

  // optional string PCName = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pcname().data(), this->pcname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BakChatCreateQRCodeRequest.PCName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->pcname(), output);
  }

  // optional string PCAcctName = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pcacctname().data(), this->pcacctname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BakChatCreateQRCodeRequest.PCAcctName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->pcacctname(), output);
  }

  // required uint32 Scene = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->scene(), output);
  }

  // optional uint64 DataSize = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->datasize(), output);
  }

  // optional string WifiName = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wifiname().data(), this->wifiname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BakChatCreateQRCodeRequest.WifiName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->wifiname(), output);
  }

  // optional int32 Op = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->op(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BakChatCreateQRCodeRequest)
}

::google::protobuf::uint8* BakChatCreateQRCodeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BakChatCreateQRCodeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required uint32 AddrCount = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->addrcount(), target);
  }

  // repeated .micromsg.ConnectInfoAddr AddrList = 3;
  for (unsigned int i = 0, n = this->addrlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->addrlist(i), deterministic, target);
  }

  // optional string PCName = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pcname().data(), this->pcname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BakChatCreateQRCodeRequest.PCName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->pcname(), target);
  }

  // optional string PCAcctName = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pcacctname().data(), this->pcacctname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BakChatCreateQRCodeRequest.PCAcctName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->pcacctname(), target);
  }

  // required uint32 Scene = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->scene(), target);
  }

  // optional uint64 DataSize = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->datasize(), target);
  }

  // optional string WifiName = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wifiname().data(), this->wifiname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BakChatCreateQRCodeRequest.WifiName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->wifiname(), target);
  }

  // optional int32 Op = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->op(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BakChatCreateQRCodeRequest)
  return target;
}

size_t BakChatCreateQRCodeRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.BakChatCreateQRCodeRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_addrcount()) {
    // required uint32 AddrCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->addrcount());
  }

  if (has_scene()) {
    // required uint32 Scene = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene());
  }

  return total_size;
}
size_t BakChatCreateQRCodeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BakChatCreateQRCodeRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000038) ^ 0x00000038) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 AddrCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->addrcount());

    // required uint32 Scene = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.ConnectInfoAddr AddrList = 3;
  {
    unsigned int count = this->addrlist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->addrlist(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string PCName = 4;
    if (has_pcname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pcname());
    }

    // optional string PCAcctName = 5;
    if (has_pcacctname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pcacctname());
    }

    // optional string WifiName = 8;
    if (has_wifiname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wifiname());
    }

  }
  if (_has_bits_[0 / 32] & 192u) {
    // optional uint64 DataSize = 7;
    if (has_datasize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->datasize());
    }

    // optional int32 Op = 9;
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->op());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BakChatCreateQRCodeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BakChatCreateQRCodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BakChatCreateQRCodeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BakChatCreateQRCodeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BakChatCreateQRCodeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BakChatCreateQRCodeRequest)
    MergeFrom(*source);
  }
}

void BakChatCreateQRCodeRequest::MergeFrom(const BakChatCreateQRCodeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BakChatCreateQRCodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  addrlist_.MergeFrom(from.addrlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_pcname();
      pcname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pcname_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_pcacctname();
      pcacctname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pcacctname_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_wifiname();
      wifiname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wifiname_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000010u) {
      addrcount_ = from.addrcount_;
    }
    if (cached_has_bits & 0x00000020u) {
      scene_ = from.scene_;
    }
    if (cached_has_bits & 0x00000040u) {
      datasize_ = from.datasize_;
    }
    if (cached_has_bits & 0x00000080u) {
      op_ = from.op_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BakChatCreateQRCodeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BakChatCreateQRCodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BakChatCreateQRCodeRequest::CopyFrom(const BakChatCreateQRCodeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BakChatCreateQRCodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BakChatCreateQRCodeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000038) != 0x00000038) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void BakChatCreateQRCodeRequest::Swap(BakChatCreateQRCodeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BakChatCreateQRCodeRequest::InternalSwap(BakChatCreateQRCodeRequest* other) {
  addrlist_.InternalSwap(&other->addrlist_);
  pcname_.Swap(&other->pcname_);
  pcacctname_.Swap(&other->pcacctname_);
  wifiname_.Swap(&other->wifiname_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(addrcount_, other->addrcount_);
  std::swap(scene_, other->scene_);
  std::swap(datasize_, other->datasize_);
  std::swap(op_, other->op_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BakChatCreateQRCodeRequest::GetMetadata() const {
  protobuf_mmbackup_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbackup_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BakChatCreateQRCodeRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool BakChatCreateQRCodeRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BakChatCreateQRCodeRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000008u;
}
void BakChatCreateQRCodeRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000008u;
}
void BakChatCreateQRCodeRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& BakChatCreateQRCodeRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.BakChatCreateQRCodeRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* BakChatCreateQRCodeRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BakChatCreateQRCodeRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* BakChatCreateQRCodeRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.BakChatCreateQRCodeRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void BakChatCreateQRCodeRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BakChatCreateQRCodeRequest.BaseRequest)
}

// required uint32 AddrCount = 2;
bool BakChatCreateQRCodeRequest::has_addrcount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BakChatCreateQRCodeRequest::set_has_addrcount() {
  _has_bits_[0] |= 0x00000010u;
}
void BakChatCreateQRCodeRequest::clear_has_addrcount() {
  _has_bits_[0] &= ~0x00000010u;
}
void BakChatCreateQRCodeRequest::clear_addrcount() {
  addrcount_ = 0u;
  clear_has_addrcount();
}
::google::protobuf::uint32 BakChatCreateQRCodeRequest::addrcount() const {
  // @@protoc_insertion_point(field_get:micromsg.BakChatCreateQRCodeRequest.AddrCount)
  return addrcount_;
}
void BakChatCreateQRCodeRequest::set_addrcount(::google::protobuf::uint32 value) {
  set_has_addrcount();
  addrcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BakChatCreateQRCodeRequest.AddrCount)
}

// repeated .micromsg.ConnectInfoAddr AddrList = 3;
int BakChatCreateQRCodeRequest::addrlist_size() const {
  return addrlist_.size();
}
void BakChatCreateQRCodeRequest::clear_addrlist() {
  addrlist_.Clear();
}
const ::micromsg::ConnectInfoAddr& BakChatCreateQRCodeRequest::addrlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.BakChatCreateQRCodeRequest.AddrList)
  return addrlist_.Get(index);
}
::micromsg::ConnectInfoAddr* BakChatCreateQRCodeRequest::mutable_addrlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.BakChatCreateQRCodeRequest.AddrList)
  return addrlist_.Mutable(index);
}
::micromsg::ConnectInfoAddr* BakChatCreateQRCodeRequest::add_addrlist() {
  // @@protoc_insertion_point(field_add:micromsg.BakChatCreateQRCodeRequest.AddrList)
  return addrlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::ConnectInfoAddr >*
BakChatCreateQRCodeRequest::mutable_addrlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.BakChatCreateQRCodeRequest.AddrList)
  return &addrlist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::ConnectInfoAddr >&
BakChatCreateQRCodeRequest::addrlist() const {
  // @@protoc_insertion_point(field_list:micromsg.BakChatCreateQRCodeRequest.AddrList)
  return addrlist_;
}

// optional string PCName = 4;
bool BakChatCreateQRCodeRequest::has_pcname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BakChatCreateQRCodeRequest::set_has_pcname() {
  _has_bits_[0] |= 0x00000001u;
}
void BakChatCreateQRCodeRequest::clear_has_pcname() {
  _has_bits_[0] &= ~0x00000001u;
}
void BakChatCreateQRCodeRequest::clear_pcname() {
  pcname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pcname();
}
const ::std::string& BakChatCreateQRCodeRequest::pcname() const {
  // @@protoc_insertion_point(field_get:micromsg.BakChatCreateQRCodeRequest.PCName)
  return pcname_.GetNoArena();
}
void BakChatCreateQRCodeRequest::set_pcname(const ::std::string& value) {
  set_has_pcname();
  pcname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BakChatCreateQRCodeRequest.PCName)
}
#if LANG_CXX11
void BakChatCreateQRCodeRequest::set_pcname(::std::string&& value) {
  set_has_pcname();
  pcname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BakChatCreateQRCodeRequest.PCName)
}
#endif
void BakChatCreateQRCodeRequest::set_pcname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pcname();
  pcname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BakChatCreateQRCodeRequest.PCName)
}
void BakChatCreateQRCodeRequest::set_pcname(const char* value, size_t size) {
  set_has_pcname();
  pcname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BakChatCreateQRCodeRequest.PCName)
}
::std::string* BakChatCreateQRCodeRequest::mutable_pcname() {
  set_has_pcname();
  // @@protoc_insertion_point(field_mutable:micromsg.BakChatCreateQRCodeRequest.PCName)
  return pcname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BakChatCreateQRCodeRequest::release_pcname() {
  // @@protoc_insertion_point(field_release:micromsg.BakChatCreateQRCodeRequest.PCName)
  clear_has_pcname();
  return pcname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BakChatCreateQRCodeRequest::set_allocated_pcname(::std::string* pcname) {
  if (pcname != NULL) {
    set_has_pcname();
  } else {
    clear_has_pcname();
  }
  pcname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pcname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BakChatCreateQRCodeRequest.PCName)
}

// optional string PCAcctName = 5;
bool BakChatCreateQRCodeRequest::has_pcacctname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BakChatCreateQRCodeRequest::set_has_pcacctname() {
  _has_bits_[0] |= 0x00000002u;
}
void BakChatCreateQRCodeRequest::clear_has_pcacctname() {
  _has_bits_[0] &= ~0x00000002u;
}
void BakChatCreateQRCodeRequest::clear_pcacctname() {
  pcacctname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pcacctname();
}
const ::std::string& BakChatCreateQRCodeRequest::pcacctname() const {
  // @@protoc_insertion_point(field_get:micromsg.BakChatCreateQRCodeRequest.PCAcctName)
  return pcacctname_.GetNoArena();
}
void BakChatCreateQRCodeRequest::set_pcacctname(const ::std::string& value) {
  set_has_pcacctname();
  pcacctname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BakChatCreateQRCodeRequest.PCAcctName)
}
#if LANG_CXX11
void BakChatCreateQRCodeRequest::set_pcacctname(::std::string&& value) {
  set_has_pcacctname();
  pcacctname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BakChatCreateQRCodeRequest.PCAcctName)
}
#endif
void BakChatCreateQRCodeRequest::set_pcacctname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pcacctname();
  pcacctname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BakChatCreateQRCodeRequest.PCAcctName)
}
void BakChatCreateQRCodeRequest::set_pcacctname(const char* value, size_t size) {
  set_has_pcacctname();
  pcacctname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BakChatCreateQRCodeRequest.PCAcctName)
}
::std::string* BakChatCreateQRCodeRequest::mutable_pcacctname() {
  set_has_pcacctname();
  // @@protoc_insertion_point(field_mutable:micromsg.BakChatCreateQRCodeRequest.PCAcctName)
  return pcacctname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BakChatCreateQRCodeRequest::release_pcacctname() {
  // @@protoc_insertion_point(field_release:micromsg.BakChatCreateQRCodeRequest.PCAcctName)
  clear_has_pcacctname();
  return pcacctname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BakChatCreateQRCodeRequest::set_allocated_pcacctname(::std::string* pcacctname) {
  if (pcacctname != NULL) {
    set_has_pcacctname();
  } else {
    clear_has_pcacctname();
  }
  pcacctname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pcacctname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BakChatCreateQRCodeRequest.PCAcctName)
}

// required uint32 Scene = 6;
bool BakChatCreateQRCodeRequest::has_scene() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BakChatCreateQRCodeRequest::set_has_scene() {
  _has_bits_[0] |= 0x00000020u;
}
void BakChatCreateQRCodeRequest::clear_has_scene() {
  _has_bits_[0] &= ~0x00000020u;
}
void BakChatCreateQRCodeRequest::clear_scene() {
  scene_ = 0u;
  clear_has_scene();
}
::google::protobuf::uint32 BakChatCreateQRCodeRequest::scene() const {
  // @@protoc_insertion_point(field_get:micromsg.BakChatCreateQRCodeRequest.Scene)
  return scene_;
}
void BakChatCreateQRCodeRequest::set_scene(::google::protobuf::uint32 value) {
  set_has_scene();
  scene_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BakChatCreateQRCodeRequest.Scene)
}

// optional uint64 DataSize = 7;
bool BakChatCreateQRCodeRequest::has_datasize() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BakChatCreateQRCodeRequest::set_has_datasize() {
  _has_bits_[0] |= 0x00000040u;
}
void BakChatCreateQRCodeRequest::clear_has_datasize() {
  _has_bits_[0] &= ~0x00000040u;
}
void BakChatCreateQRCodeRequest::clear_datasize() {
  datasize_ = GOOGLE_ULONGLONG(0);
  clear_has_datasize();
}
::google::protobuf::uint64 BakChatCreateQRCodeRequest::datasize() const {
  // @@protoc_insertion_point(field_get:micromsg.BakChatCreateQRCodeRequest.DataSize)
  return datasize_;
}
void BakChatCreateQRCodeRequest::set_datasize(::google::protobuf::uint64 value) {
  set_has_datasize();
  datasize_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BakChatCreateQRCodeRequest.DataSize)
}

// optional string WifiName = 8;
bool BakChatCreateQRCodeRequest::has_wifiname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BakChatCreateQRCodeRequest::set_has_wifiname() {
  _has_bits_[0] |= 0x00000004u;
}
void BakChatCreateQRCodeRequest::clear_has_wifiname() {
  _has_bits_[0] &= ~0x00000004u;
}
void BakChatCreateQRCodeRequest::clear_wifiname() {
  wifiname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_wifiname();
}
const ::std::string& BakChatCreateQRCodeRequest::wifiname() const {
  // @@protoc_insertion_point(field_get:micromsg.BakChatCreateQRCodeRequest.WifiName)
  return wifiname_.GetNoArena();
}
void BakChatCreateQRCodeRequest::set_wifiname(const ::std::string& value) {
  set_has_wifiname();
  wifiname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BakChatCreateQRCodeRequest.WifiName)
}
#if LANG_CXX11
void BakChatCreateQRCodeRequest::set_wifiname(::std::string&& value) {
  set_has_wifiname();
  wifiname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BakChatCreateQRCodeRequest.WifiName)
}
#endif
void BakChatCreateQRCodeRequest::set_wifiname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_wifiname();
  wifiname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BakChatCreateQRCodeRequest.WifiName)
}
void BakChatCreateQRCodeRequest::set_wifiname(const char* value, size_t size) {
  set_has_wifiname();
  wifiname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BakChatCreateQRCodeRequest.WifiName)
}
::std::string* BakChatCreateQRCodeRequest::mutable_wifiname() {
  set_has_wifiname();
  // @@protoc_insertion_point(field_mutable:micromsg.BakChatCreateQRCodeRequest.WifiName)
  return wifiname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BakChatCreateQRCodeRequest::release_wifiname() {
  // @@protoc_insertion_point(field_release:micromsg.BakChatCreateQRCodeRequest.WifiName)
  clear_has_wifiname();
  return wifiname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BakChatCreateQRCodeRequest::set_allocated_wifiname(::std::string* wifiname) {
  if (wifiname != NULL) {
    set_has_wifiname();
  } else {
    clear_has_wifiname();
  }
  wifiname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wifiname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BakChatCreateQRCodeRequest.WifiName)
}

// optional int32 Op = 9;
bool BakChatCreateQRCodeRequest::has_op() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void BakChatCreateQRCodeRequest::set_has_op() {
  _has_bits_[0] |= 0x00000080u;
}
void BakChatCreateQRCodeRequest::clear_has_op() {
  _has_bits_[0] &= ~0x00000080u;
}
void BakChatCreateQRCodeRequest::clear_op() {
  op_ = 0;
  clear_has_op();
}
::google::protobuf::int32 BakChatCreateQRCodeRequest::op() const {
  // @@protoc_insertion_point(field_get:micromsg.BakChatCreateQRCodeRequest.Op)
  return op_;
}
void BakChatCreateQRCodeRequest::set_op(::google::protobuf::int32 value) {
  set_has_op();
  op_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BakChatCreateQRCodeRequest.Op)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BakChatCreateQRcodeResponse::kRetFieldNumber;
const int BakChatCreateQRcodeResponse::kQRCodeBufferFieldNumber;
const int BakChatCreateQRcodeResponse::kQRCodeUrlFieldNumber;
const int BakChatCreateQRcodeResponse::kKeyFieldNumber;
const int BakChatCreateQRcodeResponse::kHelloFieldNumber;
const int BakChatCreateQRcodeResponse::kOKFieldNumber;
const int BakChatCreateQRcodeResponse::kEncryFlagFieldNumber;
const int BakChatCreateQRcodeResponse::kIDFieldNumber;
const int BakChatCreateQRcodeResponse::kTickitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BakChatCreateQRcodeResponse::BakChatCreateQRcodeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbackup_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BakChatCreateQRcodeResponse)
}
BakChatCreateQRcodeResponse::BakChatCreateQRcodeResponse(const BakChatCreateQRcodeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  qrcodeurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_qrcodeurl()) {
    qrcodeurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qrcodeurl_);
  }
  hello_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hello()) {
    hello_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hello_);
  }
  ok_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ok()) {
    ok_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ok_);
  }
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  tickit_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tickit()) {
    tickit_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tickit_);
  }
  if (from.has_qrcodebuffer()) {
    qrcodebuffer_ = new ::micromsg::SKBuiltinBuffer_t(*from.qrcodebuffer_);
  } else {
    qrcodebuffer_ = NULL;
  }
  if (from.has_key()) {
    key_ = new ::micromsg::SKBuiltinBuffer_t(*from.key_);
  } else {
    key_ = NULL;
  }
  ::memcpy(&ret_, &from.ret_,
    reinterpret_cast<char*>(&encryflag_) -
    reinterpret_cast<char*>(&ret_) + sizeof(encryflag_));
  // @@protoc_insertion_point(copy_constructor:micromsg.BakChatCreateQRcodeResponse)
}

void BakChatCreateQRcodeResponse::SharedCtor() {
  _cached_size_ = 0;
  qrcodeurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hello_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ok_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tickit_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&qrcodebuffer_, 0, reinterpret_cast<char*>(&encryflag_) -
    reinterpret_cast<char*>(&qrcodebuffer_) + sizeof(encryflag_));
}

BakChatCreateQRcodeResponse::~BakChatCreateQRcodeResponse() {
  // @@protoc_insertion_point(destructor:micromsg.BakChatCreateQRcodeResponse)
  SharedDtor();
}

void BakChatCreateQRcodeResponse::SharedDtor() {
  qrcodeurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hello_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ok_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tickit_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete qrcodebuffer_;
  }
  if (this != internal_default_instance()) {
    delete key_;
  }
}

void BakChatCreateQRcodeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BakChatCreateQRcodeResponse::descriptor() {
  protobuf_mmbackup_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbackup_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BakChatCreateQRcodeResponse& BakChatCreateQRcodeResponse::default_instance() {
  protobuf_mmbackup_2eproto::InitDefaults();
  return *internal_default_instance();
}

BakChatCreateQRcodeResponse* BakChatCreateQRcodeResponse::New(::google::protobuf::Arena* arena) const {
  BakChatCreateQRcodeResponse* n = new BakChatCreateQRcodeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BakChatCreateQRcodeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BakChatCreateQRcodeResponse)
  if (_has_bits_[0 / 32] & 127u) {
    if (has_qrcodeurl()) {
      GOOGLE_DCHECK(!qrcodeurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*qrcodeurl_.UnsafeRawStringPointer())->clear();
    }
    if (has_hello()) {
      GOOGLE_DCHECK(!hello_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*hello_.UnsafeRawStringPointer())->clear();
    }
    if (has_ok()) {
      GOOGLE_DCHECK(!ok_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ok_.UnsafeRawStringPointer())->clear();
    }
    if (has_id()) {
      GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*id_.UnsafeRawStringPointer())->clear();
    }
    if (has_tickit()) {
      GOOGLE_DCHECK(!tickit_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tickit_.UnsafeRawStringPointer())->clear();
    }
    if (has_qrcodebuffer()) {
      GOOGLE_DCHECK(qrcodebuffer_ != NULL);
      qrcodebuffer_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_key()) {
      GOOGLE_DCHECK(key_ != NULL);
      key_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  ret_ = 0u;
  encryflag_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BakChatCreateQRcodeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BakChatCreateQRcodeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Ret = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_ret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t QRCodeBuffer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_qrcodebuffer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string QRCodeUrl = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_qrcodeurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->qrcodeurl().data(), this->qrcodeurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BakChatCreateQRcodeResponse.QRCodeUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t Key = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Hello = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hello()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hello().data(), this->hello().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BakChatCreateQRcodeResponse.Hello");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string OK = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ok()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ok().data(), this->ok().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BakChatCreateQRcodeResponse.OK");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 EncryFlag = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_encryflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &encryflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ID = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BakChatCreateQRcodeResponse.ID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Tickit = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tickit()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tickit().data(), this->tickit().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BakChatCreateQRcodeResponse.Tickit");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BakChatCreateQRcodeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BakChatCreateQRcodeResponse)
  return false;
#undef DO_
}

void BakChatCreateQRcodeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BakChatCreateQRcodeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Ret = 1;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  // required .micromsg.SKBuiltinBuffer_t QRCodeBuffer = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->qrcodebuffer_, output);
  }

  // optional string QRCodeUrl = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->qrcodeurl().data(), this->qrcodeurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BakChatCreateQRcodeResponse.QRCodeUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->qrcodeurl(), output);
  }

  // required .micromsg.SKBuiltinBuffer_t Key = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->key_, output);
  }

  // optional string Hello = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hello().data(), this->hello().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BakChatCreateQRcodeResponse.Hello");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->hello(), output);
  }

  // optional string OK = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ok().data(), this->ok().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BakChatCreateQRcodeResponse.OK");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->ok(), output);
  }

  // required uint32 EncryFlag = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->encryflag(), output);
  }

  // optional string ID = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BakChatCreateQRcodeResponse.ID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->id(), output);
  }

  // optional string Tickit = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tickit().data(), this->tickit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BakChatCreateQRcodeResponse.Tickit");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->tickit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BakChatCreateQRcodeResponse)
}

::google::protobuf::uint8* BakChatCreateQRcodeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BakChatCreateQRcodeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Ret = 1;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  // required .micromsg.SKBuiltinBuffer_t QRCodeBuffer = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->qrcodebuffer_, deterministic, target);
  }

  // optional string QRCodeUrl = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->qrcodeurl().data(), this->qrcodeurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BakChatCreateQRcodeResponse.QRCodeUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->qrcodeurl(), target);
  }

  // required .micromsg.SKBuiltinBuffer_t Key = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->key_, deterministic, target);
  }

  // optional string Hello = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hello().data(), this->hello().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BakChatCreateQRcodeResponse.Hello");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->hello(), target);
  }

  // optional string OK = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ok().data(), this->ok().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BakChatCreateQRcodeResponse.OK");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->ok(), target);
  }

  // required uint32 EncryFlag = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->encryflag(), target);
  }

  // optional string ID = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BakChatCreateQRcodeResponse.ID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->id(), target);
  }

  // optional string Tickit = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tickit().data(), this->tickit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BakChatCreateQRcodeResponse.Tickit");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->tickit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BakChatCreateQRcodeResponse)
  return target;
}

size_t BakChatCreateQRcodeResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.BakChatCreateQRcodeResponse)
  size_t total_size = 0;

  if (has_qrcodebuffer()) {
    // required .micromsg.SKBuiltinBuffer_t QRCodeBuffer = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->qrcodebuffer_);
  }

  if (has_key()) {
    // required .micromsg.SKBuiltinBuffer_t Key = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);
  }

  if (has_ret()) {
    // required uint32 Ret = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ret());
  }

  if (has_encryflag()) {
    // required uint32 EncryFlag = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->encryflag());
  }

  return total_size;
}
size_t BakChatCreateQRcodeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BakChatCreateQRcodeResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x000001e0) ^ 0x000001e0) == 0) {  // All required fields are present.
    // required .micromsg.SKBuiltinBuffer_t QRCodeBuffer = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->qrcodebuffer_);

    // required .micromsg.SKBuiltinBuffer_t Key = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);

    // required uint32 Ret = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ret());

    // required uint32 EncryFlag = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->encryflag());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string QRCodeUrl = 3;
    if (has_qrcodeurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->qrcodeurl());
    }

    // optional string Hello = 5;
    if (has_hello()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hello());
    }

    // optional string OK = 6;
    if (has_ok()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ok());
    }

    // optional string ID = 8;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string Tickit = 9;
    if (has_tickit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tickit());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BakChatCreateQRcodeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BakChatCreateQRcodeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BakChatCreateQRcodeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BakChatCreateQRcodeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BakChatCreateQRcodeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BakChatCreateQRcodeResponse)
    MergeFrom(*source);
  }
}

void BakChatCreateQRcodeResponse::MergeFrom(const BakChatCreateQRcodeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BakChatCreateQRcodeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_qrcodeurl();
      qrcodeurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qrcodeurl_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_hello();
      hello_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hello_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_ok();
      ok_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ok_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_tickit();
      tickit_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tickit_);
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_qrcodebuffer()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.qrcodebuffer());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_key()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.key());
    }
    if (cached_has_bits & 0x00000080u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_encryflag(from.encryflag());
  }
}

void BakChatCreateQRcodeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BakChatCreateQRcodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BakChatCreateQRcodeResponse::CopyFrom(const BakChatCreateQRcodeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BakChatCreateQRcodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BakChatCreateQRcodeResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001e0) != 0x000001e0) return false;
  if (has_qrcodebuffer()) {
    if (!this->qrcodebuffer_->IsInitialized()) return false;
  }
  if (has_key()) {
    if (!this->key_->IsInitialized()) return false;
  }
  return true;
}

void BakChatCreateQRcodeResponse::Swap(BakChatCreateQRcodeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BakChatCreateQRcodeResponse::InternalSwap(BakChatCreateQRcodeResponse* other) {
  qrcodeurl_.Swap(&other->qrcodeurl_);
  hello_.Swap(&other->hello_);
  ok_.Swap(&other->ok_);
  id_.Swap(&other->id_);
  tickit_.Swap(&other->tickit_);
  std::swap(qrcodebuffer_, other->qrcodebuffer_);
  std::swap(key_, other->key_);
  std::swap(ret_, other->ret_);
  std::swap(encryflag_, other->encryflag_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BakChatCreateQRcodeResponse::GetMetadata() const {
  protobuf_mmbackup_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbackup_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BakChatCreateQRcodeResponse

// required uint32 Ret = 1;
bool BakChatCreateQRcodeResponse::has_ret() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void BakChatCreateQRcodeResponse::set_has_ret() {
  _has_bits_[0] |= 0x00000080u;
}
void BakChatCreateQRcodeResponse::clear_has_ret() {
  _has_bits_[0] &= ~0x00000080u;
}
void BakChatCreateQRcodeResponse::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
::google::protobuf::uint32 BakChatCreateQRcodeResponse::ret() const {
  // @@protoc_insertion_point(field_get:micromsg.BakChatCreateQRcodeResponse.Ret)
  return ret_;
}
void BakChatCreateQRcodeResponse::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BakChatCreateQRcodeResponse.Ret)
}

// required .micromsg.SKBuiltinBuffer_t QRCodeBuffer = 2;
bool BakChatCreateQRcodeResponse::has_qrcodebuffer() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BakChatCreateQRcodeResponse::set_has_qrcodebuffer() {
  _has_bits_[0] |= 0x00000020u;
}
void BakChatCreateQRcodeResponse::clear_has_qrcodebuffer() {
  _has_bits_[0] &= ~0x00000020u;
}
void BakChatCreateQRcodeResponse::clear_qrcodebuffer() {
  if (qrcodebuffer_ != NULL) qrcodebuffer_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_qrcodebuffer();
}
const ::micromsg::SKBuiltinBuffer_t& BakChatCreateQRcodeResponse::qrcodebuffer() const {
  // @@protoc_insertion_point(field_get:micromsg.BakChatCreateQRcodeResponse.QRCodeBuffer)
  return qrcodebuffer_ != NULL ? *qrcodebuffer_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* BakChatCreateQRcodeResponse::mutable_qrcodebuffer() {
  set_has_qrcodebuffer();
  if (qrcodebuffer_ == NULL) {
    qrcodebuffer_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BakChatCreateQRcodeResponse.QRCodeBuffer)
  return qrcodebuffer_;
}
::micromsg::SKBuiltinBuffer_t* BakChatCreateQRcodeResponse::release_qrcodebuffer() {
  // @@protoc_insertion_point(field_release:micromsg.BakChatCreateQRcodeResponse.QRCodeBuffer)
  clear_has_qrcodebuffer();
  ::micromsg::SKBuiltinBuffer_t* temp = qrcodebuffer_;
  qrcodebuffer_ = NULL;
  return temp;
}
void BakChatCreateQRcodeResponse::set_allocated_qrcodebuffer(::micromsg::SKBuiltinBuffer_t* qrcodebuffer) {
  delete qrcodebuffer_;
  qrcodebuffer_ = qrcodebuffer;
  if (qrcodebuffer) {
    set_has_qrcodebuffer();
  } else {
    clear_has_qrcodebuffer();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BakChatCreateQRcodeResponse.QRCodeBuffer)
}

// optional string QRCodeUrl = 3;
bool BakChatCreateQRcodeResponse::has_qrcodeurl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BakChatCreateQRcodeResponse::set_has_qrcodeurl() {
  _has_bits_[0] |= 0x00000001u;
}
void BakChatCreateQRcodeResponse::clear_has_qrcodeurl() {
  _has_bits_[0] &= ~0x00000001u;
}
void BakChatCreateQRcodeResponse::clear_qrcodeurl() {
  qrcodeurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_qrcodeurl();
}
const ::std::string& BakChatCreateQRcodeResponse::qrcodeurl() const {
  // @@protoc_insertion_point(field_get:micromsg.BakChatCreateQRcodeResponse.QRCodeUrl)
  return qrcodeurl_.GetNoArena();
}
void BakChatCreateQRcodeResponse::set_qrcodeurl(const ::std::string& value) {
  set_has_qrcodeurl();
  qrcodeurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BakChatCreateQRcodeResponse.QRCodeUrl)
}
#if LANG_CXX11
void BakChatCreateQRcodeResponse::set_qrcodeurl(::std::string&& value) {
  set_has_qrcodeurl();
  qrcodeurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BakChatCreateQRcodeResponse.QRCodeUrl)
}
#endif
void BakChatCreateQRcodeResponse::set_qrcodeurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_qrcodeurl();
  qrcodeurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BakChatCreateQRcodeResponse.QRCodeUrl)
}
void BakChatCreateQRcodeResponse::set_qrcodeurl(const char* value, size_t size) {
  set_has_qrcodeurl();
  qrcodeurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BakChatCreateQRcodeResponse.QRCodeUrl)
}
::std::string* BakChatCreateQRcodeResponse::mutable_qrcodeurl() {
  set_has_qrcodeurl();
  // @@protoc_insertion_point(field_mutable:micromsg.BakChatCreateQRcodeResponse.QRCodeUrl)
  return qrcodeurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BakChatCreateQRcodeResponse::release_qrcodeurl() {
  // @@protoc_insertion_point(field_release:micromsg.BakChatCreateQRcodeResponse.QRCodeUrl)
  clear_has_qrcodeurl();
  return qrcodeurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BakChatCreateQRcodeResponse::set_allocated_qrcodeurl(::std::string* qrcodeurl) {
  if (qrcodeurl != NULL) {
    set_has_qrcodeurl();
  } else {
    clear_has_qrcodeurl();
  }
  qrcodeurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), qrcodeurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BakChatCreateQRcodeResponse.QRCodeUrl)
}

// required .micromsg.SKBuiltinBuffer_t Key = 4;
bool BakChatCreateQRcodeResponse::has_key() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BakChatCreateQRcodeResponse::set_has_key() {
  _has_bits_[0] |= 0x00000040u;
}
void BakChatCreateQRcodeResponse::clear_has_key() {
  _has_bits_[0] &= ~0x00000040u;
}
void BakChatCreateQRcodeResponse::clear_key() {
  if (key_ != NULL) key_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_key();
}
const ::micromsg::SKBuiltinBuffer_t& BakChatCreateQRcodeResponse::key() const {
  // @@protoc_insertion_point(field_get:micromsg.BakChatCreateQRcodeResponse.Key)
  return key_ != NULL ? *key_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* BakChatCreateQRcodeResponse::mutable_key() {
  set_has_key();
  if (key_ == NULL) {
    key_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BakChatCreateQRcodeResponse.Key)
  return key_;
}
::micromsg::SKBuiltinBuffer_t* BakChatCreateQRcodeResponse::release_key() {
  // @@protoc_insertion_point(field_release:micromsg.BakChatCreateQRcodeResponse.Key)
  clear_has_key();
  ::micromsg::SKBuiltinBuffer_t* temp = key_;
  key_ = NULL;
  return temp;
}
void BakChatCreateQRcodeResponse::set_allocated_key(::micromsg::SKBuiltinBuffer_t* key) {
  delete key_;
  key_ = key;
  if (key) {
    set_has_key();
  } else {
    clear_has_key();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BakChatCreateQRcodeResponse.Key)
}

// optional string Hello = 5;
bool BakChatCreateQRcodeResponse::has_hello() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BakChatCreateQRcodeResponse::set_has_hello() {
  _has_bits_[0] |= 0x00000002u;
}
void BakChatCreateQRcodeResponse::clear_has_hello() {
  _has_bits_[0] &= ~0x00000002u;
}
void BakChatCreateQRcodeResponse::clear_hello() {
  hello_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hello();
}
const ::std::string& BakChatCreateQRcodeResponse::hello() const {
  // @@protoc_insertion_point(field_get:micromsg.BakChatCreateQRcodeResponse.Hello)
  return hello_.GetNoArena();
}
void BakChatCreateQRcodeResponse::set_hello(const ::std::string& value) {
  set_has_hello();
  hello_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BakChatCreateQRcodeResponse.Hello)
}
#if LANG_CXX11
void BakChatCreateQRcodeResponse::set_hello(::std::string&& value) {
  set_has_hello();
  hello_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BakChatCreateQRcodeResponse.Hello)
}
#endif
void BakChatCreateQRcodeResponse::set_hello(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hello();
  hello_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BakChatCreateQRcodeResponse.Hello)
}
void BakChatCreateQRcodeResponse::set_hello(const char* value, size_t size) {
  set_has_hello();
  hello_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BakChatCreateQRcodeResponse.Hello)
}
::std::string* BakChatCreateQRcodeResponse::mutable_hello() {
  set_has_hello();
  // @@protoc_insertion_point(field_mutable:micromsg.BakChatCreateQRcodeResponse.Hello)
  return hello_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BakChatCreateQRcodeResponse::release_hello() {
  // @@protoc_insertion_point(field_release:micromsg.BakChatCreateQRcodeResponse.Hello)
  clear_has_hello();
  return hello_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BakChatCreateQRcodeResponse::set_allocated_hello(::std::string* hello) {
  if (hello != NULL) {
    set_has_hello();
  } else {
    clear_has_hello();
  }
  hello_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hello);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BakChatCreateQRcodeResponse.Hello)
}

// optional string OK = 6;
bool BakChatCreateQRcodeResponse::has_ok() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BakChatCreateQRcodeResponse::set_has_ok() {
  _has_bits_[0] |= 0x00000004u;
}
void BakChatCreateQRcodeResponse::clear_has_ok() {
  _has_bits_[0] &= ~0x00000004u;
}
void BakChatCreateQRcodeResponse::clear_ok() {
  ok_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ok();
}
const ::std::string& BakChatCreateQRcodeResponse::ok() const {
  // @@protoc_insertion_point(field_get:micromsg.BakChatCreateQRcodeResponse.OK)
  return ok_.GetNoArena();
}
void BakChatCreateQRcodeResponse::set_ok(const ::std::string& value) {
  set_has_ok();
  ok_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BakChatCreateQRcodeResponse.OK)
}
#if LANG_CXX11
void BakChatCreateQRcodeResponse::set_ok(::std::string&& value) {
  set_has_ok();
  ok_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BakChatCreateQRcodeResponse.OK)
}
#endif
void BakChatCreateQRcodeResponse::set_ok(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ok();
  ok_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BakChatCreateQRcodeResponse.OK)
}
void BakChatCreateQRcodeResponse::set_ok(const char* value, size_t size) {
  set_has_ok();
  ok_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BakChatCreateQRcodeResponse.OK)
}
::std::string* BakChatCreateQRcodeResponse::mutable_ok() {
  set_has_ok();
  // @@protoc_insertion_point(field_mutable:micromsg.BakChatCreateQRcodeResponse.OK)
  return ok_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BakChatCreateQRcodeResponse::release_ok() {
  // @@protoc_insertion_point(field_release:micromsg.BakChatCreateQRcodeResponse.OK)
  clear_has_ok();
  return ok_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BakChatCreateQRcodeResponse::set_allocated_ok(::std::string* ok) {
  if (ok != NULL) {
    set_has_ok();
  } else {
    clear_has_ok();
  }
  ok_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ok);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BakChatCreateQRcodeResponse.OK)
}

// required uint32 EncryFlag = 7;
bool BakChatCreateQRcodeResponse::has_encryflag() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void BakChatCreateQRcodeResponse::set_has_encryflag() {
  _has_bits_[0] |= 0x00000100u;
}
void BakChatCreateQRcodeResponse::clear_has_encryflag() {
  _has_bits_[0] &= ~0x00000100u;
}
void BakChatCreateQRcodeResponse::clear_encryflag() {
  encryflag_ = 0u;
  clear_has_encryflag();
}
::google::protobuf::uint32 BakChatCreateQRcodeResponse::encryflag() const {
  // @@protoc_insertion_point(field_get:micromsg.BakChatCreateQRcodeResponse.EncryFlag)
  return encryflag_;
}
void BakChatCreateQRcodeResponse::set_encryflag(::google::protobuf::uint32 value) {
  set_has_encryflag();
  encryflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BakChatCreateQRcodeResponse.EncryFlag)
}

// optional string ID = 8;
bool BakChatCreateQRcodeResponse::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BakChatCreateQRcodeResponse::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
void BakChatCreateQRcodeResponse::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void BakChatCreateQRcodeResponse::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
const ::std::string& BakChatCreateQRcodeResponse::id() const {
  // @@protoc_insertion_point(field_get:micromsg.BakChatCreateQRcodeResponse.ID)
  return id_.GetNoArena();
}
void BakChatCreateQRcodeResponse::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BakChatCreateQRcodeResponse.ID)
}
#if LANG_CXX11
void BakChatCreateQRcodeResponse::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BakChatCreateQRcodeResponse.ID)
}
#endif
void BakChatCreateQRcodeResponse::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BakChatCreateQRcodeResponse.ID)
}
void BakChatCreateQRcodeResponse::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BakChatCreateQRcodeResponse.ID)
}
::std::string* BakChatCreateQRcodeResponse::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:micromsg.BakChatCreateQRcodeResponse.ID)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BakChatCreateQRcodeResponse::release_id() {
  // @@protoc_insertion_point(field_release:micromsg.BakChatCreateQRcodeResponse.ID)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BakChatCreateQRcodeResponse::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BakChatCreateQRcodeResponse.ID)
}

// optional string Tickit = 9;
bool BakChatCreateQRcodeResponse::has_tickit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BakChatCreateQRcodeResponse::set_has_tickit() {
  _has_bits_[0] |= 0x00000010u;
}
void BakChatCreateQRcodeResponse::clear_has_tickit() {
  _has_bits_[0] &= ~0x00000010u;
}
void BakChatCreateQRcodeResponse::clear_tickit() {
  tickit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tickit();
}
const ::std::string& BakChatCreateQRcodeResponse::tickit() const {
  // @@protoc_insertion_point(field_get:micromsg.BakChatCreateQRcodeResponse.Tickit)
  return tickit_.GetNoArena();
}
void BakChatCreateQRcodeResponse::set_tickit(const ::std::string& value) {
  set_has_tickit();
  tickit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BakChatCreateQRcodeResponse.Tickit)
}
#if LANG_CXX11
void BakChatCreateQRcodeResponse::set_tickit(::std::string&& value) {
  set_has_tickit();
  tickit_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BakChatCreateQRcodeResponse.Tickit)
}
#endif
void BakChatCreateQRcodeResponse::set_tickit(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tickit();
  tickit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BakChatCreateQRcodeResponse.Tickit)
}
void BakChatCreateQRcodeResponse::set_tickit(const char* value, size_t size) {
  set_has_tickit();
  tickit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BakChatCreateQRcodeResponse.Tickit)
}
::std::string* BakChatCreateQRcodeResponse::mutable_tickit() {
  set_has_tickit();
  // @@protoc_insertion_point(field_mutable:micromsg.BakChatCreateQRcodeResponse.Tickit)
  return tickit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BakChatCreateQRcodeResponse::release_tickit() {
  // @@protoc_insertion_point(field_release:micromsg.BakChatCreateQRcodeResponse.Tickit)
  clear_has_tickit();
  return tickit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BakChatCreateQRcodeResponse::set_allocated_tickit(::std::string* tickit) {
  if (tickit != NULL) {
    set_has_tickit();
  } else {
    clear_has_tickit();
  }
  tickit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tickit);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BakChatCreateQRcodeResponse.Tickit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PacketAuthenticateRequest::kStepFieldNumber;
const int PacketAuthenticateRequest::kIDFieldNumber;
const int PacketAuthenticateRequest::kDataFieldNumber;
const int PacketAuthenticateRequest::kVersionFieldNumber;
const int PacketAuthenticateRequest::kTypeFieldNumber;
const int PacketAuthenticateRequest::kSupportExtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PacketAuthenticateRequest::PacketAuthenticateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbackup_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.PacketAuthenticateRequest)
}
PacketAuthenticateRequest::PacketAuthenticateRequest(const PacketAuthenticateRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&step_, &from.step_,
    reinterpret_cast<char*>(&supportext_) -
    reinterpret_cast<char*>(&step_) + sizeof(supportext_));
  // @@protoc_insertion_point(copy_constructor:micromsg.PacketAuthenticateRequest)
}

void PacketAuthenticateRequest::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&step_, 0, reinterpret_cast<char*>(&supportext_) -
    reinterpret_cast<char*>(&step_) + sizeof(supportext_));
}

PacketAuthenticateRequest::~PacketAuthenticateRequest() {
  // @@protoc_insertion_point(destructor:micromsg.PacketAuthenticateRequest)
  SharedDtor();
}

void PacketAuthenticateRequest::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PacketAuthenticateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PacketAuthenticateRequest::descriptor() {
  protobuf_mmbackup_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbackup_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PacketAuthenticateRequest& PacketAuthenticateRequest::default_instance() {
  protobuf_mmbackup_2eproto::InitDefaults();
  return *internal_default_instance();
}

PacketAuthenticateRequest* PacketAuthenticateRequest::New(::google::protobuf::Arena* arena) const {
  PacketAuthenticateRequest* n = new PacketAuthenticateRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PacketAuthenticateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.PacketAuthenticateRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_id()) {
      GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*id_.UnsafeRawStringPointer())->clear();
    }
    if (has_data()) {
      GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*data_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 60u) {
    ::memset(&step_, 0, reinterpret_cast<char*>(&supportext_) -
      reinterpret_cast<char*>(&step_) + sizeof(supportext_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PacketAuthenticateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.PacketAuthenticateRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Step = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_step();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &step_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string ID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.PacketAuthenticateRequest.ID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes Data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 Version = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 Type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 SupportExt = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_supportext();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &supportext_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.PacketAuthenticateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.PacketAuthenticateRequest)
  return false;
#undef DO_
}

void PacketAuthenticateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.PacketAuthenticateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 Step = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->step(), output);
  }

  // required string ID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PacketAuthenticateRequest.ID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  // optional bytes Data = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  // optional int32 Version = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->version(), output);
  }

  // optional int32 Type = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->type(), output);
  }

  // optional int32 SupportExt = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->supportext(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.PacketAuthenticateRequest)
}

::google::protobuf::uint8* PacketAuthenticateRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.PacketAuthenticateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 Step = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->step(), target);
  }

  // required string ID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PacketAuthenticateRequest.ID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  // optional bytes Data = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  // optional int32 Version = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->version(), target);
  }

  // optional int32 Type = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->type(), target);
  }

  // optional int32 SupportExt = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->supportext(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.PacketAuthenticateRequest)
  return target;
}

size_t PacketAuthenticateRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.PacketAuthenticateRequest)
  size_t total_size = 0;

  if (has_id()) {
    // required string ID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  if (has_step()) {
    // required int32 Step = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->step());
  }

  return total_size;
}
size_t PacketAuthenticateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.PacketAuthenticateRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required string ID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());

    // required int32 Step = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->step());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bytes Data = 3;
  if (has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  if (_has_bits_[0 / 32] & 56u) {
    // optional int32 Version = 4;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional int32 Type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 SupportExt = 6;
    if (has_supportext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->supportext());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PacketAuthenticateRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.PacketAuthenticateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PacketAuthenticateRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PacketAuthenticateRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.PacketAuthenticateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.PacketAuthenticateRequest)
    MergeFrom(*source);
  }
}

void PacketAuthenticateRequest::MergeFrom(const PacketAuthenticateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.PacketAuthenticateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000004u) {
      step_ = from.step_;
    }
    if (cached_has_bits & 0x00000008u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000020u) {
      supportext_ = from.supportext_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PacketAuthenticateRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.PacketAuthenticateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PacketAuthenticateRequest::CopyFrom(const PacketAuthenticateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.PacketAuthenticateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketAuthenticateRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  return true;
}

void PacketAuthenticateRequest::Swap(PacketAuthenticateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PacketAuthenticateRequest::InternalSwap(PacketAuthenticateRequest* other) {
  id_.Swap(&other->id_);
  data_.Swap(&other->data_);
  std::swap(step_, other->step_);
  std::swap(version_, other->version_);
  std::swap(type_, other->type_);
  std::swap(supportext_, other->supportext_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PacketAuthenticateRequest::GetMetadata() const {
  protobuf_mmbackup_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbackup_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PacketAuthenticateRequest

// required int32 Step = 1;
bool PacketAuthenticateRequest::has_step() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PacketAuthenticateRequest::set_has_step() {
  _has_bits_[0] |= 0x00000004u;
}
void PacketAuthenticateRequest::clear_has_step() {
  _has_bits_[0] &= ~0x00000004u;
}
void PacketAuthenticateRequest::clear_step() {
  step_ = 0;
  clear_has_step();
}
::google::protobuf::int32 PacketAuthenticateRequest::step() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketAuthenticateRequest.Step)
  return step_;
}
void PacketAuthenticateRequest::set_step(::google::protobuf::int32 value) {
  set_has_step();
  step_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PacketAuthenticateRequest.Step)
}

// required string ID = 2;
bool PacketAuthenticateRequest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PacketAuthenticateRequest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void PacketAuthenticateRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void PacketAuthenticateRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
const ::std::string& PacketAuthenticateRequest::id() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketAuthenticateRequest.ID)
  return id_.GetNoArena();
}
void PacketAuthenticateRequest::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.PacketAuthenticateRequest.ID)
}
#if LANG_CXX11
void PacketAuthenticateRequest::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.PacketAuthenticateRequest.ID)
}
#endif
void PacketAuthenticateRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.PacketAuthenticateRequest.ID)
}
void PacketAuthenticateRequest::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.PacketAuthenticateRequest.ID)
}
::std::string* PacketAuthenticateRequest::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:micromsg.PacketAuthenticateRequest.ID)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PacketAuthenticateRequest::release_id() {
  // @@protoc_insertion_point(field_release:micromsg.PacketAuthenticateRequest.ID)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PacketAuthenticateRequest::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:micromsg.PacketAuthenticateRequest.ID)
}

// optional bytes Data = 3;
bool PacketAuthenticateRequest::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PacketAuthenticateRequest::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
void PacketAuthenticateRequest::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void PacketAuthenticateRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& PacketAuthenticateRequest::data() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketAuthenticateRequest.Data)
  return data_.GetNoArena();
}
void PacketAuthenticateRequest::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.PacketAuthenticateRequest.Data)
}
#if LANG_CXX11
void PacketAuthenticateRequest::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.PacketAuthenticateRequest.Data)
}
#endif
void PacketAuthenticateRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.PacketAuthenticateRequest.Data)
}
void PacketAuthenticateRequest::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.PacketAuthenticateRequest.Data)
}
::std::string* PacketAuthenticateRequest::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:micromsg.PacketAuthenticateRequest.Data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PacketAuthenticateRequest::release_data() {
  // @@protoc_insertion_point(field_release:micromsg.PacketAuthenticateRequest.Data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PacketAuthenticateRequest::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:micromsg.PacketAuthenticateRequest.Data)
}

// optional int32 Version = 4;
bool PacketAuthenticateRequest::has_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PacketAuthenticateRequest::set_has_version() {
  _has_bits_[0] |= 0x00000008u;
}
void PacketAuthenticateRequest::clear_has_version() {
  _has_bits_[0] &= ~0x00000008u;
}
void PacketAuthenticateRequest::clear_version() {
  version_ = 0;
  clear_has_version();
}
::google::protobuf::int32 PacketAuthenticateRequest::version() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketAuthenticateRequest.Version)
  return version_;
}
void PacketAuthenticateRequest::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PacketAuthenticateRequest.Version)
}

// optional int32 Type = 5;
bool PacketAuthenticateRequest::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PacketAuthenticateRequest::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
void PacketAuthenticateRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void PacketAuthenticateRequest::clear_type() {
  type_ = 0;
  clear_has_type();
}
::google::protobuf::int32 PacketAuthenticateRequest::type() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketAuthenticateRequest.Type)
  return type_;
}
void PacketAuthenticateRequest::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PacketAuthenticateRequest.Type)
}

// optional int32 SupportExt = 6;
bool PacketAuthenticateRequest::has_supportext() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PacketAuthenticateRequest::set_has_supportext() {
  _has_bits_[0] |= 0x00000020u;
}
void PacketAuthenticateRequest::clear_has_supportext() {
  _has_bits_[0] &= ~0x00000020u;
}
void PacketAuthenticateRequest::clear_supportext() {
  supportext_ = 0;
  clear_has_supportext();
}
::google::protobuf::int32 PacketAuthenticateRequest::supportext() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketAuthenticateRequest.SupportExt)
  return supportext_;
}
void PacketAuthenticateRequest::set_supportext(::google::protobuf::int32 value) {
  set_has_supportext();
  supportext_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PacketAuthenticateRequest.SupportExt)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PacketAuthenticateResponse::kStepFieldNumber;
const int PacketAuthenticateResponse::kStatusFieldNumber;
const int PacketAuthenticateResponse::kIDFieldNumber;
const int PacketAuthenticateResponse::kDataFieldNumber;
const int PacketAuthenticateResponse::kVersionFieldNumber;
const int PacketAuthenticateResponse::kTypeFieldNumber;
const int PacketAuthenticateResponse::kSupportExtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PacketAuthenticateResponse::PacketAuthenticateResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbackup_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.PacketAuthenticateResponse)
}
PacketAuthenticateResponse::PacketAuthenticateResponse(const PacketAuthenticateResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&step_, &from.step_,
    reinterpret_cast<char*>(&supportext_) -
    reinterpret_cast<char*>(&step_) + sizeof(supportext_));
  // @@protoc_insertion_point(copy_constructor:micromsg.PacketAuthenticateResponse)
}

void PacketAuthenticateResponse::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&step_, 0, reinterpret_cast<char*>(&supportext_) -
    reinterpret_cast<char*>(&step_) + sizeof(supportext_));
}

PacketAuthenticateResponse::~PacketAuthenticateResponse() {
  // @@protoc_insertion_point(destructor:micromsg.PacketAuthenticateResponse)
  SharedDtor();
}

void PacketAuthenticateResponse::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PacketAuthenticateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PacketAuthenticateResponse::descriptor() {
  protobuf_mmbackup_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbackup_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PacketAuthenticateResponse& PacketAuthenticateResponse::default_instance() {
  protobuf_mmbackup_2eproto::InitDefaults();
  return *internal_default_instance();
}

PacketAuthenticateResponse* PacketAuthenticateResponse::New(::google::protobuf::Arena* arena) const {
  PacketAuthenticateResponse* n = new PacketAuthenticateResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PacketAuthenticateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.PacketAuthenticateResponse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_id()) {
      GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*id_.UnsafeRawStringPointer())->clear();
    }
    if (has_data()) {
      GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*data_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 124u) {
    ::memset(&step_, 0, reinterpret_cast<char*>(&supportext_) -
      reinterpret_cast<char*>(&step_) + sizeof(supportext_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PacketAuthenticateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.PacketAuthenticateResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Step = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_step();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &step_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 Status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string ID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.PacketAuthenticateResponse.ID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes Data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 Version = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 Type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 SupportExt = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_supportext();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &supportext_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.PacketAuthenticateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.PacketAuthenticateResponse)
  return false;
#undef DO_
}

void PacketAuthenticateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.PacketAuthenticateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 Step = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->step(), output);
  }

  // required int32 Status = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

  // required string ID = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PacketAuthenticateResponse.ID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->id(), output);
  }

  // optional bytes Data = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  // optional int32 Version = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->version(), output);
  }

  // optional int32 Type = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->type(), output);
  }

  // optional int32 SupportExt = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->supportext(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.PacketAuthenticateResponse)
}

::google::protobuf::uint8* PacketAuthenticateResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.PacketAuthenticateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 Step = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->step(), target);
  }

  // required int32 Status = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }

  // required string ID = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PacketAuthenticateResponse.ID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->id(), target);
  }

  // optional bytes Data = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  // optional int32 Version = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->version(), target);
  }

  // optional int32 Type = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->type(), target);
  }

  // optional int32 SupportExt = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->supportext(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.PacketAuthenticateResponse)
  return target;
}

size_t PacketAuthenticateResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.PacketAuthenticateResponse)
  size_t total_size = 0;

  if (has_id()) {
    // required string ID = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  if (has_step()) {
    // required int32 Step = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->step());
  }

  if (has_status()) {
    // required int32 Status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  return total_size;
}
size_t PacketAuthenticateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.PacketAuthenticateResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000d) ^ 0x0000000d) == 0) {  // All required fields are present.
    // required string ID = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());

    // required int32 Step = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->step());

    // required int32 Status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bytes Data = 4;
  if (has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  if (_has_bits_[0 / 32] & 112u) {
    // optional int32 Version = 5;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional int32 Type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 SupportExt = 7;
    if (has_supportext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->supportext());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PacketAuthenticateResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.PacketAuthenticateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PacketAuthenticateResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PacketAuthenticateResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.PacketAuthenticateResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.PacketAuthenticateResponse)
    MergeFrom(*source);
  }
}

void PacketAuthenticateResponse::MergeFrom(const PacketAuthenticateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.PacketAuthenticateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000004u) {
      step_ = from.step_;
    }
    if (cached_has_bits & 0x00000008u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000010u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000040u) {
      supportext_ = from.supportext_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PacketAuthenticateResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.PacketAuthenticateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PacketAuthenticateResponse::CopyFrom(const PacketAuthenticateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.PacketAuthenticateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketAuthenticateResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;
  return true;
}

void PacketAuthenticateResponse::Swap(PacketAuthenticateResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PacketAuthenticateResponse::InternalSwap(PacketAuthenticateResponse* other) {
  id_.Swap(&other->id_);
  data_.Swap(&other->data_);
  std::swap(step_, other->step_);
  std::swap(status_, other->status_);
  std::swap(version_, other->version_);
  std::swap(type_, other->type_);
  std::swap(supportext_, other->supportext_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PacketAuthenticateResponse::GetMetadata() const {
  protobuf_mmbackup_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbackup_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PacketAuthenticateResponse

// required int32 Step = 1;
bool PacketAuthenticateResponse::has_step() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PacketAuthenticateResponse::set_has_step() {
  _has_bits_[0] |= 0x00000004u;
}
void PacketAuthenticateResponse::clear_has_step() {
  _has_bits_[0] &= ~0x00000004u;
}
void PacketAuthenticateResponse::clear_step() {
  step_ = 0;
  clear_has_step();
}
::google::protobuf::int32 PacketAuthenticateResponse::step() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketAuthenticateResponse.Step)
  return step_;
}
void PacketAuthenticateResponse::set_step(::google::protobuf::int32 value) {
  set_has_step();
  step_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PacketAuthenticateResponse.Step)
}

// required int32 Status = 2;
bool PacketAuthenticateResponse::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PacketAuthenticateResponse::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
void PacketAuthenticateResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
void PacketAuthenticateResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
::google::protobuf::int32 PacketAuthenticateResponse::status() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketAuthenticateResponse.Status)
  return status_;
}
void PacketAuthenticateResponse::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PacketAuthenticateResponse.Status)
}

// required string ID = 3;
bool PacketAuthenticateResponse::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PacketAuthenticateResponse::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void PacketAuthenticateResponse::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void PacketAuthenticateResponse::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
const ::std::string& PacketAuthenticateResponse::id() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketAuthenticateResponse.ID)
  return id_.GetNoArena();
}
void PacketAuthenticateResponse::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.PacketAuthenticateResponse.ID)
}
#if LANG_CXX11
void PacketAuthenticateResponse::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.PacketAuthenticateResponse.ID)
}
#endif
void PacketAuthenticateResponse::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.PacketAuthenticateResponse.ID)
}
void PacketAuthenticateResponse::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.PacketAuthenticateResponse.ID)
}
::std::string* PacketAuthenticateResponse::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:micromsg.PacketAuthenticateResponse.ID)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PacketAuthenticateResponse::release_id() {
  // @@protoc_insertion_point(field_release:micromsg.PacketAuthenticateResponse.ID)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PacketAuthenticateResponse::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:micromsg.PacketAuthenticateResponse.ID)
}

// optional bytes Data = 4;
bool PacketAuthenticateResponse::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PacketAuthenticateResponse::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
void PacketAuthenticateResponse::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void PacketAuthenticateResponse::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& PacketAuthenticateResponse::data() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketAuthenticateResponse.Data)
  return data_.GetNoArena();
}
void PacketAuthenticateResponse::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.PacketAuthenticateResponse.Data)
}
#if LANG_CXX11
void PacketAuthenticateResponse::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.PacketAuthenticateResponse.Data)
}
#endif
void PacketAuthenticateResponse::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.PacketAuthenticateResponse.Data)
}
void PacketAuthenticateResponse::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.PacketAuthenticateResponse.Data)
}
::std::string* PacketAuthenticateResponse::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:micromsg.PacketAuthenticateResponse.Data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PacketAuthenticateResponse::release_data() {
  // @@protoc_insertion_point(field_release:micromsg.PacketAuthenticateResponse.Data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PacketAuthenticateResponse::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:micromsg.PacketAuthenticateResponse.Data)
}

// optional int32 Version = 5;
bool PacketAuthenticateResponse::has_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PacketAuthenticateResponse::set_has_version() {
  _has_bits_[0] |= 0x00000010u;
}
void PacketAuthenticateResponse::clear_has_version() {
  _has_bits_[0] &= ~0x00000010u;
}
void PacketAuthenticateResponse::clear_version() {
  version_ = 0;
  clear_has_version();
}
::google::protobuf::int32 PacketAuthenticateResponse::version() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketAuthenticateResponse.Version)
  return version_;
}
void PacketAuthenticateResponse::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PacketAuthenticateResponse.Version)
}

// optional int32 Type = 6;
bool PacketAuthenticateResponse::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PacketAuthenticateResponse::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
void PacketAuthenticateResponse::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void PacketAuthenticateResponse::clear_type() {
  type_ = 0;
  clear_has_type();
}
::google::protobuf::int32 PacketAuthenticateResponse::type() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketAuthenticateResponse.Type)
  return type_;
}
void PacketAuthenticateResponse::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PacketAuthenticateResponse.Type)
}

// optional int32 SupportExt = 7;
bool PacketAuthenticateResponse::has_supportext() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PacketAuthenticateResponse::set_has_supportext() {
  _has_bits_[0] |= 0x00000040u;
}
void PacketAuthenticateResponse::clear_has_supportext() {
  _has_bits_[0] &= ~0x00000040u;
}
void PacketAuthenticateResponse::clear_supportext() {
  supportext_ = 0;
  clear_has_supportext();
}
::google::protobuf::int32 PacketAuthenticateResponse::supportext() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketAuthenticateResponse.SupportExt)
  return supportext_;
}
void PacketAuthenticateResponse::set_supportext(::google::protobuf::int32 value) {
  set_has_supportext();
  supportext_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PacketAuthenticateResponse.SupportExt)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BackupStartGeneralInfo::kDeviceIDFieldNumber;
const int BackupStartGeneralInfo::kDeviceNameFieldNumber;
const int BackupStartGeneralInfo::kModelFieldNumber;
const int BackupStartGeneralInfo::kSystemNameFieldNumber;
const int BackupStartGeneralInfo::kSystemVersionFieldNumber;
const int BackupStartGeneralInfo::kWechatVersionFieldNumber;
const int BackupStartGeneralInfo::kDeviceFreeSpaceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BackupStartGeneralInfo::BackupStartGeneralInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbackup_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BackupStartGeneralInfo)
}
BackupStartGeneralInfo::BackupStartGeneralInfo(const BackupStartGeneralInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  deviceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_deviceid()) {
    deviceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deviceid_);
  }
  devicename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_devicename()) {
    devicename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicename_);
  }
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_model()) {
    model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
  systemname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_systemname()) {
    systemname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.systemname_);
  }
  systemversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_systemversion()) {
    systemversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.systemversion_);
  }
  ::memcpy(&devicefreespace_, &from.devicefreespace_,
    reinterpret_cast<char*>(&wechatversion_) -
    reinterpret_cast<char*>(&devicefreespace_) + sizeof(wechatversion_));
  // @@protoc_insertion_point(copy_constructor:micromsg.BackupStartGeneralInfo)
}

void BackupStartGeneralInfo::SharedCtor() {
  _cached_size_ = 0;
  deviceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  systemname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  systemversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&devicefreespace_, 0, reinterpret_cast<char*>(&wechatversion_) -
    reinterpret_cast<char*>(&devicefreespace_) + sizeof(wechatversion_));
}

BackupStartGeneralInfo::~BackupStartGeneralInfo() {
  // @@protoc_insertion_point(destructor:micromsg.BackupStartGeneralInfo)
  SharedDtor();
}

void BackupStartGeneralInfo::SharedDtor() {
  deviceid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  systemname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  systemversion_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BackupStartGeneralInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BackupStartGeneralInfo::descriptor() {
  protobuf_mmbackup_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbackup_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BackupStartGeneralInfo& BackupStartGeneralInfo::default_instance() {
  protobuf_mmbackup_2eproto::InitDefaults();
  return *internal_default_instance();
}

BackupStartGeneralInfo* BackupStartGeneralInfo::New(::google::protobuf::Arena* arena) const {
  BackupStartGeneralInfo* n = new BackupStartGeneralInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BackupStartGeneralInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BackupStartGeneralInfo)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_deviceid()) {
      GOOGLE_DCHECK(!deviceid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*deviceid_.UnsafeRawStringPointer())->clear();
    }
    if (has_devicename()) {
      GOOGLE_DCHECK(!devicename_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*devicename_.UnsafeRawStringPointer())->clear();
    }
    if (has_model()) {
      GOOGLE_DCHECK(!model_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*model_.UnsafeRawStringPointer())->clear();
    }
    if (has_systemname()) {
      GOOGLE_DCHECK(!systemname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*systemname_.UnsafeRawStringPointer())->clear();
    }
    if (has_systemversion()) {
      GOOGLE_DCHECK(!systemversion_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*systemversion_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 96u) {
    ::memset(&devicefreespace_, 0, reinterpret_cast<char*>(&wechatversion_) -
      reinterpret_cast<char*>(&devicefreespace_) + sizeof(wechatversion_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BackupStartGeneralInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BackupStartGeneralInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string DeviceID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deviceid().data(), this->deviceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BackupStartGeneralInfo.DeviceID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string DeviceName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devicename().data(), this->devicename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BackupStartGeneralInfo.DeviceName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string Model = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->model().data(), this->model().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BackupStartGeneralInfo.Model");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string SystemName = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_systemname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->systemname().data(), this->systemname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BackupStartGeneralInfo.SystemName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string SystemVersion = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_systemversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->systemversion().data(), this->systemversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BackupStartGeneralInfo.SystemVersion");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 WechatVersion = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_wechatversion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wechatversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 DeviceFreeSpace = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_devicefreespace();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &devicefreespace_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BackupStartGeneralInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BackupStartGeneralInfo)
  return false;
#undef DO_
}

void BackupStartGeneralInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BackupStartGeneralInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string DeviceID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BackupStartGeneralInfo.DeviceID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->deviceid(), output);
  }

  // required string DeviceName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicename().data(), this->devicename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BackupStartGeneralInfo.DeviceName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->devicename(), output);
  }

  // required string Model = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BackupStartGeneralInfo.Model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->model(), output);
  }

  // required string SystemName = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->systemname().data(), this->systemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BackupStartGeneralInfo.SystemName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->systemname(), output);
  }

  // required string SystemVersion = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->systemversion().data(), this->systemversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BackupStartGeneralInfo.SystemVersion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->systemversion(), output);
  }

  // required uint32 WechatVersion = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->wechatversion(), output);
  }

  // required uint64 DeviceFreeSpace = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->devicefreespace(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BackupStartGeneralInfo)
}

::google::protobuf::uint8* BackupStartGeneralInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BackupStartGeneralInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string DeviceID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BackupStartGeneralInfo.DeviceID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->deviceid(), target);
  }

  // required string DeviceName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicename().data(), this->devicename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BackupStartGeneralInfo.DeviceName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->devicename(), target);
  }

  // required string Model = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BackupStartGeneralInfo.Model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->model(), target);
  }

  // required string SystemName = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->systemname().data(), this->systemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BackupStartGeneralInfo.SystemName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->systemname(), target);
  }

  // required string SystemVersion = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->systemversion().data(), this->systemversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BackupStartGeneralInfo.SystemVersion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->systemversion(), target);
  }

  // required uint32 WechatVersion = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->wechatversion(), target);
  }

  // required uint64 DeviceFreeSpace = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->devicefreespace(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BackupStartGeneralInfo)
  return target;
}

size_t BackupStartGeneralInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.BackupStartGeneralInfo)
  size_t total_size = 0;

  if (has_deviceid()) {
    // required string DeviceID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->deviceid());
  }

  if (has_devicename()) {
    // required string DeviceName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->devicename());
  }

  if (has_model()) {
    // required string Model = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model());
  }

  if (has_systemname()) {
    // required string SystemName = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->systemname());
  }

  if (has_systemversion()) {
    // required string SystemVersion = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->systemversion());
  }

  if (has_devicefreespace()) {
    // required uint64 DeviceFreeSpace = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->devicefreespace());
  }

  if (has_wechatversion()) {
    // required uint32 WechatVersion = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->wechatversion());
  }

  return total_size;
}
size_t BackupStartGeneralInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BackupStartGeneralInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required string DeviceID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->deviceid());

    // required string DeviceName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->devicename());

    // required string Model = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model());

    // required string SystemName = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->systemname());

    // required string SystemVersion = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->systemversion());

    // required uint64 DeviceFreeSpace = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->devicefreespace());

    // required uint32 WechatVersion = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->wechatversion());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BackupStartGeneralInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BackupStartGeneralInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BackupStartGeneralInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BackupStartGeneralInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BackupStartGeneralInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BackupStartGeneralInfo)
    MergeFrom(*source);
  }
}

void BackupStartGeneralInfo::MergeFrom(const BackupStartGeneralInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BackupStartGeneralInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_deviceid();
      deviceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deviceid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_devicename();
      devicename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicename_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_model();
      model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_systemname();
      systemname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.systemname_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_systemversion();
      systemversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.systemversion_);
    }
    if (cached_has_bits & 0x00000020u) {
      devicefreespace_ = from.devicefreespace_;
    }
    if (cached_has_bits & 0x00000040u) {
      wechatversion_ = from.wechatversion_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BackupStartGeneralInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BackupStartGeneralInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BackupStartGeneralInfo::CopyFrom(const BackupStartGeneralInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BackupStartGeneralInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackupStartGeneralInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  return true;
}

void BackupStartGeneralInfo::Swap(BackupStartGeneralInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BackupStartGeneralInfo::InternalSwap(BackupStartGeneralInfo* other) {
  deviceid_.Swap(&other->deviceid_);
  devicename_.Swap(&other->devicename_);
  model_.Swap(&other->model_);
  systemname_.Swap(&other->systemname_);
  systemversion_.Swap(&other->systemversion_);
  std::swap(devicefreespace_, other->devicefreespace_);
  std::swap(wechatversion_, other->wechatversion_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BackupStartGeneralInfo::GetMetadata() const {
  protobuf_mmbackup_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbackup_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BackupStartGeneralInfo

// required string DeviceID = 1;
bool BackupStartGeneralInfo::has_deviceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BackupStartGeneralInfo::set_has_deviceid() {
  _has_bits_[0] |= 0x00000001u;
}
void BackupStartGeneralInfo::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000001u;
}
void BackupStartGeneralInfo::clear_deviceid() {
  deviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_deviceid();
}
const ::std::string& BackupStartGeneralInfo::deviceid() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupStartGeneralInfo.DeviceID)
  return deviceid_.GetNoArena();
}
void BackupStartGeneralInfo::set_deviceid(const ::std::string& value) {
  set_has_deviceid();
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BackupStartGeneralInfo.DeviceID)
}
#if LANG_CXX11
void BackupStartGeneralInfo::set_deviceid(::std::string&& value) {
  set_has_deviceid();
  deviceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BackupStartGeneralInfo.DeviceID)
}
#endif
void BackupStartGeneralInfo::set_deviceid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_deviceid();
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BackupStartGeneralInfo.DeviceID)
}
void BackupStartGeneralInfo::set_deviceid(const char* value, size_t size) {
  set_has_deviceid();
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BackupStartGeneralInfo.DeviceID)
}
::std::string* BackupStartGeneralInfo::mutable_deviceid() {
  set_has_deviceid();
  // @@protoc_insertion_point(field_mutable:micromsg.BackupStartGeneralInfo.DeviceID)
  return deviceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BackupStartGeneralInfo::release_deviceid() {
  // @@protoc_insertion_point(field_release:micromsg.BackupStartGeneralInfo.DeviceID)
  clear_has_deviceid();
  return deviceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BackupStartGeneralInfo::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid != NULL) {
    set_has_deviceid();
  } else {
    clear_has_deviceid();
  }
  deviceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deviceid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BackupStartGeneralInfo.DeviceID)
}

// required string DeviceName = 2;
bool BackupStartGeneralInfo::has_devicename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BackupStartGeneralInfo::set_has_devicename() {
  _has_bits_[0] |= 0x00000002u;
}
void BackupStartGeneralInfo::clear_has_devicename() {
  _has_bits_[0] &= ~0x00000002u;
}
void BackupStartGeneralInfo::clear_devicename() {
  devicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_devicename();
}
const ::std::string& BackupStartGeneralInfo::devicename() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupStartGeneralInfo.DeviceName)
  return devicename_.GetNoArena();
}
void BackupStartGeneralInfo::set_devicename(const ::std::string& value) {
  set_has_devicename();
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BackupStartGeneralInfo.DeviceName)
}
#if LANG_CXX11
void BackupStartGeneralInfo::set_devicename(::std::string&& value) {
  set_has_devicename();
  devicename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BackupStartGeneralInfo.DeviceName)
}
#endif
void BackupStartGeneralInfo::set_devicename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_devicename();
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BackupStartGeneralInfo.DeviceName)
}
void BackupStartGeneralInfo::set_devicename(const char* value, size_t size) {
  set_has_devicename();
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BackupStartGeneralInfo.DeviceName)
}
::std::string* BackupStartGeneralInfo::mutable_devicename() {
  set_has_devicename();
  // @@protoc_insertion_point(field_mutable:micromsg.BackupStartGeneralInfo.DeviceName)
  return devicename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BackupStartGeneralInfo::release_devicename() {
  // @@protoc_insertion_point(field_release:micromsg.BackupStartGeneralInfo.DeviceName)
  clear_has_devicename();
  return devicename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BackupStartGeneralInfo::set_allocated_devicename(::std::string* devicename) {
  if (devicename != NULL) {
    set_has_devicename();
  } else {
    clear_has_devicename();
  }
  devicename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicename);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BackupStartGeneralInfo.DeviceName)
}

// required string Model = 3;
bool BackupStartGeneralInfo::has_model() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BackupStartGeneralInfo::set_has_model() {
  _has_bits_[0] |= 0x00000004u;
}
void BackupStartGeneralInfo::clear_has_model() {
  _has_bits_[0] &= ~0x00000004u;
}
void BackupStartGeneralInfo::clear_model() {
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_model();
}
const ::std::string& BackupStartGeneralInfo::model() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupStartGeneralInfo.Model)
  return model_.GetNoArena();
}
void BackupStartGeneralInfo::set_model(const ::std::string& value) {
  set_has_model();
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BackupStartGeneralInfo.Model)
}
#if LANG_CXX11
void BackupStartGeneralInfo::set_model(::std::string&& value) {
  set_has_model();
  model_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BackupStartGeneralInfo.Model)
}
#endif
void BackupStartGeneralInfo::set_model(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_model();
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BackupStartGeneralInfo.Model)
}
void BackupStartGeneralInfo::set_model(const char* value, size_t size) {
  set_has_model();
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BackupStartGeneralInfo.Model)
}
::std::string* BackupStartGeneralInfo::mutable_model() {
  set_has_model();
  // @@protoc_insertion_point(field_mutable:micromsg.BackupStartGeneralInfo.Model)
  return model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BackupStartGeneralInfo::release_model() {
  // @@protoc_insertion_point(field_release:micromsg.BackupStartGeneralInfo.Model)
  clear_has_model();
  return model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BackupStartGeneralInfo::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    set_has_model();
  } else {
    clear_has_model();
  }
  model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BackupStartGeneralInfo.Model)
}

// required string SystemName = 4;
bool BackupStartGeneralInfo::has_systemname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BackupStartGeneralInfo::set_has_systemname() {
  _has_bits_[0] |= 0x00000008u;
}
void BackupStartGeneralInfo::clear_has_systemname() {
  _has_bits_[0] &= ~0x00000008u;
}
void BackupStartGeneralInfo::clear_systemname() {
  systemname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_systemname();
}
const ::std::string& BackupStartGeneralInfo::systemname() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupStartGeneralInfo.SystemName)
  return systemname_.GetNoArena();
}
void BackupStartGeneralInfo::set_systemname(const ::std::string& value) {
  set_has_systemname();
  systemname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BackupStartGeneralInfo.SystemName)
}
#if LANG_CXX11
void BackupStartGeneralInfo::set_systemname(::std::string&& value) {
  set_has_systemname();
  systemname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BackupStartGeneralInfo.SystemName)
}
#endif
void BackupStartGeneralInfo::set_systemname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_systemname();
  systemname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BackupStartGeneralInfo.SystemName)
}
void BackupStartGeneralInfo::set_systemname(const char* value, size_t size) {
  set_has_systemname();
  systemname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BackupStartGeneralInfo.SystemName)
}
::std::string* BackupStartGeneralInfo::mutable_systemname() {
  set_has_systemname();
  // @@protoc_insertion_point(field_mutable:micromsg.BackupStartGeneralInfo.SystemName)
  return systemname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BackupStartGeneralInfo::release_systemname() {
  // @@protoc_insertion_point(field_release:micromsg.BackupStartGeneralInfo.SystemName)
  clear_has_systemname();
  return systemname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BackupStartGeneralInfo::set_allocated_systemname(::std::string* systemname) {
  if (systemname != NULL) {
    set_has_systemname();
  } else {
    clear_has_systemname();
  }
  systemname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), systemname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BackupStartGeneralInfo.SystemName)
}

// required string SystemVersion = 5;
bool BackupStartGeneralInfo::has_systemversion() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BackupStartGeneralInfo::set_has_systemversion() {
  _has_bits_[0] |= 0x00000010u;
}
void BackupStartGeneralInfo::clear_has_systemversion() {
  _has_bits_[0] &= ~0x00000010u;
}
void BackupStartGeneralInfo::clear_systemversion() {
  systemversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_systemversion();
}
const ::std::string& BackupStartGeneralInfo::systemversion() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupStartGeneralInfo.SystemVersion)
  return systemversion_.GetNoArena();
}
void BackupStartGeneralInfo::set_systemversion(const ::std::string& value) {
  set_has_systemversion();
  systemversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BackupStartGeneralInfo.SystemVersion)
}
#if LANG_CXX11
void BackupStartGeneralInfo::set_systemversion(::std::string&& value) {
  set_has_systemversion();
  systemversion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BackupStartGeneralInfo.SystemVersion)
}
#endif
void BackupStartGeneralInfo::set_systemversion(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_systemversion();
  systemversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BackupStartGeneralInfo.SystemVersion)
}
void BackupStartGeneralInfo::set_systemversion(const char* value, size_t size) {
  set_has_systemversion();
  systemversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BackupStartGeneralInfo.SystemVersion)
}
::std::string* BackupStartGeneralInfo::mutable_systemversion() {
  set_has_systemversion();
  // @@protoc_insertion_point(field_mutable:micromsg.BackupStartGeneralInfo.SystemVersion)
  return systemversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BackupStartGeneralInfo::release_systemversion() {
  // @@protoc_insertion_point(field_release:micromsg.BackupStartGeneralInfo.SystemVersion)
  clear_has_systemversion();
  return systemversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BackupStartGeneralInfo::set_allocated_systemversion(::std::string* systemversion) {
  if (systemversion != NULL) {
    set_has_systemversion();
  } else {
    clear_has_systemversion();
  }
  systemversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), systemversion);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BackupStartGeneralInfo.SystemVersion)
}

// required uint32 WechatVersion = 6;
bool BackupStartGeneralInfo::has_wechatversion() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BackupStartGeneralInfo::set_has_wechatversion() {
  _has_bits_[0] |= 0x00000040u;
}
void BackupStartGeneralInfo::clear_has_wechatversion() {
  _has_bits_[0] &= ~0x00000040u;
}
void BackupStartGeneralInfo::clear_wechatversion() {
  wechatversion_ = 0u;
  clear_has_wechatversion();
}
::google::protobuf::uint32 BackupStartGeneralInfo::wechatversion() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupStartGeneralInfo.WechatVersion)
  return wechatversion_;
}
void BackupStartGeneralInfo::set_wechatversion(::google::protobuf::uint32 value) {
  set_has_wechatversion();
  wechatversion_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BackupStartGeneralInfo.WechatVersion)
}

// required uint64 DeviceFreeSpace = 7;
bool BackupStartGeneralInfo::has_devicefreespace() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BackupStartGeneralInfo::set_has_devicefreespace() {
  _has_bits_[0] |= 0x00000020u;
}
void BackupStartGeneralInfo::clear_has_devicefreespace() {
  _has_bits_[0] &= ~0x00000020u;
}
void BackupStartGeneralInfo::clear_devicefreespace() {
  devicefreespace_ = GOOGLE_ULONGLONG(0);
  clear_has_devicefreespace();
}
::google::protobuf::uint64 BackupStartGeneralInfo::devicefreespace() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupStartGeneralInfo.DeviceFreeSpace)
  return devicefreespace_;
}
void BackupStartGeneralInfo::set_devicefreespace(::google::protobuf::uint64 value) {
  set_has_devicefreespace();
  devicefreespace_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BackupStartGeneralInfo.DeviceFreeSpace)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BackupStartRequest::kIDFieldNumber;
const int BackupStartRequest::kBigDataSizeFieldNumber;
const int BackupStartRequest::kSessionCountFieldNumber;
const int BackupStartRequest::kMsgCountFieldNumber;
const int BackupStartRequest::kGeneralInfoFieldNumber;
const int BackupStartRequest::kDataSizeFieldNumber;
const int BackupStartRequest::kTransferTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BackupStartRequest::BackupStartRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbackup_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BackupStartRequest)
}
BackupStartRequest::BackupStartRequest(const BackupStartRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_generalinfo()) {
    generalinfo_ = new ::micromsg::BackupStartGeneralInfo(*from.generalinfo_);
  } else {
    generalinfo_ = NULL;
  }
  ::memcpy(&bigdatasize_, &from.bigdatasize_,
    reinterpret_cast<char*>(&transfertype_) -
    reinterpret_cast<char*>(&bigdatasize_) + sizeof(transfertype_));
  // @@protoc_insertion_point(copy_constructor:micromsg.BackupStartRequest)
}

void BackupStartRequest::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&generalinfo_, 0, reinterpret_cast<char*>(&transfertype_) -
    reinterpret_cast<char*>(&generalinfo_) + sizeof(transfertype_));
}

BackupStartRequest::~BackupStartRequest() {
  // @@protoc_insertion_point(destructor:micromsg.BackupStartRequest)
  SharedDtor();
}

void BackupStartRequest::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete generalinfo_;
  }
}

void BackupStartRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BackupStartRequest::descriptor() {
  protobuf_mmbackup_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbackup_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BackupStartRequest& BackupStartRequest::default_instance() {
  protobuf_mmbackup_2eproto::InitDefaults();
  return *internal_default_instance();
}

BackupStartRequest* BackupStartRequest::New(::google::protobuf::Arena* arena) const {
  BackupStartRequest* n = new BackupStartRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BackupStartRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BackupStartRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_id()) {
      GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*id_.UnsafeRawStringPointer())->clear();
    }
    if (has_generalinfo()) {
      GOOGLE_DCHECK(generalinfo_ != NULL);
      generalinfo_->::micromsg::BackupStartGeneralInfo::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 124u) {
    ::memset(&bigdatasize_, 0, reinterpret_cast<char*>(&transfertype_) -
      reinterpret_cast<char*>(&bigdatasize_) + sizeof(transfertype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BackupStartRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BackupStartRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BackupStartRequest.ID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 BigDataSize = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_bigdatasize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bigdatasize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 SessionCount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_sessioncount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sessioncount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 MsgCount = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_msgcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msgcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.BackupStartGeneralInfo GeneralInfo = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_generalinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 DataSize = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_datasize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &datasize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 TransferType = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_transfertype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transfertype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BackupStartRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BackupStartRequest)
  return false;
#undef DO_
}

void BackupStartRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BackupStartRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string ID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BackupStartRequest.ID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional uint64 BigDataSize = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->bigdatasize(), output);
  }

  // optional uint64 SessionCount = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->sessioncount(), output);
  }

  // optional uint64 MsgCount = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->msgcount(), output);
  }

  // optional .micromsg.BackupStartGeneralInfo GeneralInfo = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->generalinfo_, output);
  }

  // optional uint64 DataSize = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->datasize(), output);
  }

  // optional int32 TransferType = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->transfertype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BackupStartRequest)
}

::google::protobuf::uint8* BackupStartRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BackupStartRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string ID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BackupStartRequest.ID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional uint64 BigDataSize = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->bigdatasize(), target);
  }

  // optional uint64 SessionCount = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->sessioncount(), target);
  }

  // optional uint64 MsgCount = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->msgcount(), target);
  }

  // optional .micromsg.BackupStartGeneralInfo GeneralInfo = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->generalinfo_, deterministic, target);
  }

  // optional uint64 DataSize = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->datasize(), target);
  }

  // optional int32 TransferType = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->transfertype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BackupStartRequest)
  return target;
}

size_t BackupStartRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BackupStartRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required string ID = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }
  if (_has_bits_[0 / 32] & 126u) {
    // optional .micromsg.BackupStartGeneralInfo GeneralInfo = 5;
    if (has_generalinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->generalinfo_);
    }

    // optional uint64 BigDataSize = 2;
    if (has_bigdatasize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bigdatasize());
    }

    // optional uint64 SessionCount = 3;
    if (has_sessioncount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sessioncount());
    }

    // optional uint64 MsgCount = 4;
    if (has_msgcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->msgcount());
    }

    // optional uint64 DataSize = 6;
    if (has_datasize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->datasize());
    }

    // optional int32 TransferType = 7;
    if (has_transfertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transfertype());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BackupStartRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BackupStartRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BackupStartRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BackupStartRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BackupStartRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BackupStartRequest)
    MergeFrom(*source);
  }
}

void BackupStartRequest::MergeFrom(const BackupStartRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BackupStartRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_generalinfo()->::micromsg::BackupStartGeneralInfo::MergeFrom(from.generalinfo());
    }
    if (cached_has_bits & 0x00000004u) {
      bigdatasize_ = from.bigdatasize_;
    }
    if (cached_has_bits & 0x00000008u) {
      sessioncount_ = from.sessioncount_;
    }
    if (cached_has_bits & 0x00000010u) {
      msgcount_ = from.msgcount_;
    }
    if (cached_has_bits & 0x00000020u) {
      datasize_ = from.datasize_;
    }
    if (cached_has_bits & 0x00000040u) {
      transfertype_ = from.transfertype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BackupStartRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BackupStartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BackupStartRequest::CopyFrom(const BackupStartRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BackupStartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackupStartRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_generalinfo()) {
    if (!this->generalinfo_->IsInitialized()) return false;
  }
  return true;
}

void BackupStartRequest::Swap(BackupStartRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BackupStartRequest::InternalSwap(BackupStartRequest* other) {
  id_.Swap(&other->id_);
  std::swap(generalinfo_, other->generalinfo_);
  std::swap(bigdatasize_, other->bigdatasize_);
  std::swap(sessioncount_, other->sessioncount_);
  std::swap(msgcount_, other->msgcount_);
  std::swap(datasize_, other->datasize_);
  std::swap(transfertype_, other->transfertype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BackupStartRequest::GetMetadata() const {
  protobuf_mmbackup_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbackup_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BackupStartRequest

// required string ID = 1;
bool BackupStartRequest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BackupStartRequest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void BackupStartRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void BackupStartRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
const ::std::string& BackupStartRequest::id() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupStartRequest.ID)
  return id_.GetNoArena();
}
void BackupStartRequest::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BackupStartRequest.ID)
}
#if LANG_CXX11
void BackupStartRequest::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BackupStartRequest.ID)
}
#endif
void BackupStartRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BackupStartRequest.ID)
}
void BackupStartRequest::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BackupStartRequest.ID)
}
::std::string* BackupStartRequest::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:micromsg.BackupStartRequest.ID)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BackupStartRequest::release_id() {
  // @@protoc_insertion_point(field_release:micromsg.BackupStartRequest.ID)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BackupStartRequest::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BackupStartRequest.ID)
}

// optional uint64 BigDataSize = 2;
bool BackupStartRequest::has_bigdatasize() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BackupStartRequest::set_has_bigdatasize() {
  _has_bits_[0] |= 0x00000004u;
}
void BackupStartRequest::clear_has_bigdatasize() {
  _has_bits_[0] &= ~0x00000004u;
}
void BackupStartRequest::clear_bigdatasize() {
  bigdatasize_ = GOOGLE_ULONGLONG(0);
  clear_has_bigdatasize();
}
::google::protobuf::uint64 BackupStartRequest::bigdatasize() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupStartRequest.BigDataSize)
  return bigdatasize_;
}
void BackupStartRequest::set_bigdatasize(::google::protobuf::uint64 value) {
  set_has_bigdatasize();
  bigdatasize_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BackupStartRequest.BigDataSize)
}

// optional uint64 SessionCount = 3;
bool BackupStartRequest::has_sessioncount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BackupStartRequest::set_has_sessioncount() {
  _has_bits_[0] |= 0x00000008u;
}
void BackupStartRequest::clear_has_sessioncount() {
  _has_bits_[0] &= ~0x00000008u;
}
void BackupStartRequest::clear_sessioncount() {
  sessioncount_ = GOOGLE_ULONGLONG(0);
  clear_has_sessioncount();
}
::google::protobuf::uint64 BackupStartRequest::sessioncount() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupStartRequest.SessionCount)
  return sessioncount_;
}
void BackupStartRequest::set_sessioncount(::google::protobuf::uint64 value) {
  set_has_sessioncount();
  sessioncount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BackupStartRequest.SessionCount)
}

// optional uint64 MsgCount = 4;
bool BackupStartRequest::has_msgcount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BackupStartRequest::set_has_msgcount() {
  _has_bits_[0] |= 0x00000010u;
}
void BackupStartRequest::clear_has_msgcount() {
  _has_bits_[0] &= ~0x00000010u;
}
void BackupStartRequest::clear_msgcount() {
  msgcount_ = GOOGLE_ULONGLONG(0);
  clear_has_msgcount();
}
::google::protobuf::uint64 BackupStartRequest::msgcount() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupStartRequest.MsgCount)
  return msgcount_;
}
void BackupStartRequest::set_msgcount(::google::protobuf::uint64 value) {
  set_has_msgcount();
  msgcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BackupStartRequest.MsgCount)
}

// optional .micromsg.BackupStartGeneralInfo GeneralInfo = 5;
bool BackupStartRequest::has_generalinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BackupStartRequest::set_has_generalinfo() {
  _has_bits_[0] |= 0x00000002u;
}
void BackupStartRequest::clear_has_generalinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
void BackupStartRequest::clear_generalinfo() {
  if (generalinfo_ != NULL) generalinfo_->::micromsg::BackupStartGeneralInfo::Clear();
  clear_has_generalinfo();
}
const ::micromsg::BackupStartGeneralInfo& BackupStartRequest::generalinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupStartRequest.GeneralInfo)
  return generalinfo_ != NULL ? *generalinfo_
                         : *::micromsg::BackupStartGeneralInfo::internal_default_instance();
}
::micromsg::BackupStartGeneralInfo* BackupStartRequest::mutable_generalinfo() {
  set_has_generalinfo();
  if (generalinfo_ == NULL) {
    generalinfo_ = new ::micromsg::BackupStartGeneralInfo;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BackupStartRequest.GeneralInfo)
  return generalinfo_;
}
::micromsg::BackupStartGeneralInfo* BackupStartRequest::release_generalinfo() {
  // @@protoc_insertion_point(field_release:micromsg.BackupStartRequest.GeneralInfo)
  clear_has_generalinfo();
  ::micromsg::BackupStartGeneralInfo* temp = generalinfo_;
  generalinfo_ = NULL;
  return temp;
}
void BackupStartRequest::set_allocated_generalinfo(::micromsg::BackupStartGeneralInfo* generalinfo) {
  delete generalinfo_;
  generalinfo_ = generalinfo;
  if (generalinfo) {
    set_has_generalinfo();
  } else {
    clear_has_generalinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BackupStartRequest.GeneralInfo)
}

// optional uint64 DataSize = 6;
bool BackupStartRequest::has_datasize() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BackupStartRequest::set_has_datasize() {
  _has_bits_[0] |= 0x00000020u;
}
void BackupStartRequest::clear_has_datasize() {
  _has_bits_[0] &= ~0x00000020u;
}
void BackupStartRequest::clear_datasize() {
  datasize_ = GOOGLE_ULONGLONG(0);
  clear_has_datasize();
}
::google::protobuf::uint64 BackupStartRequest::datasize() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupStartRequest.DataSize)
  return datasize_;
}
void BackupStartRequest::set_datasize(::google::protobuf::uint64 value) {
  set_has_datasize();
  datasize_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BackupStartRequest.DataSize)
}

// optional int32 TransferType = 7;
bool BackupStartRequest::has_transfertype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BackupStartRequest::set_has_transfertype() {
  _has_bits_[0] |= 0x00000040u;
}
void BackupStartRequest::clear_has_transfertype() {
  _has_bits_[0] &= ~0x00000040u;
}
void BackupStartRequest::clear_transfertype() {
  transfertype_ = 0;
  clear_has_transfertype();
}
::google::protobuf::int32 BackupStartRequest::transfertype() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupStartRequest.TransferType)
  return transfertype_;
}
void BackupStartRequest::set_transfertype(::google::protobuf::int32 value) {
  set_has_transfertype();
  transfertype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BackupStartRequest.TransferType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BackupStartResponse::kIDFieldNumber;
const int BackupStartResponse::kTotalCountFieldNumber;
const int BackupStartResponse::kTotalSizeFieldNumber;
const int BackupStartResponse::kStatusFieldNumber;
const int BackupStartResponse::kNetworkStateFieldNumber;
const int BackupStartResponse::kBigDataSizeFieldNumber;
const int BackupStartResponse::kGeneralInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BackupStartResponse::BackupStartResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbackup_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BackupStartResponse)
}
BackupStartResponse::BackupStartResponse(const BackupStartResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_generalinfo()) {
    generalinfo_ = new ::micromsg::BackupStartGeneralInfo(*from.generalinfo_);
  } else {
    generalinfo_ = NULL;
  }
  ::memcpy(&totalcount_, &from.totalcount_,
    reinterpret_cast<char*>(&bigdatasize_) -
    reinterpret_cast<char*>(&totalcount_) + sizeof(bigdatasize_));
  // @@protoc_insertion_point(copy_constructor:micromsg.BackupStartResponse)
}

void BackupStartResponse::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&generalinfo_, 0, reinterpret_cast<char*>(&bigdatasize_) -
    reinterpret_cast<char*>(&generalinfo_) + sizeof(bigdatasize_));
}

BackupStartResponse::~BackupStartResponse() {
  // @@protoc_insertion_point(destructor:micromsg.BackupStartResponse)
  SharedDtor();
}

void BackupStartResponse::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete generalinfo_;
  }
}

void BackupStartResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BackupStartResponse::descriptor() {
  protobuf_mmbackup_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbackup_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BackupStartResponse& BackupStartResponse::default_instance() {
  protobuf_mmbackup_2eproto::InitDefaults();
  return *internal_default_instance();
}

BackupStartResponse* BackupStartResponse::New(::google::protobuf::Arena* arena) const {
  BackupStartResponse* n = new BackupStartResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BackupStartResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BackupStartResponse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_id()) {
      GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*id_.UnsafeRawStringPointer())->clear();
    }
    if (has_generalinfo()) {
      GOOGLE_DCHECK(generalinfo_ != NULL);
      generalinfo_->::micromsg::BackupStartGeneralInfo::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 124u) {
    ::memset(&totalcount_, 0, reinterpret_cast<char*>(&bigdatasize_) -
      reinterpret_cast<char*>(&totalcount_) + sizeof(bigdatasize_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BackupStartResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BackupStartResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BackupStartResponse.ID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 TotalCount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_totalcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &totalcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 TotalSize = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_totalsize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &totalsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 Status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 NetworkState = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_networkstate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &networkstate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 BigDataSize = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_bigdatasize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bigdatasize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.BackupStartGeneralInfo GeneralInfo = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_generalinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BackupStartResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BackupStartResponse)
  return false;
#undef DO_
}

void BackupStartResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BackupStartResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string ID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BackupStartResponse.ID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required uint64 TotalCount = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->totalcount(), output);
  }

  // required uint64 TotalSize = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->totalsize(), output);
  }

  // required int32 Status = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->status(), output);
  }

  // optional uint32 NetworkState = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->networkstate(), output);
  }

  // optional uint64 BigDataSize = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->bigdatasize(), output);
  }

  // optional .micromsg.BackupStartGeneralInfo GeneralInfo = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->generalinfo_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BackupStartResponse)
}

::google::protobuf::uint8* BackupStartResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BackupStartResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string ID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BackupStartResponse.ID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required uint64 TotalCount = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->totalcount(), target);
  }

  // required uint64 TotalSize = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->totalsize(), target);
  }

  // required int32 Status = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->status(), target);
  }

  // optional uint32 NetworkState = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->networkstate(), target);
  }

  // optional uint64 BigDataSize = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->bigdatasize(), target);
  }

  // optional .micromsg.BackupStartGeneralInfo GeneralInfo = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->generalinfo_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BackupStartResponse)
  return target;
}

size_t BackupStartResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.BackupStartResponse)
  size_t total_size = 0;

  if (has_id()) {
    // required string ID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  if (has_totalcount()) {
    // required uint64 TotalCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->totalcount());
  }

  if (has_totalsize()) {
    // required uint64 TotalSize = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->totalsize());
  }

  if (has_status()) {
    // required int32 Status = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  return total_size;
}
size_t BackupStartResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BackupStartResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001d) ^ 0x0000001d) == 0) {  // All required fields are present.
    // required string ID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());

    // required uint64 TotalCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->totalcount());

    // required uint64 TotalSize = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->totalsize());

    // required int32 Status = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .micromsg.BackupStartGeneralInfo GeneralInfo = 7;
  if (has_generalinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->generalinfo_);
  }

  if (_has_bits_[0 / 32] & 96u) {
    // optional uint32 NetworkState = 5;
    if (has_networkstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->networkstate());
    }

    // optional uint64 BigDataSize = 6;
    if (has_bigdatasize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bigdatasize());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BackupStartResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BackupStartResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BackupStartResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BackupStartResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BackupStartResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BackupStartResponse)
    MergeFrom(*source);
  }
}

void BackupStartResponse::MergeFrom(const BackupStartResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BackupStartResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_generalinfo()->::micromsg::BackupStartGeneralInfo::MergeFrom(from.generalinfo());
    }
    if (cached_has_bits & 0x00000004u) {
      totalcount_ = from.totalcount_;
    }
    if (cached_has_bits & 0x00000008u) {
      totalsize_ = from.totalsize_;
    }
    if (cached_has_bits & 0x00000010u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000020u) {
      networkstate_ = from.networkstate_;
    }
    if (cached_has_bits & 0x00000040u) {
      bigdatasize_ = from.bigdatasize_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BackupStartResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BackupStartResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BackupStartResponse::CopyFrom(const BackupStartResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BackupStartResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackupStartResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001d) != 0x0000001d) return false;
  if (has_generalinfo()) {
    if (!this->generalinfo_->IsInitialized()) return false;
  }
  return true;
}

void BackupStartResponse::Swap(BackupStartResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BackupStartResponse::InternalSwap(BackupStartResponse* other) {
  id_.Swap(&other->id_);
  std::swap(generalinfo_, other->generalinfo_);
  std::swap(totalcount_, other->totalcount_);
  std::swap(totalsize_, other->totalsize_);
  std::swap(status_, other->status_);
  std::swap(networkstate_, other->networkstate_);
  std::swap(bigdatasize_, other->bigdatasize_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BackupStartResponse::GetMetadata() const {
  protobuf_mmbackup_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbackup_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BackupStartResponse

// required string ID = 1;
bool BackupStartResponse::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BackupStartResponse::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void BackupStartResponse::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void BackupStartResponse::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
const ::std::string& BackupStartResponse::id() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupStartResponse.ID)
  return id_.GetNoArena();
}
void BackupStartResponse::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BackupStartResponse.ID)
}
#if LANG_CXX11
void BackupStartResponse::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BackupStartResponse.ID)
}
#endif
void BackupStartResponse::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BackupStartResponse.ID)
}
void BackupStartResponse::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BackupStartResponse.ID)
}
::std::string* BackupStartResponse::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:micromsg.BackupStartResponse.ID)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BackupStartResponse::release_id() {
  // @@protoc_insertion_point(field_release:micromsg.BackupStartResponse.ID)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BackupStartResponse::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BackupStartResponse.ID)
}

// required uint64 TotalCount = 2;
bool BackupStartResponse::has_totalcount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BackupStartResponse::set_has_totalcount() {
  _has_bits_[0] |= 0x00000004u;
}
void BackupStartResponse::clear_has_totalcount() {
  _has_bits_[0] &= ~0x00000004u;
}
void BackupStartResponse::clear_totalcount() {
  totalcount_ = GOOGLE_ULONGLONG(0);
  clear_has_totalcount();
}
::google::protobuf::uint64 BackupStartResponse::totalcount() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupStartResponse.TotalCount)
  return totalcount_;
}
void BackupStartResponse::set_totalcount(::google::protobuf::uint64 value) {
  set_has_totalcount();
  totalcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BackupStartResponse.TotalCount)
}

// required uint64 TotalSize = 3;
bool BackupStartResponse::has_totalsize() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BackupStartResponse::set_has_totalsize() {
  _has_bits_[0] |= 0x00000008u;
}
void BackupStartResponse::clear_has_totalsize() {
  _has_bits_[0] &= ~0x00000008u;
}
void BackupStartResponse::clear_totalsize() {
  totalsize_ = GOOGLE_ULONGLONG(0);
  clear_has_totalsize();
}
::google::protobuf::uint64 BackupStartResponse::totalsize() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupStartResponse.TotalSize)
  return totalsize_;
}
void BackupStartResponse::set_totalsize(::google::protobuf::uint64 value) {
  set_has_totalsize();
  totalsize_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BackupStartResponse.TotalSize)
}

// required int32 Status = 4;
bool BackupStartResponse::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BackupStartResponse::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
void BackupStartResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
void BackupStartResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
::google::protobuf::int32 BackupStartResponse::status() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupStartResponse.Status)
  return status_;
}
void BackupStartResponse::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BackupStartResponse.Status)
}

// optional uint32 NetworkState = 5;
bool BackupStartResponse::has_networkstate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BackupStartResponse::set_has_networkstate() {
  _has_bits_[0] |= 0x00000020u;
}
void BackupStartResponse::clear_has_networkstate() {
  _has_bits_[0] &= ~0x00000020u;
}
void BackupStartResponse::clear_networkstate() {
  networkstate_ = 0u;
  clear_has_networkstate();
}
::google::protobuf::uint32 BackupStartResponse::networkstate() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupStartResponse.NetworkState)
  return networkstate_;
}
void BackupStartResponse::set_networkstate(::google::protobuf::uint32 value) {
  set_has_networkstate();
  networkstate_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BackupStartResponse.NetworkState)
}

// optional uint64 BigDataSize = 6;
bool BackupStartResponse::has_bigdatasize() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BackupStartResponse::set_has_bigdatasize() {
  _has_bits_[0] |= 0x00000040u;
}
void BackupStartResponse::clear_has_bigdatasize() {
  _has_bits_[0] &= ~0x00000040u;
}
void BackupStartResponse::clear_bigdatasize() {
  bigdatasize_ = GOOGLE_ULONGLONG(0);
  clear_has_bigdatasize();
}
::google::protobuf::uint64 BackupStartResponse::bigdatasize() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupStartResponse.BigDataSize)
  return bigdatasize_;
}
void BackupStartResponse::set_bigdatasize(::google::protobuf::uint64 value) {
  set_has_bigdatasize();
  bigdatasize_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BackupStartResponse.BigDataSize)
}

// optional .micromsg.BackupStartGeneralInfo GeneralInfo = 7;
bool BackupStartResponse::has_generalinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BackupStartResponse::set_has_generalinfo() {
  _has_bits_[0] |= 0x00000002u;
}
void BackupStartResponse::clear_has_generalinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
void BackupStartResponse::clear_generalinfo() {
  if (generalinfo_ != NULL) generalinfo_->::micromsg::BackupStartGeneralInfo::Clear();
  clear_has_generalinfo();
}
const ::micromsg::BackupStartGeneralInfo& BackupStartResponse::generalinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupStartResponse.GeneralInfo)
  return generalinfo_ != NULL ? *generalinfo_
                         : *::micromsg::BackupStartGeneralInfo::internal_default_instance();
}
::micromsg::BackupStartGeneralInfo* BackupStartResponse::mutable_generalinfo() {
  set_has_generalinfo();
  if (generalinfo_ == NULL) {
    generalinfo_ = new ::micromsg::BackupStartGeneralInfo;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BackupStartResponse.GeneralInfo)
  return generalinfo_;
}
::micromsg::BackupStartGeneralInfo* BackupStartResponse::release_generalinfo() {
  // @@protoc_insertion_point(field_release:micromsg.BackupStartResponse.GeneralInfo)
  clear_has_generalinfo();
  ::micromsg::BackupStartGeneralInfo* temp = generalinfo_;
  generalinfo_ = NULL;
  return temp;
}
void BackupStartResponse::set_allocated_generalinfo(::micromsg::BackupStartGeneralInfo* generalinfo) {
  delete generalinfo_;
  generalinfo_ = generalinfo;
  if (generalinfo) {
    set_has_generalinfo();
  } else {
    clear_has_generalinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BackupStartResponse.GeneralInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BackupRequestSession::kSessionNameFieldNumber;
const int BackupRequestSession::kTimeIntervalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BackupRequestSession::BackupRequestSession()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbackup_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BackupRequestSession)
}
BackupRequestSession::BackupRequestSession(const BackupRequestSession& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      sessionname_(from.sessionname_),
      timeinterval_(from.timeinterval_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:micromsg.BackupRequestSession)
}

void BackupRequestSession::SharedCtor() {
  _cached_size_ = 0;
}

BackupRequestSession::~BackupRequestSession() {
  // @@protoc_insertion_point(destructor:micromsg.BackupRequestSession)
  SharedDtor();
}

void BackupRequestSession::SharedDtor() {
}

void BackupRequestSession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BackupRequestSession::descriptor() {
  protobuf_mmbackup_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbackup_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BackupRequestSession& BackupRequestSession::default_instance() {
  protobuf_mmbackup_2eproto::InitDefaults();
  return *internal_default_instance();
}

BackupRequestSession* BackupRequestSession::New(::google::protobuf::Arena* arena) const {
  BackupRequestSession* n = new BackupRequestSession;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BackupRequestSession::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BackupRequestSession)
  sessionname_.Clear();
  timeinterval_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BackupRequestSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BackupRequestSession)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string SessionName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_sessionname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sessionname(this->sessionname_size() - 1).data(),
            this->sessionname(this->sessionname_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BackupRequestSession.SessionName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 TimeInterval = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16u, input, this->mutable_timeinterval())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_timeinterval())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BackupRequestSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BackupRequestSession)
  return false;
#undef DO_
}

void BackupRequestSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BackupRequestSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string SessionName = 1;
  for (int i = 0, n = this->sessionname_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionname(i).data(), this->sessionname(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BackupRequestSession.SessionName");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->sessionname(i), output);
  }

  // repeated int64 TimeInterval = 2;
  for (int i = 0, n = this->timeinterval_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->timeinterval(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BackupRequestSession)
}

::google::protobuf::uint8* BackupRequestSession::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BackupRequestSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string SessionName = 1;
  for (int i = 0, n = this->sessionname_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionname(i).data(), this->sessionname(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BackupRequestSession.SessionName");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->sessionname(i), target);
  }

  // repeated int64 TimeInterval = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(2, this->timeinterval_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BackupRequestSession)
  return target;
}

size_t BackupRequestSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BackupRequestSession)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated string SessionName = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->sessionname_size());
  for (int i = 0, n = this->sessionname_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->sessionname(i));
  }

  // repeated int64 TimeInterval = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->timeinterval_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->timeinterval_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BackupRequestSession::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BackupRequestSession)
  GOOGLE_DCHECK_NE(&from, this);
  const BackupRequestSession* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BackupRequestSession>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BackupRequestSession)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BackupRequestSession)
    MergeFrom(*source);
  }
}

void BackupRequestSession::MergeFrom(const BackupRequestSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BackupRequestSession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sessionname_.MergeFrom(from.sessionname_);
  timeinterval_.MergeFrom(from.timeinterval_);
}

void BackupRequestSession::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BackupRequestSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BackupRequestSession::CopyFrom(const BackupRequestSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BackupRequestSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackupRequestSession::IsInitialized() const {
  return true;
}

void BackupRequestSession::Swap(BackupRequestSession* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BackupRequestSession::InternalSwap(BackupRequestSession* other) {
  sessionname_.InternalSwap(&other->sessionname_);
  timeinterval_.InternalSwap(&other->timeinterval_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BackupRequestSession::GetMetadata() const {
  protobuf_mmbackup_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbackup_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BackupRequestSession

// repeated string SessionName = 1;
int BackupRequestSession::sessionname_size() const {
  return sessionname_.size();
}
void BackupRequestSession::clear_sessionname() {
  sessionname_.Clear();
}
const ::std::string& BackupRequestSession::sessionname(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.BackupRequestSession.SessionName)
  return sessionname_.Get(index);
}
::std::string* BackupRequestSession::mutable_sessionname(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.BackupRequestSession.SessionName)
  return sessionname_.Mutable(index);
}
void BackupRequestSession::set_sessionname(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:micromsg.BackupRequestSession.SessionName)
  sessionname_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void BackupRequestSession::set_sessionname(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:micromsg.BackupRequestSession.SessionName)
  sessionname_.Mutable(index)->assign(std::move(value));
}
#endif
void BackupRequestSession::set_sessionname(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  sessionname_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:micromsg.BackupRequestSession.SessionName)
}
void BackupRequestSession::set_sessionname(int index, const char* value, size_t size) {
  sessionname_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:micromsg.BackupRequestSession.SessionName)
}
::std::string* BackupRequestSession::add_sessionname() {
  // @@protoc_insertion_point(field_add_mutable:micromsg.BackupRequestSession.SessionName)
  return sessionname_.Add();
}
void BackupRequestSession::add_sessionname(const ::std::string& value) {
  sessionname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:micromsg.BackupRequestSession.SessionName)
}
#if LANG_CXX11
void BackupRequestSession::add_sessionname(::std::string&& value) {
  sessionname_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:micromsg.BackupRequestSession.SessionName)
}
#endif
void BackupRequestSession::add_sessionname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  sessionname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:micromsg.BackupRequestSession.SessionName)
}
void BackupRequestSession::add_sessionname(const char* value, size_t size) {
  sessionname_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:micromsg.BackupRequestSession.SessionName)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
BackupRequestSession::sessionname() const {
  // @@protoc_insertion_point(field_list:micromsg.BackupRequestSession.SessionName)
  return sessionname_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
BackupRequestSession::mutable_sessionname() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.BackupRequestSession.SessionName)
  return &sessionname_;
}

// repeated int64 TimeInterval = 2;
int BackupRequestSession::timeinterval_size() const {
  return timeinterval_.size();
}
void BackupRequestSession::clear_timeinterval() {
  timeinterval_.Clear();
}
::google::protobuf::int64 BackupRequestSession::timeinterval(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.BackupRequestSession.TimeInterval)
  return timeinterval_.Get(index);
}
void BackupRequestSession::set_timeinterval(int index, ::google::protobuf::int64 value) {
  timeinterval_.Set(index, value);
  // @@protoc_insertion_point(field_set:micromsg.BackupRequestSession.TimeInterval)
}
void BackupRequestSession::add_timeinterval(::google::protobuf::int64 value) {
  timeinterval_.Add(value);
  // @@protoc_insertion_point(field_add:micromsg.BackupRequestSession.TimeInterval)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
BackupRequestSession::timeinterval() const {
  // @@protoc_insertion_point(field_list:micromsg.BackupRequestSession.TimeInterval)
  return timeinterval_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
BackupRequestSession::mutable_timeinterval() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.BackupRequestSession.TimeInterval)
  return &timeinterval_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BackupRequestSessionResponse::kSessionNameFieldNumber;
const int BackupRequestSessionResponse::kTimeIntervalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BackupRequestSessionResponse::BackupRequestSessionResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbackup_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BackupRequestSessionResponse)
}
BackupRequestSessionResponse::BackupRequestSessionResponse(const BackupRequestSessionResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      sessionname_(from.sessionname_),
      timeinterval_(from.timeinterval_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:micromsg.BackupRequestSessionResponse)
}

void BackupRequestSessionResponse::SharedCtor() {
  _cached_size_ = 0;
}

BackupRequestSessionResponse::~BackupRequestSessionResponse() {
  // @@protoc_insertion_point(destructor:micromsg.BackupRequestSessionResponse)
  SharedDtor();
}

void BackupRequestSessionResponse::SharedDtor() {
}

void BackupRequestSessionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BackupRequestSessionResponse::descriptor() {
  protobuf_mmbackup_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbackup_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BackupRequestSessionResponse& BackupRequestSessionResponse::default_instance() {
  protobuf_mmbackup_2eproto::InitDefaults();
  return *internal_default_instance();
}

BackupRequestSessionResponse* BackupRequestSessionResponse::New(::google::protobuf::Arena* arena) const {
  BackupRequestSessionResponse* n = new BackupRequestSessionResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BackupRequestSessionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BackupRequestSessionResponse)
  sessionname_.Clear();
  timeinterval_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BackupRequestSessionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BackupRequestSessionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string SessionName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_sessionname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sessionname(this->sessionname_size() - 1).data(),
            this->sessionname(this->sessionname_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BackupRequestSessionResponse.SessionName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 TimeInterval = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16u, input, this->mutable_timeinterval())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_timeinterval())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BackupRequestSessionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BackupRequestSessionResponse)
  return false;
#undef DO_
}

void BackupRequestSessionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BackupRequestSessionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string SessionName = 1;
  for (int i = 0, n = this->sessionname_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionname(i).data(), this->sessionname(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BackupRequestSessionResponse.SessionName");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->sessionname(i), output);
  }

  // repeated int64 TimeInterval = 2;
  for (int i = 0, n = this->timeinterval_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->timeinterval(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BackupRequestSessionResponse)
}

::google::protobuf::uint8* BackupRequestSessionResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BackupRequestSessionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string SessionName = 1;
  for (int i = 0, n = this->sessionname_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionname(i).data(), this->sessionname(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BackupRequestSessionResponse.SessionName");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->sessionname(i), target);
  }

  // repeated int64 TimeInterval = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(2, this->timeinterval_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BackupRequestSessionResponse)
  return target;
}

size_t BackupRequestSessionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BackupRequestSessionResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated string SessionName = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->sessionname_size());
  for (int i = 0, n = this->sessionname_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->sessionname(i));
  }

  // repeated int64 TimeInterval = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->timeinterval_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->timeinterval_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BackupRequestSessionResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BackupRequestSessionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BackupRequestSessionResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BackupRequestSessionResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BackupRequestSessionResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BackupRequestSessionResponse)
    MergeFrom(*source);
  }
}

void BackupRequestSessionResponse::MergeFrom(const BackupRequestSessionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BackupRequestSessionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sessionname_.MergeFrom(from.sessionname_);
  timeinterval_.MergeFrom(from.timeinterval_);
}

void BackupRequestSessionResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BackupRequestSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BackupRequestSessionResponse::CopyFrom(const BackupRequestSessionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BackupRequestSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackupRequestSessionResponse::IsInitialized() const {
  return true;
}

void BackupRequestSessionResponse::Swap(BackupRequestSessionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BackupRequestSessionResponse::InternalSwap(BackupRequestSessionResponse* other) {
  sessionname_.InternalSwap(&other->sessionname_);
  timeinterval_.InternalSwap(&other->timeinterval_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BackupRequestSessionResponse::GetMetadata() const {
  protobuf_mmbackup_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbackup_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BackupRequestSessionResponse

// repeated string SessionName = 1;
int BackupRequestSessionResponse::sessionname_size() const {
  return sessionname_.size();
}
void BackupRequestSessionResponse::clear_sessionname() {
  sessionname_.Clear();
}
const ::std::string& BackupRequestSessionResponse::sessionname(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.BackupRequestSessionResponse.SessionName)
  return sessionname_.Get(index);
}
::std::string* BackupRequestSessionResponse::mutable_sessionname(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.BackupRequestSessionResponse.SessionName)
  return sessionname_.Mutable(index);
}
void BackupRequestSessionResponse::set_sessionname(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:micromsg.BackupRequestSessionResponse.SessionName)
  sessionname_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void BackupRequestSessionResponse::set_sessionname(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:micromsg.BackupRequestSessionResponse.SessionName)
  sessionname_.Mutable(index)->assign(std::move(value));
}
#endif
void BackupRequestSessionResponse::set_sessionname(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  sessionname_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:micromsg.BackupRequestSessionResponse.SessionName)
}
void BackupRequestSessionResponse::set_sessionname(int index, const char* value, size_t size) {
  sessionname_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:micromsg.BackupRequestSessionResponse.SessionName)
}
::std::string* BackupRequestSessionResponse::add_sessionname() {
  // @@protoc_insertion_point(field_add_mutable:micromsg.BackupRequestSessionResponse.SessionName)
  return sessionname_.Add();
}
void BackupRequestSessionResponse::add_sessionname(const ::std::string& value) {
  sessionname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:micromsg.BackupRequestSessionResponse.SessionName)
}
#if LANG_CXX11
void BackupRequestSessionResponse::add_sessionname(::std::string&& value) {
  sessionname_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:micromsg.BackupRequestSessionResponse.SessionName)
}
#endif
void BackupRequestSessionResponse::add_sessionname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  sessionname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:micromsg.BackupRequestSessionResponse.SessionName)
}
void BackupRequestSessionResponse::add_sessionname(const char* value, size_t size) {
  sessionname_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:micromsg.BackupRequestSessionResponse.SessionName)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
BackupRequestSessionResponse::sessionname() const {
  // @@protoc_insertion_point(field_list:micromsg.BackupRequestSessionResponse.SessionName)
  return sessionname_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
BackupRequestSessionResponse::mutable_sessionname() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.BackupRequestSessionResponse.SessionName)
  return &sessionname_;
}

// repeated int64 TimeInterval = 2;
int BackupRequestSessionResponse::timeinterval_size() const {
  return timeinterval_.size();
}
void BackupRequestSessionResponse::clear_timeinterval() {
  timeinterval_.Clear();
}
::google::protobuf::int64 BackupRequestSessionResponse::timeinterval(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.BackupRequestSessionResponse.TimeInterval)
  return timeinterval_.Get(index);
}
void BackupRequestSessionResponse::set_timeinterval(int index, ::google::protobuf::int64 value) {
  timeinterval_.Set(index, value);
  // @@protoc_insertion_point(field_set:micromsg.BackupRequestSessionResponse.TimeInterval)
}
void BackupRequestSessionResponse::add_timeinterval(::google::protobuf::int64 value) {
  timeinterval_.Add(value);
  // @@protoc_insertion_point(field_add:micromsg.BackupRequestSessionResponse.TimeInterval)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
BackupRequestSessionResponse::timeinterval() const {
  // @@protoc_insertion_point(field_list:micromsg.BackupRequestSessionResponse.TimeInterval)
  return timeinterval_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
BackupRequestSessionResponse::mutable_timeinterval() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.BackupRequestSessionResponse.TimeInterval)
  return &timeinterval_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PacketBackupDataPush::kDataIDFieldNumber;
const int PacketBackupDataPush::kDataTypeFieldNumber;
const int PacketBackupDataPush::kDataSizeFieldNumber;
const int PacketBackupDataPush::kStartOffsetFieldNumber;
const int PacketBackupDataPush::kEndOffsetFieldNumber;
const int PacketBackupDataPush::kCheckSumFieldNumber;
const int PacketBackupDataPush::kDataFieldNumber;
const int PacketBackupDataPush::kProgressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PacketBackupDataPush::PacketBackupDataPush()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbackup_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.PacketBackupDataPush)
}
PacketBackupDataPush::PacketBackupDataPush(const PacketBackupDataPush& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dataid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_dataid()) {
    dataid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dataid_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&datatype_, &from.datatype_,
    reinterpret_cast<char*>(&progress_) -
    reinterpret_cast<char*>(&datatype_) + sizeof(progress_));
  // @@protoc_insertion_point(copy_constructor:micromsg.PacketBackupDataPush)
}

void PacketBackupDataPush::SharedCtor() {
  _cached_size_ = 0;
  dataid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&datatype_, 0, reinterpret_cast<char*>(&progress_) -
    reinterpret_cast<char*>(&datatype_) + sizeof(progress_));
}

PacketBackupDataPush::~PacketBackupDataPush() {
  // @@protoc_insertion_point(destructor:micromsg.PacketBackupDataPush)
  SharedDtor();
}

void PacketBackupDataPush::SharedDtor() {
  dataid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PacketBackupDataPush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PacketBackupDataPush::descriptor() {
  protobuf_mmbackup_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbackup_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PacketBackupDataPush& PacketBackupDataPush::default_instance() {
  protobuf_mmbackup_2eproto::InitDefaults();
  return *internal_default_instance();
}

PacketBackupDataPush* PacketBackupDataPush::New(::google::protobuf::Arena* arena) const {
  PacketBackupDataPush* n = new PacketBackupDataPush;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PacketBackupDataPush::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.PacketBackupDataPush)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_dataid()) {
      GOOGLE_DCHECK(!dataid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*dataid_.UnsafeRawStringPointer())->clear();
    }
    if (has_data()) {
      GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*data_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&datatype_, 0, reinterpret_cast<char*>(&progress_) -
      reinterpret_cast<char*>(&datatype_) + sizeof(progress_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PacketBackupDataPush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.PacketBackupDataPush)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string DataID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dataid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dataid().data(), this->dataid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.PacketBackupDataPush.DataID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 DataType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_datatype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &datatype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 DataSize = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_datasize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &datasize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 StartOffset = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_startoffset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startoffset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 EndOffset = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_endoffset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endoffset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 CheckSum = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_checksum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checksum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes Data = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 Progress = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_progress();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.PacketBackupDataPush)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.PacketBackupDataPush)
  return false;
#undef DO_
}

void PacketBackupDataPush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.PacketBackupDataPush)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string DataID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dataid().data(), this->dataid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PacketBackupDataPush.DataID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->dataid(), output);
  }

  // required int32 DataType = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->datatype(), output);
  }

  // required int32 DataSize = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->datasize(), output);
  }

  // required int32 StartOffset = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->startoffset(), output);
  }

  // required int32 EndOffset = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->endoffset(), output);
  }

  // optional int32 CheckSum = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->checksum(), output);
  }

  // optional bytes Data = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->data(), output);
  }

  // optional int32 Progress = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->progress(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.PacketBackupDataPush)
}

::google::protobuf::uint8* PacketBackupDataPush::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.PacketBackupDataPush)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string DataID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dataid().data(), this->dataid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PacketBackupDataPush.DataID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dataid(), target);
  }

  // required int32 DataType = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->datatype(), target);
  }

  // required int32 DataSize = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->datasize(), target);
  }

  // required int32 StartOffset = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->startoffset(), target);
  }

  // required int32 EndOffset = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->endoffset(), target);
  }

  // optional int32 CheckSum = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->checksum(), target);
  }

  // optional bytes Data = 7;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->data(), target);
  }

  // optional int32 Progress = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->progress(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.PacketBackupDataPush)
  return target;
}

size_t PacketBackupDataPush::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.PacketBackupDataPush)
  size_t total_size = 0;

  if (has_dataid()) {
    // required string DataID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dataid());
  }

  if (has_datatype()) {
    // required int32 DataType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->datatype());
  }

  if (has_datasize()) {
    // required int32 DataSize = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->datasize());
  }

  if (has_startoffset()) {
    // required int32 StartOffset = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->startoffset());
  }

  if (has_endoffset()) {
    // required int32 EndOffset = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->endoffset());
  }

  return total_size;
}
size_t PacketBackupDataPush::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.PacketBackupDataPush)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003d) ^ 0x0000003d) == 0) {  // All required fields are present.
    // required string DataID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dataid());

    // required int32 DataType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->datatype());

    // required int32 DataSize = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->datasize());

    // required int32 StartOffset = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->startoffset());

    // required int32 EndOffset = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->endoffset());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bytes Data = 7;
  if (has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  if (_has_bits_[0 / 32] & 192u) {
    // optional int32 CheckSum = 6;
    if (has_checksum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->checksum());
    }

    // optional int32 Progress = 8;
    if (has_progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->progress());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PacketBackupDataPush::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.PacketBackupDataPush)
  GOOGLE_DCHECK_NE(&from, this);
  const PacketBackupDataPush* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PacketBackupDataPush>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.PacketBackupDataPush)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.PacketBackupDataPush)
    MergeFrom(*source);
  }
}

void PacketBackupDataPush::MergeFrom(const PacketBackupDataPush& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.PacketBackupDataPush)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_dataid();
      dataid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dataid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000004u) {
      datatype_ = from.datatype_;
    }
    if (cached_has_bits & 0x00000008u) {
      datasize_ = from.datasize_;
    }
    if (cached_has_bits & 0x00000010u) {
      startoffset_ = from.startoffset_;
    }
    if (cached_has_bits & 0x00000020u) {
      endoffset_ = from.endoffset_;
    }
    if (cached_has_bits & 0x00000040u) {
      checksum_ = from.checksum_;
    }
    if (cached_has_bits & 0x00000080u) {
      progress_ = from.progress_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PacketBackupDataPush::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.PacketBackupDataPush)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PacketBackupDataPush::CopyFrom(const PacketBackupDataPush& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.PacketBackupDataPush)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketBackupDataPush::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003d) != 0x0000003d) return false;
  return true;
}

void PacketBackupDataPush::Swap(PacketBackupDataPush* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PacketBackupDataPush::InternalSwap(PacketBackupDataPush* other) {
  dataid_.Swap(&other->dataid_);
  data_.Swap(&other->data_);
  std::swap(datatype_, other->datatype_);
  std::swap(datasize_, other->datasize_);
  std::swap(startoffset_, other->startoffset_);
  std::swap(endoffset_, other->endoffset_);
  std::swap(checksum_, other->checksum_);
  std::swap(progress_, other->progress_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PacketBackupDataPush::GetMetadata() const {
  protobuf_mmbackup_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbackup_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PacketBackupDataPush

// required string DataID = 1;
bool PacketBackupDataPush::has_dataid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PacketBackupDataPush::set_has_dataid() {
  _has_bits_[0] |= 0x00000001u;
}
void PacketBackupDataPush::clear_has_dataid() {
  _has_bits_[0] &= ~0x00000001u;
}
void PacketBackupDataPush::clear_dataid() {
  dataid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dataid();
}
const ::std::string& PacketBackupDataPush::dataid() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketBackupDataPush.DataID)
  return dataid_.GetNoArena();
}
void PacketBackupDataPush::set_dataid(const ::std::string& value) {
  set_has_dataid();
  dataid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.PacketBackupDataPush.DataID)
}
#if LANG_CXX11
void PacketBackupDataPush::set_dataid(::std::string&& value) {
  set_has_dataid();
  dataid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.PacketBackupDataPush.DataID)
}
#endif
void PacketBackupDataPush::set_dataid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_dataid();
  dataid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.PacketBackupDataPush.DataID)
}
void PacketBackupDataPush::set_dataid(const char* value, size_t size) {
  set_has_dataid();
  dataid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.PacketBackupDataPush.DataID)
}
::std::string* PacketBackupDataPush::mutable_dataid() {
  set_has_dataid();
  // @@protoc_insertion_point(field_mutable:micromsg.PacketBackupDataPush.DataID)
  return dataid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PacketBackupDataPush::release_dataid() {
  // @@protoc_insertion_point(field_release:micromsg.PacketBackupDataPush.DataID)
  clear_has_dataid();
  return dataid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PacketBackupDataPush::set_allocated_dataid(::std::string* dataid) {
  if (dataid != NULL) {
    set_has_dataid();
  } else {
    clear_has_dataid();
  }
  dataid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dataid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.PacketBackupDataPush.DataID)
}

// required int32 DataType = 2;
bool PacketBackupDataPush::has_datatype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PacketBackupDataPush::set_has_datatype() {
  _has_bits_[0] |= 0x00000004u;
}
void PacketBackupDataPush::clear_has_datatype() {
  _has_bits_[0] &= ~0x00000004u;
}
void PacketBackupDataPush::clear_datatype() {
  datatype_ = 0;
  clear_has_datatype();
}
::google::protobuf::int32 PacketBackupDataPush::datatype() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketBackupDataPush.DataType)
  return datatype_;
}
void PacketBackupDataPush::set_datatype(::google::protobuf::int32 value) {
  set_has_datatype();
  datatype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PacketBackupDataPush.DataType)
}

// required int32 DataSize = 3;
bool PacketBackupDataPush::has_datasize() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PacketBackupDataPush::set_has_datasize() {
  _has_bits_[0] |= 0x00000008u;
}
void PacketBackupDataPush::clear_has_datasize() {
  _has_bits_[0] &= ~0x00000008u;
}
void PacketBackupDataPush::clear_datasize() {
  datasize_ = 0;
  clear_has_datasize();
}
::google::protobuf::int32 PacketBackupDataPush::datasize() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketBackupDataPush.DataSize)
  return datasize_;
}
void PacketBackupDataPush::set_datasize(::google::protobuf::int32 value) {
  set_has_datasize();
  datasize_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PacketBackupDataPush.DataSize)
}

// required int32 StartOffset = 4;
bool PacketBackupDataPush::has_startoffset() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PacketBackupDataPush::set_has_startoffset() {
  _has_bits_[0] |= 0x00000010u;
}
void PacketBackupDataPush::clear_has_startoffset() {
  _has_bits_[0] &= ~0x00000010u;
}
void PacketBackupDataPush::clear_startoffset() {
  startoffset_ = 0;
  clear_has_startoffset();
}
::google::protobuf::int32 PacketBackupDataPush::startoffset() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketBackupDataPush.StartOffset)
  return startoffset_;
}
void PacketBackupDataPush::set_startoffset(::google::protobuf::int32 value) {
  set_has_startoffset();
  startoffset_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PacketBackupDataPush.StartOffset)
}

// required int32 EndOffset = 5;
bool PacketBackupDataPush::has_endoffset() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PacketBackupDataPush::set_has_endoffset() {
  _has_bits_[0] |= 0x00000020u;
}
void PacketBackupDataPush::clear_has_endoffset() {
  _has_bits_[0] &= ~0x00000020u;
}
void PacketBackupDataPush::clear_endoffset() {
  endoffset_ = 0;
  clear_has_endoffset();
}
::google::protobuf::int32 PacketBackupDataPush::endoffset() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketBackupDataPush.EndOffset)
  return endoffset_;
}
void PacketBackupDataPush::set_endoffset(::google::protobuf::int32 value) {
  set_has_endoffset();
  endoffset_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PacketBackupDataPush.EndOffset)
}

// optional int32 CheckSum = 6;
bool PacketBackupDataPush::has_checksum() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PacketBackupDataPush::set_has_checksum() {
  _has_bits_[0] |= 0x00000040u;
}
void PacketBackupDataPush::clear_has_checksum() {
  _has_bits_[0] &= ~0x00000040u;
}
void PacketBackupDataPush::clear_checksum() {
  checksum_ = 0;
  clear_has_checksum();
}
::google::protobuf::int32 PacketBackupDataPush::checksum() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketBackupDataPush.CheckSum)
  return checksum_;
}
void PacketBackupDataPush::set_checksum(::google::protobuf::int32 value) {
  set_has_checksum();
  checksum_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PacketBackupDataPush.CheckSum)
}

// optional bytes Data = 7;
bool PacketBackupDataPush::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PacketBackupDataPush::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
void PacketBackupDataPush::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void PacketBackupDataPush::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& PacketBackupDataPush::data() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketBackupDataPush.Data)
  return data_.GetNoArena();
}
void PacketBackupDataPush::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.PacketBackupDataPush.Data)
}
#if LANG_CXX11
void PacketBackupDataPush::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.PacketBackupDataPush.Data)
}
#endif
void PacketBackupDataPush::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.PacketBackupDataPush.Data)
}
void PacketBackupDataPush::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.PacketBackupDataPush.Data)
}
::std::string* PacketBackupDataPush::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:micromsg.PacketBackupDataPush.Data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PacketBackupDataPush::release_data() {
  // @@protoc_insertion_point(field_release:micromsg.PacketBackupDataPush.Data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PacketBackupDataPush::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:micromsg.PacketBackupDataPush.Data)
}

// optional int32 Progress = 8;
bool PacketBackupDataPush::has_progress() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PacketBackupDataPush::set_has_progress() {
  _has_bits_[0] |= 0x00000080u;
}
void PacketBackupDataPush::clear_has_progress() {
  _has_bits_[0] &= ~0x00000080u;
}
void PacketBackupDataPush::clear_progress() {
  progress_ = 0;
  clear_has_progress();
}
::google::protobuf::int32 PacketBackupDataPush::progress() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketBackupDataPush.Progress)
  return progress_;
}
void PacketBackupDataPush::set_progress(::google::protobuf::int32 value) {
  set_has_progress();
  progress_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PacketBackupDataPush.Progress)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PacketBackupDataResponse::kDataIDFieldNumber;
const int PacketBackupDataResponse::kDataTypeFieldNumber;
const int PacketBackupDataResponse::kStartOffsetFieldNumber;
const int PacketBackupDataResponse::kEndOffsetFieldNumber;
const int PacketBackupDataResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PacketBackupDataResponse::PacketBackupDataResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbackup_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.PacketBackupDataResponse)
}
PacketBackupDataResponse::PacketBackupDataResponse(const PacketBackupDataResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dataid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_dataid()) {
    dataid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dataid_);
  }
  ::memcpy(&datatype_, &from.datatype_,
    reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&datatype_) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:micromsg.PacketBackupDataResponse)
}

void PacketBackupDataResponse::SharedCtor() {
  _cached_size_ = 0;
  dataid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&datatype_, 0, reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&datatype_) + sizeof(status_));
}

PacketBackupDataResponse::~PacketBackupDataResponse() {
  // @@protoc_insertion_point(destructor:micromsg.PacketBackupDataResponse)
  SharedDtor();
}

void PacketBackupDataResponse::SharedDtor() {
  dataid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PacketBackupDataResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PacketBackupDataResponse::descriptor() {
  protobuf_mmbackup_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbackup_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PacketBackupDataResponse& PacketBackupDataResponse::default_instance() {
  protobuf_mmbackup_2eproto::InitDefaults();
  return *internal_default_instance();
}

PacketBackupDataResponse* PacketBackupDataResponse::New(::google::protobuf::Arena* arena) const {
  PacketBackupDataResponse* n = new PacketBackupDataResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PacketBackupDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.PacketBackupDataResponse)
  if (has_dataid()) {
    GOOGLE_DCHECK(!dataid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*dataid_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&datatype_, 0, reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&datatype_) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PacketBackupDataResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.PacketBackupDataResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string DataID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dataid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dataid().data(), this->dataid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.PacketBackupDataResponse.DataID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 DataType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_datatype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &datatype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 StartOffset = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_startoffset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startoffset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 EndOffset = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_endoffset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endoffset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 Status = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.PacketBackupDataResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.PacketBackupDataResponse)
  return false;
#undef DO_
}

void PacketBackupDataResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.PacketBackupDataResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string DataID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dataid().data(), this->dataid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PacketBackupDataResponse.DataID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->dataid(), output);
  }

  // required int32 DataType = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->datatype(), output);
  }

  // required int32 StartOffset = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->startoffset(), output);
  }

  // required int32 EndOffset = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->endoffset(), output);
  }

  // required int32 Status = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.PacketBackupDataResponse)
}

::google::protobuf::uint8* PacketBackupDataResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.PacketBackupDataResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string DataID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dataid().data(), this->dataid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PacketBackupDataResponse.DataID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dataid(), target);
  }

  // required int32 DataType = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->datatype(), target);
  }

  // required int32 StartOffset = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->startoffset(), target);
  }

  // required int32 EndOffset = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->endoffset(), target);
  }

  // required int32 Status = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.PacketBackupDataResponse)
  return target;
}

size_t PacketBackupDataResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.PacketBackupDataResponse)
  size_t total_size = 0;

  if (has_dataid()) {
    // required string DataID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dataid());
  }

  if (has_datatype()) {
    // required int32 DataType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->datatype());
  }

  if (has_startoffset()) {
    // required int32 StartOffset = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->startoffset());
  }

  if (has_endoffset()) {
    // required int32 EndOffset = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->endoffset());
  }

  if (has_status()) {
    // required int32 Status = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  return total_size;
}
size_t PacketBackupDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.PacketBackupDataResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string DataID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dataid());

    // required int32 DataType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->datatype());

    // required int32 StartOffset = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->startoffset());

    // required int32 EndOffset = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->endoffset());

    // required int32 Status = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PacketBackupDataResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.PacketBackupDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PacketBackupDataResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PacketBackupDataResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.PacketBackupDataResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.PacketBackupDataResponse)
    MergeFrom(*source);
  }
}

void PacketBackupDataResponse::MergeFrom(const PacketBackupDataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.PacketBackupDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_dataid();
      dataid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dataid_);
    }
    if (cached_has_bits & 0x00000002u) {
      datatype_ = from.datatype_;
    }
    if (cached_has_bits & 0x00000004u) {
      startoffset_ = from.startoffset_;
    }
    if (cached_has_bits & 0x00000008u) {
      endoffset_ = from.endoffset_;
    }
    if (cached_has_bits & 0x00000010u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PacketBackupDataResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.PacketBackupDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PacketBackupDataResponse::CopyFrom(const PacketBackupDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.PacketBackupDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketBackupDataResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void PacketBackupDataResponse::Swap(PacketBackupDataResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PacketBackupDataResponse::InternalSwap(PacketBackupDataResponse* other) {
  dataid_.Swap(&other->dataid_);
  std::swap(datatype_, other->datatype_);
  std::swap(startoffset_, other->startoffset_);
  std::swap(endoffset_, other->endoffset_);
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PacketBackupDataResponse::GetMetadata() const {
  protobuf_mmbackup_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbackup_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PacketBackupDataResponse

// required string DataID = 1;
bool PacketBackupDataResponse::has_dataid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PacketBackupDataResponse::set_has_dataid() {
  _has_bits_[0] |= 0x00000001u;
}
void PacketBackupDataResponse::clear_has_dataid() {
  _has_bits_[0] &= ~0x00000001u;
}
void PacketBackupDataResponse::clear_dataid() {
  dataid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dataid();
}
const ::std::string& PacketBackupDataResponse::dataid() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketBackupDataResponse.DataID)
  return dataid_.GetNoArena();
}
void PacketBackupDataResponse::set_dataid(const ::std::string& value) {
  set_has_dataid();
  dataid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.PacketBackupDataResponse.DataID)
}
#if LANG_CXX11
void PacketBackupDataResponse::set_dataid(::std::string&& value) {
  set_has_dataid();
  dataid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.PacketBackupDataResponse.DataID)
}
#endif
void PacketBackupDataResponse::set_dataid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_dataid();
  dataid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.PacketBackupDataResponse.DataID)
}
void PacketBackupDataResponse::set_dataid(const char* value, size_t size) {
  set_has_dataid();
  dataid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.PacketBackupDataResponse.DataID)
}
::std::string* PacketBackupDataResponse::mutable_dataid() {
  set_has_dataid();
  // @@protoc_insertion_point(field_mutable:micromsg.PacketBackupDataResponse.DataID)
  return dataid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PacketBackupDataResponse::release_dataid() {
  // @@protoc_insertion_point(field_release:micromsg.PacketBackupDataResponse.DataID)
  clear_has_dataid();
  return dataid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PacketBackupDataResponse::set_allocated_dataid(::std::string* dataid) {
  if (dataid != NULL) {
    set_has_dataid();
  } else {
    clear_has_dataid();
  }
  dataid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dataid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.PacketBackupDataResponse.DataID)
}

// required int32 DataType = 2;
bool PacketBackupDataResponse::has_datatype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PacketBackupDataResponse::set_has_datatype() {
  _has_bits_[0] |= 0x00000002u;
}
void PacketBackupDataResponse::clear_has_datatype() {
  _has_bits_[0] &= ~0x00000002u;
}
void PacketBackupDataResponse::clear_datatype() {
  datatype_ = 0;
  clear_has_datatype();
}
::google::protobuf::int32 PacketBackupDataResponse::datatype() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketBackupDataResponse.DataType)
  return datatype_;
}
void PacketBackupDataResponse::set_datatype(::google::protobuf::int32 value) {
  set_has_datatype();
  datatype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PacketBackupDataResponse.DataType)
}

// required int32 StartOffset = 3;
bool PacketBackupDataResponse::has_startoffset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PacketBackupDataResponse::set_has_startoffset() {
  _has_bits_[0] |= 0x00000004u;
}
void PacketBackupDataResponse::clear_has_startoffset() {
  _has_bits_[0] &= ~0x00000004u;
}
void PacketBackupDataResponse::clear_startoffset() {
  startoffset_ = 0;
  clear_has_startoffset();
}
::google::protobuf::int32 PacketBackupDataResponse::startoffset() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketBackupDataResponse.StartOffset)
  return startoffset_;
}
void PacketBackupDataResponse::set_startoffset(::google::protobuf::int32 value) {
  set_has_startoffset();
  startoffset_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PacketBackupDataResponse.StartOffset)
}

// required int32 EndOffset = 4;
bool PacketBackupDataResponse::has_endoffset() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PacketBackupDataResponse::set_has_endoffset() {
  _has_bits_[0] |= 0x00000008u;
}
void PacketBackupDataResponse::clear_has_endoffset() {
  _has_bits_[0] &= ~0x00000008u;
}
void PacketBackupDataResponse::clear_endoffset() {
  endoffset_ = 0;
  clear_has_endoffset();
}
::google::protobuf::int32 PacketBackupDataResponse::endoffset() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketBackupDataResponse.EndOffset)
  return endoffset_;
}
void PacketBackupDataResponse::set_endoffset(::google::protobuf::int32 value) {
  set_has_endoffset();
  endoffset_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PacketBackupDataResponse.EndOffset)
}

// required int32 Status = 5;
bool PacketBackupDataResponse::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PacketBackupDataResponse::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
void PacketBackupDataResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
void PacketBackupDataResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
::google::protobuf::int32 PacketBackupDataResponse::status() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketBackupDataResponse.Status)
  return status_;
}
void PacketBackupDataResponse::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PacketBackupDataResponse.Status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PacketSvrIDRequest::kSvrIDFieldNumber;
const int PacketSvrIDRequest::kMediaIDFieldNumber;
const int PacketSvrIDRequest::kMD5FieldNumber;
const int PacketSvrIDRequest::kBakChatNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PacketSvrIDRequest::PacketSvrIDRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbackup_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.PacketSvrIDRequest)
}
PacketSvrIDRequest::PacketSvrIDRequest(const PacketSvrIDRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      svrid_(from.svrid_),
      mediaid_(from.mediaid_),
      md5_(from.md5_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bakchatname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bakchatname()) {
    bakchatname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bakchatname_);
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.PacketSvrIDRequest)
}

void PacketSvrIDRequest::SharedCtor() {
  _cached_size_ = 0;
  bakchatname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PacketSvrIDRequest::~PacketSvrIDRequest() {
  // @@protoc_insertion_point(destructor:micromsg.PacketSvrIDRequest)
  SharedDtor();
}

void PacketSvrIDRequest::SharedDtor() {
  bakchatname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PacketSvrIDRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PacketSvrIDRequest::descriptor() {
  protobuf_mmbackup_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbackup_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PacketSvrIDRequest& PacketSvrIDRequest::default_instance() {
  protobuf_mmbackup_2eproto::InitDefaults();
  return *internal_default_instance();
}

PacketSvrIDRequest* PacketSvrIDRequest::New(::google::protobuf::Arena* arena) const {
  PacketSvrIDRequest* n = new PacketSvrIDRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PacketSvrIDRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.PacketSvrIDRequest)
  svrid_.Clear();
  mediaid_.Clear();
  md5_.Clear();
  if (has_bakchatname()) {
    GOOGLE_DCHECK(!bakchatname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*bakchatname_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PacketSvrIDRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.PacketSvrIDRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 SvrID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8u, input, this->mutable_svrid())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_svrid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string MediaID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_mediaid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mediaid(this->mediaid_size() - 1).data(),
            this->mediaid(this->mediaid_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.PacketSvrIDRequest.MediaID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string MD5 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_md5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->md5(this->md5_size() - 1).data(),
            this->md5(this->md5_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.PacketSvrIDRequest.MD5");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string BakChatName = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bakchatname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bakchatname().data(), this->bakchatname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.PacketSvrIDRequest.BakChatName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.PacketSvrIDRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.PacketSvrIDRequest)
  return false;
#undef DO_
}

void PacketSvrIDRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.PacketSvrIDRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 SvrID = 1;
  for (int i = 0, n = this->svrid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->svrid(i), output);
  }

  // repeated string MediaID = 2;
  for (int i = 0, n = this->mediaid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mediaid(i).data(), this->mediaid(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PacketSvrIDRequest.MediaID");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->mediaid(i), output);
  }

  // repeated string MD5 = 3;
  for (int i = 0, n = this->md5_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->md5(i).data(), this->md5(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PacketSvrIDRequest.MD5");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->md5(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // required string BakChatName = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bakchatname().data(), this->bakchatname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PacketSvrIDRequest.BakChatName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->bakchatname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.PacketSvrIDRequest)
}

::google::protobuf::uint8* PacketSvrIDRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.PacketSvrIDRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 SvrID = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(1, this->svrid_, target);

  // repeated string MediaID = 2;
  for (int i = 0, n = this->mediaid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mediaid(i).data(), this->mediaid(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PacketSvrIDRequest.MediaID");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->mediaid(i), target);
  }

  // repeated string MD5 = 3;
  for (int i = 0, n = this->md5_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->md5(i).data(), this->md5(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PacketSvrIDRequest.MD5");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->md5(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // required string BakChatName = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bakchatname().data(), this->bakchatname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PacketSvrIDRequest.BakChatName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->bakchatname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.PacketSvrIDRequest)
  return target;
}

size_t PacketSvrIDRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.PacketSvrIDRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required string BakChatName = 4;
  if (has_bakchatname()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bakchatname());
  }
  // repeated uint64 SvrID = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->svrid_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->svrid_size());
    total_size += data_size;
  }

  // repeated string MediaID = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->mediaid_size());
  for (int i = 0, n = this->mediaid_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->mediaid(i));
  }

  // repeated string MD5 = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->md5_size());
  for (int i = 0, n = this->md5_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->md5(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PacketSvrIDRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.PacketSvrIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PacketSvrIDRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PacketSvrIDRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.PacketSvrIDRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.PacketSvrIDRequest)
    MergeFrom(*source);
  }
}

void PacketSvrIDRequest::MergeFrom(const PacketSvrIDRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.PacketSvrIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  svrid_.MergeFrom(from.svrid_);
  mediaid_.MergeFrom(from.mediaid_);
  md5_.MergeFrom(from.md5_);
  if (from.has_bakchatname()) {
    set_has_bakchatname();
    bakchatname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bakchatname_);
  }
}

void PacketSvrIDRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.PacketSvrIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PacketSvrIDRequest::CopyFrom(const PacketSvrIDRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.PacketSvrIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketSvrIDRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void PacketSvrIDRequest::Swap(PacketSvrIDRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PacketSvrIDRequest::InternalSwap(PacketSvrIDRequest* other) {
  svrid_.InternalSwap(&other->svrid_);
  mediaid_.InternalSwap(&other->mediaid_);
  md5_.InternalSwap(&other->md5_);
  bakchatname_.Swap(&other->bakchatname_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PacketSvrIDRequest::GetMetadata() const {
  protobuf_mmbackup_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbackup_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PacketSvrIDRequest

// repeated uint64 SvrID = 1;
int PacketSvrIDRequest::svrid_size() const {
  return svrid_.size();
}
void PacketSvrIDRequest::clear_svrid() {
  svrid_.Clear();
}
::google::protobuf::uint64 PacketSvrIDRequest::svrid(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.PacketSvrIDRequest.SvrID)
  return svrid_.Get(index);
}
void PacketSvrIDRequest::set_svrid(int index, ::google::protobuf::uint64 value) {
  svrid_.Set(index, value);
  // @@protoc_insertion_point(field_set:micromsg.PacketSvrIDRequest.SvrID)
}
void PacketSvrIDRequest::add_svrid(::google::protobuf::uint64 value) {
  svrid_.Add(value);
  // @@protoc_insertion_point(field_add:micromsg.PacketSvrIDRequest.SvrID)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
PacketSvrIDRequest::svrid() const {
  // @@protoc_insertion_point(field_list:micromsg.PacketSvrIDRequest.SvrID)
  return svrid_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
PacketSvrIDRequest::mutable_svrid() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.PacketSvrIDRequest.SvrID)
  return &svrid_;
}

// repeated string MediaID = 2;
int PacketSvrIDRequest::mediaid_size() const {
  return mediaid_.size();
}
void PacketSvrIDRequest::clear_mediaid() {
  mediaid_.Clear();
}
const ::std::string& PacketSvrIDRequest::mediaid(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.PacketSvrIDRequest.MediaID)
  return mediaid_.Get(index);
}
::std::string* PacketSvrIDRequest::mutable_mediaid(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.PacketSvrIDRequest.MediaID)
  return mediaid_.Mutable(index);
}
void PacketSvrIDRequest::set_mediaid(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:micromsg.PacketSvrIDRequest.MediaID)
  mediaid_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void PacketSvrIDRequest::set_mediaid(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:micromsg.PacketSvrIDRequest.MediaID)
  mediaid_.Mutable(index)->assign(std::move(value));
}
#endif
void PacketSvrIDRequest::set_mediaid(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  mediaid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:micromsg.PacketSvrIDRequest.MediaID)
}
void PacketSvrIDRequest::set_mediaid(int index, const char* value, size_t size) {
  mediaid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:micromsg.PacketSvrIDRequest.MediaID)
}
::std::string* PacketSvrIDRequest::add_mediaid() {
  // @@protoc_insertion_point(field_add_mutable:micromsg.PacketSvrIDRequest.MediaID)
  return mediaid_.Add();
}
void PacketSvrIDRequest::add_mediaid(const ::std::string& value) {
  mediaid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:micromsg.PacketSvrIDRequest.MediaID)
}
#if LANG_CXX11
void PacketSvrIDRequest::add_mediaid(::std::string&& value) {
  mediaid_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:micromsg.PacketSvrIDRequest.MediaID)
}
#endif
void PacketSvrIDRequest::add_mediaid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  mediaid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:micromsg.PacketSvrIDRequest.MediaID)
}
void PacketSvrIDRequest::add_mediaid(const char* value, size_t size) {
  mediaid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:micromsg.PacketSvrIDRequest.MediaID)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
PacketSvrIDRequest::mediaid() const {
  // @@protoc_insertion_point(field_list:micromsg.PacketSvrIDRequest.MediaID)
  return mediaid_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
PacketSvrIDRequest::mutable_mediaid() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.PacketSvrIDRequest.MediaID)
  return &mediaid_;
}

// repeated string MD5 = 3;
int PacketSvrIDRequest::md5_size() const {
  return md5_.size();
}
void PacketSvrIDRequest::clear_md5() {
  md5_.Clear();
}
const ::std::string& PacketSvrIDRequest::md5(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.PacketSvrIDRequest.MD5)
  return md5_.Get(index);
}
::std::string* PacketSvrIDRequest::mutable_md5(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.PacketSvrIDRequest.MD5)
  return md5_.Mutable(index);
}
void PacketSvrIDRequest::set_md5(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:micromsg.PacketSvrIDRequest.MD5)
  md5_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void PacketSvrIDRequest::set_md5(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:micromsg.PacketSvrIDRequest.MD5)
  md5_.Mutable(index)->assign(std::move(value));
}
#endif
void PacketSvrIDRequest::set_md5(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  md5_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:micromsg.PacketSvrIDRequest.MD5)
}
void PacketSvrIDRequest::set_md5(int index, const char* value, size_t size) {
  md5_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:micromsg.PacketSvrIDRequest.MD5)
}
::std::string* PacketSvrIDRequest::add_md5() {
  // @@protoc_insertion_point(field_add_mutable:micromsg.PacketSvrIDRequest.MD5)
  return md5_.Add();
}
void PacketSvrIDRequest::add_md5(const ::std::string& value) {
  md5_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:micromsg.PacketSvrIDRequest.MD5)
}
#if LANG_CXX11
void PacketSvrIDRequest::add_md5(::std::string&& value) {
  md5_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:micromsg.PacketSvrIDRequest.MD5)
}
#endif
void PacketSvrIDRequest::add_md5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  md5_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:micromsg.PacketSvrIDRequest.MD5)
}
void PacketSvrIDRequest::add_md5(const char* value, size_t size) {
  md5_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:micromsg.PacketSvrIDRequest.MD5)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
PacketSvrIDRequest::md5() const {
  // @@protoc_insertion_point(field_list:micromsg.PacketSvrIDRequest.MD5)
  return md5_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
PacketSvrIDRequest::mutable_md5() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.PacketSvrIDRequest.MD5)
  return &md5_;
}

// required string BakChatName = 4;
bool PacketSvrIDRequest::has_bakchatname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PacketSvrIDRequest::set_has_bakchatname() {
  _has_bits_[0] |= 0x00000001u;
}
void PacketSvrIDRequest::clear_has_bakchatname() {
  _has_bits_[0] &= ~0x00000001u;
}
void PacketSvrIDRequest::clear_bakchatname() {
  bakchatname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bakchatname();
}
const ::std::string& PacketSvrIDRequest::bakchatname() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketSvrIDRequest.BakChatName)
  return bakchatname_.GetNoArena();
}
void PacketSvrIDRequest::set_bakchatname(const ::std::string& value) {
  set_has_bakchatname();
  bakchatname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.PacketSvrIDRequest.BakChatName)
}
#if LANG_CXX11
void PacketSvrIDRequest::set_bakchatname(::std::string&& value) {
  set_has_bakchatname();
  bakchatname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.PacketSvrIDRequest.BakChatName)
}
#endif
void PacketSvrIDRequest::set_bakchatname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bakchatname();
  bakchatname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.PacketSvrIDRequest.BakChatName)
}
void PacketSvrIDRequest::set_bakchatname(const char* value, size_t size) {
  set_has_bakchatname();
  bakchatname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.PacketSvrIDRequest.BakChatName)
}
::std::string* PacketSvrIDRequest::mutable_bakchatname() {
  set_has_bakchatname();
  // @@protoc_insertion_point(field_mutable:micromsg.PacketSvrIDRequest.BakChatName)
  return bakchatname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PacketSvrIDRequest::release_bakchatname() {
  // @@protoc_insertion_point(field_release:micromsg.PacketSvrIDRequest.BakChatName)
  clear_has_bakchatname();
  return bakchatname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PacketSvrIDRequest::set_allocated_bakchatname(::std::string* bakchatname) {
  if (bakchatname != NULL) {
    set_has_bakchatname();
  } else {
    clear_has_bakchatname();
  }
  bakchatname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bakchatname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.PacketSvrIDRequest.BakChatName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PacketSvrIDResponse::kSvrIDFieldNumber;
const int PacketSvrIDResponse::kMediaIDFieldNumber;
const int PacketSvrIDResponse::kMD5FieldNumber;
const int PacketSvrIDResponse::kBakChatNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PacketSvrIDResponse::PacketSvrIDResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbackup_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.PacketSvrIDResponse)
}
PacketSvrIDResponse::PacketSvrIDResponse(const PacketSvrIDResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      svrid_(from.svrid_),
      mediaid_(from.mediaid_),
      md5_(from.md5_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bakchatname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bakchatname()) {
    bakchatname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bakchatname_);
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.PacketSvrIDResponse)
}

void PacketSvrIDResponse::SharedCtor() {
  _cached_size_ = 0;
  bakchatname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PacketSvrIDResponse::~PacketSvrIDResponse() {
  // @@protoc_insertion_point(destructor:micromsg.PacketSvrIDResponse)
  SharedDtor();
}

void PacketSvrIDResponse::SharedDtor() {
  bakchatname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PacketSvrIDResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PacketSvrIDResponse::descriptor() {
  protobuf_mmbackup_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbackup_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PacketSvrIDResponse& PacketSvrIDResponse::default_instance() {
  protobuf_mmbackup_2eproto::InitDefaults();
  return *internal_default_instance();
}

PacketSvrIDResponse* PacketSvrIDResponse::New(::google::protobuf::Arena* arena) const {
  PacketSvrIDResponse* n = new PacketSvrIDResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PacketSvrIDResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.PacketSvrIDResponse)
  svrid_.Clear();
  mediaid_.Clear();
  md5_.Clear();
  if (has_bakchatname()) {
    GOOGLE_DCHECK(!bakchatname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*bakchatname_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PacketSvrIDResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.PacketSvrIDResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 SvrID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8u, input, this->mutable_svrid())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_svrid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string MediaID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_mediaid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mediaid(this->mediaid_size() - 1).data(),
            this->mediaid(this->mediaid_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.PacketSvrIDResponse.MediaID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string MD5 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_md5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->md5(this->md5_size() - 1).data(),
            this->md5(this->md5_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.PacketSvrIDResponse.MD5");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string BakChatName = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bakchatname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bakchatname().data(), this->bakchatname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.PacketSvrIDResponse.BakChatName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.PacketSvrIDResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.PacketSvrIDResponse)
  return false;
#undef DO_
}

void PacketSvrIDResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.PacketSvrIDResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 SvrID = 1;
  for (int i = 0, n = this->svrid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->svrid(i), output);
  }

  // repeated string MediaID = 2;
  for (int i = 0, n = this->mediaid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mediaid(i).data(), this->mediaid(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PacketSvrIDResponse.MediaID");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->mediaid(i), output);
  }

  // repeated string MD5 = 3;
  for (int i = 0, n = this->md5_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->md5(i).data(), this->md5(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PacketSvrIDResponse.MD5");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->md5(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // required string BakChatName = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bakchatname().data(), this->bakchatname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PacketSvrIDResponse.BakChatName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->bakchatname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.PacketSvrIDResponse)
}

::google::protobuf::uint8* PacketSvrIDResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.PacketSvrIDResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 SvrID = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(1, this->svrid_, target);

  // repeated string MediaID = 2;
  for (int i = 0, n = this->mediaid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mediaid(i).data(), this->mediaid(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PacketSvrIDResponse.MediaID");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->mediaid(i), target);
  }

  // repeated string MD5 = 3;
  for (int i = 0, n = this->md5_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->md5(i).data(), this->md5(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PacketSvrIDResponse.MD5");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->md5(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // required string BakChatName = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bakchatname().data(), this->bakchatname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PacketSvrIDResponse.BakChatName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->bakchatname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.PacketSvrIDResponse)
  return target;
}

size_t PacketSvrIDResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.PacketSvrIDResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required string BakChatName = 4;
  if (has_bakchatname()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bakchatname());
  }
  // repeated uint64 SvrID = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->svrid_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->svrid_size());
    total_size += data_size;
  }

  // repeated string MediaID = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->mediaid_size());
  for (int i = 0, n = this->mediaid_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->mediaid(i));
  }

  // repeated string MD5 = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->md5_size());
  for (int i = 0, n = this->md5_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->md5(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PacketSvrIDResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.PacketSvrIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PacketSvrIDResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PacketSvrIDResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.PacketSvrIDResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.PacketSvrIDResponse)
    MergeFrom(*source);
  }
}

void PacketSvrIDResponse::MergeFrom(const PacketSvrIDResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.PacketSvrIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  svrid_.MergeFrom(from.svrid_);
  mediaid_.MergeFrom(from.mediaid_);
  md5_.MergeFrom(from.md5_);
  if (from.has_bakchatname()) {
    set_has_bakchatname();
    bakchatname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bakchatname_);
  }
}

void PacketSvrIDResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.PacketSvrIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PacketSvrIDResponse::CopyFrom(const PacketSvrIDResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.PacketSvrIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketSvrIDResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void PacketSvrIDResponse::Swap(PacketSvrIDResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PacketSvrIDResponse::InternalSwap(PacketSvrIDResponse* other) {
  svrid_.InternalSwap(&other->svrid_);
  mediaid_.InternalSwap(&other->mediaid_);
  md5_.InternalSwap(&other->md5_);
  bakchatname_.Swap(&other->bakchatname_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PacketSvrIDResponse::GetMetadata() const {
  protobuf_mmbackup_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbackup_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PacketSvrIDResponse

// repeated uint64 SvrID = 1;
int PacketSvrIDResponse::svrid_size() const {
  return svrid_.size();
}
void PacketSvrIDResponse::clear_svrid() {
  svrid_.Clear();
}
::google::protobuf::uint64 PacketSvrIDResponse::svrid(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.PacketSvrIDResponse.SvrID)
  return svrid_.Get(index);
}
void PacketSvrIDResponse::set_svrid(int index, ::google::protobuf::uint64 value) {
  svrid_.Set(index, value);
  // @@protoc_insertion_point(field_set:micromsg.PacketSvrIDResponse.SvrID)
}
void PacketSvrIDResponse::add_svrid(::google::protobuf::uint64 value) {
  svrid_.Add(value);
  // @@protoc_insertion_point(field_add:micromsg.PacketSvrIDResponse.SvrID)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
PacketSvrIDResponse::svrid() const {
  // @@protoc_insertion_point(field_list:micromsg.PacketSvrIDResponse.SvrID)
  return svrid_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
PacketSvrIDResponse::mutable_svrid() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.PacketSvrIDResponse.SvrID)
  return &svrid_;
}

// repeated string MediaID = 2;
int PacketSvrIDResponse::mediaid_size() const {
  return mediaid_.size();
}
void PacketSvrIDResponse::clear_mediaid() {
  mediaid_.Clear();
}
const ::std::string& PacketSvrIDResponse::mediaid(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.PacketSvrIDResponse.MediaID)
  return mediaid_.Get(index);
}
::std::string* PacketSvrIDResponse::mutable_mediaid(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.PacketSvrIDResponse.MediaID)
  return mediaid_.Mutable(index);
}
void PacketSvrIDResponse::set_mediaid(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:micromsg.PacketSvrIDResponse.MediaID)
  mediaid_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void PacketSvrIDResponse::set_mediaid(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:micromsg.PacketSvrIDResponse.MediaID)
  mediaid_.Mutable(index)->assign(std::move(value));
}
#endif
void PacketSvrIDResponse::set_mediaid(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  mediaid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:micromsg.PacketSvrIDResponse.MediaID)
}
void PacketSvrIDResponse::set_mediaid(int index, const char* value, size_t size) {
  mediaid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:micromsg.PacketSvrIDResponse.MediaID)
}
::std::string* PacketSvrIDResponse::add_mediaid() {
  // @@protoc_insertion_point(field_add_mutable:micromsg.PacketSvrIDResponse.MediaID)
  return mediaid_.Add();
}
void PacketSvrIDResponse::add_mediaid(const ::std::string& value) {
  mediaid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:micromsg.PacketSvrIDResponse.MediaID)
}
#if LANG_CXX11
void PacketSvrIDResponse::add_mediaid(::std::string&& value) {
  mediaid_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:micromsg.PacketSvrIDResponse.MediaID)
}
#endif
void PacketSvrIDResponse::add_mediaid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  mediaid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:micromsg.PacketSvrIDResponse.MediaID)
}
void PacketSvrIDResponse::add_mediaid(const char* value, size_t size) {
  mediaid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:micromsg.PacketSvrIDResponse.MediaID)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
PacketSvrIDResponse::mediaid() const {
  // @@protoc_insertion_point(field_list:micromsg.PacketSvrIDResponse.MediaID)
  return mediaid_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
PacketSvrIDResponse::mutable_mediaid() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.PacketSvrIDResponse.MediaID)
  return &mediaid_;
}

// repeated string MD5 = 3;
int PacketSvrIDResponse::md5_size() const {
  return md5_.size();
}
void PacketSvrIDResponse::clear_md5() {
  md5_.Clear();
}
const ::std::string& PacketSvrIDResponse::md5(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.PacketSvrIDResponse.MD5)
  return md5_.Get(index);
}
::std::string* PacketSvrIDResponse::mutable_md5(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.PacketSvrIDResponse.MD5)
  return md5_.Mutable(index);
}
void PacketSvrIDResponse::set_md5(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:micromsg.PacketSvrIDResponse.MD5)
  md5_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void PacketSvrIDResponse::set_md5(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:micromsg.PacketSvrIDResponse.MD5)
  md5_.Mutable(index)->assign(std::move(value));
}
#endif
void PacketSvrIDResponse::set_md5(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  md5_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:micromsg.PacketSvrIDResponse.MD5)
}
void PacketSvrIDResponse::set_md5(int index, const char* value, size_t size) {
  md5_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:micromsg.PacketSvrIDResponse.MD5)
}
::std::string* PacketSvrIDResponse::add_md5() {
  // @@protoc_insertion_point(field_add_mutable:micromsg.PacketSvrIDResponse.MD5)
  return md5_.Add();
}
void PacketSvrIDResponse::add_md5(const ::std::string& value) {
  md5_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:micromsg.PacketSvrIDResponse.MD5)
}
#if LANG_CXX11
void PacketSvrIDResponse::add_md5(::std::string&& value) {
  md5_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:micromsg.PacketSvrIDResponse.MD5)
}
#endif
void PacketSvrIDResponse::add_md5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  md5_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:micromsg.PacketSvrIDResponse.MD5)
}
void PacketSvrIDResponse::add_md5(const char* value, size_t size) {
  md5_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:micromsg.PacketSvrIDResponse.MD5)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
PacketSvrIDResponse::md5() const {
  // @@protoc_insertion_point(field_list:micromsg.PacketSvrIDResponse.MD5)
  return md5_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
PacketSvrIDResponse::mutable_md5() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.PacketSvrIDResponse.MD5)
  return &md5_;
}

// required string BakChatName = 4;
bool PacketSvrIDResponse::has_bakchatname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PacketSvrIDResponse::set_has_bakchatname() {
  _has_bits_[0] |= 0x00000001u;
}
void PacketSvrIDResponse::clear_has_bakchatname() {
  _has_bits_[0] &= ~0x00000001u;
}
void PacketSvrIDResponse::clear_bakchatname() {
  bakchatname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bakchatname();
}
const ::std::string& PacketSvrIDResponse::bakchatname() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketSvrIDResponse.BakChatName)
  return bakchatname_.GetNoArena();
}
void PacketSvrIDResponse::set_bakchatname(const ::std::string& value) {
  set_has_bakchatname();
  bakchatname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.PacketSvrIDResponse.BakChatName)
}
#if LANG_CXX11
void PacketSvrIDResponse::set_bakchatname(::std::string&& value) {
  set_has_bakchatname();
  bakchatname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.PacketSvrIDResponse.BakChatName)
}
#endif
void PacketSvrIDResponse::set_bakchatname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bakchatname();
  bakchatname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.PacketSvrIDResponse.BakChatName)
}
void PacketSvrIDResponse::set_bakchatname(const char* value, size_t size) {
  set_has_bakchatname();
  bakchatname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.PacketSvrIDResponse.BakChatName)
}
::std::string* PacketSvrIDResponse::mutable_bakchatname() {
  set_has_bakchatname();
  // @@protoc_insertion_point(field_mutable:micromsg.PacketSvrIDResponse.BakChatName)
  return bakchatname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PacketSvrIDResponse::release_bakchatname() {
  // @@protoc_insertion_point(field_release:micromsg.PacketSvrIDResponse.BakChatName)
  clear_has_bakchatname();
  return bakchatname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PacketSvrIDResponse::set_allocated_bakchatname(::std::string* bakchatname) {
  if (bakchatname != NULL) {
    set_has_bakchatname();
  } else {
    clear_has_bakchatname();
  }
  bakchatname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bakchatname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.PacketSvrIDResponse.BakChatName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PacketBackupDataTag::kBakChatNameFieldNumber;
const int PacketBackupDataTag::kStartTimeFieldNumber;
const int PacketBackupDataTag::kEndTimeFieldNumber;
const int PacketBackupDataTag::kMsgDataIDFieldNumber;
const int PacketBackupDataTag::kNickNameFieldNumber;
const int PacketBackupDataTag::kMediaIDListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PacketBackupDataTag::PacketBackupDataTag()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbackup_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.PacketBackupDataTag)
}
PacketBackupDataTag::PacketBackupDataTag(const PacketBackupDataTag& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      mediaidlist_(from.mediaidlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bakchatname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bakchatname()) {
    bakchatname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bakchatname_);
  }
  msgdataid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_msgdataid()) {
    msgdataid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msgdataid_);
  }
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nickname()) {
    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  ::memcpy(&starttime_, &from.starttime_,
    reinterpret_cast<char*>(&endtime_) -
    reinterpret_cast<char*>(&starttime_) + sizeof(endtime_));
  // @@protoc_insertion_point(copy_constructor:micromsg.PacketBackupDataTag)
}

void PacketBackupDataTag::SharedCtor() {
  _cached_size_ = 0;
  bakchatname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgdataid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&starttime_, 0, reinterpret_cast<char*>(&endtime_) -
    reinterpret_cast<char*>(&starttime_) + sizeof(endtime_));
}

PacketBackupDataTag::~PacketBackupDataTag() {
  // @@protoc_insertion_point(destructor:micromsg.PacketBackupDataTag)
  SharedDtor();
}

void PacketBackupDataTag::SharedDtor() {
  bakchatname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgdataid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PacketBackupDataTag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PacketBackupDataTag::descriptor() {
  protobuf_mmbackup_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbackup_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PacketBackupDataTag& PacketBackupDataTag::default_instance() {
  protobuf_mmbackup_2eproto::InitDefaults();
  return *internal_default_instance();
}

PacketBackupDataTag* PacketBackupDataTag::New(::google::protobuf::Arena* arena) const {
  PacketBackupDataTag* n = new PacketBackupDataTag;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PacketBackupDataTag::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.PacketBackupDataTag)
  mediaidlist_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_bakchatname()) {
      GOOGLE_DCHECK(!bakchatname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bakchatname_.UnsafeRawStringPointer())->clear();
    }
    if (has_msgdataid()) {
      GOOGLE_DCHECK(!msgdataid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*msgdataid_.UnsafeRawStringPointer())->clear();
    }
    if (has_nickname()) {
      GOOGLE_DCHECK(!nickname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*nickname_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 24u) {
    ::memset(&starttime_, 0, reinterpret_cast<char*>(&endtime_) -
      reinterpret_cast<char*>(&starttime_) + sizeof(endtime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PacketBackupDataTag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.PacketBackupDataTag)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string BakChatName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bakchatname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bakchatname().data(), this->bakchatname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.PacketBackupDataTag.BakChatName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 StartTime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_starttime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &starttime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 EndTime = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_endtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string MsgDataID = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgdataid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msgdataid().data(), this->msgdataid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.PacketBackupDataTag.MsgDataID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string NickName = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.PacketBackupDataTag.NickName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string MediaIDList = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_mediaidlist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mediaidlist(this->mediaidlist_size() - 1).data(),
            this->mediaidlist(this->mediaidlist_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.PacketBackupDataTag.MediaIDList");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.PacketBackupDataTag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.PacketBackupDataTag)
  return false;
#undef DO_
}

void PacketBackupDataTag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.PacketBackupDataTag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string BakChatName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bakchatname().data(), this->bakchatname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PacketBackupDataTag.BakChatName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->bakchatname(), output);
  }

  // required int64 StartTime = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->starttime(), output);
  }

  // required int64 EndTime = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->endtime(), output);
  }

  // required string MsgDataID = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msgdataid().data(), this->msgdataid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PacketBackupDataTag.MsgDataID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->msgdataid(), output);
  }

  // required string NickName = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PacketBackupDataTag.NickName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->nickname(), output);
  }

  // repeated string MediaIDList = 6;
  for (int i = 0, n = this->mediaidlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mediaidlist(i).data(), this->mediaidlist(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PacketBackupDataTag.MediaIDList");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->mediaidlist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.PacketBackupDataTag)
}

::google::protobuf::uint8* PacketBackupDataTag::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.PacketBackupDataTag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string BakChatName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bakchatname().data(), this->bakchatname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PacketBackupDataTag.BakChatName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->bakchatname(), target);
  }

  // required int64 StartTime = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->starttime(), target);
  }

  // required int64 EndTime = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->endtime(), target);
  }

  // required string MsgDataID = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msgdataid().data(), this->msgdataid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PacketBackupDataTag.MsgDataID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->msgdataid(), target);
  }

  // required string NickName = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PacketBackupDataTag.NickName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->nickname(), target);
  }

  // repeated string MediaIDList = 6;
  for (int i = 0, n = this->mediaidlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mediaidlist(i).data(), this->mediaidlist(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PacketBackupDataTag.MediaIDList");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->mediaidlist(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.PacketBackupDataTag)
  return target;
}

size_t PacketBackupDataTag::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.PacketBackupDataTag)
  size_t total_size = 0;

  if (has_bakchatname()) {
    // required string BakChatName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bakchatname());
  }

  if (has_msgdataid()) {
    // required string MsgDataID = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msgdataid());
  }

  if (has_nickname()) {
    // required string NickName = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nickname());
  }

  if (has_starttime()) {
    // required int64 StartTime = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->starttime());
  }

  if (has_endtime()) {
    // required int64 EndTime = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->endtime());
  }

  return total_size;
}
size_t PacketBackupDataTag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.PacketBackupDataTag)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string BakChatName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bakchatname());

    // required string MsgDataID = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msgdataid());

    // required string NickName = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nickname());

    // required int64 StartTime = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->starttime());

    // required int64 EndTime = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->endtime());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string MediaIDList = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->mediaidlist_size());
  for (int i = 0, n = this->mediaidlist_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->mediaidlist(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PacketBackupDataTag::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.PacketBackupDataTag)
  GOOGLE_DCHECK_NE(&from, this);
  const PacketBackupDataTag* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PacketBackupDataTag>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.PacketBackupDataTag)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.PacketBackupDataTag)
    MergeFrom(*source);
  }
}

void PacketBackupDataTag::MergeFrom(const PacketBackupDataTag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.PacketBackupDataTag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mediaidlist_.MergeFrom(from.mediaidlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_bakchatname();
      bakchatname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bakchatname_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_msgdataid();
      msgdataid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msgdataid_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_nickname();
      nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
    }
    if (cached_has_bits & 0x00000008u) {
      starttime_ = from.starttime_;
    }
    if (cached_has_bits & 0x00000010u) {
      endtime_ = from.endtime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PacketBackupDataTag::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.PacketBackupDataTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PacketBackupDataTag::CopyFrom(const PacketBackupDataTag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.PacketBackupDataTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketBackupDataTag::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void PacketBackupDataTag::Swap(PacketBackupDataTag* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PacketBackupDataTag::InternalSwap(PacketBackupDataTag* other) {
  mediaidlist_.InternalSwap(&other->mediaidlist_);
  bakchatname_.Swap(&other->bakchatname_);
  msgdataid_.Swap(&other->msgdataid_);
  nickname_.Swap(&other->nickname_);
  std::swap(starttime_, other->starttime_);
  std::swap(endtime_, other->endtime_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PacketBackupDataTag::GetMetadata() const {
  protobuf_mmbackup_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbackup_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PacketBackupDataTag

// required string BakChatName = 1;
bool PacketBackupDataTag::has_bakchatname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PacketBackupDataTag::set_has_bakchatname() {
  _has_bits_[0] |= 0x00000001u;
}
void PacketBackupDataTag::clear_has_bakchatname() {
  _has_bits_[0] &= ~0x00000001u;
}
void PacketBackupDataTag::clear_bakchatname() {
  bakchatname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bakchatname();
}
const ::std::string& PacketBackupDataTag::bakchatname() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketBackupDataTag.BakChatName)
  return bakchatname_.GetNoArena();
}
void PacketBackupDataTag::set_bakchatname(const ::std::string& value) {
  set_has_bakchatname();
  bakchatname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.PacketBackupDataTag.BakChatName)
}
#if LANG_CXX11
void PacketBackupDataTag::set_bakchatname(::std::string&& value) {
  set_has_bakchatname();
  bakchatname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.PacketBackupDataTag.BakChatName)
}
#endif
void PacketBackupDataTag::set_bakchatname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bakchatname();
  bakchatname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.PacketBackupDataTag.BakChatName)
}
void PacketBackupDataTag::set_bakchatname(const char* value, size_t size) {
  set_has_bakchatname();
  bakchatname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.PacketBackupDataTag.BakChatName)
}
::std::string* PacketBackupDataTag::mutable_bakchatname() {
  set_has_bakchatname();
  // @@protoc_insertion_point(field_mutable:micromsg.PacketBackupDataTag.BakChatName)
  return bakchatname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PacketBackupDataTag::release_bakchatname() {
  // @@protoc_insertion_point(field_release:micromsg.PacketBackupDataTag.BakChatName)
  clear_has_bakchatname();
  return bakchatname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PacketBackupDataTag::set_allocated_bakchatname(::std::string* bakchatname) {
  if (bakchatname != NULL) {
    set_has_bakchatname();
  } else {
    clear_has_bakchatname();
  }
  bakchatname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bakchatname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.PacketBackupDataTag.BakChatName)
}

// required int64 StartTime = 2;
bool PacketBackupDataTag::has_starttime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PacketBackupDataTag::set_has_starttime() {
  _has_bits_[0] |= 0x00000008u;
}
void PacketBackupDataTag::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000008u;
}
void PacketBackupDataTag::clear_starttime() {
  starttime_ = GOOGLE_LONGLONG(0);
  clear_has_starttime();
}
::google::protobuf::int64 PacketBackupDataTag::starttime() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketBackupDataTag.StartTime)
  return starttime_;
}
void PacketBackupDataTag::set_starttime(::google::protobuf::int64 value) {
  set_has_starttime();
  starttime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PacketBackupDataTag.StartTime)
}

// required int64 EndTime = 3;
bool PacketBackupDataTag::has_endtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PacketBackupDataTag::set_has_endtime() {
  _has_bits_[0] |= 0x00000010u;
}
void PacketBackupDataTag::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000010u;
}
void PacketBackupDataTag::clear_endtime() {
  endtime_ = GOOGLE_LONGLONG(0);
  clear_has_endtime();
}
::google::protobuf::int64 PacketBackupDataTag::endtime() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketBackupDataTag.EndTime)
  return endtime_;
}
void PacketBackupDataTag::set_endtime(::google::protobuf::int64 value) {
  set_has_endtime();
  endtime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PacketBackupDataTag.EndTime)
}

// required string MsgDataID = 4;
bool PacketBackupDataTag::has_msgdataid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PacketBackupDataTag::set_has_msgdataid() {
  _has_bits_[0] |= 0x00000002u;
}
void PacketBackupDataTag::clear_has_msgdataid() {
  _has_bits_[0] &= ~0x00000002u;
}
void PacketBackupDataTag::clear_msgdataid() {
  msgdataid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msgdataid();
}
const ::std::string& PacketBackupDataTag::msgdataid() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketBackupDataTag.MsgDataID)
  return msgdataid_.GetNoArena();
}
void PacketBackupDataTag::set_msgdataid(const ::std::string& value) {
  set_has_msgdataid();
  msgdataid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.PacketBackupDataTag.MsgDataID)
}
#if LANG_CXX11
void PacketBackupDataTag::set_msgdataid(::std::string&& value) {
  set_has_msgdataid();
  msgdataid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.PacketBackupDataTag.MsgDataID)
}
#endif
void PacketBackupDataTag::set_msgdataid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msgdataid();
  msgdataid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.PacketBackupDataTag.MsgDataID)
}
void PacketBackupDataTag::set_msgdataid(const char* value, size_t size) {
  set_has_msgdataid();
  msgdataid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.PacketBackupDataTag.MsgDataID)
}
::std::string* PacketBackupDataTag::mutable_msgdataid() {
  set_has_msgdataid();
  // @@protoc_insertion_point(field_mutable:micromsg.PacketBackupDataTag.MsgDataID)
  return msgdataid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PacketBackupDataTag::release_msgdataid() {
  // @@protoc_insertion_point(field_release:micromsg.PacketBackupDataTag.MsgDataID)
  clear_has_msgdataid();
  return msgdataid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PacketBackupDataTag::set_allocated_msgdataid(::std::string* msgdataid) {
  if (msgdataid != NULL) {
    set_has_msgdataid();
  } else {
    clear_has_msgdataid();
  }
  msgdataid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgdataid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.PacketBackupDataTag.MsgDataID)
}

// required string NickName = 5;
bool PacketBackupDataTag::has_nickname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PacketBackupDataTag::set_has_nickname() {
  _has_bits_[0] |= 0x00000004u;
}
void PacketBackupDataTag::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000004u;
}
void PacketBackupDataTag::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
const ::std::string& PacketBackupDataTag::nickname() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketBackupDataTag.NickName)
  return nickname_.GetNoArena();
}
void PacketBackupDataTag::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.PacketBackupDataTag.NickName)
}
#if LANG_CXX11
void PacketBackupDataTag::set_nickname(::std::string&& value) {
  set_has_nickname();
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.PacketBackupDataTag.NickName)
}
#endif
void PacketBackupDataTag::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.PacketBackupDataTag.NickName)
}
void PacketBackupDataTag::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.PacketBackupDataTag.NickName)
}
::std::string* PacketBackupDataTag::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:micromsg.PacketBackupDataTag.NickName)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PacketBackupDataTag::release_nickname() {
  // @@protoc_insertion_point(field_release:micromsg.PacketBackupDataTag.NickName)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PacketBackupDataTag::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.PacketBackupDataTag.NickName)
}

// repeated string MediaIDList = 6;
int PacketBackupDataTag::mediaidlist_size() const {
  return mediaidlist_.size();
}
void PacketBackupDataTag::clear_mediaidlist() {
  mediaidlist_.Clear();
}
const ::std::string& PacketBackupDataTag::mediaidlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.PacketBackupDataTag.MediaIDList)
  return mediaidlist_.Get(index);
}
::std::string* PacketBackupDataTag::mutable_mediaidlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.PacketBackupDataTag.MediaIDList)
  return mediaidlist_.Mutable(index);
}
void PacketBackupDataTag::set_mediaidlist(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:micromsg.PacketBackupDataTag.MediaIDList)
  mediaidlist_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void PacketBackupDataTag::set_mediaidlist(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:micromsg.PacketBackupDataTag.MediaIDList)
  mediaidlist_.Mutable(index)->assign(std::move(value));
}
#endif
void PacketBackupDataTag::set_mediaidlist(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  mediaidlist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:micromsg.PacketBackupDataTag.MediaIDList)
}
void PacketBackupDataTag::set_mediaidlist(int index, const char* value, size_t size) {
  mediaidlist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:micromsg.PacketBackupDataTag.MediaIDList)
}
::std::string* PacketBackupDataTag::add_mediaidlist() {
  // @@protoc_insertion_point(field_add_mutable:micromsg.PacketBackupDataTag.MediaIDList)
  return mediaidlist_.Add();
}
void PacketBackupDataTag::add_mediaidlist(const ::std::string& value) {
  mediaidlist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:micromsg.PacketBackupDataTag.MediaIDList)
}
#if LANG_CXX11
void PacketBackupDataTag::add_mediaidlist(::std::string&& value) {
  mediaidlist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:micromsg.PacketBackupDataTag.MediaIDList)
}
#endif
void PacketBackupDataTag::add_mediaidlist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  mediaidlist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:micromsg.PacketBackupDataTag.MediaIDList)
}
void PacketBackupDataTag::add_mediaidlist(const char* value, size_t size) {
  mediaidlist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:micromsg.PacketBackupDataTag.MediaIDList)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
PacketBackupDataTag::mediaidlist() const {
  // @@protoc_insertion_point(field_list:micromsg.PacketBackupDataTag.MediaIDList)
  return mediaidlist_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
PacketBackupDataTag::mutable_mediaidlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.PacketBackupDataTag.MediaIDList)
  return &mediaidlist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PacketBackupDataTagResponse::kBakChatNameFieldNumber;
const int PacketBackupDataTagResponse::kStartTimeFieldNumber;
const int PacketBackupDataTagResponse::kEndTimeFieldNumber;
const int PacketBackupDataTagResponse::kMsgDataIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PacketBackupDataTagResponse::PacketBackupDataTagResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbackup_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.PacketBackupDataTagResponse)
}
PacketBackupDataTagResponse::PacketBackupDataTagResponse(const PacketBackupDataTagResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bakchatname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bakchatname()) {
    bakchatname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bakchatname_);
  }
  msgdataid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_msgdataid()) {
    msgdataid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msgdataid_);
  }
  ::memcpy(&starttime_, &from.starttime_,
    reinterpret_cast<char*>(&endtime_) -
    reinterpret_cast<char*>(&starttime_) + sizeof(endtime_));
  // @@protoc_insertion_point(copy_constructor:micromsg.PacketBackupDataTagResponse)
}

void PacketBackupDataTagResponse::SharedCtor() {
  _cached_size_ = 0;
  bakchatname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgdataid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&starttime_, 0, reinterpret_cast<char*>(&endtime_) -
    reinterpret_cast<char*>(&starttime_) + sizeof(endtime_));
}

PacketBackupDataTagResponse::~PacketBackupDataTagResponse() {
  // @@protoc_insertion_point(destructor:micromsg.PacketBackupDataTagResponse)
  SharedDtor();
}

void PacketBackupDataTagResponse::SharedDtor() {
  bakchatname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgdataid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PacketBackupDataTagResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PacketBackupDataTagResponse::descriptor() {
  protobuf_mmbackup_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbackup_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PacketBackupDataTagResponse& PacketBackupDataTagResponse::default_instance() {
  protobuf_mmbackup_2eproto::InitDefaults();
  return *internal_default_instance();
}

PacketBackupDataTagResponse* PacketBackupDataTagResponse::New(::google::protobuf::Arena* arena) const {
  PacketBackupDataTagResponse* n = new PacketBackupDataTagResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PacketBackupDataTagResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.PacketBackupDataTagResponse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_bakchatname()) {
      GOOGLE_DCHECK(!bakchatname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bakchatname_.UnsafeRawStringPointer())->clear();
    }
    if (has_msgdataid()) {
      GOOGLE_DCHECK(!msgdataid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*msgdataid_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&starttime_, 0, reinterpret_cast<char*>(&endtime_) -
      reinterpret_cast<char*>(&starttime_) + sizeof(endtime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PacketBackupDataTagResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.PacketBackupDataTagResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string BakChatName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bakchatname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bakchatname().data(), this->bakchatname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.PacketBackupDataTagResponse.BakChatName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 StartTime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_starttime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &starttime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 EndTime = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_endtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string MsgDataID = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgdataid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msgdataid().data(), this->msgdataid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.PacketBackupDataTagResponse.MsgDataID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.PacketBackupDataTagResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.PacketBackupDataTagResponse)
  return false;
#undef DO_
}

void PacketBackupDataTagResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.PacketBackupDataTagResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string BakChatName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bakchatname().data(), this->bakchatname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PacketBackupDataTagResponse.BakChatName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->bakchatname(), output);
  }

  // required int64 StartTime = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->starttime(), output);
  }

  // required int64 EndTime = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->endtime(), output);
  }

  // required string MsgDataID = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msgdataid().data(), this->msgdataid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PacketBackupDataTagResponse.MsgDataID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->msgdataid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.PacketBackupDataTagResponse)
}

::google::protobuf::uint8* PacketBackupDataTagResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.PacketBackupDataTagResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string BakChatName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bakchatname().data(), this->bakchatname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PacketBackupDataTagResponse.BakChatName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->bakchatname(), target);
  }

  // required int64 StartTime = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->starttime(), target);
  }

  // required int64 EndTime = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->endtime(), target);
  }

  // required string MsgDataID = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msgdataid().data(), this->msgdataid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PacketBackupDataTagResponse.MsgDataID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->msgdataid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.PacketBackupDataTagResponse)
  return target;
}

size_t PacketBackupDataTagResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.PacketBackupDataTagResponse)
  size_t total_size = 0;

  if (has_bakchatname()) {
    // required string BakChatName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bakchatname());
  }

  if (has_msgdataid()) {
    // required string MsgDataID = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msgdataid());
  }

  if (has_starttime()) {
    // required int64 StartTime = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->starttime());
  }

  if (has_endtime()) {
    // required int64 EndTime = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->endtime());
  }

  return total_size;
}
size_t PacketBackupDataTagResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.PacketBackupDataTagResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string BakChatName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bakchatname());

    // required string MsgDataID = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msgdataid());

    // required int64 StartTime = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->starttime());

    // required int64 EndTime = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->endtime());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PacketBackupDataTagResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.PacketBackupDataTagResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PacketBackupDataTagResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PacketBackupDataTagResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.PacketBackupDataTagResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.PacketBackupDataTagResponse)
    MergeFrom(*source);
  }
}

void PacketBackupDataTagResponse::MergeFrom(const PacketBackupDataTagResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.PacketBackupDataTagResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_bakchatname();
      bakchatname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bakchatname_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_msgdataid();
      msgdataid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msgdataid_);
    }
    if (cached_has_bits & 0x00000004u) {
      starttime_ = from.starttime_;
    }
    if (cached_has_bits & 0x00000008u) {
      endtime_ = from.endtime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PacketBackupDataTagResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.PacketBackupDataTagResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PacketBackupDataTagResponse::CopyFrom(const PacketBackupDataTagResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.PacketBackupDataTagResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketBackupDataTagResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void PacketBackupDataTagResponse::Swap(PacketBackupDataTagResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PacketBackupDataTagResponse::InternalSwap(PacketBackupDataTagResponse* other) {
  bakchatname_.Swap(&other->bakchatname_);
  msgdataid_.Swap(&other->msgdataid_);
  std::swap(starttime_, other->starttime_);
  std::swap(endtime_, other->endtime_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PacketBackupDataTagResponse::GetMetadata() const {
  protobuf_mmbackup_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbackup_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PacketBackupDataTagResponse

// required string BakChatName = 1;
bool PacketBackupDataTagResponse::has_bakchatname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PacketBackupDataTagResponse::set_has_bakchatname() {
  _has_bits_[0] |= 0x00000001u;
}
void PacketBackupDataTagResponse::clear_has_bakchatname() {
  _has_bits_[0] &= ~0x00000001u;
}
void PacketBackupDataTagResponse::clear_bakchatname() {
  bakchatname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bakchatname();
}
const ::std::string& PacketBackupDataTagResponse::bakchatname() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketBackupDataTagResponse.BakChatName)
  return bakchatname_.GetNoArena();
}
void PacketBackupDataTagResponse::set_bakchatname(const ::std::string& value) {
  set_has_bakchatname();
  bakchatname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.PacketBackupDataTagResponse.BakChatName)
}
#if LANG_CXX11
void PacketBackupDataTagResponse::set_bakchatname(::std::string&& value) {
  set_has_bakchatname();
  bakchatname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.PacketBackupDataTagResponse.BakChatName)
}
#endif
void PacketBackupDataTagResponse::set_bakchatname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bakchatname();
  bakchatname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.PacketBackupDataTagResponse.BakChatName)
}
void PacketBackupDataTagResponse::set_bakchatname(const char* value, size_t size) {
  set_has_bakchatname();
  bakchatname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.PacketBackupDataTagResponse.BakChatName)
}
::std::string* PacketBackupDataTagResponse::mutable_bakchatname() {
  set_has_bakchatname();
  // @@protoc_insertion_point(field_mutable:micromsg.PacketBackupDataTagResponse.BakChatName)
  return bakchatname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PacketBackupDataTagResponse::release_bakchatname() {
  // @@protoc_insertion_point(field_release:micromsg.PacketBackupDataTagResponse.BakChatName)
  clear_has_bakchatname();
  return bakchatname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PacketBackupDataTagResponse::set_allocated_bakchatname(::std::string* bakchatname) {
  if (bakchatname != NULL) {
    set_has_bakchatname();
  } else {
    clear_has_bakchatname();
  }
  bakchatname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bakchatname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.PacketBackupDataTagResponse.BakChatName)
}

// required int64 StartTime = 2;
bool PacketBackupDataTagResponse::has_starttime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PacketBackupDataTagResponse::set_has_starttime() {
  _has_bits_[0] |= 0x00000004u;
}
void PacketBackupDataTagResponse::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000004u;
}
void PacketBackupDataTagResponse::clear_starttime() {
  starttime_ = GOOGLE_LONGLONG(0);
  clear_has_starttime();
}
::google::protobuf::int64 PacketBackupDataTagResponse::starttime() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketBackupDataTagResponse.StartTime)
  return starttime_;
}
void PacketBackupDataTagResponse::set_starttime(::google::protobuf::int64 value) {
  set_has_starttime();
  starttime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PacketBackupDataTagResponse.StartTime)
}

// required int64 EndTime = 3;
bool PacketBackupDataTagResponse::has_endtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PacketBackupDataTagResponse::set_has_endtime() {
  _has_bits_[0] |= 0x00000008u;
}
void PacketBackupDataTagResponse::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000008u;
}
void PacketBackupDataTagResponse::clear_endtime() {
  endtime_ = GOOGLE_LONGLONG(0);
  clear_has_endtime();
}
::google::protobuf::int64 PacketBackupDataTagResponse::endtime() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketBackupDataTagResponse.EndTime)
  return endtime_;
}
void PacketBackupDataTagResponse::set_endtime(::google::protobuf::int64 value) {
  set_has_endtime();
  endtime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PacketBackupDataTagResponse.EndTime)
}

// required string MsgDataID = 4;
bool PacketBackupDataTagResponse::has_msgdataid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PacketBackupDataTagResponse::set_has_msgdataid() {
  _has_bits_[0] |= 0x00000002u;
}
void PacketBackupDataTagResponse::clear_has_msgdataid() {
  _has_bits_[0] &= ~0x00000002u;
}
void PacketBackupDataTagResponse::clear_msgdataid() {
  msgdataid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msgdataid();
}
const ::std::string& PacketBackupDataTagResponse::msgdataid() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketBackupDataTagResponse.MsgDataID)
  return msgdataid_.GetNoArena();
}
void PacketBackupDataTagResponse::set_msgdataid(const ::std::string& value) {
  set_has_msgdataid();
  msgdataid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.PacketBackupDataTagResponse.MsgDataID)
}
#if LANG_CXX11
void PacketBackupDataTagResponse::set_msgdataid(::std::string&& value) {
  set_has_msgdataid();
  msgdataid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.PacketBackupDataTagResponse.MsgDataID)
}
#endif
void PacketBackupDataTagResponse::set_msgdataid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msgdataid();
  msgdataid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.PacketBackupDataTagResponse.MsgDataID)
}
void PacketBackupDataTagResponse::set_msgdataid(const char* value, size_t size) {
  set_has_msgdataid();
  msgdataid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.PacketBackupDataTagResponse.MsgDataID)
}
::std::string* PacketBackupDataTagResponse::mutable_msgdataid() {
  set_has_msgdataid();
  // @@protoc_insertion_point(field_mutable:micromsg.PacketBackupDataTagResponse.MsgDataID)
  return msgdataid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PacketBackupDataTagResponse::release_msgdataid() {
  // @@protoc_insertion_point(field_release:micromsg.PacketBackupDataTagResponse.MsgDataID)
  clear_has_msgdataid();
  return msgdataid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PacketBackupDataTagResponse::set_allocated_msgdataid(::std::string* msgdataid) {
  if (msgdataid != NULL) {
    set_has_msgdataid();
  } else {
    clear_has_msgdataid();
  }
  msgdataid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgdataid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.PacketBackupDataTagResponse.MsgDataID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BackupReportItem::kBakChatNameFieldNumber;
const int BackupReportItem::kMsgCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BackupReportItem::BackupReportItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbackup_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BackupReportItem)
}
BackupReportItem::BackupReportItem(const BackupReportItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bakchatname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bakchatname()) {
    bakchatname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bakchatname_);
  }
  msgcount_ = from.msgcount_;
  // @@protoc_insertion_point(copy_constructor:micromsg.BackupReportItem)
}

void BackupReportItem::SharedCtor() {
  _cached_size_ = 0;
  bakchatname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgcount_ = 0u;
}

BackupReportItem::~BackupReportItem() {
  // @@protoc_insertion_point(destructor:micromsg.BackupReportItem)
  SharedDtor();
}

void BackupReportItem::SharedDtor() {
  bakchatname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BackupReportItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BackupReportItem::descriptor() {
  protobuf_mmbackup_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbackup_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BackupReportItem& BackupReportItem::default_instance() {
  protobuf_mmbackup_2eproto::InitDefaults();
  return *internal_default_instance();
}

BackupReportItem* BackupReportItem::New(::google::protobuf::Arena* arena) const {
  BackupReportItem* n = new BackupReportItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BackupReportItem::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BackupReportItem)
  if (has_bakchatname()) {
    GOOGLE_DCHECK(!bakchatname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*bakchatname_.UnsafeRawStringPointer())->clear();
  }
  msgcount_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BackupReportItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BackupReportItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string BakChatName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bakchatname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bakchatname().data(), this->bakchatname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BackupReportItem.BakChatName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 MsgCount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_msgcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BackupReportItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BackupReportItem)
  return false;
#undef DO_
}

void BackupReportItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BackupReportItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string BakChatName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bakchatname().data(), this->bakchatname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BackupReportItem.BakChatName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->bakchatname(), output);
  }

  // required uint32 MsgCount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->msgcount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BackupReportItem)
}

::google::protobuf::uint8* BackupReportItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BackupReportItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string BakChatName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bakchatname().data(), this->bakchatname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BackupReportItem.BakChatName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->bakchatname(), target);
  }

  // required uint32 MsgCount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->msgcount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BackupReportItem)
  return target;
}

size_t BackupReportItem::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.BackupReportItem)
  size_t total_size = 0;

  if (has_bakchatname()) {
    // required string BakChatName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bakchatname());
  }

  if (has_msgcount()) {
    // required uint32 MsgCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msgcount());
  }

  return total_size;
}
size_t BackupReportItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BackupReportItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string BakChatName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bakchatname());

    // required uint32 MsgCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msgcount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BackupReportItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BackupReportItem)
  GOOGLE_DCHECK_NE(&from, this);
  const BackupReportItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BackupReportItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BackupReportItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BackupReportItem)
    MergeFrom(*source);
  }
}

void BackupReportItem::MergeFrom(const BackupReportItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BackupReportItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_bakchatname();
      bakchatname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bakchatname_);
    }
    if (cached_has_bits & 0x00000002u) {
      msgcount_ = from.msgcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BackupReportItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BackupReportItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BackupReportItem::CopyFrom(const BackupReportItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BackupReportItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackupReportItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void BackupReportItem::Swap(BackupReportItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BackupReportItem::InternalSwap(BackupReportItem* other) {
  bakchatname_.Swap(&other->bakchatname_);
  std::swap(msgcount_, other->msgcount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BackupReportItem::GetMetadata() const {
  protobuf_mmbackup_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbackup_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BackupReportItem

// required string BakChatName = 1;
bool BackupReportItem::has_bakchatname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BackupReportItem::set_has_bakchatname() {
  _has_bits_[0] |= 0x00000001u;
}
void BackupReportItem::clear_has_bakchatname() {
  _has_bits_[0] &= ~0x00000001u;
}
void BackupReportItem::clear_bakchatname() {
  bakchatname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bakchatname();
}
const ::std::string& BackupReportItem::bakchatname() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupReportItem.BakChatName)
  return bakchatname_.GetNoArena();
}
void BackupReportItem::set_bakchatname(const ::std::string& value) {
  set_has_bakchatname();
  bakchatname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BackupReportItem.BakChatName)
}
#if LANG_CXX11
void BackupReportItem::set_bakchatname(::std::string&& value) {
  set_has_bakchatname();
  bakchatname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BackupReportItem.BakChatName)
}
#endif
void BackupReportItem::set_bakchatname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bakchatname();
  bakchatname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BackupReportItem.BakChatName)
}
void BackupReportItem::set_bakchatname(const char* value, size_t size) {
  set_has_bakchatname();
  bakchatname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BackupReportItem.BakChatName)
}
::std::string* BackupReportItem::mutable_bakchatname() {
  set_has_bakchatname();
  // @@protoc_insertion_point(field_mutable:micromsg.BackupReportItem.BakChatName)
  return bakchatname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BackupReportItem::release_bakchatname() {
  // @@protoc_insertion_point(field_release:micromsg.BackupReportItem.BakChatName)
  clear_has_bakchatname();
  return bakchatname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BackupReportItem::set_allocated_bakchatname(::std::string* bakchatname) {
  if (bakchatname != NULL) {
    set_has_bakchatname();
  } else {
    clear_has_bakchatname();
  }
  bakchatname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bakchatname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BackupReportItem.BakChatName)
}

// required uint32 MsgCount = 2;
bool BackupReportItem::has_msgcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BackupReportItem::set_has_msgcount() {
  _has_bits_[0] |= 0x00000002u;
}
void BackupReportItem::clear_has_msgcount() {
  _has_bits_[0] &= ~0x00000002u;
}
void BackupReportItem::clear_msgcount() {
  msgcount_ = 0u;
  clear_has_msgcount();
}
::google::protobuf::uint32 BackupReportItem::msgcount() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupReportItem.MsgCount)
  return msgcount_;
}
void BackupReportItem::set_msgcount(::google::protobuf::uint32 value) {
  set_has_msgcount();
  msgcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BackupReportItem.MsgCount)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BackupReportList::kCountFieldNumber;
const int BackupReportList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BackupReportList::BackupReportList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbackup_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BackupReportList)
}
BackupReportList::BackupReportList(const BackupReportList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:micromsg.BackupReportList)
}

void BackupReportList::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0u;
}

BackupReportList::~BackupReportList() {
  // @@protoc_insertion_point(destructor:micromsg.BackupReportList)
  SharedDtor();
}

void BackupReportList::SharedDtor() {
}

void BackupReportList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BackupReportList::descriptor() {
  protobuf_mmbackup_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbackup_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BackupReportList& BackupReportList::default_instance() {
  protobuf_mmbackup_2eproto::InitDefaults();
  return *internal_default_instance();
}

BackupReportList* BackupReportList::New(::google::protobuf::Arena* arena) const {
  BackupReportList* n = new BackupReportList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BackupReportList::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BackupReportList)
  list_.Clear();
  count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BackupReportList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BackupReportList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.BackupReportItem List = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BackupReportList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BackupReportList)
  return false;
#undef DO_
}

void BackupReportList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BackupReportList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Count = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count(), output);
  }

  // repeated .micromsg.BackupReportItem List = 2;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BackupReportList)
}

::google::protobuf::uint8* BackupReportList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BackupReportList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->count(), target);
  }

  // repeated .micromsg.BackupReportItem List = 2;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->list(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BackupReportList)
  return target;
}

size_t BackupReportList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BackupReportList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 Count = 1;
  if (has_count()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }
  // repeated .micromsg.BackupReportItem List = 2;
  {
    unsigned int count = this->list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BackupReportList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BackupReportList)
  GOOGLE_DCHECK_NE(&from, this);
  const BackupReportList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BackupReportList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BackupReportList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BackupReportList)
    MergeFrom(*source);
  }
}

void BackupReportList::MergeFrom(const BackupReportList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BackupReportList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  if (from.has_count()) {
    set_count(from.count());
  }
}

void BackupReportList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BackupReportList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BackupReportList::CopyFrom(const BackupReportList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BackupReportList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackupReportList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void BackupReportList::Swap(BackupReportList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BackupReportList::InternalSwap(BackupReportList* other) {
  list_.InternalSwap(&other->list_);
  std::swap(count_, other->count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BackupReportList::GetMetadata() const {
  protobuf_mmbackup_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbackup_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BackupReportList

// required uint32 Count = 1;
bool BackupReportList::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BackupReportList::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
void BackupReportList::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
void BackupReportList::clear_count() {
  count_ = 0u;
  clear_has_count();
}
::google::protobuf::uint32 BackupReportList::count() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupReportList.Count)
  return count_;
}
void BackupReportList::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BackupReportList.Count)
}

// repeated .micromsg.BackupReportItem List = 2;
int BackupReportList::list_size() const {
  return list_.size();
}
void BackupReportList::clear_list() {
  list_.Clear();
}
const ::micromsg::BackupReportItem& BackupReportList::list(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.BackupReportList.List)
  return list_.Get(index);
}
::micromsg::BackupReportItem* BackupReportList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.BackupReportList.List)
  return list_.Mutable(index);
}
::micromsg::BackupReportItem* BackupReportList::add_list() {
  // @@protoc_insertion_point(field_add:micromsg.BackupReportList.List)
  return list_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::BackupReportItem >*
BackupReportList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.BackupReportList.List)
  return &list_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::BackupReportItem >&
BackupReportList::list() const {
  // @@protoc_insertion_point(field_list:micromsg.BackupReportList.List)
  return list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BackupFinishRequest::kIDFieldNumber;
const int BackupFinishRequest::kDataFieldNumber;
const int BackupFinishRequest::kServerSessionCountFieldNumber;
const int BackupFinishRequest::kServerMessageCountFieldNumber;
const int BackupFinishRequest::kServerFileCountFieldNumber;
const int BackupFinishRequest::kCalculateSizeFieldNumber;
const int BackupFinishRequest::kServerDataPushSizeFieldNumber;
const int BackupFinishRequest::kServerReadDBTotalTimeFieldNumber;
const int BackupFinishRequest::kServerReadFileTotalTimeFieldNumber;
const int BackupFinishRequest::kServerCostTotalTimeFieldNumber;
const int BackupFinishRequest::kServerVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BackupFinishRequest::BackupFinishRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbackup_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BackupFinishRequest)
}
BackupFinishRequest::BackupFinishRequest(const BackupFinishRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_data()) {
    data_ = new ::micromsg::BackupReportList(*from.data_);
  } else {
    data_ = NULL;
  }
  ::memcpy(&serversessioncount_, &from.serversessioncount_,
    reinterpret_cast<char*>(&serverversion_) -
    reinterpret_cast<char*>(&serversessioncount_) + sizeof(serverversion_));
  // @@protoc_insertion_point(copy_constructor:micromsg.BackupFinishRequest)
}

void BackupFinishRequest::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_, 0, reinterpret_cast<char*>(&serverversion_) -
    reinterpret_cast<char*>(&data_) + sizeof(serverversion_));
}

BackupFinishRequest::~BackupFinishRequest() {
  // @@protoc_insertion_point(destructor:micromsg.BackupFinishRequest)
  SharedDtor();
}

void BackupFinishRequest::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete data_;
  }
}

void BackupFinishRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BackupFinishRequest::descriptor() {
  protobuf_mmbackup_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbackup_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BackupFinishRequest& BackupFinishRequest::default_instance() {
  protobuf_mmbackup_2eproto::InitDefaults();
  return *internal_default_instance();
}

BackupFinishRequest* BackupFinishRequest::New(::google::protobuf::Arena* arena) const {
  BackupFinishRequest* n = new BackupFinishRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BackupFinishRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BackupFinishRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_id()) {
      GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*id_.UnsafeRawStringPointer())->clear();
    }
    if (has_data()) {
      GOOGLE_DCHECK(data_ != NULL);
      data_->::micromsg::BackupReportList::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&serversessioncount_, 0, reinterpret_cast<char*>(&serverreaddbtotaltime_) -
      reinterpret_cast<char*>(&serversessioncount_) + sizeof(serverreaddbtotaltime_));
  }
  if (_has_bits_[8 / 32] & 1792u) {
    ::memset(&serverreadfiletotaltime_, 0, reinterpret_cast<char*>(&serverversion_) -
      reinterpret_cast<char*>(&serverreadfiletotaltime_) + sizeof(serverversion_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BackupFinishRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BackupFinishRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BackupFinishRequest.ID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.BackupReportList Data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ServerSessionCount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_serversessioncount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serversessioncount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ServerMessageCount = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_servermessagecount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &servermessagecount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ServerFileCount = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_serverfilecount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverfilecount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 CalculateSize = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_calculatesize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &calculatesize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ServerDataPushSize = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_serverdatapushsize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverdatapushsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ServerReadDBTotalTime = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_serverreaddbtotaltime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverreaddbtotaltime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ServerReadFileTotalTime = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_serverreadfiletotaltime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverreadfiletotaltime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ServerCostTotalTime = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_servercosttotaltime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &servercosttotaltime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ServerVersion = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_serverversion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BackupFinishRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BackupFinishRequest)
  return false;
#undef DO_
}

void BackupFinishRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BackupFinishRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string ID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BackupFinishRequest.ID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional .micromsg.BackupReportList Data = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->data_, output);
  }

  // optional uint32 ServerSessionCount = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->serversessioncount(), output);
  }

  // optional uint32 ServerMessageCount = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->servermessagecount(), output);
  }

  // optional uint32 ServerFileCount = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->serverfilecount(), output);
  }

  // optional uint32 CalculateSize = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->calculatesize(), output);
  }

  // optional uint32 ServerDataPushSize = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->serverdatapushsize(), output);
  }

  // optional uint32 ServerReadDBTotalTime = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->serverreaddbtotaltime(), output);
  }

  // optional uint32 ServerReadFileTotalTime = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->serverreadfiletotaltime(), output);
  }

  // optional uint32 ServerCostTotalTime = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->servercosttotaltime(), output);
  }

  // optional uint32 ServerVersion = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->serverversion(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BackupFinishRequest)
}

::google::protobuf::uint8* BackupFinishRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BackupFinishRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string ID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BackupFinishRequest.ID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional .micromsg.BackupReportList Data = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->data_, deterministic, target);
  }

  // optional uint32 ServerSessionCount = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->serversessioncount(), target);
  }

  // optional uint32 ServerMessageCount = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->servermessagecount(), target);
  }

  // optional uint32 ServerFileCount = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->serverfilecount(), target);
  }

  // optional uint32 CalculateSize = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->calculatesize(), target);
  }

  // optional uint32 ServerDataPushSize = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->serverdatapushsize(), target);
  }

  // optional uint32 ServerReadDBTotalTime = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->serverreaddbtotaltime(), target);
  }

  // optional uint32 ServerReadFileTotalTime = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->serverreadfiletotaltime(), target);
  }

  // optional uint32 ServerCostTotalTime = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->servercosttotaltime(), target);
  }

  // optional uint32 ServerVersion = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->serverversion(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BackupFinishRequest)
  return target;
}

size_t BackupFinishRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BackupFinishRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required string ID = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }
  if (_has_bits_[0 / 32] & 254u) {
    // optional .micromsg.BackupReportList Data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->data_);
    }

    // optional uint32 ServerSessionCount = 3;
    if (has_serversessioncount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serversessioncount());
    }

    // optional uint32 ServerMessageCount = 4;
    if (has_servermessagecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->servermessagecount());
    }

    // optional uint32 ServerFileCount = 5;
    if (has_serverfilecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverfilecount());
    }

    // optional uint32 CalculateSize = 6;
    if (has_calculatesize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->calculatesize());
    }

    // optional uint32 ServerDataPushSize = 7;
    if (has_serverdatapushsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverdatapushsize());
    }

    // optional uint32 ServerReadDBTotalTime = 8;
    if (has_serverreaddbtotaltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverreaddbtotaltime());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional uint32 ServerReadFileTotalTime = 9;
    if (has_serverreadfiletotaltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverreadfiletotaltime());
    }

    // optional uint32 ServerCostTotalTime = 10;
    if (has_servercosttotaltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->servercosttotaltime());
    }

    // optional uint32 ServerVersion = 11;
    if (has_serverversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverversion());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BackupFinishRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BackupFinishRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BackupFinishRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BackupFinishRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BackupFinishRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BackupFinishRequest)
    MergeFrom(*source);
  }
}

void BackupFinishRequest::MergeFrom(const BackupFinishRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BackupFinishRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_data()->::micromsg::BackupReportList::MergeFrom(from.data());
    }
    if (cached_has_bits & 0x00000004u) {
      serversessioncount_ = from.serversessioncount_;
    }
    if (cached_has_bits & 0x00000008u) {
      servermessagecount_ = from.servermessagecount_;
    }
    if (cached_has_bits & 0x00000010u) {
      serverfilecount_ = from.serverfilecount_;
    }
    if (cached_has_bits & 0x00000020u) {
      calculatesize_ = from.calculatesize_;
    }
    if (cached_has_bits & 0x00000040u) {
      serverdatapushsize_ = from.serverdatapushsize_;
    }
    if (cached_has_bits & 0x00000080u) {
      serverreaddbtotaltime_ = from.serverreaddbtotaltime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      serverreadfiletotaltime_ = from.serverreadfiletotaltime_;
    }
    if (cached_has_bits & 0x00000200u) {
      servercosttotaltime_ = from.servercosttotaltime_;
    }
    if (cached_has_bits & 0x00000400u) {
      serverversion_ = from.serverversion_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BackupFinishRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BackupFinishRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BackupFinishRequest::CopyFrom(const BackupFinishRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BackupFinishRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackupFinishRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_data()) {
    if (!this->data_->IsInitialized()) return false;
  }
  return true;
}

void BackupFinishRequest::Swap(BackupFinishRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BackupFinishRequest::InternalSwap(BackupFinishRequest* other) {
  id_.Swap(&other->id_);
  std::swap(data_, other->data_);
  std::swap(serversessioncount_, other->serversessioncount_);
  std::swap(servermessagecount_, other->servermessagecount_);
  std::swap(serverfilecount_, other->serverfilecount_);
  std::swap(calculatesize_, other->calculatesize_);
  std::swap(serverdatapushsize_, other->serverdatapushsize_);
  std::swap(serverreaddbtotaltime_, other->serverreaddbtotaltime_);
  std::swap(serverreadfiletotaltime_, other->serverreadfiletotaltime_);
  std::swap(servercosttotaltime_, other->servercosttotaltime_);
  std::swap(serverversion_, other->serverversion_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BackupFinishRequest::GetMetadata() const {
  protobuf_mmbackup_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbackup_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BackupFinishRequest

// required string ID = 1;
bool BackupFinishRequest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BackupFinishRequest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void BackupFinishRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void BackupFinishRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
const ::std::string& BackupFinishRequest::id() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupFinishRequest.ID)
  return id_.GetNoArena();
}
void BackupFinishRequest::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BackupFinishRequest.ID)
}
#if LANG_CXX11
void BackupFinishRequest::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BackupFinishRequest.ID)
}
#endif
void BackupFinishRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BackupFinishRequest.ID)
}
void BackupFinishRequest::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BackupFinishRequest.ID)
}
::std::string* BackupFinishRequest::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:micromsg.BackupFinishRequest.ID)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BackupFinishRequest::release_id() {
  // @@protoc_insertion_point(field_release:micromsg.BackupFinishRequest.ID)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BackupFinishRequest::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BackupFinishRequest.ID)
}

// optional .micromsg.BackupReportList Data = 2;
bool BackupFinishRequest::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BackupFinishRequest::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
void BackupFinishRequest::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void BackupFinishRequest::clear_data() {
  if (data_ != NULL) data_->::micromsg::BackupReportList::Clear();
  clear_has_data();
}
const ::micromsg::BackupReportList& BackupFinishRequest::data() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupFinishRequest.Data)
  return data_ != NULL ? *data_
                         : *::micromsg::BackupReportList::internal_default_instance();
}
::micromsg::BackupReportList* BackupFinishRequest::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    data_ = new ::micromsg::BackupReportList;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BackupFinishRequest.Data)
  return data_;
}
::micromsg::BackupReportList* BackupFinishRequest::release_data() {
  // @@protoc_insertion_point(field_release:micromsg.BackupFinishRequest.Data)
  clear_has_data();
  ::micromsg::BackupReportList* temp = data_;
  data_ = NULL;
  return temp;
}
void BackupFinishRequest::set_allocated_data(::micromsg::BackupReportList* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BackupFinishRequest.Data)
}

// optional uint32 ServerSessionCount = 3;
bool BackupFinishRequest::has_serversessioncount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BackupFinishRequest::set_has_serversessioncount() {
  _has_bits_[0] |= 0x00000004u;
}
void BackupFinishRequest::clear_has_serversessioncount() {
  _has_bits_[0] &= ~0x00000004u;
}
void BackupFinishRequest::clear_serversessioncount() {
  serversessioncount_ = 0u;
  clear_has_serversessioncount();
}
::google::protobuf::uint32 BackupFinishRequest::serversessioncount() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupFinishRequest.ServerSessionCount)
  return serversessioncount_;
}
void BackupFinishRequest::set_serversessioncount(::google::protobuf::uint32 value) {
  set_has_serversessioncount();
  serversessioncount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BackupFinishRequest.ServerSessionCount)
}

// optional uint32 ServerMessageCount = 4;
bool BackupFinishRequest::has_servermessagecount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BackupFinishRequest::set_has_servermessagecount() {
  _has_bits_[0] |= 0x00000008u;
}
void BackupFinishRequest::clear_has_servermessagecount() {
  _has_bits_[0] &= ~0x00000008u;
}
void BackupFinishRequest::clear_servermessagecount() {
  servermessagecount_ = 0u;
  clear_has_servermessagecount();
}
::google::protobuf::uint32 BackupFinishRequest::servermessagecount() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupFinishRequest.ServerMessageCount)
  return servermessagecount_;
}
void BackupFinishRequest::set_servermessagecount(::google::protobuf::uint32 value) {
  set_has_servermessagecount();
  servermessagecount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BackupFinishRequest.ServerMessageCount)
}

// optional uint32 ServerFileCount = 5;
bool BackupFinishRequest::has_serverfilecount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BackupFinishRequest::set_has_serverfilecount() {
  _has_bits_[0] |= 0x00000010u;
}
void BackupFinishRequest::clear_has_serverfilecount() {
  _has_bits_[0] &= ~0x00000010u;
}
void BackupFinishRequest::clear_serverfilecount() {
  serverfilecount_ = 0u;
  clear_has_serverfilecount();
}
::google::protobuf::uint32 BackupFinishRequest::serverfilecount() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupFinishRequest.ServerFileCount)
  return serverfilecount_;
}
void BackupFinishRequest::set_serverfilecount(::google::protobuf::uint32 value) {
  set_has_serverfilecount();
  serverfilecount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BackupFinishRequest.ServerFileCount)
}

// optional uint32 CalculateSize = 6;
bool BackupFinishRequest::has_calculatesize() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BackupFinishRequest::set_has_calculatesize() {
  _has_bits_[0] |= 0x00000020u;
}
void BackupFinishRequest::clear_has_calculatesize() {
  _has_bits_[0] &= ~0x00000020u;
}
void BackupFinishRequest::clear_calculatesize() {
  calculatesize_ = 0u;
  clear_has_calculatesize();
}
::google::protobuf::uint32 BackupFinishRequest::calculatesize() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupFinishRequest.CalculateSize)
  return calculatesize_;
}
void BackupFinishRequest::set_calculatesize(::google::protobuf::uint32 value) {
  set_has_calculatesize();
  calculatesize_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BackupFinishRequest.CalculateSize)
}

// optional uint32 ServerDataPushSize = 7;
bool BackupFinishRequest::has_serverdatapushsize() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BackupFinishRequest::set_has_serverdatapushsize() {
  _has_bits_[0] |= 0x00000040u;
}
void BackupFinishRequest::clear_has_serverdatapushsize() {
  _has_bits_[0] &= ~0x00000040u;
}
void BackupFinishRequest::clear_serverdatapushsize() {
  serverdatapushsize_ = 0u;
  clear_has_serverdatapushsize();
}
::google::protobuf::uint32 BackupFinishRequest::serverdatapushsize() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupFinishRequest.ServerDataPushSize)
  return serverdatapushsize_;
}
void BackupFinishRequest::set_serverdatapushsize(::google::protobuf::uint32 value) {
  set_has_serverdatapushsize();
  serverdatapushsize_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BackupFinishRequest.ServerDataPushSize)
}

// optional uint32 ServerReadDBTotalTime = 8;
bool BackupFinishRequest::has_serverreaddbtotaltime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void BackupFinishRequest::set_has_serverreaddbtotaltime() {
  _has_bits_[0] |= 0x00000080u;
}
void BackupFinishRequest::clear_has_serverreaddbtotaltime() {
  _has_bits_[0] &= ~0x00000080u;
}
void BackupFinishRequest::clear_serverreaddbtotaltime() {
  serverreaddbtotaltime_ = 0u;
  clear_has_serverreaddbtotaltime();
}
::google::protobuf::uint32 BackupFinishRequest::serverreaddbtotaltime() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupFinishRequest.ServerReadDBTotalTime)
  return serverreaddbtotaltime_;
}
void BackupFinishRequest::set_serverreaddbtotaltime(::google::protobuf::uint32 value) {
  set_has_serverreaddbtotaltime();
  serverreaddbtotaltime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BackupFinishRequest.ServerReadDBTotalTime)
}

// optional uint32 ServerReadFileTotalTime = 9;
bool BackupFinishRequest::has_serverreadfiletotaltime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void BackupFinishRequest::set_has_serverreadfiletotaltime() {
  _has_bits_[0] |= 0x00000100u;
}
void BackupFinishRequest::clear_has_serverreadfiletotaltime() {
  _has_bits_[0] &= ~0x00000100u;
}
void BackupFinishRequest::clear_serverreadfiletotaltime() {
  serverreadfiletotaltime_ = 0u;
  clear_has_serverreadfiletotaltime();
}
::google::protobuf::uint32 BackupFinishRequest::serverreadfiletotaltime() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupFinishRequest.ServerReadFileTotalTime)
  return serverreadfiletotaltime_;
}
void BackupFinishRequest::set_serverreadfiletotaltime(::google::protobuf::uint32 value) {
  set_has_serverreadfiletotaltime();
  serverreadfiletotaltime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BackupFinishRequest.ServerReadFileTotalTime)
}

// optional uint32 ServerCostTotalTime = 10;
bool BackupFinishRequest::has_servercosttotaltime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void BackupFinishRequest::set_has_servercosttotaltime() {
  _has_bits_[0] |= 0x00000200u;
}
void BackupFinishRequest::clear_has_servercosttotaltime() {
  _has_bits_[0] &= ~0x00000200u;
}
void BackupFinishRequest::clear_servercosttotaltime() {
  servercosttotaltime_ = 0u;
  clear_has_servercosttotaltime();
}
::google::protobuf::uint32 BackupFinishRequest::servercosttotaltime() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupFinishRequest.ServerCostTotalTime)
  return servercosttotaltime_;
}
void BackupFinishRequest::set_servercosttotaltime(::google::protobuf::uint32 value) {
  set_has_servercosttotaltime();
  servercosttotaltime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BackupFinishRequest.ServerCostTotalTime)
}

// optional uint32 ServerVersion = 11;
bool BackupFinishRequest::has_serverversion() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void BackupFinishRequest::set_has_serverversion() {
  _has_bits_[0] |= 0x00000400u;
}
void BackupFinishRequest::clear_has_serverversion() {
  _has_bits_[0] &= ~0x00000400u;
}
void BackupFinishRequest::clear_serverversion() {
  serverversion_ = 0u;
  clear_has_serverversion();
}
::google::protobuf::uint32 BackupFinishRequest::serverversion() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupFinishRequest.ServerVersion)
  return serverversion_;
}
void BackupFinishRequest::set_serverversion(::google::protobuf::uint32 value) {
  set_has_serverversion();
  serverversion_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BackupFinishRequest.ServerVersion)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BackupCommandRequest::kCommandFieldNumber;
const int BackupCommandRequest::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BackupCommandRequest::BackupCommandRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbackup_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BackupCommandRequest)
}
BackupCommandRequest::BackupCommandRequest(const BackupCommandRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  command_ = from.command_;
  // @@protoc_insertion_point(copy_constructor:micromsg.BackupCommandRequest)
}

void BackupCommandRequest::SharedCtor() {
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  command_ = 0;
}

BackupCommandRequest::~BackupCommandRequest() {
  // @@protoc_insertion_point(destructor:micromsg.BackupCommandRequest)
  SharedDtor();
}

void BackupCommandRequest::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BackupCommandRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BackupCommandRequest::descriptor() {
  protobuf_mmbackup_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbackup_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BackupCommandRequest& BackupCommandRequest::default_instance() {
  protobuf_mmbackup_2eproto::InitDefaults();
  return *internal_default_instance();
}

BackupCommandRequest* BackupCommandRequest::New(::google::protobuf::Arena* arena) const {
  BackupCommandRequest* n = new BackupCommandRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BackupCommandRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BackupCommandRequest)
  if (has_data()) {
    GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*data_.UnsafeRawStringPointer())->clear();
  }
  command_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BackupCommandRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BackupCommandRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Command = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_command();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &command_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes Data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BackupCommandRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BackupCommandRequest)
  return false;
#undef DO_
}

void BackupCommandRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BackupCommandRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 Command = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->command(), output);
  }

  // optional bytes Data = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BackupCommandRequest)
}

::google::protobuf::uint8* BackupCommandRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BackupCommandRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 Command = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->command(), target);
  }

  // optional bytes Data = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BackupCommandRequest)
  return target;
}

size_t BackupCommandRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BackupCommandRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required int32 Command = 1;
  if (has_command()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->command());
  }
  // optional bytes Data = 2;
  if (has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BackupCommandRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BackupCommandRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BackupCommandRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BackupCommandRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BackupCommandRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BackupCommandRequest)
    MergeFrom(*source);
  }
}

void BackupCommandRequest::MergeFrom(const BackupCommandRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BackupCommandRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      command_ = from.command_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BackupCommandRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BackupCommandRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BackupCommandRequest::CopyFrom(const BackupCommandRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BackupCommandRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackupCommandRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void BackupCommandRequest::Swap(BackupCommandRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BackupCommandRequest::InternalSwap(BackupCommandRequest* other) {
  data_.Swap(&other->data_);
  std::swap(command_, other->command_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BackupCommandRequest::GetMetadata() const {
  protobuf_mmbackup_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbackup_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BackupCommandRequest

// required int32 Command = 1;
bool BackupCommandRequest::has_command() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BackupCommandRequest::set_has_command() {
  _has_bits_[0] |= 0x00000002u;
}
void BackupCommandRequest::clear_has_command() {
  _has_bits_[0] &= ~0x00000002u;
}
void BackupCommandRequest::clear_command() {
  command_ = 0;
  clear_has_command();
}
::google::protobuf::int32 BackupCommandRequest::command() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupCommandRequest.Command)
  return command_;
}
void BackupCommandRequest::set_command(::google::protobuf::int32 value) {
  set_has_command();
  command_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BackupCommandRequest.Command)
}

// optional bytes Data = 2;
bool BackupCommandRequest::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BackupCommandRequest::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void BackupCommandRequest::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void BackupCommandRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& BackupCommandRequest::data() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupCommandRequest.Data)
  return data_.GetNoArena();
}
void BackupCommandRequest::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BackupCommandRequest.Data)
}
#if LANG_CXX11
void BackupCommandRequest::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BackupCommandRequest.Data)
}
#endif
void BackupCommandRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BackupCommandRequest.Data)
}
void BackupCommandRequest::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BackupCommandRequest.Data)
}
::std::string* BackupCommandRequest::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:micromsg.BackupCommandRequest.Data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BackupCommandRequest::release_data() {
  // @@protoc_insertion_point(field_release:micromsg.BackupCommandRequest.Data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BackupCommandRequest::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BackupCommandRequest.Data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BackupCommandResponse::kCommandFieldNumber;
const int BackupCommandResponse::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BackupCommandResponse::BackupCommandResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbackup_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BackupCommandResponse)
}
BackupCommandResponse::BackupCommandResponse(const BackupCommandResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  command_ = from.command_;
  // @@protoc_insertion_point(copy_constructor:micromsg.BackupCommandResponse)
}

void BackupCommandResponse::SharedCtor() {
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  command_ = 0;
}

BackupCommandResponse::~BackupCommandResponse() {
  // @@protoc_insertion_point(destructor:micromsg.BackupCommandResponse)
  SharedDtor();
}

void BackupCommandResponse::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BackupCommandResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BackupCommandResponse::descriptor() {
  protobuf_mmbackup_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbackup_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BackupCommandResponse& BackupCommandResponse::default_instance() {
  protobuf_mmbackup_2eproto::InitDefaults();
  return *internal_default_instance();
}

BackupCommandResponse* BackupCommandResponse::New(::google::protobuf::Arena* arena) const {
  BackupCommandResponse* n = new BackupCommandResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BackupCommandResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BackupCommandResponse)
  if (has_data()) {
    GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*data_.UnsafeRawStringPointer())->clear();
  }
  command_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BackupCommandResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BackupCommandResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Command = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_command();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &command_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes Data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BackupCommandResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BackupCommandResponse)
  return false;
#undef DO_
}

void BackupCommandResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BackupCommandResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 Command = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->command(), output);
  }

  // optional bytes Data = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BackupCommandResponse)
}

::google::protobuf::uint8* BackupCommandResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BackupCommandResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 Command = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->command(), target);
  }

  // optional bytes Data = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BackupCommandResponse)
  return target;
}

size_t BackupCommandResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BackupCommandResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required int32 Command = 1;
  if (has_command()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->command());
  }
  // optional bytes Data = 2;
  if (has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BackupCommandResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BackupCommandResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BackupCommandResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BackupCommandResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BackupCommandResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BackupCommandResponse)
    MergeFrom(*source);
  }
}

void BackupCommandResponse::MergeFrom(const BackupCommandResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BackupCommandResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      command_ = from.command_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BackupCommandResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BackupCommandResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BackupCommandResponse::CopyFrom(const BackupCommandResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BackupCommandResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackupCommandResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void BackupCommandResponse::Swap(BackupCommandResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BackupCommandResponse::InternalSwap(BackupCommandResponse* other) {
  data_.Swap(&other->data_);
  std::swap(command_, other->command_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BackupCommandResponse::GetMetadata() const {
  protobuf_mmbackup_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbackup_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BackupCommandResponse

// required int32 Command = 1;
bool BackupCommandResponse::has_command() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BackupCommandResponse::set_has_command() {
  _has_bits_[0] |= 0x00000002u;
}
void BackupCommandResponse::clear_has_command() {
  _has_bits_[0] &= ~0x00000002u;
}
void BackupCommandResponse::clear_command() {
  command_ = 0;
  clear_has_command();
}
::google::protobuf::int32 BackupCommandResponse::command() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupCommandResponse.Command)
  return command_;
}
void BackupCommandResponse::set_command(::google::protobuf::int32 value) {
  set_has_command();
  command_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BackupCommandResponse.Command)
}

// optional bytes Data = 2;
bool BackupCommandResponse::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BackupCommandResponse::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void BackupCommandResponse::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void BackupCommandResponse::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& BackupCommandResponse::data() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupCommandResponse.Data)
  return data_.GetNoArena();
}
void BackupCommandResponse::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BackupCommandResponse.Data)
}
#if LANG_CXX11
void BackupCommandResponse::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BackupCommandResponse.Data)
}
#endif
void BackupCommandResponse::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BackupCommandResponse.Data)
}
void BackupCommandResponse::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BackupCommandResponse.Data)
}
::std::string* BackupCommandResponse::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:micromsg.BackupCommandResponse.Data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BackupCommandResponse::release_data() {
  // @@protoc_insertion_point(field_release:micromsg.BackupCommandResponse.Data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BackupCommandResponse::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BackupCommandResponse.Data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataConfigInf::kUserNameFieldNumber;
const int DataConfigInf::kDeviceidFieldNumber;
const int DataConfigInf::kCreateTimeFieldNumber;
const int DataConfigInf::kLastModifyTimeFieldNumber;
const int DataConfigInf::kDeviceInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataConfigInf::DataConfigInf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbackup_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.DataConfigInf)
}
DataConfigInf::DataConfigInf(const DataConfigInf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  deviceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_deviceid()) {
    deviceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deviceid_);
  }
  if (from.has_deviceinfo()) {
    deviceinfo_ = new ::micromsg::BackupStartGeneralInfo(*from.deviceinfo_);
  } else {
    deviceinfo_ = NULL;
  }
  ::memcpy(&createtime_, &from.createtime_,
    reinterpret_cast<char*>(&lastmodifytime_) -
    reinterpret_cast<char*>(&createtime_) + sizeof(lastmodifytime_));
  // @@protoc_insertion_point(copy_constructor:micromsg.DataConfigInf)
}

void DataConfigInf::SharedCtor() {
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deviceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&deviceinfo_, 0, reinterpret_cast<char*>(&lastmodifytime_) -
    reinterpret_cast<char*>(&deviceinfo_) + sizeof(lastmodifytime_));
}

DataConfigInf::~DataConfigInf() {
  // @@protoc_insertion_point(destructor:micromsg.DataConfigInf)
  SharedDtor();
}

void DataConfigInf::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deviceid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete deviceinfo_;
  }
}

void DataConfigInf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataConfigInf::descriptor() {
  protobuf_mmbackup_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbackup_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DataConfigInf& DataConfigInf::default_instance() {
  protobuf_mmbackup_2eproto::InitDefaults();
  return *internal_default_instance();
}

DataConfigInf* DataConfigInf::New(::google::protobuf::Arena* arena) const {
  DataConfigInf* n = new DataConfigInf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DataConfigInf::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.DataConfigInf)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_username()) {
      GOOGLE_DCHECK(!username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*username_.UnsafeRawStringPointer())->clear();
    }
    if (has_deviceid()) {
      GOOGLE_DCHECK(!deviceid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*deviceid_.UnsafeRawStringPointer())->clear();
    }
    if (has_deviceinfo()) {
      GOOGLE_DCHECK(deviceinfo_ != NULL);
      deviceinfo_->::micromsg::BackupStartGeneralInfo::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 24u) {
    ::memset(&createtime_, 0, reinterpret_cast<char*>(&lastmodifytime_) -
      reinterpret_cast<char*>(&createtime_) + sizeof(lastmodifytime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DataConfigInf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.DataConfigInf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string UserName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.DataConfigInf.UserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Deviceid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deviceid().data(), this->deviceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.DataConfigInf.Deviceid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 CreateTime = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_createtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &createtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 LastModifyTime = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_lastmodifytime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastmodifytime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.BackupStartGeneralInfo DeviceInfo = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deviceinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.DataConfigInf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.DataConfigInf)
  return false;
#undef DO_
}

void DataConfigInf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.DataConfigInf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string UserName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.DataConfigInf.UserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // optional string Deviceid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.DataConfigInf.Deviceid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->deviceid(), output);
  }

  // optional uint32 CreateTime = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->createtime(), output);
  }

  // optional uint32 LastModifyTime = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lastmodifytime(), output);
  }

  // optional .micromsg.BackupStartGeneralInfo DeviceInfo = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->deviceinfo_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.DataConfigInf)
}

::google::protobuf::uint8* DataConfigInf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.DataConfigInf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string UserName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.DataConfigInf.UserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // optional string Deviceid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.DataConfigInf.Deviceid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->deviceid(), target);
  }

  // optional uint32 CreateTime = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->createtime(), target);
  }

  // optional uint32 LastModifyTime = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->lastmodifytime(), target);
  }

  // optional .micromsg.BackupStartGeneralInfo DeviceInfo = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->deviceinfo_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.DataConfigInf)
  return target;
}

size_t DataConfigInf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.DataConfigInf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required string UserName = 1;
  if (has_username()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }
  if (_has_bits_[0 / 32] & 30u) {
    // optional string Deviceid = 2;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceid());
    }

    // optional .micromsg.BackupStartGeneralInfo DeviceInfo = 5;
    if (has_deviceinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->deviceinfo_);
    }

    // optional uint32 CreateTime = 3;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->createtime());
    }

    // optional uint32 LastModifyTime = 4;
    if (has_lastmodifytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastmodifytime());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataConfigInf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.DataConfigInf)
  GOOGLE_DCHECK_NE(&from, this);
  const DataConfigInf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DataConfigInf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.DataConfigInf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.DataConfigInf)
    MergeFrom(*source);
  }
}

void DataConfigInf::MergeFrom(const DataConfigInf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.DataConfigInf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_deviceid();
      deviceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deviceid_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_deviceinfo()->::micromsg::BackupStartGeneralInfo::MergeFrom(from.deviceinfo());
    }
    if (cached_has_bits & 0x00000008u) {
      createtime_ = from.createtime_;
    }
    if (cached_has_bits & 0x00000010u) {
      lastmodifytime_ = from.lastmodifytime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DataConfigInf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.DataConfigInf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataConfigInf::CopyFrom(const DataConfigInf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.DataConfigInf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataConfigInf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_deviceinfo()) {
    if (!this->deviceinfo_->IsInitialized()) return false;
  }
  return true;
}

void DataConfigInf::Swap(DataConfigInf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataConfigInf::InternalSwap(DataConfigInf* other) {
  username_.Swap(&other->username_);
  deviceid_.Swap(&other->deviceid_);
  std::swap(deviceinfo_, other->deviceinfo_);
  std::swap(createtime_, other->createtime_);
  std::swap(lastmodifytime_, other->lastmodifytime_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DataConfigInf::GetMetadata() const {
  protobuf_mmbackup_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbackup_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DataConfigInf

// required string UserName = 1;
bool DataConfigInf::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DataConfigInf::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
void DataConfigInf::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
void DataConfigInf::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
const ::std::string& DataConfigInf::username() const {
  // @@protoc_insertion_point(field_get:micromsg.DataConfigInf.UserName)
  return username_.GetNoArena();
}
void DataConfigInf::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.DataConfigInf.UserName)
}
#if LANG_CXX11
void DataConfigInf::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.DataConfigInf.UserName)
}
#endif
void DataConfigInf::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.DataConfigInf.UserName)
}
void DataConfigInf::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.DataConfigInf.UserName)
}
::std::string* DataConfigInf::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:micromsg.DataConfigInf.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DataConfigInf::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.DataConfigInf.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DataConfigInf::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:micromsg.DataConfigInf.UserName)
}

// optional string Deviceid = 2;
bool DataConfigInf::has_deviceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DataConfigInf::set_has_deviceid() {
  _has_bits_[0] |= 0x00000002u;
}
void DataConfigInf::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000002u;
}
void DataConfigInf::clear_deviceid() {
  deviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_deviceid();
}
const ::std::string& DataConfigInf::deviceid() const {
  // @@protoc_insertion_point(field_get:micromsg.DataConfigInf.Deviceid)
  return deviceid_.GetNoArena();
}
void DataConfigInf::set_deviceid(const ::std::string& value) {
  set_has_deviceid();
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.DataConfigInf.Deviceid)
}
#if LANG_CXX11
void DataConfigInf::set_deviceid(::std::string&& value) {
  set_has_deviceid();
  deviceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.DataConfigInf.Deviceid)
}
#endif
void DataConfigInf::set_deviceid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_deviceid();
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.DataConfigInf.Deviceid)
}
void DataConfigInf::set_deviceid(const char* value, size_t size) {
  set_has_deviceid();
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.DataConfigInf.Deviceid)
}
::std::string* DataConfigInf::mutable_deviceid() {
  set_has_deviceid();
  // @@protoc_insertion_point(field_mutable:micromsg.DataConfigInf.Deviceid)
  return deviceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DataConfigInf::release_deviceid() {
  // @@protoc_insertion_point(field_release:micromsg.DataConfigInf.Deviceid)
  clear_has_deviceid();
  return deviceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DataConfigInf::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid != NULL) {
    set_has_deviceid();
  } else {
    clear_has_deviceid();
  }
  deviceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deviceid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.DataConfigInf.Deviceid)
}

// optional uint32 CreateTime = 3;
bool DataConfigInf::has_createtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DataConfigInf::set_has_createtime() {
  _has_bits_[0] |= 0x00000008u;
}
void DataConfigInf::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000008u;
}
void DataConfigInf::clear_createtime() {
  createtime_ = 0u;
  clear_has_createtime();
}
::google::protobuf::uint32 DataConfigInf::createtime() const {
  // @@protoc_insertion_point(field_get:micromsg.DataConfigInf.CreateTime)
  return createtime_;
}
void DataConfigInf::set_createtime(::google::protobuf::uint32 value) {
  set_has_createtime();
  createtime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DataConfigInf.CreateTime)
}

// optional uint32 LastModifyTime = 4;
bool DataConfigInf::has_lastmodifytime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DataConfigInf::set_has_lastmodifytime() {
  _has_bits_[0] |= 0x00000010u;
}
void DataConfigInf::clear_has_lastmodifytime() {
  _has_bits_[0] &= ~0x00000010u;
}
void DataConfigInf::clear_lastmodifytime() {
  lastmodifytime_ = 0u;
  clear_has_lastmodifytime();
}
::google::protobuf::uint32 DataConfigInf::lastmodifytime() const {
  // @@protoc_insertion_point(field_get:micromsg.DataConfigInf.LastModifyTime)
  return lastmodifytime_;
}
void DataConfigInf::set_lastmodifytime(::google::protobuf::uint32 value) {
  set_has_lastmodifytime();
  lastmodifytime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DataConfigInf.LastModifyTime)
}

// optional .micromsg.BackupStartGeneralInfo DeviceInfo = 5;
bool DataConfigInf::has_deviceinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DataConfigInf::set_has_deviceinfo() {
  _has_bits_[0] |= 0x00000004u;
}
void DataConfigInf::clear_has_deviceinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
void DataConfigInf::clear_deviceinfo() {
  if (deviceinfo_ != NULL) deviceinfo_->::micromsg::BackupStartGeneralInfo::Clear();
  clear_has_deviceinfo();
}
const ::micromsg::BackupStartGeneralInfo& DataConfigInf::deviceinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.DataConfigInf.DeviceInfo)
  return deviceinfo_ != NULL ? *deviceinfo_
                         : *::micromsg::BackupStartGeneralInfo::internal_default_instance();
}
::micromsg::BackupStartGeneralInfo* DataConfigInf::mutable_deviceinfo() {
  set_has_deviceinfo();
  if (deviceinfo_ == NULL) {
    deviceinfo_ = new ::micromsg::BackupStartGeneralInfo;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.DataConfigInf.DeviceInfo)
  return deviceinfo_;
}
::micromsg::BackupStartGeneralInfo* DataConfigInf::release_deviceinfo() {
  // @@protoc_insertion_point(field_release:micromsg.DataConfigInf.DeviceInfo)
  clear_has_deviceinfo();
  ::micromsg::BackupStartGeneralInfo* temp = deviceinfo_;
  deviceinfo_ = NULL;
  return temp;
}
void DataConfigInf::set_allocated_deviceinfo(::micromsg::BackupStartGeneralInfo* deviceinfo) {
  delete deviceinfo_;
  deviceinfo_ = deviceinfo;
  if (deviceinfo) {
    set_has_deviceinfo();
  } else {
    clear_has_deviceinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.DataConfigInf.DeviceInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BackupCancelRequest::kIDFieldNumber;
const int BackupCancelRequest::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BackupCancelRequest::BackupCancelRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbackup_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BackupCancelRequest)
}
BackupCancelRequest::BackupCancelRequest(const BackupCancelRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  reason_ = from.reason_;
  // @@protoc_insertion_point(copy_constructor:micromsg.BackupCancelRequest)
}

void BackupCancelRequest::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reason_ = 0u;
}

BackupCancelRequest::~BackupCancelRequest() {
  // @@protoc_insertion_point(destructor:micromsg.BackupCancelRequest)
  SharedDtor();
}

void BackupCancelRequest::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BackupCancelRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BackupCancelRequest::descriptor() {
  protobuf_mmbackup_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbackup_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BackupCancelRequest& BackupCancelRequest::default_instance() {
  protobuf_mmbackup_2eproto::InitDefaults();
  return *internal_default_instance();
}

BackupCancelRequest* BackupCancelRequest::New(::google::protobuf::Arena* arena) const {
  BackupCancelRequest* n = new BackupCancelRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BackupCancelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BackupCancelRequest)
  if (has_id()) {
    GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*id_.UnsafeRawStringPointer())->clear();
  }
  reason_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BackupCancelRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BackupCancelRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BackupCancelRequest.ID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 Reason = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_reason();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BackupCancelRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BackupCancelRequest)
  return false;
#undef DO_
}

void BackupCancelRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BackupCancelRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string ID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BackupCancelRequest.ID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional uint32 Reason = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BackupCancelRequest)
}

::google::protobuf::uint8* BackupCancelRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BackupCancelRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string ID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BackupCancelRequest.ID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional uint32 Reason = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BackupCancelRequest)
  return target;
}

size_t BackupCancelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BackupCancelRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required string ID = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }
  // optional uint32 Reason = 2;
  if (has_reason()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reason());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BackupCancelRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BackupCancelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BackupCancelRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BackupCancelRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BackupCancelRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BackupCancelRequest)
    MergeFrom(*source);
  }
}

void BackupCancelRequest::MergeFrom(const BackupCancelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BackupCancelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      reason_ = from.reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BackupCancelRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BackupCancelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BackupCancelRequest::CopyFrom(const BackupCancelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BackupCancelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackupCancelRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void BackupCancelRequest::Swap(BackupCancelRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BackupCancelRequest::InternalSwap(BackupCancelRequest* other) {
  id_.Swap(&other->id_);
  std::swap(reason_, other->reason_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BackupCancelRequest::GetMetadata() const {
  protobuf_mmbackup_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbackup_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BackupCancelRequest

// required string ID = 1;
bool BackupCancelRequest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BackupCancelRequest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void BackupCancelRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void BackupCancelRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
const ::std::string& BackupCancelRequest::id() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupCancelRequest.ID)
  return id_.GetNoArena();
}
void BackupCancelRequest::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BackupCancelRequest.ID)
}
#if LANG_CXX11
void BackupCancelRequest::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BackupCancelRequest.ID)
}
#endif
void BackupCancelRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BackupCancelRequest.ID)
}
void BackupCancelRequest::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BackupCancelRequest.ID)
}
::std::string* BackupCancelRequest::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:micromsg.BackupCancelRequest.ID)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BackupCancelRequest::release_id() {
  // @@protoc_insertion_point(field_release:micromsg.BackupCancelRequest.ID)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BackupCancelRequest::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BackupCancelRequest.ID)
}

// optional uint32 Reason = 2;
bool BackupCancelRequest::has_reason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BackupCancelRequest::set_has_reason() {
  _has_bits_[0] |= 0x00000002u;
}
void BackupCancelRequest::clear_has_reason() {
  _has_bits_[0] &= ~0x00000002u;
}
void BackupCancelRequest::clear_reason() {
  reason_ = 0u;
  clear_has_reason();
}
::google::protobuf::uint32 BackupCancelRequest::reason() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupCancelRequest.Reason)
  return reason_;
}
void BackupCancelRequest::set_reason(::google::protobuf::uint32 value) {
  set_has_reason();
  reason_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BackupCancelRequest.Reason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetConnectInfoRequest::kBaseRequestFieldNumber;
const int GetConnectInfoRequest::kURLFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetConnectInfoRequest::GetConnectInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbackup_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetConnectInfoRequest)
}
GetConnectInfoRequest::GetConnectInfoRequest(const GetConnectInfoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.GetConnectInfoRequest)
}

void GetConnectInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baserequest_ = NULL;
}

GetConnectInfoRequest::~GetConnectInfoRequest() {
  // @@protoc_insertion_point(destructor:micromsg.GetConnectInfoRequest)
  SharedDtor();
}

void GetConnectInfoRequest::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void GetConnectInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetConnectInfoRequest::descriptor() {
  protobuf_mmbackup_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbackup_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetConnectInfoRequest& GetConnectInfoRequest::default_instance() {
  protobuf_mmbackup_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetConnectInfoRequest* GetConnectInfoRequest::New(::google::protobuf::Arena* arena) const {
  GetConnectInfoRequest* n = new GetConnectInfoRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetConnectInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetConnectInfoRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_url()) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetConnectInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetConnectInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string URL = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetConnectInfoRequest.URL");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetConnectInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetConnectInfoRequest)
  return false;
#undef DO_
}

void GetConnectInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetConnectInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string URL = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetConnectInfoRequest.URL");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetConnectInfoRequest)
}

::google::protobuf::uint8* GetConnectInfoRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetConnectInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string URL = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetConnectInfoRequest.URL");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetConnectInfoRequest)
  return target;
}

size_t GetConnectInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetConnectInfoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (has_baserequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }
  // optional string URL = 2;
  if (has_url()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetConnectInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetConnectInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetConnectInfoRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetConnectInfoRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetConnectInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetConnectInfoRequest)
    MergeFrom(*source);
  }
}

void GetConnectInfoRequest::MergeFrom(const GetConnectInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetConnectInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
  }
}

void GetConnectInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetConnectInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetConnectInfoRequest::CopyFrom(const GetConnectInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetConnectInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetConnectInfoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void GetConnectInfoRequest::Swap(GetConnectInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetConnectInfoRequest::InternalSwap(GetConnectInfoRequest* other) {
  url_.Swap(&other->url_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetConnectInfoRequest::GetMetadata() const {
  protobuf_mmbackup_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbackup_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetConnectInfoRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool GetConnectInfoRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetConnectInfoRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void GetConnectInfoRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetConnectInfoRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& GetConnectInfoRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetConnectInfoRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* GetConnectInfoRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetConnectInfoRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* GetConnectInfoRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetConnectInfoRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void GetConnectInfoRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetConnectInfoRequest.BaseRequest)
}

// optional string URL = 2;
bool GetConnectInfoRequest::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetConnectInfoRequest::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void GetConnectInfoRequest::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetConnectInfoRequest::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& GetConnectInfoRequest::url() const {
  // @@protoc_insertion_point(field_get:micromsg.GetConnectInfoRequest.URL)
  return url_.GetNoArena();
}
void GetConnectInfoRequest::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetConnectInfoRequest.URL)
}
#if LANG_CXX11
void GetConnectInfoRequest::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetConnectInfoRequest.URL)
}
#endif
void GetConnectInfoRequest::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetConnectInfoRequest.URL)
}
void GetConnectInfoRequest::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetConnectInfoRequest.URL)
}
::std::string* GetConnectInfoRequest::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:micromsg.GetConnectInfoRequest.URL)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetConnectInfoRequest::release_url() {
  // @@protoc_insertion_point(field_release:micromsg.GetConnectInfoRequest.URL)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetConnectInfoRequest::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetConnectInfoRequest.URL)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetConnectInfoResponse::kBaseResponseFieldNumber;
const int GetConnectInfoResponse::kIDFieldNumber;
const int GetConnectInfoResponse::kKeyFieldNumber;
const int GetConnectInfoResponse::kHelloFieldNumber;
const int GetConnectInfoResponse::kOKFieldNumber;
const int GetConnectInfoResponse::kTypeFieldNumber;
const int GetConnectInfoResponse::kAddrCountFieldNumber;
const int GetConnectInfoResponse::kAddrListFieldNumber;
const int GetConnectInfoResponse::kResourceFieldNumber;
const int GetConnectInfoResponse::kPCNameFieldNumber;
const int GetConnectInfoResponse::kPCAcctNameFieldNumber;
const int GetConnectInfoResponse::kEncryFlagFieldNumber;
const int GetConnectInfoResponse::kSceneFieldNumber;
const int GetConnectInfoResponse::kDataSizeFieldNumber;
const int GetConnectInfoResponse::kWifiNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetConnectInfoResponse::GetConnectInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbackup_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetConnectInfoResponse)
}
GetConnectInfoResponse::GetConnectInfoResponse(const GetConnectInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      addrlist_(from.addrlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  hello_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hello()) {
    hello_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hello_);
  }
  ok_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ok()) {
    ok_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ok_);
  }
  resource_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_resource()) {
    resource_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resource_);
  }
  pcname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pcname()) {
    pcname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pcname_);
  }
  pcacctname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pcacctname()) {
    pcacctname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pcacctname_);
  }
  wifiname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_wifiname()) {
    wifiname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wifiname_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  if (from.has_key()) {
    key_ = new ::micromsg::SKBuiltinBuffer_t(*from.key_);
  } else {
    key_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&datasize_) -
    reinterpret_cast<char*>(&type_) + sizeof(datasize_));
  // @@protoc_insertion_point(copy_constructor:micromsg.GetConnectInfoResponse)
}

void GetConnectInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hello_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ok_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resource_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pcname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pcacctname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wifiname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&datasize_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(datasize_));
}

GetConnectInfoResponse::~GetConnectInfoResponse() {
  // @@protoc_insertion_point(destructor:micromsg.GetConnectInfoResponse)
  SharedDtor();
}

void GetConnectInfoResponse::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hello_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ok_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resource_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pcname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pcacctname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wifiname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
  if (this != internal_default_instance()) {
    delete key_;
  }
}

void GetConnectInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetConnectInfoResponse::descriptor() {
  protobuf_mmbackup_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbackup_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetConnectInfoResponse& GetConnectInfoResponse::default_instance() {
  protobuf_mmbackup_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetConnectInfoResponse* GetConnectInfoResponse::New(::google::protobuf::Arena* arena) const {
  GetConnectInfoResponse* n = new GetConnectInfoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetConnectInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetConnectInfoResponse)
  addrlist_.Clear();
  if (_has_bits_[0 / 32] & 255u) {
    if (has_id()) {
      GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*id_.UnsafeRawStringPointer())->clear();
    }
    if (has_hello()) {
      GOOGLE_DCHECK(!hello_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*hello_.UnsafeRawStringPointer())->clear();
    }
    if (has_ok()) {
      GOOGLE_DCHECK(!ok_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ok_.UnsafeRawStringPointer())->clear();
    }
    if (has_resource()) {
      GOOGLE_DCHECK(!resource_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*resource_.UnsafeRawStringPointer())->clear();
    }
    if (has_pcname()) {
      GOOGLE_DCHECK(!pcname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pcname_.UnsafeRawStringPointer())->clear();
    }
    if (has_pcacctname()) {
      GOOGLE_DCHECK(!pcacctname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pcacctname_.UnsafeRawStringPointer())->clear();
    }
    if (has_wifiname()) {
      GOOGLE_DCHECK(!wifiname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*wifiname_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
  }
  if (has_key()) {
    GOOGLE_DCHECK(key_ != NULL);
    key_->::micromsg::SKBuiltinBuffer_t::Clear();
  }
  if (_has_bits_[8 / 32] & 15872u) {
    ::memset(&type_, 0, reinterpret_cast<char*>(&datasize_) -
      reinterpret_cast<char*>(&type_) + sizeof(datasize_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetConnectInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetConnectInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetConnectInfoResponse.ID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t Key = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Hello = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hello()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hello().data(), this->hello().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetConnectInfoResponse.Hello");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string OK = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ok()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ok().data(), this->ok().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetConnectInfoResponse.OK");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 AddrCount = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_addrcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addrcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.ConnectInfoAddr AddrList = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_addrlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Resource = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resource()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->resource().data(), this->resource().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetConnectInfoResponse.Resource");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string PCName = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pcname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pcname().data(), this->pcname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetConnectInfoResponse.PCName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string PCAcctName = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pcacctname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pcacctname().data(), this->pcacctname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetConnectInfoResponse.PCAcctName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 EncryFlag = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_encryflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &encryflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 Scene = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_scene();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 DataSize = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_datasize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &datasize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string WifiName = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wifiname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->wifiname().data(), this->wifiname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetConnectInfoResponse.WifiName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetConnectInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetConnectInfoResponse)
  return false;
#undef DO_
}

void GetConnectInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetConnectInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // optional string ID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetConnectInfoResponse.ID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  // required .micromsg.SKBuiltinBuffer_t Key = 3;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->key_, output);
  }

  // optional string Hello = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hello().data(), this->hello().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetConnectInfoResponse.Hello");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->hello(), output);
  }

  // optional string OK = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ok().data(), this->ok().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetConnectInfoResponse.OK");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->ok(), output);
  }

  // required uint32 Type = 6;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->type(), output);
  }

  // required uint32 AddrCount = 7;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->addrcount(), output);
  }

  // repeated .micromsg.ConnectInfoAddr AddrList = 8;
  for (unsigned int i = 0, n = this->addrlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->addrlist(i), output);
  }

  // optional string Resource = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resource().data(), this->resource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetConnectInfoResponse.Resource");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->resource(), output);
  }

  // optional string PCName = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pcname().data(), this->pcname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetConnectInfoResponse.PCName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->pcname(), output);
  }

  // optional string PCAcctName = 11;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pcacctname().data(), this->pcacctname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetConnectInfoResponse.PCAcctName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->pcacctname(), output);
  }

  // optional uint32 EncryFlag = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->encryflag(), output);
  }

  // optional uint32 Scene = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->scene(), output);
  }

  // optional uint64 DataSize = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->datasize(), output);
  }

  // optional string WifiName = 15;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wifiname().data(), this->wifiname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetConnectInfoResponse.WifiName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->wifiname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetConnectInfoResponse)
}

::google::protobuf::uint8* GetConnectInfoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetConnectInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // optional string ID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetConnectInfoResponse.ID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  // required .micromsg.SKBuiltinBuffer_t Key = 3;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->key_, deterministic, target);
  }

  // optional string Hello = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hello().data(), this->hello().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetConnectInfoResponse.Hello");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->hello(), target);
  }

  // optional string OK = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ok().data(), this->ok().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetConnectInfoResponse.OK");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ok(), target);
  }

  // required uint32 Type = 6;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->type(), target);
  }

  // required uint32 AddrCount = 7;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->addrcount(), target);
  }

  // repeated .micromsg.ConnectInfoAddr AddrList = 8;
  for (unsigned int i = 0, n = this->addrlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->addrlist(i), deterministic, target);
  }

  // optional string Resource = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resource().data(), this->resource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetConnectInfoResponse.Resource");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->resource(), target);
  }

  // optional string PCName = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pcname().data(), this->pcname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetConnectInfoResponse.PCName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->pcname(), target);
  }

  // optional string PCAcctName = 11;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pcacctname().data(), this->pcacctname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetConnectInfoResponse.PCAcctName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->pcacctname(), target);
  }

  // optional uint32 EncryFlag = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->encryflag(), target);
  }

  // optional uint32 Scene = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->scene(), target);
  }

  // optional uint64 DataSize = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->datasize(), target);
  }

  // optional string WifiName = 15;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wifiname().data(), this->wifiname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetConnectInfoResponse.WifiName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->wifiname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetConnectInfoResponse)
  return target;
}

size_t GetConnectInfoResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GetConnectInfoResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_key()) {
    // required .micromsg.SKBuiltinBuffer_t Key = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);
  }

  if (has_type()) {
    // required uint32 Type = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  if (has_addrcount()) {
    // required uint32 AddrCount = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->addrcount());
  }

  return total_size;
}
size_t GetConnectInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetConnectInfoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000780) ^ 0x00000780) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required .micromsg.SKBuiltinBuffer_t Key = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);

    // required uint32 Type = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());

    // required uint32 AddrCount = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->addrcount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.ConnectInfoAddr AddrList = 8;
  {
    unsigned int count = this->addrlist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->addrlist(i));
    }
  }

  if (_has_bits_[0 / 32] & 127u) {
    // optional string ID = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string Hello = 4;
    if (has_hello()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hello());
    }

    // optional string OK = 5;
    if (has_ok()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ok());
    }

    // optional string Resource = 9;
    if (has_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resource());
    }

    // optional string PCName = 10;
    if (has_pcname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pcname());
    }

    // optional string PCAcctName = 11;
    if (has_pcacctname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pcacctname());
    }

    // optional string WifiName = 15;
    if (has_wifiname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wifiname());
    }

  }
  if (_has_bits_[8 / 32] & 14336u) {
    // optional uint32 EncryFlag = 12;
    if (has_encryflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->encryflag());
    }

    // optional uint32 Scene = 13;
    if (has_scene()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene());
    }

    // optional uint64 DataSize = 14;
    if (has_datasize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->datasize());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetConnectInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetConnectInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetConnectInfoResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetConnectInfoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetConnectInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetConnectInfoResponse)
    MergeFrom(*source);
  }
}

void GetConnectInfoResponse::MergeFrom(const GetConnectInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetConnectInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  addrlist_.MergeFrom(from.addrlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_hello();
      hello_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hello_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_ok();
      ok_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ok_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_resource();
      resource_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resource_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_pcname();
      pcname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pcname_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_pcacctname();
      pcacctname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pcacctname_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_wifiname();
      wifiname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wifiname_);
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
  }
  if (cached_has_bits & 16128u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_key()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.key());
    }
    if (cached_has_bits & 0x00000200u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000400u) {
      addrcount_ = from.addrcount_;
    }
    if (cached_has_bits & 0x00000800u) {
      encryflag_ = from.encryflag_;
    }
    if (cached_has_bits & 0x00001000u) {
      scene_ = from.scene_;
    }
    if (cached_has_bits & 0x00002000u) {
      datasize_ = from.datasize_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetConnectInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetConnectInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetConnectInfoResponse::CopyFrom(const GetConnectInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetConnectInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetConnectInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000780) != 0x00000780) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  if (has_key()) {
    if (!this->key_->IsInitialized()) return false;
  }
  return true;
}

void GetConnectInfoResponse::Swap(GetConnectInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetConnectInfoResponse::InternalSwap(GetConnectInfoResponse* other) {
  addrlist_.InternalSwap(&other->addrlist_);
  id_.Swap(&other->id_);
  hello_.Swap(&other->hello_);
  ok_.Swap(&other->ok_);
  resource_.Swap(&other->resource_);
  pcname_.Swap(&other->pcname_);
  pcacctname_.Swap(&other->pcacctname_);
  wifiname_.Swap(&other->wifiname_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(key_, other->key_);
  std::swap(type_, other->type_);
  std::swap(addrcount_, other->addrcount_);
  std::swap(encryflag_, other->encryflag_);
  std::swap(scene_, other->scene_);
  std::swap(datasize_, other->datasize_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetConnectInfoResponse::GetMetadata() const {
  protobuf_mmbackup_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbackup_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetConnectInfoResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool GetConnectInfoResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void GetConnectInfoResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000080u;
}
void GetConnectInfoResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000080u;
}
void GetConnectInfoResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& GetConnectInfoResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetConnectInfoResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* GetConnectInfoResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetConnectInfoResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* GetConnectInfoResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetConnectInfoResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void GetConnectInfoResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetConnectInfoResponse.BaseResponse)
}

// optional string ID = 2;
bool GetConnectInfoResponse::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetConnectInfoResponse::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void GetConnectInfoResponse::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetConnectInfoResponse::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
const ::std::string& GetConnectInfoResponse::id() const {
  // @@protoc_insertion_point(field_get:micromsg.GetConnectInfoResponse.ID)
  return id_.GetNoArena();
}
void GetConnectInfoResponse::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetConnectInfoResponse.ID)
}
#if LANG_CXX11
void GetConnectInfoResponse::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetConnectInfoResponse.ID)
}
#endif
void GetConnectInfoResponse::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetConnectInfoResponse.ID)
}
void GetConnectInfoResponse::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetConnectInfoResponse.ID)
}
::std::string* GetConnectInfoResponse::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:micromsg.GetConnectInfoResponse.ID)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetConnectInfoResponse::release_id() {
  // @@protoc_insertion_point(field_release:micromsg.GetConnectInfoResponse.ID)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetConnectInfoResponse::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetConnectInfoResponse.ID)
}

// required .micromsg.SKBuiltinBuffer_t Key = 3;
bool GetConnectInfoResponse::has_key() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void GetConnectInfoResponse::set_has_key() {
  _has_bits_[0] |= 0x00000100u;
}
void GetConnectInfoResponse::clear_has_key() {
  _has_bits_[0] &= ~0x00000100u;
}
void GetConnectInfoResponse::clear_key() {
  if (key_ != NULL) key_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_key();
}
const ::micromsg::SKBuiltinBuffer_t& GetConnectInfoResponse::key() const {
  // @@protoc_insertion_point(field_get:micromsg.GetConnectInfoResponse.Key)
  return key_ != NULL ? *key_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* GetConnectInfoResponse::mutable_key() {
  set_has_key();
  if (key_ == NULL) {
    key_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetConnectInfoResponse.Key)
  return key_;
}
::micromsg::SKBuiltinBuffer_t* GetConnectInfoResponse::release_key() {
  // @@protoc_insertion_point(field_release:micromsg.GetConnectInfoResponse.Key)
  clear_has_key();
  ::micromsg::SKBuiltinBuffer_t* temp = key_;
  key_ = NULL;
  return temp;
}
void GetConnectInfoResponse::set_allocated_key(::micromsg::SKBuiltinBuffer_t* key) {
  delete key_;
  key_ = key;
  if (key) {
    set_has_key();
  } else {
    clear_has_key();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetConnectInfoResponse.Key)
}

// optional string Hello = 4;
bool GetConnectInfoResponse::has_hello() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetConnectInfoResponse::set_has_hello() {
  _has_bits_[0] |= 0x00000002u;
}
void GetConnectInfoResponse::clear_has_hello() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetConnectInfoResponse::clear_hello() {
  hello_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hello();
}
const ::std::string& GetConnectInfoResponse::hello() const {
  // @@protoc_insertion_point(field_get:micromsg.GetConnectInfoResponse.Hello)
  return hello_.GetNoArena();
}
void GetConnectInfoResponse::set_hello(const ::std::string& value) {
  set_has_hello();
  hello_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetConnectInfoResponse.Hello)
}
#if LANG_CXX11
void GetConnectInfoResponse::set_hello(::std::string&& value) {
  set_has_hello();
  hello_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetConnectInfoResponse.Hello)
}
#endif
void GetConnectInfoResponse::set_hello(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hello();
  hello_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetConnectInfoResponse.Hello)
}
void GetConnectInfoResponse::set_hello(const char* value, size_t size) {
  set_has_hello();
  hello_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetConnectInfoResponse.Hello)
}
::std::string* GetConnectInfoResponse::mutable_hello() {
  set_has_hello();
  // @@protoc_insertion_point(field_mutable:micromsg.GetConnectInfoResponse.Hello)
  return hello_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetConnectInfoResponse::release_hello() {
  // @@protoc_insertion_point(field_release:micromsg.GetConnectInfoResponse.Hello)
  clear_has_hello();
  return hello_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetConnectInfoResponse::set_allocated_hello(::std::string* hello) {
  if (hello != NULL) {
    set_has_hello();
  } else {
    clear_has_hello();
  }
  hello_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hello);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetConnectInfoResponse.Hello)
}

// optional string OK = 5;
bool GetConnectInfoResponse::has_ok() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetConnectInfoResponse::set_has_ok() {
  _has_bits_[0] |= 0x00000004u;
}
void GetConnectInfoResponse::clear_has_ok() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetConnectInfoResponse::clear_ok() {
  ok_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ok();
}
const ::std::string& GetConnectInfoResponse::ok() const {
  // @@protoc_insertion_point(field_get:micromsg.GetConnectInfoResponse.OK)
  return ok_.GetNoArena();
}
void GetConnectInfoResponse::set_ok(const ::std::string& value) {
  set_has_ok();
  ok_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetConnectInfoResponse.OK)
}
#if LANG_CXX11
void GetConnectInfoResponse::set_ok(::std::string&& value) {
  set_has_ok();
  ok_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetConnectInfoResponse.OK)
}
#endif
void GetConnectInfoResponse::set_ok(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ok();
  ok_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetConnectInfoResponse.OK)
}
void GetConnectInfoResponse::set_ok(const char* value, size_t size) {
  set_has_ok();
  ok_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetConnectInfoResponse.OK)
}
::std::string* GetConnectInfoResponse::mutable_ok() {
  set_has_ok();
  // @@protoc_insertion_point(field_mutable:micromsg.GetConnectInfoResponse.OK)
  return ok_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetConnectInfoResponse::release_ok() {
  // @@protoc_insertion_point(field_release:micromsg.GetConnectInfoResponse.OK)
  clear_has_ok();
  return ok_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetConnectInfoResponse::set_allocated_ok(::std::string* ok) {
  if (ok != NULL) {
    set_has_ok();
  } else {
    clear_has_ok();
  }
  ok_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ok);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetConnectInfoResponse.OK)
}

// required uint32 Type = 6;
bool GetConnectInfoResponse::has_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void GetConnectInfoResponse::set_has_type() {
  _has_bits_[0] |= 0x00000200u;
}
void GetConnectInfoResponse::clear_has_type() {
  _has_bits_[0] &= ~0x00000200u;
}
void GetConnectInfoResponse::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 GetConnectInfoResponse::type() const {
  // @@protoc_insertion_point(field_get:micromsg.GetConnectInfoResponse.Type)
  return type_;
}
void GetConnectInfoResponse::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetConnectInfoResponse.Type)
}

// required uint32 AddrCount = 7;
bool GetConnectInfoResponse::has_addrcount() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void GetConnectInfoResponse::set_has_addrcount() {
  _has_bits_[0] |= 0x00000400u;
}
void GetConnectInfoResponse::clear_has_addrcount() {
  _has_bits_[0] &= ~0x00000400u;
}
void GetConnectInfoResponse::clear_addrcount() {
  addrcount_ = 0u;
  clear_has_addrcount();
}
::google::protobuf::uint32 GetConnectInfoResponse::addrcount() const {
  // @@protoc_insertion_point(field_get:micromsg.GetConnectInfoResponse.AddrCount)
  return addrcount_;
}
void GetConnectInfoResponse::set_addrcount(::google::protobuf::uint32 value) {
  set_has_addrcount();
  addrcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetConnectInfoResponse.AddrCount)
}

// repeated .micromsg.ConnectInfoAddr AddrList = 8;
int GetConnectInfoResponse::addrlist_size() const {
  return addrlist_.size();
}
void GetConnectInfoResponse::clear_addrlist() {
  addrlist_.Clear();
}
const ::micromsg::ConnectInfoAddr& GetConnectInfoResponse::addrlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GetConnectInfoResponse.AddrList)
  return addrlist_.Get(index);
}
::micromsg::ConnectInfoAddr* GetConnectInfoResponse::mutable_addrlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GetConnectInfoResponse.AddrList)
  return addrlist_.Mutable(index);
}
::micromsg::ConnectInfoAddr* GetConnectInfoResponse::add_addrlist() {
  // @@protoc_insertion_point(field_add:micromsg.GetConnectInfoResponse.AddrList)
  return addrlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::ConnectInfoAddr >*
GetConnectInfoResponse::mutable_addrlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GetConnectInfoResponse.AddrList)
  return &addrlist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::ConnectInfoAddr >&
GetConnectInfoResponse::addrlist() const {
  // @@protoc_insertion_point(field_list:micromsg.GetConnectInfoResponse.AddrList)
  return addrlist_;
}

// optional string Resource = 9;
bool GetConnectInfoResponse::has_resource() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GetConnectInfoResponse::set_has_resource() {
  _has_bits_[0] |= 0x00000008u;
}
void GetConnectInfoResponse::clear_has_resource() {
  _has_bits_[0] &= ~0x00000008u;
}
void GetConnectInfoResponse::clear_resource() {
  resource_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_resource();
}
const ::std::string& GetConnectInfoResponse::resource() const {
  // @@protoc_insertion_point(field_get:micromsg.GetConnectInfoResponse.Resource)
  return resource_.GetNoArena();
}
void GetConnectInfoResponse::set_resource(const ::std::string& value) {
  set_has_resource();
  resource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetConnectInfoResponse.Resource)
}
#if LANG_CXX11
void GetConnectInfoResponse::set_resource(::std::string&& value) {
  set_has_resource();
  resource_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetConnectInfoResponse.Resource)
}
#endif
void GetConnectInfoResponse::set_resource(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_resource();
  resource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetConnectInfoResponse.Resource)
}
void GetConnectInfoResponse::set_resource(const char* value, size_t size) {
  set_has_resource();
  resource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetConnectInfoResponse.Resource)
}
::std::string* GetConnectInfoResponse::mutable_resource() {
  set_has_resource();
  // @@protoc_insertion_point(field_mutable:micromsg.GetConnectInfoResponse.Resource)
  return resource_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetConnectInfoResponse::release_resource() {
  // @@protoc_insertion_point(field_release:micromsg.GetConnectInfoResponse.Resource)
  clear_has_resource();
  return resource_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetConnectInfoResponse::set_allocated_resource(::std::string* resource) {
  if (resource != NULL) {
    set_has_resource();
  } else {
    clear_has_resource();
  }
  resource_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resource);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetConnectInfoResponse.Resource)
}

// optional string PCName = 10;
bool GetConnectInfoResponse::has_pcname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GetConnectInfoResponse::set_has_pcname() {
  _has_bits_[0] |= 0x00000010u;
}
void GetConnectInfoResponse::clear_has_pcname() {
  _has_bits_[0] &= ~0x00000010u;
}
void GetConnectInfoResponse::clear_pcname() {
  pcname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pcname();
}
const ::std::string& GetConnectInfoResponse::pcname() const {
  // @@protoc_insertion_point(field_get:micromsg.GetConnectInfoResponse.PCName)
  return pcname_.GetNoArena();
}
void GetConnectInfoResponse::set_pcname(const ::std::string& value) {
  set_has_pcname();
  pcname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetConnectInfoResponse.PCName)
}
#if LANG_CXX11
void GetConnectInfoResponse::set_pcname(::std::string&& value) {
  set_has_pcname();
  pcname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetConnectInfoResponse.PCName)
}
#endif
void GetConnectInfoResponse::set_pcname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pcname();
  pcname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetConnectInfoResponse.PCName)
}
void GetConnectInfoResponse::set_pcname(const char* value, size_t size) {
  set_has_pcname();
  pcname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetConnectInfoResponse.PCName)
}
::std::string* GetConnectInfoResponse::mutable_pcname() {
  set_has_pcname();
  // @@protoc_insertion_point(field_mutable:micromsg.GetConnectInfoResponse.PCName)
  return pcname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetConnectInfoResponse::release_pcname() {
  // @@protoc_insertion_point(field_release:micromsg.GetConnectInfoResponse.PCName)
  clear_has_pcname();
  return pcname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetConnectInfoResponse::set_allocated_pcname(::std::string* pcname) {
  if (pcname != NULL) {
    set_has_pcname();
  } else {
    clear_has_pcname();
  }
  pcname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pcname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetConnectInfoResponse.PCName)
}

// optional string PCAcctName = 11;
bool GetConnectInfoResponse::has_pcacctname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void GetConnectInfoResponse::set_has_pcacctname() {
  _has_bits_[0] |= 0x00000020u;
}
void GetConnectInfoResponse::clear_has_pcacctname() {
  _has_bits_[0] &= ~0x00000020u;
}
void GetConnectInfoResponse::clear_pcacctname() {
  pcacctname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pcacctname();
}
const ::std::string& GetConnectInfoResponse::pcacctname() const {
  // @@protoc_insertion_point(field_get:micromsg.GetConnectInfoResponse.PCAcctName)
  return pcacctname_.GetNoArena();
}
void GetConnectInfoResponse::set_pcacctname(const ::std::string& value) {
  set_has_pcacctname();
  pcacctname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetConnectInfoResponse.PCAcctName)
}
#if LANG_CXX11
void GetConnectInfoResponse::set_pcacctname(::std::string&& value) {
  set_has_pcacctname();
  pcacctname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetConnectInfoResponse.PCAcctName)
}
#endif
void GetConnectInfoResponse::set_pcacctname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pcacctname();
  pcacctname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetConnectInfoResponse.PCAcctName)
}
void GetConnectInfoResponse::set_pcacctname(const char* value, size_t size) {
  set_has_pcacctname();
  pcacctname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetConnectInfoResponse.PCAcctName)
}
::std::string* GetConnectInfoResponse::mutable_pcacctname() {
  set_has_pcacctname();
  // @@protoc_insertion_point(field_mutable:micromsg.GetConnectInfoResponse.PCAcctName)
  return pcacctname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetConnectInfoResponse::release_pcacctname() {
  // @@protoc_insertion_point(field_release:micromsg.GetConnectInfoResponse.PCAcctName)
  clear_has_pcacctname();
  return pcacctname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetConnectInfoResponse::set_allocated_pcacctname(::std::string* pcacctname) {
  if (pcacctname != NULL) {
    set_has_pcacctname();
  } else {
    clear_has_pcacctname();
  }
  pcacctname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pcacctname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetConnectInfoResponse.PCAcctName)
}

// optional uint32 EncryFlag = 12;
bool GetConnectInfoResponse::has_encryflag() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void GetConnectInfoResponse::set_has_encryflag() {
  _has_bits_[0] |= 0x00000800u;
}
void GetConnectInfoResponse::clear_has_encryflag() {
  _has_bits_[0] &= ~0x00000800u;
}
void GetConnectInfoResponse::clear_encryflag() {
  encryflag_ = 0u;
  clear_has_encryflag();
}
::google::protobuf::uint32 GetConnectInfoResponse::encryflag() const {
  // @@protoc_insertion_point(field_get:micromsg.GetConnectInfoResponse.EncryFlag)
  return encryflag_;
}
void GetConnectInfoResponse::set_encryflag(::google::protobuf::uint32 value) {
  set_has_encryflag();
  encryflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetConnectInfoResponse.EncryFlag)
}

// optional uint32 Scene = 13;
bool GetConnectInfoResponse::has_scene() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void GetConnectInfoResponse::set_has_scene() {
  _has_bits_[0] |= 0x00001000u;
}
void GetConnectInfoResponse::clear_has_scene() {
  _has_bits_[0] &= ~0x00001000u;
}
void GetConnectInfoResponse::clear_scene() {
  scene_ = 0u;
  clear_has_scene();
}
::google::protobuf::uint32 GetConnectInfoResponse::scene() const {
  // @@protoc_insertion_point(field_get:micromsg.GetConnectInfoResponse.Scene)
  return scene_;
}
void GetConnectInfoResponse::set_scene(::google::protobuf::uint32 value) {
  set_has_scene();
  scene_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetConnectInfoResponse.Scene)
}

// optional uint64 DataSize = 14;
bool GetConnectInfoResponse::has_datasize() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void GetConnectInfoResponse::set_has_datasize() {
  _has_bits_[0] |= 0x00002000u;
}
void GetConnectInfoResponse::clear_has_datasize() {
  _has_bits_[0] &= ~0x00002000u;
}
void GetConnectInfoResponse::clear_datasize() {
  datasize_ = GOOGLE_ULONGLONG(0);
  clear_has_datasize();
}
::google::protobuf::uint64 GetConnectInfoResponse::datasize() const {
  // @@protoc_insertion_point(field_get:micromsg.GetConnectInfoResponse.DataSize)
  return datasize_;
}
void GetConnectInfoResponse::set_datasize(::google::protobuf::uint64 value) {
  set_has_datasize();
  datasize_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetConnectInfoResponse.DataSize)
}

// optional string WifiName = 15;
bool GetConnectInfoResponse::has_wifiname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void GetConnectInfoResponse::set_has_wifiname() {
  _has_bits_[0] |= 0x00000040u;
}
void GetConnectInfoResponse::clear_has_wifiname() {
  _has_bits_[0] &= ~0x00000040u;
}
void GetConnectInfoResponse::clear_wifiname() {
  wifiname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_wifiname();
}
const ::std::string& GetConnectInfoResponse::wifiname() const {
  // @@protoc_insertion_point(field_get:micromsg.GetConnectInfoResponse.WifiName)
  return wifiname_.GetNoArena();
}
void GetConnectInfoResponse::set_wifiname(const ::std::string& value) {
  set_has_wifiname();
  wifiname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetConnectInfoResponse.WifiName)
}
#if LANG_CXX11
void GetConnectInfoResponse::set_wifiname(::std::string&& value) {
  set_has_wifiname();
  wifiname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetConnectInfoResponse.WifiName)
}
#endif
void GetConnectInfoResponse::set_wifiname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_wifiname();
  wifiname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetConnectInfoResponse.WifiName)
}
void GetConnectInfoResponse::set_wifiname(const char* value, size_t size) {
  set_has_wifiname();
  wifiname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetConnectInfoResponse.WifiName)
}
::std::string* GetConnectInfoResponse::mutable_wifiname() {
  set_has_wifiname();
  // @@protoc_insertion_point(field_mutable:micromsg.GetConnectInfoResponse.WifiName)
  return wifiname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetConnectInfoResponse::release_wifiname() {
  // @@protoc_insertion_point(field_release:micromsg.GetConnectInfoResponse.WifiName)
  clear_has_wifiname();
  return wifiname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetConnectInfoResponse::set_allocated_wifiname(::std::string* wifiname) {
  if (wifiname != NULL) {
    set_has_wifiname();
  } else {
    clear_has_wifiname();
  }
  wifiname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wifiname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetConnectInfoResponse.WifiName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BackupHeartBeatRequest::kAckFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BackupHeartBeatRequest::BackupHeartBeatRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbackup_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BackupHeartBeatRequest)
}
BackupHeartBeatRequest::BackupHeartBeatRequest(const BackupHeartBeatRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ack_ = from.ack_;
  // @@protoc_insertion_point(copy_constructor:micromsg.BackupHeartBeatRequest)
}

void BackupHeartBeatRequest::SharedCtor() {
  _cached_size_ = 0;
  ack_ = GOOGLE_ULONGLONG(0);
}

BackupHeartBeatRequest::~BackupHeartBeatRequest() {
  // @@protoc_insertion_point(destructor:micromsg.BackupHeartBeatRequest)
  SharedDtor();
}

void BackupHeartBeatRequest::SharedDtor() {
}

void BackupHeartBeatRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BackupHeartBeatRequest::descriptor() {
  protobuf_mmbackup_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbackup_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BackupHeartBeatRequest& BackupHeartBeatRequest::default_instance() {
  protobuf_mmbackup_2eproto::InitDefaults();
  return *internal_default_instance();
}

BackupHeartBeatRequest* BackupHeartBeatRequest::New(::google::protobuf::Arena* arena) const {
  BackupHeartBeatRequest* n = new BackupHeartBeatRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BackupHeartBeatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BackupHeartBeatRequest)
  ack_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BackupHeartBeatRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BackupHeartBeatRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 ack = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_ack();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ack_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BackupHeartBeatRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BackupHeartBeatRequest)
  return false;
#undef DO_
}

void BackupHeartBeatRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BackupHeartBeatRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 ack = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->ack(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BackupHeartBeatRequest)
}

::google::protobuf::uint8* BackupHeartBeatRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BackupHeartBeatRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 ack = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->ack(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BackupHeartBeatRequest)
  return target;
}

size_t BackupHeartBeatRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BackupHeartBeatRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint64 ack = 1;
  if (has_ack()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ack());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BackupHeartBeatRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BackupHeartBeatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BackupHeartBeatRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BackupHeartBeatRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BackupHeartBeatRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BackupHeartBeatRequest)
    MergeFrom(*source);
  }
}

void BackupHeartBeatRequest::MergeFrom(const BackupHeartBeatRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BackupHeartBeatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ack()) {
    set_ack(from.ack());
  }
}

void BackupHeartBeatRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BackupHeartBeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BackupHeartBeatRequest::CopyFrom(const BackupHeartBeatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BackupHeartBeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackupHeartBeatRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void BackupHeartBeatRequest::Swap(BackupHeartBeatRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BackupHeartBeatRequest::InternalSwap(BackupHeartBeatRequest* other) {
  std::swap(ack_, other->ack_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BackupHeartBeatRequest::GetMetadata() const {
  protobuf_mmbackup_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbackup_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BackupHeartBeatRequest

// required uint64 ack = 1;
bool BackupHeartBeatRequest::has_ack() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BackupHeartBeatRequest::set_has_ack() {
  _has_bits_[0] |= 0x00000001u;
}
void BackupHeartBeatRequest::clear_has_ack() {
  _has_bits_[0] &= ~0x00000001u;
}
void BackupHeartBeatRequest::clear_ack() {
  ack_ = GOOGLE_ULONGLONG(0);
  clear_has_ack();
}
::google::protobuf::uint64 BackupHeartBeatRequest::ack() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupHeartBeatRequest.ack)
  return ack_;
}
void BackupHeartBeatRequest::set_ack(::google::protobuf::uint64 value) {
  set_has_ack();
  ack_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BackupHeartBeatRequest.ack)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BackupHeartBeatResponse::kAckFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BackupHeartBeatResponse::BackupHeartBeatResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbackup_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BackupHeartBeatResponse)
}
BackupHeartBeatResponse::BackupHeartBeatResponse(const BackupHeartBeatResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ack_ = from.ack_;
  // @@protoc_insertion_point(copy_constructor:micromsg.BackupHeartBeatResponse)
}

void BackupHeartBeatResponse::SharedCtor() {
  _cached_size_ = 0;
  ack_ = GOOGLE_ULONGLONG(0);
}

BackupHeartBeatResponse::~BackupHeartBeatResponse() {
  // @@protoc_insertion_point(destructor:micromsg.BackupHeartBeatResponse)
  SharedDtor();
}

void BackupHeartBeatResponse::SharedDtor() {
}

void BackupHeartBeatResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BackupHeartBeatResponse::descriptor() {
  protobuf_mmbackup_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbackup_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BackupHeartBeatResponse& BackupHeartBeatResponse::default_instance() {
  protobuf_mmbackup_2eproto::InitDefaults();
  return *internal_default_instance();
}

BackupHeartBeatResponse* BackupHeartBeatResponse::New(::google::protobuf::Arena* arena) const {
  BackupHeartBeatResponse* n = new BackupHeartBeatResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BackupHeartBeatResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BackupHeartBeatResponse)
  ack_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BackupHeartBeatResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BackupHeartBeatResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 ack = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_ack();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ack_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BackupHeartBeatResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BackupHeartBeatResponse)
  return false;
#undef DO_
}

void BackupHeartBeatResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BackupHeartBeatResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 ack = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->ack(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BackupHeartBeatResponse)
}

::google::protobuf::uint8* BackupHeartBeatResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BackupHeartBeatResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 ack = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->ack(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BackupHeartBeatResponse)
  return target;
}

size_t BackupHeartBeatResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BackupHeartBeatResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint64 ack = 1;
  if (has_ack()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ack());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BackupHeartBeatResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BackupHeartBeatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BackupHeartBeatResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BackupHeartBeatResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BackupHeartBeatResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BackupHeartBeatResponse)
    MergeFrom(*source);
  }
}

void BackupHeartBeatResponse::MergeFrom(const BackupHeartBeatResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BackupHeartBeatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ack()) {
    set_ack(from.ack());
  }
}

void BackupHeartBeatResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BackupHeartBeatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BackupHeartBeatResponse::CopyFrom(const BackupHeartBeatResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BackupHeartBeatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackupHeartBeatResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void BackupHeartBeatResponse::Swap(BackupHeartBeatResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BackupHeartBeatResponse::InternalSwap(BackupHeartBeatResponse* other) {
  std::swap(ack_, other->ack_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BackupHeartBeatResponse::GetMetadata() const {
  protobuf_mmbackup_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbackup_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BackupHeartBeatResponse

// required uint64 ack = 1;
bool BackupHeartBeatResponse::has_ack() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BackupHeartBeatResponse::set_has_ack() {
  _has_bits_[0] |= 0x00000001u;
}
void BackupHeartBeatResponse::clear_has_ack() {
  _has_bits_[0] &= ~0x00000001u;
}
void BackupHeartBeatResponse::clear_ack() {
  ack_ = GOOGLE_ULONGLONG(0);
  clear_has_ack();
}
::google::protobuf::uint64 BackupHeartBeatResponse::ack() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupHeartBeatResponse.ack)
  return ack_;
}
void BackupHeartBeatResponse::set_ack(::google::protobuf::uint64 value) {
  set_has_ack();
  ack_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BackupHeartBeatResponse.ack)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace micromsg

// @@protoc_insertion_point(global_scope)
