// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mmbackup.proto

#ifndef PROTOBUF_mmbackup_2eproto__INCLUDED
#define PROTOBUF_mmbackup_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "mmbuiltintype.pb.h"
#include "mmbase.pb.h"
// @@protoc_insertion_point(includes)
namespace micromsg {
class AdditionalContactList;
class AdditionalContactListDefaultTypeInternal;
extern AdditionalContactListDefaultTypeInternal _AdditionalContactList_default_instance_;
class BackupCancelRequest;
class BackupCancelRequestDefaultTypeInternal;
extern BackupCancelRequestDefaultTypeInternal _BackupCancelRequest_default_instance_;
class BackupCommandRequest;
class BackupCommandRequestDefaultTypeInternal;
extern BackupCommandRequestDefaultTypeInternal _BackupCommandRequest_default_instance_;
class BackupCommandResponse;
class BackupCommandResponseDefaultTypeInternal;
extern BackupCommandResponseDefaultTypeInternal _BackupCommandResponse_default_instance_;
class BackupFinishRequest;
class BackupFinishRequestDefaultTypeInternal;
extern BackupFinishRequestDefaultTypeInternal _BackupFinishRequest_default_instance_;
class BackupHeartBeatRequest;
class BackupHeartBeatRequestDefaultTypeInternal;
extern BackupHeartBeatRequestDefaultTypeInternal _BackupHeartBeatRequest_default_instance_;
class BackupHeartBeatResponse;
class BackupHeartBeatResponseDefaultTypeInternal;
extern BackupHeartBeatResponseDefaultTypeInternal _BackupHeartBeatResponse_default_instance_;
class BackupReportItem;
class BackupReportItemDefaultTypeInternal;
extern BackupReportItemDefaultTypeInternal _BackupReportItem_default_instance_;
class BackupReportList;
class BackupReportListDefaultTypeInternal;
extern BackupReportListDefaultTypeInternal _BackupReportList_default_instance_;
class BackupRequestSession;
class BackupRequestSessionDefaultTypeInternal;
extern BackupRequestSessionDefaultTypeInternal _BackupRequestSession_default_instance_;
class BackupRequestSessionResponse;
class BackupRequestSessionResponseDefaultTypeInternal;
extern BackupRequestSessionResponseDefaultTypeInternal _BackupRequestSessionResponse_default_instance_;
class BackupStartGeneralInfo;
class BackupStartGeneralInfoDefaultTypeInternal;
extern BackupStartGeneralInfoDefaultTypeInternal _BackupStartGeneralInfo_default_instance_;
class BackupStartRequest;
class BackupStartRequestDefaultTypeInternal;
extern BackupStartRequestDefaultTypeInternal _BackupStartRequest_default_instance_;
class BackupStartResponse;
class BackupStartResponseDefaultTypeInternal;
extern BackupStartResponseDefaultTypeInternal _BackupStartResponse_default_instance_;
class BakChatCreateQRCodeRequest;
class BakChatCreateQRCodeRequestDefaultTypeInternal;
extern BakChatCreateQRCodeRequestDefaultTypeInternal _BakChatCreateQRCodeRequest_default_instance_;
class BakChatCreateQRcodeResponse;
class BakChatCreateQRcodeResponseDefaultTypeInternal;
extern BakChatCreateQRcodeResponseDefaultTypeInternal _BakChatCreateQRcodeResponse_default_instance_;
class BaseRequest;
class BaseRequestDefaultTypeInternal;
extern BaseRequestDefaultTypeInternal _BaseRequest_default_instance_;
class BaseResponse;
class BaseResponseDefaultTypeInternal;
extern BaseResponseDefaultTypeInternal _BaseResponse_default_instance_;
class BindEmailRequest;
class BindEmailRequestDefaultTypeInternal;
extern BindEmailRequestDefaultTypeInternal _BindEmailRequest_default_instance_;
class BindEmailResponse;
class BindEmailResponseDefaultTypeInternal;
extern BindEmailResponseDefaultTypeInternal _BindEmailResponse_default_instance_;
class BuiltinIP;
class BuiltinIPDefaultTypeInternal;
extern BuiltinIPDefaultTypeInternal _BuiltinIP_default_instance_;
class BuiltinIPList;
class BuiltinIPListDefaultTypeInternal;
extern BuiltinIPListDefaultTypeInternal _BuiltinIPList_default_instance_;
class CDNDnsInfo;
class CDNDnsInfoDefaultTypeInternal;
extern CDNDnsInfoDefaultTypeInternal _CDNDnsInfo_default_instance_;
class ChatRoomMemberData;
class ChatRoomMemberDataDefaultTypeInternal;
extern ChatRoomMemberDataDefaultTypeInternal _ChatRoomMemberData_default_instance_;
class ChatRoomMemberInfo;
class ChatRoomMemberInfoDefaultTypeInternal;
extern ChatRoomMemberInfoDefaultTypeInternal _ChatRoomMemberInfo_default_instance_;
class CmdItem;
class CmdItemDefaultTypeInternal;
extern CmdItemDefaultTypeInternal _CmdItem_default_instance_;
class CmdList;
class CmdListDefaultTypeInternal;
extern CmdListDefaultTypeInternal _CmdList_default_instance_;
class ConnectInfoAddr;
class ConnectInfoAddrDefaultTypeInternal;
extern ConnectInfoAddrDefaultTypeInternal _ConnectInfoAddr_default_instance_;
class CustomizedInfo;
class CustomizedInfoDefaultTypeInternal;
extern CustomizedInfoDefaultTypeInternal _CustomizedInfo_default_instance_;
class DataConfigInf;
class DataConfigInfDefaultTypeInternal;
extern DataConfigInfDefaultTypeInternal _DataConfigInf_default_instance_;
class DelMemberReq;
class DelMemberReqDefaultTypeInternal;
extern DelMemberReqDefaultTypeInternal _DelMemberReq_default_instance_;
class DelMemberResp;
class DelMemberRespDefaultTypeInternal;
extern DelMemberRespDefaultTypeInternal _DelMemberResp_default_instance_;
class DisturbSetting;
class DisturbSettingDefaultTypeInternal;
extern DisturbSettingDefaultTypeInternal _DisturbSetting_default_instance_;
class DisturbTimeSpan;
class DisturbTimeSpanDefaultTypeInternal;
extern DisturbTimeSpanDefaultTypeInternal _DisturbTimeSpan_default_instance_;
class GetConnectInfoRequest;
class GetConnectInfoRequestDefaultTypeInternal;
extern GetConnectInfoRequestDefaultTypeInternal _GetConnectInfoRequest_default_instance_;
class GetConnectInfoResponse;
class GetConnectInfoResponseDefaultTypeInternal;
extern GetConnectInfoResponseDefaultTypeInternal _GetConnectInfoResponse_default_instance_;
class GetLocationRequest;
class GetLocationRequestDefaultTypeInternal;
extern GetLocationRequestDefaultTypeInternal _GetLocationRequest_default_instance_;
class GetLocationResponse;
class GetLocationResponseDefaultTypeInternal;
extern GetLocationResponseDefaultTypeInternal _GetLocationResponse_default_instance_;
class GmailInfo;
class GmailInfoDefaultTypeInternal;
extern GmailInfoDefaultTypeInternal _GmailInfo_default_instance_;
class GmailList;
class GmailListDefaultTypeInternal;
extern GmailListDefaultTypeInternal _GmailList_default_instance_;
class HardDevice;
class HardDeviceDefaultTypeInternal;
extern HardDeviceDefaultTypeInternal _HardDevice_default_instance_;
class Host;
class HostDefaultTypeInternal;
extern HostDefaultTypeInternal _Host_default_instance_;
class HostList;
class HostListDefaultTypeInternal;
extern HostListDefaultTypeInternal _HostList_default_instance_;
class LinkedinContactItem;
class LinkedinContactItemDefaultTypeInternal;
extern LinkedinContactItemDefaultTypeInternal _LinkedinContactItem_default_instance_;
class MemberReq;
class MemberReqDefaultTypeInternal;
extern MemberReqDefaultTypeInternal _MemberReq_default_instance_;
class MemberResp;
class MemberRespDefaultTypeInternal;
extern MemberRespDefaultTypeInternal _MemberResp_default_instance_;
class ModContact;
class ModContactDefaultTypeInternal;
extern ModContactDefaultTypeInternal _ModContact_default_instance_;
class ModUserInfo;
class ModUserInfoDefaultTypeInternal;
extern ModUserInfoDefaultTypeInternal _ModUserInfo_default_instance_;
class NetworkControl;
class NetworkControlDefaultTypeInternal;
extern NetworkControlDefaultTypeInternal _NetworkControl_default_instance_;
class PacketAuthenticateRequest;
class PacketAuthenticateRequestDefaultTypeInternal;
extern PacketAuthenticateRequestDefaultTypeInternal _PacketAuthenticateRequest_default_instance_;
class PacketAuthenticateResponse;
class PacketAuthenticateResponseDefaultTypeInternal;
extern PacketAuthenticateResponseDefaultTypeInternal _PacketAuthenticateResponse_default_instance_;
class PacketBackupDataPush;
class PacketBackupDataPushDefaultTypeInternal;
extern PacketBackupDataPushDefaultTypeInternal _PacketBackupDataPush_default_instance_;
class PacketBackupDataResponse;
class PacketBackupDataResponseDefaultTypeInternal;
extern PacketBackupDataResponseDefaultTypeInternal _PacketBackupDataResponse_default_instance_;
class PacketBackupDataTag;
class PacketBackupDataTagDefaultTypeInternal;
extern PacketBackupDataTagDefaultTypeInternal _PacketBackupDataTag_default_instance_;
class PacketBackupDataTagResponse;
class PacketBackupDataTagResponseDefaultTypeInternal;
extern PacketBackupDataTagResponseDefaultTypeInternal _PacketBackupDataTagResponse_default_instance_;
class PacketSvrIDRequest;
class PacketSvrIDRequestDefaultTypeInternal;
extern PacketSvrIDRequestDefaultTypeInternal _PacketSvrIDRequest_default_instance_;
class PacketSvrIDResponse;
class PacketSvrIDResponseDefaultTypeInternal;
extern PacketSvrIDResponseDefaultTypeInternal _PacketSvrIDResponse_default_instance_;
class PatternLockInfo;
class PatternLockInfoDefaultTypeInternal;
extern PatternLockInfoDefaultTypeInternal _PatternLockInfo_default_instance_;
class PluginKey;
class PluginKeyDefaultTypeInternal;
extern PluginKeyDefaultTypeInternal _PluginKey_default_instance_;
class PluginKeyList;
class PluginKeyListDefaultTypeInternal;
extern PluginKeyListDefaultTypeInternal _PluginKeyList_default_instance_;
class PositionInfo;
class PositionInfoDefaultTypeInternal;
extern PositionInfoDefaultTypeInternal _PositionInfo_default_instance_;
class RoomInfo;
class RoomInfoDefaultTypeInternal;
extern RoomInfoDefaultTypeInternal _RoomInfo_default_instance_;
class SKBuiltinBuffer_t;
class SKBuiltinBuffer_tDefaultTypeInternal;
extern SKBuiltinBuffer_tDefaultTypeInternal _SKBuiltinBuffer_t_default_instance_;
class SKBuiltinChar_t;
class SKBuiltinChar_tDefaultTypeInternal;
extern SKBuiltinChar_tDefaultTypeInternal _SKBuiltinChar_t_default_instance_;
class SKBuiltinDouble64_t;
class SKBuiltinDouble64_tDefaultTypeInternal;
extern SKBuiltinDouble64_tDefaultTypeInternal _SKBuiltinDouble64_t_default_instance_;
class SKBuiltinFloat32_t;
class SKBuiltinFloat32_tDefaultTypeInternal;
extern SKBuiltinFloat32_tDefaultTypeInternal _SKBuiltinFloat32_t_default_instance_;
class SKBuiltinInt16_t;
class SKBuiltinInt16_tDefaultTypeInternal;
extern SKBuiltinInt16_tDefaultTypeInternal _SKBuiltinInt16_t_default_instance_;
class SKBuiltinInt32_t;
class SKBuiltinInt32_tDefaultTypeInternal;
extern SKBuiltinInt32_tDefaultTypeInternal _SKBuiltinInt32_t_default_instance_;
class SKBuiltinInt64_t;
class SKBuiltinInt64_tDefaultTypeInternal;
extern SKBuiltinInt64_tDefaultTypeInternal _SKBuiltinInt64_t_default_instance_;
class SKBuiltinInt8_t;
class SKBuiltinInt8_tDefaultTypeInternal;
extern SKBuiltinInt8_tDefaultTypeInternal _SKBuiltinInt8_t_default_instance_;
class SKBuiltinString_t;
class SKBuiltinString_tDefaultTypeInternal;
extern SKBuiltinString_tDefaultTypeInternal _SKBuiltinString_t_default_instance_;
class SKBuiltinUchar_t;
class SKBuiltinUchar_tDefaultTypeInternal;
extern SKBuiltinUchar_tDefaultTypeInternal _SKBuiltinUchar_t_default_instance_;
class SKBuiltinUint16_t;
class SKBuiltinUint16_tDefaultTypeInternal;
extern SKBuiltinUint16_tDefaultTypeInternal _SKBuiltinUint16_t_default_instance_;
class SKBuiltinUint32_t;
class SKBuiltinUint32_tDefaultTypeInternal;
extern SKBuiltinUint32_tDefaultTypeInternal _SKBuiltinUint32_t_default_instance_;
class SKBuiltinUint64_t;
class SKBuiltinUint64_tDefaultTypeInternal;
extern SKBuiltinUint64_tDefaultTypeInternal _SKBuiltinUint64_t_default_instance_;
class SKBuiltinUint8_t;
class SKBuiltinUint8_tDefaultTypeInternal;
extern SKBuiltinUint8_tDefaultTypeInternal _SKBuiltinUint8_t_default_instance_;
class SafeDevice;
class SafeDeviceDefaultTypeInternal;
extern SafeDeviceDefaultTypeInternal _SafeDevice_default_instance_;
class SafeDeviceList;
class SafeDeviceListDefaultTypeInternal;
extern SafeDeviceListDefaultTypeInternal _SafeDeviceList_default_instance_;
class ShakeSyncRequest;
class ShakeSyncRequestDefaultTypeInternal;
extern ShakeSyncRequestDefaultTypeInternal _ShakeSyncRequest_default_instance_;
class ShakeSyncResponse;
class ShakeSyncResponseDefaultTypeInternal;
extern ShakeSyncResponseDefaultTypeInternal _ShakeSyncResponse_default_instance_;
class ShowStyleKey;
class ShowStyleKeyDefaultTypeInternal;
extern ShowStyleKeyDefaultTypeInternal _ShowStyleKey_default_instance_;
class SnsUserInfo;
class SnsUserInfoDefaultTypeInternal;
extern SnsUserInfoDefaultTypeInternal _SnsUserInfo_default_instance_;
class StyleKeyVal;
class StyleKeyValDefaultTypeInternal;
extern StyleKeyValDefaultTypeInternal _StyleKeyVal_default_instance_;
class UserInfoExt;
class UserInfoExtDefaultTypeInternal;
extern UserInfoExtDefaultTypeInternal _UserInfoExt_default_instance_;
}  // namespace micromsg

namespace micromsg {

namespace protobuf_mmbackup_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_mmbackup_2eproto

enum TransferTypeEnum {
  TRANSFER_NEW = 0,
  TRANSFER_ADDON = 1
};
bool TransferTypeEnum_IsValid(int value);
const TransferTypeEnum TransferTypeEnum_MIN = TRANSFER_NEW;
const TransferTypeEnum TransferTypeEnum_MAX = TRANSFER_ADDON;
const int TransferTypeEnum_ARRAYSIZE = TransferTypeEnum_MAX + 1;

const ::google::protobuf::EnumDescriptor* TransferTypeEnum_descriptor();
inline const ::std::string& TransferTypeEnum_Name(TransferTypeEnum value) {
  return ::google::protobuf::internal::NameOfEnum(
    TransferTypeEnum_descriptor(), value);
}
inline bool TransferTypeEnum_Parse(
    const ::std::string& name, TransferTypeEnum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TransferTypeEnum>(
    TransferTypeEnum_descriptor(), name, value);
}
enum CommandTypeEnum {
  COMMAND_REQUEST_TO_BACKUP = 1,
  COMMAND_CONFIRM_BACKUP = 2,
  COMMAND_REQUEST_TO_RECOVER = 3,
  COMMAND_CONFIRM_RECOVER = 4,
  COMMAND_REQUEST_TO_CONTINUE_BACKUP = 5,
  COMMAND_CONFIRM_CONTINUE_BACKUP = 6,
  COMMAND_REQUEST_TO_CONTINUE_RECOVER = 7,
  COMMAND_CONFIRM_CONTINUE_RECOVER = 8
};
bool CommandTypeEnum_IsValid(int value);
const CommandTypeEnum CommandTypeEnum_MIN = COMMAND_REQUEST_TO_BACKUP;
const CommandTypeEnum CommandTypeEnum_MAX = COMMAND_CONFIRM_CONTINUE_RECOVER;
const int CommandTypeEnum_ARRAYSIZE = CommandTypeEnum_MAX + 1;

const ::google::protobuf::EnumDescriptor* CommandTypeEnum_descriptor();
inline const ::std::string& CommandTypeEnum_Name(CommandTypeEnum value) {
  return ::google::protobuf::internal::NameOfEnum(
    CommandTypeEnum_descriptor(), value);
}
inline bool CommandTypeEnum_Parse(
    const ::std::string& name, CommandTypeEnum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommandTypeEnum>(
    CommandTypeEnum_descriptor(), name, value);
}
enum StartResponseStatusEnum {
  START_RESPONSE_SUCCESS = 0,
  START_RESPONSE_ID_WRONG = 1,
  START_RESPONSE_SIZE_WRONG = 2
};
bool StartResponseStatusEnum_IsValid(int value);
const StartResponseStatusEnum StartResponseStatusEnum_MIN = START_RESPONSE_SUCCESS;
const StartResponseStatusEnum StartResponseStatusEnum_MAX = START_RESPONSE_SIZE_WRONG;
const int StartResponseStatusEnum_ARRAYSIZE = StartResponseStatusEnum_MAX + 1;

const ::google::protobuf::EnumDescriptor* StartResponseStatusEnum_descriptor();
inline const ::std::string& StartResponseStatusEnum_Name(StartResponseStatusEnum value) {
  return ::google::protobuf::internal::NameOfEnum(
    StartResponseStatusEnum_descriptor(), value);
}
inline bool StartResponseStatusEnum_Parse(
    const ::std::string& name, StartResponseStatusEnum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StartResponseStatusEnum>(
    StartResponseStatusEnum_descriptor(), name, value);
}
// ===================================================================

class ConnectInfoAddr : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.ConnectInfoAddr) */ {
 public:
  ConnectInfoAddr();
  virtual ~ConnectInfoAddr();

  ConnectInfoAddr(const ConnectInfoAddr& from);

  inline ConnectInfoAddr& operator=(const ConnectInfoAddr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectInfoAddr& default_instance();

  static inline const ConnectInfoAddr* internal_default_instance() {
    return reinterpret_cast<const ConnectInfoAddr*>(
               &_ConnectInfoAddr_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ConnectInfoAddr* other);

  // implements Message ----------------------------------------------

  inline ConnectInfoAddr* New() const PROTOBUF_FINAL { return New(NULL); }

  ConnectInfoAddr* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConnectInfoAddr& from);
  void MergeFrom(const ConnectInfoAddr& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConnectInfoAddr* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 Port = 2;
  int port_size() const;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::uint32 port(int index) const;
  void set_port(int index, ::google::protobuf::uint32 value);
  void add_port(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      port() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_port();

  // optional string IP = 1;
  bool has_ip() const;
  void clear_ip();
  static const int kIPFieldNumber = 1;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // optional uint32 PortCount = 3;
  bool has_portcount() const;
  void clear_portcount();
  static const int kPortCountFieldNumber = 3;
  ::google::protobuf::uint32 portcount() const;
  void set_portcount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.ConnectInfoAddr)
 private:
  void set_has_ip();
  void clear_has_ip();
  void set_has_portcount();
  void clear_has_portcount();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > port_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::uint32 portcount_;
  friend struct protobuf_mmbackup_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BakChatCreateQRCodeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.BakChatCreateQRCodeRequest) */ {
 public:
  BakChatCreateQRCodeRequest();
  virtual ~BakChatCreateQRCodeRequest();

  BakChatCreateQRCodeRequest(const BakChatCreateQRCodeRequest& from);

  inline BakChatCreateQRCodeRequest& operator=(const BakChatCreateQRCodeRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BakChatCreateQRCodeRequest& default_instance();

  static inline const BakChatCreateQRCodeRequest* internal_default_instance() {
    return reinterpret_cast<const BakChatCreateQRCodeRequest*>(
               &_BakChatCreateQRCodeRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(BakChatCreateQRCodeRequest* other);

  // implements Message ----------------------------------------------

  inline BakChatCreateQRCodeRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  BakChatCreateQRCodeRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BakChatCreateQRCodeRequest& from);
  void MergeFrom(const BakChatCreateQRCodeRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BakChatCreateQRCodeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.ConnectInfoAddr AddrList = 3;
  int addrlist_size() const;
  void clear_addrlist();
  static const int kAddrListFieldNumber = 3;
  const ::micromsg::ConnectInfoAddr& addrlist(int index) const;
  ::micromsg::ConnectInfoAddr* mutable_addrlist(int index);
  ::micromsg::ConnectInfoAddr* add_addrlist();
  ::google::protobuf::RepeatedPtrField< ::micromsg::ConnectInfoAddr >*
      mutable_addrlist();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::ConnectInfoAddr >&
      addrlist() const;

  // optional string PCName = 4;
  bool has_pcname() const;
  void clear_pcname();
  static const int kPCNameFieldNumber = 4;
  const ::std::string& pcname() const;
  void set_pcname(const ::std::string& value);
  #if LANG_CXX11
  void set_pcname(::std::string&& value);
  #endif
  void set_pcname(const char* value);
  void set_pcname(const char* value, size_t size);
  ::std::string* mutable_pcname();
  ::std::string* release_pcname();
  void set_allocated_pcname(::std::string* pcname);

  // optional string PCAcctName = 5;
  bool has_pcacctname() const;
  void clear_pcacctname();
  static const int kPCAcctNameFieldNumber = 5;
  const ::std::string& pcacctname() const;
  void set_pcacctname(const ::std::string& value);
  #if LANG_CXX11
  void set_pcacctname(::std::string&& value);
  #endif
  void set_pcacctname(const char* value);
  void set_pcacctname(const char* value, size_t size);
  ::std::string* mutable_pcacctname();
  ::std::string* release_pcacctname();
  void set_allocated_pcacctname(::std::string* pcacctname);

  // optional string WifiName = 8;
  bool has_wifiname() const;
  void clear_wifiname();
  static const int kWifiNameFieldNumber = 8;
  const ::std::string& wifiname() const;
  void set_wifiname(const ::std::string& value);
  #if LANG_CXX11
  void set_wifiname(::std::string&& value);
  #endif
  void set_wifiname(const char* value);
  void set_wifiname(const char* value, size_t size);
  ::std::string* mutable_wifiname();
  ::std::string* release_wifiname();
  void set_allocated_wifiname(::std::string* wifiname);

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required uint32 AddrCount = 2;
  bool has_addrcount() const;
  void clear_addrcount();
  static const int kAddrCountFieldNumber = 2;
  ::google::protobuf::uint32 addrcount() const;
  void set_addrcount(::google::protobuf::uint32 value);

  // required uint32 Scene = 6;
  bool has_scene() const;
  void clear_scene();
  static const int kSceneFieldNumber = 6;
  ::google::protobuf::uint32 scene() const;
  void set_scene(::google::protobuf::uint32 value);

  // optional uint64 DataSize = 7;
  bool has_datasize() const;
  void clear_datasize();
  static const int kDataSizeFieldNumber = 7;
  ::google::protobuf::uint64 datasize() const;
  void set_datasize(::google::protobuf::uint64 value);

  // optional int32 Op = 9;
  bool has_op() const;
  void clear_op();
  static const int kOpFieldNumber = 9;
  ::google::protobuf::int32 op() const;
  void set_op(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:micromsg.BakChatCreateQRCodeRequest)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_addrcount();
  void clear_has_addrcount();
  void set_has_pcname();
  void clear_has_pcname();
  void set_has_pcacctname();
  void clear_has_pcacctname();
  void set_has_scene();
  void clear_has_scene();
  void set_has_datasize();
  void clear_has_datasize();
  void set_has_wifiname();
  void clear_has_wifiname();
  void set_has_op();
  void clear_has_op();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::ConnectInfoAddr > addrlist_;
  ::google::protobuf::internal::ArenaStringPtr pcname_;
  ::google::protobuf::internal::ArenaStringPtr pcacctname_;
  ::google::protobuf::internal::ArenaStringPtr wifiname_;
  ::micromsg::BaseRequest* baserequest_;
  ::google::protobuf::uint32 addrcount_;
  ::google::protobuf::uint32 scene_;
  ::google::protobuf::uint64 datasize_;
  ::google::protobuf::int32 op_;
  friend struct protobuf_mmbackup_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BakChatCreateQRcodeResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.BakChatCreateQRcodeResponse) */ {
 public:
  BakChatCreateQRcodeResponse();
  virtual ~BakChatCreateQRcodeResponse();

  BakChatCreateQRcodeResponse(const BakChatCreateQRcodeResponse& from);

  inline BakChatCreateQRcodeResponse& operator=(const BakChatCreateQRcodeResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BakChatCreateQRcodeResponse& default_instance();

  static inline const BakChatCreateQRcodeResponse* internal_default_instance() {
    return reinterpret_cast<const BakChatCreateQRcodeResponse*>(
               &_BakChatCreateQRcodeResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(BakChatCreateQRcodeResponse* other);

  // implements Message ----------------------------------------------

  inline BakChatCreateQRcodeResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  BakChatCreateQRcodeResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BakChatCreateQRcodeResponse& from);
  void MergeFrom(const BakChatCreateQRcodeResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BakChatCreateQRcodeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string QRCodeUrl = 3;
  bool has_qrcodeurl() const;
  void clear_qrcodeurl();
  static const int kQRCodeUrlFieldNumber = 3;
  const ::std::string& qrcodeurl() const;
  void set_qrcodeurl(const ::std::string& value);
  #if LANG_CXX11
  void set_qrcodeurl(::std::string&& value);
  #endif
  void set_qrcodeurl(const char* value);
  void set_qrcodeurl(const char* value, size_t size);
  ::std::string* mutable_qrcodeurl();
  ::std::string* release_qrcodeurl();
  void set_allocated_qrcodeurl(::std::string* qrcodeurl);

  // optional string Hello = 5;
  bool has_hello() const;
  void clear_hello();
  static const int kHelloFieldNumber = 5;
  const ::std::string& hello() const;
  void set_hello(const ::std::string& value);
  #if LANG_CXX11
  void set_hello(::std::string&& value);
  #endif
  void set_hello(const char* value);
  void set_hello(const char* value, size_t size);
  ::std::string* mutable_hello();
  ::std::string* release_hello();
  void set_allocated_hello(::std::string* hello);

  // optional string OK = 6;
  bool has_ok() const;
  void clear_ok();
  static const int kOKFieldNumber = 6;
  const ::std::string& ok() const;
  void set_ok(const ::std::string& value);
  #if LANG_CXX11
  void set_ok(::std::string&& value);
  #endif
  void set_ok(const char* value);
  void set_ok(const char* value, size_t size);
  ::std::string* mutable_ok();
  ::std::string* release_ok();
  void set_allocated_ok(::std::string* ok);

  // optional string ID = 8;
  bool has_id() const;
  void clear_id();
  static const int kIDFieldNumber = 8;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string Tickit = 9;
  bool has_tickit() const;
  void clear_tickit();
  static const int kTickitFieldNumber = 9;
  const ::std::string& tickit() const;
  void set_tickit(const ::std::string& value);
  #if LANG_CXX11
  void set_tickit(::std::string&& value);
  #endif
  void set_tickit(const char* value);
  void set_tickit(const char* value, size_t size);
  ::std::string* mutable_tickit();
  ::std::string* release_tickit();
  void set_allocated_tickit(::std::string* tickit);

  // required .micromsg.SKBuiltinBuffer_t QRCodeBuffer = 2;
  bool has_qrcodebuffer() const;
  void clear_qrcodebuffer();
  static const int kQRCodeBufferFieldNumber = 2;
  const ::micromsg::SKBuiltinBuffer_t& qrcodebuffer() const;
  ::micromsg::SKBuiltinBuffer_t* mutable_qrcodebuffer();
  ::micromsg::SKBuiltinBuffer_t* release_qrcodebuffer();
  void set_allocated_qrcodebuffer(::micromsg::SKBuiltinBuffer_t* qrcodebuffer);

  // required .micromsg.SKBuiltinBuffer_t Key = 4;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 4;
  const ::micromsg::SKBuiltinBuffer_t& key() const;
  ::micromsg::SKBuiltinBuffer_t* mutable_key();
  ::micromsg::SKBuiltinBuffer_t* release_key();
  void set_allocated_key(::micromsg::SKBuiltinBuffer_t* key);

  // required uint32 Ret = 1;
  bool has_ret() const;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::google::protobuf::uint32 ret() const;
  void set_ret(::google::protobuf::uint32 value);

  // required uint32 EncryFlag = 7;
  bool has_encryflag() const;
  void clear_encryflag();
  static const int kEncryFlagFieldNumber = 7;
  ::google::protobuf::uint32 encryflag() const;
  void set_encryflag(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.BakChatCreateQRcodeResponse)
 private:
  void set_has_ret();
  void clear_has_ret();
  void set_has_qrcodebuffer();
  void clear_has_qrcodebuffer();
  void set_has_qrcodeurl();
  void clear_has_qrcodeurl();
  void set_has_key();
  void clear_has_key();
  void set_has_hello();
  void clear_has_hello();
  void set_has_ok();
  void clear_has_ok();
  void set_has_encryflag();
  void clear_has_encryflag();
  void set_has_id();
  void clear_has_id();
  void set_has_tickit();
  void clear_has_tickit();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr qrcodeurl_;
  ::google::protobuf::internal::ArenaStringPtr hello_;
  ::google::protobuf::internal::ArenaStringPtr ok_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr tickit_;
  ::micromsg::SKBuiltinBuffer_t* qrcodebuffer_;
  ::micromsg::SKBuiltinBuffer_t* key_;
  ::google::protobuf::uint32 ret_;
  ::google::protobuf::uint32 encryflag_;
  friend struct protobuf_mmbackup_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PacketAuthenticateRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.PacketAuthenticateRequest) */ {
 public:
  PacketAuthenticateRequest();
  virtual ~PacketAuthenticateRequest();

  PacketAuthenticateRequest(const PacketAuthenticateRequest& from);

  inline PacketAuthenticateRequest& operator=(const PacketAuthenticateRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PacketAuthenticateRequest& default_instance();

  static inline const PacketAuthenticateRequest* internal_default_instance() {
    return reinterpret_cast<const PacketAuthenticateRequest*>(
               &_PacketAuthenticateRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(PacketAuthenticateRequest* other);

  // implements Message ----------------------------------------------

  inline PacketAuthenticateRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  PacketAuthenticateRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PacketAuthenticateRequest& from);
  void MergeFrom(const PacketAuthenticateRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PacketAuthenticateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ID = 2;
  bool has_id() const;
  void clear_id();
  static const int kIDFieldNumber = 2;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional bytes Data = 3;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // required int32 Step = 1;
  bool has_step() const;
  void clear_step();
  static const int kStepFieldNumber = 1;
  ::google::protobuf::int32 step() const;
  void set_step(::google::protobuf::int32 value);

  // optional int32 Version = 4;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 4;
  ::google::protobuf::int32 version() const;
  void set_version(::google::protobuf::int32 value);

  // optional int32 Type = 5;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // optional int32 SupportExt = 6;
  bool has_supportext() const;
  void clear_supportext();
  static const int kSupportExtFieldNumber = 6;
  ::google::protobuf::int32 supportext() const;
  void set_supportext(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:micromsg.PacketAuthenticateRequest)
 private:
  void set_has_step();
  void clear_has_step();
  void set_has_id();
  void clear_has_id();
  void set_has_data();
  void clear_has_data();
  void set_has_version();
  void clear_has_version();
  void set_has_type();
  void clear_has_type();
  void set_has_supportext();
  void clear_has_supportext();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::int32 step_;
  ::google::protobuf::int32 version_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 supportext_;
  friend struct protobuf_mmbackup_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PacketAuthenticateResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.PacketAuthenticateResponse) */ {
 public:
  PacketAuthenticateResponse();
  virtual ~PacketAuthenticateResponse();

  PacketAuthenticateResponse(const PacketAuthenticateResponse& from);

  inline PacketAuthenticateResponse& operator=(const PacketAuthenticateResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PacketAuthenticateResponse& default_instance();

  static inline const PacketAuthenticateResponse* internal_default_instance() {
    return reinterpret_cast<const PacketAuthenticateResponse*>(
               &_PacketAuthenticateResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(PacketAuthenticateResponse* other);

  // implements Message ----------------------------------------------

  inline PacketAuthenticateResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  PacketAuthenticateResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PacketAuthenticateResponse& from);
  void MergeFrom(const PacketAuthenticateResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PacketAuthenticateResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ID = 3;
  bool has_id() const;
  void clear_id();
  static const int kIDFieldNumber = 3;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional bytes Data = 4;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 4;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // required int32 Step = 1;
  bool has_step() const;
  void clear_step();
  static const int kStepFieldNumber = 1;
  ::google::protobuf::int32 step() const;
  void set_step(::google::protobuf::int32 value);

  // required int32 Status = 2;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  ::google::protobuf::int32 status() const;
  void set_status(::google::protobuf::int32 value);

  // optional int32 Version = 5;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 5;
  ::google::protobuf::int32 version() const;
  void set_version(::google::protobuf::int32 value);

  // optional int32 Type = 6;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 6;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // optional int32 SupportExt = 7;
  bool has_supportext() const;
  void clear_supportext();
  static const int kSupportExtFieldNumber = 7;
  ::google::protobuf::int32 supportext() const;
  void set_supportext(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:micromsg.PacketAuthenticateResponse)
 private:
  void set_has_step();
  void clear_has_step();
  void set_has_status();
  void clear_has_status();
  void set_has_id();
  void clear_has_id();
  void set_has_data();
  void clear_has_data();
  void set_has_version();
  void clear_has_version();
  void set_has_type();
  void clear_has_type();
  void set_has_supportext();
  void clear_has_supportext();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::int32 step_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::int32 version_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 supportext_;
  friend struct protobuf_mmbackup_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BackupStartGeneralInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.BackupStartGeneralInfo) */ {
 public:
  BackupStartGeneralInfo();
  virtual ~BackupStartGeneralInfo();

  BackupStartGeneralInfo(const BackupStartGeneralInfo& from);

  inline BackupStartGeneralInfo& operator=(const BackupStartGeneralInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BackupStartGeneralInfo& default_instance();

  static inline const BackupStartGeneralInfo* internal_default_instance() {
    return reinterpret_cast<const BackupStartGeneralInfo*>(
               &_BackupStartGeneralInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(BackupStartGeneralInfo* other);

  // implements Message ----------------------------------------------

  inline BackupStartGeneralInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  BackupStartGeneralInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BackupStartGeneralInfo& from);
  void MergeFrom(const BackupStartGeneralInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BackupStartGeneralInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string DeviceID = 1;
  bool has_deviceid() const;
  void clear_deviceid();
  static const int kDeviceIDFieldNumber = 1;
  const ::std::string& deviceid() const;
  void set_deviceid(const ::std::string& value);
  #if LANG_CXX11
  void set_deviceid(::std::string&& value);
  #endif
  void set_deviceid(const char* value);
  void set_deviceid(const char* value, size_t size);
  ::std::string* mutable_deviceid();
  ::std::string* release_deviceid();
  void set_allocated_deviceid(::std::string* deviceid);

  // required string DeviceName = 2;
  bool has_devicename() const;
  void clear_devicename();
  static const int kDeviceNameFieldNumber = 2;
  const ::std::string& devicename() const;
  void set_devicename(const ::std::string& value);
  #if LANG_CXX11
  void set_devicename(::std::string&& value);
  #endif
  void set_devicename(const char* value);
  void set_devicename(const char* value, size_t size);
  ::std::string* mutable_devicename();
  ::std::string* release_devicename();
  void set_allocated_devicename(::std::string* devicename);

  // required string Model = 3;
  bool has_model() const;
  void clear_model();
  static const int kModelFieldNumber = 3;
  const ::std::string& model() const;
  void set_model(const ::std::string& value);
  #if LANG_CXX11
  void set_model(::std::string&& value);
  #endif
  void set_model(const char* value);
  void set_model(const char* value, size_t size);
  ::std::string* mutable_model();
  ::std::string* release_model();
  void set_allocated_model(::std::string* model);

  // required string SystemName = 4;
  bool has_systemname() const;
  void clear_systemname();
  static const int kSystemNameFieldNumber = 4;
  const ::std::string& systemname() const;
  void set_systemname(const ::std::string& value);
  #if LANG_CXX11
  void set_systemname(::std::string&& value);
  #endif
  void set_systemname(const char* value);
  void set_systemname(const char* value, size_t size);
  ::std::string* mutable_systemname();
  ::std::string* release_systemname();
  void set_allocated_systemname(::std::string* systemname);

  // required string SystemVersion = 5;
  bool has_systemversion() const;
  void clear_systemversion();
  static const int kSystemVersionFieldNumber = 5;
  const ::std::string& systemversion() const;
  void set_systemversion(const ::std::string& value);
  #if LANG_CXX11
  void set_systemversion(::std::string&& value);
  #endif
  void set_systemversion(const char* value);
  void set_systemversion(const char* value, size_t size);
  ::std::string* mutable_systemversion();
  ::std::string* release_systemversion();
  void set_allocated_systemversion(::std::string* systemversion);

  // required uint64 DeviceFreeSpace = 7;
  bool has_devicefreespace() const;
  void clear_devicefreespace();
  static const int kDeviceFreeSpaceFieldNumber = 7;
  ::google::protobuf::uint64 devicefreespace() const;
  void set_devicefreespace(::google::protobuf::uint64 value);

  // required uint32 WechatVersion = 6;
  bool has_wechatversion() const;
  void clear_wechatversion();
  static const int kWechatVersionFieldNumber = 6;
  ::google::protobuf::uint32 wechatversion() const;
  void set_wechatversion(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.BackupStartGeneralInfo)
 private:
  void set_has_deviceid();
  void clear_has_deviceid();
  void set_has_devicename();
  void clear_has_devicename();
  void set_has_model();
  void clear_has_model();
  void set_has_systemname();
  void clear_has_systemname();
  void set_has_systemversion();
  void clear_has_systemversion();
  void set_has_wechatversion();
  void clear_has_wechatversion();
  void set_has_devicefreespace();
  void clear_has_devicefreespace();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr deviceid_;
  ::google::protobuf::internal::ArenaStringPtr devicename_;
  ::google::protobuf::internal::ArenaStringPtr model_;
  ::google::protobuf::internal::ArenaStringPtr systemname_;
  ::google::protobuf::internal::ArenaStringPtr systemversion_;
  ::google::protobuf::uint64 devicefreespace_;
  ::google::protobuf::uint32 wechatversion_;
  friend struct protobuf_mmbackup_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BackupStartRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.BackupStartRequest) */ {
 public:
  BackupStartRequest();
  virtual ~BackupStartRequest();

  BackupStartRequest(const BackupStartRequest& from);

  inline BackupStartRequest& operator=(const BackupStartRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BackupStartRequest& default_instance();

  static inline const BackupStartRequest* internal_default_instance() {
    return reinterpret_cast<const BackupStartRequest*>(
               &_BackupStartRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(BackupStartRequest* other);

  // implements Message ----------------------------------------------

  inline BackupStartRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  BackupStartRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BackupStartRequest& from);
  void MergeFrom(const BackupStartRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BackupStartRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ID = 1;
  bool has_id() const;
  void clear_id();
  static const int kIDFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional .micromsg.BackupStartGeneralInfo GeneralInfo = 5;
  bool has_generalinfo() const;
  void clear_generalinfo();
  static const int kGeneralInfoFieldNumber = 5;
  const ::micromsg::BackupStartGeneralInfo& generalinfo() const;
  ::micromsg::BackupStartGeneralInfo* mutable_generalinfo();
  ::micromsg::BackupStartGeneralInfo* release_generalinfo();
  void set_allocated_generalinfo(::micromsg::BackupStartGeneralInfo* generalinfo);

  // optional uint64 BigDataSize = 2;
  bool has_bigdatasize() const;
  void clear_bigdatasize();
  static const int kBigDataSizeFieldNumber = 2;
  ::google::protobuf::uint64 bigdatasize() const;
  void set_bigdatasize(::google::protobuf::uint64 value);

  // optional uint64 SessionCount = 3;
  bool has_sessioncount() const;
  void clear_sessioncount();
  static const int kSessionCountFieldNumber = 3;
  ::google::protobuf::uint64 sessioncount() const;
  void set_sessioncount(::google::protobuf::uint64 value);

  // optional uint64 MsgCount = 4;
  bool has_msgcount() const;
  void clear_msgcount();
  static const int kMsgCountFieldNumber = 4;
  ::google::protobuf::uint64 msgcount() const;
  void set_msgcount(::google::protobuf::uint64 value);

  // optional uint64 DataSize = 6;
  bool has_datasize() const;
  void clear_datasize();
  static const int kDataSizeFieldNumber = 6;
  ::google::protobuf::uint64 datasize() const;
  void set_datasize(::google::protobuf::uint64 value);

  // optional int32 TransferType = 7;
  bool has_transfertype() const;
  void clear_transfertype();
  static const int kTransferTypeFieldNumber = 7;
  ::google::protobuf::int32 transfertype() const;
  void set_transfertype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:micromsg.BackupStartRequest)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_bigdatasize();
  void clear_has_bigdatasize();
  void set_has_sessioncount();
  void clear_has_sessioncount();
  void set_has_msgcount();
  void clear_has_msgcount();
  void set_has_generalinfo();
  void clear_has_generalinfo();
  void set_has_datasize();
  void clear_has_datasize();
  void set_has_transfertype();
  void clear_has_transfertype();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::micromsg::BackupStartGeneralInfo* generalinfo_;
  ::google::protobuf::uint64 bigdatasize_;
  ::google::protobuf::uint64 sessioncount_;
  ::google::protobuf::uint64 msgcount_;
  ::google::protobuf::uint64 datasize_;
  ::google::protobuf::int32 transfertype_;
  friend struct protobuf_mmbackup_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BackupStartResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.BackupStartResponse) */ {
 public:
  BackupStartResponse();
  virtual ~BackupStartResponse();

  BackupStartResponse(const BackupStartResponse& from);

  inline BackupStartResponse& operator=(const BackupStartResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BackupStartResponse& default_instance();

  static inline const BackupStartResponse* internal_default_instance() {
    return reinterpret_cast<const BackupStartResponse*>(
               &_BackupStartResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(BackupStartResponse* other);

  // implements Message ----------------------------------------------

  inline BackupStartResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  BackupStartResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BackupStartResponse& from);
  void MergeFrom(const BackupStartResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BackupStartResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ID = 1;
  bool has_id() const;
  void clear_id();
  static const int kIDFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional .micromsg.BackupStartGeneralInfo GeneralInfo = 7;
  bool has_generalinfo() const;
  void clear_generalinfo();
  static const int kGeneralInfoFieldNumber = 7;
  const ::micromsg::BackupStartGeneralInfo& generalinfo() const;
  ::micromsg::BackupStartGeneralInfo* mutable_generalinfo();
  ::micromsg::BackupStartGeneralInfo* release_generalinfo();
  void set_allocated_generalinfo(::micromsg::BackupStartGeneralInfo* generalinfo);

  // required uint64 TotalCount = 2;
  bool has_totalcount() const;
  void clear_totalcount();
  static const int kTotalCountFieldNumber = 2;
  ::google::protobuf::uint64 totalcount() const;
  void set_totalcount(::google::protobuf::uint64 value);

  // required uint64 TotalSize = 3;
  bool has_totalsize() const;
  void clear_totalsize();
  static const int kTotalSizeFieldNumber = 3;
  ::google::protobuf::uint64 totalsize() const;
  void set_totalsize(::google::protobuf::uint64 value);

  // required int32 Status = 4;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 4;
  ::google::protobuf::int32 status() const;
  void set_status(::google::protobuf::int32 value);

  // optional uint32 NetworkState = 5;
  bool has_networkstate() const;
  void clear_networkstate();
  static const int kNetworkStateFieldNumber = 5;
  ::google::protobuf::uint32 networkstate() const;
  void set_networkstate(::google::protobuf::uint32 value);

  // optional uint64 BigDataSize = 6;
  bool has_bigdatasize() const;
  void clear_bigdatasize();
  static const int kBigDataSizeFieldNumber = 6;
  ::google::protobuf::uint64 bigdatasize() const;
  void set_bigdatasize(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:micromsg.BackupStartResponse)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_totalcount();
  void clear_has_totalcount();
  void set_has_totalsize();
  void clear_has_totalsize();
  void set_has_status();
  void clear_has_status();
  void set_has_networkstate();
  void clear_has_networkstate();
  void set_has_bigdatasize();
  void clear_has_bigdatasize();
  void set_has_generalinfo();
  void clear_has_generalinfo();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::micromsg::BackupStartGeneralInfo* generalinfo_;
  ::google::protobuf::uint64 totalcount_;
  ::google::protobuf::uint64 totalsize_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::uint32 networkstate_;
  ::google::protobuf::uint64 bigdatasize_;
  friend struct protobuf_mmbackup_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BackupRequestSession : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.BackupRequestSession) */ {
 public:
  BackupRequestSession();
  virtual ~BackupRequestSession();

  BackupRequestSession(const BackupRequestSession& from);

  inline BackupRequestSession& operator=(const BackupRequestSession& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BackupRequestSession& default_instance();

  static inline const BackupRequestSession* internal_default_instance() {
    return reinterpret_cast<const BackupRequestSession*>(
               &_BackupRequestSession_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(BackupRequestSession* other);

  // implements Message ----------------------------------------------

  inline BackupRequestSession* New() const PROTOBUF_FINAL { return New(NULL); }

  BackupRequestSession* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BackupRequestSession& from);
  void MergeFrom(const BackupRequestSession& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BackupRequestSession* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string SessionName = 1;
  int sessionname_size() const;
  void clear_sessionname();
  static const int kSessionNameFieldNumber = 1;
  const ::std::string& sessionname(int index) const;
  ::std::string* mutable_sessionname(int index);
  void set_sessionname(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_sessionname(int index, ::std::string&& value);
  #endif
  void set_sessionname(int index, const char* value);
  void set_sessionname(int index, const char* value, size_t size);
  ::std::string* add_sessionname();
  void add_sessionname(const ::std::string& value);
  #if LANG_CXX11
  void add_sessionname(::std::string&& value);
  #endif
  void add_sessionname(const char* value);
  void add_sessionname(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& sessionname() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_sessionname();

  // repeated int64 TimeInterval = 2;
  int timeinterval_size() const;
  void clear_timeinterval();
  static const int kTimeIntervalFieldNumber = 2;
  ::google::protobuf::int64 timeinterval(int index) const;
  void set_timeinterval(int index, ::google::protobuf::int64 value);
  void add_timeinterval(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      timeinterval() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_timeinterval();

  // @@protoc_insertion_point(class_scope:micromsg.BackupRequestSession)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> sessionname_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > timeinterval_;
  friend struct protobuf_mmbackup_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BackupRequestSessionResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.BackupRequestSessionResponse) */ {
 public:
  BackupRequestSessionResponse();
  virtual ~BackupRequestSessionResponse();

  BackupRequestSessionResponse(const BackupRequestSessionResponse& from);

  inline BackupRequestSessionResponse& operator=(const BackupRequestSessionResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BackupRequestSessionResponse& default_instance();

  static inline const BackupRequestSessionResponse* internal_default_instance() {
    return reinterpret_cast<const BackupRequestSessionResponse*>(
               &_BackupRequestSessionResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(BackupRequestSessionResponse* other);

  // implements Message ----------------------------------------------

  inline BackupRequestSessionResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  BackupRequestSessionResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BackupRequestSessionResponse& from);
  void MergeFrom(const BackupRequestSessionResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BackupRequestSessionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string SessionName = 1;
  int sessionname_size() const;
  void clear_sessionname();
  static const int kSessionNameFieldNumber = 1;
  const ::std::string& sessionname(int index) const;
  ::std::string* mutable_sessionname(int index);
  void set_sessionname(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_sessionname(int index, ::std::string&& value);
  #endif
  void set_sessionname(int index, const char* value);
  void set_sessionname(int index, const char* value, size_t size);
  ::std::string* add_sessionname();
  void add_sessionname(const ::std::string& value);
  #if LANG_CXX11
  void add_sessionname(::std::string&& value);
  #endif
  void add_sessionname(const char* value);
  void add_sessionname(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& sessionname() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_sessionname();

  // repeated int64 TimeInterval = 2;
  int timeinterval_size() const;
  void clear_timeinterval();
  static const int kTimeIntervalFieldNumber = 2;
  ::google::protobuf::int64 timeinterval(int index) const;
  void set_timeinterval(int index, ::google::protobuf::int64 value);
  void add_timeinterval(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      timeinterval() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_timeinterval();

  // @@protoc_insertion_point(class_scope:micromsg.BackupRequestSessionResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> sessionname_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > timeinterval_;
  friend struct protobuf_mmbackup_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PacketBackupDataPush : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.PacketBackupDataPush) */ {
 public:
  PacketBackupDataPush();
  virtual ~PacketBackupDataPush();

  PacketBackupDataPush(const PacketBackupDataPush& from);

  inline PacketBackupDataPush& operator=(const PacketBackupDataPush& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PacketBackupDataPush& default_instance();

  static inline const PacketBackupDataPush* internal_default_instance() {
    return reinterpret_cast<const PacketBackupDataPush*>(
               &_PacketBackupDataPush_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(PacketBackupDataPush* other);

  // implements Message ----------------------------------------------

  inline PacketBackupDataPush* New() const PROTOBUF_FINAL { return New(NULL); }

  PacketBackupDataPush* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PacketBackupDataPush& from);
  void MergeFrom(const PacketBackupDataPush& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PacketBackupDataPush* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string DataID = 1;
  bool has_dataid() const;
  void clear_dataid();
  static const int kDataIDFieldNumber = 1;
  const ::std::string& dataid() const;
  void set_dataid(const ::std::string& value);
  #if LANG_CXX11
  void set_dataid(::std::string&& value);
  #endif
  void set_dataid(const char* value);
  void set_dataid(const char* value, size_t size);
  ::std::string* mutable_dataid();
  ::std::string* release_dataid();
  void set_allocated_dataid(::std::string* dataid);

  // optional bytes Data = 7;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 7;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // required int32 DataType = 2;
  bool has_datatype() const;
  void clear_datatype();
  static const int kDataTypeFieldNumber = 2;
  ::google::protobuf::int32 datatype() const;
  void set_datatype(::google::protobuf::int32 value);

  // required int32 DataSize = 3;
  bool has_datasize() const;
  void clear_datasize();
  static const int kDataSizeFieldNumber = 3;
  ::google::protobuf::int32 datasize() const;
  void set_datasize(::google::protobuf::int32 value);

  // required int32 StartOffset = 4;
  bool has_startoffset() const;
  void clear_startoffset();
  static const int kStartOffsetFieldNumber = 4;
  ::google::protobuf::int32 startoffset() const;
  void set_startoffset(::google::protobuf::int32 value);

  // required int32 EndOffset = 5;
  bool has_endoffset() const;
  void clear_endoffset();
  static const int kEndOffsetFieldNumber = 5;
  ::google::protobuf::int32 endoffset() const;
  void set_endoffset(::google::protobuf::int32 value);

  // optional int32 CheckSum = 6;
  bool has_checksum() const;
  void clear_checksum();
  static const int kCheckSumFieldNumber = 6;
  ::google::protobuf::int32 checksum() const;
  void set_checksum(::google::protobuf::int32 value);

  // optional int32 Progress = 8;
  bool has_progress() const;
  void clear_progress();
  static const int kProgressFieldNumber = 8;
  ::google::protobuf::int32 progress() const;
  void set_progress(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:micromsg.PacketBackupDataPush)
 private:
  void set_has_dataid();
  void clear_has_dataid();
  void set_has_datatype();
  void clear_has_datatype();
  void set_has_datasize();
  void clear_has_datasize();
  void set_has_startoffset();
  void clear_has_startoffset();
  void set_has_endoffset();
  void clear_has_endoffset();
  void set_has_checksum();
  void clear_has_checksum();
  void set_has_data();
  void clear_has_data();
  void set_has_progress();
  void clear_has_progress();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr dataid_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::int32 datatype_;
  ::google::protobuf::int32 datasize_;
  ::google::protobuf::int32 startoffset_;
  ::google::protobuf::int32 endoffset_;
  ::google::protobuf::int32 checksum_;
  ::google::protobuf::int32 progress_;
  friend struct protobuf_mmbackup_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PacketBackupDataResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.PacketBackupDataResponse) */ {
 public:
  PacketBackupDataResponse();
  virtual ~PacketBackupDataResponse();

  PacketBackupDataResponse(const PacketBackupDataResponse& from);

  inline PacketBackupDataResponse& operator=(const PacketBackupDataResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PacketBackupDataResponse& default_instance();

  static inline const PacketBackupDataResponse* internal_default_instance() {
    return reinterpret_cast<const PacketBackupDataResponse*>(
               &_PacketBackupDataResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(PacketBackupDataResponse* other);

  // implements Message ----------------------------------------------

  inline PacketBackupDataResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  PacketBackupDataResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PacketBackupDataResponse& from);
  void MergeFrom(const PacketBackupDataResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PacketBackupDataResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string DataID = 1;
  bool has_dataid() const;
  void clear_dataid();
  static const int kDataIDFieldNumber = 1;
  const ::std::string& dataid() const;
  void set_dataid(const ::std::string& value);
  #if LANG_CXX11
  void set_dataid(::std::string&& value);
  #endif
  void set_dataid(const char* value);
  void set_dataid(const char* value, size_t size);
  ::std::string* mutable_dataid();
  ::std::string* release_dataid();
  void set_allocated_dataid(::std::string* dataid);

  // required int32 DataType = 2;
  bool has_datatype() const;
  void clear_datatype();
  static const int kDataTypeFieldNumber = 2;
  ::google::protobuf::int32 datatype() const;
  void set_datatype(::google::protobuf::int32 value);

  // required int32 StartOffset = 3;
  bool has_startoffset() const;
  void clear_startoffset();
  static const int kStartOffsetFieldNumber = 3;
  ::google::protobuf::int32 startoffset() const;
  void set_startoffset(::google::protobuf::int32 value);

  // required int32 EndOffset = 4;
  bool has_endoffset() const;
  void clear_endoffset();
  static const int kEndOffsetFieldNumber = 4;
  ::google::protobuf::int32 endoffset() const;
  void set_endoffset(::google::protobuf::int32 value);

  // required int32 Status = 5;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 5;
  ::google::protobuf::int32 status() const;
  void set_status(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:micromsg.PacketBackupDataResponse)
 private:
  void set_has_dataid();
  void clear_has_dataid();
  void set_has_datatype();
  void clear_has_datatype();
  void set_has_startoffset();
  void clear_has_startoffset();
  void set_has_endoffset();
  void clear_has_endoffset();
  void set_has_status();
  void clear_has_status();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr dataid_;
  ::google::protobuf::int32 datatype_;
  ::google::protobuf::int32 startoffset_;
  ::google::protobuf::int32 endoffset_;
  ::google::protobuf::int32 status_;
  friend struct protobuf_mmbackup_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PacketSvrIDRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.PacketSvrIDRequest) */ {
 public:
  PacketSvrIDRequest();
  virtual ~PacketSvrIDRequest();

  PacketSvrIDRequest(const PacketSvrIDRequest& from);

  inline PacketSvrIDRequest& operator=(const PacketSvrIDRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PacketSvrIDRequest& default_instance();

  static inline const PacketSvrIDRequest* internal_default_instance() {
    return reinterpret_cast<const PacketSvrIDRequest*>(
               &_PacketSvrIDRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(PacketSvrIDRequest* other);

  // implements Message ----------------------------------------------

  inline PacketSvrIDRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  PacketSvrIDRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PacketSvrIDRequest& from);
  void MergeFrom(const PacketSvrIDRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PacketSvrIDRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 SvrID = 1;
  int svrid_size() const;
  void clear_svrid();
  static const int kSvrIDFieldNumber = 1;
  ::google::protobuf::uint64 svrid(int index) const;
  void set_svrid(int index, ::google::protobuf::uint64 value);
  void add_svrid(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      svrid() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_svrid();

  // repeated string MediaID = 2;
  int mediaid_size() const;
  void clear_mediaid();
  static const int kMediaIDFieldNumber = 2;
  const ::std::string& mediaid(int index) const;
  ::std::string* mutable_mediaid(int index);
  void set_mediaid(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_mediaid(int index, ::std::string&& value);
  #endif
  void set_mediaid(int index, const char* value);
  void set_mediaid(int index, const char* value, size_t size);
  ::std::string* add_mediaid();
  void add_mediaid(const ::std::string& value);
  #if LANG_CXX11
  void add_mediaid(::std::string&& value);
  #endif
  void add_mediaid(const char* value);
  void add_mediaid(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& mediaid() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_mediaid();

  // repeated string MD5 = 3;
  int md5_size() const;
  void clear_md5();
  static const int kMD5FieldNumber = 3;
  const ::std::string& md5(int index) const;
  ::std::string* mutable_md5(int index);
  void set_md5(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_md5(int index, ::std::string&& value);
  #endif
  void set_md5(int index, const char* value);
  void set_md5(int index, const char* value, size_t size);
  ::std::string* add_md5();
  void add_md5(const ::std::string& value);
  #if LANG_CXX11
  void add_md5(::std::string&& value);
  #endif
  void add_md5(const char* value);
  void add_md5(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& md5() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_md5();

  // required string BakChatName = 4;
  bool has_bakchatname() const;
  void clear_bakchatname();
  static const int kBakChatNameFieldNumber = 4;
  const ::std::string& bakchatname() const;
  void set_bakchatname(const ::std::string& value);
  #if LANG_CXX11
  void set_bakchatname(::std::string&& value);
  #endif
  void set_bakchatname(const char* value);
  void set_bakchatname(const char* value, size_t size);
  ::std::string* mutable_bakchatname();
  ::std::string* release_bakchatname();
  void set_allocated_bakchatname(::std::string* bakchatname);

  // @@protoc_insertion_point(class_scope:micromsg.PacketSvrIDRequest)
 private:
  void set_has_bakchatname();
  void clear_has_bakchatname();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > svrid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> mediaid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> md5_;
  ::google::protobuf::internal::ArenaStringPtr bakchatname_;
  friend struct protobuf_mmbackup_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PacketSvrIDResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.PacketSvrIDResponse) */ {
 public:
  PacketSvrIDResponse();
  virtual ~PacketSvrIDResponse();

  PacketSvrIDResponse(const PacketSvrIDResponse& from);

  inline PacketSvrIDResponse& operator=(const PacketSvrIDResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PacketSvrIDResponse& default_instance();

  static inline const PacketSvrIDResponse* internal_default_instance() {
    return reinterpret_cast<const PacketSvrIDResponse*>(
               &_PacketSvrIDResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(PacketSvrIDResponse* other);

  // implements Message ----------------------------------------------

  inline PacketSvrIDResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  PacketSvrIDResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PacketSvrIDResponse& from);
  void MergeFrom(const PacketSvrIDResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PacketSvrIDResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 SvrID = 1;
  int svrid_size() const;
  void clear_svrid();
  static const int kSvrIDFieldNumber = 1;
  ::google::protobuf::uint64 svrid(int index) const;
  void set_svrid(int index, ::google::protobuf::uint64 value);
  void add_svrid(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      svrid() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_svrid();

  // repeated string MediaID = 2;
  int mediaid_size() const;
  void clear_mediaid();
  static const int kMediaIDFieldNumber = 2;
  const ::std::string& mediaid(int index) const;
  ::std::string* mutable_mediaid(int index);
  void set_mediaid(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_mediaid(int index, ::std::string&& value);
  #endif
  void set_mediaid(int index, const char* value);
  void set_mediaid(int index, const char* value, size_t size);
  ::std::string* add_mediaid();
  void add_mediaid(const ::std::string& value);
  #if LANG_CXX11
  void add_mediaid(::std::string&& value);
  #endif
  void add_mediaid(const char* value);
  void add_mediaid(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& mediaid() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_mediaid();

  // repeated string MD5 = 3;
  int md5_size() const;
  void clear_md5();
  static const int kMD5FieldNumber = 3;
  const ::std::string& md5(int index) const;
  ::std::string* mutable_md5(int index);
  void set_md5(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_md5(int index, ::std::string&& value);
  #endif
  void set_md5(int index, const char* value);
  void set_md5(int index, const char* value, size_t size);
  ::std::string* add_md5();
  void add_md5(const ::std::string& value);
  #if LANG_CXX11
  void add_md5(::std::string&& value);
  #endif
  void add_md5(const char* value);
  void add_md5(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& md5() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_md5();

  // required string BakChatName = 4;
  bool has_bakchatname() const;
  void clear_bakchatname();
  static const int kBakChatNameFieldNumber = 4;
  const ::std::string& bakchatname() const;
  void set_bakchatname(const ::std::string& value);
  #if LANG_CXX11
  void set_bakchatname(::std::string&& value);
  #endif
  void set_bakchatname(const char* value);
  void set_bakchatname(const char* value, size_t size);
  ::std::string* mutable_bakchatname();
  ::std::string* release_bakchatname();
  void set_allocated_bakchatname(::std::string* bakchatname);

  // @@protoc_insertion_point(class_scope:micromsg.PacketSvrIDResponse)
 private:
  void set_has_bakchatname();
  void clear_has_bakchatname();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > svrid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> mediaid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> md5_;
  ::google::protobuf::internal::ArenaStringPtr bakchatname_;
  friend struct protobuf_mmbackup_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PacketBackupDataTag : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.PacketBackupDataTag) */ {
 public:
  PacketBackupDataTag();
  virtual ~PacketBackupDataTag();

  PacketBackupDataTag(const PacketBackupDataTag& from);

  inline PacketBackupDataTag& operator=(const PacketBackupDataTag& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PacketBackupDataTag& default_instance();

  static inline const PacketBackupDataTag* internal_default_instance() {
    return reinterpret_cast<const PacketBackupDataTag*>(
               &_PacketBackupDataTag_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(PacketBackupDataTag* other);

  // implements Message ----------------------------------------------

  inline PacketBackupDataTag* New() const PROTOBUF_FINAL { return New(NULL); }

  PacketBackupDataTag* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PacketBackupDataTag& from);
  void MergeFrom(const PacketBackupDataTag& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PacketBackupDataTag* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string MediaIDList = 6;
  int mediaidlist_size() const;
  void clear_mediaidlist();
  static const int kMediaIDListFieldNumber = 6;
  const ::std::string& mediaidlist(int index) const;
  ::std::string* mutable_mediaidlist(int index);
  void set_mediaidlist(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_mediaidlist(int index, ::std::string&& value);
  #endif
  void set_mediaidlist(int index, const char* value);
  void set_mediaidlist(int index, const char* value, size_t size);
  ::std::string* add_mediaidlist();
  void add_mediaidlist(const ::std::string& value);
  #if LANG_CXX11
  void add_mediaidlist(::std::string&& value);
  #endif
  void add_mediaidlist(const char* value);
  void add_mediaidlist(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& mediaidlist() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_mediaidlist();

  // required string BakChatName = 1;
  bool has_bakchatname() const;
  void clear_bakchatname();
  static const int kBakChatNameFieldNumber = 1;
  const ::std::string& bakchatname() const;
  void set_bakchatname(const ::std::string& value);
  #if LANG_CXX11
  void set_bakchatname(::std::string&& value);
  #endif
  void set_bakchatname(const char* value);
  void set_bakchatname(const char* value, size_t size);
  ::std::string* mutable_bakchatname();
  ::std::string* release_bakchatname();
  void set_allocated_bakchatname(::std::string* bakchatname);

  // required string MsgDataID = 4;
  bool has_msgdataid() const;
  void clear_msgdataid();
  static const int kMsgDataIDFieldNumber = 4;
  const ::std::string& msgdataid() const;
  void set_msgdataid(const ::std::string& value);
  #if LANG_CXX11
  void set_msgdataid(::std::string&& value);
  #endif
  void set_msgdataid(const char* value);
  void set_msgdataid(const char* value, size_t size);
  ::std::string* mutable_msgdataid();
  ::std::string* release_msgdataid();
  void set_allocated_msgdataid(::std::string* msgdataid);

  // required string NickName = 5;
  bool has_nickname() const;
  void clear_nickname();
  static const int kNickNameFieldNumber = 5;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  #if LANG_CXX11
  void set_nickname(::std::string&& value);
  #endif
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // required int64 StartTime = 2;
  bool has_starttime() const;
  void clear_starttime();
  static const int kStartTimeFieldNumber = 2;
  ::google::protobuf::int64 starttime() const;
  void set_starttime(::google::protobuf::int64 value);

  // required int64 EndTime = 3;
  bool has_endtime() const;
  void clear_endtime();
  static const int kEndTimeFieldNumber = 3;
  ::google::protobuf::int64 endtime() const;
  void set_endtime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:micromsg.PacketBackupDataTag)
 private:
  void set_has_bakchatname();
  void clear_has_bakchatname();
  void set_has_starttime();
  void clear_has_starttime();
  void set_has_endtime();
  void clear_has_endtime();
  void set_has_msgdataid();
  void clear_has_msgdataid();
  void set_has_nickname();
  void clear_has_nickname();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> mediaidlist_;
  ::google::protobuf::internal::ArenaStringPtr bakchatname_;
  ::google::protobuf::internal::ArenaStringPtr msgdataid_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::int64 starttime_;
  ::google::protobuf::int64 endtime_;
  friend struct protobuf_mmbackup_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PacketBackupDataTagResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.PacketBackupDataTagResponse) */ {
 public:
  PacketBackupDataTagResponse();
  virtual ~PacketBackupDataTagResponse();

  PacketBackupDataTagResponse(const PacketBackupDataTagResponse& from);

  inline PacketBackupDataTagResponse& operator=(const PacketBackupDataTagResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PacketBackupDataTagResponse& default_instance();

  static inline const PacketBackupDataTagResponse* internal_default_instance() {
    return reinterpret_cast<const PacketBackupDataTagResponse*>(
               &_PacketBackupDataTagResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(PacketBackupDataTagResponse* other);

  // implements Message ----------------------------------------------

  inline PacketBackupDataTagResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  PacketBackupDataTagResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PacketBackupDataTagResponse& from);
  void MergeFrom(const PacketBackupDataTagResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PacketBackupDataTagResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string BakChatName = 1;
  bool has_bakchatname() const;
  void clear_bakchatname();
  static const int kBakChatNameFieldNumber = 1;
  const ::std::string& bakchatname() const;
  void set_bakchatname(const ::std::string& value);
  #if LANG_CXX11
  void set_bakchatname(::std::string&& value);
  #endif
  void set_bakchatname(const char* value);
  void set_bakchatname(const char* value, size_t size);
  ::std::string* mutable_bakchatname();
  ::std::string* release_bakchatname();
  void set_allocated_bakchatname(::std::string* bakchatname);

  // required string MsgDataID = 4;
  bool has_msgdataid() const;
  void clear_msgdataid();
  static const int kMsgDataIDFieldNumber = 4;
  const ::std::string& msgdataid() const;
  void set_msgdataid(const ::std::string& value);
  #if LANG_CXX11
  void set_msgdataid(::std::string&& value);
  #endif
  void set_msgdataid(const char* value);
  void set_msgdataid(const char* value, size_t size);
  ::std::string* mutable_msgdataid();
  ::std::string* release_msgdataid();
  void set_allocated_msgdataid(::std::string* msgdataid);

  // required int64 StartTime = 2;
  bool has_starttime() const;
  void clear_starttime();
  static const int kStartTimeFieldNumber = 2;
  ::google::protobuf::int64 starttime() const;
  void set_starttime(::google::protobuf::int64 value);

  // required int64 EndTime = 3;
  bool has_endtime() const;
  void clear_endtime();
  static const int kEndTimeFieldNumber = 3;
  ::google::protobuf::int64 endtime() const;
  void set_endtime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:micromsg.PacketBackupDataTagResponse)
 private:
  void set_has_bakchatname();
  void clear_has_bakchatname();
  void set_has_starttime();
  void clear_has_starttime();
  void set_has_endtime();
  void clear_has_endtime();
  void set_has_msgdataid();
  void clear_has_msgdataid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr bakchatname_;
  ::google::protobuf::internal::ArenaStringPtr msgdataid_;
  ::google::protobuf::int64 starttime_;
  ::google::protobuf::int64 endtime_;
  friend struct protobuf_mmbackup_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BackupReportItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.BackupReportItem) */ {
 public:
  BackupReportItem();
  virtual ~BackupReportItem();

  BackupReportItem(const BackupReportItem& from);

  inline BackupReportItem& operator=(const BackupReportItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BackupReportItem& default_instance();

  static inline const BackupReportItem* internal_default_instance() {
    return reinterpret_cast<const BackupReportItem*>(
               &_BackupReportItem_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(BackupReportItem* other);

  // implements Message ----------------------------------------------

  inline BackupReportItem* New() const PROTOBUF_FINAL { return New(NULL); }

  BackupReportItem* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BackupReportItem& from);
  void MergeFrom(const BackupReportItem& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BackupReportItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string BakChatName = 1;
  bool has_bakchatname() const;
  void clear_bakchatname();
  static const int kBakChatNameFieldNumber = 1;
  const ::std::string& bakchatname() const;
  void set_bakchatname(const ::std::string& value);
  #if LANG_CXX11
  void set_bakchatname(::std::string&& value);
  #endif
  void set_bakchatname(const char* value);
  void set_bakchatname(const char* value, size_t size);
  ::std::string* mutable_bakchatname();
  ::std::string* release_bakchatname();
  void set_allocated_bakchatname(::std::string* bakchatname);

  // required uint32 MsgCount = 2;
  bool has_msgcount() const;
  void clear_msgcount();
  static const int kMsgCountFieldNumber = 2;
  ::google::protobuf::uint32 msgcount() const;
  void set_msgcount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.BackupReportItem)
 private:
  void set_has_bakchatname();
  void clear_has_bakchatname();
  void set_has_msgcount();
  void clear_has_msgcount();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr bakchatname_;
  ::google::protobuf::uint32 msgcount_;
  friend struct protobuf_mmbackup_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BackupReportList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.BackupReportList) */ {
 public:
  BackupReportList();
  virtual ~BackupReportList();

  BackupReportList(const BackupReportList& from);

  inline BackupReportList& operator=(const BackupReportList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BackupReportList& default_instance();

  static inline const BackupReportList* internal_default_instance() {
    return reinterpret_cast<const BackupReportList*>(
               &_BackupReportList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(BackupReportList* other);

  // implements Message ----------------------------------------------

  inline BackupReportList* New() const PROTOBUF_FINAL { return New(NULL); }

  BackupReportList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BackupReportList& from);
  void MergeFrom(const BackupReportList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BackupReportList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.BackupReportItem List = 2;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 2;
  const ::micromsg::BackupReportItem& list(int index) const;
  ::micromsg::BackupReportItem* mutable_list(int index);
  ::micromsg::BackupReportItem* add_list();
  ::google::protobuf::RepeatedPtrField< ::micromsg::BackupReportItem >*
      mutable_list();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::BackupReportItem >&
      list() const;

  // required uint32 Count = 1;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 1;
  ::google::protobuf::uint32 count() const;
  void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.BackupReportList)
 private:
  void set_has_count();
  void clear_has_count();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::BackupReportItem > list_;
  ::google::protobuf::uint32 count_;
  friend struct protobuf_mmbackup_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BackupFinishRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.BackupFinishRequest) */ {
 public:
  BackupFinishRequest();
  virtual ~BackupFinishRequest();

  BackupFinishRequest(const BackupFinishRequest& from);

  inline BackupFinishRequest& operator=(const BackupFinishRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BackupFinishRequest& default_instance();

  static inline const BackupFinishRequest* internal_default_instance() {
    return reinterpret_cast<const BackupFinishRequest*>(
               &_BackupFinishRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(BackupFinishRequest* other);

  // implements Message ----------------------------------------------

  inline BackupFinishRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  BackupFinishRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BackupFinishRequest& from);
  void MergeFrom(const BackupFinishRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BackupFinishRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ID = 1;
  bool has_id() const;
  void clear_id();
  static const int kIDFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional .micromsg.BackupReportList Data = 2;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::micromsg::BackupReportList& data() const;
  ::micromsg::BackupReportList* mutable_data();
  ::micromsg::BackupReportList* release_data();
  void set_allocated_data(::micromsg::BackupReportList* data);

  // optional uint32 ServerSessionCount = 3;
  bool has_serversessioncount() const;
  void clear_serversessioncount();
  static const int kServerSessionCountFieldNumber = 3;
  ::google::protobuf::uint32 serversessioncount() const;
  void set_serversessioncount(::google::protobuf::uint32 value);

  // optional uint32 ServerMessageCount = 4;
  bool has_servermessagecount() const;
  void clear_servermessagecount();
  static const int kServerMessageCountFieldNumber = 4;
  ::google::protobuf::uint32 servermessagecount() const;
  void set_servermessagecount(::google::protobuf::uint32 value);

  // optional uint32 ServerFileCount = 5;
  bool has_serverfilecount() const;
  void clear_serverfilecount();
  static const int kServerFileCountFieldNumber = 5;
  ::google::protobuf::uint32 serverfilecount() const;
  void set_serverfilecount(::google::protobuf::uint32 value);

  // optional uint32 CalculateSize = 6;
  bool has_calculatesize() const;
  void clear_calculatesize();
  static const int kCalculateSizeFieldNumber = 6;
  ::google::protobuf::uint32 calculatesize() const;
  void set_calculatesize(::google::protobuf::uint32 value);

  // optional uint32 ServerDataPushSize = 7;
  bool has_serverdatapushsize() const;
  void clear_serverdatapushsize();
  static const int kServerDataPushSizeFieldNumber = 7;
  ::google::protobuf::uint32 serverdatapushsize() const;
  void set_serverdatapushsize(::google::protobuf::uint32 value);

  // optional uint32 ServerReadDBTotalTime = 8;
  bool has_serverreaddbtotaltime() const;
  void clear_serverreaddbtotaltime();
  static const int kServerReadDBTotalTimeFieldNumber = 8;
  ::google::protobuf::uint32 serverreaddbtotaltime() const;
  void set_serverreaddbtotaltime(::google::protobuf::uint32 value);

  // optional uint32 ServerReadFileTotalTime = 9;
  bool has_serverreadfiletotaltime() const;
  void clear_serverreadfiletotaltime();
  static const int kServerReadFileTotalTimeFieldNumber = 9;
  ::google::protobuf::uint32 serverreadfiletotaltime() const;
  void set_serverreadfiletotaltime(::google::protobuf::uint32 value);

  // optional uint32 ServerCostTotalTime = 10;
  bool has_servercosttotaltime() const;
  void clear_servercosttotaltime();
  static const int kServerCostTotalTimeFieldNumber = 10;
  ::google::protobuf::uint32 servercosttotaltime() const;
  void set_servercosttotaltime(::google::protobuf::uint32 value);

  // optional uint32 ServerVersion = 11;
  bool has_serverversion() const;
  void clear_serverversion();
  static const int kServerVersionFieldNumber = 11;
  ::google::protobuf::uint32 serverversion() const;
  void set_serverversion(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.BackupFinishRequest)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_data();
  void clear_has_data();
  void set_has_serversessioncount();
  void clear_has_serversessioncount();
  void set_has_servermessagecount();
  void clear_has_servermessagecount();
  void set_has_serverfilecount();
  void clear_has_serverfilecount();
  void set_has_calculatesize();
  void clear_has_calculatesize();
  void set_has_serverdatapushsize();
  void clear_has_serverdatapushsize();
  void set_has_serverreaddbtotaltime();
  void clear_has_serverreaddbtotaltime();
  void set_has_serverreadfiletotaltime();
  void clear_has_serverreadfiletotaltime();
  void set_has_servercosttotaltime();
  void clear_has_servercosttotaltime();
  void set_has_serverversion();
  void clear_has_serverversion();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::micromsg::BackupReportList* data_;
  ::google::protobuf::uint32 serversessioncount_;
  ::google::protobuf::uint32 servermessagecount_;
  ::google::protobuf::uint32 serverfilecount_;
  ::google::protobuf::uint32 calculatesize_;
  ::google::protobuf::uint32 serverdatapushsize_;
  ::google::protobuf::uint32 serverreaddbtotaltime_;
  ::google::protobuf::uint32 serverreadfiletotaltime_;
  ::google::protobuf::uint32 servercosttotaltime_;
  ::google::protobuf::uint32 serverversion_;
  friend struct protobuf_mmbackup_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BackupCommandRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.BackupCommandRequest) */ {
 public:
  BackupCommandRequest();
  virtual ~BackupCommandRequest();

  BackupCommandRequest(const BackupCommandRequest& from);

  inline BackupCommandRequest& operator=(const BackupCommandRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BackupCommandRequest& default_instance();

  static inline const BackupCommandRequest* internal_default_instance() {
    return reinterpret_cast<const BackupCommandRequest*>(
               &_BackupCommandRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(BackupCommandRequest* other);

  // implements Message ----------------------------------------------

  inline BackupCommandRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  BackupCommandRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BackupCommandRequest& from);
  void MergeFrom(const BackupCommandRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BackupCommandRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes Data = 2;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // required int32 Command = 1;
  bool has_command() const;
  void clear_command();
  static const int kCommandFieldNumber = 1;
  ::google::protobuf::int32 command() const;
  void set_command(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:micromsg.BackupCommandRequest)
 private:
  void set_has_command();
  void clear_has_command();
  void set_has_data();
  void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::int32 command_;
  friend struct protobuf_mmbackup_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BackupCommandResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.BackupCommandResponse) */ {
 public:
  BackupCommandResponse();
  virtual ~BackupCommandResponse();

  BackupCommandResponse(const BackupCommandResponse& from);

  inline BackupCommandResponse& operator=(const BackupCommandResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BackupCommandResponse& default_instance();

  static inline const BackupCommandResponse* internal_default_instance() {
    return reinterpret_cast<const BackupCommandResponse*>(
               &_BackupCommandResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(BackupCommandResponse* other);

  // implements Message ----------------------------------------------

  inline BackupCommandResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  BackupCommandResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BackupCommandResponse& from);
  void MergeFrom(const BackupCommandResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BackupCommandResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes Data = 2;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // required int32 Command = 1;
  bool has_command() const;
  void clear_command();
  static const int kCommandFieldNumber = 1;
  ::google::protobuf::int32 command() const;
  void set_command(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:micromsg.BackupCommandResponse)
 private:
  void set_has_command();
  void clear_has_command();
  void set_has_data();
  void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::int32 command_;
  friend struct protobuf_mmbackup_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DataConfigInf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.DataConfigInf) */ {
 public:
  DataConfigInf();
  virtual ~DataConfigInf();

  DataConfigInf(const DataConfigInf& from);

  inline DataConfigInf& operator=(const DataConfigInf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataConfigInf& default_instance();

  static inline const DataConfigInf* internal_default_instance() {
    return reinterpret_cast<const DataConfigInf*>(
               &_DataConfigInf_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(DataConfigInf* other);

  // implements Message ----------------------------------------------

  inline DataConfigInf* New() const PROTOBUF_FINAL { return New(NULL); }

  DataConfigInf* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DataConfigInf& from);
  void MergeFrom(const DataConfigInf& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DataConfigInf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string UserName = 1;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // optional string Deviceid = 2;
  bool has_deviceid() const;
  void clear_deviceid();
  static const int kDeviceidFieldNumber = 2;
  const ::std::string& deviceid() const;
  void set_deviceid(const ::std::string& value);
  #if LANG_CXX11
  void set_deviceid(::std::string&& value);
  #endif
  void set_deviceid(const char* value);
  void set_deviceid(const char* value, size_t size);
  ::std::string* mutable_deviceid();
  ::std::string* release_deviceid();
  void set_allocated_deviceid(::std::string* deviceid);

  // optional .micromsg.BackupStartGeneralInfo DeviceInfo = 5;
  bool has_deviceinfo() const;
  void clear_deviceinfo();
  static const int kDeviceInfoFieldNumber = 5;
  const ::micromsg::BackupStartGeneralInfo& deviceinfo() const;
  ::micromsg::BackupStartGeneralInfo* mutable_deviceinfo();
  ::micromsg::BackupStartGeneralInfo* release_deviceinfo();
  void set_allocated_deviceinfo(::micromsg::BackupStartGeneralInfo* deviceinfo);

  // optional uint32 CreateTime = 3;
  bool has_createtime() const;
  void clear_createtime();
  static const int kCreateTimeFieldNumber = 3;
  ::google::protobuf::uint32 createtime() const;
  void set_createtime(::google::protobuf::uint32 value);

  // optional uint32 LastModifyTime = 4;
  bool has_lastmodifytime() const;
  void clear_lastmodifytime();
  static const int kLastModifyTimeFieldNumber = 4;
  ::google::protobuf::uint32 lastmodifytime() const;
  void set_lastmodifytime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.DataConfigInf)
 private:
  void set_has_username();
  void clear_has_username();
  void set_has_deviceid();
  void clear_has_deviceid();
  void set_has_createtime();
  void clear_has_createtime();
  void set_has_lastmodifytime();
  void clear_has_lastmodifytime();
  void set_has_deviceinfo();
  void clear_has_deviceinfo();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr deviceid_;
  ::micromsg::BackupStartGeneralInfo* deviceinfo_;
  ::google::protobuf::uint32 createtime_;
  ::google::protobuf::uint32 lastmodifytime_;
  friend struct protobuf_mmbackup_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BackupCancelRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.BackupCancelRequest) */ {
 public:
  BackupCancelRequest();
  virtual ~BackupCancelRequest();

  BackupCancelRequest(const BackupCancelRequest& from);

  inline BackupCancelRequest& operator=(const BackupCancelRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BackupCancelRequest& default_instance();

  static inline const BackupCancelRequest* internal_default_instance() {
    return reinterpret_cast<const BackupCancelRequest*>(
               &_BackupCancelRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(BackupCancelRequest* other);

  // implements Message ----------------------------------------------

  inline BackupCancelRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  BackupCancelRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BackupCancelRequest& from);
  void MergeFrom(const BackupCancelRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BackupCancelRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ID = 1;
  bool has_id() const;
  void clear_id();
  static const int kIDFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional uint32 Reason = 2;
  bool has_reason() const;
  void clear_reason();
  static const int kReasonFieldNumber = 2;
  ::google::protobuf::uint32 reason() const;
  void set_reason(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.BackupCancelRequest)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_reason();
  void clear_has_reason();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::uint32 reason_;
  friend struct protobuf_mmbackup_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetConnectInfoRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GetConnectInfoRequest) */ {
 public:
  GetConnectInfoRequest();
  virtual ~GetConnectInfoRequest();

  GetConnectInfoRequest(const GetConnectInfoRequest& from);

  inline GetConnectInfoRequest& operator=(const GetConnectInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetConnectInfoRequest& default_instance();

  static inline const GetConnectInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetConnectInfoRequest*>(
               &_GetConnectInfoRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(GetConnectInfoRequest* other);

  // implements Message ----------------------------------------------

  inline GetConnectInfoRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetConnectInfoRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetConnectInfoRequest& from);
  void MergeFrom(const GetConnectInfoRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetConnectInfoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string URL = 2;
  bool has_url() const;
  void clear_url();
  static const int kURLFieldNumber = 2;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // @@protoc_insertion_point(class_scope:micromsg.GetConnectInfoRequest)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_url();
  void clear_has_url();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::micromsg::BaseRequest* baserequest_;
  friend struct protobuf_mmbackup_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetConnectInfoResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GetConnectInfoResponse) */ {
 public:
  GetConnectInfoResponse();
  virtual ~GetConnectInfoResponse();

  GetConnectInfoResponse(const GetConnectInfoResponse& from);

  inline GetConnectInfoResponse& operator=(const GetConnectInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetConnectInfoResponse& default_instance();

  static inline const GetConnectInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetConnectInfoResponse*>(
               &_GetConnectInfoResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(GetConnectInfoResponse* other);

  // implements Message ----------------------------------------------

  inline GetConnectInfoResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetConnectInfoResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetConnectInfoResponse& from);
  void MergeFrom(const GetConnectInfoResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetConnectInfoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.ConnectInfoAddr AddrList = 8;
  int addrlist_size() const;
  void clear_addrlist();
  static const int kAddrListFieldNumber = 8;
  const ::micromsg::ConnectInfoAddr& addrlist(int index) const;
  ::micromsg::ConnectInfoAddr* mutable_addrlist(int index);
  ::micromsg::ConnectInfoAddr* add_addrlist();
  ::google::protobuf::RepeatedPtrField< ::micromsg::ConnectInfoAddr >*
      mutable_addrlist();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::ConnectInfoAddr >&
      addrlist() const;

  // optional string ID = 2;
  bool has_id() const;
  void clear_id();
  static const int kIDFieldNumber = 2;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string Hello = 4;
  bool has_hello() const;
  void clear_hello();
  static const int kHelloFieldNumber = 4;
  const ::std::string& hello() const;
  void set_hello(const ::std::string& value);
  #if LANG_CXX11
  void set_hello(::std::string&& value);
  #endif
  void set_hello(const char* value);
  void set_hello(const char* value, size_t size);
  ::std::string* mutable_hello();
  ::std::string* release_hello();
  void set_allocated_hello(::std::string* hello);

  // optional string OK = 5;
  bool has_ok() const;
  void clear_ok();
  static const int kOKFieldNumber = 5;
  const ::std::string& ok() const;
  void set_ok(const ::std::string& value);
  #if LANG_CXX11
  void set_ok(::std::string&& value);
  #endif
  void set_ok(const char* value);
  void set_ok(const char* value, size_t size);
  ::std::string* mutable_ok();
  ::std::string* release_ok();
  void set_allocated_ok(::std::string* ok);

  // optional string Resource = 9;
  bool has_resource() const;
  void clear_resource();
  static const int kResourceFieldNumber = 9;
  const ::std::string& resource() const;
  void set_resource(const ::std::string& value);
  #if LANG_CXX11
  void set_resource(::std::string&& value);
  #endif
  void set_resource(const char* value);
  void set_resource(const char* value, size_t size);
  ::std::string* mutable_resource();
  ::std::string* release_resource();
  void set_allocated_resource(::std::string* resource);

  // optional string PCName = 10;
  bool has_pcname() const;
  void clear_pcname();
  static const int kPCNameFieldNumber = 10;
  const ::std::string& pcname() const;
  void set_pcname(const ::std::string& value);
  #if LANG_CXX11
  void set_pcname(::std::string&& value);
  #endif
  void set_pcname(const char* value);
  void set_pcname(const char* value, size_t size);
  ::std::string* mutable_pcname();
  ::std::string* release_pcname();
  void set_allocated_pcname(::std::string* pcname);

  // optional string PCAcctName = 11;
  bool has_pcacctname() const;
  void clear_pcacctname();
  static const int kPCAcctNameFieldNumber = 11;
  const ::std::string& pcacctname() const;
  void set_pcacctname(const ::std::string& value);
  #if LANG_CXX11
  void set_pcacctname(::std::string&& value);
  #endif
  void set_pcacctname(const char* value);
  void set_pcacctname(const char* value, size_t size);
  ::std::string* mutable_pcacctname();
  ::std::string* release_pcacctname();
  void set_allocated_pcacctname(::std::string* pcacctname);

  // optional string WifiName = 15;
  bool has_wifiname() const;
  void clear_wifiname();
  static const int kWifiNameFieldNumber = 15;
  const ::std::string& wifiname() const;
  void set_wifiname(const ::std::string& value);
  #if LANG_CXX11
  void set_wifiname(::std::string&& value);
  #endif
  void set_wifiname(const char* value);
  void set_wifiname(const char* value, size_t size);
  ::std::string* mutable_wifiname();
  ::std::string* release_wifiname();
  void set_allocated_wifiname(::std::string* wifiname);

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // required .micromsg.SKBuiltinBuffer_t Key = 3;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 3;
  const ::micromsg::SKBuiltinBuffer_t& key() const;
  ::micromsg::SKBuiltinBuffer_t* mutable_key();
  ::micromsg::SKBuiltinBuffer_t* release_key();
  void set_allocated_key(::micromsg::SKBuiltinBuffer_t* key);

  // required uint32 Type = 6;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 6;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // required uint32 AddrCount = 7;
  bool has_addrcount() const;
  void clear_addrcount();
  static const int kAddrCountFieldNumber = 7;
  ::google::protobuf::uint32 addrcount() const;
  void set_addrcount(::google::protobuf::uint32 value);

  // optional uint32 EncryFlag = 12;
  bool has_encryflag() const;
  void clear_encryflag();
  static const int kEncryFlagFieldNumber = 12;
  ::google::protobuf::uint32 encryflag() const;
  void set_encryflag(::google::protobuf::uint32 value);

  // optional uint32 Scene = 13;
  bool has_scene() const;
  void clear_scene();
  static const int kSceneFieldNumber = 13;
  ::google::protobuf::uint32 scene() const;
  void set_scene(::google::protobuf::uint32 value);

  // optional uint64 DataSize = 14;
  bool has_datasize() const;
  void clear_datasize();
  static const int kDataSizeFieldNumber = 14;
  ::google::protobuf::uint64 datasize() const;
  void set_datasize(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:micromsg.GetConnectInfoResponse)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_id();
  void clear_has_id();
  void set_has_key();
  void clear_has_key();
  void set_has_hello();
  void clear_has_hello();
  void set_has_ok();
  void clear_has_ok();
  void set_has_type();
  void clear_has_type();
  void set_has_addrcount();
  void clear_has_addrcount();
  void set_has_resource();
  void clear_has_resource();
  void set_has_pcname();
  void clear_has_pcname();
  void set_has_pcacctname();
  void clear_has_pcacctname();
  void set_has_encryflag();
  void clear_has_encryflag();
  void set_has_scene();
  void clear_has_scene();
  void set_has_datasize();
  void clear_has_datasize();
  void set_has_wifiname();
  void clear_has_wifiname();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::ConnectInfoAddr > addrlist_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr hello_;
  ::google::protobuf::internal::ArenaStringPtr ok_;
  ::google::protobuf::internal::ArenaStringPtr resource_;
  ::google::protobuf::internal::ArenaStringPtr pcname_;
  ::google::protobuf::internal::ArenaStringPtr pcacctname_;
  ::google::protobuf::internal::ArenaStringPtr wifiname_;
  ::micromsg::BaseResponse* baseresponse_;
  ::micromsg::SKBuiltinBuffer_t* key_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 addrcount_;
  ::google::protobuf::uint32 encryflag_;
  ::google::protobuf::uint32 scene_;
  ::google::protobuf::uint64 datasize_;
  friend struct protobuf_mmbackup_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BackupHeartBeatRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.BackupHeartBeatRequest) */ {
 public:
  BackupHeartBeatRequest();
  virtual ~BackupHeartBeatRequest();

  BackupHeartBeatRequest(const BackupHeartBeatRequest& from);

  inline BackupHeartBeatRequest& operator=(const BackupHeartBeatRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BackupHeartBeatRequest& default_instance();

  static inline const BackupHeartBeatRequest* internal_default_instance() {
    return reinterpret_cast<const BackupHeartBeatRequest*>(
               &_BackupHeartBeatRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(BackupHeartBeatRequest* other);

  // implements Message ----------------------------------------------

  inline BackupHeartBeatRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  BackupHeartBeatRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BackupHeartBeatRequest& from);
  void MergeFrom(const BackupHeartBeatRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BackupHeartBeatRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 ack = 1;
  bool has_ack() const;
  void clear_ack();
  static const int kAckFieldNumber = 1;
  ::google::protobuf::uint64 ack() const;
  void set_ack(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:micromsg.BackupHeartBeatRequest)
 private:
  void set_has_ack();
  void clear_has_ack();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 ack_;
  friend struct protobuf_mmbackup_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BackupHeartBeatResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.BackupHeartBeatResponse) */ {
 public:
  BackupHeartBeatResponse();
  virtual ~BackupHeartBeatResponse();

  BackupHeartBeatResponse(const BackupHeartBeatResponse& from);

  inline BackupHeartBeatResponse& operator=(const BackupHeartBeatResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BackupHeartBeatResponse& default_instance();

  static inline const BackupHeartBeatResponse* internal_default_instance() {
    return reinterpret_cast<const BackupHeartBeatResponse*>(
               &_BackupHeartBeatResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(BackupHeartBeatResponse* other);

  // implements Message ----------------------------------------------

  inline BackupHeartBeatResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  BackupHeartBeatResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BackupHeartBeatResponse& from);
  void MergeFrom(const BackupHeartBeatResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BackupHeartBeatResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 ack = 1;
  bool has_ack() const;
  void clear_ack();
  static const int kAckFieldNumber = 1;
  ::google::protobuf::uint64 ack() const;
  void set_ack(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:micromsg.BackupHeartBeatResponse)
 private:
  void set_has_ack();
  void clear_has_ack();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 ack_;
  friend struct protobuf_mmbackup_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ConnectInfoAddr

// optional string IP = 1;
inline bool ConnectInfoAddr::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConnectInfoAddr::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConnectInfoAddr::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConnectInfoAddr::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
inline const ::std::string& ConnectInfoAddr::ip() const {
  // @@protoc_insertion_point(field_get:micromsg.ConnectInfoAddr.IP)
  return ip_.GetNoArena();
}
inline void ConnectInfoAddr::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ConnectInfoAddr.IP)
}
#if LANG_CXX11
inline void ConnectInfoAddr::set_ip(::std::string&& value) {
  set_has_ip();
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ConnectInfoAddr.IP)
}
#endif
inline void ConnectInfoAddr::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ConnectInfoAddr.IP)
}
inline void ConnectInfoAddr::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ConnectInfoAddr.IP)
}
inline ::std::string* ConnectInfoAddr::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:micromsg.ConnectInfoAddr.IP)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectInfoAddr::release_ip() {
  // @@protoc_insertion_point(field_release:micromsg.ConnectInfoAddr.IP)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectInfoAddr::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ConnectInfoAddr.IP)
}

// repeated uint32 Port = 2;
inline int ConnectInfoAddr::port_size() const {
  return port_.size();
}
inline void ConnectInfoAddr::clear_port() {
  port_.Clear();
}
inline ::google::protobuf::uint32 ConnectInfoAddr::port(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.ConnectInfoAddr.Port)
  return port_.Get(index);
}
inline void ConnectInfoAddr::set_port(int index, ::google::protobuf::uint32 value) {
  port_.Set(index, value);
  // @@protoc_insertion_point(field_set:micromsg.ConnectInfoAddr.Port)
}
inline void ConnectInfoAddr::add_port(::google::protobuf::uint32 value) {
  port_.Add(value);
  // @@protoc_insertion_point(field_add:micromsg.ConnectInfoAddr.Port)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ConnectInfoAddr::port() const {
  // @@protoc_insertion_point(field_list:micromsg.ConnectInfoAddr.Port)
  return port_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ConnectInfoAddr::mutable_port() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.ConnectInfoAddr.Port)
  return &port_;
}

// optional uint32 PortCount = 3;
inline bool ConnectInfoAddr::has_portcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConnectInfoAddr::set_has_portcount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConnectInfoAddr::clear_has_portcount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConnectInfoAddr::clear_portcount() {
  portcount_ = 0u;
  clear_has_portcount();
}
inline ::google::protobuf::uint32 ConnectInfoAddr::portcount() const {
  // @@protoc_insertion_point(field_get:micromsg.ConnectInfoAddr.PortCount)
  return portcount_;
}
inline void ConnectInfoAddr::set_portcount(::google::protobuf::uint32 value) {
  set_has_portcount();
  portcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ConnectInfoAddr.PortCount)
}

// -------------------------------------------------------------------

// BakChatCreateQRCodeRequest

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool BakChatCreateQRCodeRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BakChatCreateQRCodeRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BakChatCreateQRCodeRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BakChatCreateQRCodeRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& BakChatCreateQRCodeRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.BakChatCreateQRCodeRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* BakChatCreateQRCodeRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BakChatCreateQRCodeRequest.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* BakChatCreateQRCodeRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.BakChatCreateQRCodeRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void BakChatCreateQRCodeRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BakChatCreateQRCodeRequest.BaseRequest)
}

// required uint32 AddrCount = 2;
inline bool BakChatCreateQRCodeRequest::has_addrcount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BakChatCreateQRCodeRequest::set_has_addrcount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BakChatCreateQRCodeRequest::clear_has_addrcount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BakChatCreateQRCodeRequest::clear_addrcount() {
  addrcount_ = 0u;
  clear_has_addrcount();
}
inline ::google::protobuf::uint32 BakChatCreateQRCodeRequest::addrcount() const {
  // @@protoc_insertion_point(field_get:micromsg.BakChatCreateQRCodeRequest.AddrCount)
  return addrcount_;
}
inline void BakChatCreateQRCodeRequest::set_addrcount(::google::protobuf::uint32 value) {
  set_has_addrcount();
  addrcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BakChatCreateQRCodeRequest.AddrCount)
}

// repeated .micromsg.ConnectInfoAddr AddrList = 3;
inline int BakChatCreateQRCodeRequest::addrlist_size() const {
  return addrlist_.size();
}
inline void BakChatCreateQRCodeRequest::clear_addrlist() {
  addrlist_.Clear();
}
inline const ::micromsg::ConnectInfoAddr& BakChatCreateQRCodeRequest::addrlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.BakChatCreateQRCodeRequest.AddrList)
  return addrlist_.Get(index);
}
inline ::micromsg::ConnectInfoAddr* BakChatCreateQRCodeRequest::mutable_addrlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.BakChatCreateQRCodeRequest.AddrList)
  return addrlist_.Mutable(index);
}
inline ::micromsg::ConnectInfoAddr* BakChatCreateQRCodeRequest::add_addrlist() {
  // @@protoc_insertion_point(field_add:micromsg.BakChatCreateQRCodeRequest.AddrList)
  return addrlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::ConnectInfoAddr >*
BakChatCreateQRCodeRequest::mutable_addrlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.BakChatCreateQRCodeRequest.AddrList)
  return &addrlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::ConnectInfoAddr >&
BakChatCreateQRCodeRequest::addrlist() const {
  // @@protoc_insertion_point(field_list:micromsg.BakChatCreateQRCodeRequest.AddrList)
  return addrlist_;
}

// optional string PCName = 4;
inline bool BakChatCreateQRCodeRequest::has_pcname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BakChatCreateQRCodeRequest::set_has_pcname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BakChatCreateQRCodeRequest::clear_has_pcname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BakChatCreateQRCodeRequest::clear_pcname() {
  pcname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pcname();
}
inline const ::std::string& BakChatCreateQRCodeRequest::pcname() const {
  // @@protoc_insertion_point(field_get:micromsg.BakChatCreateQRCodeRequest.PCName)
  return pcname_.GetNoArena();
}
inline void BakChatCreateQRCodeRequest::set_pcname(const ::std::string& value) {
  set_has_pcname();
  pcname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BakChatCreateQRCodeRequest.PCName)
}
#if LANG_CXX11
inline void BakChatCreateQRCodeRequest::set_pcname(::std::string&& value) {
  set_has_pcname();
  pcname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BakChatCreateQRCodeRequest.PCName)
}
#endif
inline void BakChatCreateQRCodeRequest::set_pcname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pcname();
  pcname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BakChatCreateQRCodeRequest.PCName)
}
inline void BakChatCreateQRCodeRequest::set_pcname(const char* value, size_t size) {
  set_has_pcname();
  pcname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BakChatCreateQRCodeRequest.PCName)
}
inline ::std::string* BakChatCreateQRCodeRequest::mutable_pcname() {
  set_has_pcname();
  // @@protoc_insertion_point(field_mutable:micromsg.BakChatCreateQRCodeRequest.PCName)
  return pcname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BakChatCreateQRCodeRequest::release_pcname() {
  // @@protoc_insertion_point(field_release:micromsg.BakChatCreateQRCodeRequest.PCName)
  clear_has_pcname();
  return pcname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BakChatCreateQRCodeRequest::set_allocated_pcname(::std::string* pcname) {
  if (pcname != NULL) {
    set_has_pcname();
  } else {
    clear_has_pcname();
  }
  pcname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pcname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BakChatCreateQRCodeRequest.PCName)
}

// optional string PCAcctName = 5;
inline bool BakChatCreateQRCodeRequest::has_pcacctname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BakChatCreateQRCodeRequest::set_has_pcacctname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BakChatCreateQRCodeRequest::clear_has_pcacctname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BakChatCreateQRCodeRequest::clear_pcacctname() {
  pcacctname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pcacctname();
}
inline const ::std::string& BakChatCreateQRCodeRequest::pcacctname() const {
  // @@protoc_insertion_point(field_get:micromsg.BakChatCreateQRCodeRequest.PCAcctName)
  return pcacctname_.GetNoArena();
}
inline void BakChatCreateQRCodeRequest::set_pcacctname(const ::std::string& value) {
  set_has_pcacctname();
  pcacctname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BakChatCreateQRCodeRequest.PCAcctName)
}
#if LANG_CXX11
inline void BakChatCreateQRCodeRequest::set_pcacctname(::std::string&& value) {
  set_has_pcacctname();
  pcacctname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BakChatCreateQRCodeRequest.PCAcctName)
}
#endif
inline void BakChatCreateQRCodeRequest::set_pcacctname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pcacctname();
  pcacctname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BakChatCreateQRCodeRequest.PCAcctName)
}
inline void BakChatCreateQRCodeRequest::set_pcacctname(const char* value, size_t size) {
  set_has_pcacctname();
  pcacctname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BakChatCreateQRCodeRequest.PCAcctName)
}
inline ::std::string* BakChatCreateQRCodeRequest::mutable_pcacctname() {
  set_has_pcacctname();
  // @@protoc_insertion_point(field_mutable:micromsg.BakChatCreateQRCodeRequest.PCAcctName)
  return pcacctname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BakChatCreateQRCodeRequest::release_pcacctname() {
  // @@protoc_insertion_point(field_release:micromsg.BakChatCreateQRCodeRequest.PCAcctName)
  clear_has_pcacctname();
  return pcacctname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BakChatCreateQRCodeRequest::set_allocated_pcacctname(::std::string* pcacctname) {
  if (pcacctname != NULL) {
    set_has_pcacctname();
  } else {
    clear_has_pcacctname();
  }
  pcacctname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pcacctname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BakChatCreateQRCodeRequest.PCAcctName)
}

// required uint32 Scene = 6;
inline bool BakChatCreateQRCodeRequest::has_scene() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BakChatCreateQRCodeRequest::set_has_scene() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BakChatCreateQRCodeRequest::clear_has_scene() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BakChatCreateQRCodeRequest::clear_scene() {
  scene_ = 0u;
  clear_has_scene();
}
inline ::google::protobuf::uint32 BakChatCreateQRCodeRequest::scene() const {
  // @@protoc_insertion_point(field_get:micromsg.BakChatCreateQRCodeRequest.Scene)
  return scene_;
}
inline void BakChatCreateQRCodeRequest::set_scene(::google::protobuf::uint32 value) {
  set_has_scene();
  scene_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BakChatCreateQRCodeRequest.Scene)
}

// optional uint64 DataSize = 7;
inline bool BakChatCreateQRCodeRequest::has_datasize() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BakChatCreateQRCodeRequest::set_has_datasize() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BakChatCreateQRCodeRequest::clear_has_datasize() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BakChatCreateQRCodeRequest::clear_datasize() {
  datasize_ = GOOGLE_ULONGLONG(0);
  clear_has_datasize();
}
inline ::google::protobuf::uint64 BakChatCreateQRCodeRequest::datasize() const {
  // @@protoc_insertion_point(field_get:micromsg.BakChatCreateQRCodeRequest.DataSize)
  return datasize_;
}
inline void BakChatCreateQRCodeRequest::set_datasize(::google::protobuf::uint64 value) {
  set_has_datasize();
  datasize_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BakChatCreateQRCodeRequest.DataSize)
}

// optional string WifiName = 8;
inline bool BakChatCreateQRCodeRequest::has_wifiname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BakChatCreateQRCodeRequest::set_has_wifiname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BakChatCreateQRCodeRequest::clear_has_wifiname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BakChatCreateQRCodeRequest::clear_wifiname() {
  wifiname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_wifiname();
}
inline const ::std::string& BakChatCreateQRCodeRequest::wifiname() const {
  // @@protoc_insertion_point(field_get:micromsg.BakChatCreateQRCodeRequest.WifiName)
  return wifiname_.GetNoArena();
}
inline void BakChatCreateQRCodeRequest::set_wifiname(const ::std::string& value) {
  set_has_wifiname();
  wifiname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BakChatCreateQRCodeRequest.WifiName)
}
#if LANG_CXX11
inline void BakChatCreateQRCodeRequest::set_wifiname(::std::string&& value) {
  set_has_wifiname();
  wifiname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BakChatCreateQRCodeRequest.WifiName)
}
#endif
inline void BakChatCreateQRCodeRequest::set_wifiname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_wifiname();
  wifiname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BakChatCreateQRCodeRequest.WifiName)
}
inline void BakChatCreateQRCodeRequest::set_wifiname(const char* value, size_t size) {
  set_has_wifiname();
  wifiname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BakChatCreateQRCodeRequest.WifiName)
}
inline ::std::string* BakChatCreateQRCodeRequest::mutable_wifiname() {
  set_has_wifiname();
  // @@protoc_insertion_point(field_mutable:micromsg.BakChatCreateQRCodeRequest.WifiName)
  return wifiname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BakChatCreateQRCodeRequest::release_wifiname() {
  // @@protoc_insertion_point(field_release:micromsg.BakChatCreateQRCodeRequest.WifiName)
  clear_has_wifiname();
  return wifiname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BakChatCreateQRCodeRequest::set_allocated_wifiname(::std::string* wifiname) {
  if (wifiname != NULL) {
    set_has_wifiname();
  } else {
    clear_has_wifiname();
  }
  wifiname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wifiname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BakChatCreateQRCodeRequest.WifiName)
}

// optional int32 Op = 9;
inline bool BakChatCreateQRCodeRequest::has_op() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BakChatCreateQRCodeRequest::set_has_op() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BakChatCreateQRCodeRequest::clear_has_op() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BakChatCreateQRCodeRequest::clear_op() {
  op_ = 0;
  clear_has_op();
}
inline ::google::protobuf::int32 BakChatCreateQRCodeRequest::op() const {
  // @@protoc_insertion_point(field_get:micromsg.BakChatCreateQRCodeRequest.Op)
  return op_;
}
inline void BakChatCreateQRCodeRequest::set_op(::google::protobuf::int32 value) {
  set_has_op();
  op_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BakChatCreateQRCodeRequest.Op)
}

// -------------------------------------------------------------------

// BakChatCreateQRcodeResponse

// required uint32 Ret = 1;
inline bool BakChatCreateQRcodeResponse::has_ret() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BakChatCreateQRcodeResponse::set_has_ret() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BakChatCreateQRcodeResponse::clear_has_ret() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BakChatCreateQRcodeResponse::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 BakChatCreateQRcodeResponse::ret() const {
  // @@protoc_insertion_point(field_get:micromsg.BakChatCreateQRcodeResponse.Ret)
  return ret_;
}
inline void BakChatCreateQRcodeResponse::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BakChatCreateQRcodeResponse.Ret)
}

// required .micromsg.SKBuiltinBuffer_t QRCodeBuffer = 2;
inline bool BakChatCreateQRcodeResponse::has_qrcodebuffer() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BakChatCreateQRcodeResponse::set_has_qrcodebuffer() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BakChatCreateQRcodeResponse::clear_has_qrcodebuffer() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BakChatCreateQRcodeResponse::clear_qrcodebuffer() {
  if (qrcodebuffer_ != NULL) qrcodebuffer_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_qrcodebuffer();
}
inline const ::micromsg::SKBuiltinBuffer_t& BakChatCreateQRcodeResponse::qrcodebuffer() const {
  // @@protoc_insertion_point(field_get:micromsg.BakChatCreateQRcodeResponse.QRCodeBuffer)
  return qrcodebuffer_ != NULL ? *qrcodebuffer_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinBuffer_t* BakChatCreateQRcodeResponse::mutable_qrcodebuffer() {
  set_has_qrcodebuffer();
  if (qrcodebuffer_ == NULL) {
    qrcodebuffer_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BakChatCreateQRcodeResponse.QRCodeBuffer)
  return qrcodebuffer_;
}
inline ::micromsg::SKBuiltinBuffer_t* BakChatCreateQRcodeResponse::release_qrcodebuffer() {
  // @@protoc_insertion_point(field_release:micromsg.BakChatCreateQRcodeResponse.QRCodeBuffer)
  clear_has_qrcodebuffer();
  ::micromsg::SKBuiltinBuffer_t* temp = qrcodebuffer_;
  qrcodebuffer_ = NULL;
  return temp;
}
inline void BakChatCreateQRcodeResponse::set_allocated_qrcodebuffer(::micromsg::SKBuiltinBuffer_t* qrcodebuffer) {
  delete qrcodebuffer_;
  qrcodebuffer_ = qrcodebuffer;
  if (qrcodebuffer) {
    set_has_qrcodebuffer();
  } else {
    clear_has_qrcodebuffer();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BakChatCreateQRcodeResponse.QRCodeBuffer)
}

// optional string QRCodeUrl = 3;
inline bool BakChatCreateQRcodeResponse::has_qrcodeurl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BakChatCreateQRcodeResponse::set_has_qrcodeurl() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BakChatCreateQRcodeResponse::clear_has_qrcodeurl() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BakChatCreateQRcodeResponse::clear_qrcodeurl() {
  qrcodeurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_qrcodeurl();
}
inline const ::std::string& BakChatCreateQRcodeResponse::qrcodeurl() const {
  // @@protoc_insertion_point(field_get:micromsg.BakChatCreateQRcodeResponse.QRCodeUrl)
  return qrcodeurl_.GetNoArena();
}
inline void BakChatCreateQRcodeResponse::set_qrcodeurl(const ::std::string& value) {
  set_has_qrcodeurl();
  qrcodeurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BakChatCreateQRcodeResponse.QRCodeUrl)
}
#if LANG_CXX11
inline void BakChatCreateQRcodeResponse::set_qrcodeurl(::std::string&& value) {
  set_has_qrcodeurl();
  qrcodeurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BakChatCreateQRcodeResponse.QRCodeUrl)
}
#endif
inline void BakChatCreateQRcodeResponse::set_qrcodeurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_qrcodeurl();
  qrcodeurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BakChatCreateQRcodeResponse.QRCodeUrl)
}
inline void BakChatCreateQRcodeResponse::set_qrcodeurl(const char* value, size_t size) {
  set_has_qrcodeurl();
  qrcodeurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BakChatCreateQRcodeResponse.QRCodeUrl)
}
inline ::std::string* BakChatCreateQRcodeResponse::mutable_qrcodeurl() {
  set_has_qrcodeurl();
  // @@protoc_insertion_point(field_mutable:micromsg.BakChatCreateQRcodeResponse.QRCodeUrl)
  return qrcodeurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BakChatCreateQRcodeResponse::release_qrcodeurl() {
  // @@protoc_insertion_point(field_release:micromsg.BakChatCreateQRcodeResponse.QRCodeUrl)
  clear_has_qrcodeurl();
  return qrcodeurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BakChatCreateQRcodeResponse::set_allocated_qrcodeurl(::std::string* qrcodeurl) {
  if (qrcodeurl != NULL) {
    set_has_qrcodeurl();
  } else {
    clear_has_qrcodeurl();
  }
  qrcodeurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), qrcodeurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BakChatCreateQRcodeResponse.QRCodeUrl)
}

// required .micromsg.SKBuiltinBuffer_t Key = 4;
inline bool BakChatCreateQRcodeResponse::has_key() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BakChatCreateQRcodeResponse::set_has_key() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BakChatCreateQRcodeResponse::clear_has_key() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BakChatCreateQRcodeResponse::clear_key() {
  if (key_ != NULL) key_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_key();
}
inline const ::micromsg::SKBuiltinBuffer_t& BakChatCreateQRcodeResponse::key() const {
  // @@protoc_insertion_point(field_get:micromsg.BakChatCreateQRcodeResponse.Key)
  return key_ != NULL ? *key_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinBuffer_t* BakChatCreateQRcodeResponse::mutable_key() {
  set_has_key();
  if (key_ == NULL) {
    key_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BakChatCreateQRcodeResponse.Key)
  return key_;
}
inline ::micromsg::SKBuiltinBuffer_t* BakChatCreateQRcodeResponse::release_key() {
  // @@protoc_insertion_point(field_release:micromsg.BakChatCreateQRcodeResponse.Key)
  clear_has_key();
  ::micromsg::SKBuiltinBuffer_t* temp = key_;
  key_ = NULL;
  return temp;
}
inline void BakChatCreateQRcodeResponse::set_allocated_key(::micromsg::SKBuiltinBuffer_t* key) {
  delete key_;
  key_ = key;
  if (key) {
    set_has_key();
  } else {
    clear_has_key();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BakChatCreateQRcodeResponse.Key)
}

// optional string Hello = 5;
inline bool BakChatCreateQRcodeResponse::has_hello() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BakChatCreateQRcodeResponse::set_has_hello() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BakChatCreateQRcodeResponse::clear_has_hello() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BakChatCreateQRcodeResponse::clear_hello() {
  hello_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hello();
}
inline const ::std::string& BakChatCreateQRcodeResponse::hello() const {
  // @@protoc_insertion_point(field_get:micromsg.BakChatCreateQRcodeResponse.Hello)
  return hello_.GetNoArena();
}
inline void BakChatCreateQRcodeResponse::set_hello(const ::std::string& value) {
  set_has_hello();
  hello_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BakChatCreateQRcodeResponse.Hello)
}
#if LANG_CXX11
inline void BakChatCreateQRcodeResponse::set_hello(::std::string&& value) {
  set_has_hello();
  hello_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BakChatCreateQRcodeResponse.Hello)
}
#endif
inline void BakChatCreateQRcodeResponse::set_hello(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hello();
  hello_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BakChatCreateQRcodeResponse.Hello)
}
inline void BakChatCreateQRcodeResponse::set_hello(const char* value, size_t size) {
  set_has_hello();
  hello_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BakChatCreateQRcodeResponse.Hello)
}
inline ::std::string* BakChatCreateQRcodeResponse::mutable_hello() {
  set_has_hello();
  // @@protoc_insertion_point(field_mutable:micromsg.BakChatCreateQRcodeResponse.Hello)
  return hello_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BakChatCreateQRcodeResponse::release_hello() {
  // @@protoc_insertion_point(field_release:micromsg.BakChatCreateQRcodeResponse.Hello)
  clear_has_hello();
  return hello_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BakChatCreateQRcodeResponse::set_allocated_hello(::std::string* hello) {
  if (hello != NULL) {
    set_has_hello();
  } else {
    clear_has_hello();
  }
  hello_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hello);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BakChatCreateQRcodeResponse.Hello)
}

// optional string OK = 6;
inline bool BakChatCreateQRcodeResponse::has_ok() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BakChatCreateQRcodeResponse::set_has_ok() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BakChatCreateQRcodeResponse::clear_has_ok() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BakChatCreateQRcodeResponse::clear_ok() {
  ok_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ok();
}
inline const ::std::string& BakChatCreateQRcodeResponse::ok() const {
  // @@protoc_insertion_point(field_get:micromsg.BakChatCreateQRcodeResponse.OK)
  return ok_.GetNoArena();
}
inline void BakChatCreateQRcodeResponse::set_ok(const ::std::string& value) {
  set_has_ok();
  ok_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BakChatCreateQRcodeResponse.OK)
}
#if LANG_CXX11
inline void BakChatCreateQRcodeResponse::set_ok(::std::string&& value) {
  set_has_ok();
  ok_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BakChatCreateQRcodeResponse.OK)
}
#endif
inline void BakChatCreateQRcodeResponse::set_ok(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ok();
  ok_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BakChatCreateQRcodeResponse.OK)
}
inline void BakChatCreateQRcodeResponse::set_ok(const char* value, size_t size) {
  set_has_ok();
  ok_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BakChatCreateQRcodeResponse.OK)
}
inline ::std::string* BakChatCreateQRcodeResponse::mutable_ok() {
  set_has_ok();
  // @@protoc_insertion_point(field_mutable:micromsg.BakChatCreateQRcodeResponse.OK)
  return ok_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BakChatCreateQRcodeResponse::release_ok() {
  // @@protoc_insertion_point(field_release:micromsg.BakChatCreateQRcodeResponse.OK)
  clear_has_ok();
  return ok_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BakChatCreateQRcodeResponse::set_allocated_ok(::std::string* ok) {
  if (ok != NULL) {
    set_has_ok();
  } else {
    clear_has_ok();
  }
  ok_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ok);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BakChatCreateQRcodeResponse.OK)
}

// required uint32 EncryFlag = 7;
inline bool BakChatCreateQRcodeResponse::has_encryflag() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BakChatCreateQRcodeResponse::set_has_encryflag() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BakChatCreateQRcodeResponse::clear_has_encryflag() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BakChatCreateQRcodeResponse::clear_encryflag() {
  encryflag_ = 0u;
  clear_has_encryflag();
}
inline ::google::protobuf::uint32 BakChatCreateQRcodeResponse::encryflag() const {
  // @@protoc_insertion_point(field_get:micromsg.BakChatCreateQRcodeResponse.EncryFlag)
  return encryflag_;
}
inline void BakChatCreateQRcodeResponse::set_encryflag(::google::protobuf::uint32 value) {
  set_has_encryflag();
  encryflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BakChatCreateQRcodeResponse.EncryFlag)
}

// optional string ID = 8;
inline bool BakChatCreateQRcodeResponse::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BakChatCreateQRcodeResponse::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BakChatCreateQRcodeResponse::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BakChatCreateQRcodeResponse::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& BakChatCreateQRcodeResponse::id() const {
  // @@protoc_insertion_point(field_get:micromsg.BakChatCreateQRcodeResponse.ID)
  return id_.GetNoArena();
}
inline void BakChatCreateQRcodeResponse::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BakChatCreateQRcodeResponse.ID)
}
#if LANG_CXX11
inline void BakChatCreateQRcodeResponse::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BakChatCreateQRcodeResponse.ID)
}
#endif
inline void BakChatCreateQRcodeResponse::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BakChatCreateQRcodeResponse.ID)
}
inline void BakChatCreateQRcodeResponse::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BakChatCreateQRcodeResponse.ID)
}
inline ::std::string* BakChatCreateQRcodeResponse::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:micromsg.BakChatCreateQRcodeResponse.ID)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BakChatCreateQRcodeResponse::release_id() {
  // @@protoc_insertion_point(field_release:micromsg.BakChatCreateQRcodeResponse.ID)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BakChatCreateQRcodeResponse::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BakChatCreateQRcodeResponse.ID)
}

// optional string Tickit = 9;
inline bool BakChatCreateQRcodeResponse::has_tickit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BakChatCreateQRcodeResponse::set_has_tickit() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BakChatCreateQRcodeResponse::clear_has_tickit() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BakChatCreateQRcodeResponse::clear_tickit() {
  tickit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tickit();
}
inline const ::std::string& BakChatCreateQRcodeResponse::tickit() const {
  // @@protoc_insertion_point(field_get:micromsg.BakChatCreateQRcodeResponse.Tickit)
  return tickit_.GetNoArena();
}
inline void BakChatCreateQRcodeResponse::set_tickit(const ::std::string& value) {
  set_has_tickit();
  tickit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BakChatCreateQRcodeResponse.Tickit)
}
#if LANG_CXX11
inline void BakChatCreateQRcodeResponse::set_tickit(::std::string&& value) {
  set_has_tickit();
  tickit_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BakChatCreateQRcodeResponse.Tickit)
}
#endif
inline void BakChatCreateQRcodeResponse::set_tickit(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tickit();
  tickit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BakChatCreateQRcodeResponse.Tickit)
}
inline void BakChatCreateQRcodeResponse::set_tickit(const char* value, size_t size) {
  set_has_tickit();
  tickit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BakChatCreateQRcodeResponse.Tickit)
}
inline ::std::string* BakChatCreateQRcodeResponse::mutable_tickit() {
  set_has_tickit();
  // @@protoc_insertion_point(field_mutable:micromsg.BakChatCreateQRcodeResponse.Tickit)
  return tickit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BakChatCreateQRcodeResponse::release_tickit() {
  // @@protoc_insertion_point(field_release:micromsg.BakChatCreateQRcodeResponse.Tickit)
  clear_has_tickit();
  return tickit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BakChatCreateQRcodeResponse::set_allocated_tickit(::std::string* tickit) {
  if (tickit != NULL) {
    set_has_tickit();
  } else {
    clear_has_tickit();
  }
  tickit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tickit);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BakChatCreateQRcodeResponse.Tickit)
}

// -------------------------------------------------------------------

// PacketAuthenticateRequest

// required int32 Step = 1;
inline bool PacketAuthenticateRequest::has_step() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PacketAuthenticateRequest::set_has_step() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PacketAuthenticateRequest::clear_has_step() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PacketAuthenticateRequest::clear_step() {
  step_ = 0;
  clear_has_step();
}
inline ::google::protobuf::int32 PacketAuthenticateRequest::step() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketAuthenticateRequest.Step)
  return step_;
}
inline void PacketAuthenticateRequest::set_step(::google::protobuf::int32 value) {
  set_has_step();
  step_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PacketAuthenticateRequest.Step)
}

// required string ID = 2;
inline bool PacketAuthenticateRequest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PacketAuthenticateRequest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PacketAuthenticateRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PacketAuthenticateRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& PacketAuthenticateRequest::id() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketAuthenticateRequest.ID)
  return id_.GetNoArena();
}
inline void PacketAuthenticateRequest::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.PacketAuthenticateRequest.ID)
}
#if LANG_CXX11
inline void PacketAuthenticateRequest::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.PacketAuthenticateRequest.ID)
}
#endif
inline void PacketAuthenticateRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.PacketAuthenticateRequest.ID)
}
inline void PacketAuthenticateRequest::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.PacketAuthenticateRequest.ID)
}
inline ::std::string* PacketAuthenticateRequest::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:micromsg.PacketAuthenticateRequest.ID)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PacketAuthenticateRequest::release_id() {
  // @@protoc_insertion_point(field_release:micromsg.PacketAuthenticateRequest.ID)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PacketAuthenticateRequest::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:micromsg.PacketAuthenticateRequest.ID)
}

// optional bytes Data = 3;
inline bool PacketAuthenticateRequest::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PacketAuthenticateRequest::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PacketAuthenticateRequest::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PacketAuthenticateRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& PacketAuthenticateRequest::data() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketAuthenticateRequest.Data)
  return data_.GetNoArena();
}
inline void PacketAuthenticateRequest::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.PacketAuthenticateRequest.Data)
}
#if LANG_CXX11
inline void PacketAuthenticateRequest::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.PacketAuthenticateRequest.Data)
}
#endif
inline void PacketAuthenticateRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.PacketAuthenticateRequest.Data)
}
inline void PacketAuthenticateRequest::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.PacketAuthenticateRequest.Data)
}
inline ::std::string* PacketAuthenticateRequest::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:micromsg.PacketAuthenticateRequest.Data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PacketAuthenticateRequest::release_data() {
  // @@protoc_insertion_point(field_release:micromsg.PacketAuthenticateRequest.Data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PacketAuthenticateRequest::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:micromsg.PacketAuthenticateRequest.Data)
}

// optional int32 Version = 4;
inline bool PacketAuthenticateRequest::has_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PacketAuthenticateRequest::set_has_version() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PacketAuthenticateRequest::clear_has_version() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PacketAuthenticateRequest::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 PacketAuthenticateRequest::version() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketAuthenticateRequest.Version)
  return version_;
}
inline void PacketAuthenticateRequest::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PacketAuthenticateRequest.Version)
}

// optional int32 Type = 5;
inline bool PacketAuthenticateRequest::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PacketAuthenticateRequest::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PacketAuthenticateRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PacketAuthenticateRequest::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 PacketAuthenticateRequest::type() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketAuthenticateRequest.Type)
  return type_;
}
inline void PacketAuthenticateRequest::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PacketAuthenticateRequest.Type)
}

// optional int32 SupportExt = 6;
inline bool PacketAuthenticateRequest::has_supportext() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PacketAuthenticateRequest::set_has_supportext() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PacketAuthenticateRequest::clear_has_supportext() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PacketAuthenticateRequest::clear_supportext() {
  supportext_ = 0;
  clear_has_supportext();
}
inline ::google::protobuf::int32 PacketAuthenticateRequest::supportext() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketAuthenticateRequest.SupportExt)
  return supportext_;
}
inline void PacketAuthenticateRequest::set_supportext(::google::protobuf::int32 value) {
  set_has_supportext();
  supportext_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PacketAuthenticateRequest.SupportExt)
}

// -------------------------------------------------------------------

// PacketAuthenticateResponse

// required int32 Step = 1;
inline bool PacketAuthenticateResponse::has_step() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PacketAuthenticateResponse::set_has_step() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PacketAuthenticateResponse::clear_has_step() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PacketAuthenticateResponse::clear_step() {
  step_ = 0;
  clear_has_step();
}
inline ::google::protobuf::int32 PacketAuthenticateResponse::step() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketAuthenticateResponse.Step)
  return step_;
}
inline void PacketAuthenticateResponse::set_step(::google::protobuf::int32 value) {
  set_has_step();
  step_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PacketAuthenticateResponse.Step)
}

// required int32 Status = 2;
inline bool PacketAuthenticateResponse::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PacketAuthenticateResponse::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PacketAuthenticateResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PacketAuthenticateResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 PacketAuthenticateResponse::status() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketAuthenticateResponse.Status)
  return status_;
}
inline void PacketAuthenticateResponse::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PacketAuthenticateResponse.Status)
}

// required string ID = 3;
inline bool PacketAuthenticateResponse::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PacketAuthenticateResponse::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PacketAuthenticateResponse::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PacketAuthenticateResponse::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& PacketAuthenticateResponse::id() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketAuthenticateResponse.ID)
  return id_.GetNoArena();
}
inline void PacketAuthenticateResponse::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.PacketAuthenticateResponse.ID)
}
#if LANG_CXX11
inline void PacketAuthenticateResponse::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.PacketAuthenticateResponse.ID)
}
#endif
inline void PacketAuthenticateResponse::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.PacketAuthenticateResponse.ID)
}
inline void PacketAuthenticateResponse::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.PacketAuthenticateResponse.ID)
}
inline ::std::string* PacketAuthenticateResponse::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:micromsg.PacketAuthenticateResponse.ID)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PacketAuthenticateResponse::release_id() {
  // @@protoc_insertion_point(field_release:micromsg.PacketAuthenticateResponse.ID)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PacketAuthenticateResponse::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:micromsg.PacketAuthenticateResponse.ID)
}

// optional bytes Data = 4;
inline bool PacketAuthenticateResponse::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PacketAuthenticateResponse::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PacketAuthenticateResponse::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PacketAuthenticateResponse::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& PacketAuthenticateResponse::data() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketAuthenticateResponse.Data)
  return data_.GetNoArena();
}
inline void PacketAuthenticateResponse::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.PacketAuthenticateResponse.Data)
}
#if LANG_CXX11
inline void PacketAuthenticateResponse::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.PacketAuthenticateResponse.Data)
}
#endif
inline void PacketAuthenticateResponse::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.PacketAuthenticateResponse.Data)
}
inline void PacketAuthenticateResponse::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.PacketAuthenticateResponse.Data)
}
inline ::std::string* PacketAuthenticateResponse::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:micromsg.PacketAuthenticateResponse.Data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PacketAuthenticateResponse::release_data() {
  // @@protoc_insertion_point(field_release:micromsg.PacketAuthenticateResponse.Data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PacketAuthenticateResponse::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:micromsg.PacketAuthenticateResponse.Data)
}

// optional int32 Version = 5;
inline bool PacketAuthenticateResponse::has_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PacketAuthenticateResponse::set_has_version() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PacketAuthenticateResponse::clear_has_version() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PacketAuthenticateResponse::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 PacketAuthenticateResponse::version() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketAuthenticateResponse.Version)
  return version_;
}
inline void PacketAuthenticateResponse::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PacketAuthenticateResponse.Version)
}

// optional int32 Type = 6;
inline bool PacketAuthenticateResponse::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PacketAuthenticateResponse::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PacketAuthenticateResponse::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PacketAuthenticateResponse::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 PacketAuthenticateResponse::type() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketAuthenticateResponse.Type)
  return type_;
}
inline void PacketAuthenticateResponse::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PacketAuthenticateResponse.Type)
}

// optional int32 SupportExt = 7;
inline bool PacketAuthenticateResponse::has_supportext() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PacketAuthenticateResponse::set_has_supportext() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PacketAuthenticateResponse::clear_has_supportext() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PacketAuthenticateResponse::clear_supportext() {
  supportext_ = 0;
  clear_has_supportext();
}
inline ::google::protobuf::int32 PacketAuthenticateResponse::supportext() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketAuthenticateResponse.SupportExt)
  return supportext_;
}
inline void PacketAuthenticateResponse::set_supportext(::google::protobuf::int32 value) {
  set_has_supportext();
  supportext_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PacketAuthenticateResponse.SupportExt)
}

// -------------------------------------------------------------------

// BackupStartGeneralInfo

// required string DeviceID = 1;
inline bool BackupStartGeneralInfo::has_deviceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BackupStartGeneralInfo::set_has_deviceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BackupStartGeneralInfo::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BackupStartGeneralInfo::clear_deviceid() {
  deviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_deviceid();
}
inline const ::std::string& BackupStartGeneralInfo::deviceid() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupStartGeneralInfo.DeviceID)
  return deviceid_.GetNoArena();
}
inline void BackupStartGeneralInfo::set_deviceid(const ::std::string& value) {
  set_has_deviceid();
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BackupStartGeneralInfo.DeviceID)
}
#if LANG_CXX11
inline void BackupStartGeneralInfo::set_deviceid(::std::string&& value) {
  set_has_deviceid();
  deviceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BackupStartGeneralInfo.DeviceID)
}
#endif
inline void BackupStartGeneralInfo::set_deviceid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_deviceid();
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BackupStartGeneralInfo.DeviceID)
}
inline void BackupStartGeneralInfo::set_deviceid(const char* value, size_t size) {
  set_has_deviceid();
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BackupStartGeneralInfo.DeviceID)
}
inline ::std::string* BackupStartGeneralInfo::mutable_deviceid() {
  set_has_deviceid();
  // @@protoc_insertion_point(field_mutable:micromsg.BackupStartGeneralInfo.DeviceID)
  return deviceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BackupStartGeneralInfo::release_deviceid() {
  // @@protoc_insertion_point(field_release:micromsg.BackupStartGeneralInfo.DeviceID)
  clear_has_deviceid();
  return deviceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BackupStartGeneralInfo::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid != NULL) {
    set_has_deviceid();
  } else {
    clear_has_deviceid();
  }
  deviceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deviceid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BackupStartGeneralInfo.DeviceID)
}

// required string DeviceName = 2;
inline bool BackupStartGeneralInfo::has_devicename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BackupStartGeneralInfo::set_has_devicename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BackupStartGeneralInfo::clear_has_devicename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BackupStartGeneralInfo::clear_devicename() {
  devicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_devicename();
}
inline const ::std::string& BackupStartGeneralInfo::devicename() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupStartGeneralInfo.DeviceName)
  return devicename_.GetNoArena();
}
inline void BackupStartGeneralInfo::set_devicename(const ::std::string& value) {
  set_has_devicename();
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BackupStartGeneralInfo.DeviceName)
}
#if LANG_CXX11
inline void BackupStartGeneralInfo::set_devicename(::std::string&& value) {
  set_has_devicename();
  devicename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BackupStartGeneralInfo.DeviceName)
}
#endif
inline void BackupStartGeneralInfo::set_devicename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_devicename();
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BackupStartGeneralInfo.DeviceName)
}
inline void BackupStartGeneralInfo::set_devicename(const char* value, size_t size) {
  set_has_devicename();
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BackupStartGeneralInfo.DeviceName)
}
inline ::std::string* BackupStartGeneralInfo::mutable_devicename() {
  set_has_devicename();
  // @@protoc_insertion_point(field_mutable:micromsg.BackupStartGeneralInfo.DeviceName)
  return devicename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BackupStartGeneralInfo::release_devicename() {
  // @@protoc_insertion_point(field_release:micromsg.BackupStartGeneralInfo.DeviceName)
  clear_has_devicename();
  return devicename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BackupStartGeneralInfo::set_allocated_devicename(::std::string* devicename) {
  if (devicename != NULL) {
    set_has_devicename();
  } else {
    clear_has_devicename();
  }
  devicename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicename);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BackupStartGeneralInfo.DeviceName)
}

// required string Model = 3;
inline bool BackupStartGeneralInfo::has_model() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BackupStartGeneralInfo::set_has_model() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BackupStartGeneralInfo::clear_has_model() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BackupStartGeneralInfo::clear_model() {
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_model();
}
inline const ::std::string& BackupStartGeneralInfo::model() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupStartGeneralInfo.Model)
  return model_.GetNoArena();
}
inline void BackupStartGeneralInfo::set_model(const ::std::string& value) {
  set_has_model();
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BackupStartGeneralInfo.Model)
}
#if LANG_CXX11
inline void BackupStartGeneralInfo::set_model(::std::string&& value) {
  set_has_model();
  model_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BackupStartGeneralInfo.Model)
}
#endif
inline void BackupStartGeneralInfo::set_model(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_model();
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BackupStartGeneralInfo.Model)
}
inline void BackupStartGeneralInfo::set_model(const char* value, size_t size) {
  set_has_model();
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BackupStartGeneralInfo.Model)
}
inline ::std::string* BackupStartGeneralInfo::mutable_model() {
  set_has_model();
  // @@protoc_insertion_point(field_mutable:micromsg.BackupStartGeneralInfo.Model)
  return model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BackupStartGeneralInfo::release_model() {
  // @@protoc_insertion_point(field_release:micromsg.BackupStartGeneralInfo.Model)
  clear_has_model();
  return model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BackupStartGeneralInfo::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    set_has_model();
  } else {
    clear_has_model();
  }
  model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BackupStartGeneralInfo.Model)
}

// required string SystemName = 4;
inline bool BackupStartGeneralInfo::has_systemname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BackupStartGeneralInfo::set_has_systemname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BackupStartGeneralInfo::clear_has_systemname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BackupStartGeneralInfo::clear_systemname() {
  systemname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_systemname();
}
inline const ::std::string& BackupStartGeneralInfo::systemname() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupStartGeneralInfo.SystemName)
  return systemname_.GetNoArena();
}
inline void BackupStartGeneralInfo::set_systemname(const ::std::string& value) {
  set_has_systemname();
  systemname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BackupStartGeneralInfo.SystemName)
}
#if LANG_CXX11
inline void BackupStartGeneralInfo::set_systemname(::std::string&& value) {
  set_has_systemname();
  systemname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BackupStartGeneralInfo.SystemName)
}
#endif
inline void BackupStartGeneralInfo::set_systemname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_systemname();
  systemname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BackupStartGeneralInfo.SystemName)
}
inline void BackupStartGeneralInfo::set_systemname(const char* value, size_t size) {
  set_has_systemname();
  systemname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BackupStartGeneralInfo.SystemName)
}
inline ::std::string* BackupStartGeneralInfo::mutable_systemname() {
  set_has_systemname();
  // @@protoc_insertion_point(field_mutable:micromsg.BackupStartGeneralInfo.SystemName)
  return systemname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BackupStartGeneralInfo::release_systemname() {
  // @@protoc_insertion_point(field_release:micromsg.BackupStartGeneralInfo.SystemName)
  clear_has_systemname();
  return systemname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BackupStartGeneralInfo::set_allocated_systemname(::std::string* systemname) {
  if (systemname != NULL) {
    set_has_systemname();
  } else {
    clear_has_systemname();
  }
  systemname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), systemname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BackupStartGeneralInfo.SystemName)
}

// required string SystemVersion = 5;
inline bool BackupStartGeneralInfo::has_systemversion() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BackupStartGeneralInfo::set_has_systemversion() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BackupStartGeneralInfo::clear_has_systemversion() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BackupStartGeneralInfo::clear_systemversion() {
  systemversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_systemversion();
}
inline const ::std::string& BackupStartGeneralInfo::systemversion() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupStartGeneralInfo.SystemVersion)
  return systemversion_.GetNoArena();
}
inline void BackupStartGeneralInfo::set_systemversion(const ::std::string& value) {
  set_has_systemversion();
  systemversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BackupStartGeneralInfo.SystemVersion)
}
#if LANG_CXX11
inline void BackupStartGeneralInfo::set_systemversion(::std::string&& value) {
  set_has_systemversion();
  systemversion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BackupStartGeneralInfo.SystemVersion)
}
#endif
inline void BackupStartGeneralInfo::set_systemversion(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_systemversion();
  systemversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BackupStartGeneralInfo.SystemVersion)
}
inline void BackupStartGeneralInfo::set_systemversion(const char* value, size_t size) {
  set_has_systemversion();
  systemversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BackupStartGeneralInfo.SystemVersion)
}
inline ::std::string* BackupStartGeneralInfo::mutable_systemversion() {
  set_has_systemversion();
  // @@protoc_insertion_point(field_mutable:micromsg.BackupStartGeneralInfo.SystemVersion)
  return systemversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BackupStartGeneralInfo::release_systemversion() {
  // @@protoc_insertion_point(field_release:micromsg.BackupStartGeneralInfo.SystemVersion)
  clear_has_systemversion();
  return systemversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BackupStartGeneralInfo::set_allocated_systemversion(::std::string* systemversion) {
  if (systemversion != NULL) {
    set_has_systemversion();
  } else {
    clear_has_systemversion();
  }
  systemversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), systemversion);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BackupStartGeneralInfo.SystemVersion)
}

// required uint32 WechatVersion = 6;
inline bool BackupStartGeneralInfo::has_wechatversion() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BackupStartGeneralInfo::set_has_wechatversion() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BackupStartGeneralInfo::clear_has_wechatversion() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BackupStartGeneralInfo::clear_wechatversion() {
  wechatversion_ = 0u;
  clear_has_wechatversion();
}
inline ::google::protobuf::uint32 BackupStartGeneralInfo::wechatversion() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupStartGeneralInfo.WechatVersion)
  return wechatversion_;
}
inline void BackupStartGeneralInfo::set_wechatversion(::google::protobuf::uint32 value) {
  set_has_wechatversion();
  wechatversion_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BackupStartGeneralInfo.WechatVersion)
}

// required uint64 DeviceFreeSpace = 7;
inline bool BackupStartGeneralInfo::has_devicefreespace() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BackupStartGeneralInfo::set_has_devicefreespace() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BackupStartGeneralInfo::clear_has_devicefreespace() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BackupStartGeneralInfo::clear_devicefreespace() {
  devicefreespace_ = GOOGLE_ULONGLONG(0);
  clear_has_devicefreespace();
}
inline ::google::protobuf::uint64 BackupStartGeneralInfo::devicefreespace() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupStartGeneralInfo.DeviceFreeSpace)
  return devicefreespace_;
}
inline void BackupStartGeneralInfo::set_devicefreespace(::google::protobuf::uint64 value) {
  set_has_devicefreespace();
  devicefreespace_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BackupStartGeneralInfo.DeviceFreeSpace)
}

// -------------------------------------------------------------------

// BackupStartRequest

// required string ID = 1;
inline bool BackupStartRequest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BackupStartRequest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BackupStartRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BackupStartRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& BackupStartRequest::id() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupStartRequest.ID)
  return id_.GetNoArena();
}
inline void BackupStartRequest::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BackupStartRequest.ID)
}
#if LANG_CXX11
inline void BackupStartRequest::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BackupStartRequest.ID)
}
#endif
inline void BackupStartRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BackupStartRequest.ID)
}
inline void BackupStartRequest::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BackupStartRequest.ID)
}
inline ::std::string* BackupStartRequest::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:micromsg.BackupStartRequest.ID)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BackupStartRequest::release_id() {
  // @@protoc_insertion_point(field_release:micromsg.BackupStartRequest.ID)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BackupStartRequest::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BackupStartRequest.ID)
}

// optional uint64 BigDataSize = 2;
inline bool BackupStartRequest::has_bigdatasize() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BackupStartRequest::set_has_bigdatasize() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BackupStartRequest::clear_has_bigdatasize() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BackupStartRequest::clear_bigdatasize() {
  bigdatasize_ = GOOGLE_ULONGLONG(0);
  clear_has_bigdatasize();
}
inline ::google::protobuf::uint64 BackupStartRequest::bigdatasize() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupStartRequest.BigDataSize)
  return bigdatasize_;
}
inline void BackupStartRequest::set_bigdatasize(::google::protobuf::uint64 value) {
  set_has_bigdatasize();
  bigdatasize_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BackupStartRequest.BigDataSize)
}

// optional uint64 SessionCount = 3;
inline bool BackupStartRequest::has_sessioncount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BackupStartRequest::set_has_sessioncount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BackupStartRequest::clear_has_sessioncount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BackupStartRequest::clear_sessioncount() {
  sessioncount_ = GOOGLE_ULONGLONG(0);
  clear_has_sessioncount();
}
inline ::google::protobuf::uint64 BackupStartRequest::sessioncount() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupStartRequest.SessionCount)
  return sessioncount_;
}
inline void BackupStartRequest::set_sessioncount(::google::protobuf::uint64 value) {
  set_has_sessioncount();
  sessioncount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BackupStartRequest.SessionCount)
}

// optional uint64 MsgCount = 4;
inline bool BackupStartRequest::has_msgcount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BackupStartRequest::set_has_msgcount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BackupStartRequest::clear_has_msgcount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BackupStartRequest::clear_msgcount() {
  msgcount_ = GOOGLE_ULONGLONG(0);
  clear_has_msgcount();
}
inline ::google::protobuf::uint64 BackupStartRequest::msgcount() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupStartRequest.MsgCount)
  return msgcount_;
}
inline void BackupStartRequest::set_msgcount(::google::protobuf::uint64 value) {
  set_has_msgcount();
  msgcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BackupStartRequest.MsgCount)
}

// optional .micromsg.BackupStartGeneralInfo GeneralInfo = 5;
inline bool BackupStartRequest::has_generalinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BackupStartRequest::set_has_generalinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BackupStartRequest::clear_has_generalinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BackupStartRequest::clear_generalinfo() {
  if (generalinfo_ != NULL) generalinfo_->::micromsg::BackupStartGeneralInfo::Clear();
  clear_has_generalinfo();
}
inline const ::micromsg::BackupStartGeneralInfo& BackupStartRequest::generalinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupStartRequest.GeneralInfo)
  return generalinfo_ != NULL ? *generalinfo_
                         : *::micromsg::BackupStartGeneralInfo::internal_default_instance();
}
inline ::micromsg::BackupStartGeneralInfo* BackupStartRequest::mutable_generalinfo() {
  set_has_generalinfo();
  if (generalinfo_ == NULL) {
    generalinfo_ = new ::micromsg::BackupStartGeneralInfo;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BackupStartRequest.GeneralInfo)
  return generalinfo_;
}
inline ::micromsg::BackupStartGeneralInfo* BackupStartRequest::release_generalinfo() {
  // @@protoc_insertion_point(field_release:micromsg.BackupStartRequest.GeneralInfo)
  clear_has_generalinfo();
  ::micromsg::BackupStartGeneralInfo* temp = generalinfo_;
  generalinfo_ = NULL;
  return temp;
}
inline void BackupStartRequest::set_allocated_generalinfo(::micromsg::BackupStartGeneralInfo* generalinfo) {
  delete generalinfo_;
  generalinfo_ = generalinfo;
  if (generalinfo) {
    set_has_generalinfo();
  } else {
    clear_has_generalinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BackupStartRequest.GeneralInfo)
}

// optional uint64 DataSize = 6;
inline bool BackupStartRequest::has_datasize() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BackupStartRequest::set_has_datasize() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BackupStartRequest::clear_has_datasize() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BackupStartRequest::clear_datasize() {
  datasize_ = GOOGLE_ULONGLONG(0);
  clear_has_datasize();
}
inline ::google::protobuf::uint64 BackupStartRequest::datasize() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupStartRequest.DataSize)
  return datasize_;
}
inline void BackupStartRequest::set_datasize(::google::protobuf::uint64 value) {
  set_has_datasize();
  datasize_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BackupStartRequest.DataSize)
}

// optional int32 TransferType = 7;
inline bool BackupStartRequest::has_transfertype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BackupStartRequest::set_has_transfertype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BackupStartRequest::clear_has_transfertype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BackupStartRequest::clear_transfertype() {
  transfertype_ = 0;
  clear_has_transfertype();
}
inline ::google::protobuf::int32 BackupStartRequest::transfertype() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupStartRequest.TransferType)
  return transfertype_;
}
inline void BackupStartRequest::set_transfertype(::google::protobuf::int32 value) {
  set_has_transfertype();
  transfertype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BackupStartRequest.TransferType)
}

// -------------------------------------------------------------------

// BackupStartResponse

// required string ID = 1;
inline bool BackupStartResponse::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BackupStartResponse::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BackupStartResponse::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BackupStartResponse::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& BackupStartResponse::id() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupStartResponse.ID)
  return id_.GetNoArena();
}
inline void BackupStartResponse::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BackupStartResponse.ID)
}
#if LANG_CXX11
inline void BackupStartResponse::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BackupStartResponse.ID)
}
#endif
inline void BackupStartResponse::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BackupStartResponse.ID)
}
inline void BackupStartResponse::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BackupStartResponse.ID)
}
inline ::std::string* BackupStartResponse::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:micromsg.BackupStartResponse.ID)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BackupStartResponse::release_id() {
  // @@protoc_insertion_point(field_release:micromsg.BackupStartResponse.ID)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BackupStartResponse::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BackupStartResponse.ID)
}

// required uint64 TotalCount = 2;
inline bool BackupStartResponse::has_totalcount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BackupStartResponse::set_has_totalcount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BackupStartResponse::clear_has_totalcount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BackupStartResponse::clear_totalcount() {
  totalcount_ = GOOGLE_ULONGLONG(0);
  clear_has_totalcount();
}
inline ::google::protobuf::uint64 BackupStartResponse::totalcount() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupStartResponse.TotalCount)
  return totalcount_;
}
inline void BackupStartResponse::set_totalcount(::google::protobuf::uint64 value) {
  set_has_totalcount();
  totalcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BackupStartResponse.TotalCount)
}

// required uint64 TotalSize = 3;
inline bool BackupStartResponse::has_totalsize() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BackupStartResponse::set_has_totalsize() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BackupStartResponse::clear_has_totalsize() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BackupStartResponse::clear_totalsize() {
  totalsize_ = GOOGLE_ULONGLONG(0);
  clear_has_totalsize();
}
inline ::google::protobuf::uint64 BackupStartResponse::totalsize() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupStartResponse.TotalSize)
  return totalsize_;
}
inline void BackupStartResponse::set_totalsize(::google::protobuf::uint64 value) {
  set_has_totalsize();
  totalsize_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BackupStartResponse.TotalSize)
}

// required int32 Status = 4;
inline bool BackupStartResponse::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BackupStartResponse::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BackupStartResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BackupStartResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 BackupStartResponse::status() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupStartResponse.Status)
  return status_;
}
inline void BackupStartResponse::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BackupStartResponse.Status)
}

// optional uint32 NetworkState = 5;
inline bool BackupStartResponse::has_networkstate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BackupStartResponse::set_has_networkstate() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BackupStartResponse::clear_has_networkstate() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BackupStartResponse::clear_networkstate() {
  networkstate_ = 0u;
  clear_has_networkstate();
}
inline ::google::protobuf::uint32 BackupStartResponse::networkstate() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupStartResponse.NetworkState)
  return networkstate_;
}
inline void BackupStartResponse::set_networkstate(::google::protobuf::uint32 value) {
  set_has_networkstate();
  networkstate_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BackupStartResponse.NetworkState)
}

// optional uint64 BigDataSize = 6;
inline bool BackupStartResponse::has_bigdatasize() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BackupStartResponse::set_has_bigdatasize() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BackupStartResponse::clear_has_bigdatasize() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BackupStartResponse::clear_bigdatasize() {
  bigdatasize_ = GOOGLE_ULONGLONG(0);
  clear_has_bigdatasize();
}
inline ::google::protobuf::uint64 BackupStartResponse::bigdatasize() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupStartResponse.BigDataSize)
  return bigdatasize_;
}
inline void BackupStartResponse::set_bigdatasize(::google::protobuf::uint64 value) {
  set_has_bigdatasize();
  bigdatasize_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BackupStartResponse.BigDataSize)
}

// optional .micromsg.BackupStartGeneralInfo GeneralInfo = 7;
inline bool BackupStartResponse::has_generalinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BackupStartResponse::set_has_generalinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BackupStartResponse::clear_has_generalinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BackupStartResponse::clear_generalinfo() {
  if (generalinfo_ != NULL) generalinfo_->::micromsg::BackupStartGeneralInfo::Clear();
  clear_has_generalinfo();
}
inline const ::micromsg::BackupStartGeneralInfo& BackupStartResponse::generalinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupStartResponse.GeneralInfo)
  return generalinfo_ != NULL ? *generalinfo_
                         : *::micromsg::BackupStartGeneralInfo::internal_default_instance();
}
inline ::micromsg::BackupStartGeneralInfo* BackupStartResponse::mutable_generalinfo() {
  set_has_generalinfo();
  if (generalinfo_ == NULL) {
    generalinfo_ = new ::micromsg::BackupStartGeneralInfo;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BackupStartResponse.GeneralInfo)
  return generalinfo_;
}
inline ::micromsg::BackupStartGeneralInfo* BackupStartResponse::release_generalinfo() {
  // @@protoc_insertion_point(field_release:micromsg.BackupStartResponse.GeneralInfo)
  clear_has_generalinfo();
  ::micromsg::BackupStartGeneralInfo* temp = generalinfo_;
  generalinfo_ = NULL;
  return temp;
}
inline void BackupStartResponse::set_allocated_generalinfo(::micromsg::BackupStartGeneralInfo* generalinfo) {
  delete generalinfo_;
  generalinfo_ = generalinfo;
  if (generalinfo) {
    set_has_generalinfo();
  } else {
    clear_has_generalinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BackupStartResponse.GeneralInfo)
}

// -------------------------------------------------------------------

// BackupRequestSession

// repeated string SessionName = 1;
inline int BackupRequestSession::sessionname_size() const {
  return sessionname_.size();
}
inline void BackupRequestSession::clear_sessionname() {
  sessionname_.Clear();
}
inline const ::std::string& BackupRequestSession::sessionname(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.BackupRequestSession.SessionName)
  return sessionname_.Get(index);
}
inline ::std::string* BackupRequestSession::mutable_sessionname(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.BackupRequestSession.SessionName)
  return sessionname_.Mutable(index);
}
inline void BackupRequestSession::set_sessionname(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:micromsg.BackupRequestSession.SessionName)
  sessionname_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void BackupRequestSession::set_sessionname(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:micromsg.BackupRequestSession.SessionName)
  sessionname_.Mutable(index)->assign(std::move(value));
}
#endif
inline void BackupRequestSession::set_sessionname(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  sessionname_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:micromsg.BackupRequestSession.SessionName)
}
inline void BackupRequestSession::set_sessionname(int index, const char* value, size_t size) {
  sessionname_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:micromsg.BackupRequestSession.SessionName)
}
inline ::std::string* BackupRequestSession::add_sessionname() {
  // @@protoc_insertion_point(field_add_mutable:micromsg.BackupRequestSession.SessionName)
  return sessionname_.Add();
}
inline void BackupRequestSession::add_sessionname(const ::std::string& value) {
  sessionname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:micromsg.BackupRequestSession.SessionName)
}
#if LANG_CXX11
inline void BackupRequestSession::add_sessionname(::std::string&& value) {
  sessionname_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:micromsg.BackupRequestSession.SessionName)
}
#endif
inline void BackupRequestSession::add_sessionname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  sessionname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:micromsg.BackupRequestSession.SessionName)
}
inline void BackupRequestSession::add_sessionname(const char* value, size_t size) {
  sessionname_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:micromsg.BackupRequestSession.SessionName)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BackupRequestSession::sessionname() const {
  // @@protoc_insertion_point(field_list:micromsg.BackupRequestSession.SessionName)
  return sessionname_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BackupRequestSession::mutable_sessionname() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.BackupRequestSession.SessionName)
  return &sessionname_;
}

// repeated int64 TimeInterval = 2;
inline int BackupRequestSession::timeinterval_size() const {
  return timeinterval_.size();
}
inline void BackupRequestSession::clear_timeinterval() {
  timeinterval_.Clear();
}
inline ::google::protobuf::int64 BackupRequestSession::timeinterval(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.BackupRequestSession.TimeInterval)
  return timeinterval_.Get(index);
}
inline void BackupRequestSession::set_timeinterval(int index, ::google::protobuf::int64 value) {
  timeinterval_.Set(index, value);
  // @@protoc_insertion_point(field_set:micromsg.BackupRequestSession.TimeInterval)
}
inline void BackupRequestSession::add_timeinterval(::google::protobuf::int64 value) {
  timeinterval_.Add(value);
  // @@protoc_insertion_point(field_add:micromsg.BackupRequestSession.TimeInterval)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
BackupRequestSession::timeinterval() const {
  // @@protoc_insertion_point(field_list:micromsg.BackupRequestSession.TimeInterval)
  return timeinterval_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
BackupRequestSession::mutable_timeinterval() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.BackupRequestSession.TimeInterval)
  return &timeinterval_;
}

// -------------------------------------------------------------------

// BackupRequestSessionResponse

// repeated string SessionName = 1;
inline int BackupRequestSessionResponse::sessionname_size() const {
  return sessionname_.size();
}
inline void BackupRequestSessionResponse::clear_sessionname() {
  sessionname_.Clear();
}
inline const ::std::string& BackupRequestSessionResponse::sessionname(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.BackupRequestSessionResponse.SessionName)
  return sessionname_.Get(index);
}
inline ::std::string* BackupRequestSessionResponse::mutable_sessionname(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.BackupRequestSessionResponse.SessionName)
  return sessionname_.Mutable(index);
}
inline void BackupRequestSessionResponse::set_sessionname(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:micromsg.BackupRequestSessionResponse.SessionName)
  sessionname_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void BackupRequestSessionResponse::set_sessionname(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:micromsg.BackupRequestSessionResponse.SessionName)
  sessionname_.Mutable(index)->assign(std::move(value));
}
#endif
inline void BackupRequestSessionResponse::set_sessionname(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  sessionname_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:micromsg.BackupRequestSessionResponse.SessionName)
}
inline void BackupRequestSessionResponse::set_sessionname(int index, const char* value, size_t size) {
  sessionname_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:micromsg.BackupRequestSessionResponse.SessionName)
}
inline ::std::string* BackupRequestSessionResponse::add_sessionname() {
  // @@protoc_insertion_point(field_add_mutable:micromsg.BackupRequestSessionResponse.SessionName)
  return sessionname_.Add();
}
inline void BackupRequestSessionResponse::add_sessionname(const ::std::string& value) {
  sessionname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:micromsg.BackupRequestSessionResponse.SessionName)
}
#if LANG_CXX11
inline void BackupRequestSessionResponse::add_sessionname(::std::string&& value) {
  sessionname_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:micromsg.BackupRequestSessionResponse.SessionName)
}
#endif
inline void BackupRequestSessionResponse::add_sessionname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  sessionname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:micromsg.BackupRequestSessionResponse.SessionName)
}
inline void BackupRequestSessionResponse::add_sessionname(const char* value, size_t size) {
  sessionname_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:micromsg.BackupRequestSessionResponse.SessionName)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BackupRequestSessionResponse::sessionname() const {
  // @@protoc_insertion_point(field_list:micromsg.BackupRequestSessionResponse.SessionName)
  return sessionname_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BackupRequestSessionResponse::mutable_sessionname() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.BackupRequestSessionResponse.SessionName)
  return &sessionname_;
}

// repeated int64 TimeInterval = 2;
inline int BackupRequestSessionResponse::timeinterval_size() const {
  return timeinterval_.size();
}
inline void BackupRequestSessionResponse::clear_timeinterval() {
  timeinterval_.Clear();
}
inline ::google::protobuf::int64 BackupRequestSessionResponse::timeinterval(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.BackupRequestSessionResponse.TimeInterval)
  return timeinterval_.Get(index);
}
inline void BackupRequestSessionResponse::set_timeinterval(int index, ::google::protobuf::int64 value) {
  timeinterval_.Set(index, value);
  // @@protoc_insertion_point(field_set:micromsg.BackupRequestSessionResponse.TimeInterval)
}
inline void BackupRequestSessionResponse::add_timeinterval(::google::protobuf::int64 value) {
  timeinterval_.Add(value);
  // @@protoc_insertion_point(field_add:micromsg.BackupRequestSessionResponse.TimeInterval)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
BackupRequestSessionResponse::timeinterval() const {
  // @@protoc_insertion_point(field_list:micromsg.BackupRequestSessionResponse.TimeInterval)
  return timeinterval_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
BackupRequestSessionResponse::mutable_timeinterval() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.BackupRequestSessionResponse.TimeInterval)
  return &timeinterval_;
}

// -------------------------------------------------------------------

// PacketBackupDataPush

// required string DataID = 1;
inline bool PacketBackupDataPush::has_dataid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PacketBackupDataPush::set_has_dataid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PacketBackupDataPush::clear_has_dataid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PacketBackupDataPush::clear_dataid() {
  dataid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dataid();
}
inline const ::std::string& PacketBackupDataPush::dataid() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketBackupDataPush.DataID)
  return dataid_.GetNoArena();
}
inline void PacketBackupDataPush::set_dataid(const ::std::string& value) {
  set_has_dataid();
  dataid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.PacketBackupDataPush.DataID)
}
#if LANG_CXX11
inline void PacketBackupDataPush::set_dataid(::std::string&& value) {
  set_has_dataid();
  dataid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.PacketBackupDataPush.DataID)
}
#endif
inline void PacketBackupDataPush::set_dataid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_dataid();
  dataid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.PacketBackupDataPush.DataID)
}
inline void PacketBackupDataPush::set_dataid(const char* value, size_t size) {
  set_has_dataid();
  dataid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.PacketBackupDataPush.DataID)
}
inline ::std::string* PacketBackupDataPush::mutable_dataid() {
  set_has_dataid();
  // @@protoc_insertion_point(field_mutable:micromsg.PacketBackupDataPush.DataID)
  return dataid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PacketBackupDataPush::release_dataid() {
  // @@protoc_insertion_point(field_release:micromsg.PacketBackupDataPush.DataID)
  clear_has_dataid();
  return dataid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PacketBackupDataPush::set_allocated_dataid(::std::string* dataid) {
  if (dataid != NULL) {
    set_has_dataid();
  } else {
    clear_has_dataid();
  }
  dataid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dataid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.PacketBackupDataPush.DataID)
}

// required int32 DataType = 2;
inline bool PacketBackupDataPush::has_datatype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PacketBackupDataPush::set_has_datatype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PacketBackupDataPush::clear_has_datatype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PacketBackupDataPush::clear_datatype() {
  datatype_ = 0;
  clear_has_datatype();
}
inline ::google::protobuf::int32 PacketBackupDataPush::datatype() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketBackupDataPush.DataType)
  return datatype_;
}
inline void PacketBackupDataPush::set_datatype(::google::protobuf::int32 value) {
  set_has_datatype();
  datatype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PacketBackupDataPush.DataType)
}

// required int32 DataSize = 3;
inline bool PacketBackupDataPush::has_datasize() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PacketBackupDataPush::set_has_datasize() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PacketBackupDataPush::clear_has_datasize() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PacketBackupDataPush::clear_datasize() {
  datasize_ = 0;
  clear_has_datasize();
}
inline ::google::protobuf::int32 PacketBackupDataPush::datasize() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketBackupDataPush.DataSize)
  return datasize_;
}
inline void PacketBackupDataPush::set_datasize(::google::protobuf::int32 value) {
  set_has_datasize();
  datasize_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PacketBackupDataPush.DataSize)
}

// required int32 StartOffset = 4;
inline bool PacketBackupDataPush::has_startoffset() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PacketBackupDataPush::set_has_startoffset() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PacketBackupDataPush::clear_has_startoffset() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PacketBackupDataPush::clear_startoffset() {
  startoffset_ = 0;
  clear_has_startoffset();
}
inline ::google::protobuf::int32 PacketBackupDataPush::startoffset() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketBackupDataPush.StartOffset)
  return startoffset_;
}
inline void PacketBackupDataPush::set_startoffset(::google::protobuf::int32 value) {
  set_has_startoffset();
  startoffset_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PacketBackupDataPush.StartOffset)
}

// required int32 EndOffset = 5;
inline bool PacketBackupDataPush::has_endoffset() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PacketBackupDataPush::set_has_endoffset() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PacketBackupDataPush::clear_has_endoffset() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PacketBackupDataPush::clear_endoffset() {
  endoffset_ = 0;
  clear_has_endoffset();
}
inline ::google::protobuf::int32 PacketBackupDataPush::endoffset() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketBackupDataPush.EndOffset)
  return endoffset_;
}
inline void PacketBackupDataPush::set_endoffset(::google::protobuf::int32 value) {
  set_has_endoffset();
  endoffset_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PacketBackupDataPush.EndOffset)
}

// optional int32 CheckSum = 6;
inline bool PacketBackupDataPush::has_checksum() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PacketBackupDataPush::set_has_checksum() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PacketBackupDataPush::clear_has_checksum() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PacketBackupDataPush::clear_checksum() {
  checksum_ = 0;
  clear_has_checksum();
}
inline ::google::protobuf::int32 PacketBackupDataPush::checksum() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketBackupDataPush.CheckSum)
  return checksum_;
}
inline void PacketBackupDataPush::set_checksum(::google::protobuf::int32 value) {
  set_has_checksum();
  checksum_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PacketBackupDataPush.CheckSum)
}

// optional bytes Data = 7;
inline bool PacketBackupDataPush::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PacketBackupDataPush::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PacketBackupDataPush::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PacketBackupDataPush::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& PacketBackupDataPush::data() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketBackupDataPush.Data)
  return data_.GetNoArena();
}
inline void PacketBackupDataPush::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.PacketBackupDataPush.Data)
}
#if LANG_CXX11
inline void PacketBackupDataPush::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.PacketBackupDataPush.Data)
}
#endif
inline void PacketBackupDataPush::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.PacketBackupDataPush.Data)
}
inline void PacketBackupDataPush::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.PacketBackupDataPush.Data)
}
inline ::std::string* PacketBackupDataPush::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:micromsg.PacketBackupDataPush.Data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PacketBackupDataPush::release_data() {
  // @@protoc_insertion_point(field_release:micromsg.PacketBackupDataPush.Data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PacketBackupDataPush::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:micromsg.PacketBackupDataPush.Data)
}

// optional int32 Progress = 8;
inline bool PacketBackupDataPush::has_progress() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PacketBackupDataPush::set_has_progress() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PacketBackupDataPush::clear_has_progress() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PacketBackupDataPush::clear_progress() {
  progress_ = 0;
  clear_has_progress();
}
inline ::google::protobuf::int32 PacketBackupDataPush::progress() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketBackupDataPush.Progress)
  return progress_;
}
inline void PacketBackupDataPush::set_progress(::google::protobuf::int32 value) {
  set_has_progress();
  progress_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PacketBackupDataPush.Progress)
}

// -------------------------------------------------------------------

// PacketBackupDataResponse

// required string DataID = 1;
inline bool PacketBackupDataResponse::has_dataid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PacketBackupDataResponse::set_has_dataid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PacketBackupDataResponse::clear_has_dataid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PacketBackupDataResponse::clear_dataid() {
  dataid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dataid();
}
inline const ::std::string& PacketBackupDataResponse::dataid() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketBackupDataResponse.DataID)
  return dataid_.GetNoArena();
}
inline void PacketBackupDataResponse::set_dataid(const ::std::string& value) {
  set_has_dataid();
  dataid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.PacketBackupDataResponse.DataID)
}
#if LANG_CXX11
inline void PacketBackupDataResponse::set_dataid(::std::string&& value) {
  set_has_dataid();
  dataid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.PacketBackupDataResponse.DataID)
}
#endif
inline void PacketBackupDataResponse::set_dataid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_dataid();
  dataid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.PacketBackupDataResponse.DataID)
}
inline void PacketBackupDataResponse::set_dataid(const char* value, size_t size) {
  set_has_dataid();
  dataid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.PacketBackupDataResponse.DataID)
}
inline ::std::string* PacketBackupDataResponse::mutable_dataid() {
  set_has_dataid();
  // @@protoc_insertion_point(field_mutable:micromsg.PacketBackupDataResponse.DataID)
  return dataid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PacketBackupDataResponse::release_dataid() {
  // @@protoc_insertion_point(field_release:micromsg.PacketBackupDataResponse.DataID)
  clear_has_dataid();
  return dataid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PacketBackupDataResponse::set_allocated_dataid(::std::string* dataid) {
  if (dataid != NULL) {
    set_has_dataid();
  } else {
    clear_has_dataid();
  }
  dataid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dataid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.PacketBackupDataResponse.DataID)
}

// required int32 DataType = 2;
inline bool PacketBackupDataResponse::has_datatype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PacketBackupDataResponse::set_has_datatype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PacketBackupDataResponse::clear_has_datatype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PacketBackupDataResponse::clear_datatype() {
  datatype_ = 0;
  clear_has_datatype();
}
inline ::google::protobuf::int32 PacketBackupDataResponse::datatype() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketBackupDataResponse.DataType)
  return datatype_;
}
inline void PacketBackupDataResponse::set_datatype(::google::protobuf::int32 value) {
  set_has_datatype();
  datatype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PacketBackupDataResponse.DataType)
}

// required int32 StartOffset = 3;
inline bool PacketBackupDataResponse::has_startoffset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PacketBackupDataResponse::set_has_startoffset() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PacketBackupDataResponse::clear_has_startoffset() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PacketBackupDataResponse::clear_startoffset() {
  startoffset_ = 0;
  clear_has_startoffset();
}
inline ::google::protobuf::int32 PacketBackupDataResponse::startoffset() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketBackupDataResponse.StartOffset)
  return startoffset_;
}
inline void PacketBackupDataResponse::set_startoffset(::google::protobuf::int32 value) {
  set_has_startoffset();
  startoffset_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PacketBackupDataResponse.StartOffset)
}

// required int32 EndOffset = 4;
inline bool PacketBackupDataResponse::has_endoffset() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PacketBackupDataResponse::set_has_endoffset() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PacketBackupDataResponse::clear_has_endoffset() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PacketBackupDataResponse::clear_endoffset() {
  endoffset_ = 0;
  clear_has_endoffset();
}
inline ::google::protobuf::int32 PacketBackupDataResponse::endoffset() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketBackupDataResponse.EndOffset)
  return endoffset_;
}
inline void PacketBackupDataResponse::set_endoffset(::google::protobuf::int32 value) {
  set_has_endoffset();
  endoffset_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PacketBackupDataResponse.EndOffset)
}

// required int32 Status = 5;
inline bool PacketBackupDataResponse::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PacketBackupDataResponse::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PacketBackupDataResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PacketBackupDataResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 PacketBackupDataResponse::status() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketBackupDataResponse.Status)
  return status_;
}
inline void PacketBackupDataResponse::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PacketBackupDataResponse.Status)
}

// -------------------------------------------------------------------

// PacketSvrIDRequest

// repeated uint64 SvrID = 1;
inline int PacketSvrIDRequest::svrid_size() const {
  return svrid_.size();
}
inline void PacketSvrIDRequest::clear_svrid() {
  svrid_.Clear();
}
inline ::google::protobuf::uint64 PacketSvrIDRequest::svrid(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.PacketSvrIDRequest.SvrID)
  return svrid_.Get(index);
}
inline void PacketSvrIDRequest::set_svrid(int index, ::google::protobuf::uint64 value) {
  svrid_.Set(index, value);
  // @@protoc_insertion_point(field_set:micromsg.PacketSvrIDRequest.SvrID)
}
inline void PacketSvrIDRequest::add_svrid(::google::protobuf::uint64 value) {
  svrid_.Add(value);
  // @@protoc_insertion_point(field_add:micromsg.PacketSvrIDRequest.SvrID)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
PacketSvrIDRequest::svrid() const {
  // @@protoc_insertion_point(field_list:micromsg.PacketSvrIDRequest.SvrID)
  return svrid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
PacketSvrIDRequest::mutable_svrid() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.PacketSvrIDRequest.SvrID)
  return &svrid_;
}

// repeated string MediaID = 2;
inline int PacketSvrIDRequest::mediaid_size() const {
  return mediaid_.size();
}
inline void PacketSvrIDRequest::clear_mediaid() {
  mediaid_.Clear();
}
inline const ::std::string& PacketSvrIDRequest::mediaid(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.PacketSvrIDRequest.MediaID)
  return mediaid_.Get(index);
}
inline ::std::string* PacketSvrIDRequest::mutable_mediaid(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.PacketSvrIDRequest.MediaID)
  return mediaid_.Mutable(index);
}
inline void PacketSvrIDRequest::set_mediaid(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:micromsg.PacketSvrIDRequest.MediaID)
  mediaid_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void PacketSvrIDRequest::set_mediaid(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:micromsg.PacketSvrIDRequest.MediaID)
  mediaid_.Mutable(index)->assign(std::move(value));
}
#endif
inline void PacketSvrIDRequest::set_mediaid(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  mediaid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:micromsg.PacketSvrIDRequest.MediaID)
}
inline void PacketSvrIDRequest::set_mediaid(int index, const char* value, size_t size) {
  mediaid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:micromsg.PacketSvrIDRequest.MediaID)
}
inline ::std::string* PacketSvrIDRequest::add_mediaid() {
  // @@protoc_insertion_point(field_add_mutable:micromsg.PacketSvrIDRequest.MediaID)
  return mediaid_.Add();
}
inline void PacketSvrIDRequest::add_mediaid(const ::std::string& value) {
  mediaid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:micromsg.PacketSvrIDRequest.MediaID)
}
#if LANG_CXX11
inline void PacketSvrIDRequest::add_mediaid(::std::string&& value) {
  mediaid_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:micromsg.PacketSvrIDRequest.MediaID)
}
#endif
inline void PacketSvrIDRequest::add_mediaid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  mediaid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:micromsg.PacketSvrIDRequest.MediaID)
}
inline void PacketSvrIDRequest::add_mediaid(const char* value, size_t size) {
  mediaid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:micromsg.PacketSvrIDRequest.MediaID)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PacketSvrIDRequest::mediaid() const {
  // @@protoc_insertion_point(field_list:micromsg.PacketSvrIDRequest.MediaID)
  return mediaid_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PacketSvrIDRequest::mutable_mediaid() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.PacketSvrIDRequest.MediaID)
  return &mediaid_;
}

// repeated string MD5 = 3;
inline int PacketSvrIDRequest::md5_size() const {
  return md5_.size();
}
inline void PacketSvrIDRequest::clear_md5() {
  md5_.Clear();
}
inline const ::std::string& PacketSvrIDRequest::md5(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.PacketSvrIDRequest.MD5)
  return md5_.Get(index);
}
inline ::std::string* PacketSvrIDRequest::mutable_md5(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.PacketSvrIDRequest.MD5)
  return md5_.Mutable(index);
}
inline void PacketSvrIDRequest::set_md5(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:micromsg.PacketSvrIDRequest.MD5)
  md5_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void PacketSvrIDRequest::set_md5(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:micromsg.PacketSvrIDRequest.MD5)
  md5_.Mutable(index)->assign(std::move(value));
}
#endif
inline void PacketSvrIDRequest::set_md5(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  md5_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:micromsg.PacketSvrIDRequest.MD5)
}
inline void PacketSvrIDRequest::set_md5(int index, const char* value, size_t size) {
  md5_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:micromsg.PacketSvrIDRequest.MD5)
}
inline ::std::string* PacketSvrIDRequest::add_md5() {
  // @@protoc_insertion_point(field_add_mutable:micromsg.PacketSvrIDRequest.MD5)
  return md5_.Add();
}
inline void PacketSvrIDRequest::add_md5(const ::std::string& value) {
  md5_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:micromsg.PacketSvrIDRequest.MD5)
}
#if LANG_CXX11
inline void PacketSvrIDRequest::add_md5(::std::string&& value) {
  md5_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:micromsg.PacketSvrIDRequest.MD5)
}
#endif
inline void PacketSvrIDRequest::add_md5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  md5_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:micromsg.PacketSvrIDRequest.MD5)
}
inline void PacketSvrIDRequest::add_md5(const char* value, size_t size) {
  md5_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:micromsg.PacketSvrIDRequest.MD5)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PacketSvrIDRequest::md5() const {
  // @@protoc_insertion_point(field_list:micromsg.PacketSvrIDRequest.MD5)
  return md5_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PacketSvrIDRequest::mutable_md5() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.PacketSvrIDRequest.MD5)
  return &md5_;
}

// required string BakChatName = 4;
inline bool PacketSvrIDRequest::has_bakchatname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PacketSvrIDRequest::set_has_bakchatname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PacketSvrIDRequest::clear_has_bakchatname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PacketSvrIDRequest::clear_bakchatname() {
  bakchatname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bakchatname();
}
inline const ::std::string& PacketSvrIDRequest::bakchatname() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketSvrIDRequest.BakChatName)
  return bakchatname_.GetNoArena();
}
inline void PacketSvrIDRequest::set_bakchatname(const ::std::string& value) {
  set_has_bakchatname();
  bakchatname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.PacketSvrIDRequest.BakChatName)
}
#if LANG_CXX11
inline void PacketSvrIDRequest::set_bakchatname(::std::string&& value) {
  set_has_bakchatname();
  bakchatname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.PacketSvrIDRequest.BakChatName)
}
#endif
inline void PacketSvrIDRequest::set_bakchatname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bakchatname();
  bakchatname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.PacketSvrIDRequest.BakChatName)
}
inline void PacketSvrIDRequest::set_bakchatname(const char* value, size_t size) {
  set_has_bakchatname();
  bakchatname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.PacketSvrIDRequest.BakChatName)
}
inline ::std::string* PacketSvrIDRequest::mutable_bakchatname() {
  set_has_bakchatname();
  // @@protoc_insertion_point(field_mutable:micromsg.PacketSvrIDRequest.BakChatName)
  return bakchatname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PacketSvrIDRequest::release_bakchatname() {
  // @@protoc_insertion_point(field_release:micromsg.PacketSvrIDRequest.BakChatName)
  clear_has_bakchatname();
  return bakchatname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PacketSvrIDRequest::set_allocated_bakchatname(::std::string* bakchatname) {
  if (bakchatname != NULL) {
    set_has_bakchatname();
  } else {
    clear_has_bakchatname();
  }
  bakchatname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bakchatname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.PacketSvrIDRequest.BakChatName)
}

// -------------------------------------------------------------------

// PacketSvrIDResponse

// repeated uint64 SvrID = 1;
inline int PacketSvrIDResponse::svrid_size() const {
  return svrid_.size();
}
inline void PacketSvrIDResponse::clear_svrid() {
  svrid_.Clear();
}
inline ::google::protobuf::uint64 PacketSvrIDResponse::svrid(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.PacketSvrIDResponse.SvrID)
  return svrid_.Get(index);
}
inline void PacketSvrIDResponse::set_svrid(int index, ::google::protobuf::uint64 value) {
  svrid_.Set(index, value);
  // @@protoc_insertion_point(field_set:micromsg.PacketSvrIDResponse.SvrID)
}
inline void PacketSvrIDResponse::add_svrid(::google::protobuf::uint64 value) {
  svrid_.Add(value);
  // @@protoc_insertion_point(field_add:micromsg.PacketSvrIDResponse.SvrID)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
PacketSvrIDResponse::svrid() const {
  // @@protoc_insertion_point(field_list:micromsg.PacketSvrIDResponse.SvrID)
  return svrid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
PacketSvrIDResponse::mutable_svrid() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.PacketSvrIDResponse.SvrID)
  return &svrid_;
}

// repeated string MediaID = 2;
inline int PacketSvrIDResponse::mediaid_size() const {
  return mediaid_.size();
}
inline void PacketSvrIDResponse::clear_mediaid() {
  mediaid_.Clear();
}
inline const ::std::string& PacketSvrIDResponse::mediaid(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.PacketSvrIDResponse.MediaID)
  return mediaid_.Get(index);
}
inline ::std::string* PacketSvrIDResponse::mutable_mediaid(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.PacketSvrIDResponse.MediaID)
  return mediaid_.Mutable(index);
}
inline void PacketSvrIDResponse::set_mediaid(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:micromsg.PacketSvrIDResponse.MediaID)
  mediaid_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void PacketSvrIDResponse::set_mediaid(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:micromsg.PacketSvrIDResponse.MediaID)
  mediaid_.Mutable(index)->assign(std::move(value));
}
#endif
inline void PacketSvrIDResponse::set_mediaid(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  mediaid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:micromsg.PacketSvrIDResponse.MediaID)
}
inline void PacketSvrIDResponse::set_mediaid(int index, const char* value, size_t size) {
  mediaid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:micromsg.PacketSvrIDResponse.MediaID)
}
inline ::std::string* PacketSvrIDResponse::add_mediaid() {
  // @@protoc_insertion_point(field_add_mutable:micromsg.PacketSvrIDResponse.MediaID)
  return mediaid_.Add();
}
inline void PacketSvrIDResponse::add_mediaid(const ::std::string& value) {
  mediaid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:micromsg.PacketSvrIDResponse.MediaID)
}
#if LANG_CXX11
inline void PacketSvrIDResponse::add_mediaid(::std::string&& value) {
  mediaid_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:micromsg.PacketSvrIDResponse.MediaID)
}
#endif
inline void PacketSvrIDResponse::add_mediaid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  mediaid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:micromsg.PacketSvrIDResponse.MediaID)
}
inline void PacketSvrIDResponse::add_mediaid(const char* value, size_t size) {
  mediaid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:micromsg.PacketSvrIDResponse.MediaID)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PacketSvrIDResponse::mediaid() const {
  // @@protoc_insertion_point(field_list:micromsg.PacketSvrIDResponse.MediaID)
  return mediaid_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PacketSvrIDResponse::mutable_mediaid() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.PacketSvrIDResponse.MediaID)
  return &mediaid_;
}

// repeated string MD5 = 3;
inline int PacketSvrIDResponse::md5_size() const {
  return md5_.size();
}
inline void PacketSvrIDResponse::clear_md5() {
  md5_.Clear();
}
inline const ::std::string& PacketSvrIDResponse::md5(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.PacketSvrIDResponse.MD5)
  return md5_.Get(index);
}
inline ::std::string* PacketSvrIDResponse::mutable_md5(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.PacketSvrIDResponse.MD5)
  return md5_.Mutable(index);
}
inline void PacketSvrIDResponse::set_md5(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:micromsg.PacketSvrIDResponse.MD5)
  md5_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void PacketSvrIDResponse::set_md5(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:micromsg.PacketSvrIDResponse.MD5)
  md5_.Mutable(index)->assign(std::move(value));
}
#endif
inline void PacketSvrIDResponse::set_md5(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  md5_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:micromsg.PacketSvrIDResponse.MD5)
}
inline void PacketSvrIDResponse::set_md5(int index, const char* value, size_t size) {
  md5_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:micromsg.PacketSvrIDResponse.MD5)
}
inline ::std::string* PacketSvrIDResponse::add_md5() {
  // @@protoc_insertion_point(field_add_mutable:micromsg.PacketSvrIDResponse.MD5)
  return md5_.Add();
}
inline void PacketSvrIDResponse::add_md5(const ::std::string& value) {
  md5_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:micromsg.PacketSvrIDResponse.MD5)
}
#if LANG_CXX11
inline void PacketSvrIDResponse::add_md5(::std::string&& value) {
  md5_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:micromsg.PacketSvrIDResponse.MD5)
}
#endif
inline void PacketSvrIDResponse::add_md5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  md5_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:micromsg.PacketSvrIDResponse.MD5)
}
inline void PacketSvrIDResponse::add_md5(const char* value, size_t size) {
  md5_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:micromsg.PacketSvrIDResponse.MD5)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PacketSvrIDResponse::md5() const {
  // @@protoc_insertion_point(field_list:micromsg.PacketSvrIDResponse.MD5)
  return md5_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PacketSvrIDResponse::mutable_md5() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.PacketSvrIDResponse.MD5)
  return &md5_;
}

// required string BakChatName = 4;
inline bool PacketSvrIDResponse::has_bakchatname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PacketSvrIDResponse::set_has_bakchatname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PacketSvrIDResponse::clear_has_bakchatname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PacketSvrIDResponse::clear_bakchatname() {
  bakchatname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bakchatname();
}
inline const ::std::string& PacketSvrIDResponse::bakchatname() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketSvrIDResponse.BakChatName)
  return bakchatname_.GetNoArena();
}
inline void PacketSvrIDResponse::set_bakchatname(const ::std::string& value) {
  set_has_bakchatname();
  bakchatname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.PacketSvrIDResponse.BakChatName)
}
#if LANG_CXX11
inline void PacketSvrIDResponse::set_bakchatname(::std::string&& value) {
  set_has_bakchatname();
  bakchatname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.PacketSvrIDResponse.BakChatName)
}
#endif
inline void PacketSvrIDResponse::set_bakchatname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bakchatname();
  bakchatname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.PacketSvrIDResponse.BakChatName)
}
inline void PacketSvrIDResponse::set_bakchatname(const char* value, size_t size) {
  set_has_bakchatname();
  bakchatname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.PacketSvrIDResponse.BakChatName)
}
inline ::std::string* PacketSvrIDResponse::mutable_bakchatname() {
  set_has_bakchatname();
  // @@protoc_insertion_point(field_mutable:micromsg.PacketSvrIDResponse.BakChatName)
  return bakchatname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PacketSvrIDResponse::release_bakchatname() {
  // @@protoc_insertion_point(field_release:micromsg.PacketSvrIDResponse.BakChatName)
  clear_has_bakchatname();
  return bakchatname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PacketSvrIDResponse::set_allocated_bakchatname(::std::string* bakchatname) {
  if (bakchatname != NULL) {
    set_has_bakchatname();
  } else {
    clear_has_bakchatname();
  }
  bakchatname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bakchatname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.PacketSvrIDResponse.BakChatName)
}

// -------------------------------------------------------------------

// PacketBackupDataTag

// required string BakChatName = 1;
inline bool PacketBackupDataTag::has_bakchatname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PacketBackupDataTag::set_has_bakchatname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PacketBackupDataTag::clear_has_bakchatname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PacketBackupDataTag::clear_bakchatname() {
  bakchatname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bakchatname();
}
inline const ::std::string& PacketBackupDataTag::bakchatname() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketBackupDataTag.BakChatName)
  return bakchatname_.GetNoArena();
}
inline void PacketBackupDataTag::set_bakchatname(const ::std::string& value) {
  set_has_bakchatname();
  bakchatname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.PacketBackupDataTag.BakChatName)
}
#if LANG_CXX11
inline void PacketBackupDataTag::set_bakchatname(::std::string&& value) {
  set_has_bakchatname();
  bakchatname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.PacketBackupDataTag.BakChatName)
}
#endif
inline void PacketBackupDataTag::set_bakchatname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bakchatname();
  bakchatname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.PacketBackupDataTag.BakChatName)
}
inline void PacketBackupDataTag::set_bakchatname(const char* value, size_t size) {
  set_has_bakchatname();
  bakchatname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.PacketBackupDataTag.BakChatName)
}
inline ::std::string* PacketBackupDataTag::mutable_bakchatname() {
  set_has_bakchatname();
  // @@protoc_insertion_point(field_mutable:micromsg.PacketBackupDataTag.BakChatName)
  return bakchatname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PacketBackupDataTag::release_bakchatname() {
  // @@protoc_insertion_point(field_release:micromsg.PacketBackupDataTag.BakChatName)
  clear_has_bakchatname();
  return bakchatname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PacketBackupDataTag::set_allocated_bakchatname(::std::string* bakchatname) {
  if (bakchatname != NULL) {
    set_has_bakchatname();
  } else {
    clear_has_bakchatname();
  }
  bakchatname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bakchatname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.PacketBackupDataTag.BakChatName)
}

// required int64 StartTime = 2;
inline bool PacketBackupDataTag::has_starttime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PacketBackupDataTag::set_has_starttime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PacketBackupDataTag::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PacketBackupDataTag::clear_starttime() {
  starttime_ = GOOGLE_LONGLONG(0);
  clear_has_starttime();
}
inline ::google::protobuf::int64 PacketBackupDataTag::starttime() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketBackupDataTag.StartTime)
  return starttime_;
}
inline void PacketBackupDataTag::set_starttime(::google::protobuf::int64 value) {
  set_has_starttime();
  starttime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PacketBackupDataTag.StartTime)
}

// required int64 EndTime = 3;
inline bool PacketBackupDataTag::has_endtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PacketBackupDataTag::set_has_endtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PacketBackupDataTag::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PacketBackupDataTag::clear_endtime() {
  endtime_ = GOOGLE_LONGLONG(0);
  clear_has_endtime();
}
inline ::google::protobuf::int64 PacketBackupDataTag::endtime() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketBackupDataTag.EndTime)
  return endtime_;
}
inline void PacketBackupDataTag::set_endtime(::google::protobuf::int64 value) {
  set_has_endtime();
  endtime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PacketBackupDataTag.EndTime)
}

// required string MsgDataID = 4;
inline bool PacketBackupDataTag::has_msgdataid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PacketBackupDataTag::set_has_msgdataid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PacketBackupDataTag::clear_has_msgdataid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PacketBackupDataTag::clear_msgdataid() {
  msgdataid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msgdataid();
}
inline const ::std::string& PacketBackupDataTag::msgdataid() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketBackupDataTag.MsgDataID)
  return msgdataid_.GetNoArena();
}
inline void PacketBackupDataTag::set_msgdataid(const ::std::string& value) {
  set_has_msgdataid();
  msgdataid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.PacketBackupDataTag.MsgDataID)
}
#if LANG_CXX11
inline void PacketBackupDataTag::set_msgdataid(::std::string&& value) {
  set_has_msgdataid();
  msgdataid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.PacketBackupDataTag.MsgDataID)
}
#endif
inline void PacketBackupDataTag::set_msgdataid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msgdataid();
  msgdataid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.PacketBackupDataTag.MsgDataID)
}
inline void PacketBackupDataTag::set_msgdataid(const char* value, size_t size) {
  set_has_msgdataid();
  msgdataid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.PacketBackupDataTag.MsgDataID)
}
inline ::std::string* PacketBackupDataTag::mutable_msgdataid() {
  set_has_msgdataid();
  // @@protoc_insertion_point(field_mutable:micromsg.PacketBackupDataTag.MsgDataID)
  return msgdataid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PacketBackupDataTag::release_msgdataid() {
  // @@protoc_insertion_point(field_release:micromsg.PacketBackupDataTag.MsgDataID)
  clear_has_msgdataid();
  return msgdataid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PacketBackupDataTag::set_allocated_msgdataid(::std::string* msgdataid) {
  if (msgdataid != NULL) {
    set_has_msgdataid();
  } else {
    clear_has_msgdataid();
  }
  msgdataid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgdataid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.PacketBackupDataTag.MsgDataID)
}

// required string NickName = 5;
inline bool PacketBackupDataTag::has_nickname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PacketBackupDataTag::set_has_nickname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PacketBackupDataTag::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PacketBackupDataTag::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
inline const ::std::string& PacketBackupDataTag::nickname() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketBackupDataTag.NickName)
  return nickname_.GetNoArena();
}
inline void PacketBackupDataTag::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.PacketBackupDataTag.NickName)
}
#if LANG_CXX11
inline void PacketBackupDataTag::set_nickname(::std::string&& value) {
  set_has_nickname();
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.PacketBackupDataTag.NickName)
}
#endif
inline void PacketBackupDataTag::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.PacketBackupDataTag.NickName)
}
inline void PacketBackupDataTag::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.PacketBackupDataTag.NickName)
}
inline ::std::string* PacketBackupDataTag::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:micromsg.PacketBackupDataTag.NickName)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PacketBackupDataTag::release_nickname() {
  // @@protoc_insertion_point(field_release:micromsg.PacketBackupDataTag.NickName)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PacketBackupDataTag::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.PacketBackupDataTag.NickName)
}

// repeated string MediaIDList = 6;
inline int PacketBackupDataTag::mediaidlist_size() const {
  return mediaidlist_.size();
}
inline void PacketBackupDataTag::clear_mediaidlist() {
  mediaidlist_.Clear();
}
inline const ::std::string& PacketBackupDataTag::mediaidlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.PacketBackupDataTag.MediaIDList)
  return mediaidlist_.Get(index);
}
inline ::std::string* PacketBackupDataTag::mutable_mediaidlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.PacketBackupDataTag.MediaIDList)
  return mediaidlist_.Mutable(index);
}
inline void PacketBackupDataTag::set_mediaidlist(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:micromsg.PacketBackupDataTag.MediaIDList)
  mediaidlist_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void PacketBackupDataTag::set_mediaidlist(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:micromsg.PacketBackupDataTag.MediaIDList)
  mediaidlist_.Mutable(index)->assign(std::move(value));
}
#endif
inline void PacketBackupDataTag::set_mediaidlist(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  mediaidlist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:micromsg.PacketBackupDataTag.MediaIDList)
}
inline void PacketBackupDataTag::set_mediaidlist(int index, const char* value, size_t size) {
  mediaidlist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:micromsg.PacketBackupDataTag.MediaIDList)
}
inline ::std::string* PacketBackupDataTag::add_mediaidlist() {
  // @@protoc_insertion_point(field_add_mutable:micromsg.PacketBackupDataTag.MediaIDList)
  return mediaidlist_.Add();
}
inline void PacketBackupDataTag::add_mediaidlist(const ::std::string& value) {
  mediaidlist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:micromsg.PacketBackupDataTag.MediaIDList)
}
#if LANG_CXX11
inline void PacketBackupDataTag::add_mediaidlist(::std::string&& value) {
  mediaidlist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:micromsg.PacketBackupDataTag.MediaIDList)
}
#endif
inline void PacketBackupDataTag::add_mediaidlist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  mediaidlist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:micromsg.PacketBackupDataTag.MediaIDList)
}
inline void PacketBackupDataTag::add_mediaidlist(const char* value, size_t size) {
  mediaidlist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:micromsg.PacketBackupDataTag.MediaIDList)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PacketBackupDataTag::mediaidlist() const {
  // @@protoc_insertion_point(field_list:micromsg.PacketBackupDataTag.MediaIDList)
  return mediaidlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PacketBackupDataTag::mutable_mediaidlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.PacketBackupDataTag.MediaIDList)
  return &mediaidlist_;
}

// -------------------------------------------------------------------

// PacketBackupDataTagResponse

// required string BakChatName = 1;
inline bool PacketBackupDataTagResponse::has_bakchatname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PacketBackupDataTagResponse::set_has_bakchatname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PacketBackupDataTagResponse::clear_has_bakchatname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PacketBackupDataTagResponse::clear_bakchatname() {
  bakchatname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bakchatname();
}
inline const ::std::string& PacketBackupDataTagResponse::bakchatname() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketBackupDataTagResponse.BakChatName)
  return bakchatname_.GetNoArena();
}
inline void PacketBackupDataTagResponse::set_bakchatname(const ::std::string& value) {
  set_has_bakchatname();
  bakchatname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.PacketBackupDataTagResponse.BakChatName)
}
#if LANG_CXX11
inline void PacketBackupDataTagResponse::set_bakchatname(::std::string&& value) {
  set_has_bakchatname();
  bakchatname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.PacketBackupDataTagResponse.BakChatName)
}
#endif
inline void PacketBackupDataTagResponse::set_bakchatname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bakchatname();
  bakchatname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.PacketBackupDataTagResponse.BakChatName)
}
inline void PacketBackupDataTagResponse::set_bakchatname(const char* value, size_t size) {
  set_has_bakchatname();
  bakchatname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.PacketBackupDataTagResponse.BakChatName)
}
inline ::std::string* PacketBackupDataTagResponse::mutable_bakchatname() {
  set_has_bakchatname();
  // @@protoc_insertion_point(field_mutable:micromsg.PacketBackupDataTagResponse.BakChatName)
  return bakchatname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PacketBackupDataTagResponse::release_bakchatname() {
  // @@protoc_insertion_point(field_release:micromsg.PacketBackupDataTagResponse.BakChatName)
  clear_has_bakchatname();
  return bakchatname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PacketBackupDataTagResponse::set_allocated_bakchatname(::std::string* bakchatname) {
  if (bakchatname != NULL) {
    set_has_bakchatname();
  } else {
    clear_has_bakchatname();
  }
  bakchatname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bakchatname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.PacketBackupDataTagResponse.BakChatName)
}

// required int64 StartTime = 2;
inline bool PacketBackupDataTagResponse::has_starttime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PacketBackupDataTagResponse::set_has_starttime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PacketBackupDataTagResponse::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PacketBackupDataTagResponse::clear_starttime() {
  starttime_ = GOOGLE_LONGLONG(0);
  clear_has_starttime();
}
inline ::google::protobuf::int64 PacketBackupDataTagResponse::starttime() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketBackupDataTagResponse.StartTime)
  return starttime_;
}
inline void PacketBackupDataTagResponse::set_starttime(::google::protobuf::int64 value) {
  set_has_starttime();
  starttime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PacketBackupDataTagResponse.StartTime)
}

// required int64 EndTime = 3;
inline bool PacketBackupDataTagResponse::has_endtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PacketBackupDataTagResponse::set_has_endtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PacketBackupDataTagResponse::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PacketBackupDataTagResponse::clear_endtime() {
  endtime_ = GOOGLE_LONGLONG(0);
  clear_has_endtime();
}
inline ::google::protobuf::int64 PacketBackupDataTagResponse::endtime() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketBackupDataTagResponse.EndTime)
  return endtime_;
}
inline void PacketBackupDataTagResponse::set_endtime(::google::protobuf::int64 value) {
  set_has_endtime();
  endtime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PacketBackupDataTagResponse.EndTime)
}

// required string MsgDataID = 4;
inline bool PacketBackupDataTagResponse::has_msgdataid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PacketBackupDataTagResponse::set_has_msgdataid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PacketBackupDataTagResponse::clear_has_msgdataid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PacketBackupDataTagResponse::clear_msgdataid() {
  msgdataid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msgdataid();
}
inline const ::std::string& PacketBackupDataTagResponse::msgdataid() const {
  // @@protoc_insertion_point(field_get:micromsg.PacketBackupDataTagResponse.MsgDataID)
  return msgdataid_.GetNoArena();
}
inline void PacketBackupDataTagResponse::set_msgdataid(const ::std::string& value) {
  set_has_msgdataid();
  msgdataid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.PacketBackupDataTagResponse.MsgDataID)
}
#if LANG_CXX11
inline void PacketBackupDataTagResponse::set_msgdataid(::std::string&& value) {
  set_has_msgdataid();
  msgdataid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.PacketBackupDataTagResponse.MsgDataID)
}
#endif
inline void PacketBackupDataTagResponse::set_msgdataid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msgdataid();
  msgdataid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.PacketBackupDataTagResponse.MsgDataID)
}
inline void PacketBackupDataTagResponse::set_msgdataid(const char* value, size_t size) {
  set_has_msgdataid();
  msgdataid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.PacketBackupDataTagResponse.MsgDataID)
}
inline ::std::string* PacketBackupDataTagResponse::mutable_msgdataid() {
  set_has_msgdataid();
  // @@protoc_insertion_point(field_mutable:micromsg.PacketBackupDataTagResponse.MsgDataID)
  return msgdataid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PacketBackupDataTagResponse::release_msgdataid() {
  // @@protoc_insertion_point(field_release:micromsg.PacketBackupDataTagResponse.MsgDataID)
  clear_has_msgdataid();
  return msgdataid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PacketBackupDataTagResponse::set_allocated_msgdataid(::std::string* msgdataid) {
  if (msgdataid != NULL) {
    set_has_msgdataid();
  } else {
    clear_has_msgdataid();
  }
  msgdataid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgdataid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.PacketBackupDataTagResponse.MsgDataID)
}

// -------------------------------------------------------------------

// BackupReportItem

// required string BakChatName = 1;
inline bool BackupReportItem::has_bakchatname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BackupReportItem::set_has_bakchatname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BackupReportItem::clear_has_bakchatname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BackupReportItem::clear_bakchatname() {
  bakchatname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bakchatname();
}
inline const ::std::string& BackupReportItem::bakchatname() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupReportItem.BakChatName)
  return bakchatname_.GetNoArena();
}
inline void BackupReportItem::set_bakchatname(const ::std::string& value) {
  set_has_bakchatname();
  bakchatname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BackupReportItem.BakChatName)
}
#if LANG_CXX11
inline void BackupReportItem::set_bakchatname(::std::string&& value) {
  set_has_bakchatname();
  bakchatname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BackupReportItem.BakChatName)
}
#endif
inline void BackupReportItem::set_bakchatname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bakchatname();
  bakchatname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BackupReportItem.BakChatName)
}
inline void BackupReportItem::set_bakchatname(const char* value, size_t size) {
  set_has_bakchatname();
  bakchatname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BackupReportItem.BakChatName)
}
inline ::std::string* BackupReportItem::mutable_bakchatname() {
  set_has_bakchatname();
  // @@protoc_insertion_point(field_mutable:micromsg.BackupReportItem.BakChatName)
  return bakchatname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BackupReportItem::release_bakchatname() {
  // @@protoc_insertion_point(field_release:micromsg.BackupReportItem.BakChatName)
  clear_has_bakchatname();
  return bakchatname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BackupReportItem::set_allocated_bakchatname(::std::string* bakchatname) {
  if (bakchatname != NULL) {
    set_has_bakchatname();
  } else {
    clear_has_bakchatname();
  }
  bakchatname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bakchatname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BackupReportItem.BakChatName)
}

// required uint32 MsgCount = 2;
inline bool BackupReportItem::has_msgcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BackupReportItem::set_has_msgcount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BackupReportItem::clear_has_msgcount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BackupReportItem::clear_msgcount() {
  msgcount_ = 0u;
  clear_has_msgcount();
}
inline ::google::protobuf::uint32 BackupReportItem::msgcount() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupReportItem.MsgCount)
  return msgcount_;
}
inline void BackupReportItem::set_msgcount(::google::protobuf::uint32 value) {
  set_has_msgcount();
  msgcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BackupReportItem.MsgCount)
}

// -------------------------------------------------------------------

// BackupReportList

// required uint32 Count = 1;
inline bool BackupReportList::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BackupReportList::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BackupReportList::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BackupReportList::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 BackupReportList::count() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupReportList.Count)
  return count_;
}
inline void BackupReportList::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BackupReportList.Count)
}

// repeated .micromsg.BackupReportItem List = 2;
inline int BackupReportList::list_size() const {
  return list_.size();
}
inline void BackupReportList::clear_list() {
  list_.Clear();
}
inline const ::micromsg::BackupReportItem& BackupReportList::list(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.BackupReportList.List)
  return list_.Get(index);
}
inline ::micromsg::BackupReportItem* BackupReportList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.BackupReportList.List)
  return list_.Mutable(index);
}
inline ::micromsg::BackupReportItem* BackupReportList::add_list() {
  // @@protoc_insertion_point(field_add:micromsg.BackupReportList.List)
  return list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::BackupReportItem >*
BackupReportList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.BackupReportList.List)
  return &list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::BackupReportItem >&
BackupReportList::list() const {
  // @@protoc_insertion_point(field_list:micromsg.BackupReportList.List)
  return list_;
}

// -------------------------------------------------------------------

// BackupFinishRequest

// required string ID = 1;
inline bool BackupFinishRequest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BackupFinishRequest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BackupFinishRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BackupFinishRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& BackupFinishRequest::id() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupFinishRequest.ID)
  return id_.GetNoArena();
}
inline void BackupFinishRequest::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BackupFinishRequest.ID)
}
#if LANG_CXX11
inline void BackupFinishRequest::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BackupFinishRequest.ID)
}
#endif
inline void BackupFinishRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BackupFinishRequest.ID)
}
inline void BackupFinishRequest::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BackupFinishRequest.ID)
}
inline ::std::string* BackupFinishRequest::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:micromsg.BackupFinishRequest.ID)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BackupFinishRequest::release_id() {
  // @@protoc_insertion_point(field_release:micromsg.BackupFinishRequest.ID)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BackupFinishRequest::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BackupFinishRequest.ID)
}

// optional .micromsg.BackupReportList Data = 2;
inline bool BackupFinishRequest::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BackupFinishRequest::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BackupFinishRequest::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BackupFinishRequest::clear_data() {
  if (data_ != NULL) data_->::micromsg::BackupReportList::Clear();
  clear_has_data();
}
inline const ::micromsg::BackupReportList& BackupFinishRequest::data() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupFinishRequest.Data)
  return data_ != NULL ? *data_
                         : *::micromsg::BackupReportList::internal_default_instance();
}
inline ::micromsg::BackupReportList* BackupFinishRequest::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    data_ = new ::micromsg::BackupReportList;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BackupFinishRequest.Data)
  return data_;
}
inline ::micromsg::BackupReportList* BackupFinishRequest::release_data() {
  // @@protoc_insertion_point(field_release:micromsg.BackupFinishRequest.Data)
  clear_has_data();
  ::micromsg::BackupReportList* temp = data_;
  data_ = NULL;
  return temp;
}
inline void BackupFinishRequest::set_allocated_data(::micromsg::BackupReportList* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BackupFinishRequest.Data)
}

// optional uint32 ServerSessionCount = 3;
inline bool BackupFinishRequest::has_serversessioncount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BackupFinishRequest::set_has_serversessioncount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BackupFinishRequest::clear_has_serversessioncount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BackupFinishRequest::clear_serversessioncount() {
  serversessioncount_ = 0u;
  clear_has_serversessioncount();
}
inline ::google::protobuf::uint32 BackupFinishRequest::serversessioncount() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupFinishRequest.ServerSessionCount)
  return serversessioncount_;
}
inline void BackupFinishRequest::set_serversessioncount(::google::protobuf::uint32 value) {
  set_has_serversessioncount();
  serversessioncount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BackupFinishRequest.ServerSessionCount)
}

// optional uint32 ServerMessageCount = 4;
inline bool BackupFinishRequest::has_servermessagecount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BackupFinishRequest::set_has_servermessagecount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BackupFinishRequest::clear_has_servermessagecount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BackupFinishRequest::clear_servermessagecount() {
  servermessagecount_ = 0u;
  clear_has_servermessagecount();
}
inline ::google::protobuf::uint32 BackupFinishRequest::servermessagecount() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupFinishRequest.ServerMessageCount)
  return servermessagecount_;
}
inline void BackupFinishRequest::set_servermessagecount(::google::protobuf::uint32 value) {
  set_has_servermessagecount();
  servermessagecount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BackupFinishRequest.ServerMessageCount)
}

// optional uint32 ServerFileCount = 5;
inline bool BackupFinishRequest::has_serverfilecount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BackupFinishRequest::set_has_serverfilecount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BackupFinishRequest::clear_has_serverfilecount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BackupFinishRequest::clear_serverfilecount() {
  serverfilecount_ = 0u;
  clear_has_serverfilecount();
}
inline ::google::protobuf::uint32 BackupFinishRequest::serverfilecount() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupFinishRequest.ServerFileCount)
  return serverfilecount_;
}
inline void BackupFinishRequest::set_serverfilecount(::google::protobuf::uint32 value) {
  set_has_serverfilecount();
  serverfilecount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BackupFinishRequest.ServerFileCount)
}

// optional uint32 CalculateSize = 6;
inline bool BackupFinishRequest::has_calculatesize() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BackupFinishRequest::set_has_calculatesize() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BackupFinishRequest::clear_has_calculatesize() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BackupFinishRequest::clear_calculatesize() {
  calculatesize_ = 0u;
  clear_has_calculatesize();
}
inline ::google::protobuf::uint32 BackupFinishRequest::calculatesize() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupFinishRequest.CalculateSize)
  return calculatesize_;
}
inline void BackupFinishRequest::set_calculatesize(::google::protobuf::uint32 value) {
  set_has_calculatesize();
  calculatesize_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BackupFinishRequest.CalculateSize)
}

// optional uint32 ServerDataPushSize = 7;
inline bool BackupFinishRequest::has_serverdatapushsize() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BackupFinishRequest::set_has_serverdatapushsize() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BackupFinishRequest::clear_has_serverdatapushsize() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BackupFinishRequest::clear_serverdatapushsize() {
  serverdatapushsize_ = 0u;
  clear_has_serverdatapushsize();
}
inline ::google::protobuf::uint32 BackupFinishRequest::serverdatapushsize() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupFinishRequest.ServerDataPushSize)
  return serverdatapushsize_;
}
inline void BackupFinishRequest::set_serverdatapushsize(::google::protobuf::uint32 value) {
  set_has_serverdatapushsize();
  serverdatapushsize_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BackupFinishRequest.ServerDataPushSize)
}

// optional uint32 ServerReadDBTotalTime = 8;
inline bool BackupFinishRequest::has_serverreaddbtotaltime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BackupFinishRequest::set_has_serverreaddbtotaltime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BackupFinishRequest::clear_has_serverreaddbtotaltime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BackupFinishRequest::clear_serverreaddbtotaltime() {
  serverreaddbtotaltime_ = 0u;
  clear_has_serverreaddbtotaltime();
}
inline ::google::protobuf::uint32 BackupFinishRequest::serverreaddbtotaltime() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupFinishRequest.ServerReadDBTotalTime)
  return serverreaddbtotaltime_;
}
inline void BackupFinishRequest::set_serverreaddbtotaltime(::google::protobuf::uint32 value) {
  set_has_serverreaddbtotaltime();
  serverreaddbtotaltime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BackupFinishRequest.ServerReadDBTotalTime)
}

// optional uint32 ServerReadFileTotalTime = 9;
inline bool BackupFinishRequest::has_serverreadfiletotaltime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BackupFinishRequest::set_has_serverreadfiletotaltime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BackupFinishRequest::clear_has_serverreadfiletotaltime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BackupFinishRequest::clear_serverreadfiletotaltime() {
  serverreadfiletotaltime_ = 0u;
  clear_has_serverreadfiletotaltime();
}
inline ::google::protobuf::uint32 BackupFinishRequest::serverreadfiletotaltime() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupFinishRequest.ServerReadFileTotalTime)
  return serverreadfiletotaltime_;
}
inline void BackupFinishRequest::set_serverreadfiletotaltime(::google::protobuf::uint32 value) {
  set_has_serverreadfiletotaltime();
  serverreadfiletotaltime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BackupFinishRequest.ServerReadFileTotalTime)
}

// optional uint32 ServerCostTotalTime = 10;
inline bool BackupFinishRequest::has_servercosttotaltime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BackupFinishRequest::set_has_servercosttotaltime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BackupFinishRequest::clear_has_servercosttotaltime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BackupFinishRequest::clear_servercosttotaltime() {
  servercosttotaltime_ = 0u;
  clear_has_servercosttotaltime();
}
inline ::google::protobuf::uint32 BackupFinishRequest::servercosttotaltime() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupFinishRequest.ServerCostTotalTime)
  return servercosttotaltime_;
}
inline void BackupFinishRequest::set_servercosttotaltime(::google::protobuf::uint32 value) {
  set_has_servercosttotaltime();
  servercosttotaltime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BackupFinishRequest.ServerCostTotalTime)
}

// optional uint32 ServerVersion = 11;
inline bool BackupFinishRequest::has_serverversion() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BackupFinishRequest::set_has_serverversion() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BackupFinishRequest::clear_has_serverversion() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BackupFinishRequest::clear_serverversion() {
  serverversion_ = 0u;
  clear_has_serverversion();
}
inline ::google::protobuf::uint32 BackupFinishRequest::serverversion() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupFinishRequest.ServerVersion)
  return serverversion_;
}
inline void BackupFinishRequest::set_serverversion(::google::protobuf::uint32 value) {
  set_has_serverversion();
  serverversion_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BackupFinishRequest.ServerVersion)
}

// -------------------------------------------------------------------

// BackupCommandRequest

// required int32 Command = 1;
inline bool BackupCommandRequest::has_command() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BackupCommandRequest::set_has_command() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BackupCommandRequest::clear_has_command() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BackupCommandRequest::clear_command() {
  command_ = 0;
  clear_has_command();
}
inline ::google::protobuf::int32 BackupCommandRequest::command() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupCommandRequest.Command)
  return command_;
}
inline void BackupCommandRequest::set_command(::google::protobuf::int32 value) {
  set_has_command();
  command_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BackupCommandRequest.Command)
}

// optional bytes Data = 2;
inline bool BackupCommandRequest::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BackupCommandRequest::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BackupCommandRequest::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BackupCommandRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& BackupCommandRequest::data() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupCommandRequest.Data)
  return data_.GetNoArena();
}
inline void BackupCommandRequest::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BackupCommandRequest.Data)
}
#if LANG_CXX11
inline void BackupCommandRequest::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BackupCommandRequest.Data)
}
#endif
inline void BackupCommandRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BackupCommandRequest.Data)
}
inline void BackupCommandRequest::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BackupCommandRequest.Data)
}
inline ::std::string* BackupCommandRequest::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:micromsg.BackupCommandRequest.Data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BackupCommandRequest::release_data() {
  // @@protoc_insertion_point(field_release:micromsg.BackupCommandRequest.Data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BackupCommandRequest::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BackupCommandRequest.Data)
}

// -------------------------------------------------------------------

// BackupCommandResponse

// required int32 Command = 1;
inline bool BackupCommandResponse::has_command() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BackupCommandResponse::set_has_command() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BackupCommandResponse::clear_has_command() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BackupCommandResponse::clear_command() {
  command_ = 0;
  clear_has_command();
}
inline ::google::protobuf::int32 BackupCommandResponse::command() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupCommandResponse.Command)
  return command_;
}
inline void BackupCommandResponse::set_command(::google::protobuf::int32 value) {
  set_has_command();
  command_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BackupCommandResponse.Command)
}

// optional bytes Data = 2;
inline bool BackupCommandResponse::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BackupCommandResponse::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BackupCommandResponse::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BackupCommandResponse::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& BackupCommandResponse::data() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupCommandResponse.Data)
  return data_.GetNoArena();
}
inline void BackupCommandResponse::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BackupCommandResponse.Data)
}
#if LANG_CXX11
inline void BackupCommandResponse::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BackupCommandResponse.Data)
}
#endif
inline void BackupCommandResponse::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BackupCommandResponse.Data)
}
inline void BackupCommandResponse::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BackupCommandResponse.Data)
}
inline ::std::string* BackupCommandResponse::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:micromsg.BackupCommandResponse.Data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BackupCommandResponse::release_data() {
  // @@protoc_insertion_point(field_release:micromsg.BackupCommandResponse.Data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BackupCommandResponse::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BackupCommandResponse.Data)
}

// -------------------------------------------------------------------

// DataConfigInf

// required string UserName = 1;
inline bool DataConfigInf::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataConfigInf::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataConfigInf::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataConfigInf::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& DataConfigInf::username() const {
  // @@protoc_insertion_point(field_get:micromsg.DataConfigInf.UserName)
  return username_.GetNoArena();
}
inline void DataConfigInf::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.DataConfigInf.UserName)
}
#if LANG_CXX11
inline void DataConfigInf::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.DataConfigInf.UserName)
}
#endif
inline void DataConfigInf::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.DataConfigInf.UserName)
}
inline void DataConfigInf::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.DataConfigInf.UserName)
}
inline ::std::string* DataConfigInf::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:micromsg.DataConfigInf.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataConfigInf::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.DataConfigInf.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataConfigInf::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:micromsg.DataConfigInf.UserName)
}

// optional string Deviceid = 2;
inline bool DataConfigInf::has_deviceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataConfigInf::set_has_deviceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataConfigInf::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataConfigInf::clear_deviceid() {
  deviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_deviceid();
}
inline const ::std::string& DataConfigInf::deviceid() const {
  // @@protoc_insertion_point(field_get:micromsg.DataConfigInf.Deviceid)
  return deviceid_.GetNoArena();
}
inline void DataConfigInf::set_deviceid(const ::std::string& value) {
  set_has_deviceid();
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.DataConfigInf.Deviceid)
}
#if LANG_CXX11
inline void DataConfigInf::set_deviceid(::std::string&& value) {
  set_has_deviceid();
  deviceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.DataConfigInf.Deviceid)
}
#endif
inline void DataConfigInf::set_deviceid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_deviceid();
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.DataConfigInf.Deviceid)
}
inline void DataConfigInf::set_deviceid(const char* value, size_t size) {
  set_has_deviceid();
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.DataConfigInf.Deviceid)
}
inline ::std::string* DataConfigInf::mutable_deviceid() {
  set_has_deviceid();
  // @@protoc_insertion_point(field_mutable:micromsg.DataConfigInf.Deviceid)
  return deviceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataConfigInf::release_deviceid() {
  // @@protoc_insertion_point(field_release:micromsg.DataConfigInf.Deviceid)
  clear_has_deviceid();
  return deviceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataConfigInf::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid != NULL) {
    set_has_deviceid();
  } else {
    clear_has_deviceid();
  }
  deviceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deviceid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.DataConfigInf.Deviceid)
}

// optional uint32 CreateTime = 3;
inline bool DataConfigInf::has_createtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DataConfigInf::set_has_createtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DataConfigInf::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DataConfigInf::clear_createtime() {
  createtime_ = 0u;
  clear_has_createtime();
}
inline ::google::protobuf::uint32 DataConfigInf::createtime() const {
  // @@protoc_insertion_point(field_get:micromsg.DataConfigInf.CreateTime)
  return createtime_;
}
inline void DataConfigInf::set_createtime(::google::protobuf::uint32 value) {
  set_has_createtime();
  createtime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DataConfigInf.CreateTime)
}

// optional uint32 LastModifyTime = 4;
inline bool DataConfigInf::has_lastmodifytime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DataConfigInf::set_has_lastmodifytime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DataConfigInf::clear_has_lastmodifytime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DataConfigInf::clear_lastmodifytime() {
  lastmodifytime_ = 0u;
  clear_has_lastmodifytime();
}
inline ::google::protobuf::uint32 DataConfigInf::lastmodifytime() const {
  // @@protoc_insertion_point(field_get:micromsg.DataConfigInf.LastModifyTime)
  return lastmodifytime_;
}
inline void DataConfigInf::set_lastmodifytime(::google::protobuf::uint32 value) {
  set_has_lastmodifytime();
  lastmodifytime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DataConfigInf.LastModifyTime)
}

// optional .micromsg.BackupStartGeneralInfo DeviceInfo = 5;
inline bool DataConfigInf::has_deviceinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataConfigInf::set_has_deviceinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DataConfigInf::clear_has_deviceinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DataConfigInf::clear_deviceinfo() {
  if (deviceinfo_ != NULL) deviceinfo_->::micromsg::BackupStartGeneralInfo::Clear();
  clear_has_deviceinfo();
}
inline const ::micromsg::BackupStartGeneralInfo& DataConfigInf::deviceinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.DataConfigInf.DeviceInfo)
  return deviceinfo_ != NULL ? *deviceinfo_
                         : *::micromsg::BackupStartGeneralInfo::internal_default_instance();
}
inline ::micromsg::BackupStartGeneralInfo* DataConfigInf::mutable_deviceinfo() {
  set_has_deviceinfo();
  if (deviceinfo_ == NULL) {
    deviceinfo_ = new ::micromsg::BackupStartGeneralInfo;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.DataConfigInf.DeviceInfo)
  return deviceinfo_;
}
inline ::micromsg::BackupStartGeneralInfo* DataConfigInf::release_deviceinfo() {
  // @@protoc_insertion_point(field_release:micromsg.DataConfigInf.DeviceInfo)
  clear_has_deviceinfo();
  ::micromsg::BackupStartGeneralInfo* temp = deviceinfo_;
  deviceinfo_ = NULL;
  return temp;
}
inline void DataConfigInf::set_allocated_deviceinfo(::micromsg::BackupStartGeneralInfo* deviceinfo) {
  delete deviceinfo_;
  deviceinfo_ = deviceinfo;
  if (deviceinfo) {
    set_has_deviceinfo();
  } else {
    clear_has_deviceinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.DataConfigInf.DeviceInfo)
}

// -------------------------------------------------------------------

// BackupCancelRequest

// required string ID = 1;
inline bool BackupCancelRequest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BackupCancelRequest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BackupCancelRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BackupCancelRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& BackupCancelRequest::id() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupCancelRequest.ID)
  return id_.GetNoArena();
}
inline void BackupCancelRequest::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BackupCancelRequest.ID)
}
#if LANG_CXX11
inline void BackupCancelRequest::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BackupCancelRequest.ID)
}
#endif
inline void BackupCancelRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BackupCancelRequest.ID)
}
inline void BackupCancelRequest::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BackupCancelRequest.ID)
}
inline ::std::string* BackupCancelRequest::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:micromsg.BackupCancelRequest.ID)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BackupCancelRequest::release_id() {
  // @@protoc_insertion_point(field_release:micromsg.BackupCancelRequest.ID)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BackupCancelRequest::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BackupCancelRequest.ID)
}

// optional uint32 Reason = 2;
inline bool BackupCancelRequest::has_reason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BackupCancelRequest::set_has_reason() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BackupCancelRequest::clear_has_reason() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BackupCancelRequest::clear_reason() {
  reason_ = 0u;
  clear_has_reason();
}
inline ::google::protobuf::uint32 BackupCancelRequest::reason() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupCancelRequest.Reason)
  return reason_;
}
inline void BackupCancelRequest::set_reason(::google::protobuf::uint32 value) {
  set_has_reason();
  reason_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BackupCancelRequest.Reason)
}

// -------------------------------------------------------------------

// GetConnectInfoRequest

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool GetConnectInfoRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetConnectInfoRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetConnectInfoRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetConnectInfoRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& GetConnectInfoRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetConnectInfoRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* GetConnectInfoRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetConnectInfoRequest.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* GetConnectInfoRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetConnectInfoRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void GetConnectInfoRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetConnectInfoRequest.BaseRequest)
}

// optional string URL = 2;
inline bool GetConnectInfoRequest::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetConnectInfoRequest::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetConnectInfoRequest::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetConnectInfoRequest::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& GetConnectInfoRequest::url() const {
  // @@protoc_insertion_point(field_get:micromsg.GetConnectInfoRequest.URL)
  return url_.GetNoArena();
}
inline void GetConnectInfoRequest::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetConnectInfoRequest.URL)
}
#if LANG_CXX11
inline void GetConnectInfoRequest::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetConnectInfoRequest.URL)
}
#endif
inline void GetConnectInfoRequest::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetConnectInfoRequest.URL)
}
inline void GetConnectInfoRequest::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetConnectInfoRequest.URL)
}
inline ::std::string* GetConnectInfoRequest::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:micromsg.GetConnectInfoRequest.URL)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetConnectInfoRequest::release_url() {
  // @@protoc_insertion_point(field_release:micromsg.GetConnectInfoRequest.URL)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetConnectInfoRequest::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetConnectInfoRequest.URL)
}

// -------------------------------------------------------------------

// GetConnectInfoResponse

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool GetConnectInfoResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GetConnectInfoResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GetConnectInfoResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GetConnectInfoResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& GetConnectInfoResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetConnectInfoResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* GetConnectInfoResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetConnectInfoResponse.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* GetConnectInfoResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetConnectInfoResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void GetConnectInfoResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetConnectInfoResponse.BaseResponse)
}

// optional string ID = 2;
inline bool GetConnectInfoResponse::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetConnectInfoResponse::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetConnectInfoResponse::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetConnectInfoResponse::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& GetConnectInfoResponse::id() const {
  // @@protoc_insertion_point(field_get:micromsg.GetConnectInfoResponse.ID)
  return id_.GetNoArena();
}
inline void GetConnectInfoResponse::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetConnectInfoResponse.ID)
}
#if LANG_CXX11
inline void GetConnectInfoResponse::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetConnectInfoResponse.ID)
}
#endif
inline void GetConnectInfoResponse::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetConnectInfoResponse.ID)
}
inline void GetConnectInfoResponse::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetConnectInfoResponse.ID)
}
inline ::std::string* GetConnectInfoResponse::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:micromsg.GetConnectInfoResponse.ID)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetConnectInfoResponse::release_id() {
  // @@protoc_insertion_point(field_release:micromsg.GetConnectInfoResponse.ID)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetConnectInfoResponse::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetConnectInfoResponse.ID)
}

// required .micromsg.SKBuiltinBuffer_t Key = 3;
inline bool GetConnectInfoResponse::has_key() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GetConnectInfoResponse::set_has_key() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GetConnectInfoResponse::clear_has_key() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GetConnectInfoResponse::clear_key() {
  if (key_ != NULL) key_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_key();
}
inline const ::micromsg::SKBuiltinBuffer_t& GetConnectInfoResponse::key() const {
  // @@protoc_insertion_point(field_get:micromsg.GetConnectInfoResponse.Key)
  return key_ != NULL ? *key_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinBuffer_t* GetConnectInfoResponse::mutable_key() {
  set_has_key();
  if (key_ == NULL) {
    key_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetConnectInfoResponse.Key)
  return key_;
}
inline ::micromsg::SKBuiltinBuffer_t* GetConnectInfoResponse::release_key() {
  // @@protoc_insertion_point(field_release:micromsg.GetConnectInfoResponse.Key)
  clear_has_key();
  ::micromsg::SKBuiltinBuffer_t* temp = key_;
  key_ = NULL;
  return temp;
}
inline void GetConnectInfoResponse::set_allocated_key(::micromsg::SKBuiltinBuffer_t* key) {
  delete key_;
  key_ = key;
  if (key) {
    set_has_key();
  } else {
    clear_has_key();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetConnectInfoResponse.Key)
}

// optional string Hello = 4;
inline bool GetConnectInfoResponse::has_hello() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetConnectInfoResponse::set_has_hello() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetConnectInfoResponse::clear_has_hello() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetConnectInfoResponse::clear_hello() {
  hello_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hello();
}
inline const ::std::string& GetConnectInfoResponse::hello() const {
  // @@protoc_insertion_point(field_get:micromsg.GetConnectInfoResponse.Hello)
  return hello_.GetNoArena();
}
inline void GetConnectInfoResponse::set_hello(const ::std::string& value) {
  set_has_hello();
  hello_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetConnectInfoResponse.Hello)
}
#if LANG_CXX11
inline void GetConnectInfoResponse::set_hello(::std::string&& value) {
  set_has_hello();
  hello_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetConnectInfoResponse.Hello)
}
#endif
inline void GetConnectInfoResponse::set_hello(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hello();
  hello_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetConnectInfoResponse.Hello)
}
inline void GetConnectInfoResponse::set_hello(const char* value, size_t size) {
  set_has_hello();
  hello_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetConnectInfoResponse.Hello)
}
inline ::std::string* GetConnectInfoResponse::mutable_hello() {
  set_has_hello();
  // @@protoc_insertion_point(field_mutable:micromsg.GetConnectInfoResponse.Hello)
  return hello_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetConnectInfoResponse::release_hello() {
  // @@protoc_insertion_point(field_release:micromsg.GetConnectInfoResponse.Hello)
  clear_has_hello();
  return hello_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetConnectInfoResponse::set_allocated_hello(::std::string* hello) {
  if (hello != NULL) {
    set_has_hello();
  } else {
    clear_has_hello();
  }
  hello_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hello);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetConnectInfoResponse.Hello)
}

// optional string OK = 5;
inline bool GetConnectInfoResponse::has_ok() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetConnectInfoResponse::set_has_ok() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetConnectInfoResponse::clear_has_ok() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetConnectInfoResponse::clear_ok() {
  ok_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ok();
}
inline const ::std::string& GetConnectInfoResponse::ok() const {
  // @@protoc_insertion_point(field_get:micromsg.GetConnectInfoResponse.OK)
  return ok_.GetNoArena();
}
inline void GetConnectInfoResponse::set_ok(const ::std::string& value) {
  set_has_ok();
  ok_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetConnectInfoResponse.OK)
}
#if LANG_CXX11
inline void GetConnectInfoResponse::set_ok(::std::string&& value) {
  set_has_ok();
  ok_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetConnectInfoResponse.OK)
}
#endif
inline void GetConnectInfoResponse::set_ok(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ok();
  ok_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetConnectInfoResponse.OK)
}
inline void GetConnectInfoResponse::set_ok(const char* value, size_t size) {
  set_has_ok();
  ok_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetConnectInfoResponse.OK)
}
inline ::std::string* GetConnectInfoResponse::mutable_ok() {
  set_has_ok();
  // @@protoc_insertion_point(field_mutable:micromsg.GetConnectInfoResponse.OK)
  return ok_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetConnectInfoResponse::release_ok() {
  // @@protoc_insertion_point(field_release:micromsg.GetConnectInfoResponse.OK)
  clear_has_ok();
  return ok_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetConnectInfoResponse::set_allocated_ok(::std::string* ok) {
  if (ok != NULL) {
    set_has_ok();
  } else {
    clear_has_ok();
  }
  ok_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ok);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetConnectInfoResponse.OK)
}

// required uint32 Type = 6;
inline bool GetConnectInfoResponse::has_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GetConnectInfoResponse::set_has_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GetConnectInfoResponse::clear_has_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GetConnectInfoResponse::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 GetConnectInfoResponse::type() const {
  // @@protoc_insertion_point(field_get:micromsg.GetConnectInfoResponse.Type)
  return type_;
}
inline void GetConnectInfoResponse::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetConnectInfoResponse.Type)
}

// required uint32 AddrCount = 7;
inline bool GetConnectInfoResponse::has_addrcount() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GetConnectInfoResponse::set_has_addrcount() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GetConnectInfoResponse::clear_has_addrcount() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GetConnectInfoResponse::clear_addrcount() {
  addrcount_ = 0u;
  clear_has_addrcount();
}
inline ::google::protobuf::uint32 GetConnectInfoResponse::addrcount() const {
  // @@protoc_insertion_point(field_get:micromsg.GetConnectInfoResponse.AddrCount)
  return addrcount_;
}
inline void GetConnectInfoResponse::set_addrcount(::google::protobuf::uint32 value) {
  set_has_addrcount();
  addrcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetConnectInfoResponse.AddrCount)
}

// repeated .micromsg.ConnectInfoAddr AddrList = 8;
inline int GetConnectInfoResponse::addrlist_size() const {
  return addrlist_.size();
}
inline void GetConnectInfoResponse::clear_addrlist() {
  addrlist_.Clear();
}
inline const ::micromsg::ConnectInfoAddr& GetConnectInfoResponse::addrlist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GetConnectInfoResponse.AddrList)
  return addrlist_.Get(index);
}
inline ::micromsg::ConnectInfoAddr* GetConnectInfoResponse::mutable_addrlist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GetConnectInfoResponse.AddrList)
  return addrlist_.Mutable(index);
}
inline ::micromsg::ConnectInfoAddr* GetConnectInfoResponse::add_addrlist() {
  // @@protoc_insertion_point(field_add:micromsg.GetConnectInfoResponse.AddrList)
  return addrlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::ConnectInfoAddr >*
GetConnectInfoResponse::mutable_addrlist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GetConnectInfoResponse.AddrList)
  return &addrlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::ConnectInfoAddr >&
GetConnectInfoResponse::addrlist() const {
  // @@protoc_insertion_point(field_list:micromsg.GetConnectInfoResponse.AddrList)
  return addrlist_;
}

// optional string Resource = 9;
inline bool GetConnectInfoResponse::has_resource() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetConnectInfoResponse::set_has_resource() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetConnectInfoResponse::clear_has_resource() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetConnectInfoResponse::clear_resource() {
  resource_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_resource();
}
inline const ::std::string& GetConnectInfoResponse::resource() const {
  // @@protoc_insertion_point(field_get:micromsg.GetConnectInfoResponse.Resource)
  return resource_.GetNoArena();
}
inline void GetConnectInfoResponse::set_resource(const ::std::string& value) {
  set_has_resource();
  resource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetConnectInfoResponse.Resource)
}
#if LANG_CXX11
inline void GetConnectInfoResponse::set_resource(::std::string&& value) {
  set_has_resource();
  resource_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetConnectInfoResponse.Resource)
}
#endif
inline void GetConnectInfoResponse::set_resource(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_resource();
  resource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetConnectInfoResponse.Resource)
}
inline void GetConnectInfoResponse::set_resource(const char* value, size_t size) {
  set_has_resource();
  resource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetConnectInfoResponse.Resource)
}
inline ::std::string* GetConnectInfoResponse::mutable_resource() {
  set_has_resource();
  // @@protoc_insertion_point(field_mutable:micromsg.GetConnectInfoResponse.Resource)
  return resource_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetConnectInfoResponse::release_resource() {
  // @@protoc_insertion_point(field_release:micromsg.GetConnectInfoResponse.Resource)
  clear_has_resource();
  return resource_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetConnectInfoResponse::set_allocated_resource(::std::string* resource) {
  if (resource != NULL) {
    set_has_resource();
  } else {
    clear_has_resource();
  }
  resource_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resource);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetConnectInfoResponse.Resource)
}

// optional string PCName = 10;
inline bool GetConnectInfoResponse::has_pcname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GetConnectInfoResponse::set_has_pcname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GetConnectInfoResponse::clear_has_pcname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GetConnectInfoResponse::clear_pcname() {
  pcname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pcname();
}
inline const ::std::string& GetConnectInfoResponse::pcname() const {
  // @@protoc_insertion_point(field_get:micromsg.GetConnectInfoResponse.PCName)
  return pcname_.GetNoArena();
}
inline void GetConnectInfoResponse::set_pcname(const ::std::string& value) {
  set_has_pcname();
  pcname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetConnectInfoResponse.PCName)
}
#if LANG_CXX11
inline void GetConnectInfoResponse::set_pcname(::std::string&& value) {
  set_has_pcname();
  pcname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetConnectInfoResponse.PCName)
}
#endif
inline void GetConnectInfoResponse::set_pcname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pcname();
  pcname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetConnectInfoResponse.PCName)
}
inline void GetConnectInfoResponse::set_pcname(const char* value, size_t size) {
  set_has_pcname();
  pcname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetConnectInfoResponse.PCName)
}
inline ::std::string* GetConnectInfoResponse::mutable_pcname() {
  set_has_pcname();
  // @@protoc_insertion_point(field_mutable:micromsg.GetConnectInfoResponse.PCName)
  return pcname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetConnectInfoResponse::release_pcname() {
  // @@protoc_insertion_point(field_release:micromsg.GetConnectInfoResponse.PCName)
  clear_has_pcname();
  return pcname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetConnectInfoResponse::set_allocated_pcname(::std::string* pcname) {
  if (pcname != NULL) {
    set_has_pcname();
  } else {
    clear_has_pcname();
  }
  pcname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pcname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetConnectInfoResponse.PCName)
}

// optional string PCAcctName = 11;
inline bool GetConnectInfoResponse::has_pcacctname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GetConnectInfoResponse::set_has_pcacctname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GetConnectInfoResponse::clear_has_pcacctname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GetConnectInfoResponse::clear_pcacctname() {
  pcacctname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pcacctname();
}
inline const ::std::string& GetConnectInfoResponse::pcacctname() const {
  // @@protoc_insertion_point(field_get:micromsg.GetConnectInfoResponse.PCAcctName)
  return pcacctname_.GetNoArena();
}
inline void GetConnectInfoResponse::set_pcacctname(const ::std::string& value) {
  set_has_pcacctname();
  pcacctname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetConnectInfoResponse.PCAcctName)
}
#if LANG_CXX11
inline void GetConnectInfoResponse::set_pcacctname(::std::string&& value) {
  set_has_pcacctname();
  pcacctname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetConnectInfoResponse.PCAcctName)
}
#endif
inline void GetConnectInfoResponse::set_pcacctname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pcacctname();
  pcacctname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetConnectInfoResponse.PCAcctName)
}
inline void GetConnectInfoResponse::set_pcacctname(const char* value, size_t size) {
  set_has_pcacctname();
  pcacctname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetConnectInfoResponse.PCAcctName)
}
inline ::std::string* GetConnectInfoResponse::mutable_pcacctname() {
  set_has_pcacctname();
  // @@protoc_insertion_point(field_mutable:micromsg.GetConnectInfoResponse.PCAcctName)
  return pcacctname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetConnectInfoResponse::release_pcacctname() {
  // @@protoc_insertion_point(field_release:micromsg.GetConnectInfoResponse.PCAcctName)
  clear_has_pcacctname();
  return pcacctname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetConnectInfoResponse::set_allocated_pcacctname(::std::string* pcacctname) {
  if (pcacctname != NULL) {
    set_has_pcacctname();
  } else {
    clear_has_pcacctname();
  }
  pcacctname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pcacctname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetConnectInfoResponse.PCAcctName)
}

// optional uint32 EncryFlag = 12;
inline bool GetConnectInfoResponse::has_encryflag() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GetConnectInfoResponse::set_has_encryflag() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GetConnectInfoResponse::clear_has_encryflag() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GetConnectInfoResponse::clear_encryflag() {
  encryflag_ = 0u;
  clear_has_encryflag();
}
inline ::google::protobuf::uint32 GetConnectInfoResponse::encryflag() const {
  // @@protoc_insertion_point(field_get:micromsg.GetConnectInfoResponse.EncryFlag)
  return encryflag_;
}
inline void GetConnectInfoResponse::set_encryflag(::google::protobuf::uint32 value) {
  set_has_encryflag();
  encryflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetConnectInfoResponse.EncryFlag)
}

// optional uint32 Scene = 13;
inline bool GetConnectInfoResponse::has_scene() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void GetConnectInfoResponse::set_has_scene() {
  _has_bits_[0] |= 0x00001000u;
}
inline void GetConnectInfoResponse::clear_has_scene() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void GetConnectInfoResponse::clear_scene() {
  scene_ = 0u;
  clear_has_scene();
}
inline ::google::protobuf::uint32 GetConnectInfoResponse::scene() const {
  // @@protoc_insertion_point(field_get:micromsg.GetConnectInfoResponse.Scene)
  return scene_;
}
inline void GetConnectInfoResponse::set_scene(::google::protobuf::uint32 value) {
  set_has_scene();
  scene_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetConnectInfoResponse.Scene)
}

// optional uint64 DataSize = 14;
inline bool GetConnectInfoResponse::has_datasize() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void GetConnectInfoResponse::set_has_datasize() {
  _has_bits_[0] |= 0x00002000u;
}
inline void GetConnectInfoResponse::clear_has_datasize() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void GetConnectInfoResponse::clear_datasize() {
  datasize_ = GOOGLE_ULONGLONG(0);
  clear_has_datasize();
}
inline ::google::protobuf::uint64 GetConnectInfoResponse::datasize() const {
  // @@protoc_insertion_point(field_get:micromsg.GetConnectInfoResponse.DataSize)
  return datasize_;
}
inline void GetConnectInfoResponse::set_datasize(::google::protobuf::uint64 value) {
  set_has_datasize();
  datasize_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetConnectInfoResponse.DataSize)
}

// optional string WifiName = 15;
inline bool GetConnectInfoResponse::has_wifiname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GetConnectInfoResponse::set_has_wifiname() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GetConnectInfoResponse::clear_has_wifiname() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GetConnectInfoResponse::clear_wifiname() {
  wifiname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_wifiname();
}
inline const ::std::string& GetConnectInfoResponse::wifiname() const {
  // @@protoc_insertion_point(field_get:micromsg.GetConnectInfoResponse.WifiName)
  return wifiname_.GetNoArena();
}
inline void GetConnectInfoResponse::set_wifiname(const ::std::string& value) {
  set_has_wifiname();
  wifiname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetConnectInfoResponse.WifiName)
}
#if LANG_CXX11
inline void GetConnectInfoResponse::set_wifiname(::std::string&& value) {
  set_has_wifiname();
  wifiname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetConnectInfoResponse.WifiName)
}
#endif
inline void GetConnectInfoResponse::set_wifiname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_wifiname();
  wifiname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetConnectInfoResponse.WifiName)
}
inline void GetConnectInfoResponse::set_wifiname(const char* value, size_t size) {
  set_has_wifiname();
  wifiname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetConnectInfoResponse.WifiName)
}
inline ::std::string* GetConnectInfoResponse::mutable_wifiname() {
  set_has_wifiname();
  // @@protoc_insertion_point(field_mutable:micromsg.GetConnectInfoResponse.WifiName)
  return wifiname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetConnectInfoResponse::release_wifiname() {
  // @@protoc_insertion_point(field_release:micromsg.GetConnectInfoResponse.WifiName)
  clear_has_wifiname();
  return wifiname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetConnectInfoResponse::set_allocated_wifiname(::std::string* wifiname) {
  if (wifiname != NULL) {
    set_has_wifiname();
  } else {
    clear_has_wifiname();
  }
  wifiname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wifiname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetConnectInfoResponse.WifiName)
}

// -------------------------------------------------------------------

// BackupHeartBeatRequest

// required uint64 ack = 1;
inline bool BackupHeartBeatRequest::has_ack() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BackupHeartBeatRequest::set_has_ack() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BackupHeartBeatRequest::clear_has_ack() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BackupHeartBeatRequest::clear_ack() {
  ack_ = GOOGLE_ULONGLONG(0);
  clear_has_ack();
}
inline ::google::protobuf::uint64 BackupHeartBeatRequest::ack() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupHeartBeatRequest.ack)
  return ack_;
}
inline void BackupHeartBeatRequest::set_ack(::google::protobuf::uint64 value) {
  set_has_ack();
  ack_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BackupHeartBeatRequest.ack)
}

// -------------------------------------------------------------------

// BackupHeartBeatResponse

// required uint64 ack = 1;
inline bool BackupHeartBeatResponse::has_ack() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BackupHeartBeatResponse::set_has_ack() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BackupHeartBeatResponse::clear_has_ack() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BackupHeartBeatResponse::clear_ack() {
  ack_ = GOOGLE_ULONGLONG(0);
  clear_has_ack();
}
inline ::google::protobuf::uint64 BackupHeartBeatResponse::ack() const {
  // @@protoc_insertion_point(field_get:micromsg.BackupHeartBeatResponse.ack)
  return ack_;
}
inline void BackupHeartBeatResponse::set_ack(::google::protobuf::uint64 value) {
  set_has_ack();
  ack_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BackupHeartBeatResponse.ack)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace micromsg

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::micromsg::TransferTypeEnum> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::micromsg::TransferTypeEnum>() {
  return ::micromsg::TransferTypeEnum_descriptor();
}
template <> struct is_proto_enum< ::micromsg::CommandTypeEnum> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::micromsg::CommandTypeEnum>() {
  return ::micromsg::CommandTypeEnum_descriptor();
}
template <> struct is_proto_enum< ::micromsg::StartResponseStatusEnum> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::micromsg::StartResponseStatusEnum>() {
  return ::micromsg::StartResponseStatusEnum_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mmbackup_2eproto__INCLUDED
