// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mmbase.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mmbase.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace micromsg {
class BuiltinIPDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BuiltinIP> {
} _BuiltinIP_default_instance_;
class BuiltinIPListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BuiltinIPList> {
} _BuiltinIPList_default_instance_;
class NetworkControlDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NetworkControl> {
} _NetworkControl_default_instance_;
class PluginKeyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PluginKey> {
} _PluginKey_default_instance_;
class PluginKeyListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PluginKeyList> {
} _PluginKeyList_default_instance_;
class HostDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Host> {
} _Host_default_instance_;
class HostListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HostList> {
} _HostList_default_instance_;
class PositionInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PositionInfo> {
} _PositionInfo_default_instance_;
class SnsUserInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SnsUserInfo> {
} _SnsUserInfo_default_instance_;
class CustomizedInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CustomizedInfo> {
} _CustomizedInfo_default_instance_;
class CmdItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CmdItem> {
} _CmdItem_default_instance_;
class CmdListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CmdList> {
} _CmdList_default_instance_;
class ShakeSyncRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ShakeSyncRequest> {
} _ShakeSyncRequest_default_instance_;
class ShakeSyncResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ShakeSyncResponse> {
} _ShakeSyncResponse_default_instance_;
class BindEmailRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BindEmailRequest> {
} _BindEmailRequest_default_instance_;
class BindEmailResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BindEmailResponse> {
} _BindEmailResponse_default_instance_;
class GetLocationRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetLocationRequest> {
} _GetLocationRequest_default_instance_;
class GetLocationResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetLocationResponse> {
} _GetLocationResponse_default_instance_;
class RoomInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RoomInfo> {
} _RoomInfo_default_instance_;
class CDNDnsInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDNDnsInfo> {
} _CDNDnsInfo_default_instance_;
class StyleKeyValDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StyleKeyVal> {
} _StyleKeyVal_default_instance_;
class ShowStyleKeyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ShowStyleKey> {
} _ShowStyleKey_default_instance_;
class SafeDeviceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SafeDevice> {
} _SafeDevice_default_instance_;
class SafeDeviceListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SafeDeviceList> {
} _SafeDeviceList_default_instance_;
class MemberReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MemberReq> {
} _MemberReq_default_instance_;
class MemberRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MemberResp> {
} _MemberResp_default_instance_;
class DelMemberReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DelMemberReq> {
} _DelMemberReq_default_instance_;
class DelMemberRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DelMemberResp> {
} _DelMemberResp_default_instance_;
class DisturbTimeSpanDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DisturbTimeSpan> {
} _DisturbTimeSpan_default_instance_;
class DisturbSettingDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DisturbSetting> {
} _DisturbSetting_default_instance_;
class GmailInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GmailInfo> {
} _GmailInfo_default_instance_;
class GmailListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GmailList> {
} _GmailList_default_instance_;
class LinkedinContactItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LinkedinContactItem> {
} _LinkedinContactItem_default_instance_;
class AdditionalContactListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AdditionalContactList> {
} _AdditionalContactList_default_instance_;
class ChatRoomMemberInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChatRoomMemberInfo> {
} _ChatRoomMemberInfo_default_instance_;
class ChatRoomMemberDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChatRoomMemberData> {
} _ChatRoomMemberData_default_instance_;
class PatternLockInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PatternLockInfo> {
} _PatternLockInfo_default_instance_;
class ModUserInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ModUserInfo> {
} _ModUserInfo_default_instance_;
class UserInfoExtDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UserInfoExt> {
} _UserInfoExt_default_instance_;
class ModContactDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ModContact> {
} _ModContact_default_instance_;
class HardDeviceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HardDevice> {
} _HardDevice_default_instance_;

namespace protobuf_mmbase_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[41];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuiltinIP, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuiltinIP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuiltinIP, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuiltinIP, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuiltinIP, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuiltinIP, domain_),
  2,
  3,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuiltinIPList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuiltinIPList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuiltinIPList, longconnectipcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuiltinIPList, shortconnectipcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuiltinIPList, seq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuiltinIPList, longconnectiplist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuiltinIPList, shortconnectiplist_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkControl, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkControl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkControl, portlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkControl, timeoutlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkControl, minnoopinterval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkControl, maxnoopinterval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkControl, typinginterval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkControl, noopintervaltime_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginKey, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginKey, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginKey, id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginKeyList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginKeyList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginKeyList, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PluginKeyList, list_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Host, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Host, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Host, origin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Host, substitute_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Host, priority_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostList, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostList, list_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, precision_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, macaddr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, cellid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionInfo, gpssource_),
  2,
  3,
  4,
  0,
  1,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsUserInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsUserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsUserInfo, snsflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsUserInfo, snsbgimgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsUserInfo, snsbgobjectid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnsUserInfo, snsflagex_),
  1,
  0,
  3,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomizedInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomizedInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomizedInfo, brandflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomizedInfo, externalinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomizedInfo, brandinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomizedInfo, brandiconurl_),
  3,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdItem, cmdid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdItem, cmdbuf_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdList, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdList, list_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeSyncRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeSyncRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeSyncRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeSyncRequest, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeSyncRequest, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeSyncRequest, precision_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeSyncRequest, macaddr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeSyncRequest, cellid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeSyncRequest, imgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeSyncRequest, times_),
  2,
  3,
  4,
  5,
  0,
  1,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeSyncResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeSyncResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeSyncResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeSyncResponse, buffer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeSyncResponse, ret_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeSyncResponse, imgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeSyncResponse, imgtotoallen_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindEmailRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindEmailRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindEmailRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindEmailRequest, opcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindEmailRequest, email_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindEmailResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindEmailResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindEmailResponse, baseresponse_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLocationRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLocationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLocationRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLocationRequest, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLocationRequest, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLocationRequest, precision_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLocationRequest, macaddr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLocationRequest, cellid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLocationRequest, gpssource_),
  2,
  3,
  4,
  5,
  0,
  1,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLocationResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLocationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLocationResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLocationResponse, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLocationResponse, latitude_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, nickname_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDNDnsInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDNDnsInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDNDnsInfo, ver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDNDnsInfo, uin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDNDnsInfo, expiretime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDNDnsInfo, frontid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDNDnsInfo, frontipcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDNDnsInfo, frontiplist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDNDnsInfo, zonedomain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDNDnsInfo, authkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDNDnsInfo, zoneid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDNDnsInfo, zoneipcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDNDnsInfo, zoneiplist_),
  2,
  3,
  4,
  5,
  6,
  ~0u,
  0,
  1,
  7,
  8,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleKeyVal, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleKeyVal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleKeyVal, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleKeyVal, val_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowStyleKey, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowStyleKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowStyleKey, keycount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowStyleKey, key_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafeDevice, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafeDevice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafeDevice, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafeDevice, uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafeDevice, devicetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafeDevice, createtime_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafeDeviceList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafeDeviceList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafeDeviceList, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafeDeviceList, list_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberReq, membername_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberResp, membername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberResp, memberstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberResp, nickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberResp, pyinitial_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberResp, quanpin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberResp, sex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberResp, remark_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberResp, remarkpyinitial_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberResp, remarkquanpin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberResp, contacttype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberResp, province_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberResp, city_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberResp, signature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberResp, personalcard_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberResp, verifyflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberResp, verifyinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberResp, country_),
  5,
  12,
  6,
  7,
  8,
  13,
  9,
  10,
  11,
  14,
  0,
  1,
  2,
  15,
  16,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelMemberReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelMemberReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelMemberReq, membername_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelMemberResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelMemberResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelMemberResp, membername_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisturbTimeSpan, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisturbTimeSpan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisturbTimeSpan, begintime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisturbTimeSpan, endtime_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisturbSetting, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisturbSetting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisturbSetting, nightsetting_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisturbSetting, nighttime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisturbSetting, alldaysetting_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisturbSetting, alldaytime_),
  2,
  0,
  3,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GmailInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GmailInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GmailInfo, gmailacct_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GmailInfo, gmailswitch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GmailInfo, gmailerrcode_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GmailList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GmailList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GmailList, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GmailList, list_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkedinContactItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkedinContactItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkedinContactItem, linkedinname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkedinContactItem, linkedinmemberid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkedinContactItem, linkedinpublicurl_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdditionalContactList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdditionalContactList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdditionalContactList, linkedincontactitem_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMemberInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMemberInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMemberInfo, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMemberInfo, nickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMemberInfo, displayname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMemberInfo, bigheadimgurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMemberInfo, smallheadimgurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMemberInfo, chatroommemberflag_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMemberData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMemberData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMemberData, membercount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMemberData, chatroommember_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMemberData, infomask_),
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatternLockInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatternLockInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatternLockInfo, patternversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatternLockInfo, sign_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatternLockInfo, lockstatus_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModUserInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModUserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModUserInfo, bitflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModUserInfo, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModUserInfo, nickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModUserInfo, binduin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModUserInfo, bindemail_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModUserInfo, bindmobile_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModUserInfo, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModUserInfo, imglen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModUserInfo, imgbuf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModUserInfo, sex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModUserInfo, province_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModUserInfo, city_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModUserInfo, signature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModUserInfo, personalcard_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModUserInfo, disturbsetting_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModUserInfo, pluginflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModUserInfo, verifyflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModUserInfo, verifyinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModUserInfo, point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModUserInfo, experience_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModUserInfo, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModUserInfo, levellowexp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModUserInfo, levelhighexp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModUserInfo, weibo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModUserInfo, pluginswitch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModUserInfo, gmaillist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModUserInfo, alias_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModUserInfo, weibonickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModUserInfo, weiboflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModUserInfo, facebookflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModUserInfo, fbuserid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModUserInfo, fbusername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModUserInfo, albumstyle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModUserInfo, albumflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModUserInfo, albumbgimgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModUserInfo, txnewscategory_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModUserInfo, fbtoken_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModUserInfo, country_),
  18,
  12,
  13,
  19,
  14,
  15,
  20,
  21,
  0,
  22,
  1,
  2,
  3,
  23,
  16,
  24,
  25,
  4,
  26,
  27,
  28,
  29,
  30,
  5,
  31,
  17,
  6,
  7,
  32,
  33,
  34,
  8,
  35,
  36,
  9,
  37,
  10,
  11,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoExt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoExt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoExt, snsuserinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoExt, mybrandlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoExt, msgpushsound_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoExt, voippushsound_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoExt, bigchatroomsize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoExt, bigchatroomquota_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoExt, bigchatroominvite_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoExt, safemobile_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoExt, bigheadimgurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoExt, smallheadimgurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoExt, mainaccttype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoExt, extxml_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoExt, safedevicelist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoExt, safedevice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoExt, grayscaleflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoExt, googlecontactname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoExt, idcardnum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoExt, realname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoExt, regcountry_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoExt, bbppid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoExt, bbpin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoExt, bbmnickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoExt, linkedincontactitem_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoExt, kfinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoExt, patternlockinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoExt, securitydeviceid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoExt, paywallettype_),
  15,
  0,
  1,
  2,
  20,
  21,
  22,
  3,
  4,
  5,
  23,
  16,
  17,
  24,
  25,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  18,
  13,
  19,
  14,
  26,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, nickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, pyinitial_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, quanpin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, sex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, imgbuf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, bitmask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, bitval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, imgflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, remark_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, remarkpyinitial_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, remarkquanpin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, contacttype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, roominfocount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, roominfolist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, domainlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, chatroomnotify_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, addcontactscene_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, province_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, city_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, signature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, personalcard_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, hasweixinhdheadimg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, verifyflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, verifyinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, weibo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, verifycontent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, alias_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, chatroomowner_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, weibonickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, weiboflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, albumstyle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, albumflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, albumbgimgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, snsuserinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, country_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, bigheadimgurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, smallheadimgurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, mybrandlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, customizedinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, chatroomdata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, headimgmd5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, encryptusername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, idcardnum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, realname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, mobilehash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, mobilefullhash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, additionalcontactlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, chatroomversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, extinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, chatroommaxcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, chatroomtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, newchatroomdata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, deleteflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, cardimgurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModContact, labelidlist_),
  25,
  26,
  27,
  28,
  38,
  29,
  39,
  40,
  41,
  30,
  31,
  32,
  42,
  43,
  ~0u,
  33,
  44,
  45,
  0,
  1,
  2,
  46,
  47,
  48,
  3,
  49,
  50,
  4,
  5,
  6,
  7,
  8,
  51,
  52,
  53,
  9,
  34,
  10,
  11,
  12,
  13,
  35,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  36,
  54,
  21,
  55,
  56,
  37,
  57,
  22,
  23,
  24,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardDevice, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardDevice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardDevice, devicetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardDevice, deviceid_),
  0,
  1,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 9, sizeof(BuiltinIP)},
  { 13, 23, sizeof(BuiltinIPList)},
  { 28, 39, sizeof(NetworkControl)},
  { 45, 52, sizeof(PluginKey)},
  { 54, 61, sizeof(PluginKeyList)},
  { 63, 71, sizeof(Host)},
  { 74, 81, sizeof(HostList)},
  { 83, 94, sizeof(PositionInfo)},
  { 100, 109, sizeof(SnsUserInfo)},
  { 113, 122, sizeof(CustomizedInfo)},
  { 126, 133, sizeof(CmdItem)},
  { 135, 142, sizeof(CmdList)},
  { 144, 157, sizeof(ShakeSyncRequest)},
  { 165, 175, sizeof(ShakeSyncResponse)},
  { 180, 188, sizeof(BindEmailRequest)},
  { 191, 197, sizeof(BindEmailResponse)},
  { 198, 210, sizeof(GetLocationRequest)},
  { 217, 225, sizeof(GetLocationResponse)},
  { 228, 235, sizeof(RoomInfo)},
  { 237, 253, sizeof(CDNDnsInfo)},
  { 264, 271, sizeof(StyleKeyVal)},
  { 273, 280, sizeof(ShowStyleKey)},
  { 282, 291, sizeof(SafeDevice)},
  { 295, 302, sizeof(SafeDeviceList)},
  { 304, 310, sizeof(MemberReq)},
  { 311, 333, sizeof(MemberResp)},
  { 350, 356, sizeof(DelMemberReq)},
  { 357, 363, sizeof(DelMemberResp)},
  { 364, 371, sizeof(DisturbTimeSpan)},
  { 373, 382, sizeof(DisturbSetting)},
  { 386, 394, sizeof(GmailInfo)},
  { 397, 404, sizeof(GmailList)},
  { 406, 414, sizeof(LinkedinContactItem)},
  { 417, 423, sizeof(AdditionalContactList)},
  { 424, 435, sizeof(ChatRoomMemberInfo)},
  { 441, 449, sizeof(ChatRoomMemberData)},
  { 452, 460, sizeof(PatternLockInfo)},
  { 463, 506, sizeof(ModUserInfo)},
  { 544, 576, sizeof(UserInfoExt)},
  { 603, 667, sizeof(ModContact)},
  { 726, 733, sizeof(HardDevice)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_BuiltinIP_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BuiltinIPList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NetworkControl_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PluginKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PluginKeyList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Host_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HostList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PositionInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SnsUserInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CustomizedInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CmdItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CmdList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ShakeSyncRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ShakeSyncResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BindEmailRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BindEmailResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetLocationRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetLocationResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RoomInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDNDnsInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StyleKeyVal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ShowStyleKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SafeDevice_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SafeDeviceList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MemberReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MemberResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DelMemberReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DelMemberResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DisturbTimeSpan_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DisturbSetting_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GmailInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GmailList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LinkedinContactItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AdditionalContactList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChatRoomMemberInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChatRoomMemberData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PatternLockInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ModUserInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserInfoExt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ModContact_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HardDevice_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "mmbase.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 41);
}

}  // namespace

void TableStruct::Shutdown() {
  _BuiltinIP_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _BuiltinIPList_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _NetworkControl_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _PluginKey_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _PluginKeyList_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _Host_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _HostList_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _PositionInfo_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _SnsUserInfo_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _CustomizedInfo_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _CmdItem_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _CmdList_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _ShakeSyncRequest_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _ShakeSyncResponse_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _BindEmailRequest_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _BindEmailResponse_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _GetLocationRequest_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _GetLocationResponse_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _RoomInfo_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _CDNDnsInfo_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _StyleKeyVal_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _ShowStyleKey_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _SafeDevice_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _SafeDeviceList_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _MemberReq_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _MemberResp_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _DelMemberReq_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _DelMemberResp_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _DisturbTimeSpan_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _DisturbSetting_default_instance_.Shutdown();
  delete file_level_metadata[29].reflection;
  _GmailInfo_default_instance_.Shutdown();
  delete file_level_metadata[30].reflection;
  _GmailList_default_instance_.Shutdown();
  delete file_level_metadata[31].reflection;
  _LinkedinContactItem_default_instance_.Shutdown();
  delete file_level_metadata[32].reflection;
  _AdditionalContactList_default_instance_.Shutdown();
  delete file_level_metadata[33].reflection;
  _ChatRoomMemberInfo_default_instance_.Shutdown();
  delete file_level_metadata[34].reflection;
  _ChatRoomMemberData_default_instance_.Shutdown();
  delete file_level_metadata[35].reflection;
  _PatternLockInfo_default_instance_.Shutdown();
  delete file_level_metadata[36].reflection;
  _ModUserInfo_default_instance_.Shutdown();
  delete file_level_metadata[37].reflection;
  _UserInfoExt_default_instance_.Shutdown();
  delete file_level_metadata[38].reflection;
  _ModContact_default_instance_.Shutdown();
  delete file_level_metadata[39].reflection;
  _HardDevice_default_instance_.Shutdown();
  delete file_level_metadata[40].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::micromsg::protobuf_mmbuiltintype_2eproto::InitDefaults();
  _BuiltinIP_default_instance_.DefaultConstruct();
  _BuiltinIPList_default_instance_.DefaultConstruct();
  _NetworkControl_default_instance_.DefaultConstruct();
  _PluginKey_default_instance_.DefaultConstruct();
  _PluginKeyList_default_instance_.DefaultConstruct();
  _Host_default_instance_.DefaultConstruct();
  _HostList_default_instance_.DefaultConstruct();
  _PositionInfo_default_instance_.DefaultConstruct();
  _SnsUserInfo_default_instance_.DefaultConstruct();
  _CustomizedInfo_default_instance_.DefaultConstruct();
  _CmdItem_default_instance_.DefaultConstruct();
  _CmdList_default_instance_.DefaultConstruct();
  _ShakeSyncRequest_default_instance_.DefaultConstruct();
  _ShakeSyncResponse_default_instance_.DefaultConstruct();
  _BindEmailRequest_default_instance_.DefaultConstruct();
  _BindEmailResponse_default_instance_.DefaultConstruct();
  _GetLocationRequest_default_instance_.DefaultConstruct();
  _GetLocationResponse_default_instance_.DefaultConstruct();
  _RoomInfo_default_instance_.DefaultConstruct();
  _CDNDnsInfo_default_instance_.DefaultConstruct();
  _StyleKeyVal_default_instance_.DefaultConstruct();
  _ShowStyleKey_default_instance_.DefaultConstruct();
  _SafeDevice_default_instance_.DefaultConstruct();
  _SafeDeviceList_default_instance_.DefaultConstruct();
  _MemberReq_default_instance_.DefaultConstruct();
  _MemberResp_default_instance_.DefaultConstruct();
  _DelMemberReq_default_instance_.DefaultConstruct();
  _DelMemberResp_default_instance_.DefaultConstruct();
  _DisturbTimeSpan_default_instance_.DefaultConstruct();
  _DisturbSetting_default_instance_.DefaultConstruct();
  _GmailInfo_default_instance_.DefaultConstruct();
  _GmailList_default_instance_.DefaultConstruct();
  _LinkedinContactItem_default_instance_.DefaultConstruct();
  _AdditionalContactList_default_instance_.DefaultConstruct();
  _ChatRoomMemberInfo_default_instance_.DefaultConstruct();
  _ChatRoomMemberData_default_instance_.DefaultConstruct();
  _PatternLockInfo_default_instance_.DefaultConstruct();
  _ModUserInfo_default_instance_.DefaultConstruct();
  _UserInfoExt_default_instance_.DefaultConstruct();
  _ModContact_default_instance_.DefaultConstruct();
  _HardDevice_default_instance_.DefaultConstruct();
  _CmdItem_default_instance_.get_mutable()->cmdbuf_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _ShakeSyncRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _ShakeSyncResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _ShakeSyncResponse_default_instance_.get_mutable()->buffer_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _BindEmailRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _BindEmailResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GetLocationRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _GetLocationResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _RoomInfo_default_instance_.get_mutable()->username_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _RoomInfo_default_instance_.get_mutable()->nickname_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _CDNDnsInfo_default_instance_.get_mutable()->authkey_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _MemberReq_default_instance_.get_mutable()->membername_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _MemberResp_default_instance_.get_mutable()->membername_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _MemberResp_default_instance_.get_mutable()->nickname_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _MemberResp_default_instance_.get_mutable()->pyinitial_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _MemberResp_default_instance_.get_mutable()->quanpin_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _MemberResp_default_instance_.get_mutable()->remark_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _MemberResp_default_instance_.get_mutable()->remarkpyinitial_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _MemberResp_default_instance_.get_mutable()->remarkquanpin_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _DelMemberReq_default_instance_.get_mutable()->membername_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _DelMemberResp_default_instance_.get_mutable()->membername_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _DisturbSetting_default_instance_.get_mutable()->nighttime_ = const_cast< ::micromsg::DisturbTimeSpan*>(
      ::micromsg::DisturbTimeSpan::internal_default_instance());
  _DisturbSetting_default_instance_.get_mutable()->alldaytime_ = const_cast< ::micromsg::DisturbTimeSpan*>(
      ::micromsg::DisturbTimeSpan::internal_default_instance());
  _AdditionalContactList_default_instance_.get_mutable()->linkedincontactitem_ = const_cast< ::micromsg::LinkedinContactItem*>(
      ::micromsg::LinkedinContactItem::internal_default_instance());
  _PatternLockInfo_default_instance_.get_mutable()->sign_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _ModUserInfo_default_instance_.get_mutable()->username_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _ModUserInfo_default_instance_.get_mutable()->nickname_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _ModUserInfo_default_instance_.get_mutable()->bindemail_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _ModUserInfo_default_instance_.get_mutable()->bindmobile_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _ModUserInfo_default_instance_.get_mutable()->disturbsetting_ = const_cast< ::micromsg::DisturbSetting*>(
      ::micromsg::DisturbSetting::internal_default_instance());
  _ModUserInfo_default_instance_.get_mutable()->gmaillist_ = const_cast< ::micromsg::GmailList*>(
      ::micromsg::GmailList::internal_default_instance());
  _UserInfoExt_default_instance_.get_mutable()->snsuserinfo_ = const_cast< ::micromsg::SnsUserInfo*>(
      ::micromsg::SnsUserInfo::internal_default_instance());
  _UserInfoExt_default_instance_.get_mutable()->extxml_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _UserInfoExt_default_instance_.get_mutable()->safedevicelist_ = const_cast< ::micromsg::SafeDeviceList*>(
      ::micromsg::SafeDeviceList::internal_default_instance());
  _UserInfoExt_default_instance_.get_mutable()->linkedincontactitem_ = const_cast< ::micromsg::LinkedinContactItem*>(
      ::micromsg::LinkedinContactItem::internal_default_instance());
  _UserInfoExt_default_instance_.get_mutable()->patternlockinfo_ = const_cast< ::micromsg::PatternLockInfo*>(
      ::micromsg::PatternLockInfo::internal_default_instance());
  _ModContact_default_instance_.get_mutable()->username_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _ModContact_default_instance_.get_mutable()->nickname_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _ModContact_default_instance_.get_mutable()->pyinitial_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _ModContact_default_instance_.get_mutable()->quanpin_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _ModContact_default_instance_.get_mutable()->imgbuf_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _ModContact_default_instance_.get_mutable()->remark_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _ModContact_default_instance_.get_mutable()->remarkpyinitial_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _ModContact_default_instance_.get_mutable()->remarkquanpin_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _ModContact_default_instance_.get_mutable()->domainlist_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
  _ModContact_default_instance_.get_mutable()->snsuserinfo_ = const_cast< ::micromsg::SnsUserInfo*>(
      ::micromsg::SnsUserInfo::internal_default_instance());
  _ModContact_default_instance_.get_mutable()->customizedinfo_ = const_cast< ::micromsg::CustomizedInfo*>(
      ::micromsg::CustomizedInfo::internal_default_instance());
  _ModContact_default_instance_.get_mutable()->additionalcontactlist_ = const_cast< ::micromsg::AdditionalContactList*>(
      ::micromsg::AdditionalContactList::internal_default_instance());
  _ModContact_default_instance_.get_mutable()->newchatroomdata_ = const_cast< ::micromsg::ChatRoomMemberData*>(
      ::micromsg::ChatRoomMemberData::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\014mmbase.proto\022\010micromsg\032\023mmbuiltintype."
      "proto\"C\n\tBuiltinIP\022\014\n\004type\030\001 \002(\r\022\014\n\004port"
      "\030\002 \002(\r\022\n\n\002IP\030\003 \001(\014\022\016\n\006Domain\030\004 \001(\014\"\266\001\n\rB"
      "uiltinIPList\022\032\n\022LongConnectIPCount\030\001 \002(\r"
      "\022\033\n\023ShortConnectIPCount\030\002 \002(\r\022\013\n\003Seq\030\005 \002"
      "(\r\022.\n\021LongConnectIPList\030\003 \003(\0132\023.micromsg"
      ".BuiltinIP\022/\n\022ShortConnectIPList\030\004 \003(\0132\023"
      ".micromsg.BuiltinIP\"\233\001\n\016NetworkControl\022\020"
      "\n\010PortList\030\001 \001(\t\022\023\n\013TimeoutList\030\002 \001(\t\022\027\n"
      "\017MinNoopInterval\030\003 \001(\r\022\027\n\017MaxNoopInterva"
      "l\030\004 \001(\r\022\026\n\016TypingInterval\030\005 \001(\005\022\030\n\020NoopI"
      "ntervalTime\030\007 \001(\005\"$\n\tPluginKey\022\013\n\003Key\030\001 "
      "\001(\t\022\n\n\002Id\030\002 \001(\r\"A\n\rPluginKeyList\022\r\n\005Coun"
      "t\030\001 \002(\r\022!\n\004List\030\002 \003(\0132\023.micromsg.PluginK"
      "ey\"<\n\004Host\022\016\n\006Origin\030\001 \001(\t\022\022\n\nSubstitute"
      "\030\002 \001(\t\022\020\n\010Priority\030\003 \001(\005\"7\n\010HostList\022\r\n\005"
      "Count\030\001 \002(\r\022\034\n\004List\030\002 \003(\0132\016.micromsg.Hos"
      "t\"z\n\014PositionInfo\022\021\n\tLongitude\030\001 \002(\002\022\020\n\010"
      "Latitude\030\002 \002(\002\022\021\n\tPrecision\030\003 \002(\005\022\017\n\007Mac"
      "Addr\030\004 \001(\t\022\016\n\006CellId\030\005 \001(\t\022\021\n\tGPSSource\030"
      "\006 \002(\005\"\\\n\013SnsUserInfo\022\017\n\007SnsFlag\030\001 \002(\r\022\022\n"
      "\nSnsBGImgID\030\002 \001(\t\022\025\n\rSnsBGObjectID\030\003 \001(\004"
      "\022\021\n\tSnsFlagEx\030\004 \001(\r\"b\n\016CustomizedInfo\022\021\n"
      "\tBrandFlag\030\001 \002(\r\022\024\n\014ExternalInfo\030\002 \001(\t\022\021"
      "\n\tBrandInfo\030\003 \001(\t\022\024\n\014BrandIconURL\030\004 \001(\t\""
      "E\n\007CmdItem\022\r\n\005CmdId\030\001 \002(\005\022+\n\006CmdBuf\030\002 \002("
      "\0132\033.micromsg.SKBuiltinBuffer_t\"9\n\007CmdLis"
      "t\022\r\n\005Count\030\001 \002(\r\022\037\n\004List\030\002 \003(\0132\021.microms"
      "g.CmdItem\"\265\001\n\020ShakeSyncRequest\022*\n\013BaseRe"
      "quest\030\001 \002(\0132\025.micromsg.BaseRequest\022\021\n\tLo"
      "ngitude\030\002 \002(\002\022\020\n\010Latitude\030\003 \002(\002\022\021\n\tPreci"
      "sion\030\004 \002(\005\022\017\n\007MacAddr\030\005 \001(\t\022\016\n\006CellId\030\006 "
      "\001(\t\022\r\n\005ImgId\030\007 \002(\r\022\r\n\005Times\030\010 \002(\r\"\240\001\n\021Sh"
      "akeSyncResponse\022,\n\014BaseResponse\030\001 \002(\0132\026."
      "micromsg.BaseResponse\022+\n\006Buffer\030\002 \002(\0132\033."
      "micromsg.SKBuiltinBuffer_t\022\013\n\003Ret\030\003 \002(\r\022"
      "\r\n\005ImgId\030\004 \002(\r\022\024\n\014ImgTotoalLen\030\005 \002(\r\"]\n\020"
      "BindEmailRequest\022*\n\013BaseRequest\030\001 \002(\0132\025."
      "micromsg.BaseRequest\022\016\n\006OpCode\030\002 \002(\r\022\r\n\005"
      "Email\030\003 \001(\t\"A\n\021BindEmailResponse\022,\n\014Base"
      "Response\030\001 \002(\0132\026.micromsg.BaseResponse\"\254"
      "\001\n\022GetLocationRequest\022*\n\013BaseRequest\030\001 \002"
      "(\0132\025.micromsg.BaseRequest\022\021\n\tLongitude\030\003"
      " \002(\005\022\020\n\010Latitude\030\004 \002(\005\022\021\n\tPrecision\030\005 \002("
      "\005\022\017\n\007MacAddr\030\006 \001(\t\022\016\n\006CellId\030\007 \001(\t\022\021\n\tGP"
      "SSource\030\010 \001(\005\"h\n\023GetLocationResponse\022,\n\014"
      "BaseResponse\030\001 \002(\0132\026.micromsg.BaseRespon"
      "se\022\021\n\tLongitude\030\002 \002(\005\022\020\n\010Latitude\030\003 \002(\005\""
      "h\n\010RoomInfo\022-\n\010UserName\030\001 \002(\0132\033.micromsg"
      ".SKBuiltinString_t\022-\n\010NickName\030\002 \002(\0132\033.m"
      "icromsg.SKBuiltinString_t\"\253\002\n\nCDNDnsInfo"
      "\022\013\n\003Ver\030\001 \002(\r\022\013\n\003Uin\030\002 \002(\r\022\022\n\nExpireTime"
      "\030\003 \002(\r\022\017\n\007FrontID\030\004 \002(\005\022\024\n\014FrontIPCount\030"
      "\005 \002(\005\0220\n\013FrontIPList\030\006 \003(\0132\033.micromsg.SK"
      "BuiltinString_t\022\022\n\nZoneDomain\030\007 \001(\t\022,\n\007A"
      "uthKey\030\010 \002(\0132\033.micromsg.SKBuiltinBuffer_"
      "t\022\016\n\006ZoneID\030\t \002(\005\022\023\n\013ZoneIPCount\030\n \002(\005\022/"
      "\n\nZoneIPList\030\013 \003(\0132\033.micromsg.SKBuiltinS"
      "tring_t\"\'\n\013StyleKeyVal\022\013\n\003Key\030\001 \002(\r\022\013\n\003V"
      "al\030\002 \001(\t\"D\n\014ShowStyleKey\022\020\n\010KeyCount\030\001 \002"
      "(\r\022\"\n\003Key\030\002 \003(\0132\025.micromsg.StyleKeyVal\"P"
      "\n\nSafeDevice\022\014\n\004Name\030\001 \001(\t\022\014\n\004Uuid\030\002 \001(\t"
      "\022\022\n\nDeviceType\030\003 \001(\t\022\022\n\nCreateTime\030\004 \002(\r"
      "\"C\n\016SafeDeviceList\022\r\n\005Count\030\001 \002(\r\022\"\n\004Lis"
      "t\030\002 \003(\0132\024.micromsg.SafeDevice\"<\n\tMemberR"
      "eq\022/\n\nMemberName\030\001 \002(\0132\033.micromsg.SKBuil"
      "tinString_t\"\233\004\n\nMemberResp\022/\n\nMemberName"
      "\030\001 \002(\0132\033.micromsg.SKBuiltinString_t\022\024\n\014M"
      "emberStatus\030\002 \002(\r\022-\n\010NickName\030\003 \002(\0132\033.mi"
      "cromsg.SKBuiltinString_t\022.\n\tPYInitial\030\004 "
      "\002(\0132\033.micromsg.SKBuiltinString_t\022,\n\007Quan"
      "Pin\030\005 \002(\0132\033.micromsg.SKBuiltinString_t\022\013"
      "\n\003Sex\030\006 \002(\005\022+\n\006Remark\030\t \002(\0132\033.micromsg.S"
      "KBuiltinString_t\0224\n\017RemarkPYInitial\030\n \002("
      "\0132\033.micromsg.SKBuiltinString_t\0222\n\rRemark"
      "QuanPin\030\013 \002(\0132\033.micromsg.SKBuiltinString"
      "_t\022\023\n\013ContactType\030\014 \002(\r\022\020\n\010Province\030\r \001("
      "\t\022\014\n\004City\030\016 \001(\t\022\021\n\tSignature\030\017 \001(\t\022\024\n\014Pe"
      "rsonalCard\030\020 \001(\r\022\022\n\nVerifyFlag\030\021 \001(\r\022\022\n\n"
      "VerifyInfo\030\022 \001(\t\022\017\n\007Country\030\023 \001(\t\"\?\n\014Del"
      "MemberReq\022/\n\nMemberName\030\001 \002(\0132\033.micromsg"
      ".SKBuiltinString_t\"@\n\rDelMemberResp\022/\n\nM"
      "emberName\030\001 \002(\0132\033.micromsg.SKBuiltinStri"
      "ng_t\"5\n\017DisturbTimeSpan\022\021\n\tBeginTime\030\001 \002"
      "(\r\022\017\n\007EndTime\030\002 \002(\r\"\232\001\n\016DisturbSetting\022\024"
      "\n\014NightSetting\030\001 \002(\r\022,\n\tNightTime\030\002 \002(\0132"
      "\031.micromsg.DisturbTimeSpan\022\025\n\rAllDaySett"
      "ing\030\003 \002(\r\022-\n\nAllDayTime\030\004 \002(\0132\031.micromsg"
      ".DisturbTimeSpan\"I\n\tGmailInfo\022\021\n\tGmailAc"
      "ct\030\001 \001(\t\022\023\n\013GmailSwitch\030\002 \002(\r\022\024\n\014GmailEr"
      "rCode\030\003 \002(\r\"=\n\tGmailList\022\r\n\005Count\030\001 \002(\r\022"
      "!\n\004List\030\002 \003(\0132\023.micromsg.GmailInfo\"`\n\023Li"
      "nkedinContactItem\022\024\n\014LinkedinName\030\001 \001(\t\022"
      "\030\n\020LinkedinMemberID\030\002 \001(\t\022\031\n\021LinkedinPub"
      "licUrl\030\003 \001(\t\"S\n\025AdditionalContactList\022:\n"
      "\023LinkedinContactItem\030\001 \001(\0132\035.micromsg.Li"
      "nkedinContactItem\"\231\001\n\022ChatRoomMemberInfo"
      "\022\020\n\010UserName\030\001 \001(\t\022\020\n\010NickName\030\002 \001(\t\022\023\n\013"
      "DisplayName\030\003 \001(\t\022\025\n\rBigHeadImgUrl\030\004 \001(\t"
      "\022\027\n\017SmallHeadImgUrl\030\005 \001(\t\022\032\n\022ChatroomMem"
      "berFlag\030\006 \002(\r\"q\n\022ChatRoomMemberData\022\023\n\013M"
      "emberCount\030\001 \002(\r\0224\n\016ChatRoomMember\030\002 \003(\013"
      "2\034.micromsg.ChatRoomMemberInfo\022\020\n\010InfoMa"
      "sk\030\003 \001(\r\"h\n\017PatternLockInfo\022\026\n\016PatternVe"
      "rsion\030\001 \001(\r\022)\n\004Sign\030\002 \001(\0132\033.micromsg.SKB"
      "uiltinBuffer_t\022\022\n\nLockStatus\030\003 \001(\r\"\370\006\n\013M"
      "odUserInfo\022\017\n\007BitFlag\030\001 \002(\r\022-\n\010UserName\030"
      "\002 \002(\0132\033.micromsg.SKBuiltinString_t\022-\n\010Ni"
      "ckName\030\003 \002(\0132\033.micromsg.SKBuiltinString_"
      "t\022\017\n\007BindUin\030\004 \002(\r\022.\n\tBindEmail\030\005 \002(\0132\033."
      "micromsg.SKBuiltinString_t\022/\n\nBindMobile"
      "\030\006 \002(\0132\033.micromsg.SKBuiltinString_t\022\016\n\006S"
      "tatus\030\007 \002(\r\022\016\n\006ImgLen\030\010 \002(\r\022\016\n\006ImgBuf\030\t "
      "\001(\014\022\013\n\003Sex\030\n \001(\005\022\020\n\010Province\030\013 \001(\t\022\014\n\004Ci"
      "ty\030\014 \001(\t\022\021\n\tSignature\030\r \001(\t\022\024\n\014PersonalC"
      "ard\030\016 \001(\r\0220\n\016DisturbSetting\030\017 \001(\0132\030.micr"
      "omsg.DisturbSetting\022\022\n\nPluginFlag\030\020 \001(\r\022"
      "\022\n\nVerifyFlag\030\021 \001(\r\022\022\n\nVerifyInfo\030\022 \001(\t\022"
      "\r\n\005Point\030\023 \001(\005\022\022\n\nExperience\030\024 \001(\005\022\r\n\005Le"
      "vel\030\025 \001(\005\022\023\n\013LevelLowExp\030\026 \001(\005\022\024\n\014LevelH"
      "ighExp\030\027 \001(\005\022\r\n\005Weibo\030\030 \001(\t\022\024\n\014PluginSwi"
      "tch\030\031 \001(\r\022&\n\tGmailList\030\032 \001(\0132\023.micromsg."
      "GmailList\022\r\n\005Alias\030\033 \001(\t\022\025\n\rWeiboNicknam"
      "e\030\034 \001(\t\022\021\n\tWeiboFlag\030\035 \001(\r\022\024\n\014FaceBookFl"
      "ag\030\036 \001(\r\022\020\n\010FBUserID\030\037 \001(\004\022\022\n\nFBUserName"
      "\030  \001(\t\022\022\n\nAlbumStyle\030! \001(\005\022\021\n\tAlbumFlag\030"
      "\" \001(\005\022\024\n\014AlbumBGImgID\030# \001(\t\022\026\n\016TXNewsCat"
      "egory\030$ \001(\r\022\017\n\007FBToken\030% \001(\t\022\017\n\007Country\030"
      "& \001(\t\"\346\005\n\013UserInfoExt\022*\n\013SnsUserInfo\030\001 \002"
      "(\0132\025.micromsg.SnsUserInfo\022\023\n\013MyBrandList"
      "\030\002 \001(\t\022\024\n\014MsgPushSound\030\003 \001(\t\022\025\n\rVoipPush"
      "Sound\030\004 \001(\t\022\027\n\017BigChatRoomSize\030\005 \001(\r\022\030\n\020"
      "BigChatRoomQuota\030\006 \001(\r\022\031\n\021BigChatRoomInv"
      "ite\030\007 \001(\r\022\022\n\nSafeMobile\030\010 \001(\t\022\025\n\rBigHead"
      "ImgUrl\030\t \001(\t\022\027\n\017SmallHeadImgUrl\030\n \001(\t\022\024\n"
      "\014MainAcctType\030\013 \001(\r\022+\n\006ExtXml\030\014 \001(\0132\033.mi"
      "cromsg.SKBuiltinString_t\0220\n\016SafeDeviceLi"
      "st\030\r \001(\0132\030.micromsg.SafeDeviceList\022\022\n\nSa"
      "feDevice\030\016 \001(\r\022\025\n\rGrayscaleFlag\030\017 \001(\r\022\031\n"
      "\021GoogleContactName\030\020 \001(\t\022\021\n\tIDCardNum\030\021 "
      "\001(\t\022\020\n\010RealName\030\022 \001(\t\022\022\n\nRegCountry\030\023 \001("
      "\t\022\016\n\006BBPPID\030\024 \001(\t\022\r\n\005BBPIN\030\025 \001(\t\022\023\n\013BBMN"
      "ickName\030\026 \001(\t\022:\n\023LinkedinContactItem\030\027 \001"
      "(\0132\035.micromsg.LinkedinContactItem\022\016\n\006KFI"
      "nfo\030\030 \001(\t\0222\n\017PatternLockInfo\030\031 \001(\0132\031.mic"
      "romsg.PatternLockInfo\022\030\n\020SecurityDeviceI"
      "d\030\032 \001(\t\022\025\n\rPayWalletType\030\033 \001(\r\"\315\014\n\nModCo"
      "ntact\022-\n\010UserName\030\001 \002(\0132\033.micromsg.SKBui"
      "ltinString_t\022-\n\010NickName\030\002 \002(\0132\033.microms"
      "g.SKBuiltinString_t\022.\n\tPYInitial\030\003 \002(\0132\033"
      ".micromsg.SKBuiltinString_t\022,\n\007QuanPin\030\004"
      " \002(\0132\033.micromsg.SKBuiltinString_t\022\013\n\003Sex"
      "\030\005 \002(\005\022+\n\006ImgBuf\030\006 \002(\0132\033.micromsg.SKBuil"
      "tinBuffer_t\022\017\n\007BitMask\030\007 \002(\r\022\016\n\006BitVal\030\010"
      " \002(\r\022\017\n\007ImgFlag\030\t \002(\r\022+\n\006Remark\030\n \001(\0132\033."
      "micromsg.SKBuiltinString_t\0224\n\017RemarkPYIn"
      "itial\030\013 \001(\0132\033.micromsg.SKBuiltinString_t"
      "\0222\n\rRemarkQuanPin\030\014 \001(\0132\033.micromsg.SKBui"
      "ltinString_t\022\023\n\013ContactType\030\r \001(\r\022\025\n\rRoo"
      "mInfoCount\030\016 \001(\r\022(\n\014RoomInfoList\030\017 \003(\0132\022"
      ".micromsg.RoomInfo\022/\n\nDomainList\030\020 \001(\0132\033"
      ".micromsg.SKBuiltinString_t\022\026\n\016ChatRoomN"
      "otify\030\021 \001(\r\022\027\n\017AddContactScene\030\022 \001(\r\022\020\n\010"
      "Province\030\023 \001(\t\022\014\n\004City\030\024 \001(\t\022\021\n\tSignatur"
      "e\030\025 \001(\t\022\024\n\014PersonalCard\030\026 \001(\r\022\032\n\022HasWeiX"
      "inHdHeadImg\030\027 \001(\r\022\022\n\nVerifyFlag\030\030 \001(\r\022\022\n"
      "\nVerifyInfo\030\031 \001(\t\022\r\n\005Level\030\032 \001(\005\022\016\n\006Sour"
      "ce\030\033 \001(\r\022\r\n\005Weibo\030\034 \001(\t\022\025\n\rVerifyContent"
      "\030\035 \001(\t\022\r\n\005Alias\030\036 \001(\t\022\025\n\rChatRoomOwner\030\037"
      " \001(\t\022\025\n\rWeiboNickname\030  \001(\t\022\021\n\tWeiboFlag"
      "\030! \001(\r\022\022\n\nAlbumStyle\030\" \001(\005\022\021\n\tAlbumFlag\030"
      "# \001(\005\022\024\n\014AlbumBGImgID\030$ \001(\t\022*\n\013SnsUserIn"
      "fo\030% \001(\0132\025.micromsg.SnsUserInfo\022\017\n\007Count"
      "ry\030& \001(\t\022\025\n\rBigHeadImgUrl\030\' \001(\t\022\027\n\017Small"
      "HeadImgUrl\030( \001(\t\022\023\n\013MyBrandList\030) \001(\t\0220\n"
      "\016CustomizedInfo\030* \001(\0132\030.micromsg.Customi"
      "zedInfo\022\024\n\014ChatRoomData\030+ \001(\t\022\022\n\nHeadImg"
      "Md5\030, \001(\t\022\027\n\017EncryptUserName\030- \001(\t\022\021\n\tID"
      "CardNum\030. \001(\t\022\020\n\010RealName\030/ \001(\t\022\022\n\nMobil"
      "eHash\0300 \001(\t\022\026\n\016MobileFullHash\0301 \001(\t\022>\n\025A"
      "dditionalContactList\0302 \001(\0132\037.micromsg.Ad"
      "ditionalContactList\022\027\n\017ChatroomVersion\0305"
      " \001(\r\022\017\n\007ExtInfo\0306 \001(\t\022\030\n\020ChatroomMaxCoun"
      "t\0307 \001(\r\022\024\n\014ChatroomType\0308 \001(\r\0225\n\017NewChat"
      "roomData\0309 \001(\0132\034.micromsg.ChatRoomMember"
      "Data\022\022\n\nDeleteFlag\030: \001(\005\022\023\n\013Description\030"
      "; \001(\t\022\022\n\nCardImgUrl\030< \001(\t\022\023\n\013LabelIDList"
      "\030= \001(\t\"2\n\nHardDevice\022\022\n\nDeviceType\030\001 \001(\t"
      "\022\020\n\010DeviceID\030\002 \001(\t"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 7538);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mmbase.proto", &protobuf_RegisterTypes);
  ::micromsg::protobuf_mmbuiltintype_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_mmbase_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BuiltinIP::kTypeFieldNumber;
const int BuiltinIP::kPortFieldNumber;
const int BuiltinIP::kIPFieldNumber;
const int BuiltinIP::kDomainFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BuiltinIP::BuiltinIP()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BuiltinIP)
}
BuiltinIP::BuiltinIP(const BuiltinIP& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip()) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_domain()) {
    domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&type_) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:micromsg.BuiltinIP)
}

void BuiltinIP::SharedCtor() {
  _cached_size_ = 0;
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&type_) + sizeof(port_));
}

BuiltinIP::~BuiltinIP() {
  // @@protoc_insertion_point(destructor:micromsg.BuiltinIP)
  SharedDtor();
}

void BuiltinIP::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BuiltinIP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuiltinIP::descriptor() {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BuiltinIP& BuiltinIP::default_instance() {
  protobuf_mmbase_2eproto::InitDefaults();
  return *internal_default_instance();
}

BuiltinIP* BuiltinIP::New(::google::protobuf::Arena* arena) const {
  BuiltinIP* n = new BuiltinIP;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BuiltinIP::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BuiltinIP)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_ip()) {
      GOOGLE_DCHECK(!ip_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ip_.UnsafeRawStringPointer())->clear();
    }
    if (has_domain()) {
      GOOGLE_DCHECK(!domain_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*domain_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&type_, 0, reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&type_) + sizeof(port_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BuiltinIP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BuiltinIP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes IP = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes Domain = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_domain()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BuiltinIP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BuiltinIP)
  return false;
#undef DO_
}

void BuiltinIP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BuiltinIP)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 type = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required uint32 port = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  // optional bytes IP = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->ip(), output);
  }

  // optional bytes Domain = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->domain(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BuiltinIP)
}

::google::protobuf::uint8* BuiltinIP::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BuiltinIP)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required uint32 port = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  // optional bytes IP = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->ip(), target);
  }

  // optional bytes Domain = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->domain(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BuiltinIP)
  return target;
}

size_t BuiltinIP::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.BuiltinIP)
  size_t total_size = 0;

  if (has_type()) {
    // required uint32 type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  if (has_port()) {
    // required uint32 port = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  return total_size;
}
size_t BuiltinIP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BuiltinIP)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000c) ^ 0x0000000c) == 0) {  // All required fields are present.
    // required uint32 type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());

    // required uint32 port = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes IP = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ip());
    }

    // optional bytes Domain = 4;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->domain());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuiltinIP::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BuiltinIP)
  GOOGLE_DCHECK_NE(&from, this);
  const BuiltinIP* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BuiltinIP>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BuiltinIP)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BuiltinIP)
    MergeFrom(*source);
  }
}

void BuiltinIP::MergeFrom(const BuiltinIP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BuiltinIP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_domain();
      domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      port_ = from.port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BuiltinIP::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BuiltinIP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuiltinIP::CopyFrom(const BuiltinIP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BuiltinIP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuiltinIP::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;
  return true;
}

void BuiltinIP::Swap(BuiltinIP* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BuiltinIP::InternalSwap(BuiltinIP* other) {
  ip_.Swap(&other->ip_);
  domain_.Swap(&other->domain_);
  std::swap(type_, other->type_);
  std::swap(port_, other->port_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BuiltinIP::GetMetadata() const {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BuiltinIP

// required uint32 type = 1;
bool BuiltinIP::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BuiltinIP::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void BuiltinIP::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void BuiltinIP::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 BuiltinIP::type() const {
  // @@protoc_insertion_point(field_get:micromsg.BuiltinIP.type)
  return type_;
}
void BuiltinIP::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BuiltinIP.type)
}

// required uint32 port = 2;
bool BuiltinIP::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BuiltinIP::set_has_port() {
  _has_bits_[0] |= 0x00000008u;
}
void BuiltinIP::clear_has_port() {
  _has_bits_[0] &= ~0x00000008u;
}
void BuiltinIP::clear_port() {
  port_ = 0u;
  clear_has_port();
}
::google::protobuf::uint32 BuiltinIP::port() const {
  // @@protoc_insertion_point(field_get:micromsg.BuiltinIP.port)
  return port_;
}
void BuiltinIP::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BuiltinIP.port)
}

// optional bytes IP = 3;
bool BuiltinIP::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BuiltinIP::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
void BuiltinIP::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
void BuiltinIP::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
const ::std::string& BuiltinIP::ip() const {
  // @@protoc_insertion_point(field_get:micromsg.BuiltinIP.IP)
  return ip_.GetNoArena();
}
void BuiltinIP::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BuiltinIP.IP)
}
#if LANG_CXX11
void BuiltinIP::set_ip(::std::string&& value) {
  set_has_ip();
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BuiltinIP.IP)
}
#endif
void BuiltinIP::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BuiltinIP.IP)
}
void BuiltinIP::set_ip(const void* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BuiltinIP.IP)
}
::std::string* BuiltinIP::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:micromsg.BuiltinIP.IP)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BuiltinIP::release_ip() {
  // @@protoc_insertion_point(field_release:micromsg.BuiltinIP.IP)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BuiltinIP::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BuiltinIP.IP)
}

// optional bytes Domain = 4;
bool BuiltinIP::has_domain() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BuiltinIP::set_has_domain() {
  _has_bits_[0] |= 0x00000002u;
}
void BuiltinIP::clear_has_domain() {
  _has_bits_[0] &= ~0x00000002u;
}
void BuiltinIP::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_domain();
}
const ::std::string& BuiltinIP::domain() const {
  // @@protoc_insertion_point(field_get:micromsg.BuiltinIP.Domain)
  return domain_.GetNoArena();
}
void BuiltinIP::set_domain(const ::std::string& value) {
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BuiltinIP.Domain)
}
#if LANG_CXX11
void BuiltinIP::set_domain(::std::string&& value) {
  set_has_domain();
  domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BuiltinIP.Domain)
}
#endif
void BuiltinIP::set_domain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BuiltinIP.Domain)
}
void BuiltinIP::set_domain(const void* value, size_t size) {
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BuiltinIP.Domain)
}
::std::string* BuiltinIP::mutable_domain() {
  set_has_domain();
  // @@protoc_insertion_point(field_mutable:micromsg.BuiltinIP.Domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BuiltinIP::release_domain() {
  // @@protoc_insertion_point(field_release:micromsg.BuiltinIP.Domain)
  clear_has_domain();
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BuiltinIP::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    set_has_domain();
  } else {
    clear_has_domain();
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BuiltinIP.Domain)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BuiltinIPList::kLongConnectIPCountFieldNumber;
const int BuiltinIPList::kShortConnectIPCountFieldNumber;
const int BuiltinIPList::kSeqFieldNumber;
const int BuiltinIPList::kLongConnectIPListFieldNumber;
const int BuiltinIPList::kShortConnectIPListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BuiltinIPList::BuiltinIPList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BuiltinIPList)
}
BuiltinIPList::BuiltinIPList(const BuiltinIPList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      longconnectiplist_(from.longconnectiplist_),
      shortconnectiplist_(from.shortconnectiplist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&longconnectipcount_, &from.longconnectipcount_,
    reinterpret_cast<char*>(&seq_) -
    reinterpret_cast<char*>(&longconnectipcount_) + sizeof(seq_));
  // @@protoc_insertion_point(copy_constructor:micromsg.BuiltinIPList)
}

void BuiltinIPList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&longconnectipcount_, 0, reinterpret_cast<char*>(&seq_) -
    reinterpret_cast<char*>(&longconnectipcount_) + sizeof(seq_));
}

BuiltinIPList::~BuiltinIPList() {
  // @@protoc_insertion_point(destructor:micromsg.BuiltinIPList)
  SharedDtor();
}

void BuiltinIPList::SharedDtor() {
}

void BuiltinIPList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuiltinIPList::descriptor() {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BuiltinIPList& BuiltinIPList::default_instance() {
  protobuf_mmbase_2eproto::InitDefaults();
  return *internal_default_instance();
}

BuiltinIPList* BuiltinIPList::New(::google::protobuf::Arena* arena) const {
  BuiltinIPList* n = new BuiltinIPList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BuiltinIPList::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BuiltinIPList)
  longconnectiplist_.Clear();
  shortconnectiplist_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&longconnectipcount_, 0, reinterpret_cast<char*>(&seq_) -
      reinterpret_cast<char*>(&longconnectipcount_) + sizeof(seq_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BuiltinIPList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BuiltinIPList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 LongConnectIPCount = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_longconnectipcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &longconnectipcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ShortConnectIPCount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_shortconnectipcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shortconnectipcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.BuiltinIP LongConnectIPList = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_longconnectiplist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.BuiltinIP ShortConnectIPList = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shortconnectiplist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Seq = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_seq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BuiltinIPList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BuiltinIPList)
  return false;
#undef DO_
}

void BuiltinIPList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BuiltinIPList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 LongConnectIPCount = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->longconnectipcount(), output);
  }

  // required uint32 ShortConnectIPCount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->shortconnectipcount(), output);
  }

  // repeated .micromsg.BuiltinIP LongConnectIPList = 3;
  for (unsigned int i = 0, n = this->longconnectiplist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->longconnectiplist(i), output);
  }

  // repeated .micromsg.BuiltinIP ShortConnectIPList = 4;
  for (unsigned int i = 0, n = this->shortconnectiplist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->shortconnectiplist(i), output);
  }

  // required uint32 Seq = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->seq(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BuiltinIPList)
}

::google::protobuf::uint8* BuiltinIPList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BuiltinIPList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 LongConnectIPCount = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->longconnectipcount(), target);
  }

  // required uint32 ShortConnectIPCount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->shortconnectipcount(), target);
  }

  // repeated .micromsg.BuiltinIP LongConnectIPList = 3;
  for (unsigned int i = 0, n = this->longconnectiplist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->longconnectiplist(i), deterministic, target);
  }

  // repeated .micromsg.BuiltinIP ShortConnectIPList = 4;
  for (unsigned int i = 0, n = this->shortconnectiplist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->shortconnectiplist(i), deterministic, target);
  }

  // required uint32 Seq = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->seq(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BuiltinIPList)
  return target;
}

size_t BuiltinIPList::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.BuiltinIPList)
  size_t total_size = 0;

  if (has_longconnectipcount()) {
    // required uint32 LongConnectIPCount = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->longconnectipcount());
  }

  if (has_shortconnectipcount()) {
    // required uint32 ShortConnectIPCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->shortconnectipcount());
  }

  if (has_seq()) {
    // required uint32 Seq = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->seq());
  }

  return total_size;
}
size_t BuiltinIPList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BuiltinIPList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 LongConnectIPCount = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->longconnectipcount());

    // required uint32 ShortConnectIPCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->shortconnectipcount());

    // required uint32 Seq = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->seq());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.BuiltinIP LongConnectIPList = 3;
  {
    unsigned int count = this->longconnectiplist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->longconnectiplist(i));
    }
  }

  // repeated .micromsg.BuiltinIP ShortConnectIPList = 4;
  {
    unsigned int count = this->shortconnectiplist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shortconnectiplist(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuiltinIPList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BuiltinIPList)
  GOOGLE_DCHECK_NE(&from, this);
  const BuiltinIPList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BuiltinIPList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BuiltinIPList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BuiltinIPList)
    MergeFrom(*source);
  }
}

void BuiltinIPList::MergeFrom(const BuiltinIPList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BuiltinIPList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  longconnectiplist_.MergeFrom(from.longconnectiplist_);
  shortconnectiplist_.MergeFrom(from.shortconnectiplist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      longconnectipcount_ = from.longconnectipcount_;
    }
    if (cached_has_bits & 0x00000002u) {
      shortconnectipcount_ = from.shortconnectipcount_;
    }
    if (cached_has_bits & 0x00000004u) {
      seq_ = from.seq_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BuiltinIPList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BuiltinIPList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuiltinIPList::CopyFrom(const BuiltinIPList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BuiltinIPList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuiltinIPList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->longconnectiplist())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->shortconnectiplist())) return false;
  return true;
}

void BuiltinIPList::Swap(BuiltinIPList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BuiltinIPList::InternalSwap(BuiltinIPList* other) {
  longconnectiplist_.InternalSwap(&other->longconnectiplist_);
  shortconnectiplist_.InternalSwap(&other->shortconnectiplist_);
  std::swap(longconnectipcount_, other->longconnectipcount_);
  std::swap(shortconnectipcount_, other->shortconnectipcount_);
  std::swap(seq_, other->seq_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BuiltinIPList::GetMetadata() const {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BuiltinIPList

// required uint32 LongConnectIPCount = 1;
bool BuiltinIPList::has_longconnectipcount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BuiltinIPList::set_has_longconnectipcount() {
  _has_bits_[0] |= 0x00000001u;
}
void BuiltinIPList::clear_has_longconnectipcount() {
  _has_bits_[0] &= ~0x00000001u;
}
void BuiltinIPList::clear_longconnectipcount() {
  longconnectipcount_ = 0u;
  clear_has_longconnectipcount();
}
::google::protobuf::uint32 BuiltinIPList::longconnectipcount() const {
  // @@protoc_insertion_point(field_get:micromsg.BuiltinIPList.LongConnectIPCount)
  return longconnectipcount_;
}
void BuiltinIPList::set_longconnectipcount(::google::protobuf::uint32 value) {
  set_has_longconnectipcount();
  longconnectipcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BuiltinIPList.LongConnectIPCount)
}

// required uint32 ShortConnectIPCount = 2;
bool BuiltinIPList::has_shortconnectipcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BuiltinIPList::set_has_shortconnectipcount() {
  _has_bits_[0] |= 0x00000002u;
}
void BuiltinIPList::clear_has_shortconnectipcount() {
  _has_bits_[0] &= ~0x00000002u;
}
void BuiltinIPList::clear_shortconnectipcount() {
  shortconnectipcount_ = 0u;
  clear_has_shortconnectipcount();
}
::google::protobuf::uint32 BuiltinIPList::shortconnectipcount() const {
  // @@protoc_insertion_point(field_get:micromsg.BuiltinIPList.ShortConnectIPCount)
  return shortconnectipcount_;
}
void BuiltinIPList::set_shortconnectipcount(::google::protobuf::uint32 value) {
  set_has_shortconnectipcount();
  shortconnectipcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BuiltinIPList.ShortConnectIPCount)
}

// required uint32 Seq = 5;
bool BuiltinIPList::has_seq() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BuiltinIPList::set_has_seq() {
  _has_bits_[0] |= 0x00000004u;
}
void BuiltinIPList::clear_has_seq() {
  _has_bits_[0] &= ~0x00000004u;
}
void BuiltinIPList::clear_seq() {
  seq_ = 0u;
  clear_has_seq();
}
::google::protobuf::uint32 BuiltinIPList::seq() const {
  // @@protoc_insertion_point(field_get:micromsg.BuiltinIPList.Seq)
  return seq_;
}
void BuiltinIPList::set_seq(::google::protobuf::uint32 value) {
  set_has_seq();
  seq_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BuiltinIPList.Seq)
}

// repeated .micromsg.BuiltinIP LongConnectIPList = 3;
int BuiltinIPList::longconnectiplist_size() const {
  return longconnectiplist_.size();
}
void BuiltinIPList::clear_longconnectiplist() {
  longconnectiplist_.Clear();
}
const ::micromsg::BuiltinIP& BuiltinIPList::longconnectiplist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.BuiltinIPList.LongConnectIPList)
  return longconnectiplist_.Get(index);
}
::micromsg::BuiltinIP* BuiltinIPList::mutable_longconnectiplist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.BuiltinIPList.LongConnectIPList)
  return longconnectiplist_.Mutable(index);
}
::micromsg::BuiltinIP* BuiltinIPList::add_longconnectiplist() {
  // @@protoc_insertion_point(field_add:micromsg.BuiltinIPList.LongConnectIPList)
  return longconnectiplist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::BuiltinIP >*
BuiltinIPList::mutable_longconnectiplist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.BuiltinIPList.LongConnectIPList)
  return &longconnectiplist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::BuiltinIP >&
BuiltinIPList::longconnectiplist() const {
  // @@protoc_insertion_point(field_list:micromsg.BuiltinIPList.LongConnectIPList)
  return longconnectiplist_;
}

// repeated .micromsg.BuiltinIP ShortConnectIPList = 4;
int BuiltinIPList::shortconnectiplist_size() const {
  return shortconnectiplist_.size();
}
void BuiltinIPList::clear_shortconnectiplist() {
  shortconnectiplist_.Clear();
}
const ::micromsg::BuiltinIP& BuiltinIPList::shortconnectiplist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.BuiltinIPList.ShortConnectIPList)
  return shortconnectiplist_.Get(index);
}
::micromsg::BuiltinIP* BuiltinIPList::mutable_shortconnectiplist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.BuiltinIPList.ShortConnectIPList)
  return shortconnectiplist_.Mutable(index);
}
::micromsg::BuiltinIP* BuiltinIPList::add_shortconnectiplist() {
  // @@protoc_insertion_point(field_add:micromsg.BuiltinIPList.ShortConnectIPList)
  return shortconnectiplist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::BuiltinIP >*
BuiltinIPList::mutable_shortconnectiplist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.BuiltinIPList.ShortConnectIPList)
  return &shortconnectiplist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::BuiltinIP >&
BuiltinIPList::shortconnectiplist() const {
  // @@protoc_insertion_point(field_list:micromsg.BuiltinIPList.ShortConnectIPList)
  return shortconnectiplist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkControl::kPortListFieldNumber;
const int NetworkControl::kTimeoutListFieldNumber;
const int NetworkControl::kMinNoopIntervalFieldNumber;
const int NetworkControl::kMaxNoopIntervalFieldNumber;
const int NetworkControl::kTypingIntervalFieldNumber;
const int NetworkControl::kNoopIntervalTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkControl::NetworkControl()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.NetworkControl)
}
NetworkControl::NetworkControl(const NetworkControl& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  portlist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_portlist()) {
    portlist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.portlist_);
  }
  timeoutlist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_timeoutlist()) {
    timeoutlist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timeoutlist_);
  }
  ::memcpy(&minnoopinterval_, &from.minnoopinterval_,
    reinterpret_cast<char*>(&noopintervaltime_) -
    reinterpret_cast<char*>(&minnoopinterval_) + sizeof(noopintervaltime_));
  // @@protoc_insertion_point(copy_constructor:micromsg.NetworkControl)
}

void NetworkControl::SharedCtor() {
  _cached_size_ = 0;
  portlist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timeoutlist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&minnoopinterval_, 0, reinterpret_cast<char*>(&noopintervaltime_) -
    reinterpret_cast<char*>(&minnoopinterval_) + sizeof(noopintervaltime_));
}

NetworkControl::~NetworkControl() {
  // @@protoc_insertion_point(destructor:micromsg.NetworkControl)
  SharedDtor();
}

void NetworkControl::SharedDtor() {
  portlist_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timeoutlist_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NetworkControl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetworkControl::descriptor() {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NetworkControl& NetworkControl::default_instance() {
  protobuf_mmbase_2eproto::InitDefaults();
  return *internal_default_instance();
}

NetworkControl* NetworkControl::New(::google::protobuf::Arena* arena) const {
  NetworkControl* n = new NetworkControl;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetworkControl::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.NetworkControl)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_portlist()) {
      GOOGLE_DCHECK(!portlist_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*portlist_.UnsafeRawStringPointer())->clear();
    }
    if (has_timeoutlist()) {
      GOOGLE_DCHECK(!timeoutlist_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*timeoutlist_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 60u) {
    ::memset(&minnoopinterval_, 0, reinterpret_cast<char*>(&noopintervaltime_) -
      reinterpret_cast<char*>(&minnoopinterval_) + sizeof(noopintervaltime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NetworkControl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.NetworkControl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string PortList = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_portlist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->portlist().data(), this->portlist().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NetworkControl.PortList");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string TimeoutList = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timeoutlist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->timeoutlist().data(), this->timeoutlist().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.NetworkControl.TimeoutList");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 MinNoopInterval = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_minnoopinterval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minnoopinterval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 MaxNoopInterval = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_maxnoopinterval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxnoopinterval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 TypingInterval = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_typinginterval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typinginterval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 NoopIntervalTime = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_noopintervaltime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &noopintervaltime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.NetworkControl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.NetworkControl)
  return false;
#undef DO_
}

void NetworkControl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.NetworkControl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string PortList = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->portlist().data(), this->portlist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NetworkControl.PortList");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->portlist(), output);
  }

  // optional string TimeoutList = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timeoutlist().data(), this->timeoutlist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NetworkControl.TimeoutList");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->timeoutlist(), output);
  }

  // optional uint32 MinNoopInterval = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->minnoopinterval(), output);
  }

  // optional uint32 MaxNoopInterval = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->maxnoopinterval(), output);
  }

  // optional int32 TypingInterval = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->typinginterval(), output);
  }

  // optional int32 NoopIntervalTime = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->noopintervaltime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.NetworkControl)
}

::google::protobuf::uint8* NetworkControl::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.NetworkControl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string PortList = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->portlist().data(), this->portlist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NetworkControl.PortList");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->portlist(), target);
  }

  // optional string TimeoutList = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timeoutlist().data(), this->timeoutlist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.NetworkControl.TimeoutList");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->timeoutlist(), target);
  }

  // optional uint32 MinNoopInterval = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->minnoopinterval(), target);
  }

  // optional uint32 MaxNoopInterval = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->maxnoopinterval(), target);
  }

  // optional int32 TypingInterval = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->typinginterval(), target);
  }

  // optional int32 NoopIntervalTime = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->noopintervaltime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.NetworkControl)
  return target;
}

size_t NetworkControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.NetworkControl)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string PortList = 1;
    if (has_portlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->portlist());
    }

    // optional string TimeoutList = 2;
    if (has_timeoutlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timeoutlist());
    }

    // optional uint32 MinNoopInterval = 3;
    if (has_minnoopinterval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minnoopinterval());
    }

    // optional uint32 MaxNoopInterval = 4;
    if (has_maxnoopinterval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxnoopinterval());
    }

    // optional int32 TypingInterval = 5;
    if (has_typinginterval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->typinginterval());
    }

    // optional int32 NoopIntervalTime = 7;
    if (has_noopintervaltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->noopintervaltime());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkControl::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.NetworkControl)
  GOOGLE_DCHECK_NE(&from, this);
  const NetworkControl* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetworkControl>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.NetworkControl)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.NetworkControl)
    MergeFrom(*source);
  }
}

void NetworkControl::MergeFrom(const NetworkControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.NetworkControl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_portlist();
      portlist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.portlist_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_timeoutlist();
      timeoutlist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timeoutlist_);
    }
    if (cached_has_bits & 0x00000004u) {
      minnoopinterval_ = from.minnoopinterval_;
    }
    if (cached_has_bits & 0x00000008u) {
      maxnoopinterval_ = from.maxnoopinterval_;
    }
    if (cached_has_bits & 0x00000010u) {
      typinginterval_ = from.typinginterval_;
    }
    if (cached_has_bits & 0x00000020u) {
      noopintervaltime_ = from.noopintervaltime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NetworkControl::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.NetworkControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkControl::CopyFrom(const NetworkControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.NetworkControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkControl::IsInitialized() const {
  return true;
}

void NetworkControl::Swap(NetworkControl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkControl::InternalSwap(NetworkControl* other) {
  portlist_.Swap(&other->portlist_);
  timeoutlist_.Swap(&other->timeoutlist_);
  std::swap(minnoopinterval_, other->minnoopinterval_);
  std::swap(maxnoopinterval_, other->maxnoopinterval_);
  std::swap(typinginterval_, other->typinginterval_);
  std::swap(noopintervaltime_, other->noopintervaltime_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetworkControl::GetMetadata() const {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetworkControl

// optional string PortList = 1;
bool NetworkControl::has_portlist() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NetworkControl::set_has_portlist() {
  _has_bits_[0] |= 0x00000001u;
}
void NetworkControl::clear_has_portlist() {
  _has_bits_[0] &= ~0x00000001u;
}
void NetworkControl::clear_portlist() {
  portlist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_portlist();
}
const ::std::string& NetworkControl::portlist() const {
  // @@protoc_insertion_point(field_get:micromsg.NetworkControl.PortList)
  return portlist_.GetNoArena();
}
void NetworkControl::set_portlist(const ::std::string& value) {
  set_has_portlist();
  portlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NetworkControl.PortList)
}
#if LANG_CXX11
void NetworkControl::set_portlist(::std::string&& value) {
  set_has_portlist();
  portlist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NetworkControl.PortList)
}
#endif
void NetworkControl::set_portlist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_portlist();
  portlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NetworkControl.PortList)
}
void NetworkControl::set_portlist(const char* value, size_t size) {
  set_has_portlist();
  portlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NetworkControl.PortList)
}
::std::string* NetworkControl::mutable_portlist() {
  set_has_portlist();
  // @@protoc_insertion_point(field_mutable:micromsg.NetworkControl.PortList)
  return portlist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetworkControl::release_portlist() {
  // @@protoc_insertion_point(field_release:micromsg.NetworkControl.PortList)
  clear_has_portlist();
  return portlist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetworkControl::set_allocated_portlist(::std::string* portlist) {
  if (portlist != NULL) {
    set_has_portlist();
  } else {
    clear_has_portlist();
  }
  portlist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), portlist);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NetworkControl.PortList)
}

// optional string TimeoutList = 2;
bool NetworkControl::has_timeoutlist() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NetworkControl::set_has_timeoutlist() {
  _has_bits_[0] |= 0x00000002u;
}
void NetworkControl::clear_has_timeoutlist() {
  _has_bits_[0] &= ~0x00000002u;
}
void NetworkControl::clear_timeoutlist() {
  timeoutlist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_timeoutlist();
}
const ::std::string& NetworkControl::timeoutlist() const {
  // @@protoc_insertion_point(field_get:micromsg.NetworkControl.TimeoutList)
  return timeoutlist_.GetNoArena();
}
void NetworkControl::set_timeoutlist(const ::std::string& value) {
  set_has_timeoutlist();
  timeoutlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NetworkControl.TimeoutList)
}
#if LANG_CXX11
void NetworkControl::set_timeoutlist(::std::string&& value) {
  set_has_timeoutlist();
  timeoutlist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NetworkControl.TimeoutList)
}
#endif
void NetworkControl::set_timeoutlist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_timeoutlist();
  timeoutlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NetworkControl.TimeoutList)
}
void NetworkControl::set_timeoutlist(const char* value, size_t size) {
  set_has_timeoutlist();
  timeoutlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NetworkControl.TimeoutList)
}
::std::string* NetworkControl::mutable_timeoutlist() {
  set_has_timeoutlist();
  // @@protoc_insertion_point(field_mutable:micromsg.NetworkControl.TimeoutList)
  return timeoutlist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetworkControl::release_timeoutlist() {
  // @@protoc_insertion_point(field_release:micromsg.NetworkControl.TimeoutList)
  clear_has_timeoutlist();
  return timeoutlist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetworkControl::set_allocated_timeoutlist(::std::string* timeoutlist) {
  if (timeoutlist != NULL) {
    set_has_timeoutlist();
  } else {
    clear_has_timeoutlist();
  }
  timeoutlist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timeoutlist);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NetworkControl.TimeoutList)
}

// optional uint32 MinNoopInterval = 3;
bool NetworkControl::has_minnoopinterval() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NetworkControl::set_has_minnoopinterval() {
  _has_bits_[0] |= 0x00000004u;
}
void NetworkControl::clear_has_minnoopinterval() {
  _has_bits_[0] &= ~0x00000004u;
}
void NetworkControl::clear_minnoopinterval() {
  minnoopinterval_ = 0u;
  clear_has_minnoopinterval();
}
::google::protobuf::uint32 NetworkControl::minnoopinterval() const {
  // @@protoc_insertion_point(field_get:micromsg.NetworkControl.MinNoopInterval)
  return minnoopinterval_;
}
void NetworkControl::set_minnoopinterval(::google::protobuf::uint32 value) {
  set_has_minnoopinterval();
  minnoopinterval_ = value;
  // @@protoc_insertion_point(field_set:micromsg.NetworkControl.MinNoopInterval)
}

// optional uint32 MaxNoopInterval = 4;
bool NetworkControl::has_maxnoopinterval() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void NetworkControl::set_has_maxnoopinterval() {
  _has_bits_[0] |= 0x00000008u;
}
void NetworkControl::clear_has_maxnoopinterval() {
  _has_bits_[0] &= ~0x00000008u;
}
void NetworkControl::clear_maxnoopinterval() {
  maxnoopinterval_ = 0u;
  clear_has_maxnoopinterval();
}
::google::protobuf::uint32 NetworkControl::maxnoopinterval() const {
  // @@protoc_insertion_point(field_get:micromsg.NetworkControl.MaxNoopInterval)
  return maxnoopinterval_;
}
void NetworkControl::set_maxnoopinterval(::google::protobuf::uint32 value) {
  set_has_maxnoopinterval();
  maxnoopinterval_ = value;
  // @@protoc_insertion_point(field_set:micromsg.NetworkControl.MaxNoopInterval)
}

// optional int32 TypingInterval = 5;
bool NetworkControl::has_typinginterval() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void NetworkControl::set_has_typinginterval() {
  _has_bits_[0] |= 0x00000010u;
}
void NetworkControl::clear_has_typinginterval() {
  _has_bits_[0] &= ~0x00000010u;
}
void NetworkControl::clear_typinginterval() {
  typinginterval_ = 0;
  clear_has_typinginterval();
}
::google::protobuf::int32 NetworkControl::typinginterval() const {
  // @@protoc_insertion_point(field_get:micromsg.NetworkControl.TypingInterval)
  return typinginterval_;
}
void NetworkControl::set_typinginterval(::google::protobuf::int32 value) {
  set_has_typinginterval();
  typinginterval_ = value;
  // @@protoc_insertion_point(field_set:micromsg.NetworkControl.TypingInterval)
}

// optional int32 NoopIntervalTime = 7;
bool NetworkControl::has_noopintervaltime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void NetworkControl::set_has_noopintervaltime() {
  _has_bits_[0] |= 0x00000020u;
}
void NetworkControl::clear_has_noopintervaltime() {
  _has_bits_[0] &= ~0x00000020u;
}
void NetworkControl::clear_noopintervaltime() {
  noopintervaltime_ = 0;
  clear_has_noopintervaltime();
}
::google::protobuf::int32 NetworkControl::noopintervaltime() const {
  // @@protoc_insertion_point(field_get:micromsg.NetworkControl.NoopIntervalTime)
  return noopintervaltime_;
}
void NetworkControl::set_noopintervaltime(::google::protobuf::int32 value) {
  set_has_noopintervaltime();
  noopintervaltime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.NetworkControl.NoopIntervalTime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PluginKey::kKeyFieldNumber;
const int PluginKey::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PluginKey::PluginKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.PluginKey)
}
PluginKey::PluginKey(const PluginKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:micromsg.PluginKey)
}

void PluginKey::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0u;
}

PluginKey::~PluginKey() {
  // @@protoc_insertion_point(destructor:micromsg.PluginKey)
  SharedDtor();
}

void PluginKey::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PluginKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PluginKey::descriptor() {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PluginKey& PluginKey::default_instance() {
  protobuf_mmbase_2eproto::InitDefaults();
  return *internal_default_instance();
}

PluginKey* PluginKey::New(::google::protobuf::Arena* arena) const {
  PluginKey* n = new PluginKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PluginKey::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.PluginKey)
  if (has_key()) {
    GOOGLE_DCHECK(!key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*key_.UnsafeRawStringPointer())->clear();
  }
  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PluginKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.PluginKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.PluginKey.Key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 Id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.PluginKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.PluginKey)
  return false;
#undef DO_
}

void PluginKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.PluginKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string Key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PluginKey.Key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional uint32 Id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.PluginKey)
}

::google::protobuf::uint8* PluginKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.PluginKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string Key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PluginKey.Key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional uint32 Id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.PluginKey)
  return target;
}

size_t PluginKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.PluginKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string Key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional uint32 Id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PluginKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.PluginKey)
  GOOGLE_DCHECK_NE(&from, this);
  const PluginKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PluginKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.PluginKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.PluginKey)
    MergeFrom(*source);
  }
}

void PluginKey::MergeFrom(const PluginKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.PluginKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PluginKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.PluginKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PluginKey::CopyFrom(const PluginKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.PluginKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PluginKey::IsInitialized() const {
  return true;
}

void PluginKey::Swap(PluginKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PluginKey::InternalSwap(PluginKey* other) {
  key_.Swap(&other->key_);
  std::swap(id_, other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PluginKey::GetMetadata() const {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PluginKey

// optional string Key = 1;
bool PluginKey::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PluginKey::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void PluginKey::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void PluginKey::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& PluginKey::key() const {
  // @@protoc_insertion_point(field_get:micromsg.PluginKey.Key)
  return key_.GetNoArena();
}
void PluginKey::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.PluginKey.Key)
}
#if LANG_CXX11
void PluginKey::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.PluginKey.Key)
}
#endif
void PluginKey::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.PluginKey.Key)
}
void PluginKey::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.PluginKey.Key)
}
::std::string* PluginKey::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:micromsg.PluginKey.Key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PluginKey::release_key() {
  // @@protoc_insertion_point(field_release:micromsg.PluginKey.Key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PluginKey::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:micromsg.PluginKey.Key)
}

// optional uint32 Id = 2;
bool PluginKey::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PluginKey::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void PluginKey::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void PluginKey::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 PluginKey::id() const {
  // @@protoc_insertion_point(field_get:micromsg.PluginKey.Id)
  return id_;
}
void PluginKey::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PluginKey.Id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PluginKeyList::kCountFieldNumber;
const int PluginKeyList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PluginKeyList::PluginKeyList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.PluginKeyList)
}
PluginKeyList::PluginKeyList(const PluginKeyList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:micromsg.PluginKeyList)
}

void PluginKeyList::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0u;
}

PluginKeyList::~PluginKeyList() {
  // @@protoc_insertion_point(destructor:micromsg.PluginKeyList)
  SharedDtor();
}

void PluginKeyList::SharedDtor() {
}

void PluginKeyList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PluginKeyList::descriptor() {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PluginKeyList& PluginKeyList::default_instance() {
  protobuf_mmbase_2eproto::InitDefaults();
  return *internal_default_instance();
}

PluginKeyList* PluginKeyList::New(::google::protobuf::Arena* arena) const {
  PluginKeyList* n = new PluginKeyList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PluginKeyList::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.PluginKeyList)
  list_.Clear();
  count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PluginKeyList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.PluginKeyList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.PluginKey List = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.PluginKeyList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.PluginKeyList)
  return false;
#undef DO_
}

void PluginKeyList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.PluginKeyList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Count = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count(), output);
  }

  // repeated .micromsg.PluginKey List = 2;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.PluginKeyList)
}

::google::protobuf::uint8* PluginKeyList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.PluginKeyList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->count(), target);
  }

  // repeated .micromsg.PluginKey List = 2;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->list(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.PluginKeyList)
  return target;
}

size_t PluginKeyList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.PluginKeyList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 Count = 1;
  if (has_count()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }
  // repeated .micromsg.PluginKey List = 2;
  {
    unsigned int count = this->list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PluginKeyList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.PluginKeyList)
  GOOGLE_DCHECK_NE(&from, this);
  const PluginKeyList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PluginKeyList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.PluginKeyList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.PluginKeyList)
    MergeFrom(*source);
  }
}

void PluginKeyList::MergeFrom(const PluginKeyList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.PluginKeyList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  if (from.has_count()) {
    set_count(from.count());
  }
}

void PluginKeyList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.PluginKeyList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PluginKeyList::CopyFrom(const PluginKeyList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.PluginKeyList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PluginKeyList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void PluginKeyList::Swap(PluginKeyList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PluginKeyList::InternalSwap(PluginKeyList* other) {
  list_.InternalSwap(&other->list_);
  std::swap(count_, other->count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PluginKeyList::GetMetadata() const {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PluginKeyList

// required uint32 Count = 1;
bool PluginKeyList::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PluginKeyList::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
void PluginKeyList::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
void PluginKeyList::clear_count() {
  count_ = 0u;
  clear_has_count();
}
::google::protobuf::uint32 PluginKeyList::count() const {
  // @@protoc_insertion_point(field_get:micromsg.PluginKeyList.Count)
  return count_;
}
void PluginKeyList::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PluginKeyList.Count)
}

// repeated .micromsg.PluginKey List = 2;
int PluginKeyList::list_size() const {
  return list_.size();
}
void PluginKeyList::clear_list() {
  list_.Clear();
}
const ::micromsg::PluginKey& PluginKeyList::list(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.PluginKeyList.List)
  return list_.Get(index);
}
::micromsg::PluginKey* PluginKeyList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.PluginKeyList.List)
  return list_.Mutable(index);
}
::micromsg::PluginKey* PluginKeyList::add_list() {
  // @@protoc_insertion_point(field_add:micromsg.PluginKeyList.List)
  return list_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::PluginKey >*
PluginKeyList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.PluginKeyList.List)
  return &list_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::PluginKey >&
PluginKeyList::list() const {
  // @@protoc_insertion_point(field_list:micromsg.PluginKeyList.List)
  return list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Host::kOriginFieldNumber;
const int Host::kSubstituteFieldNumber;
const int Host::kPriorityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Host::Host()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.Host)
}
Host::Host(const Host& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  origin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_origin()) {
    origin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.origin_);
  }
  substitute_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_substitute()) {
    substitute_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.substitute_);
  }
  priority_ = from.priority_;
  // @@protoc_insertion_point(copy_constructor:micromsg.Host)
}

void Host::SharedCtor() {
  _cached_size_ = 0;
  origin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  substitute_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  priority_ = 0;
}

Host::~Host() {
  // @@protoc_insertion_point(destructor:micromsg.Host)
  SharedDtor();
}

void Host::SharedDtor() {
  origin_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  substitute_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Host::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Host::descriptor() {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Host& Host::default_instance() {
  protobuf_mmbase_2eproto::InitDefaults();
  return *internal_default_instance();
}

Host* Host::New(::google::protobuf::Arena* arena) const {
  Host* n = new Host;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Host::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.Host)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_origin()) {
      GOOGLE_DCHECK(!origin_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*origin_.UnsafeRawStringPointer())->clear();
    }
    if (has_substitute()) {
      GOOGLE_DCHECK(!substitute_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*substitute_.UnsafeRawStringPointer())->clear();
    }
  }
  priority_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Host::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.Host)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Origin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_origin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->origin().data(), this->origin().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.Host.Origin");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Substitute = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_substitute()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->substitute().data(), this->substitute().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.Host.Substitute");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 Priority = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_priority();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.Host)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.Host)
  return false;
#undef DO_
}

void Host::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.Host)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string Origin = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->origin().data(), this->origin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.Host.Origin");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->origin(), output);
  }

  // optional string Substitute = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->substitute().data(), this->substitute().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.Host.Substitute");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->substitute(), output);
  }

  // optional int32 Priority = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->priority(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.Host)
}

::google::protobuf::uint8* Host::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.Host)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string Origin = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->origin().data(), this->origin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.Host.Origin");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->origin(), target);
  }

  // optional string Substitute = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->substitute().data(), this->substitute().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.Host.Substitute");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->substitute(), target);
  }

  // optional int32 Priority = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->priority(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.Host)
  return target;
}

size_t Host::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.Host)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string Origin = 1;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->origin());
    }

    // optional string Substitute = 2;
    if (has_substitute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->substitute());
    }

    // optional int32 Priority = 3;
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->priority());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Host::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.Host)
  GOOGLE_DCHECK_NE(&from, this);
  const Host* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Host>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.Host)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.Host)
    MergeFrom(*source);
  }
}

void Host::MergeFrom(const Host& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.Host)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_origin();
      origin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.origin_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_substitute();
      substitute_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.substitute_);
    }
    if (cached_has_bits & 0x00000004u) {
      priority_ = from.priority_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Host::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.Host)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Host::CopyFrom(const Host& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.Host)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Host::IsInitialized() const {
  return true;
}

void Host::Swap(Host* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Host::InternalSwap(Host* other) {
  origin_.Swap(&other->origin_);
  substitute_.Swap(&other->substitute_);
  std::swap(priority_, other->priority_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Host::GetMetadata() const {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Host

// optional string Origin = 1;
bool Host::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Host::set_has_origin() {
  _has_bits_[0] |= 0x00000001u;
}
void Host::clear_has_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
void Host::clear_origin() {
  origin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_origin();
}
const ::std::string& Host::origin() const {
  // @@protoc_insertion_point(field_get:micromsg.Host.Origin)
  return origin_.GetNoArena();
}
void Host::set_origin(const ::std::string& value) {
  set_has_origin();
  origin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.Host.Origin)
}
#if LANG_CXX11
void Host::set_origin(::std::string&& value) {
  set_has_origin();
  origin_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.Host.Origin)
}
#endif
void Host::set_origin(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_origin();
  origin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.Host.Origin)
}
void Host::set_origin(const char* value, size_t size) {
  set_has_origin();
  origin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.Host.Origin)
}
::std::string* Host::mutable_origin() {
  set_has_origin();
  // @@protoc_insertion_point(field_mutable:micromsg.Host.Origin)
  return origin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Host::release_origin() {
  // @@protoc_insertion_point(field_release:micromsg.Host.Origin)
  clear_has_origin();
  return origin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Host::set_allocated_origin(::std::string* origin) {
  if (origin != NULL) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  origin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), origin);
  // @@protoc_insertion_point(field_set_allocated:micromsg.Host.Origin)
}

// optional string Substitute = 2;
bool Host::has_substitute() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Host::set_has_substitute() {
  _has_bits_[0] |= 0x00000002u;
}
void Host::clear_has_substitute() {
  _has_bits_[0] &= ~0x00000002u;
}
void Host::clear_substitute() {
  substitute_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_substitute();
}
const ::std::string& Host::substitute() const {
  // @@protoc_insertion_point(field_get:micromsg.Host.Substitute)
  return substitute_.GetNoArena();
}
void Host::set_substitute(const ::std::string& value) {
  set_has_substitute();
  substitute_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.Host.Substitute)
}
#if LANG_CXX11
void Host::set_substitute(::std::string&& value) {
  set_has_substitute();
  substitute_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.Host.Substitute)
}
#endif
void Host::set_substitute(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_substitute();
  substitute_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.Host.Substitute)
}
void Host::set_substitute(const char* value, size_t size) {
  set_has_substitute();
  substitute_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.Host.Substitute)
}
::std::string* Host::mutable_substitute() {
  set_has_substitute();
  // @@protoc_insertion_point(field_mutable:micromsg.Host.Substitute)
  return substitute_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Host::release_substitute() {
  // @@protoc_insertion_point(field_release:micromsg.Host.Substitute)
  clear_has_substitute();
  return substitute_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Host::set_allocated_substitute(::std::string* substitute) {
  if (substitute != NULL) {
    set_has_substitute();
  } else {
    clear_has_substitute();
  }
  substitute_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), substitute);
  // @@protoc_insertion_point(field_set_allocated:micromsg.Host.Substitute)
}

// optional int32 Priority = 3;
bool Host::has_priority() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Host::set_has_priority() {
  _has_bits_[0] |= 0x00000004u;
}
void Host::clear_has_priority() {
  _has_bits_[0] &= ~0x00000004u;
}
void Host::clear_priority() {
  priority_ = 0;
  clear_has_priority();
}
::google::protobuf::int32 Host::priority() const {
  // @@protoc_insertion_point(field_get:micromsg.Host.Priority)
  return priority_;
}
void Host::set_priority(::google::protobuf::int32 value) {
  set_has_priority();
  priority_ = value;
  // @@protoc_insertion_point(field_set:micromsg.Host.Priority)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HostList::kCountFieldNumber;
const int HostList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HostList::HostList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.HostList)
}
HostList::HostList(const HostList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:micromsg.HostList)
}

void HostList::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0u;
}

HostList::~HostList() {
  // @@protoc_insertion_point(destructor:micromsg.HostList)
  SharedDtor();
}

void HostList::SharedDtor() {
}

void HostList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HostList::descriptor() {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HostList& HostList::default_instance() {
  protobuf_mmbase_2eproto::InitDefaults();
  return *internal_default_instance();
}

HostList* HostList::New(::google::protobuf::Arena* arena) const {
  HostList* n = new HostList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HostList::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.HostList)
  list_.Clear();
  count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HostList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.HostList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.Host List = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.HostList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.HostList)
  return false;
#undef DO_
}

void HostList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.HostList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Count = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count(), output);
  }

  // repeated .micromsg.Host List = 2;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.HostList)
}

::google::protobuf::uint8* HostList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.HostList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->count(), target);
  }

  // repeated .micromsg.Host List = 2;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->list(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.HostList)
  return target;
}

size_t HostList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.HostList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 Count = 1;
  if (has_count()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }
  // repeated .micromsg.Host List = 2;
  {
    unsigned int count = this->list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HostList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.HostList)
  GOOGLE_DCHECK_NE(&from, this);
  const HostList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HostList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.HostList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.HostList)
    MergeFrom(*source);
  }
}

void HostList::MergeFrom(const HostList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.HostList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  if (from.has_count()) {
    set_count(from.count());
  }
}

void HostList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.HostList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HostList::CopyFrom(const HostList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.HostList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void HostList::Swap(HostList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HostList::InternalSwap(HostList* other) {
  list_.InternalSwap(&other->list_);
  std::swap(count_, other->count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HostList::GetMetadata() const {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HostList

// required uint32 Count = 1;
bool HostList::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HostList::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
void HostList::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
void HostList::clear_count() {
  count_ = 0u;
  clear_has_count();
}
::google::protobuf::uint32 HostList::count() const {
  // @@protoc_insertion_point(field_get:micromsg.HostList.Count)
  return count_;
}
void HostList::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.HostList.Count)
}

// repeated .micromsg.Host List = 2;
int HostList::list_size() const {
  return list_.size();
}
void HostList::clear_list() {
  list_.Clear();
}
const ::micromsg::Host& HostList::list(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.HostList.List)
  return list_.Get(index);
}
::micromsg::Host* HostList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.HostList.List)
  return list_.Mutable(index);
}
::micromsg::Host* HostList::add_list() {
  // @@protoc_insertion_point(field_add:micromsg.HostList.List)
  return list_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::Host >*
HostList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.HostList.List)
  return &list_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::Host >&
HostList::list() const {
  // @@protoc_insertion_point(field_list:micromsg.HostList.List)
  return list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PositionInfo::kLongitudeFieldNumber;
const int PositionInfo::kLatitudeFieldNumber;
const int PositionInfo::kPrecisionFieldNumber;
const int PositionInfo::kMacAddrFieldNumber;
const int PositionInfo::kCellIdFieldNumber;
const int PositionInfo::kGPSSourceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PositionInfo::PositionInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.PositionInfo)
}
PositionInfo::PositionInfo(const PositionInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  macaddr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_macaddr()) {
    macaddr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.macaddr_);
  }
  cellid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cellid()) {
    cellid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cellid_);
  }
  ::memcpy(&longitude_, &from.longitude_,
    reinterpret_cast<char*>(&gpssource_) -
    reinterpret_cast<char*>(&longitude_) + sizeof(gpssource_));
  // @@protoc_insertion_point(copy_constructor:micromsg.PositionInfo)
}

void PositionInfo::SharedCtor() {
  _cached_size_ = 0;
  macaddr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cellid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&longitude_, 0, reinterpret_cast<char*>(&gpssource_) -
    reinterpret_cast<char*>(&longitude_) + sizeof(gpssource_));
}

PositionInfo::~PositionInfo() {
  // @@protoc_insertion_point(destructor:micromsg.PositionInfo)
  SharedDtor();
}

void PositionInfo::SharedDtor() {
  macaddr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cellid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PositionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PositionInfo::descriptor() {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PositionInfo& PositionInfo::default_instance() {
  protobuf_mmbase_2eproto::InitDefaults();
  return *internal_default_instance();
}

PositionInfo* PositionInfo::New(::google::protobuf::Arena* arena) const {
  PositionInfo* n = new PositionInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PositionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.PositionInfo)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_macaddr()) {
      GOOGLE_DCHECK(!macaddr_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*macaddr_.UnsafeRawStringPointer())->clear();
    }
    if (has_cellid()) {
      GOOGLE_DCHECK(!cellid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*cellid_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 60u) {
    ::memset(&longitude_, 0, reinterpret_cast<char*>(&gpssource_) -
      reinterpret_cast<char*>(&longitude_) + sizeof(gpssource_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PositionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.PositionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float Longitude = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float Latitude = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 Precision = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_precision();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &precision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string MacAddr = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_macaddr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->macaddr().data(), this->macaddr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.PositionInfo.MacAddr");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string CellId = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cellid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cellid().data(), this->cellid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.PositionInfo.CellId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 GPSSource = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_gpssource();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gpssource_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.PositionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.PositionInfo)
  return false;
#undef DO_
}

void PositionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.PositionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float Longitude = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->longitude(), output);
  }

  // required float Latitude = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->latitude(), output);
  }

  // required int32 Precision = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->precision(), output);
  }

  // optional string MacAddr = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->macaddr().data(), this->macaddr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PositionInfo.MacAddr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->macaddr(), output);
  }

  // optional string CellId = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cellid().data(), this->cellid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PositionInfo.CellId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->cellid(), output);
  }

  // required int32 GPSSource = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->gpssource(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.PositionInfo)
}

::google::protobuf::uint8* PositionInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.PositionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float Longitude = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->longitude(), target);
  }

  // required float Latitude = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->latitude(), target);
  }

  // required int32 Precision = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->precision(), target);
  }

  // optional string MacAddr = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->macaddr().data(), this->macaddr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PositionInfo.MacAddr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->macaddr(), target);
  }

  // optional string CellId = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cellid().data(), this->cellid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.PositionInfo.CellId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->cellid(), target);
  }

  // required int32 GPSSource = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->gpssource(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.PositionInfo)
  return target;
}

size_t PositionInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.PositionInfo)
  size_t total_size = 0;

  if (has_longitude()) {
    // required float Longitude = 1;
    total_size += 1 + 4;
  }

  if (has_latitude()) {
    // required float Latitude = 2;
    total_size += 1 + 4;
  }

  if (has_precision()) {
    // required int32 Precision = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->precision());
  }

  if (has_gpssource()) {
    // required int32 GPSSource = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gpssource());
  }

  return total_size;
}
size_t PositionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.PositionInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003c) ^ 0x0000003c) == 0) {  // All required fields are present.
    // required float Longitude = 1;
    total_size += 1 + 4;

    // required float Latitude = 2;
    total_size += 1 + 4;

    // required int32 Precision = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->precision());

    // required int32 GPSSource = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gpssource());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string MacAddr = 4;
    if (has_macaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->macaddr());
    }

    // optional string CellId = 5;
    if (has_cellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cellid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PositionInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.PositionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PositionInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PositionInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.PositionInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.PositionInfo)
    MergeFrom(*source);
  }
}

void PositionInfo::MergeFrom(const PositionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.PositionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_macaddr();
      macaddr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.macaddr_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_cellid();
      cellid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cellid_);
    }
    if (cached_has_bits & 0x00000004u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000008u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000010u) {
      precision_ = from.precision_;
    }
    if (cached_has_bits & 0x00000020u) {
      gpssource_ = from.gpssource_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PositionInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.PositionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionInfo::CopyFrom(const PositionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.PositionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003c) != 0x0000003c) return false;
  return true;
}

void PositionInfo::Swap(PositionInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PositionInfo::InternalSwap(PositionInfo* other) {
  macaddr_.Swap(&other->macaddr_);
  cellid_.Swap(&other->cellid_);
  std::swap(longitude_, other->longitude_);
  std::swap(latitude_, other->latitude_);
  std::swap(precision_, other->precision_);
  std::swap(gpssource_, other->gpssource_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PositionInfo::GetMetadata() const {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PositionInfo

// required float Longitude = 1;
bool PositionInfo::has_longitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PositionInfo::set_has_longitude() {
  _has_bits_[0] |= 0x00000004u;
}
void PositionInfo::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000004u;
}
void PositionInfo::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
float PositionInfo::longitude() const {
  // @@protoc_insertion_point(field_get:micromsg.PositionInfo.Longitude)
  return longitude_;
}
void PositionInfo::set_longitude(float value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PositionInfo.Longitude)
}

// required float Latitude = 2;
bool PositionInfo::has_latitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PositionInfo::set_has_latitude() {
  _has_bits_[0] |= 0x00000008u;
}
void PositionInfo::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000008u;
}
void PositionInfo::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
float PositionInfo::latitude() const {
  // @@protoc_insertion_point(field_get:micromsg.PositionInfo.Latitude)
  return latitude_;
}
void PositionInfo::set_latitude(float value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PositionInfo.Latitude)
}

// required int32 Precision = 3;
bool PositionInfo::has_precision() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PositionInfo::set_has_precision() {
  _has_bits_[0] |= 0x00000010u;
}
void PositionInfo::clear_has_precision() {
  _has_bits_[0] &= ~0x00000010u;
}
void PositionInfo::clear_precision() {
  precision_ = 0;
  clear_has_precision();
}
::google::protobuf::int32 PositionInfo::precision() const {
  // @@protoc_insertion_point(field_get:micromsg.PositionInfo.Precision)
  return precision_;
}
void PositionInfo::set_precision(::google::protobuf::int32 value) {
  set_has_precision();
  precision_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PositionInfo.Precision)
}

// optional string MacAddr = 4;
bool PositionInfo::has_macaddr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PositionInfo::set_has_macaddr() {
  _has_bits_[0] |= 0x00000001u;
}
void PositionInfo::clear_has_macaddr() {
  _has_bits_[0] &= ~0x00000001u;
}
void PositionInfo::clear_macaddr() {
  macaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_macaddr();
}
const ::std::string& PositionInfo::macaddr() const {
  // @@protoc_insertion_point(field_get:micromsg.PositionInfo.MacAddr)
  return macaddr_.GetNoArena();
}
void PositionInfo::set_macaddr(const ::std::string& value) {
  set_has_macaddr();
  macaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.PositionInfo.MacAddr)
}
#if LANG_CXX11
void PositionInfo::set_macaddr(::std::string&& value) {
  set_has_macaddr();
  macaddr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.PositionInfo.MacAddr)
}
#endif
void PositionInfo::set_macaddr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_macaddr();
  macaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.PositionInfo.MacAddr)
}
void PositionInfo::set_macaddr(const char* value, size_t size) {
  set_has_macaddr();
  macaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.PositionInfo.MacAddr)
}
::std::string* PositionInfo::mutable_macaddr() {
  set_has_macaddr();
  // @@protoc_insertion_point(field_mutable:micromsg.PositionInfo.MacAddr)
  return macaddr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PositionInfo::release_macaddr() {
  // @@protoc_insertion_point(field_release:micromsg.PositionInfo.MacAddr)
  clear_has_macaddr();
  return macaddr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PositionInfo::set_allocated_macaddr(::std::string* macaddr) {
  if (macaddr != NULL) {
    set_has_macaddr();
  } else {
    clear_has_macaddr();
  }
  macaddr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), macaddr);
  // @@protoc_insertion_point(field_set_allocated:micromsg.PositionInfo.MacAddr)
}

// optional string CellId = 5;
bool PositionInfo::has_cellid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PositionInfo::set_has_cellid() {
  _has_bits_[0] |= 0x00000002u;
}
void PositionInfo::clear_has_cellid() {
  _has_bits_[0] &= ~0x00000002u;
}
void PositionInfo::clear_cellid() {
  cellid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cellid();
}
const ::std::string& PositionInfo::cellid() const {
  // @@protoc_insertion_point(field_get:micromsg.PositionInfo.CellId)
  return cellid_.GetNoArena();
}
void PositionInfo::set_cellid(const ::std::string& value) {
  set_has_cellid();
  cellid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.PositionInfo.CellId)
}
#if LANG_CXX11
void PositionInfo::set_cellid(::std::string&& value) {
  set_has_cellid();
  cellid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.PositionInfo.CellId)
}
#endif
void PositionInfo::set_cellid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cellid();
  cellid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.PositionInfo.CellId)
}
void PositionInfo::set_cellid(const char* value, size_t size) {
  set_has_cellid();
  cellid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.PositionInfo.CellId)
}
::std::string* PositionInfo::mutable_cellid() {
  set_has_cellid();
  // @@protoc_insertion_point(field_mutable:micromsg.PositionInfo.CellId)
  return cellid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PositionInfo::release_cellid() {
  // @@protoc_insertion_point(field_release:micromsg.PositionInfo.CellId)
  clear_has_cellid();
  return cellid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PositionInfo::set_allocated_cellid(::std::string* cellid) {
  if (cellid != NULL) {
    set_has_cellid();
  } else {
    clear_has_cellid();
  }
  cellid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cellid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.PositionInfo.CellId)
}

// required int32 GPSSource = 6;
bool PositionInfo::has_gpssource() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PositionInfo::set_has_gpssource() {
  _has_bits_[0] |= 0x00000020u;
}
void PositionInfo::clear_has_gpssource() {
  _has_bits_[0] &= ~0x00000020u;
}
void PositionInfo::clear_gpssource() {
  gpssource_ = 0;
  clear_has_gpssource();
}
::google::protobuf::int32 PositionInfo::gpssource() const {
  // @@protoc_insertion_point(field_get:micromsg.PositionInfo.GPSSource)
  return gpssource_;
}
void PositionInfo::set_gpssource(::google::protobuf::int32 value) {
  set_has_gpssource();
  gpssource_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PositionInfo.GPSSource)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnsUserInfo::kSnsFlagFieldNumber;
const int SnsUserInfo::kSnsBGImgIDFieldNumber;
const int SnsUserInfo::kSnsBGObjectIDFieldNumber;
const int SnsUserInfo::kSnsFlagExFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnsUserInfo::SnsUserInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SnsUserInfo)
}
SnsUserInfo::SnsUserInfo(const SnsUserInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  snsbgimgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_snsbgimgid()) {
    snsbgimgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.snsbgimgid_);
  }
  ::memcpy(&snsflag_, &from.snsflag_,
    reinterpret_cast<char*>(&snsbgobjectid_) -
    reinterpret_cast<char*>(&snsflag_) + sizeof(snsbgobjectid_));
  // @@protoc_insertion_point(copy_constructor:micromsg.SnsUserInfo)
}

void SnsUserInfo::SharedCtor() {
  _cached_size_ = 0;
  snsbgimgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&snsflag_, 0, reinterpret_cast<char*>(&snsbgobjectid_) -
    reinterpret_cast<char*>(&snsflag_) + sizeof(snsbgobjectid_));
}

SnsUserInfo::~SnsUserInfo() {
  // @@protoc_insertion_point(destructor:micromsg.SnsUserInfo)
  SharedDtor();
}

void SnsUserInfo::SharedDtor() {
  snsbgimgid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SnsUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnsUserInfo::descriptor() {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SnsUserInfo& SnsUserInfo::default_instance() {
  protobuf_mmbase_2eproto::InitDefaults();
  return *internal_default_instance();
}

SnsUserInfo* SnsUserInfo::New(::google::protobuf::Arena* arena) const {
  SnsUserInfo* n = new SnsUserInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnsUserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SnsUserInfo)
  if (has_snsbgimgid()) {
    GOOGLE_DCHECK(!snsbgimgid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*snsbgimgid_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&snsflag_, 0, reinterpret_cast<char*>(&snsbgobjectid_) -
      reinterpret_cast<char*>(&snsflag_) + sizeof(snsbgobjectid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SnsUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SnsUserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 SnsFlag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_snsflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &snsflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string SnsBGImgID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_snsbgimgid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->snsbgimgid().data(), this->snsbgimgid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SnsUserInfo.SnsBGImgID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 SnsBGObjectID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_snsbgobjectid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &snsbgobjectid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 SnsFlagEx = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_snsflagex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &snsflagex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SnsUserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SnsUserInfo)
  return false;
#undef DO_
}

void SnsUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SnsUserInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 SnsFlag = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->snsflag(), output);
  }

  // optional string SnsBGImgID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->snsbgimgid().data(), this->snsbgimgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsUserInfo.SnsBGImgID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->snsbgimgid(), output);
  }

  // optional uint64 SnsBGObjectID = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->snsbgobjectid(), output);
  }

  // optional uint32 SnsFlagEx = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->snsflagex(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SnsUserInfo)
}

::google::protobuf::uint8* SnsUserInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SnsUserInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 SnsFlag = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->snsflag(), target);
  }

  // optional string SnsBGImgID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->snsbgimgid().data(), this->snsbgimgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SnsUserInfo.SnsBGImgID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->snsbgimgid(), target);
  }

  // optional uint64 SnsBGObjectID = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->snsbgobjectid(), target);
  }

  // optional uint32 SnsFlagEx = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->snsflagex(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SnsUserInfo)
  return target;
}

size_t SnsUserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SnsUserInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 SnsFlag = 1;
  if (has_snsflag()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->snsflag());
  }
  // optional string SnsBGImgID = 2;
  if (has_snsbgimgid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->snsbgimgid());
  }

  if (_has_bits_[0 / 32] & 12u) {
    // optional uint32 SnsFlagEx = 4;
    if (has_snsflagex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->snsflagex());
    }

    // optional uint64 SnsBGObjectID = 3;
    if (has_snsbgobjectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->snsbgobjectid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnsUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SnsUserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SnsUserInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnsUserInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SnsUserInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SnsUserInfo)
    MergeFrom(*source);
  }
}

void SnsUserInfo::MergeFrom(const SnsUserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SnsUserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_snsbgimgid();
      snsbgimgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.snsbgimgid_);
    }
    if (cached_has_bits & 0x00000002u) {
      snsflag_ = from.snsflag_;
    }
    if (cached_has_bits & 0x00000004u) {
      snsflagex_ = from.snsflagex_;
    }
    if (cached_has_bits & 0x00000008u) {
      snsbgobjectid_ = from.snsbgobjectid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SnsUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SnsUserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnsUserInfo::CopyFrom(const SnsUserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SnsUserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnsUserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void SnsUserInfo::Swap(SnsUserInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnsUserInfo::InternalSwap(SnsUserInfo* other) {
  snsbgimgid_.Swap(&other->snsbgimgid_);
  std::swap(snsflag_, other->snsflag_);
  std::swap(snsflagex_, other->snsflagex_);
  std::swap(snsbgobjectid_, other->snsbgobjectid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnsUserInfo::GetMetadata() const {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnsUserInfo

// required uint32 SnsFlag = 1;
bool SnsUserInfo::has_snsflag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SnsUserInfo::set_has_snsflag() {
  _has_bits_[0] |= 0x00000002u;
}
void SnsUserInfo::clear_has_snsflag() {
  _has_bits_[0] &= ~0x00000002u;
}
void SnsUserInfo::clear_snsflag() {
  snsflag_ = 0u;
  clear_has_snsflag();
}
::google::protobuf::uint32 SnsUserInfo::snsflag() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsUserInfo.SnsFlag)
  return snsflag_;
}
void SnsUserInfo::set_snsflag(::google::protobuf::uint32 value) {
  set_has_snsflag();
  snsflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsUserInfo.SnsFlag)
}

// optional string SnsBGImgID = 2;
bool SnsUserInfo::has_snsbgimgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SnsUserInfo::set_has_snsbgimgid() {
  _has_bits_[0] |= 0x00000001u;
}
void SnsUserInfo::clear_has_snsbgimgid() {
  _has_bits_[0] &= ~0x00000001u;
}
void SnsUserInfo::clear_snsbgimgid() {
  snsbgimgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_snsbgimgid();
}
const ::std::string& SnsUserInfo::snsbgimgid() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsUserInfo.SnsBGImgID)
  return snsbgimgid_.GetNoArena();
}
void SnsUserInfo::set_snsbgimgid(const ::std::string& value) {
  set_has_snsbgimgid();
  snsbgimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SnsUserInfo.SnsBGImgID)
}
#if LANG_CXX11
void SnsUserInfo::set_snsbgimgid(::std::string&& value) {
  set_has_snsbgimgid();
  snsbgimgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SnsUserInfo.SnsBGImgID)
}
#endif
void SnsUserInfo::set_snsbgimgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_snsbgimgid();
  snsbgimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SnsUserInfo.SnsBGImgID)
}
void SnsUserInfo::set_snsbgimgid(const char* value, size_t size) {
  set_has_snsbgimgid();
  snsbgimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SnsUserInfo.SnsBGImgID)
}
::std::string* SnsUserInfo::mutable_snsbgimgid() {
  set_has_snsbgimgid();
  // @@protoc_insertion_point(field_mutable:micromsg.SnsUserInfo.SnsBGImgID)
  return snsbgimgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SnsUserInfo::release_snsbgimgid() {
  // @@protoc_insertion_point(field_release:micromsg.SnsUserInfo.SnsBGImgID)
  clear_has_snsbgimgid();
  return snsbgimgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SnsUserInfo::set_allocated_snsbgimgid(::std::string* snsbgimgid) {
  if (snsbgimgid != NULL) {
    set_has_snsbgimgid();
  } else {
    clear_has_snsbgimgid();
  }
  snsbgimgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), snsbgimgid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsUserInfo.SnsBGImgID)
}

// optional uint64 SnsBGObjectID = 3;
bool SnsUserInfo::has_snsbgobjectid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SnsUserInfo::set_has_snsbgobjectid() {
  _has_bits_[0] |= 0x00000008u;
}
void SnsUserInfo::clear_has_snsbgobjectid() {
  _has_bits_[0] &= ~0x00000008u;
}
void SnsUserInfo::clear_snsbgobjectid() {
  snsbgobjectid_ = GOOGLE_ULONGLONG(0);
  clear_has_snsbgobjectid();
}
::google::protobuf::uint64 SnsUserInfo::snsbgobjectid() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsUserInfo.SnsBGObjectID)
  return snsbgobjectid_;
}
void SnsUserInfo::set_snsbgobjectid(::google::protobuf::uint64 value) {
  set_has_snsbgobjectid();
  snsbgobjectid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsUserInfo.SnsBGObjectID)
}

// optional uint32 SnsFlagEx = 4;
bool SnsUserInfo::has_snsflagex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SnsUserInfo::set_has_snsflagex() {
  _has_bits_[0] |= 0x00000004u;
}
void SnsUserInfo::clear_has_snsflagex() {
  _has_bits_[0] &= ~0x00000004u;
}
void SnsUserInfo::clear_snsflagex() {
  snsflagex_ = 0u;
  clear_has_snsflagex();
}
::google::protobuf::uint32 SnsUserInfo::snsflagex() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsUserInfo.SnsFlagEx)
  return snsflagex_;
}
void SnsUserInfo::set_snsflagex(::google::protobuf::uint32 value) {
  set_has_snsflagex();
  snsflagex_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsUserInfo.SnsFlagEx)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CustomizedInfo::kBrandFlagFieldNumber;
const int CustomizedInfo::kExternalInfoFieldNumber;
const int CustomizedInfo::kBrandInfoFieldNumber;
const int CustomizedInfo::kBrandIconURLFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CustomizedInfo::CustomizedInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.CustomizedInfo)
}
CustomizedInfo::CustomizedInfo(const CustomizedInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  externalinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_externalinfo()) {
    externalinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.externalinfo_);
  }
  brandinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_brandinfo()) {
    brandinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.brandinfo_);
  }
  brandiconurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_brandiconurl()) {
    brandiconurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.brandiconurl_);
  }
  brandflag_ = from.brandflag_;
  // @@protoc_insertion_point(copy_constructor:micromsg.CustomizedInfo)
}

void CustomizedInfo::SharedCtor() {
  _cached_size_ = 0;
  externalinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  brandinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  brandiconurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  brandflag_ = 0u;
}

CustomizedInfo::~CustomizedInfo() {
  // @@protoc_insertion_point(destructor:micromsg.CustomizedInfo)
  SharedDtor();
}

void CustomizedInfo::SharedDtor() {
  externalinfo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  brandinfo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  brandiconurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CustomizedInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CustomizedInfo::descriptor() {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CustomizedInfo& CustomizedInfo::default_instance() {
  protobuf_mmbase_2eproto::InitDefaults();
  return *internal_default_instance();
}

CustomizedInfo* CustomizedInfo::New(::google::protobuf::Arena* arena) const {
  CustomizedInfo* n = new CustomizedInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CustomizedInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.CustomizedInfo)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_externalinfo()) {
      GOOGLE_DCHECK(!externalinfo_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*externalinfo_.UnsafeRawStringPointer())->clear();
    }
    if (has_brandinfo()) {
      GOOGLE_DCHECK(!brandinfo_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*brandinfo_.UnsafeRawStringPointer())->clear();
    }
    if (has_brandiconurl()) {
      GOOGLE_DCHECK(!brandiconurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*brandiconurl_.UnsafeRawStringPointer())->clear();
    }
  }
  brandflag_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CustomizedInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.CustomizedInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 BrandFlag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_brandflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &brandflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ExternalInfo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_externalinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->externalinfo().data(), this->externalinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.CustomizedInfo.ExternalInfo");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string BrandInfo = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brandinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->brandinfo().data(), this->brandinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.CustomizedInfo.BrandInfo");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string BrandIconURL = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brandiconurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->brandiconurl().data(), this->brandiconurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.CustomizedInfo.BrandIconURL");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.CustomizedInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.CustomizedInfo)
  return false;
#undef DO_
}

void CustomizedInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.CustomizedInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 BrandFlag = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->brandflag(), output);
  }

  // optional string ExternalInfo = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->externalinfo().data(), this->externalinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CustomizedInfo.ExternalInfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->externalinfo(), output);
  }

  // optional string BrandInfo = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->brandinfo().data(), this->brandinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CustomizedInfo.BrandInfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->brandinfo(), output);
  }

  // optional string BrandIconURL = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->brandiconurl().data(), this->brandiconurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CustomizedInfo.BrandIconURL");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->brandiconurl(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.CustomizedInfo)
}

::google::protobuf::uint8* CustomizedInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.CustomizedInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 BrandFlag = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->brandflag(), target);
  }

  // optional string ExternalInfo = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->externalinfo().data(), this->externalinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CustomizedInfo.ExternalInfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->externalinfo(), target);
  }

  // optional string BrandInfo = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->brandinfo().data(), this->brandinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CustomizedInfo.BrandInfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->brandinfo(), target);
  }

  // optional string BrandIconURL = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->brandiconurl().data(), this->brandiconurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CustomizedInfo.BrandIconURL");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->brandiconurl(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.CustomizedInfo)
  return target;
}

size_t CustomizedInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.CustomizedInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 BrandFlag = 1;
  if (has_brandflag()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->brandflag());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string ExternalInfo = 2;
    if (has_externalinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->externalinfo());
    }

    // optional string BrandInfo = 3;
    if (has_brandinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->brandinfo());
    }

    // optional string BrandIconURL = 4;
    if (has_brandiconurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->brandiconurl());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CustomizedInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.CustomizedInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CustomizedInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CustomizedInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.CustomizedInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.CustomizedInfo)
    MergeFrom(*source);
  }
}

void CustomizedInfo::MergeFrom(const CustomizedInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.CustomizedInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_externalinfo();
      externalinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.externalinfo_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_brandinfo();
      brandinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.brandinfo_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_brandiconurl();
      brandiconurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.brandiconurl_);
    }
    if (cached_has_bits & 0x00000008u) {
      brandflag_ = from.brandflag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CustomizedInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.CustomizedInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomizedInfo::CopyFrom(const CustomizedInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.CustomizedInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomizedInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  return true;
}

void CustomizedInfo::Swap(CustomizedInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CustomizedInfo::InternalSwap(CustomizedInfo* other) {
  externalinfo_.Swap(&other->externalinfo_);
  brandinfo_.Swap(&other->brandinfo_);
  brandiconurl_.Swap(&other->brandiconurl_);
  std::swap(brandflag_, other->brandflag_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CustomizedInfo::GetMetadata() const {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CustomizedInfo

// required uint32 BrandFlag = 1;
bool CustomizedInfo::has_brandflag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CustomizedInfo::set_has_brandflag() {
  _has_bits_[0] |= 0x00000008u;
}
void CustomizedInfo::clear_has_brandflag() {
  _has_bits_[0] &= ~0x00000008u;
}
void CustomizedInfo::clear_brandflag() {
  brandflag_ = 0u;
  clear_has_brandflag();
}
::google::protobuf::uint32 CustomizedInfo::brandflag() const {
  // @@protoc_insertion_point(field_get:micromsg.CustomizedInfo.BrandFlag)
  return brandflag_;
}
void CustomizedInfo::set_brandflag(::google::protobuf::uint32 value) {
  set_has_brandflag();
  brandflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CustomizedInfo.BrandFlag)
}

// optional string ExternalInfo = 2;
bool CustomizedInfo::has_externalinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CustomizedInfo::set_has_externalinfo() {
  _has_bits_[0] |= 0x00000001u;
}
void CustomizedInfo::clear_has_externalinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
void CustomizedInfo::clear_externalinfo() {
  externalinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_externalinfo();
}
const ::std::string& CustomizedInfo::externalinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.CustomizedInfo.ExternalInfo)
  return externalinfo_.GetNoArena();
}
void CustomizedInfo::set_externalinfo(const ::std::string& value) {
  set_has_externalinfo();
  externalinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CustomizedInfo.ExternalInfo)
}
#if LANG_CXX11
void CustomizedInfo::set_externalinfo(::std::string&& value) {
  set_has_externalinfo();
  externalinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CustomizedInfo.ExternalInfo)
}
#endif
void CustomizedInfo::set_externalinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_externalinfo();
  externalinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CustomizedInfo.ExternalInfo)
}
void CustomizedInfo::set_externalinfo(const char* value, size_t size) {
  set_has_externalinfo();
  externalinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CustomizedInfo.ExternalInfo)
}
::std::string* CustomizedInfo::mutable_externalinfo() {
  set_has_externalinfo();
  // @@protoc_insertion_point(field_mutable:micromsg.CustomizedInfo.ExternalInfo)
  return externalinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CustomizedInfo::release_externalinfo() {
  // @@protoc_insertion_point(field_release:micromsg.CustomizedInfo.ExternalInfo)
  clear_has_externalinfo();
  return externalinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CustomizedInfo::set_allocated_externalinfo(::std::string* externalinfo) {
  if (externalinfo != NULL) {
    set_has_externalinfo();
  } else {
    clear_has_externalinfo();
  }
  externalinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), externalinfo);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CustomizedInfo.ExternalInfo)
}

// optional string BrandInfo = 3;
bool CustomizedInfo::has_brandinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CustomizedInfo::set_has_brandinfo() {
  _has_bits_[0] |= 0x00000002u;
}
void CustomizedInfo::clear_has_brandinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
void CustomizedInfo::clear_brandinfo() {
  brandinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_brandinfo();
}
const ::std::string& CustomizedInfo::brandinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.CustomizedInfo.BrandInfo)
  return brandinfo_.GetNoArena();
}
void CustomizedInfo::set_brandinfo(const ::std::string& value) {
  set_has_brandinfo();
  brandinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CustomizedInfo.BrandInfo)
}
#if LANG_CXX11
void CustomizedInfo::set_brandinfo(::std::string&& value) {
  set_has_brandinfo();
  brandinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CustomizedInfo.BrandInfo)
}
#endif
void CustomizedInfo::set_brandinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_brandinfo();
  brandinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CustomizedInfo.BrandInfo)
}
void CustomizedInfo::set_brandinfo(const char* value, size_t size) {
  set_has_brandinfo();
  brandinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CustomizedInfo.BrandInfo)
}
::std::string* CustomizedInfo::mutable_brandinfo() {
  set_has_brandinfo();
  // @@protoc_insertion_point(field_mutable:micromsg.CustomizedInfo.BrandInfo)
  return brandinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CustomizedInfo::release_brandinfo() {
  // @@protoc_insertion_point(field_release:micromsg.CustomizedInfo.BrandInfo)
  clear_has_brandinfo();
  return brandinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CustomizedInfo::set_allocated_brandinfo(::std::string* brandinfo) {
  if (brandinfo != NULL) {
    set_has_brandinfo();
  } else {
    clear_has_brandinfo();
  }
  brandinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brandinfo);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CustomizedInfo.BrandInfo)
}

// optional string BrandIconURL = 4;
bool CustomizedInfo::has_brandiconurl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CustomizedInfo::set_has_brandiconurl() {
  _has_bits_[0] |= 0x00000004u;
}
void CustomizedInfo::clear_has_brandiconurl() {
  _has_bits_[0] &= ~0x00000004u;
}
void CustomizedInfo::clear_brandiconurl() {
  brandiconurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_brandiconurl();
}
const ::std::string& CustomizedInfo::brandiconurl() const {
  // @@protoc_insertion_point(field_get:micromsg.CustomizedInfo.BrandIconURL)
  return brandiconurl_.GetNoArena();
}
void CustomizedInfo::set_brandiconurl(const ::std::string& value) {
  set_has_brandiconurl();
  brandiconurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CustomizedInfo.BrandIconURL)
}
#if LANG_CXX11
void CustomizedInfo::set_brandiconurl(::std::string&& value) {
  set_has_brandiconurl();
  brandiconurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CustomizedInfo.BrandIconURL)
}
#endif
void CustomizedInfo::set_brandiconurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_brandiconurl();
  brandiconurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CustomizedInfo.BrandIconURL)
}
void CustomizedInfo::set_brandiconurl(const char* value, size_t size) {
  set_has_brandiconurl();
  brandiconurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CustomizedInfo.BrandIconURL)
}
::std::string* CustomizedInfo::mutable_brandiconurl() {
  set_has_brandiconurl();
  // @@protoc_insertion_point(field_mutable:micromsg.CustomizedInfo.BrandIconURL)
  return brandiconurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CustomizedInfo::release_brandiconurl() {
  // @@protoc_insertion_point(field_release:micromsg.CustomizedInfo.BrandIconURL)
  clear_has_brandiconurl();
  return brandiconurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CustomizedInfo::set_allocated_brandiconurl(::std::string* brandiconurl) {
  if (brandiconurl != NULL) {
    set_has_brandiconurl();
  } else {
    clear_has_brandiconurl();
  }
  brandiconurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brandiconurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CustomizedInfo.BrandIconURL)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CmdItem::kCmdIdFieldNumber;
const int CmdItem::kCmdBufFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CmdItem::CmdItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.CmdItem)
}
CmdItem::CmdItem(const CmdItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_cmdbuf()) {
    cmdbuf_ = new ::micromsg::SKBuiltinBuffer_t(*from.cmdbuf_);
  } else {
    cmdbuf_ = NULL;
  }
  cmdid_ = from.cmdid_;
  // @@protoc_insertion_point(copy_constructor:micromsg.CmdItem)
}

void CmdItem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&cmdbuf_, 0, reinterpret_cast<char*>(&cmdid_) -
    reinterpret_cast<char*>(&cmdbuf_) + sizeof(cmdid_));
}

CmdItem::~CmdItem() {
  // @@protoc_insertion_point(destructor:micromsg.CmdItem)
  SharedDtor();
}

void CmdItem::SharedDtor() {
  if (this != internal_default_instance()) {
    delete cmdbuf_;
  }
}

void CmdItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdItem::descriptor() {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CmdItem& CmdItem::default_instance() {
  protobuf_mmbase_2eproto::InitDefaults();
  return *internal_default_instance();
}

CmdItem* CmdItem::New(::google::protobuf::Arena* arena) const {
  CmdItem* n = new CmdItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CmdItem::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.CmdItem)
  if (has_cmdbuf()) {
    GOOGLE_DCHECK(cmdbuf_ != NULL);
    cmdbuf_->::micromsg::SKBuiltinBuffer_t::Clear();
  }
  cmdid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CmdItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.CmdItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 CmdId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_cmdid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmdid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t CmdBuf = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmdbuf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.CmdItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.CmdItem)
  return false;
#undef DO_
}

void CmdItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.CmdItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 CmdId = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmdid(), output);
  }

  // required .micromsg.SKBuiltinBuffer_t CmdBuf = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->cmdbuf_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.CmdItem)
}

::google::protobuf::uint8* CmdItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.CmdItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 CmdId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmdid(), target);
  }

  // required .micromsg.SKBuiltinBuffer_t CmdBuf = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->cmdbuf_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.CmdItem)
  return target;
}

size_t CmdItem::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.CmdItem)
  size_t total_size = 0;

  if (has_cmdbuf()) {
    // required .micromsg.SKBuiltinBuffer_t CmdBuf = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cmdbuf_);
  }

  if (has_cmdid()) {
    // required int32 CmdId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cmdid());
  }

  return total_size;
}
size_t CmdItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.CmdItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.SKBuiltinBuffer_t CmdBuf = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cmdbuf_);

    // required int32 CmdId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cmdid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.CmdItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CmdItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CmdItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.CmdItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.CmdItem)
    MergeFrom(*source);
  }
}

void CmdItem::MergeFrom(const CmdItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.CmdItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_cmdbuf()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.cmdbuf());
    }
    if (cached_has_bits & 0x00000002u) {
      cmdid_ = from.cmdid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CmdItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.CmdItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdItem::CopyFrom(const CmdItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.CmdItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_cmdbuf()) {
    if (!this->cmdbuf_->IsInitialized()) return false;
  }
  return true;
}

void CmdItem::Swap(CmdItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdItem::InternalSwap(CmdItem* other) {
  std::swap(cmdbuf_, other->cmdbuf_);
  std::swap(cmdid_, other->cmdid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CmdItem::GetMetadata() const {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CmdItem

// required int32 CmdId = 1;
bool CmdItem::has_cmdid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CmdItem::set_has_cmdid() {
  _has_bits_[0] |= 0x00000002u;
}
void CmdItem::clear_has_cmdid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CmdItem::clear_cmdid() {
  cmdid_ = 0;
  clear_has_cmdid();
}
::google::protobuf::int32 CmdItem::cmdid() const {
  // @@protoc_insertion_point(field_get:micromsg.CmdItem.CmdId)
  return cmdid_;
}
void CmdItem::set_cmdid(::google::protobuf::int32 value) {
  set_has_cmdid();
  cmdid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CmdItem.CmdId)
}

// required .micromsg.SKBuiltinBuffer_t CmdBuf = 2;
bool CmdItem::has_cmdbuf() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CmdItem::set_has_cmdbuf() {
  _has_bits_[0] |= 0x00000001u;
}
void CmdItem::clear_has_cmdbuf() {
  _has_bits_[0] &= ~0x00000001u;
}
void CmdItem::clear_cmdbuf() {
  if (cmdbuf_ != NULL) cmdbuf_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_cmdbuf();
}
const ::micromsg::SKBuiltinBuffer_t& CmdItem::cmdbuf() const {
  // @@protoc_insertion_point(field_get:micromsg.CmdItem.CmdBuf)
  return cmdbuf_ != NULL ? *cmdbuf_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* CmdItem::mutable_cmdbuf() {
  set_has_cmdbuf();
  if (cmdbuf_ == NULL) {
    cmdbuf_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CmdItem.CmdBuf)
  return cmdbuf_;
}
::micromsg::SKBuiltinBuffer_t* CmdItem::release_cmdbuf() {
  // @@protoc_insertion_point(field_release:micromsg.CmdItem.CmdBuf)
  clear_has_cmdbuf();
  ::micromsg::SKBuiltinBuffer_t* temp = cmdbuf_;
  cmdbuf_ = NULL;
  return temp;
}
void CmdItem::set_allocated_cmdbuf(::micromsg::SKBuiltinBuffer_t* cmdbuf) {
  delete cmdbuf_;
  cmdbuf_ = cmdbuf;
  if (cmdbuf) {
    set_has_cmdbuf();
  } else {
    clear_has_cmdbuf();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CmdItem.CmdBuf)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CmdList::kCountFieldNumber;
const int CmdList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CmdList::CmdList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.CmdList)
}
CmdList::CmdList(const CmdList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:micromsg.CmdList)
}

void CmdList::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0u;
}

CmdList::~CmdList() {
  // @@protoc_insertion_point(destructor:micromsg.CmdList)
  SharedDtor();
}

void CmdList::SharedDtor() {
}

void CmdList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdList::descriptor() {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CmdList& CmdList::default_instance() {
  protobuf_mmbase_2eproto::InitDefaults();
  return *internal_default_instance();
}

CmdList* CmdList::New(::google::protobuf::Arena* arena) const {
  CmdList* n = new CmdList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CmdList::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.CmdList)
  list_.Clear();
  count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CmdList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.CmdList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.CmdItem List = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.CmdList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.CmdList)
  return false;
#undef DO_
}

void CmdList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.CmdList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Count = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count(), output);
  }

  // repeated .micromsg.CmdItem List = 2;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.CmdList)
}

::google::protobuf::uint8* CmdList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.CmdList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->count(), target);
  }

  // repeated .micromsg.CmdItem List = 2;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->list(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.CmdList)
  return target;
}

size_t CmdList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.CmdList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 Count = 1;
  if (has_count()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }
  // repeated .micromsg.CmdItem List = 2;
  {
    unsigned int count = this->list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.CmdList)
  GOOGLE_DCHECK_NE(&from, this);
  const CmdList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CmdList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.CmdList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.CmdList)
    MergeFrom(*source);
  }
}

void CmdList::MergeFrom(const CmdList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.CmdList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  if (from.has_count()) {
    set_count(from.count());
  }
}

void CmdList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.CmdList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdList::CopyFrom(const CmdList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.CmdList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void CmdList::Swap(CmdList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CmdList::InternalSwap(CmdList* other) {
  list_.InternalSwap(&other->list_);
  std::swap(count_, other->count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CmdList::GetMetadata() const {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CmdList

// required uint32 Count = 1;
bool CmdList::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CmdList::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
void CmdList::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
void CmdList::clear_count() {
  count_ = 0u;
  clear_has_count();
}
::google::protobuf::uint32 CmdList::count() const {
  // @@protoc_insertion_point(field_get:micromsg.CmdList.Count)
  return count_;
}
void CmdList::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CmdList.Count)
}

// repeated .micromsg.CmdItem List = 2;
int CmdList::list_size() const {
  return list_.size();
}
void CmdList::clear_list() {
  list_.Clear();
}
const ::micromsg::CmdItem& CmdList::list(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.CmdList.List)
  return list_.Get(index);
}
::micromsg::CmdItem* CmdList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.CmdList.List)
  return list_.Mutable(index);
}
::micromsg::CmdItem* CmdList::add_list() {
  // @@protoc_insertion_point(field_add:micromsg.CmdList.List)
  return list_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::CmdItem >*
CmdList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.CmdList.List)
  return &list_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::CmdItem >&
CmdList::list() const {
  // @@protoc_insertion_point(field_list:micromsg.CmdList.List)
  return list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShakeSyncRequest::kBaseRequestFieldNumber;
const int ShakeSyncRequest::kLongitudeFieldNumber;
const int ShakeSyncRequest::kLatitudeFieldNumber;
const int ShakeSyncRequest::kPrecisionFieldNumber;
const int ShakeSyncRequest::kMacAddrFieldNumber;
const int ShakeSyncRequest::kCellIdFieldNumber;
const int ShakeSyncRequest::kImgIdFieldNumber;
const int ShakeSyncRequest::kTimesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShakeSyncRequest::ShakeSyncRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.ShakeSyncRequest)
}
ShakeSyncRequest::ShakeSyncRequest(const ShakeSyncRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  macaddr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_macaddr()) {
    macaddr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.macaddr_);
  }
  cellid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cellid()) {
    cellid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cellid_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  ::memcpy(&longitude_, &from.longitude_,
    reinterpret_cast<char*>(&times_) -
    reinterpret_cast<char*>(&longitude_) + sizeof(times_));
  // @@protoc_insertion_point(copy_constructor:micromsg.ShakeSyncRequest)
}

void ShakeSyncRequest::SharedCtor() {
  _cached_size_ = 0;
  macaddr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cellid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&times_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(times_));
}

ShakeSyncRequest::~ShakeSyncRequest() {
  // @@protoc_insertion_point(destructor:micromsg.ShakeSyncRequest)
  SharedDtor();
}

void ShakeSyncRequest::SharedDtor() {
  macaddr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cellid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void ShakeSyncRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShakeSyncRequest::descriptor() {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ShakeSyncRequest& ShakeSyncRequest::default_instance() {
  protobuf_mmbase_2eproto::InitDefaults();
  return *internal_default_instance();
}

ShakeSyncRequest* ShakeSyncRequest::New(::google::protobuf::Arena* arena) const {
  ShakeSyncRequest* n = new ShakeSyncRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShakeSyncRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.ShakeSyncRequest)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_macaddr()) {
      GOOGLE_DCHECK(!macaddr_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*macaddr_.UnsafeRawStringPointer())->clear();
    }
    if (has_cellid()) {
      GOOGLE_DCHECK(!cellid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*cellid_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 248u) {
    ::memset(&longitude_, 0, reinterpret_cast<char*>(&times_) -
      reinterpret_cast<char*>(&longitude_) + sizeof(times_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ShakeSyncRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.ShakeSyncRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float Longitude = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float Latitude = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 Precision = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_precision();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &precision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string MacAddr = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_macaddr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->macaddr().data(), this->macaddr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ShakeSyncRequest.MacAddr");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string CellId = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cellid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cellid().data(), this->cellid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ShakeSyncRequest.CellId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ImgId = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_imgid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &imgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Times = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_times();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &times_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.ShakeSyncRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.ShakeSyncRequest)
  return false;
#undef DO_
}

void ShakeSyncRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.ShakeSyncRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required float Longitude = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->longitude(), output);
  }

  // required float Latitude = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->latitude(), output);
  }

  // required int32 Precision = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->precision(), output);
  }

  // optional string MacAddr = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->macaddr().data(), this->macaddr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ShakeSyncRequest.MacAddr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->macaddr(), output);
  }

  // optional string CellId = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cellid().data(), this->cellid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ShakeSyncRequest.CellId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->cellid(), output);
  }

  // required uint32 ImgId = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->imgid(), output);
  }

  // required uint32 Times = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->times(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.ShakeSyncRequest)
}

::google::protobuf::uint8* ShakeSyncRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.ShakeSyncRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required float Longitude = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->longitude(), target);
  }

  // required float Latitude = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->latitude(), target);
  }

  // required int32 Precision = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->precision(), target);
  }

  // optional string MacAddr = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->macaddr().data(), this->macaddr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ShakeSyncRequest.MacAddr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->macaddr(), target);
  }

  // optional string CellId = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cellid().data(), this->cellid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ShakeSyncRequest.CellId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->cellid(), target);
  }

  // required uint32 ImgId = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->imgid(), target);
  }

  // required uint32 Times = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->times(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.ShakeSyncRequest)
  return target;
}

size_t ShakeSyncRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.ShakeSyncRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_longitude()) {
    // required float Longitude = 2;
    total_size += 1 + 4;
  }

  if (has_latitude()) {
    // required float Latitude = 3;
    total_size += 1 + 4;
  }

  if (has_precision()) {
    // required int32 Precision = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->precision());
  }

  if (has_imgid()) {
    // required uint32 ImgId = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->imgid());
  }

  if (has_times()) {
    // required uint32 Times = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->times());
  }

  return total_size;
}
size_t ShakeSyncRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.ShakeSyncRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x000000fc) ^ 0x000000fc) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required float Longitude = 2;
    total_size += 1 + 4;

    // required float Latitude = 3;
    total_size += 1 + 4;

    // required int32 Precision = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->precision());

    // required uint32 ImgId = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->imgid());

    // required uint32 Times = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->times());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string MacAddr = 5;
    if (has_macaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->macaddr());
    }

    // optional string CellId = 6;
    if (has_cellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cellid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShakeSyncRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.ShakeSyncRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ShakeSyncRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShakeSyncRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.ShakeSyncRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.ShakeSyncRequest)
    MergeFrom(*source);
  }
}

void ShakeSyncRequest::MergeFrom(const ShakeSyncRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.ShakeSyncRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_macaddr();
      macaddr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.macaddr_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_cellid();
      cellid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cellid_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000008u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000010u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000020u) {
      precision_ = from.precision_;
    }
    if (cached_has_bits & 0x00000040u) {
      imgid_ = from.imgid_;
    }
    if (cached_has_bits & 0x00000080u) {
      times_ = from.times_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ShakeSyncRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.ShakeSyncRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShakeSyncRequest::CopyFrom(const ShakeSyncRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.ShakeSyncRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShakeSyncRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000fc) != 0x000000fc) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void ShakeSyncRequest::Swap(ShakeSyncRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShakeSyncRequest::InternalSwap(ShakeSyncRequest* other) {
  macaddr_.Swap(&other->macaddr_);
  cellid_.Swap(&other->cellid_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(longitude_, other->longitude_);
  std::swap(latitude_, other->latitude_);
  std::swap(precision_, other->precision_);
  std::swap(imgid_, other->imgid_);
  std::swap(times_, other->times_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShakeSyncRequest::GetMetadata() const {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ShakeSyncRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool ShakeSyncRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ShakeSyncRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000004u;
}
void ShakeSyncRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000004u;
}
void ShakeSyncRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& ShakeSyncRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.ShakeSyncRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* ShakeSyncRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ShakeSyncRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* ShakeSyncRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.ShakeSyncRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void ShakeSyncRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ShakeSyncRequest.BaseRequest)
}

// required float Longitude = 2;
bool ShakeSyncRequest::has_longitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ShakeSyncRequest::set_has_longitude() {
  _has_bits_[0] |= 0x00000008u;
}
void ShakeSyncRequest::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000008u;
}
void ShakeSyncRequest::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
float ShakeSyncRequest::longitude() const {
  // @@protoc_insertion_point(field_get:micromsg.ShakeSyncRequest.Longitude)
  return longitude_;
}
void ShakeSyncRequest::set_longitude(float value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ShakeSyncRequest.Longitude)
}

// required float Latitude = 3;
bool ShakeSyncRequest::has_latitude() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ShakeSyncRequest::set_has_latitude() {
  _has_bits_[0] |= 0x00000010u;
}
void ShakeSyncRequest::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000010u;
}
void ShakeSyncRequest::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
float ShakeSyncRequest::latitude() const {
  // @@protoc_insertion_point(field_get:micromsg.ShakeSyncRequest.Latitude)
  return latitude_;
}
void ShakeSyncRequest::set_latitude(float value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ShakeSyncRequest.Latitude)
}

// required int32 Precision = 4;
bool ShakeSyncRequest::has_precision() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ShakeSyncRequest::set_has_precision() {
  _has_bits_[0] |= 0x00000020u;
}
void ShakeSyncRequest::clear_has_precision() {
  _has_bits_[0] &= ~0x00000020u;
}
void ShakeSyncRequest::clear_precision() {
  precision_ = 0;
  clear_has_precision();
}
::google::protobuf::int32 ShakeSyncRequest::precision() const {
  // @@protoc_insertion_point(field_get:micromsg.ShakeSyncRequest.Precision)
  return precision_;
}
void ShakeSyncRequest::set_precision(::google::protobuf::int32 value) {
  set_has_precision();
  precision_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ShakeSyncRequest.Precision)
}

// optional string MacAddr = 5;
bool ShakeSyncRequest::has_macaddr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ShakeSyncRequest::set_has_macaddr() {
  _has_bits_[0] |= 0x00000001u;
}
void ShakeSyncRequest::clear_has_macaddr() {
  _has_bits_[0] &= ~0x00000001u;
}
void ShakeSyncRequest::clear_macaddr() {
  macaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_macaddr();
}
const ::std::string& ShakeSyncRequest::macaddr() const {
  // @@protoc_insertion_point(field_get:micromsg.ShakeSyncRequest.MacAddr)
  return macaddr_.GetNoArena();
}
void ShakeSyncRequest::set_macaddr(const ::std::string& value) {
  set_has_macaddr();
  macaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ShakeSyncRequest.MacAddr)
}
#if LANG_CXX11
void ShakeSyncRequest::set_macaddr(::std::string&& value) {
  set_has_macaddr();
  macaddr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ShakeSyncRequest.MacAddr)
}
#endif
void ShakeSyncRequest::set_macaddr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_macaddr();
  macaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ShakeSyncRequest.MacAddr)
}
void ShakeSyncRequest::set_macaddr(const char* value, size_t size) {
  set_has_macaddr();
  macaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ShakeSyncRequest.MacAddr)
}
::std::string* ShakeSyncRequest::mutable_macaddr() {
  set_has_macaddr();
  // @@protoc_insertion_point(field_mutable:micromsg.ShakeSyncRequest.MacAddr)
  return macaddr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ShakeSyncRequest::release_macaddr() {
  // @@protoc_insertion_point(field_release:micromsg.ShakeSyncRequest.MacAddr)
  clear_has_macaddr();
  return macaddr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ShakeSyncRequest::set_allocated_macaddr(::std::string* macaddr) {
  if (macaddr != NULL) {
    set_has_macaddr();
  } else {
    clear_has_macaddr();
  }
  macaddr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), macaddr);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ShakeSyncRequest.MacAddr)
}

// optional string CellId = 6;
bool ShakeSyncRequest::has_cellid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ShakeSyncRequest::set_has_cellid() {
  _has_bits_[0] |= 0x00000002u;
}
void ShakeSyncRequest::clear_has_cellid() {
  _has_bits_[0] &= ~0x00000002u;
}
void ShakeSyncRequest::clear_cellid() {
  cellid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cellid();
}
const ::std::string& ShakeSyncRequest::cellid() const {
  // @@protoc_insertion_point(field_get:micromsg.ShakeSyncRequest.CellId)
  return cellid_.GetNoArena();
}
void ShakeSyncRequest::set_cellid(const ::std::string& value) {
  set_has_cellid();
  cellid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ShakeSyncRequest.CellId)
}
#if LANG_CXX11
void ShakeSyncRequest::set_cellid(::std::string&& value) {
  set_has_cellid();
  cellid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ShakeSyncRequest.CellId)
}
#endif
void ShakeSyncRequest::set_cellid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cellid();
  cellid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ShakeSyncRequest.CellId)
}
void ShakeSyncRequest::set_cellid(const char* value, size_t size) {
  set_has_cellid();
  cellid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ShakeSyncRequest.CellId)
}
::std::string* ShakeSyncRequest::mutable_cellid() {
  set_has_cellid();
  // @@protoc_insertion_point(field_mutable:micromsg.ShakeSyncRequest.CellId)
  return cellid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ShakeSyncRequest::release_cellid() {
  // @@protoc_insertion_point(field_release:micromsg.ShakeSyncRequest.CellId)
  clear_has_cellid();
  return cellid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ShakeSyncRequest::set_allocated_cellid(::std::string* cellid) {
  if (cellid != NULL) {
    set_has_cellid();
  } else {
    clear_has_cellid();
  }
  cellid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cellid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ShakeSyncRequest.CellId)
}

// required uint32 ImgId = 7;
bool ShakeSyncRequest::has_imgid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ShakeSyncRequest::set_has_imgid() {
  _has_bits_[0] |= 0x00000040u;
}
void ShakeSyncRequest::clear_has_imgid() {
  _has_bits_[0] &= ~0x00000040u;
}
void ShakeSyncRequest::clear_imgid() {
  imgid_ = 0u;
  clear_has_imgid();
}
::google::protobuf::uint32 ShakeSyncRequest::imgid() const {
  // @@protoc_insertion_point(field_get:micromsg.ShakeSyncRequest.ImgId)
  return imgid_;
}
void ShakeSyncRequest::set_imgid(::google::protobuf::uint32 value) {
  set_has_imgid();
  imgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ShakeSyncRequest.ImgId)
}

// required uint32 Times = 8;
bool ShakeSyncRequest::has_times() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ShakeSyncRequest::set_has_times() {
  _has_bits_[0] |= 0x00000080u;
}
void ShakeSyncRequest::clear_has_times() {
  _has_bits_[0] &= ~0x00000080u;
}
void ShakeSyncRequest::clear_times() {
  times_ = 0u;
  clear_has_times();
}
::google::protobuf::uint32 ShakeSyncRequest::times() const {
  // @@protoc_insertion_point(field_get:micromsg.ShakeSyncRequest.Times)
  return times_;
}
void ShakeSyncRequest::set_times(::google::protobuf::uint32 value) {
  set_has_times();
  times_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ShakeSyncRequest.Times)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShakeSyncResponse::kBaseResponseFieldNumber;
const int ShakeSyncResponse::kBufferFieldNumber;
const int ShakeSyncResponse::kRetFieldNumber;
const int ShakeSyncResponse::kImgIdFieldNumber;
const int ShakeSyncResponse::kImgTotoalLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShakeSyncResponse::ShakeSyncResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.ShakeSyncResponse)
}
ShakeSyncResponse::ShakeSyncResponse(const ShakeSyncResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  if (from.has_buffer()) {
    buffer_ = new ::micromsg::SKBuiltinBuffer_t(*from.buffer_);
  } else {
    buffer_ = NULL;
  }
  ::memcpy(&ret_, &from.ret_,
    reinterpret_cast<char*>(&imgtotoallen_) -
    reinterpret_cast<char*>(&ret_) + sizeof(imgtotoallen_));
  // @@protoc_insertion_point(copy_constructor:micromsg.ShakeSyncResponse)
}

void ShakeSyncResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&imgtotoallen_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(imgtotoallen_));
}

ShakeSyncResponse::~ShakeSyncResponse() {
  // @@protoc_insertion_point(destructor:micromsg.ShakeSyncResponse)
  SharedDtor();
}

void ShakeSyncResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
  if (this != internal_default_instance()) {
    delete buffer_;
  }
}

void ShakeSyncResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShakeSyncResponse::descriptor() {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ShakeSyncResponse& ShakeSyncResponse::default_instance() {
  protobuf_mmbase_2eproto::InitDefaults();
  return *internal_default_instance();
}

ShakeSyncResponse* ShakeSyncResponse::New(::google::protobuf::Arena* arena) const {
  ShakeSyncResponse* n = new ShakeSyncResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShakeSyncResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.ShakeSyncResponse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
    if (has_buffer()) {
      GOOGLE_DCHECK(buffer_ != NULL);
      buffer_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 28u) {
    ::memset(&ret_, 0, reinterpret_cast<char*>(&imgtotoallen_) -
      reinterpret_cast<char*>(&ret_) + sizeof(imgtotoallen_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ShakeSyncResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.ShakeSyncResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t Buffer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Ret = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_ret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ImgId = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_imgid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &imgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ImgTotoalLen = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_imgtotoallen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &imgtotoallen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.ShakeSyncResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.ShakeSyncResponse)
  return false;
#undef DO_
}

void ShakeSyncResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.ShakeSyncResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required .micromsg.SKBuiltinBuffer_t Buffer = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->buffer_, output);
  }

  // required uint32 Ret = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ret(), output);
  }

  // required uint32 ImgId = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->imgid(), output);
  }

  // required uint32 ImgTotoalLen = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->imgtotoallen(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.ShakeSyncResponse)
}

::google::protobuf::uint8* ShakeSyncResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.ShakeSyncResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required .micromsg.SKBuiltinBuffer_t Buffer = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->buffer_, deterministic, target);
  }

  // required uint32 Ret = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ret(), target);
  }

  // required uint32 ImgId = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->imgid(), target);
  }

  // required uint32 ImgTotoalLen = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->imgtotoallen(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.ShakeSyncResponse)
  return target;
}

size_t ShakeSyncResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.ShakeSyncResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_buffer()) {
    // required .micromsg.SKBuiltinBuffer_t Buffer = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->buffer_);
  }

  if (has_ret()) {
    // required uint32 Ret = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ret());
  }

  if (has_imgid()) {
    // required uint32 ImgId = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->imgid());
  }

  if (has_imgtotoallen()) {
    // required uint32 ImgTotoalLen = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->imgtotoallen());
  }

  return total_size;
}
size_t ShakeSyncResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.ShakeSyncResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required .micromsg.SKBuiltinBuffer_t Buffer = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->buffer_);

    // required uint32 Ret = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ret());

    // required uint32 ImgId = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->imgid());

    // required uint32 ImgTotoalLen = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->imgtotoallen());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShakeSyncResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.ShakeSyncResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ShakeSyncResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShakeSyncResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.ShakeSyncResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.ShakeSyncResponse)
    MergeFrom(*source);
  }
}

void ShakeSyncResponse::MergeFrom(const ShakeSyncResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.ShakeSyncResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_buffer()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.buffer());
    }
    if (cached_has_bits & 0x00000004u) {
      ret_ = from.ret_;
    }
    if (cached_has_bits & 0x00000008u) {
      imgid_ = from.imgid_;
    }
    if (cached_has_bits & 0x00000010u) {
      imgtotoallen_ = from.imgtotoallen_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ShakeSyncResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.ShakeSyncResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShakeSyncResponse::CopyFrom(const ShakeSyncResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.ShakeSyncResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShakeSyncResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  if (has_buffer()) {
    if (!this->buffer_->IsInitialized()) return false;
  }
  return true;
}

void ShakeSyncResponse::Swap(ShakeSyncResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShakeSyncResponse::InternalSwap(ShakeSyncResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(buffer_, other->buffer_);
  std::swap(ret_, other->ret_);
  std::swap(imgid_, other->imgid_);
  std::swap(imgtotoallen_, other->imgtotoallen_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShakeSyncResponse::GetMetadata() const {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ShakeSyncResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool ShakeSyncResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ShakeSyncResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void ShakeSyncResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void ShakeSyncResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& ShakeSyncResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.ShakeSyncResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* ShakeSyncResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ShakeSyncResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* ShakeSyncResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.ShakeSyncResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void ShakeSyncResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ShakeSyncResponse.BaseResponse)
}

// required .micromsg.SKBuiltinBuffer_t Buffer = 2;
bool ShakeSyncResponse::has_buffer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ShakeSyncResponse::set_has_buffer() {
  _has_bits_[0] |= 0x00000002u;
}
void ShakeSyncResponse::clear_has_buffer() {
  _has_bits_[0] &= ~0x00000002u;
}
void ShakeSyncResponse::clear_buffer() {
  if (buffer_ != NULL) buffer_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_buffer();
}
const ::micromsg::SKBuiltinBuffer_t& ShakeSyncResponse::buffer() const {
  // @@protoc_insertion_point(field_get:micromsg.ShakeSyncResponse.Buffer)
  return buffer_ != NULL ? *buffer_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* ShakeSyncResponse::mutable_buffer() {
  set_has_buffer();
  if (buffer_ == NULL) {
    buffer_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ShakeSyncResponse.Buffer)
  return buffer_;
}
::micromsg::SKBuiltinBuffer_t* ShakeSyncResponse::release_buffer() {
  // @@protoc_insertion_point(field_release:micromsg.ShakeSyncResponse.Buffer)
  clear_has_buffer();
  ::micromsg::SKBuiltinBuffer_t* temp = buffer_;
  buffer_ = NULL;
  return temp;
}
void ShakeSyncResponse::set_allocated_buffer(::micromsg::SKBuiltinBuffer_t* buffer) {
  delete buffer_;
  buffer_ = buffer;
  if (buffer) {
    set_has_buffer();
  } else {
    clear_has_buffer();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ShakeSyncResponse.Buffer)
}

// required uint32 Ret = 3;
bool ShakeSyncResponse::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ShakeSyncResponse::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
void ShakeSyncResponse::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
void ShakeSyncResponse::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
::google::protobuf::uint32 ShakeSyncResponse::ret() const {
  // @@protoc_insertion_point(field_get:micromsg.ShakeSyncResponse.Ret)
  return ret_;
}
void ShakeSyncResponse::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ShakeSyncResponse.Ret)
}

// required uint32 ImgId = 4;
bool ShakeSyncResponse::has_imgid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ShakeSyncResponse::set_has_imgid() {
  _has_bits_[0] |= 0x00000008u;
}
void ShakeSyncResponse::clear_has_imgid() {
  _has_bits_[0] &= ~0x00000008u;
}
void ShakeSyncResponse::clear_imgid() {
  imgid_ = 0u;
  clear_has_imgid();
}
::google::protobuf::uint32 ShakeSyncResponse::imgid() const {
  // @@protoc_insertion_point(field_get:micromsg.ShakeSyncResponse.ImgId)
  return imgid_;
}
void ShakeSyncResponse::set_imgid(::google::protobuf::uint32 value) {
  set_has_imgid();
  imgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ShakeSyncResponse.ImgId)
}

// required uint32 ImgTotoalLen = 5;
bool ShakeSyncResponse::has_imgtotoallen() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ShakeSyncResponse::set_has_imgtotoallen() {
  _has_bits_[0] |= 0x00000010u;
}
void ShakeSyncResponse::clear_has_imgtotoallen() {
  _has_bits_[0] &= ~0x00000010u;
}
void ShakeSyncResponse::clear_imgtotoallen() {
  imgtotoallen_ = 0u;
  clear_has_imgtotoallen();
}
::google::protobuf::uint32 ShakeSyncResponse::imgtotoallen() const {
  // @@protoc_insertion_point(field_get:micromsg.ShakeSyncResponse.ImgTotoalLen)
  return imgtotoallen_;
}
void ShakeSyncResponse::set_imgtotoallen(::google::protobuf::uint32 value) {
  set_has_imgtotoallen();
  imgtotoallen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ShakeSyncResponse.ImgTotoalLen)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BindEmailRequest::kBaseRequestFieldNumber;
const int BindEmailRequest::kOpCodeFieldNumber;
const int BindEmailRequest::kEmailFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BindEmailRequest::BindEmailRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BindEmailRequest)
}
BindEmailRequest::BindEmailRequest(const BindEmailRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_email()) {
    email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  opcode_ = from.opcode_;
  // @@protoc_insertion_point(copy_constructor:micromsg.BindEmailRequest)
}

void BindEmailRequest::SharedCtor() {
  _cached_size_ = 0;
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&opcode_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(opcode_));
}

BindEmailRequest::~BindEmailRequest() {
  // @@protoc_insertion_point(destructor:micromsg.BindEmailRequest)
  SharedDtor();
}

void BindEmailRequest::SharedDtor() {
  email_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void BindEmailRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BindEmailRequest::descriptor() {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BindEmailRequest& BindEmailRequest::default_instance() {
  protobuf_mmbase_2eproto::InitDefaults();
  return *internal_default_instance();
}

BindEmailRequest* BindEmailRequest::New(::google::protobuf::Arena* arena) const {
  BindEmailRequest* n = new BindEmailRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BindEmailRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BindEmailRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_email()) {
      GOOGLE_DCHECK(!email_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*email_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  opcode_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BindEmailRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BindEmailRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 OpCode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_opcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Email = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BindEmailRequest.Email");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BindEmailRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BindEmailRequest)
  return false;
#undef DO_
}

void BindEmailRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BindEmailRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required uint32 OpCode = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->opcode(), output);
  }

  // optional string Email = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindEmailRequest.Email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->email(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BindEmailRequest)
}

::google::protobuf::uint8* BindEmailRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BindEmailRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required uint32 OpCode = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->opcode(), target);
  }

  // optional string Email = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BindEmailRequest.Email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->email(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BindEmailRequest)
  return target;
}

size_t BindEmailRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.BindEmailRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_opcode()) {
    // required uint32 OpCode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->opcode());
  }

  return total_size;
}
size_t BindEmailRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BindEmailRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 OpCode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->opcode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string Email = 3;
  if (has_email()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->email());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BindEmailRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BindEmailRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BindEmailRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BindEmailRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BindEmailRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BindEmailRequest)
    MergeFrom(*source);
  }
}

void BindEmailRequest::MergeFrom(const BindEmailRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BindEmailRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_email();
      email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000004u) {
      opcode_ = from.opcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BindEmailRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BindEmailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BindEmailRequest::CopyFrom(const BindEmailRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BindEmailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BindEmailRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void BindEmailRequest::Swap(BindEmailRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BindEmailRequest::InternalSwap(BindEmailRequest* other) {
  email_.Swap(&other->email_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(opcode_, other->opcode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BindEmailRequest::GetMetadata() const {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BindEmailRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool BindEmailRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BindEmailRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void BindEmailRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void BindEmailRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& BindEmailRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.BindEmailRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* BindEmailRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BindEmailRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* BindEmailRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.BindEmailRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void BindEmailRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindEmailRequest.BaseRequest)
}

// required uint32 OpCode = 2;
bool BindEmailRequest::has_opcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BindEmailRequest::set_has_opcode() {
  _has_bits_[0] |= 0x00000004u;
}
void BindEmailRequest::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000004u;
}
void BindEmailRequest::clear_opcode() {
  opcode_ = 0u;
  clear_has_opcode();
}
::google::protobuf::uint32 BindEmailRequest::opcode() const {
  // @@protoc_insertion_point(field_get:micromsg.BindEmailRequest.OpCode)
  return opcode_;
}
void BindEmailRequest::set_opcode(::google::protobuf::uint32 value) {
  set_has_opcode();
  opcode_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BindEmailRequest.OpCode)
}

// optional string Email = 3;
bool BindEmailRequest::has_email() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BindEmailRequest::set_has_email() {
  _has_bits_[0] |= 0x00000001u;
}
void BindEmailRequest::clear_has_email() {
  _has_bits_[0] &= ~0x00000001u;
}
void BindEmailRequest::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_email();
}
const ::std::string& BindEmailRequest::email() const {
  // @@protoc_insertion_point(field_get:micromsg.BindEmailRequest.Email)
  return email_.GetNoArena();
}
void BindEmailRequest::set_email(const ::std::string& value) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BindEmailRequest.Email)
}
#if LANG_CXX11
void BindEmailRequest::set_email(::std::string&& value) {
  set_has_email();
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BindEmailRequest.Email)
}
#endif
void BindEmailRequest::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BindEmailRequest.Email)
}
void BindEmailRequest::set_email(const char* value, size_t size) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BindEmailRequest.Email)
}
::std::string* BindEmailRequest::mutable_email() {
  set_has_email();
  // @@protoc_insertion_point(field_mutable:micromsg.BindEmailRequest.Email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BindEmailRequest::release_email() {
  // @@protoc_insertion_point(field_release:micromsg.BindEmailRequest.Email)
  clear_has_email();
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BindEmailRequest::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    set_has_email();
  } else {
    clear_has_email();
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindEmailRequest.Email)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BindEmailResponse::kBaseResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BindEmailResponse::BindEmailResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BindEmailResponse)
}
BindEmailResponse::BindEmailResponse(const BindEmailResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.BindEmailResponse)
}

void BindEmailResponse::SharedCtor() {
  _cached_size_ = 0;
  baseresponse_ = NULL;
}

BindEmailResponse::~BindEmailResponse() {
  // @@protoc_insertion_point(destructor:micromsg.BindEmailResponse)
  SharedDtor();
}

void BindEmailResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void BindEmailResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BindEmailResponse::descriptor() {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BindEmailResponse& BindEmailResponse::default_instance() {
  protobuf_mmbase_2eproto::InitDefaults();
  return *internal_default_instance();
}

BindEmailResponse* BindEmailResponse::New(::google::protobuf::Arena* arena) const {
  BindEmailResponse* n = new BindEmailResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BindEmailResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BindEmailResponse)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BindEmailResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BindEmailResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BindEmailResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BindEmailResponse)
  return false;
#undef DO_
}

void BindEmailResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BindEmailResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BindEmailResponse)
}

::google::protobuf::uint8* BindEmailResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BindEmailResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BindEmailResponse)
  return target;
}

size_t BindEmailResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BindEmailResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BindEmailResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BindEmailResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BindEmailResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BindEmailResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BindEmailResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BindEmailResponse)
    MergeFrom(*source);
  }
}

void BindEmailResponse::MergeFrom(const BindEmailResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BindEmailResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_baseresponse()) {
    mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
  }
}

void BindEmailResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BindEmailResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BindEmailResponse::CopyFrom(const BindEmailResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BindEmailResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BindEmailResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void BindEmailResponse::Swap(BindEmailResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BindEmailResponse::InternalSwap(BindEmailResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BindEmailResponse::GetMetadata() const {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BindEmailResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool BindEmailResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BindEmailResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void BindEmailResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void BindEmailResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& BindEmailResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.BindEmailResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* BindEmailResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BindEmailResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* BindEmailResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.BindEmailResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void BindEmailResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindEmailResponse.BaseResponse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetLocationRequest::kBaseRequestFieldNumber;
const int GetLocationRequest::kLongitudeFieldNumber;
const int GetLocationRequest::kLatitudeFieldNumber;
const int GetLocationRequest::kPrecisionFieldNumber;
const int GetLocationRequest::kMacAddrFieldNumber;
const int GetLocationRequest::kCellIdFieldNumber;
const int GetLocationRequest::kGPSSourceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetLocationRequest::GetLocationRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetLocationRequest)
}
GetLocationRequest::GetLocationRequest(const GetLocationRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  macaddr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_macaddr()) {
    macaddr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.macaddr_);
  }
  cellid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cellid()) {
    cellid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cellid_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  ::memcpy(&longitude_, &from.longitude_,
    reinterpret_cast<char*>(&gpssource_) -
    reinterpret_cast<char*>(&longitude_) + sizeof(gpssource_));
  // @@protoc_insertion_point(copy_constructor:micromsg.GetLocationRequest)
}

void GetLocationRequest::SharedCtor() {
  _cached_size_ = 0;
  macaddr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cellid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&gpssource_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(gpssource_));
}

GetLocationRequest::~GetLocationRequest() {
  // @@protoc_insertion_point(destructor:micromsg.GetLocationRequest)
  SharedDtor();
}

void GetLocationRequest::SharedDtor() {
  macaddr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cellid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void GetLocationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetLocationRequest::descriptor() {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetLocationRequest& GetLocationRequest::default_instance() {
  protobuf_mmbase_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetLocationRequest* GetLocationRequest::New(::google::protobuf::Arena* arena) const {
  GetLocationRequest* n = new GetLocationRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetLocationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetLocationRequest)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_macaddr()) {
      GOOGLE_DCHECK(!macaddr_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*macaddr_.UnsafeRawStringPointer())->clear();
    }
    if (has_cellid()) {
      GOOGLE_DCHECK(!cellid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*cellid_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 120u) {
    ::memset(&longitude_, 0, reinterpret_cast<char*>(&gpssource_) -
      reinterpret_cast<char*>(&longitude_) + sizeof(gpssource_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetLocationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetLocationRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 Longitude = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 Latitude = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 Precision = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_precision();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &precision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string MacAddr = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_macaddr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->macaddr().data(), this->macaddr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetLocationRequest.MacAddr");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string CellId = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cellid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cellid().data(), this->cellid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetLocationRequest.CellId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 GPSSource = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_gpssource();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gpssource_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetLocationRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetLocationRequest)
  return false;
#undef DO_
}

void GetLocationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetLocationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required int32 Longitude = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->longitude(), output);
  }

  // required int32 Latitude = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->latitude(), output);
  }

  // required int32 Precision = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->precision(), output);
  }

  // optional string MacAddr = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->macaddr().data(), this->macaddr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetLocationRequest.MacAddr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->macaddr(), output);
  }

  // optional string CellId = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cellid().data(), this->cellid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetLocationRequest.CellId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->cellid(), output);
  }

  // optional int32 GPSSource = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->gpssource(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetLocationRequest)
}

::google::protobuf::uint8* GetLocationRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetLocationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required int32 Longitude = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->longitude(), target);
  }

  // required int32 Latitude = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->latitude(), target);
  }

  // required int32 Precision = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->precision(), target);
  }

  // optional string MacAddr = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->macaddr().data(), this->macaddr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetLocationRequest.MacAddr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->macaddr(), target);
  }

  // optional string CellId = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cellid().data(), this->cellid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetLocationRequest.CellId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->cellid(), target);
  }

  // optional int32 GPSSource = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->gpssource(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetLocationRequest)
  return target;
}

size_t GetLocationRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GetLocationRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_longitude()) {
    // required int32 Longitude = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->longitude());
  }

  if (has_latitude()) {
    // required int32 Latitude = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->latitude());
  }

  if (has_precision()) {
    // required int32 Precision = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->precision());
  }

  return total_size;
}
size_t GetLocationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetLocationRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003c) ^ 0x0000003c) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required int32 Longitude = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->longitude());

    // required int32 Latitude = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->latitude());

    // required int32 Precision = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->precision());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string MacAddr = 6;
    if (has_macaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->macaddr());
    }

    // optional string CellId = 7;
    if (has_cellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cellid());
    }

  }
  // optional int32 GPSSource = 8;
  if (has_gpssource()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gpssource());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLocationRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetLocationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLocationRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetLocationRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetLocationRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetLocationRequest)
    MergeFrom(*source);
  }
}

void GetLocationRequest::MergeFrom(const GetLocationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetLocationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_macaddr();
      macaddr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.macaddr_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_cellid();
      cellid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cellid_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000008u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000010u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000020u) {
      precision_ = from.precision_;
    }
    if (cached_has_bits & 0x00000040u) {
      gpssource_ = from.gpssource_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetLocationRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetLocationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLocationRequest::CopyFrom(const GetLocationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetLocationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLocationRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003c) != 0x0000003c) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void GetLocationRequest::Swap(GetLocationRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetLocationRequest::InternalSwap(GetLocationRequest* other) {
  macaddr_.Swap(&other->macaddr_);
  cellid_.Swap(&other->cellid_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(longitude_, other->longitude_);
  std::swap(latitude_, other->latitude_);
  std::swap(precision_, other->precision_);
  std::swap(gpssource_, other->gpssource_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetLocationRequest::GetMetadata() const {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetLocationRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool GetLocationRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetLocationRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000004u;
}
void GetLocationRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetLocationRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& GetLocationRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetLocationRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* GetLocationRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetLocationRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* GetLocationRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetLocationRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void GetLocationRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetLocationRequest.BaseRequest)
}

// required int32 Longitude = 3;
bool GetLocationRequest::has_longitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GetLocationRequest::set_has_longitude() {
  _has_bits_[0] |= 0x00000008u;
}
void GetLocationRequest::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000008u;
}
void GetLocationRequest::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
::google::protobuf::int32 GetLocationRequest::longitude() const {
  // @@protoc_insertion_point(field_get:micromsg.GetLocationRequest.Longitude)
  return longitude_;
}
void GetLocationRequest::set_longitude(::google::protobuf::int32 value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetLocationRequest.Longitude)
}

// required int32 Latitude = 4;
bool GetLocationRequest::has_latitude() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GetLocationRequest::set_has_latitude() {
  _has_bits_[0] |= 0x00000010u;
}
void GetLocationRequest::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000010u;
}
void GetLocationRequest::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
::google::protobuf::int32 GetLocationRequest::latitude() const {
  // @@protoc_insertion_point(field_get:micromsg.GetLocationRequest.Latitude)
  return latitude_;
}
void GetLocationRequest::set_latitude(::google::protobuf::int32 value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetLocationRequest.Latitude)
}

// required int32 Precision = 5;
bool GetLocationRequest::has_precision() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void GetLocationRequest::set_has_precision() {
  _has_bits_[0] |= 0x00000020u;
}
void GetLocationRequest::clear_has_precision() {
  _has_bits_[0] &= ~0x00000020u;
}
void GetLocationRequest::clear_precision() {
  precision_ = 0;
  clear_has_precision();
}
::google::protobuf::int32 GetLocationRequest::precision() const {
  // @@protoc_insertion_point(field_get:micromsg.GetLocationRequest.Precision)
  return precision_;
}
void GetLocationRequest::set_precision(::google::protobuf::int32 value) {
  set_has_precision();
  precision_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetLocationRequest.Precision)
}

// optional string MacAddr = 6;
bool GetLocationRequest::has_macaddr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetLocationRequest::set_has_macaddr() {
  _has_bits_[0] |= 0x00000001u;
}
void GetLocationRequest::clear_has_macaddr() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetLocationRequest::clear_macaddr() {
  macaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_macaddr();
}
const ::std::string& GetLocationRequest::macaddr() const {
  // @@protoc_insertion_point(field_get:micromsg.GetLocationRequest.MacAddr)
  return macaddr_.GetNoArena();
}
void GetLocationRequest::set_macaddr(const ::std::string& value) {
  set_has_macaddr();
  macaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetLocationRequest.MacAddr)
}
#if LANG_CXX11
void GetLocationRequest::set_macaddr(::std::string&& value) {
  set_has_macaddr();
  macaddr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetLocationRequest.MacAddr)
}
#endif
void GetLocationRequest::set_macaddr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_macaddr();
  macaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetLocationRequest.MacAddr)
}
void GetLocationRequest::set_macaddr(const char* value, size_t size) {
  set_has_macaddr();
  macaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetLocationRequest.MacAddr)
}
::std::string* GetLocationRequest::mutable_macaddr() {
  set_has_macaddr();
  // @@protoc_insertion_point(field_mutable:micromsg.GetLocationRequest.MacAddr)
  return macaddr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetLocationRequest::release_macaddr() {
  // @@protoc_insertion_point(field_release:micromsg.GetLocationRequest.MacAddr)
  clear_has_macaddr();
  return macaddr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetLocationRequest::set_allocated_macaddr(::std::string* macaddr) {
  if (macaddr != NULL) {
    set_has_macaddr();
  } else {
    clear_has_macaddr();
  }
  macaddr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), macaddr);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetLocationRequest.MacAddr)
}

// optional string CellId = 7;
bool GetLocationRequest::has_cellid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetLocationRequest::set_has_cellid() {
  _has_bits_[0] |= 0x00000002u;
}
void GetLocationRequest::clear_has_cellid() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetLocationRequest::clear_cellid() {
  cellid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cellid();
}
const ::std::string& GetLocationRequest::cellid() const {
  // @@protoc_insertion_point(field_get:micromsg.GetLocationRequest.CellId)
  return cellid_.GetNoArena();
}
void GetLocationRequest::set_cellid(const ::std::string& value) {
  set_has_cellid();
  cellid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetLocationRequest.CellId)
}
#if LANG_CXX11
void GetLocationRequest::set_cellid(::std::string&& value) {
  set_has_cellid();
  cellid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetLocationRequest.CellId)
}
#endif
void GetLocationRequest::set_cellid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cellid();
  cellid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetLocationRequest.CellId)
}
void GetLocationRequest::set_cellid(const char* value, size_t size) {
  set_has_cellid();
  cellid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetLocationRequest.CellId)
}
::std::string* GetLocationRequest::mutable_cellid() {
  set_has_cellid();
  // @@protoc_insertion_point(field_mutable:micromsg.GetLocationRequest.CellId)
  return cellid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetLocationRequest::release_cellid() {
  // @@protoc_insertion_point(field_release:micromsg.GetLocationRequest.CellId)
  clear_has_cellid();
  return cellid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetLocationRequest::set_allocated_cellid(::std::string* cellid) {
  if (cellid != NULL) {
    set_has_cellid();
  } else {
    clear_has_cellid();
  }
  cellid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cellid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetLocationRequest.CellId)
}

// optional int32 GPSSource = 8;
bool GetLocationRequest::has_gpssource() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void GetLocationRequest::set_has_gpssource() {
  _has_bits_[0] |= 0x00000040u;
}
void GetLocationRequest::clear_has_gpssource() {
  _has_bits_[0] &= ~0x00000040u;
}
void GetLocationRequest::clear_gpssource() {
  gpssource_ = 0;
  clear_has_gpssource();
}
::google::protobuf::int32 GetLocationRequest::gpssource() const {
  // @@protoc_insertion_point(field_get:micromsg.GetLocationRequest.GPSSource)
  return gpssource_;
}
void GetLocationRequest::set_gpssource(::google::protobuf::int32 value) {
  set_has_gpssource();
  gpssource_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetLocationRequest.GPSSource)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetLocationResponse::kBaseResponseFieldNumber;
const int GetLocationResponse::kLongitudeFieldNumber;
const int GetLocationResponse::kLatitudeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetLocationResponse::GetLocationResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetLocationResponse)
}
GetLocationResponse::GetLocationResponse(const GetLocationResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  ::memcpy(&longitude_, &from.longitude_,
    reinterpret_cast<char*>(&latitude_) -
    reinterpret_cast<char*>(&longitude_) + sizeof(latitude_));
  // @@protoc_insertion_point(copy_constructor:micromsg.GetLocationResponse)
}

void GetLocationResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&latitude_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(latitude_));
}

GetLocationResponse::~GetLocationResponse() {
  // @@protoc_insertion_point(destructor:micromsg.GetLocationResponse)
  SharedDtor();
}

void GetLocationResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void GetLocationResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetLocationResponse::descriptor() {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetLocationResponse& GetLocationResponse::default_instance() {
  protobuf_mmbase_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetLocationResponse* GetLocationResponse::New(::google::protobuf::Arena* arena) const {
  GetLocationResponse* n = new GetLocationResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetLocationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetLocationResponse)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&longitude_, 0, reinterpret_cast<char*>(&latitude_) -
      reinterpret_cast<char*>(&longitude_) + sizeof(latitude_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetLocationResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetLocationResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 Longitude = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 Latitude = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetLocationResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetLocationResponse)
  return false;
#undef DO_
}

void GetLocationResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetLocationResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required int32 Longitude = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->longitude(), output);
  }

  // required int32 Latitude = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->latitude(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetLocationResponse)
}

::google::protobuf::uint8* GetLocationResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetLocationResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required int32 Longitude = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->longitude(), target);
  }

  // required int32 Latitude = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->latitude(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetLocationResponse)
  return target;
}

size_t GetLocationResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GetLocationResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_longitude()) {
    // required int32 Longitude = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->longitude());
  }

  if (has_latitude()) {
    // required int32 Latitude = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->latitude());
  }

  return total_size;
}
size_t GetLocationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetLocationResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required int32 Longitude = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->longitude());

    // required int32 Latitude = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->latitude());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLocationResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetLocationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLocationResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetLocationResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetLocationResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetLocationResponse)
    MergeFrom(*source);
  }
}

void GetLocationResponse::MergeFrom(const GetLocationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetLocationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000004u) {
      latitude_ = from.latitude_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetLocationResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetLocationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLocationResponse::CopyFrom(const GetLocationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetLocationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLocationResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void GetLocationResponse::Swap(GetLocationResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetLocationResponse::InternalSwap(GetLocationResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(longitude_, other->longitude_);
  std::swap(latitude_, other->latitude_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetLocationResponse::GetMetadata() const {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetLocationResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool GetLocationResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetLocationResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void GetLocationResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetLocationResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& GetLocationResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetLocationResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* GetLocationResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetLocationResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* GetLocationResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetLocationResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void GetLocationResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetLocationResponse.BaseResponse)
}

// required int32 Longitude = 2;
bool GetLocationResponse::has_longitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetLocationResponse::set_has_longitude() {
  _has_bits_[0] |= 0x00000002u;
}
void GetLocationResponse::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetLocationResponse::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
::google::protobuf::int32 GetLocationResponse::longitude() const {
  // @@protoc_insertion_point(field_get:micromsg.GetLocationResponse.Longitude)
  return longitude_;
}
void GetLocationResponse::set_longitude(::google::protobuf::int32 value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetLocationResponse.Longitude)
}

// required int32 Latitude = 3;
bool GetLocationResponse::has_latitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetLocationResponse::set_has_latitude() {
  _has_bits_[0] |= 0x00000004u;
}
void GetLocationResponse::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetLocationResponse::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
::google::protobuf::int32 GetLocationResponse::latitude() const {
  // @@protoc_insertion_point(field_get:micromsg.GetLocationResponse.Latitude)
  return latitude_;
}
void GetLocationResponse::set_latitude(::google::protobuf::int32 value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetLocationResponse.Latitude)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoomInfo::kUserNameFieldNumber;
const int RoomInfo::kNickNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoomInfo::RoomInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.RoomInfo)
}
RoomInfo::RoomInfo(const RoomInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_username()) {
    username_ = new ::micromsg::SKBuiltinString_t(*from.username_);
  } else {
    username_ = NULL;
  }
  if (from.has_nickname()) {
    nickname_ = new ::micromsg::SKBuiltinString_t(*from.nickname_);
  } else {
    nickname_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.RoomInfo)
}

void RoomInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&username_, 0, reinterpret_cast<char*>(&nickname_) -
    reinterpret_cast<char*>(&username_) + sizeof(nickname_));
}

RoomInfo::~RoomInfo() {
  // @@protoc_insertion_point(destructor:micromsg.RoomInfo)
  SharedDtor();
}

void RoomInfo::SharedDtor() {
  if (this != internal_default_instance()) {
    delete username_;
  }
  if (this != internal_default_instance()) {
    delete nickname_;
  }
}

void RoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomInfo::descriptor() {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoomInfo& RoomInfo::default_instance() {
  protobuf_mmbase_2eproto::InitDefaults();
  return *internal_default_instance();
}

RoomInfo* RoomInfo::New(::google::protobuf::Arena* arena) const {
  RoomInfo* n = new RoomInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.RoomInfo)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_username()) {
      GOOGLE_DCHECK(username_ != NULL);
      username_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_nickname()) {
      GOOGLE_DCHECK(nickname_ != NULL);
      nickname_->::micromsg::SKBuiltinString_t::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RoomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.RoomInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.SKBuiltinString_t UserName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_username()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t NickName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nickname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.RoomInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.RoomInfo)
  return false;
#undef DO_
}

void RoomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.RoomInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinString_t UserName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->username_, output);
  }

  // required .micromsg.SKBuiltinString_t NickName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->nickname_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.RoomInfo)
}

::google::protobuf::uint8* RoomInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.RoomInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinString_t UserName = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->username_, deterministic, target);
  }

  // required .micromsg.SKBuiltinString_t NickName = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->nickname_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.RoomInfo)
  return target;
}

size_t RoomInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.RoomInfo)
  size_t total_size = 0;

  if (has_username()) {
    // required .micromsg.SKBuiltinString_t UserName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->username_);
  }

  if (has_nickname()) {
    // required .micromsg.SKBuiltinString_t NickName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->nickname_);
  }

  return total_size;
}
size_t RoomInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.RoomInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.SKBuiltinString_t UserName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->username_);

    // required .micromsg.SKBuiltinString_t NickName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->nickname_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.RoomInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.RoomInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.RoomInfo)
    MergeFrom(*source);
  }
}

void RoomInfo::MergeFrom(const RoomInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.RoomInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_username()->::micromsg::SKBuiltinString_t::MergeFrom(from.username());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_nickname()->::micromsg::SKBuiltinString_t::MergeFrom(from.nickname());
    }
  }
}

void RoomInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.RoomInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomInfo::CopyFrom(const RoomInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.RoomInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void RoomInfo::Swap(RoomInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomInfo::InternalSwap(RoomInfo* other) {
  std::swap(username_, other->username_);
  std::swap(nickname_, other->nickname_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoomInfo::GetMetadata() const {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoomInfo

// required .micromsg.SKBuiltinString_t UserName = 1;
bool RoomInfo::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RoomInfo::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
void RoomInfo::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
void RoomInfo::clear_username() {
  if (username_ != NULL) username_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_username();
}
const ::micromsg::SKBuiltinString_t& RoomInfo::username() const {
  // @@protoc_insertion_point(field_get:micromsg.RoomInfo.UserName)
  return username_ != NULL ? *username_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* RoomInfo::mutable_username() {
  set_has_username();
  if (username_ == NULL) {
    username_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.RoomInfo.UserName)
  return username_;
}
::micromsg::SKBuiltinString_t* RoomInfo::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.RoomInfo.UserName)
  clear_has_username();
  ::micromsg::SKBuiltinString_t* temp = username_;
  username_ = NULL;
  return temp;
}
void RoomInfo::set_allocated_username(::micromsg::SKBuiltinString_t* username) {
  delete username_;
  username_ = username;
  if (username) {
    set_has_username();
  } else {
    clear_has_username();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.RoomInfo.UserName)
}

// required .micromsg.SKBuiltinString_t NickName = 2;
bool RoomInfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RoomInfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
void RoomInfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
void RoomInfo::clear_nickname() {
  if (nickname_ != NULL) nickname_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_nickname();
}
const ::micromsg::SKBuiltinString_t& RoomInfo::nickname() const {
  // @@protoc_insertion_point(field_get:micromsg.RoomInfo.NickName)
  return nickname_ != NULL ? *nickname_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* RoomInfo::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == NULL) {
    nickname_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.RoomInfo.NickName)
  return nickname_;
}
::micromsg::SKBuiltinString_t* RoomInfo::release_nickname() {
  // @@protoc_insertion_point(field_release:micromsg.RoomInfo.NickName)
  clear_has_nickname();
  ::micromsg::SKBuiltinString_t* temp = nickname_;
  nickname_ = NULL;
  return temp;
}
void RoomInfo::set_allocated_nickname(::micromsg::SKBuiltinString_t* nickname) {
  delete nickname_;
  nickname_ = nickname;
  if (nickname) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.RoomInfo.NickName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDNDnsInfo::kVerFieldNumber;
const int CDNDnsInfo::kUinFieldNumber;
const int CDNDnsInfo::kExpireTimeFieldNumber;
const int CDNDnsInfo::kFrontIDFieldNumber;
const int CDNDnsInfo::kFrontIPCountFieldNumber;
const int CDNDnsInfo::kFrontIPListFieldNumber;
const int CDNDnsInfo::kZoneDomainFieldNumber;
const int CDNDnsInfo::kAuthKeyFieldNumber;
const int CDNDnsInfo::kZoneIDFieldNumber;
const int CDNDnsInfo::kZoneIPCountFieldNumber;
const int CDNDnsInfo::kZoneIPListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDNDnsInfo::CDNDnsInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.CDNDnsInfo)
}
CDNDnsInfo::CDNDnsInfo(const CDNDnsInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      frontiplist_(from.frontiplist_),
      zoneiplist_(from.zoneiplist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  zonedomain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_zonedomain()) {
    zonedomain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zonedomain_);
  }
  if (from.has_authkey()) {
    authkey_ = new ::micromsg::SKBuiltinBuffer_t(*from.authkey_);
  } else {
    authkey_ = NULL;
  }
  ::memcpy(&ver_, &from.ver_,
    reinterpret_cast<char*>(&zoneipcount_) -
    reinterpret_cast<char*>(&ver_) + sizeof(zoneipcount_));
  // @@protoc_insertion_point(copy_constructor:micromsg.CDNDnsInfo)
}

void CDNDnsInfo::SharedCtor() {
  _cached_size_ = 0;
  zonedomain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&authkey_, 0, reinterpret_cast<char*>(&zoneipcount_) -
    reinterpret_cast<char*>(&authkey_) + sizeof(zoneipcount_));
}

CDNDnsInfo::~CDNDnsInfo() {
  // @@protoc_insertion_point(destructor:micromsg.CDNDnsInfo)
  SharedDtor();
}

void CDNDnsInfo::SharedDtor() {
  zonedomain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete authkey_;
  }
}

void CDNDnsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDNDnsInfo::descriptor() {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDNDnsInfo& CDNDnsInfo::default_instance() {
  protobuf_mmbase_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDNDnsInfo* CDNDnsInfo::New(::google::protobuf::Arena* arena) const {
  CDNDnsInfo* n = new CDNDnsInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDNDnsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.CDNDnsInfo)
  frontiplist_.Clear();
  zoneiplist_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_zonedomain()) {
      GOOGLE_DCHECK(!zonedomain_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*zonedomain_.UnsafeRawStringPointer())->clear();
    }
    if (has_authkey()) {
      GOOGLE_DCHECK(authkey_ != NULL);
      authkey_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&ver_, 0, reinterpret_cast<char*>(&zoneid_) -
      reinterpret_cast<char*>(&ver_) + sizeof(zoneid_));
  }
  zoneipcount_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDNDnsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.CDNDnsInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Ver = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_ver();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Uin = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_uin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ExpireTime = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_expiretime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expiretime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 FrontID = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_frontid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frontid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 FrontIPCount = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_frontipcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frontipcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.SKBuiltinString_t FrontIPList = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_frontiplist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ZoneDomain = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zonedomain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->zonedomain().data(), this->zonedomain().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.CDNDnsInfo.ZoneDomain");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t AuthKey = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_authkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 ZoneID = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_zoneid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zoneid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 ZoneIPCount = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_zoneipcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zoneipcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.SKBuiltinString_t ZoneIPList = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_zoneiplist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.CDNDnsInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.CDNDnsInfo)
  return false;
#undef DO_
}

void CDNDnsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.CDNDnsInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Ver = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ver(), output);
  }

  // required uint32 Uin = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uin(), output);
  }

  // required uint32 ExpireTime = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->expiretime(), output);
  }

  // required int32 FrontID = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->frontid(), output);
  }

  // required int32 FrontIPCount = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->frontipcount(), output);
  }

  // repeated .micromsg.SKBuiltinString_t FrontIPList = 6;
  for (unsigned int i = 0, n = this->frontiplist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->frontiplist(i), output);
  }

  // optional string ZoneDomain = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->zonedomain().data(), this->zonedomain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CDNDnsInfo.ZoneDomain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->zonedomain(), output);
  }

  // required .micromsg.SKBuiltinBuffer_t AuthKey = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->authkey_, output);
  }

  // required int32 ZoneID = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->zoneid(), output);
  }

  // required int32 ZoneIPCount = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->zoneipcount(), output);
  }

  // repeated .micromsg.SKBuiltinString_t ZoneIPList = 11;
  for (unsigned int i = 0, n = this->zoneiplist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->zoneiplist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.CDNDnsInfo)
}

::google::protobuf::uint8* CDNDnsInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.CDNDnsInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Ver = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ver(), target);
  }

  // required uint32 Uin = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uin(), target);
  }

  // required uint32 ExpireTime = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->expiretime(), target);
  }

  // required int32 FrontID = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->frontid(), target);
  }

  // required int32 FrontIPCount = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->frontipcount(), target);
  }

  // repeated .micromsg.SKBuiltinString_t FrontIPList = 6;
  for (unsigned int i = 0, n = this->frontiplist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->frontiplist(i), deterministic, target);
  }

  // optional string ZoneDomain = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->zonedomain().data(), this->zonedomain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CDNDnsInfo.ZoneDomain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->zonedomain(), target);
  }

  // required .micromsg.SKBuiltinBuffer_t AuthKey = 8;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->authkey_, deterministic, target);
  }

  // required int32 ZoneID = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->zoneid(), target);
  }

  // required int32 ZoneIPCount = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->zoneipcount(), target);
  }

  // repeated .micromsg.SKBuiltinString_t ZoneIPList = 11;
  for (unsigned int i = 0, n = this->zoneiplist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, this->zoneiplist(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.CDNDnsInfo)
  return target;
}

size_t CDNDnsInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.CDNDnsInfo)
  size_t total_size = 0;

  if (has_authkey()) {
    // required .micromsg.SKBuiltinBuffer_t AuthKey = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->authkey_);
  }

  if (has_ver()) {
    // required uint32 Ver = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ver());
  }

  if (has_uin()) {
    // required uint32 Uin = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uin());
  }

  if (has_expiretime()) {
    // required uint32 ExpireTime = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->expiretime());
  }

  if (has_frontid()) {
    // required int32 FrontID = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frontid());
  }

  if (has_frontipcount()) {
    // required int32 FrontIPCount = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frontipcount());
  }

  if (has_zoneid()) {
    // required int32 ZoneID = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->zoneid());
  }

  if (has_zoneipcount()) {
    // required int32 ZoneIPCount = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->zoneipcount());
  }

  return total_size;
}
size_t CDNDnsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.CDNDnsInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x000001fe) ^ 0x000001fe) == 0) {  // All required fields are present.
    // required .micromsg.SKBuiltinBuffer_t AuthKey = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->authkey_);

    // required uint32 Ver = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ver());

    // required uint32 Uin = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uin());

    // required uint32 ExpireTime = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->expiretime());

    // required int32 FrontID = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frontid());

    // required int32 FrontIPCount = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frontipcount());

    // required int32 ZoneID = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->zoneid());

    // required int32 ZoneIPCount = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->zoneipcount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.SKBuiltinString_t FrontIPList = 6;
  {
    unsigned int count = this->frontiplist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->frontiplist(i));
    }
  }

  // repeated .micromsg.SKBuiltinString_t ZoneIPList = 11;
  {
    unsigned int count = this->zoneiplist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->zoneiplist(i));
    }
  }

  // optional string ZoneDomain = 7;
  if (has_zonedomain()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->zonedomain());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDNDnsInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.CDNDnsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CDNDnsInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDNDnsInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.CDNDnsInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.CDNDnsInfo)
    MergeFrom(*source);
  }
}

void CDNDnsInfo::MergeFrom(const CDNDnsInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.CDNDnsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  frontiplist_.MergeFrom(from.frontiplist_);
  zoneiplist_.MergeFrom(from.zoneiplist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_zonedomain();
      zonedomain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zonedomain_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_authkey()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.authkey());
    }
    if (cached_has_bits & 0x00000004u) {
      ver_ = from.ver_;
    }
    if (cached_has_bits & 0x00000008u) {
      uin_ = from.uin_;
    }
    if (cached_has_bits & 0x00000010u) {
      expiretime_ = from.expiretime_;
    }
    if (cached_has_bits & 0x00000020u) {
      frontid_ = from.frontid_;
    }
    if (cached_has_bits & 0x00000040u) {
      frontipcount_ = from.frontipcount_;
    }
    if (cached_has_bits & 0x00000080u) {
      zoneid_ = from.zoneid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_zoneipcount(from.zoneipcount());
  }
}

void CDNDnsInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.CDNDnsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDNDnsInfo::CopyFrom(const CDNDnsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.CDNDnsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDNDnsInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001fe) != 0x000001fe) return false;
  if (has_authkey()) {
    if (!this->authkey_->IsInitialized()) return false;
  }
  return true;
}

void CDNDnsInfo::Swap(CDNDnsInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDNDnsInfo::InternalSwap(CDNDnsInfo* other) {
  frontiplist_.InternalSwap(&other->frontiplist_);
  zoneiplist_.InternalSwap(&other->zoneiplist_);
  zonedomain_.Swap(&other->zonedomain_);
  std::swap(authkey_, other->authkey_);
  std::swap(ver_, other->ver_);
  std::swap(uin_, other->uin_);
  std::swap(expiretime_, other->expiretime_);
  std::swap(frontid_, other->frontid_);
  std::swap(frontipcount_, other->frontipcount_);
  std::swap(zoneid_, other->zoneid_);
  std::swap(zoneipcount_, other->zoneipcount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDNDnsInfo::GetMetadata() const {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDNDnsInfo

// required uint32 Ver = 1;
bool CDNDnsInfo::has_ver() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDNDnsInfo::set_has_ver() {
  _has_bits_[0] |= 0x00000004u;
}
void CDNDnsInfo::clear_has_ver() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDNDnsInfo::clear_ver() {
  ver_ = 0u;
  clear_has_ver();
}
::google::protobuf::uint32 CDNDnsInfo::ver() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNDnsInfo.Ver)
  return ver_;
}
void CDNDnsInfo::set_ver(::google::protobuf::uint32 value) {
  set_has_ver();
  ver_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CDNDnsInfo.Ver)
}

// required uint32 Uin = 2;
bool CDNDnsInfo::has_uin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDNDnsInfo::set_has_uin() {
  _has_bits_[0] |= 0x00000008u;
}
void CDNDnsInfo::clear_has_uin() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDNDnsInfo::clear_uin() {
  uin_ = 0u;
  clear_has_uin();
}
::google::protobuf::uint32 CDNDnsInfo::uin() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNDnsInfo.Uin)
  return uin_;
}
void CDNDnsInfo::set_uin(::google::protobuf::uint32 value) {
  set_has_uin();
  uin_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CDNDnsInfo.Uin)
}

// required uint32 ExpireTime = 3;
bool CDNDnsInfo::has_expiretime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CDNDnsInfo::set_has_expiretime() {
  _has_bits_[0] |= 0x00000010u;
}
void CDNDnsInfo::clear_has_expiretime() {
  _has_bits_[0] &= ~0x00000010u;
}
void CDNDnsInfo::clear_expiretime() {
  expiretime_ = 0u;
  clear_has_expiretime();
}
::google::protobuf::uint32 CDNDnsInfo::expiretime() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNDnsInfo.ExpireTime)
  return expiretime_;
}
void CDNDnsInfo::set_expiretime(::google::protobuf::uint32 value) {
  set_has_expiretime();
  expiretime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CDNDnsInfo.ExpireTime)
}

// required int32 FrontID = 4;
bool CDNDnsInfo::has_frontid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CDNDnsInfo::set_has_frontid() {
  _has_bits_[0] |= 0x00000020u;
}
void CDNDnsInfo::clear_has_frontid() {
  _has_bits_[0] &= ~0x00000020u;
}
void CDNDnsInfo::clear_frontid() {
  frontid_ = 0;
  clear_has_frontid();
}
::google::protobuf::int32 CDNDnsInfo::frontid() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNDnsInfo.FrontID)
  return frontid_;
}
void CDNDnsInfo::set_frontid(::google::protobuf::int32 value) {
  set_has_frontid();
  frontid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CDNDnsInfo.FrontID)
}

// required int32 FrontIPCount = 5;
bool CDNDnsInfo::has_frontipcount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CDNDnsInfo::set_has_frontipcount() {
  _has_bits_[0] |= 0x00000040u;
}
void CDNDnsInfo::clear_has_frontipcount() {
  _has_bits_[0] &= ~0x00000040u;
}
void CDNDnsInfo::clear_frontipcount() {
  frontipcount_ = 0;
  clear_has_frontipcount();
}
::google::protobuf::int32 CDNDnsInfo::frontipcount() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNDnsInfo.FrontIPCount)
  return frontipcount_;
}
void CDNDnsInfo::set_frontipcount(::google::protobuf::int32 value) {
  set_has_frontipcount();
  frontipcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CDNDnsInfo.FrontIPCount)
}

// repeated .micromsg.SKBuiltinString_t FrontIPList = 6;
int CDNDnsInfo::frontiplist_size() const {
  return frontiplist_.size();
}
void CDNDnsInfo::clear_frontiplist() {
  frontiplist_.Clear();
}
const ::micromsg::SKBuiltinString_t& CDNDnsInfo::frontiplist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.CDNDnsInfo.FrontIPList)
  return frontiplist_.Get(index);
}
::micromsg::SKBuiltinString_t* CDNDnsInfo::mutable_frontiplist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.CDNDnsInfo.FrontIPList)
  return frontiplist_.Mutable(index);
}
::micromsg::SKBuiltinString_t* CDNDnsInfo::add_frontiplist() {
  // @@protoc_insertion_point(field_add:micromsg.CDNDnsInfo.FrontIPList)
  return frontiplist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >*
CDNDnsInfo::mutable_frontiplist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.CDNDnsInfo.FrontIPList)
  return &frontiplist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >&
CDNDnsInfo::frontiplist() const {
  // @@protoc_insertion_point(field_list:micromsg.CDNDnsInfo.FrontIPList)
  return frontiplist_;
}

// optional string ZoneDomain = 7;
bool CDNDnsInfo::has_zonedomain() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDNDnsInfo::set_has_zonedomain() {
  _has_bits_[0] |= 0x00000001u;
}
void CDNDnsInfo::clear_has_zonedomain() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDNDnsInfo::clear_zonedomain() {
  zonedomain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_zonedomain();
}
const ::std::string& CDNDnsInfo::zonedomain() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNDnsInfo.ZoneDomain)
  return zonedomain_.GetNoArena();
}
void CDNDnsInfo::set_zonedomain(const ::std::string& value) {
  set_has_zonedomain();
  zonedomain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CDNDnsInfo.ZoneDomain)
}
#if LANG_CXX11
void CDNDnsInfo::set_zonedomain(::std::string&& value) {
  set_has_zonedomain();
  zonedomain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CDNDnsInfo.ZoneDomain)
}
#endif
void CDNDnsInfo::set_zonedomain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_zonedomain();
  zonedomain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CDNDnsInfo.ZoneDomain)
}
void CDNDnsInfo::set_zonedomain(const char* value, size_t size) {
  set_has_zonedomain();
  zonedomain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CDNDnsInfo.ZoneDomain)
}
::std::string* CDNDnsInfo::mutable_zonedomain() {
  set_has_zonedomain();
  // @@protoc_insertion_point(field_mutable:micromsg.CDNDnsInfo.ZoneDomain)
  return zonedomain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDNDnsInfo::release_zonedomain() {
  // @@protoc_insertion_point(field_release:micromsg.CDNDnsInfo.ZoneDomain)
  clear_has_zonedomain();
  return zonedomain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDNDnsInfo::set_allocated_zonedomain(::std::string* zonedomain) {
  if (zonedomain != NULL) {
    set_has_zonedomain();
  } else {
    clear_has_zonedomain();
  }
  zonedomain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zonedomain);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CDNDnsInfo.ZoneDomain)
}

// required .micromsg.SKBuiltinBuffer_t AuthKey = 8;
bool CDNDnsInfo::has_authkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDNDnsInfo::set_has_authkey() {
  _has_bits_[0] |= 0x00000002u;
}
void CDNDnsInfo::clear_has_authkey() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDNDnsInfo::clear_authkey() {
  if (authkey_ != NULL) authkey_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_authkey();
}
const ::micromsg::SKBuiltinBuffer_t& CDNDnsInfo::authkey() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNDnsInfo.AuthKey)
  return authkey_ != NULL ? *authkey_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* CDNDnsInfo::mutable_authkey() {
  set_has_authkey();
  if (authkey_ == NULL) {
    authkey_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CDNDnsInfo.AuthKey)
  return authkey_;
}
::micromsg::SKBuiltinBuffer_t* CDNDnsInfo::release_authkey() {
  // @@protoc_insertion_point(field_release:micromsg.CDNDnsInfo.AuthKey)
  clear_has_authkey();
  ::micromsg::SKBuiltinBuffer_t* temp = authkey_;
  authkey_ = NULL;
  return temp;
}
void CDNDnsInfo::set_allocated_authkey(::micromsg::SKBuiltinBuffer_t* authkey) {
  delete authkey_;
  authkey_ = authkey;
  if (authkey) {
    set_has_authkey();
  } else {
    clear_has_authkey();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CDNDnsInfo.AuthKey)
}

// required int32 ZoneID = 9;
bool CDNDnsInfo::has_zoneid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CDNDnsInfo::set_has_zoneid() {
  _has_bits_[0] |= 0x00000080u;
}
void CDNDnsInfo::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000080u;
}
void CDNDnsInfo::clear_zoneid() {
  zoneid_ = 0;
  clear_has_zoneid();
}
::google::protobuf::int32 CDNDnsInfo::zoneid() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNDnsInfo.ZoneID)
  return zoneid_;
}
void CDNDnsInfo::set_zoneid(::google::protobuf::int32 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CDNDnsInfo.ZoneID)
}

// required int32 ZoneIPCount = 10;
bool CDNDnsInfo::has_zoneipcount() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CDNDnsInfo::set_has_zoneipcount() {
  _has_bits_[0] |= 0x00000100u;
}
void CDNDnsInfo::clear_has_zoneipcount() {
  _has_bits_[0] &= ~0x00000100u;
}
void CDNDnsInfo::clear_zoneipcount() {
  zoneipcount_ = 0;
  clear_has_zoneipcount();
}
::google::protobuf::int32 CDNDnsInfo::zoneipcount() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNDnsInfo.ZoneIPCount)
  return zoneipcount_;
}
void CDNDnsInfo::set_zoneipcount(::google::protobuf::int32 value) {
  set_has_zoneipcount();
  zoneipcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CDNDnsInfo.ZoneIPCount)
}

// repeated .micromsg.SKBuiltinString_t ZoneIPList = 11;
int CDNDnsInfo::zoneiplist_size() const {
  return zoneiplist_.size();
}
void CDNDnsInfo::clear_zoneiplist() {
  zoneiplist_.Clear();
}
const ::micromsg::SKBuiltinString_t& CDNDnsInfo::zoneiplist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.CDNDnsInfo.ZoneIPList)
  return zoneiplist_.Get(index);
}
::micromsg::SKBuiltinString_t* CDNDnsInfo::mutable_zoneiplist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.CDNDnsInfo.ZoneIPList)
  return zoneiplist_.Mutable(index);
}
::micromsg::SKBuiltinString_t* CDNDnsInfo::add_zoneiplist() {
  // @@protoc_insertion_point(field_add:micromsg.CDNDnsInfo.ZoneIPList)
  return zoneiplist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >*
CDNDnsInfo::mutable_zoneiplist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.CDNDnsInfo.ZoneIPList)
  return &zoneiplist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >&
CDNDnsInfo::zoneiplist() const {
  // @@protoc_insertion_point(field_list:micromsg.CDNDnsInfo.ZoneIPList)
  return zoneiplist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StyleKeyVal::kKeyFieldNumber;
const int StyleKeyVal::kValFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StyleKeyVal::StyleKeyVal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.StyleKeyVal)
}
StyleKeyVal::StyleKeyVal(const StyleKeyVal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  val_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_val()) {
    val_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.val_);
  }
  key_ = from.key_;
  // @@protoc_insertion_point(copy_constructor:micromsg.StyleKeyVal)
}

void StyleKeyVal::SharedCtor() {
  _cached_size_ = 0;
  val_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_ = 0u;
}

StyleKeyVal::~StyleKeyVal() {
  // @@protoc_insertion_point(destructor:micromsg.StyleKeyVal)
  SharedDtor();
}

void StyleKeyVal::SharedDtor() {
  val_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StyleKeyVal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StyleKeyVal::descriptor() {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StyleKeyVal& StyleKeyVal::default_instance() {
  protobuf_mmbase_2eproto::InitDefaults();
  return *internal_default_instance();
}

StyleKeyVal* StyleKeyVal::New(::google::protobuf::Arena* arena) const {
  StyleKeyVal* n = new StyleKeyVal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StyleKeyVal::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.StyleKeyVal)
  if (has_val()) {
    GOOGLE_DCHECK(!val_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*val_.UnsafeRawStringPointer())->clear();
  }
  key_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StyleKeyVal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.StyleKeyVal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_key();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Val = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_val()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->val().data(), this->val().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.StyleKeyVal.Val");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.StyleKeyVal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.StyleKeyVal)
  return false;
#undef DO_
}

void StyleKeyVal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.StyleKeyVal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Key = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->key(), output);
  }

  // optional string Val = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->val().data(), this->val().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.StyleKeyVal.Val");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->val(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.StyleKeyVal)
}

::google::protobuf::uint8* StyleKeyVal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.StyleKeyVal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Key = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->key(), target);
  }

  // optional string Val = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->val().data(), this->val().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.StyleKeyVal.Val");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->val(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.StyleKeyVal)
  return target;
}

size_t StyleKeyVal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.StyleKeyVal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 Key = 1;
  if (has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->key());
  }
  // optional string Val = 2;
  if (has_val()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->val());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StyleKeyVal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.StyleKeyVal)
  GOOGLE_DCHECK_NE(&from, this);
  const StyleKeyVal* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StyleKeyVal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.StyleKeyVal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.StyleKeyVal)
    MergeFrom(*source);
  }
}

void StyleKeyVal::MergeFrom(const StyleKeyVal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.StyleKeyVal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_val();
      val_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.val_);
    }
    if (cached_has_bits & 0x00000002u) {
      key_ = from.key_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StyleKeyVal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.StyleKeyVal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StyleKeyVal::CopyFrom(const StyleKeyVal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.StyleKeyVal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StyleKeyVal::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void StyleKeyVal::Swap(StyleKeyVal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StyleKeyVal::InternalSwap(StyleKeyVal* other) {
  val_.Swap(&other->val_);
  std::swap(key_, other->key_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StyleKeyVal::GetMetadata() const {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StyleKeyVal

// required uint32 Key = 1;
bool StyleKeyVal::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StyleKeyVal::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
void StyleKeyVal::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
void StyleKeyVal::clear_key() {
  key_ = 0u;
  clear_has_key();
}
::google::protobuf::uint32 StyleKeyVal::key() const {
  // @@protoc_insertion_point(field_get:micromsg.StyleKeyVal.Key)
  return key_;
}
void StyleKeyVal::set_key(::google::protobuf::uint32 value) {
  set_has_key();
  key_ = value;
  // @@protoc_insertion_point(field_set:micromsg.StyleKeyVal.Key)
}

// optional string Val = 2;
bool StyleKeyVal::has_val() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StyleKeyVal::set_has_val() {
  _has_bits_[0] |= 0x00000001u;
}
void StyleKeyVal::clear_has_val() {
  _has_bits_[0] &= ~0x00000001u;
}
void StyleKeyVal::clear_val() {
  val_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_val();
}
const ::std::string& StyleKeyVal::val() const {
  // @@protoc_insertion_point(field_get:micromsg.StyleKeyVal.Val)
  return val_.GetNoArena();
}
void StyleKeyVal::set_val(const ::std::string& value) {
  set_has_val();
  val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.StyleKeyVal.Val)
}
#if LANG_CXX11
void StyleKeyVal::set_val(::std::string&& value) {
  set_has_val();
  val_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.StyleKeyVal.Val)
}
#endif
void StyleKeyVal::set_val(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_val();
  val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.StyleKeyVal.Val)
}
void StyleKeyVal::set_val(const char* value, size_t size) {
  set_has_val();
  val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.StyleKeyVal.Val)
}
::std::string* StyleKeyVal::mutable_val() {
  set_has_val();
  // @@protoc_insertion_point(field_mutable:micromsg.StyleKeyVal.Val)
  return val_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StyleKeyVal::release_val() {
  // @@protoc_insertion_point(field_release:micromsg.StyleKeyVal.Val)
  clear_has_val();
  return val_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StyleKeyVal::set_allocated_val(::std::string* val) {
  if (val != NULL) {
    set_has_val();
  } else {
    clear_has_val();
  }
  val_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), val);
  // @@protoc_insertion_point(field_set_allocated:micromsg.StyleKeyVal.Val)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShowStyleKey::kKeyCountFieldNumber;
const int ShowStyleKey::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShowStyleKey::ShowStyleKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.ShowStyleKey)
}
ShowStyleKey::ShowStyleKey(const ShowStyleKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      key_(from.key_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  keycount_ = from.keycount_;
  // @@protoc_insertion_point(copy_constructor:micromsg.ShowStyleKey)
}

void ShowStyleKey::SharedCtor() {
  _cached_size_ = 0;
  keycount_ = 0u;
}

ShowStyleKey::~ShowStyleKey() {
  // @@protoc_insertion_point(destructor:micromsg.ShowStyleKey)
  SharedDtor();
}

void ShowStyleKey::SharedDtor() {
}

void ShowStyleKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShowStyleKey::descriptor() {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ShowStyleKey& ShowStyleKey::default_instance() {
  protobuf_mmbase_2eproto::InitDefaults();
  return *internal_default_instance();
}

ShowStyleKey* ShowStyleKey::New(::google::protobuf::Arena* arena) const {
  ShowStyleKey* n = new ShowStyleKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShowStyleKey::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.ShowStyleKey)
  key_.Clear();
  keycount_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ShowStyleKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.ShowStyleKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 KeyCount = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_keycount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &keycount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.StyleKeyVal Key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.ShowStyleKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.ShowStyleKey)
  return false;
#undef DO_
}

void ShowStyleKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.ShowStyleKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 KeyCount = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->keycount(), output);
  }

  // repeated .micromsg.StyleKeyVal Key = 2;
  for (unsigned int i = 0, n = this->key_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->key(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.ShowStyleKey)
}

::google::protobuf::uint8* ShowStyleKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.ShowStyleKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 KeyCount = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->keycount(), target);
  }

  // repeated .micromsg.StyleKeyVal Key = 2;
  for (unsigned int i = 0, n = this->key_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->key(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.ShowStyleKey)
  return target;
}

size_t ShowStyleKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.ShowStyleKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 KeyCount = 1;
  if (has_keycount()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->keycount());
  }
  // repeated .micromsg.StyleKeyVal Key = 2;
  {
    unsigned int count = this->key_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->key(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShowStyleKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.ShowStyleKey)
  GOOGLE_DCHECK_NE(&from, this);
  const ShowStyleKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShowStyleKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.ShowStyleKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.ShowStyleKey)
    MergeFrom(*source);
  }
}

void ShowStyleKey::MergeFrom(const ShowStyleKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.ShowStyleKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  key_.MergeFrom(from.key_);
  if (from.has_keycount()) {
    set_keycount(from.keycount());
  }
}

void ShowStyleKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.ShowStyleKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShowStyleKey::CopyFrom(const ShowStyleKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.ShowStyleKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowStyleKey::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->key())) return false;
  return true;
}

void ShowStyleKey::Swap(ShowStyleKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShowStyleKey::InternalSwap(ShowStyleKey* other) {
  key_.InternalSwap(&other->key_);
  std::swap(keycount_, other->keycount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShowStyleKey::GetMetadata() const {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ShowStyleKey

// required uint32 KeyCount = 1;
bool ShowStyleKey::has_keycount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ShowStyleKey::set_has_keycount() {
  _has_bits_[0] |= 0x00000001u;
}
void ShowStyleKey::clear_has_keycount() {
  _has_bits_[0] &= ~0x00000001u;
}
void ShowStyleKey::clear_keycount() {
  keycount_ = 0u;
  clear_has_keycount();
}
::google::protobuf::uint32 ShowStyleKey::keycount() const {
  // @@protoc_insertion_point(field_get:micromsg.ShowStyleKey.KeyCount)
  return keycount_;
}
void ShowStyleKey::set_keycount(::google::protobuf::uint32 value) {
  set_has_keycount();
  keycount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ShowStyleKey.KeyCount)
}

// repeated .micromsg.StyleKeyVal Key = 2;
int ShowStyleKey::key_size() const {
  return key_.size();
}
void ShowStyleKey::clear_key() {
  key_.Clear();
}
const ::micromsg::StyleKeyVal& ShowStyleKey::key(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.ShowStyleKey.Key)
  return key_.Get(index);
}
::micromsg::StyleKeyVal* ShowStyleKey::mutable_key(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.ShowStyleKey.Key)
  return key_.Mutable(index);
}
::micromsg::StyleKeyVal* ShowStyleKey::add_key() {
  // @@protoc_insertion_point(field_add:micromsg.ShowStyleKey.Key)
  return key_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::StyleKeyVal >*
ShowStyleKey::mutable_key() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.ShowStyleKey.Key)
  return &key_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::StyleKeyVal >&
ShowStyleKey::key() const {
  // @@protoc_insertion_point(field_list:micromsg.ShowStyleKey.Key)
  return key_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SafeDevice::kNameFieldNumber;
const int SafeDevice::kUuidFieldNumber;
const int SafeDevice::kDeviceTypeFieldNumber;
const int SafeDevice::kCreateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SafeDevice::SafeDevice()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SafeDevice)
}
SafeDevice::SafeDevice(const SafeDevice& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_uuid()) {
    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  devicetype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_devicetype()) {
    devicetype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicetype_);
  }
  createtime_ = from.createtime_;
  // @@protoc_insertion_point(copy_constructor:micromsg.SafeDevice)
}

void SafeDevice::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicetype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  createtime_ = 0u;
}

SafeDevice::~SafeDevice() {
  // @@protoc_insertion_point(destructor:micromsg.SafeDevice)
  SharedDtor();
}

void SafeDevice::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicetype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SafeDevice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SafeDevice::descriptor() {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SafeDevice& SafeDevice::default_instance() {
  protobuf_mmbase_2eproto::InitDefaults();
  return *internal_default_instance();
}

SafeDevice* SafeDevice::New(::google::protobuf::Arena* arena) const {
  SafeDevice* n = new SafeDevice;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SafeDevice::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SafeDevice)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_uuid()) {
      GOOGLE_DCHECK(!uuid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*uuid_.UnsafeRawStringPointer())->clear();
    }
    if (has_devicetype()) {
      GOOGLE_DCHECK(!devicetype_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*devicetype_.UnsafeRawStringPointer())->clear();
    }
  }
  createtime_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SafeDevice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SafeDevice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SafeDevice.Name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Uuid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SafeDevice.Uuid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string DeviceType = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devicetype().data(), this->devicetype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SafeDevice.DeviceType");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 CreateTime = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_createtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &createtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SafeDevice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SafeDevice)
  return false;
#undef DO_
}

void SafeDevice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SafeDevice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string Name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SafeDevice.Name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string Uuid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SafeDevice.Uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uuid(), output);
  }

  // optional string DeviceType = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicetype().data(), this->devicetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SafeDevice.DeviceType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->devicetype(), output);
  }

  // required uint32 CreateTime = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->createtime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SafeDevice)
}

::google::protobuf::uint8* SafeDevice::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SafeDevice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string Name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SafeDevice.Name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string Uuid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SafeDevice.Uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uuid(), target);
  }

  // optional string DeviceType = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicetype().data(), this->devicetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SafeDevice.DeviceType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->devicetype(), target);
  }

  // required uint32 CreateTime = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->createtime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SafeDevice)
  return target;
}

size_t SafeDevice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SafeDevice)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 CreateTime = 4;
  if (has_createtime()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->createtime());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string Uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }

    // optional string DeviceType = 3;
    if (has_devicetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicetype());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SafeDevice::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SafeDevice)
  GOOGLE_DCHECK_NE(&from, this);
  const SafeDevice* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SafeDevice>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SafeDevice)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SafeDevice)
    MergeFrom(*source);
  }
}

void SafeDevice::MergeFrom(const SafeDevice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SafeDevice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_uuid();
      uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_devicetype();
      devicetype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicetype_);
    }
    if (cached_has_bits & 0x00000008u) {
      createtime_ = from.createtime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SafeDevice::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SafeDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SafeDevice::CopyFrom(const SafeDevice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SafeDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SafeDevice::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  return true;
}

void SafeDevice::Swap(SafeDevice* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SafeDevice::InternalSwap(SafeDevice* other) {
  name_.Swap(&other->name_);
  uuid_.Swap(&other->uuid_);
  devicetype_.Swap(&other->devicetype_);
  std::swap(createtime_, other->createtime_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SafeDevice::GetMetadata() const {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SafeDevice

// optional string Name = 1;
bool SafeDevice::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SafeDevice::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void SafeDevice::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void SafeDevice::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& SafeDevice::name() const {
  // @@protoc_insertion_point(field_get:micromsg.SafeDevice.Name)
  return name_.GetNoArena();
}
void SafeDevice::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SafeDevice.Name)
}
#if LANG_CXX11
void SafeDevice::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SafeDevice.Name)
}
#endif
void SafeDevice::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SafeDevice.Name)
}
void SafeDevice::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SafeDevice.Name)
}
::std::string* SafeDevice::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:micromsg.SafeDevice.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SafeDevice::release_name() {
  // @@protoc_insertion_point(field_release:micromsg.SafeDevice.Name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SafeDevice::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SafeDevice.Name)
}

// optional string Uuid = 2;
bool SafeDevice::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SafeDevice::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
void SafeDevice::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
void SafeDevice::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uuid();
}
const ::std::string& SafeDevice::uuid() const {
  // @@protoc_insertion_point(field_get:micromsg.SafeDevice.Uuid)
  return uuid_.GetNoArena();
}
void SafeDevice::set_uuid(const ::std::string& value) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SafeDevice.Uuid)
}
#if LANG_CXX11
void SafeDevice::set_uuid(::std::string&& value) {
  set_has_uuid();
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SafeDevice.Uuid)
}
#endif
void SafeDevice::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SafeDevice.Uuid)
}
void SafeDevice::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SafeDevice.Uuid)
}
::std::string* SafeDevice::mutable_uuid() {
  set_has_uuid();
  // @@protoc_insertion_point(field_mutable:micromsg.SafeDevice.Uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SafeDevice::release_uuid() {
  // @@protoc_insertion_point(field_release:micromsg.SafeDevice.Uuid)
  clear_has_uuid();
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SafeDevice::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    set_has_uuid();
  } else {
    clear_has_uuid();
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SafeDevice.Uuid)
}

// optional string DeviceType = 3;
bool SafeDevice::has_devicetype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SafeDevice::set_has_devicetype() {
  _has_bits_[0] |= 0x00000004u;
}
void SafeDevice::clear_has_devicetype() {
  _has_bits_[0] &= ~0x00000004u;
}
void SafeDevice::clear_devicetype() {
  devicetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_devicetype();
}
const ::std::string& SafeDevice::devicetype() const {
  // @@protoc_insertion_point(field_get:micromsg.SafeDevice.DeviceType)
  return devicetype_.GetNoArena();
}
void SafeDevice::set_devicetype(const ::std::string& value) {
  set_has_devicetype();
  devicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SafeDevice.DeviceType)
}
#if LANG_CXX11
void SafeDevice::set_devicetype(::std::string&& value) {
  set_has_devicetype();
  devicetype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SafeDevice.DeviceType)
}
#endif
void SafeDevice::set_devicetype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_devicetype();
  devicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SafeDevice.DeviceType)
}
void SafeDevice::set_devicetype(const char* value, size_t size) {
  set_has_devicetype();
  devicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SafeDevice.DeviceType)
}
::std::string* SafeDevice::mutable_devicetype() {
  set_has_devicetype();
  // @@protoc_insertion_point(field_mutable:micromsg.SafeDevice.DeviceType)
  return devicetype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SafeDevice::release_devicetype() {
  // @@protoc_insertion_point(field_release:micromsg.SafeDevice.DeviceType)
  clear_has_devicetype();
  return devicetype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SafeDevice::set_allocated_devicetype(::std::string* devicetype) {
  if (devicetype != NULL) {
    set_has_devicetype();
  } else {
    clear_has_devicetype();
  }
  devicetype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicetype);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SafeDevice.DeviceType)
}

// required uint32 CreateTime = 4;
bool SafeDevice::has_createtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SafeDevice::set_has_createtime() {
  _has_bits_[0] |= 0x00000008u;
}
void SafeDevice::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000008u;
}
void SafeDevice::clear_createtime() {
  createtime_ = 0u;
  clear_has_createtime();
}
::google::protobuf::uint32 SafeDevice::createtime() const {
  // @@protoc_insertion_point(field_get:micromsg.SafeDevice.CreateTime)
  return createtime_;
}
void SafeDevice::set_createtime(::google::protobuf::uint32 value) {
  set_has_createtime();
  createtime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SafeDevice.CreateTime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SafeDeviceList::kCountFieldNumber;
const int SafeDeviceList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SafeDeviceList::SafeDeviceList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SafeDeviceList)
}
SafeDeviceList::SafeDeviceList(const SafeDeviceList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:micromsg.SafeDeviceList)
}

void SafeDeviceList::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0u;
}

SafeDeviceList::~SafeDeviceList() {
  // @@protoc_insertion_point(destructor:micromsg.SafeDeviceList)
  SharedDtor();
}

void SafeDeviceList::SharedDtor() {
}

void SafeDeviceList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SafeDeviceList::descriptor() {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SafeDeviceList& SafeDeviceList::default_instance() {
  protobuf_mmbase_2eproto::InitDefaults();
  return *internal_default_instance();
}

SafeDeviceList* SafeDeviceList::New(::google::protobuf::Arena* arena) const {
  SafeDeviceList* n = new SafeDeviceList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SafeDeviceList::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SafeDeviceList)
  list_.Clear();
  count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SafeDeviceList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SafeDeviceList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.SafeDevice List = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SafeDeviceList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SafeDeviceList)
  return false;
#undef DO_
}

void SafeDeviceList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SafeDeviceList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Count = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count(), output);
  }

  // repeated .micromsg.SafeDevice List = 2;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SafeDeviceList)
}

::google::protobuf::uint8* SafeDeviceList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SafeDeviceList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->count(), target);
  }

  // repeated .micromsg.SafeDevice List = 2;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->list(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SafeDeviceList)
  return target;
}

size_t SafeDeviceList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SafeDeviceList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 Count = 1;
  if (has_count()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }
  // repeated .micromsg.SafeDevice List = 2;
  {
    unsigned int count = this->list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SafeDeviceList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SafeDeviceList)
  GOOGLE_DCHECK_NE(&from, this);
  const SafeDeviceList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SafeDeviceList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SafeDeviceList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SafeDeviceList)
    MergeFrom(*source);
  }
}

void SafeDeviceList::MergeFrom(const SafeDeviceList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SafeDeviceList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  if (from.has_count()) {
    set_count(from.count());
  }
}

void SafeDeviceList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SafeDeviceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SafeDeviceList::CopyFrom(const SafeDeviceList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SafeDeviceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SafeDeviceList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void SafeDeviceList::Swap(SafeDeviceList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SafeDeviceList::InternalSwap(SafeDeviceList* other) {
  list_.InternalSwap(&other->list_);
  std::swap(count_, other->count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SafeDeviceList::GetMetadata() const {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SafeDeviceList

// required uint32 Count = 1;
bool SafeDeviceList::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SafeDeviceList::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
void SafeDeviceList::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
void SafeDeviceList::clear_count() {
  count_ = 0u;
  clear_has_count();
}
::google::protobuf::uint32 SafeDeviceList::count() const {
  // @@protoc_insertion_point(field_get:micromsg.SafeDeviceList.Count)
  return count_;
}
void SafeDeviceList::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SafeDeviceList.Count)
}

// repeated .micromsg.SafeDevice List = 2;
int SafeDeviceList::list_size() const {
  return list_.size();
}
void SafeDeviceList::clear_list() {
  list_.Clear();
}
const ::micromsg::SafeDevice& SafeDeviceList::list(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.SafeDeviceList.List)
  return list_.Get(index);
}
::micromsg::SafeDevice* SafeDeviceList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.SafeDeviceList.List)
  return list_.Mutable(index);
}
::micromsg::SafeDevice* SafeDeviceList::add_list() {
  // @@protoc_insertion_point(field_add:micromsg.SafeDeviceList.List)
  return list_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::SafeDevice >*
SafeDeviceList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.SafeDeviceList.List)
  return &list_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::SafeDevice >&
SafeDeviceList::list() const {
  // @@protoc_insertion_point(field_list:micromsg.SafeDeviceList.List)
  return list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MemberReq::kMemberNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MemberReq::MemberReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.MemberReq)
}
MemberReq::MemberReq(const MemberReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_membername()) {
    membername_ = new ::micromsg::SKBuiltinString_t(*from.membername_);
  } else {
    membername_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.MemberReq)
}

void MemberReq::SharedCtor() {
  _cached_size_ = 0;
  membername_ = NULL;
}

MemberReq::~MemberReq() {
  // @@protoc_insertion_point(destructor:micromsg.MemberReq)
  SharedDtor();
}

void MemberReq::SharedDtor() {
  if (this != internal_default_instance()) {
    delete membername_;
  }
}

void MemberReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemberReq::descriptor() {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MemberReq& MemberReq::default_instance() {
  protobuf_mmbase_2eproto::InitDefaults();
  return *internal_default_instance();
}

MemberReq* MemberReq::New(::google::protobuf::Arena* arena) const {
  MemberReq* n = new MemberReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MemberReq::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.MemberReq)
  if (has_membername()) {
    GOOGLE_DCHECK(membername_ != NULL);
    membername_->::micromsg::SKBuiltinString_t::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MemberReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.MemberReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.SKBuiltinString_t MemberName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_membername()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.MemberReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.MemberReq)
  return false;
#undef DO_
}

void MemberReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.MemberReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinString_t MemberName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->membername_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.MemberReq)
}

::google::protobuf::uint8* MemberReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.MemberReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinString_t MemberName = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->membername_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.MemberReq)
  return target;
}

size_t MemberReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.MemberReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.SKBuiltinString_t MemberName = 1;
  if (has_membername()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->membername_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemberReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.MemberReq)
  GOOGLE_DCHECK_NE(&from, this);
  const MemberReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MemberReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.MemberReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.MemberReq)
    MergeFrom(*source);
  }
}

void MemberReq::MergeFrom(const MemberReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.MemberReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_membername()) {
    mutable_membername()->::micromsg::SKBuiltinString_t::MergeFrom(from.membername());
  }
}

void MemberReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.MemberReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberReq::CopyFrom(const MemberReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.MemberReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MemberReq::Swap(MemberReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MemberReq::InternalSwap(MemberReq* other) {
  std::swap(membername_, other->membername_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MemberReq::GetMetadata() const {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MemberReq

// required .micromsg.SKBuiltinString_t MemberName = 1;
bool MemberReq::has_membername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MemberReq::set_has_membername() {
  _has_bits_[0] |= 0x00000001u;
}
void MemberReq::clear_has_membername() {
  _has_bits_[0] &= ~0x00000001u;
}
void MemberReq::clear_membername() {
  if (membername_ != NULL) membername_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_membername();
}
const ::micromsg::SKBuiltinString_t& MemberReq::membername() const {
  // @@protoc_insertion_point(field_get:micromsg.MemberReq.MemberName)
  return membername_ != NULL ? *membername_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* MemberReq::mutable_membername() {
  set_has_membername();
  if (membername_ == NULL) {
    membername_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.MemberReq.MemberName)
  return membername_;
}
::micromsg::SKBuiltinString_t* MemberReq::release_membername() {
  // @@protoc_insertion_point(field_release:micromsg.MemberReq.MemberName)
  clear_has_membername();
  ::micromsg::SKBuiltinString_t* temp = membername_;
  membername_ = NULL;
  return temp;
}
void MemberReq::set_allocated_membername(::micromsg::SKBuiltinString_t* membername) {
  delete membername_;
  membername_ = membername;
  if (membername) {
    set_has_membername();
  } else {
    clear_has_membername();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.MemberReq.MemberName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MemberResp::kMemberNameFieldNumber;
const int MemberResp::kMemberStatusFieldNumber;
const int MemberResp::kNickNameFieldNumber;
const int MemberResp::kPYInitialFieldNumber;
const int MemberResp::kQuanPinFieldNumber;
const int MemberResp::kSexFieldNumber;
const int MemberResp::kRemarkFieldNumber;
const int MemberResp::kRemarkPYInitialFieldNumber;
const int MemberResp::kRemarkQuanPinFieldNumber;
const int MemberResp::kContactTypeFieldNumber;
const int MemberResp::kProvinceFieldNumber;
const int MemberResp::kCityFieldNumber;
const int MemberResp::kSignatureFieldNumber;
const int MemberResp::kPersonalCardFieldNumber;
const int MemberResp::kVerifyFlagFieldNumber;
const int MemberResp::kVerifyInfoFieldNumber;
const int MemberResp::kCountryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MemberResp::MemberResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.MemberResp)
}
MemberResp::MemberResp(const MemberResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  province_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_province()) {
    province_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.province_);
  }
  city_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_city()) {
    city_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.city_);
  }
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_signature()) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  verifyinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_verifyinfo()) {
    verifyinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verifyinfo_);
  }
  country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_country()) {
    country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_);
  }
  if (from.has_membername()) {
    membername_ = new ::micromsg::SKBuiltinString_t(*from.membername_);
  } else {
    membername_ = NULL;
  }
  if (from.has_nickname()) {
    nickname_ = new ::micromsg::SKBuiltinString_t(*from.nickname_);
  } else {
    nickname_ = NULL;
  }
  if (from.has_pyinitial()) {
    pyinitial_ = new ::micromsg::SKBuiltinString_t(*from.pyinitial_);
  } else {
    pyinitial_ = NULL;
  }
  if (from.has_quanpin()) {
    quanpin_ = new ::micromsg::SKBuiltinString_t(*from.quanpin_);
  } else {
    quanpin_ = NULL;
  }
  if (from.has_remark()) {
    remark_ = new ::micromsg::SKBuiltinString_t(*from.remark_);
  } else {
    remark_ = NULL;
  }
  if (from.has_remarkpyinitial()) {
    remarkpyinitial_ = new ::micromsg::SKBuiltinString_t(*from.remarkpyinitial_);
  } else {
    remarkpyinitial_ = NULL;
  }
  if (from.has_remarkquanpin()) {
    remarkquanpin_ = new ::micromsg::SKBuiltinString_t(*from.remarkquanpin_);
  } else {
    remarkquanpin_ = NULL;
  }
  ::memcpy(&memberstatus_, &from.memberstatus_,
    reinterpret_cast<char*>(&verifyflag_) -
    reinterpret_cast<char*>(&memberstatus_) + sizeof(verifyflag_));
  // @@protoc_insertion_point(copy_constructor:micromsg.MemberResp)
}

void MemberResp::SharedCtor() {
  _cached_size_ = 0;
  province_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verifyinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&membername_, 0, reinterpret_cast<char*>(&verifyflag_) -
    reinterpret_cast<char*>(&membername_) + sizeof(verifyflag_));
}

MemberResp::~MemberResp() {
  // @@protoc_insertion_point(destructor:micromsg.MemberResp)
  SharedDtor();
}

void MemberResp::SharedDtor() {
  province_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verifyinfo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete membername_;
  }
  if (this != internal_default_instance()) {
    delete nickname_;
  }
  if (this != internal_default_instance()) {
    delete pyinitial_;
  }
  if (this != internal_default_instance()) {
    delete quanpin_;
  }
  if (this != internal_default_instance()) {
    delete remark_;
  }
  if (this != internal_default_instance()) {
    delete remarkpyinitial_;
  }
  if (this != internal_default_instance()) {
    delete remarkquanpin_;
  }
}

void MemberResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemberResp::descriptor() {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MemberResp& MemberResp::default_instance() {
  protobuf_mmbase_2eproto::InitDefaults();
  return *internal_default_instance();
}

MemberResp* MemberResp::New(::google::protobuf::Arena* arena) const {
  MemberResp* n = new MemberResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MemberResp::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.MemberResp)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_province()) {
      GOOGLE_DCHECK(!province_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*province_.UnsafeRawStringPointer())->clear();
    }
    if (has_city()) {
      GOOGLE_DCHECK(!city_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*city_.UnsafeRawStringPointer())->clear();
    }
    if (has_signature()) {
      GOOGLE_DCHECK(!signature_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*signature_.UnsafeRawStringPointer())->clear();
    }
    if (has_verifyinfo()) {
      GOOGLE_DCHECK(!verifyinfo_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*verifyinfo_.UnsafeRawStringPointer())->clear();
    }
    if (has_country()) {
      GOOGLE_DCHECK(!country_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*country_.UnsafeRawStringPointer())->clear();
    }
    if (has_membername()) {
      GOOGLE_DCHECK(membername_ != NULL);
      membername_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_nickname()) {
      GOOGLE_DCHECK(nickname_ != NULL);
      nickname_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_pyinitial()) {
      GOOGLE_DCHECK(pyinitial_ != NULL);
      pyinitial_->::micromsg::SKBuiltinString_t::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 3840u) {
    if (has_quanpin()) {
      GOOGLE_DCHECK(quanpin_ != NULL);
      quanpin_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_remark()) {
      GOOGLE_DCHECK(remark_ != NULL);
      remark_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_remarkpyinitial()) {
      GOOGLE_DCHECK(remarkpyinitial_ != NULL);
      remarkpyinitial_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_remarkquanpin()) {
      GOOGLE_DCHECK(remarkquanpin_ != NULL);
      remarkquanpin_->::micromsg::SKBuiltinString_t::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 61440u) {
    ::memset(&memberstatus_, 0, reinterpret_cast<char*>(&personalcard_) -
      reinterpret_cast<char*>(&memberstatus_) + sizeof(personalcard_));
  }
  verifyflag_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MemberResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.MemberResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.SKBuiltinString_t MemberName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_membername()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 MemberStatus = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_memberstatus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &memberstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t NickName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nickname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t PYInitial = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pyinitial()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t QuanPin = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quanpin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 Sex = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_sex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t Remark = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_remark()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t RemarkPYInitial = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_remarkpyinitial()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t RemarkQuanPin = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_remarkquanpin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ContactType = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_contacttype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contacttype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Province = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_province()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->province().data(), this->province().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.MemberResp.Province");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string City = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->city().data(), this->city().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.MemberResp.City");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Signature = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.MemberResp.Signature");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 PersonalCard = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_personalcard();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &personalcard_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 VerifyFlag = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_verifyflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &verifyflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string VerifyInfo = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verifyinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->verifyinfo().data(), this->verifyinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.MemberResp.VerifyInfo");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Country = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country().data(), this->country().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.MemberResp.Country");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.MemberResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.MemberResp)
  return false;
#undef DO_
}

void MemberResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.MemberResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinString_t MemberName = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->membername_, output);
  }

  // required uint32 MemberStatus = 2;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->memberstatus(), output);
  }

  // required .micromsg.SKBuiltinString_t NickName = 3;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->nickname_, output);
  }

  // required .micromsg.SKBuiltinString_t PYInitial = 4;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->pyinitial_, output);
  }

  // required .micromsg.SKBuiltinString_t QuanPin = 5;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->quanpin_, output);
  }

  // required int32 Sex = 6;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sex(), output);
  }

  // required .micromsg.SKBuiltinString_t Remark = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->remark_, output);
  }

  // required .micromsg.SKBuiltinString_t RemarkPYInitial = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->remarkpyinitial_, output);
  }

  // required .micromsg.SKBuiltinString_t RemarkQuanPin = 11;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->remarkquanpin_, output);
  }

  // required uint32 ContactType = 12;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->contacttype(), output);
  }

  // optional string Province = 13;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->province().data(), this->province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.MemberResp.Province");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->province(), output);
  }

  // optional string City = 14;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.MemberResp.City");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->city(), output);
  }

  // optional string Signature = 15;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.MemberResp.Signature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->signature(), output);
  }

  // optional uint32 PersonalCard = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->personalcard(), output);
  }

  // optional uint32 VerifyFlag = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->verifyflag(), output);
  }

  // optional string VerifyInfo = 18;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verifyinfo().data(), this->verifyinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.MemberResp.VerifyInfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->verifyinfo(), output);
  }

  // optional string Country = 19;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.MemberResp.Country");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->country(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.MemberResp)
}

::google::protobuf::uint8* MemberResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.MemberResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinString_t MemberName = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->membername_, deterministic, target);
  }

  // required uint32 MemberStatus = 2;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->memberstatus(), target);
  }

  // required .micromsg.SKBuiltinString_t NickName = 3;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->nickname_, deterministic, target);
  }

  // required .micromsg.SKBuiltinString_t PYInitial = 4;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->pyinitial_, deterministic, target);
  }

  // required .micromsg.SKBuiltinString_t QuanPin = 5;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->quanpin_, deterministic, target);
  }

  // required int32 Sex = 6;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sex(), target);
  }

  // required .micromsg.SKBuiltinString_t Remark = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->remark_, deterministic, target);
  }

  // required .micromsg.SKBuiltinString_t RemarkPYInitial = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->remarkpyinitial_, deterministic, target);
  }

  // required .micromsg.SKBuiltinString_t RemarkQuanPin = 11;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->remarkquanpin_, deterministic, target);
  }

  // required uint32 ContactType = 12;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->contacttype(), target);
  }

  // optional string Province = 13;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->province().data(), this->province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.MemberResp.Province");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->province(), target);
  }

  // optional string City = 14;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.MemberResp.City");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->city(), target);
  }

  // optional string Signature = 15;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.MemberResp.Signature");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->signature(), target);
  }

  // optional uint32 PersonalCard = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->personalcard(), target);
  }

  // optional uint32 VerifyFlag = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->verifyflag(), target);
  }

  // optional string VerifyInfo = 18;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verifyinfo().data(), this->verifyinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.MemberResp.VerifyInfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->verifyinfo(), target);
  }

  // optional string Country = 19;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.MemberResp.Country");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->country(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.MemberResp)
  return target;
}

size_t MemberResp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.MemberResp)
  size_t total_size = 0;

  if (has_membername()) {
    // required .micromsg.SKBuiltinString_t MemberName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->membername_);
  }

  if (has_nickname()) {
    // required .micromsg.SKBuiltinString_t NickName = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->nickname_);
  }

  if (has_pyinitial()) {
    // required .micromsg.SKBuiltinString_t PYInitial = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pyinitial_);
  }

  if (has_quanpin()) {
    // required .micromsg.SKBuiltinString_t QuanPin = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->quanpin_);
  }

  if (has_remark()) {
    // required .micromsg.SKBuiltinString_t Remark = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->remark_);
  }

  if (has_remarkpyinitial()) {
    // required .micromsg.SKBuiltinString_t RemarkPYInitial = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->remarkpyinitial_);
  }

  if (has_remarkquanpin()) {
    // required .micromsg.SKBuiltinString_t RemarkQuanPin = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->remarkquanpin_);
  }

  if (has_memberstatus()) {
    // required uint32 MemberStatus = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->memberstatus());
  }

  if (has_sex()) {
    // required int32 Sex = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sex());
  }

  if (has_contacttype()) {
    // required uint32 ContactType = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->contacttype());
  }

  return total_size;
}
size_t MemberResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.MemberResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00007fe0) ^ 0x00007fe0) == 0) {  // All required fields are present.
    // required .micromsg.SKBuiltinString_t MemberName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->membername_);

    // required .micromsg.SKBuiltinString_t NickName = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->nickname_);

    // required .micromsg.SKBuiltinString_t PYInitial = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pyinitial_);

    // required .micromsg.SKBuiltinString_t QuanPin = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->quanpin_);

    // required .micromsg.SKBuiltinString_t Remark = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->remark_);

    // required .micromsg.SKBuiltinString_t RemarkPYInitial = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->remarkpyinitial_);

    // required .micromsg.SKBuiltinString_t RemarkQuanPin = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->remarkquanpin_);

    // required uint32 MemberStatus = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->memberstatus());

    // required int32 Sex = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sex());

    // required uint32 ContactType = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->contacttype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string Province = 13;
    if (has_province()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->province());
    }

    // optional string City = 14;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city());
    }

    // optional string Signature = 15;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signature());
    }

    // optional string VerifyInfo = 18;
    if (has_verifyinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->verifyinfo());
    }

    // optional string Country = 19;
    if (has_country()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country());
    }

  }
  // optional uint32 PersonalCard = 16;
  if (has_personalcard()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->personalcard());
  }

  // optional uint32 VerifyFlag = 17;
  if (has_verifyflag()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->verifyflag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemberResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.MemberResp)
  GOOGLE_DCHECK_NE(&from, this);
  const MemberResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MemberResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.MemberResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.MemberResp)
    MergeFrom(*source);
  }
}

void MemberResp::MergeFrom(const MemberResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.MemberResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_province();
      province_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.province_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_city();
      city_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.city_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_signature();
      signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_verifyinfo();
      verifyinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verifyinfo_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_country();
      country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_);
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_membername()->::micromsg::SKBuiltinString_t::MergeFrom(from.membername());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_nickname()->::micromsg::SKBuiltinString_t::MergeFrom(from.nickname());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_pyinitial()->::micromsg::SKBuiltinString_t::MergeFrom(from.pyinitial());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_quanpin()->::micromsg::SKBuiltinString_t::MergeFrom(from.quanpin());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_remark()->::micromsg::SKBuiltinString_t::MergeFrom(from.remark());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_remarkpyinitial()->::micromsg::SKBuiltinString_t::MergeFrom(from.remarkpyinitial());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_remarkquanpin()->::micromsg::SKBuiltinString_t::MergeFrom(from.remarkquanpin());
    }
    if (cached_has_bits & 0x00001000u) {
      memberstatus_ = from.memberstatus_;
    }
    if (cached_has_bits & 0x00002000u) {
      sex_ = from.sex_;
    }
    if (cached_has_bits & 0x00004000u) {
      contacttype_ = from.contacttype_;
    }
    if (cached_has_bits & 0x00008000u) {
      personalcard_ = from.personalcard_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    set_verifyflag(from.verifyflag());
  }
}

void MemberResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.MemberResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberResp::CopyFrom(const MemberResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.MemberResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00007fe0) != 0x00007fe0) return false;
  return true;
}

void MemberResp::Swap(MemberResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MemberResp::InternalSwap(MemberResp* other) {
  province_.Swap(&other->province_);
  city_.Swap(&other->city_);
  signature_.Swap(&other->signature_);
  verifyinfo_.Swap(&other->verifyinfo_);
  country_.Swap(&other->country_);
  std::swap(membername_, other->membername_);
  std::swap(nickname_, other->nickname_);
  std::swap(pyinitial_, other->pyinitial_);
  std::swap(quanpin_, other->quanpin_);
  std::swap(remark_, other->remark_);
  std::swap(remarkpyinitial_, other->remarkpyinitial_);
  std::swap(remarkquanpin_, other->remarkquanpin_);
  std::swap(memberstatus_, other->memberstatus_);
  std::swap(sex_, other->sex_);
  std::swap(contacttype_, other->contacttype_);
  std::swap(personalcard_, other->personalcard_);
  std::swap(verifyflag_, other->verifyflag_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MemberResp::GetMetadata() const {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MemberResp

// required .micromsg.SKBuiltinString_t MemberName = 1;
bool MemberResp::has_membername() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void MemberResp::set_has_membername() {
  _has_bits_[0] |= 0x00000020u;
}
void MemberResp::clear_has_membername() {
  _has_bits_[0] &= ~0x00000020u;
}
void MemberResp::clear_membername() {
  if (membername_ != NULL) membername_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_membername();
}
const ::micromsg::SKBuiltinString_t& MemberResp::membername() const {
  // @@protoc_insertion_point(field_get:micromsg.MemberResp.MemberName)
  return membername_ != NULL ? *membername_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* MemberResp::mutable_membername() {
  set_has_membername();
  if (membername_ == NULL) {
    membername_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.MemberResp.MemberName)
  return membername_;
}
::micromsg::SKBuiltinString_t* MemberResp::release_membername() {
  // @@protoc_insertion_point(field_release:micromsg.MemberResp.MemberName)
  clear_has_membername();
  ::micromsg::SKBuiltinString_t* temp = membername_;
  membername_ = NULL;
  return temp;
}
void MemberResp::set_allocated_membername(::micromsg::SKBuiltinString_t* membername) {
  delete membername_;
  membername_ = membername;
  if (membername) {
    set_has_membername();
  } else {
    clear_has_membername();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.MemberResp.MemberName)
}

// required uint32 MemberStatus = 2;
bool MemberResp::has_memberstatus() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void MemberResp::set_has_memberstatus() {
  _has_bits_[0] |= 0x00001000u;
}
void MemberResp::clear_has_memberstatus() {
  _has_bits_[0] &= ~0x00001000u;
}
void MemberResp::clear_memberstatus() {
  memberstatus_ = 0u;
  clear_has_memberstatus();
}
::google::protobuf::uint32 MemberResp::memberstatus() const {
  // @@protoc_insertion_point(field_get:micromsg.MemberResp.MemberStatus)
  return memberstatus_;
}
void MemberResp::set_memberstatus(::google::protobuf::uint32 value) {
  set_has_memberstatus();
  memberstatus_ = value;
  // @@protoc_insertion_point(field_set:micromsg.MemberResp.MemberStatus)
}

// required .micromsg.SKBuiltinString_t NickName = 3;
bool MemberResp::has_nickname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void MemberResp::set_has_nickname() {
  _has_bits_[0] |= 0x00000040u;
}
void MemberResp::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000040u;
}
void MemberResp::clear_nickname() {
  if (nickname_ != NULL) nickname_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_nickname();
}
const ::micromsg::SKBuiltinString_t& MemberResp::nickname() const {
  // @@protoc_insertion_point(field_get:micromsg.MemberResp.NickName)
  return nickname_ != NULL ? *nickname_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* MemberResp::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == NULL) {
    nickname_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.MemberResp.NickName)
  return nickname_;
}
::micromsg::SKBuiltinString_t* MemberResp::release_nickname() {
  // @@protoc_insertion_point(field_release:micromsg.MemberResp.NickName)
  clear_has_nickname();
  ::micromsg::SKBuiltinString_t* temp = nickname_;
  nickname_ = NULL;
  return temp;
}
void MemberResp::set_allocated_nickname(::micromsg::SKBuiltinString_t* nickname) {
  delete nickname_;
  nickname_ = nickname;
  if (nickname) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.MemberResp.NickName)
}

// required .micromsg.SKBuiltinString_t PYInitial = 4;
bool MemberResp::has_pyinitial() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void MemberResp::set_has_pyinitial() {
  _has_bits_[0] |= 0x00000080u;
}
void MemberResp::clear_has_pyinitial() {
  _has_bits_[0] &= ~0x00000080u;
}
void MemberResp::clear_pyinitial() {
  if (pyinitial_ != NULL) pyinitial_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_pyinitial();
}
const ::micromsg::SKBuiltinString_t& MemberResp::pyinitial() const {
  // @@protoc_insertion_point(field_get:micromsg.MemberResp.PYInitial)
  return pyinitial_ != NULL ? *pyinitial_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* MemberResp::mutable_pyinitial() {
  set_has_pyinitial();
  if (pyinitial_ == NULL) {
    pyinitial_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.MemberResp.PYInitial)
  return pyinitial_;
}
::micromsg::SKBuiltinString_t* MemberResp::release_pyinitial() {
  // @@protoc_insertion_point(field_release:micromsg.MemberResp.PYInitial)
  clear_has_pyinitial();
  ::micromsg::SKBuiltinString_t* temp = pyinitial_;
  pyinitial_ = NULL;
  return temp;
}
void MemberResp::set_allocated_pyinitial(::micromsg::SKBuiltinString_t* pyinitial) {
  delete pyinitial_;
  pyinitial_ = pyinitial;
  if (pyinitial) {
    set_has_pyinitial();
  } else {
    clear_has_pyinitial();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.MemberResp.PYInitial)
}

// required .micromsg.SKBuiltinString_t QuanPin = 5;
bool MemberResp::has_quanpin() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void MemberResp::set_has_quanpin() {
  _has_bits_[0] |= 0x00000100u;
}
void MemberResp::clear_has_quanpin() {
  _has_bits_[0] &= ~0x00000100u;
}
void MemberResp::clear_quanpin() {
  if (quanpin_ != NULL) quanpin_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_quanpin();
}
const ::micromsg::SKBuiltinString_t& MemberResp::quanpin() const {
  // @@protoc_insertion_point(field_get:micromsg.MemberResp.QuanPin)
  return quanpin_ != NULL ? *quanpin_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* MemberResp::mutable_quanpin() {
  set_has_quanpin();
  if (quanpin_ == NULL) {
    quanpin_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.MemberResp.QuanPin)
  return quanpin_;
}
::micromsg::SKBuiltinString_t* MemberResp::release_quanpin() {
  // @@protoc_insertion_point(field_release:micromsg.MemberResp.QuanPin)
  clear_has_quanpin();
  ::micromsg::SKBuiltinString_t* temp = quanpin_;
  quanpin_ = NULL;
  return temp;
}
void MemberResp::set_allocated_quanpin(::micromsg::SKBuiltinString_t* quanpin) {
  delete quanpin_;
  quanpin_ = quanpin;
  if (quanpin) {
    set_has_quanpin();
  } else {
    clear_has_quanpin();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.MemberResp.QuanPin)
}

// required int32 Sex = 6;
bool MemberResp::has_sex() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void MemberResp::set_has_sex() {
  _has_bits_[0] |= 0x00002000u;
}
void MemberResp::clear_has_sex() {
  _has_bits_[0] &= ~0x00002000u;
}
void MemberResp::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
::google::protobuf::int32 MemberResp::sex() const {
  // @@protoc_insertion_point(field_get:micromsg.MemberResp.Sex)
  return sex_;
}
void MemberResp::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:micromsg.MemberResp.Sex)
}

// required .micromsg.SKBuiltinString_t Remark = 9;
bool MemberResp::has_remark() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void MemberResp::set_has_remark() {
  _has_bits_[0] |= 0x00000200u;
}
void MemberResp::clear_has_remark() {
  _has_bits_[0] &= ~0x00000200u;
}
void MemberResp::clear_remark() {
  if (remark_ != NULL) remark_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_remark();
}
const ::micromsg::SKBuiltinString_t& MemberResp::remark() const {
  // @@protoc_insertion_point(field_get:micromsg.MemberResp.Remark)
  return remark_ != NULL ? *remark_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* MemberResp::mutable_remark() {
  set_has_remark();
  if (remark_ == NULL) {
    remark_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.MemberResp.Remark)
  return remark_;
}
::micromsg::SKBuiltinString_t* MemberResp::release_remark() {
  // @@protoc_insertion_point(field_release:micromsg.MemberResp.Remark)
  clear_has_remark();
  ::micromsg::SKBuiltinString_t* temp = remark_;
  remark_ = NULL;
  return temp;
}
void MemberResp::set_allocated_remark(::micromsg::SKBuiltinString_t* remark) {
  delete remark_;
  remark_ = remark;
  if (remark) {
    set_has_remark();
  } else {
    clear_has_remark();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.MemberResp.Remark)
}

// required .micromsg.SKBuiltinString_t RemarkPYInitial = 10;
bool MemberResp::has_remarkpyinitial() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void MemberResp::set_has_remarkpyinitial() {
  _has_bits_[0] |= 0x00000400u;
}
void MemberResp::clear_has_remarkpyinitial() {
  _has_bits_[0] &= ~0x00000400u;
}
void MemberResp::clear_remarkpyinitial() {
  if (remarkpyinitial_ != NULL) remarkpyinitial_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_remarkpyinitial();
}
const ::micromsg::SKBuiltinString_t& MemberResp::remarkpyinitial() const {
  // @@protoc_insertion_point(field_get:micromsg.MemberResp.RemarkPYInitial)
  return remarkpyinitial_ != NULL ? *remarkpyinitial_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* MemberResp::mutable_remarkpyinitial() {
  set_has_remarkpyinitial();
  if (remarkpyinitial_ == NULL) {
    remarkpyinitial_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.MemberResp.RemarkPYInitial)
  return remarkpyinitial_;
}
::micromsg::SKBuiltinString_t* MemberResp::release_remarkpyinitial() {
  // @@protoc_insertion_point(field_release:micromsg.MemberResp.RemarkPYInitial)
  clear_has_remarkpyinitial();
  ::micromsg::SKBuiltinString_t* temp = remarkpyinitial_;
  remarkpyinitial_ = NULL;
  return temp;
}
void MemberResp::set_allocated_remarkpyinitial(::micromsg::SKBuiltinString_t* remarkpyinitial) {
  delete remarkpyinitial_;
  remarkpyinitial_ = remarkpyinitial;
  if (remarkpyinitial) {
    set_has_remarkpyinitial();
  } else {
    clear_has_remarkpyinitial();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.MemberResp.RemarkPYInitial)
}

// required .micromsg.SKBuiltinString_t RemarkQuanPin = 11;
bool MemberResp::has_remarkquanpin() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void MemberResp::set_has_remarkquanpin() {
  _has_bits_[0] |= 0x00000800u;
}
void MemberResp::clear_has_remarkquanpin() {
  _has_bits_[0] &= ~0x00000800u;
}
void MemberResp::clear_remarkquanpin() {
  if (remarkquanpin_ != NULL) remarkquanpin_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_remarkquanpin();
}
const ::micromsg::SKBuiltinString_t& MemberResp::remarkquanpin() const {
  // @@protoc_insertion_point(field_get:micromsg.MemberResp.RemarkQuanPin)
  return remarkquanpin_ != NULL ? *remarkquanpin_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* MemberResp::mutable_remarkquanpin() {
  set_has_remarkquanpin();
  if (remarkquanpin_ == NULL) {
    remarkquanpin_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.MemberResp.RemarkQuanPin)
  return remarkquanpin_;
}
::micromsg::SKBuiltinString_t* MemberResp::release_remarkquanpin() {
  // @@protoc_insertion_point(field_release:micromsg.MemberResp.RemarkQuanPin)
  clear_has_remarkquanpin();
  ::micromsg::SKBuiltinString_t* temp = remarkquanpin_;
  remarkquanpin_ = NULL;
  return temp;
}
void MemberResp::set_allocated_remarkquanpin(::micromsg::SKBuiltinString_t* remarkquanpin) {
  delete remarkquanpin_;
  remarkquanpin_ = remarkquanpin;
  if (remarkquanpin) {
    set_has_remarkquanpin();
  } else {
    clear_has_remarkquanpin();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.MemberResp.RemarkQuanPin)
}

// required uint32 ContactType = 12;
bool MemberResp::has_contacttype() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void MemberResp::set_has_contacttype() {
  _has_bits_[0] |= 0x00004000u;
}
void MemberResp::clear_has_contacttype() {
  _has_bits_[0] &= ~0x00004000u;
}
void MemberResp::clear_contacttype() {
  contacttype_ = 0u;
  clear_has_contacttype();
}
::google::protobuf::uint32 MemberResp::contacttype() const {
  // @@protoc_insertion_point(field_get:micromsg.MemberResp.ContactType)
  return contacttype_;
}
void MemberResp::set_contacttype(::google::protobuf::uint32 value) {
  set_has_contacttype();
  contacttype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.MemberResp.ContactType)
}

// optional string Province = 13;
bool MemberResp::has_province() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MemberResp::set_has_province() {
  _has_bits_[0] |= 0x00000001u;
}
void MemberResp::clear_has_province() {
  _has_bits_[0] &= ~0x00000001u;
}
void MemberResp::clear_province() {
  province_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_province();
}
const ::std::string& MemberResp::province() const {
  // @@protoc_insertion_point(field_get:micromsg.MemberResp.Province)
  return province_.GetNoArena();
}
void MemberResp::set_province(const ::std::string& value) {
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.MemberResp.Province)
}
#if LANG_CXX11
void MemberResp::set_province(::std::string&& value) {
  set_has_province();
  province_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.MemberResp.Province)
}
#endif
void MemberResp::set_province(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.MemberResp.Province)
}
void MemberResp::set_province(const char* value, size_t size) {
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.MemberResp.Province)
}
::std::string* MemberResp::mutable_province() {
  set_has_province();
  // @@protoc_insertion_point(field_mutable:micromsg.MemberResp.Province)
  return province_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MemberResp::release_province() {
  // @@protoc_insertion_point(field_release:micromsg.MemberResp.Province)
  clear_has_province();
  return province_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MemberResp::set_allocated_province(::std::string* province) {
  if (province != NULL) {
    set_has_province();
  } else {
    clear_has_province();
  }
  province_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), province);
  // @@protoc_insertion_point(field_set_allocated:micromsg.MemberResp.Province)
}

// optional string City = 14;
bool MemberResp::has_city() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MemberResp::set_has_city() {
  _has_bits_[0] |= 0x00000002u;
}
void MemberResp::clear_has_city() {
  _has_bits_[0] &= ~0x00000002u;
}
void MemberResp::clear_city() {
  city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_city();
}
const ::std::string& MemberResp::city() const {
  // @@protoc_insertion_point(field_get:micromsg.MemberResp.City)
  return city_.GetNoArena();
}
void MemberResp::set_city(const ::std::string& value) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.MemberResp.City)
}
#if LANG_CXX11
void MemberResp::set_city(::std::string&& value) {
  set_has_city();
  city_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.MemberResp.City)
}
#endif
void MemberResp::set_city(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.MemberResp.City)
}
void MemberResp::set_city(const char* value, size_t size) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.MemberResp.City)
}
::std::string* MemberResp::mutable_city() {
  set_has_city();
  // @@protoc_insertion_point(field_mutable:micromsg.MemberResp.City)
  return city_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MemberResp::release_city() {
  // @@protoc_insertion_point(field_release:micromsg.MemberResp.City)
  clear_has_city();
  return city_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MemberResp::set_allocated_city(::std::string* city) {
  if (city != NULL) {
    set_has_city();
  } else {
    clear_has_city();
  }
  city_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:micromsg.MemberResp.City)
}

// optional string Signature = 15;
bool MemberResp::has_signature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MemberResp::set_has_signature() {
  _has_bits_[0] |= 0x00000004u;
}
void MemberResp::clear_has_signature() {
  _has_bits_[0] &= ~0x00000004u;
}
void MemberResp::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_signature();
}
const ::std::string& MemberResp::signature() const {
  // @@protoc_insertion_point(field_get:micromsg.MemberResp.Signature)
  return signature_.GetNoArena();
}
void MemberResp::set_signature(const ::std::string& value) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.MemberResp.Signature)
}
#if LANG_CXX11
void MemberResp::set_signature(::std::string&& value) {
  set_has_signature();
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.MemberResp.Signature)
}
#endif
void MemberResp::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.MemberResp.Signature)
}
void MemberResp::set_signature(const char* value, size_t size) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.MemberResp.Signature)
}
::std::string* MemberResp::mutable_signature() {
  set_has_signature();
  // @@protoc_insertion_point(field_mutable:micromsg.MemberResp.Signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MemberResp::release_signature() {
  // @@protoc_insertion_point(field_release:micromsg.MemberResp.Signature)
  clear_has_signature();
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MemberResp::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:micromsg.MemberResp.Signature)
}

// optional uint32 PersonalCard = 16;
bool MemberResp::has_personalcard() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void MemberResp::set_has_personalcard() {
  _has_bits_[0] |= 0x00008000u;
}
void MemberResp::clear_has_personalcard() {
  _has_bits_[0] &= ~0x00008000u;
}
void MemberResp::clear_personalcard() {
  personalcard_ = 0u;
  clear_has_personalcard();
}
::google::protobuf::uint32 MemberResp::personalcard() const {
  // @@protoc_insertion_point(field_get:micromsg.MemberResp.PersonalCard)
  return personalcard_;
}
void MemberResp::set_personalcard(::google::protobuf::uint32 value) {
  set_has_personalcard();
  personalcard_ = value;
  // @@protoc_insertion_point(field_set:micromsg.MemberResp.PersonalCard)
}

// optional uint32 VerifyFlag = 17;
bool MemberResp::has_verifyflag() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void MemberResp::set_has_verifyflag() {
  _has_bits_[0] |= 0x00010000u;
}
void MemberResp::clear_has_verifyflag() {
  _has_bits_[0] &= ~0x00010000u;
}
void MemberResp::clear_verifyflag() {
  verifyflag_ = 0u;
  clear_has_verifyflag();
}
::google::protobuf::uint32 MemberResp::verifyflag() const {
  // @@protoc_insertion_point(field_get:micromsg.MemberResp.VerifyFlag)
  return verifyflag_;
}
void MemberResp::set_verifyflag(::google::protobuf::uint32 value) {
  set_has_verifyflag();
  verifyflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.MemberResp.VerifyFlag)
}

// optional string VerifyInfo = 18;
bool MemberResp::has_verifyinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MemberResp::set_has_verifyinfo() {
  _has_bits_[0] |= 0x00000008u;
}
void MemberResp::clear_has_verifyinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
void MemberResp::clear_verifyinfo() {
  verifyinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_verifyinfo();
}
const ::std::string& MemberResp::verifyinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.MemberResp.VerifyInfo)
  return verifyinfo_.GetNoArena();
}
void MemberResp::set_verifyinfo(const ::std::string& value) {
  set_has_verifyinfo();
  verifyinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.MemberResp.VerifyInfo)
}
#if LANG_CXX11
void MemberResp::set_verifyinfo(::std::string&& value) {
  set_has_verifyinfo();
  verifyinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.MemberResp.VerifyInfo)
}
#endif
void MemberResp::set_verifyinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_verifyinfo();
  verifyinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.MemberResp.VerifyInfo)
}
void MemberResp::set_verifyinfo(const char* value, size_t size) {
  set_has_verifyinfo();
  verifyinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.MemberResp.VerifyInfo)
}
::std::string* MemberResp::mutable_verifyinfo() {
  set_has_verifyinfo();
  // @@protoc_insertion_point(field_mutable:micromsg.MemberResp.VerifyInfo)
  return verifyinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MemberResp::release_verifyinfo() {
  // @@protoc_insertion_point(field_release:micromsg.MemberResp.VerifyInfo)
  clear_has_verifyinfo();
  return verifyinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MemberResp::set_allocated_verifyinfo(::std::string* verifyinfo) {
  if (verifyinfo != NULL) {
    set_has_verifyinfo();
  } else {
    clear_has_verifyinfo();
  }
  verifyinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verifyinfo);
  // @@protoc_insertion_point(field_set_allocated:micromsg.MemberResp.VerifyInfo)
}

// optional string Country = 19;
bool MemberResp::has_country() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MemberResp::set_has_country() {
  _has_bits_[0] |= 0x00000010u;
}
void MemberResp::clear_has_country() {
  _has_bits_[0] &= ~0x00000010u;
}
void MemberResp::clear_country() {
  country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country();
}
const ::std::string& MemberResp::country() const {
  // @@protoc_insertion_point(field_get:micromsg.MemberResp.Country)
  return country_.GetNoArena();
}
void MemberResp::set_country(const ::std::string& value) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.MemberResp.Country)
}
#if LANG_CXX11
void MemberResp::set_country(::std::string&& value) {
  set_has_country();
  country_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.MemberResp.Country)
}
#endif
void MemberResp::set_country(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.MemberResp.Country)
}
void MemberResp::set_country(const char* value, size_t size) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.MemberResp.Country)
}
::std::string* MemberResp::mutable_country() {
  set_has_country();
  // @@protoc_insertion_point(field_mutable:micromsg.MemberResp.Country)
  return country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MemberResp::release_country() {
  // @@protoc_insertion_point(field_release:micromsg.MemberResp.Country)
  clear_has_country();
  return country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MemberResp::set_allocated_country(::std::string* country) {
  if (country != NULL) {
    set_has_country();
  } else {
    clear_has_country();
  }
  country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:micromsg.MemberResp.Country)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DelMemberReq::kMemberNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DelMemberReq::DelMemberReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.DelMemberReq)
}
DelMemberReq::DelMemberReq(const DelMemberReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_membername()) {
    membername_ = new ::micromsg::SKBuiltinString_t(*from.membername_);
  } else {
    membername_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.DelMemberReq)
}

void DelMemberReq::SharedCtor() {
  _cached_size_ = 0;
  membername_ = NULL;
}

DelMemberReq::~DelMemberReq() {
  // @@protoc_insertion_point(destructor:micromsg.DelMemberReq)
  SharedDtor();
}

void DelMemberReq::SharedDtor() {
  if (this != internal_default_instance()) {
    delete membername_;
  }
}

void DelMemberReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelMemberReq::descriptor() {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DelMemberReq& DelMemberReq::default_instance() {
  protobuf_mmbase_2eproto::InitDefaults();
  return *internal_default_instance();
}

DelMemberReq* DelMemberReq::New(::google::protobuf::Arena* arena) const {
  DelMemberReq* n = new DelMemberReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DelMemberReq::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.DelMemberReq)
  if (has_membername()) {
    GOOGLE_DCHECK(membername_ != NULL);
    membername_->::micromsg::SKBuiltinString_t::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DelMemberReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.DelMemberReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.SKBuiltinString_t MemberName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_membername()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.DelMemberReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.DelMemberReq)
  return false;
#undef DO_
}

void DelMemberReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.DelMemberReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinString_t MemberName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->membername_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.DelMemberReq)
}

::google::protobuf::uint8* DelMemberReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.DelMemberReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinString_t MemberName = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->membername_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.DelMemberReq)
  return target;
}

size_t DelMemberReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.DelMemberReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.SKBuiltinString_t MemberName = 1;
  if (has_membername()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->membername_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelMemberReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.DelMemberReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DelMemberReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DelMemberReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.DelMemberReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.DelMemberReq)
    MergeFrom(*source);
  }
}

void DelMemberReq::MergeFrom(const DelMemberReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.DelMemberReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_membername()) {
    mutable_membername()->::micromsg::SKBuiltinString_t::MergeFrom(from.membername());
  }
}

void DelMemberReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.DelMemberReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelMemberReq::CopyFrom(const DelMemberReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.DelMemberReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelMemberReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void DelMemberReq::Swap(DelMemberReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DelMemberReq::InternalSwap(DelMemberReq* other) {
  std::swap(membername_, other->membername_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DelMemberReq::GetMetadata() const {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DelMemberReq

// required .micromsg.SKBuiltinString_t MemberName = 1;
bool DelMemberReq::has_membername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DelMemberReq::set_has_membername() {
  _has_bits_[0] |= 0x00000001u;
}
void DelMemberReq::clear_has_membername() {
  _has_bits_[0] &= ~0x00000001u;
}
void DelMemberReq::clear_membername() {
  if (membername_ != NULL) membername_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_membername();
}
const ::micromsg::SKBuiltinString_t& DelMemberReq::membername() const {
  // @@protoc_insertion_point(field_get:micromsg.DelMemberReq.MemberName)
  return membername_ != NULL ? *membername_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* DelMemberReq::mutable_membername() {
  set_has_membername();
  if (membername_ == NULL) {
    membername_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.DelMemberReq.MemberName)
  return membername_;
}
::micromsg::SKBuiltinString_t* DelMemberReq::release_membername() {
  // @@protoc_insertion_point(field_release:micromsg.DelMemberReq.MemberName)
  clear_has_membername();
  ::micromsg::SKBuiltinString_t* temp = membername_;
  membername_ = NULL;
  return temp;
}
void DelMemberReq::set_allocated_membername(::micromsg::SKBuiltinString_t* membername) {
  delete membername_;
  membername_ = membername;
  if (membername) {
    set_has_membername();
  } else {
    clear_has_membername();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.DelMemberReq.MemberName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DelMemberResp::kMemberNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DelMemberResp::DelMemberResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.DelMemberResp)
}
DelMemberResp::DelMemberResp(const DelMemberResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_membername()) {
    membername_ = new ::micromsg::SKBuiltinString_t(*from.membername_);
  } else {
    membername_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.DelMemberResp)
}

void DelMemberResp::SharedCtor() {
  _cached_size_ = 0;
  membername_ = NULL;
}

DelMemberResp::~DelMemberResp() {
  // @@protoc_insertion_point(destructor:micromsg.DelMemberResp)
  SharedDtor();
}

void DelMemberResp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete membername_;
  }
}

void DelMemberResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelMemberResp::descriptor() {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DelMemberResp& DelMemberResp::default_instance() {
  protobuf_mmbase_2eproto::InitDefaults();
  return *internal_default_instance();
}

DelMemberResp* DelMemberResp::New(::google::protobuf::Arena* arena) const {
  DelMemberResp* n = new DelMemberResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DelMemberResp::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.DelMemberResp)
  if (has_membername()) {
    GOOGLE_DCHECK(membername_ != NULL);
    membername_->::micromsg::SKBuiltinString_t::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DelMemberResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.DelMemberResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.SKBuiltinString_t MemberName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_membername()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.DelMemberResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.DelMemberResp)
  return false;
#undef DO_
}

void DelMemberResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.DelMemberResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinString_t MemberName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->membername_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.DelMemberResp)
}

::google::protobuf::uint8* DelMemberResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.DelMemberResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinString_t MemberName = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->membername_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.DelMemberResp)
  return target;
}

size_t DelMemberResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.DelMemberResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.SKBuiltinString_t MemberName = 1;
  if (has_membername()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->membername_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelMemberResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.DelMemberResp)
  GOOGLE_DCHECK_NE(&from, this);
  const DelMemberResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DelMemberResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.DelMemberResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.DelMemberResp)
    MergeFrom(*source);
  }
}

void DelMemberResp::MergeFrom(const DelMemberResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.DelMemberResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_membername()) {
    mutable_membername()->::micromsg::SKBuiltinString_t::MergeFrom(from.membername());
  }
}

void DelMemberResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.DelMemberResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelMemberResp::CopyFrom(const DelMemberResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.DelMemberResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelMemberResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void DelMemberResp::Swap(DelMemberResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DelMemberResp::InternalSwap(DelMemberResp* other) {
  std::swap(membername_, other->membername_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DelMemberResp::GetMetadata() const {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DelMemberResp

// required .micromsg.SKBuiltinString_t MemberName = 1;
bool DelMemberResp::has_membername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DelMemberResp::set_has_membername() {
  _has_bits_[0] |= 0x00000001u;
}
void DelMemberResp::clear_has_membername() {
  _has_bits_[0] &= ~0x00000001u;
}
void DelMemberResp::clear_membername() {
  if (membername_ != NULL) membername_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_membername();
}
const ::micromsg::SKBuiltinString_t& DelMemberResp::membername() const {
  // @@protoc_insertion_point(field_get:micromsg.DelMemberResp.MemberName)
  return membername_ != NULL ? *membername_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* DelMemberResp::mutable_membername() {
  set_has_membername();
  if (membername_ == NULL) {
    membername_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.DelMemberResp.MemberName)
  return membername_;
}
::micromsg::SKBuiltinString_t* DelMemberResp::release_membername() {
  // @@protoc_insertion_point(field_release:micromsg.DelMemberResp.MemberName)
  clear_has_membername();
  ::micromsg::SKBuiltinString_t* temp = membername_;
  membername_ = NULL;
  return temp;
}
void DelMemberResp::set_allocated_membername(::micromsg::SKBuiltinString_t* membername) {
  delete membername_;
  membername_ = membername;
  if (membername) {
    set_has_membername();
  } else {
    clear_has_membername();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.DelMemberResp.MemberName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DisturbTimeSpan::kBeginTimeFieldNumber;
const int DisturbTimeSpan::kEndTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DisturbTimeSpan::DisturbTimeSpan()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.DisturbTimeSpan)
}
DisturbTimeSpan::DisturbTimeSpan(const DisturbTimeSpan& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&begintime_, &from.begintime_,
    reinterpret_cast<char*>(&endtime_) -
    reinterpret_cast<char*>(&begintime_) + sizeof(endtime_));
  // @@protoc_insertion_point(copy_constructor:micromsg.DisturbTimeSpan)
}

void DisturbTimeSpan::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&begintime_, 0, reinterpret_cast<char*>(&endtime_) -
    reinterpret_cast<char*>(&begintime_) + sizeof(endtime_));
}

DisturbTimeSpan::~DisturbTimeSpan() {
  // @@protoc_insertion_point(destructor:micromsg.DisturbTimeSpan)
  SharedDtor();
}

void DisturbTimeSpan::SharedDtor() {
}

void DisturbTimeSpan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DisturbTimeSpan::descriptor() {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DisturbTimeSpan& DisturbTimeSpan::default_instance() {
  protobuf_mmbase_2eproto::InitDefaults();
  return *internal_default_instance();
}

DisturbTimeSpan* DisturbTimeSpan::New(::google::protobuf::Arena* arena) const {
  DisturbTimeSpan* n = new DisturbTimeSpan;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DisturbTimeSpan::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.DisturbTimeSpan)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&begintime_, 0, reinterpret_cast<char*>(&endtime_) -
      reinterpret_cast<char*>(&begintime_) + sizeof(endtime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DisturbTimeSpan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.DisturbTimeSpan)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 BeginTime = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_begintime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begintime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 EndTime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_endtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.DisturbTimeSpan)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.DisturbTimeSpan)
  return false;
#undef DO_
}

void DisturbTimeSpan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.DisturbTimeSpan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 BeginTime = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->begintime(), output);
  }

  // required uint32 EndTime = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->endtime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.DisturbTimeSpan)
}

::google::protobuf::uint8* DisturbTimeSpan::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.DisturbTimeSpan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 BeginTime = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->begintime(), target);
  }

  // required uint32 EndTime = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->endtime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.DisturbTimeSpan)
  return target;
}

size_t DisturbTimeSpan::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.DisturbTimeSpan)
  size_t total_size = 0;

  if (has_begintime()) {
    // required uint32 BeginTime = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->begintime());
  }

  if (has_endtime()) {
    // required uint32 EndTime = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->endtime());
  }

  return total_size;
}
size_t DisturbTimeSpan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.DisturbTimeSpan)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 BeginTime = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->begintime());

    // required uint32 EndTime = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->endtime());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DisturbTimeSpan::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.DisturbTimeSpan)
  GOOGLE_DCHECK_NE(&from, this);
  const DisturbTimeSpan* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DisturbTimeSpan>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.DisturbTimeSpan)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.DisturbTimeSpan)
    MergeFrom(*source);
  }
}

void DisturbTimeSpan::MergeFrom(const DisturbTimeSpan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.DisturbTimeSpan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      begintime_ = from.begintime_;
    }
    if (cached_has_bits & 0x00000002u) {
      endtime_ = from.endtime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DisturbTimeSpan::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.DisturbTimeSpan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisturbTimeSpan::CopyFrom(const DisturbTimeSpan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.DisturbTimeSpan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisturbTimeSpan::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void DisturbTimeSpan::Swap(DisturbTimeSpan* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DisturbTimeSpan::InternalSwap(DisturbTimeSpan* other) {
  std::swap(begintime_, other->begintime_);
  std::swap(endtime_, other->endtime_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DisturbTimeSpan::GetMetadata() const {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DisturbTimeSpan

// required uint32 BeginTime = 1;
bool DisturbTimeSpan::has_begintime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DisturbTimeSpan::set_has_begintime() {
  _has_bits_[0] |= 0x00000001u;
}
void DisturbTimeSpan::clear_has_begintime() {
  _has_bits_[0] &= ~0x00000001u;
}
void DisturbTimeSpan::clear_begintime() {
  begintime_ = 0u;
  clear_has_begintime();
}
::google::protobuf::uint32 DisturbTimeSpan::begintime() const {
  // @@protoc_insertion_point(field_get:micromsg.DisturbTimeSpan.BeginTime)
  return begintime_;
}
void DisturbTimeSpan::set_begintime(::google::protobuf::uint32 value) {
  set_has_begintime();
  begintime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DisturbTimeSpan.BeginTime)
}

// required uint32 EndTime = 2;
bool DisturbTimeSpan::has_endtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DisturbTimeSpan::set_has_endtime() {
  _has_bits_[0] |= 0x00000002u;
}
void DisturbTimeSpan::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000002u;
}
void DisturbTimeSpan::clear_endtime() {
  endtime_ = 0u;
  clear_has_endtime();
}
::google::protobuf::uint32 DisturbTimeSpan::endtime() const {
  // @@protoc_insertion_point(field_get:micromsg.DisturbTimeSpan.EndTime)
  return endtime_;
}
void DisturbTimeSpan::set_endtime(::google::protobuf::uint32 value) {
  set_has_endtime();
  endtime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DisturbTimeSpan.EndTime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DisturbSetting::kNightSettingFieldNumber;
const int DisturbSetting::kNightTimeFieldNumber;
const int DisturbSetting::kAllDaySettingFieldNumber;
const int DisturbSetting::kAllDayTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DisturbSetting::DisturbSetting()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.DisturbSetting)
}
DisturbSetting::DisturbSetting(const DisturbSetting& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_nighttime()) {
    nighttime_ = new ::micromsg::DisturbTimeSpan(*from.nighttime_);
  } else {
    nighttime_ = NULL;
  }
  if (from.has_alldaytime()) {
    alldaytime_ = new ::micromsg::DisturbTimeSpan(*from.alldaytime_);
  } else {
    alldaytime_ = NULL;
  }
  ::memcpy(&nightsetting_, &from.nightsetting_,
    reinterpret_cast<char*>(&alldaysetting_) -
    reinterpret_cast<char*>(&nightsetting_) + sizeof(alldaysetting_));
  // @@protoc_insertion_point(copy_constructor:micromsg.DisturbSetting)
}

void DisturbSetting::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&nighttime_, 0, reinterpret_cast<char*>(&alldaysetting_) -
    reinterpret_cast<char*>(&nighttime_) + sizeof(alldaysetting_));
}

DisturbSetting::~DisturbSetting() {
  // @@protoc_insertion_point(destructor:micromsg.DisturbSetting)
  SharedDtor();
}

void DisturbSetting::SharedDtor() {
  if (this != internal_default_instance()) {
    delete nighttime_;
  }
  if (this != internal_default_instance()) {
    delete alldaytime_;
  }
}

void DisturbSetting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DisturbSetting::descriptor() {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DisturbSetting& DisturbSetting::default_instance() {
  protobuf_mmbase_2eproto::InitDefaults();
  return *internal_default_instance();
}

DisturbSetting* DisturbSetting::New(::google::protobuf::Arena* arena) const {
  DisturbSetting* n = new DisturbSetting;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DisturbSetting::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.DisturbSetting)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_nighttime()) {
      GOOGLE_DCHECK(nighttime_ != NULL);
      nighttime_->::micromsg::DisturbTimeSpan::Clear();
    }
    if (has_alldaytime()) {
      GOOGLE_DCHECK(alldaytime_ != NULL);
      alldaytime_->::micromsg::DisturbTimeSpan::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&nightsetting_, 0, reinterpret_cast<char*>(&alldaysetting_) -
      reinterpret_cast<char*>(&nightsetting_) + sizeof(alldaysetting_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DisturbSetting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.DisturbSetting)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 NightSetting = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_nightsetting();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nightsetting_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.DisturbTimeSpan NightTime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nighttime()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 AllDaySetting = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_alldaysetting();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &alldaysetting_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.DisturbTimeSpan AllDayTime = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alldaytime()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.DisturbSetting)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.DisturbSetting)
  return false;
#undef DO_
}

void DisturbSetting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.DisturbSetting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 NightSetting = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nightsetting(), output);
  }

  // required .micromsg.DisturbTimeSpan NightTime = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->nighttime_, output);
  }

  // required uint32 AllDaySetting = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->alldaysetting(), output);
  }

  // required .micromsg.DisturbTimeSpan AllDayTime = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->alldaytime_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.DisturbSetting)
}

::google::protobuf::uint8* DisturbSetting::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.DisturbSetting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 NightSetting = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nightsetting(), target);
  }

  // required .micromsg.DisturbTimeSpan NightTime = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->nighttime_, deterministic, target);
  }

  // required uint32 AllDaySetting = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->alldaysetting(), target);
  }

  // required .micromsg.DisturbTimeSpan AllDayTime = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->alldaytime_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.DisturbSetting)
  return target;
}

size_t DisturbSetting::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.DisturbSetting)
  size_t total_size = 0;

  if (has_nighttime()) {
    // required .micromsg.DisturbTimeSpan NightTime = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->nighttime_);
  }

  if (has_alldaytime()) {
    // required .micromsg.DisturbTimeSpan AllDayTime = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->alldaytime_);
  }

  if (has_nightsetting()) {
    // required uint32 NightSetting = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nightsetting());
  }

  if (has_alldaysetting()) {
    // required uint32 AllDaySetting = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->alldaysetting());
  }

  return total_size;
}
size_t DisturbSetting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.DisturbSetting)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .micromsg.DisturbTimeSpan NightTime = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->nighttime_);

    // required .micromsg.DisturbTimeSpan AllDayTime = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->alldaytime_);

    // required uint32 NightSetting = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nightsetting());

    // required uint32 AllDaySetting = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->alldaysetting());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DisturbSetting::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.DisturbSetting)
  GOOGLE_DCHECK_NE(&from, this);
  const DisturbSetting* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DisturbSetting>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.DisturbSetting)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.DisturbSetting)
    MergeFrom(*source);
  }
}

void DisturbSetting::MergeFrom(const DisturbSetting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.DisturbSetting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_nighttime()->::micromsg::DisturbTimeSpan::MergeFrom(from.nighttime());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_alldaytime()->::micromsg::DisturbTimeSpan::MergeFrom(from.alldaytime());
    }
    if (cached_has_bits & 0x00000004u) {
      nightsetting_ = from.nightsetting_;
    }
    if (cached_has_bits & 0x00000008u) {
      alldaysetting_ = from.alldaysetting_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DisturbSetting::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.DisturbSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisturbSetting::CopyFrom(const DisturbSetting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.DisturbSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisturbSetting::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (has_nighttime()) {
    if (!this->nighttime_->IsInitialized()) return false;
  }
  if (has_alldaytime()) {
    if (!this->alldaytime_->IsInitialized()) return false;
  }
  return true;
}

void DisturbSetting::Swap(DisturbSetting* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DisturbSetting::InternalSwap(DisturbSetting* other) {
  std::swap(nighttime_, other->nighttime_);
  std::swap(alldaytime_, other->alldaytime_);
  std::swap(nightsetting_, other->nightsetting_);
  std::swap(alldaysetting_, other->alldaysetting_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DisturbSetting::GetMetadata() const {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DisturbSetting

// required uint32 NightSetting = 1;
bool DisturbSetting::has_nightsetting() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DisturbSetting::set_has_nightsetting() {
  _has_bits_[0] |= 0x00000004u;
}
void DisturbSetting::clear_has_nightsetting() {
  _has_bits_[0] &= ~0x00000004u;
}
void DisturbSetting::clear_nightsetting() {
  nightsetting_ = 0u;
  clear_has_nightsetting();
}
::google::protobuf::uint32 DisturbSetting::nightsetting() const {
  // @@protoc_insertion_point(field_get:micromsg.DisturbSetting.NightSetting)
  return nightsetting_;
}
void DisturbSetting::set_nightsetting(::google::protobuf::uint32 value) {
  set_has_nightsetting();
  nightsetting_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DisturbSetting.NightSetting)
}

// required .micromsg.DisturbTimeSpan NightTime = 2;
bool DisturbSetting::has_nighttime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DisturbSetting::set_has_nighttime() {
  _has_bits_[0] |= 0x00000001u;
}
void DisturbSetting::clear_has_nighttime() {
  _has_bits_[0] &= ~0x00000001u;
}
void DisturbSetting::clear_nighttime() {
  if (nighttime_ != NULL) nighttime_->::micromsg::DisturbTimeSpan::Clear();
  clear_has_nighttime();
}
const ::micromsg::DisturbTimeSpan& DisturbSetting::nighttime() const {
  // @@protoc_insertion_point(field_get:micromsg.DisturbSetting.NightTime)
  return nighttime_ != NULL ? *nighttime_
                         : *::micromsg::DisturbTimeSpan::internal_default_instance();
}
::micromsg::DisturbTimeSpan* DisturbSetting::mutable_nighttime() {
  set_has_nighttime();
  if (nighttime_ == NULL) {
    nighttime_ = new ::micromsg::DisturbTimeSpan;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.DisturbSetting.NightTime)
  return nighttime_;
}
::micromsg::DisturbTimeSpan* DisturbSetting::release_nighttime() {
  // @@protoc_insertion_point(field_release:micromsg.DisturbSetting.NightTime)
  clear_has_nighttime();
  ::micromsg::DisturbTimeSpan* temp = nighttime_;
  nighttime_ = NULL;
  return temp;
}
void DisturbSetting::set_allocated_nighttime(::micromsg::DisturbTimeSpan* nighttime) {
  delete nighttime_;
  nighttime_ = nighttime;
  if (nighttime) {
    set_has_nighttime();
  } else {
    clear_has_nighttime();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.DisturbSetting.NightTime)
}

// required uint32 AllDaySetting = 3;
bool DisturbSetting::has_alldaysetting() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DisturbSetting::set_has_alldaysetting() {
  _has_bits_[0] |= 0x00000008u;
}
void DisturbSetting::clear_has_alldaysetting() {
  _has_bits_[0] &= ~0x00000008u;
}
void DisturbSetting::clear_alldaysetting() {
  alldaysetting_ = 0u;
  clear_has_alldaysetting();
}
::google::protobuf::uint32 DisturbSetting::alldaysetting() const {
  // @@protoc_insertion_point(field_get:micromsg.DisturbSetting.AllDaySetting)
  return alldaysetting_;
}
void DisturbSetting::set_alldaysetting(::google::protobuf::uint32 value) {
  set_has_alldaysetting();
  alldaysetting_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DisturbSetting.AllDaySetting)
}

// required .micromsg.DisturbTimeSpan AllDayTime = 4;
bool DisturbSetting::has_alldaytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DisturbSetting::set_has_alldaytime() {
  _has_bits_[0] |= 0x00000002u;
}
void DisturbSetting::clear_has_alldaytime() {
  _has_bits_[0] &= ~0x00000002u;
}
void DisturbSetting::clear_alldaytime() {
  if (alldaytime_ != NULL) alldaytime_->::micromsg::DisturbTimeSpan::Clear();
  clear_has_alldaytime();
}
const ::micromsg::DisturbTimeSpan& DisturbSetting::alldaytime() const {
  // @@protoc_insertion_point(field_get:micromsg.DisturbSetting.AllDayTime)
  return alldaytime_ != NULL ? *alldaytime_
                         : *::micromsg::DisturbTimeSpan::internal_default_instance();
}
::micromsg::DisturbTimeSpan* DisturbSetting::mutable_alldaytime() {
  set_has_alldaytime();
  if (alldaytime_ == NULL) {
    alldaytime_ = new ::micromsg::DisturbTimeSpan;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.DisturbSetting.AllDayTime)
  return alldaytime_;
}
::micromsg::DisturbTimeSpan* DisturbSetting::release_alldaytime() {
  // @@protoc_insertion_point(field_release:micromsg.DisturbSetting.AllDayTime)
  clear_has_alldaytime();
  ::micromsg::DisturbTimeSpan* temp = alldaytime_;
  alldaytime_ = NULL;
  return temp;
}
void DisturbSetting::set_allocated_alldaytime(::micromsg::DisturbTimeSpan* alldaytime) {
  delete alldaytime_;
  alldaytime_ = alldaytime;
  if (alldaytime) {
    set_has_alldaytime();
  } else {
    clear_has_alldaytime();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.DisturbSetting.AllDayTime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GmailInfo::kGmailAcctFieldNumber;
const int GmailInfo::kGmailSwitchFieldNumber;
const int GmailInfo::kGmailErrCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GmailInfo::GmailInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GmailInfo)
}
GmailInfo::GmailInfo(const GmailInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gmailacct_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_gmailacct()) {
    gmailacct_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gmailacct_);
  }
  ::memcpy(&gmailswitch_, &from.gmailswitch_,
    reinterpret_cast<char*>(&gmailerrcode_) -
    reinterpret_cast<char*>(&gmailswitch_) + sizeof(gmailerrcode_));
  // @@protoc_insertion_point(copy_constructor:micromsg.GmailInfo)
}

void GmailInfo::SharedCtor() {
  _cached_size_ = 0;
  gmailacct_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&gmailswitch_, 0, reinterpret_cast<char*>(&gmailerrcode_) -
    reinterpret_cast<char*>(&gmailswitch_) + sizeof(gmailerrcode_));
}

GmailInfo::~GmailInfo() {
  // @@protoc_insertion_point(destructor:micromsg.GmailInfo)
  SharedDtor();
}

void GmailInfo::SharedDtor() {
  gmailacct_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GmailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GmailInfo::descriptor() {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GmailInfo& GmailInfo::default_instance() {
  protobuf_mmbase_2eproto::InitDefaults();
  return *internal_default_instance();
}

GmailInfo* GmailInfo::New(::google::protobuf::Arena* arena) const {
  GmailInfo* n = new GmailInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GmailInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GmailInfo)
  if (has_gmailacct()) {
    GOOGLE_DCHECK(!gmailacct_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*gmailacct_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&gmailswitch_, 0, reinterpret_cast<char*>(&gmailerrcode_) -
      reinterpret_cast<char*>(&gmailswitch_) + sizeof(gmailerrcode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GmailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GmailInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string GmailAcct = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gmailacct()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gmailacct().data(), this->gmailacct().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GmailInfo.GmailAcct");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 GmailSwitch = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_gmailswitch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmailswitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 GmailErrCode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_gmailerrcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmailerrcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GmailInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GmailInfo)
  return false;
#undef DO_
}

void GmailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GmailInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string GmailAcct = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gmailacct().data(), this->gmailacct().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GmailInfo.GmailAcct");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gmailacct(), output);
  }

  // required uint32 GmailSwitch = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gmailswitch(), output);
  }

  // required uint32 GmailErrCode = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gmailerrcode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GmailInfo)
}

::google::protobuf::uint8* GmailInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GmailInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string GmailAcct = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gmailacct().data(), this->gmailacct().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GmailInfo.GmailAcct");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gmailacct(), target);
  }

  // required uint32 GmailSwitch = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gmailswitch(), target);
  }

  // required uint32 GmailErrCode = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gmailerrcode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GmailInfo)
  return target;
}

size_t GmailInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GmailInfo)
  size_t total_size = 0;

  if (has_gmailswitch()) {
    // required uint32 GmailSwitch = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gmailswitch());
  }

  if (has_gmailerrcode()) {
    // required uint32 GmailErrCode = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gmailerrcode());
  }

  return total_size;
}
size_t GmailInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GmailInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required uint32 GmailSwitch = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gmailswitch());

    // required uint32 GmailErrCode = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gmailerrcode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string GmailAcct = 1;
  if (has_gmailacct()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gmailacct());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GmailInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GmailInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GmailInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GmailInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GmailInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GmailInfo)
    MergeFrom(*source);
  }
}

void GmailInfo::MergeFrom(const GmailInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GmailInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_gmailacct();
      gmailacct_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gmailacct_);
    }
    if (cached_has_bits & 0x00000002u) {
      gmailswitch_ = from.gmailswitch_;
    }
    if (cached_has_bits & 0x00000004u) {
      gmailerrcode_ = from.gmailerrcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GmailInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GmailInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GmailInfo::CopyFrom(const GmailInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GmailInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GmailInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  return true;
}

void GmailInfo::Swap(GmailInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GmailInfo::InternalSwap(GmailInfo* other) {
  gmailacct_.Swap(&other->gmailacct_);
  std::swap(gmailswitch_, other->gmailswitch_);
  std::swap(gmailerrcode_, other->gmailerrcode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GmailInfo::GetMetadata() const {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GmailInfo

// optional string GmailAcct = 1;
bool GmailInfo::has_gmailacct() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GmailInfo::set_has_gmailacct() {
  _has_bits_[0] |= 0x00000001u;
}
void GmailInfo::clear_has_gmailacct() {
  _has_bits_[0] &= ~0x00000001u;
}
void GmailInfo::clear_gmailacct() {
  gmailacct_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gmailacct();
}
const ::std::string& GmailInfo::gmailacct() const {
  // @@protoc_insertion_point(field_get:micromsg.GmailInfo.GmailAcct)
  return gmailacct_.GetNoArena();
}
void GmailInfo::set_gmailacct(const ::std::string& value) {
  set_has_gmailacct();
  gmailacct_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GmailInfo.GmailAcct)
}
#if LANG_CXX11
void GmailInfo::set_gmailacct(::std::string&& value) {
  set_has_gmailacct();
  gmailacct_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GmailInfo.GmailAcct)
}
#endif
void GmailInfo::set_gmailacct(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gmailacct();
  gmailacct_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GmailInfo.GmailAcct)
}
void GmailInfo::set_gmailacct(const char* value, size_t size) {
  set_has_gmailacct();
  gmailacct_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GmailInfo.GmailAcct)
}
::std::string* GmailInfo::mutable_gmailacct() {
  set_has_gmailacct();
  // @@protoc_insertion_point(field_mutable:micromsg.GmailInfo.GmailAcct)
  return gmailacct_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GmailInfo::release_gmailacct() {
  // @@protoc_insertion_point(field_release:micromsg.GmailInfo.GmailAcct)
  clear_has_gmailacct();
  return gmailacct_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GmailInfo::set_allocated_gmailacct(::std::string* gmailacct) {
  if (gmailacct != NULL) {
    set_has_gmailacct();
  } else {
    clear_has_gmailacct();
  }
  gmailacct_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gmailacct);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GmailInfo.GmailAcct)
}

// required uint32 GmailSwitch = 2;
bool GmailInfo::has_gmailswitch() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GmailInfo::set_has_gmailswitch() {
  _has_bits_[0] |= 0x00000002u;
}
void GmailInfo::clear_has_gmailswitch() {
  _has_bits_[0] &= ~0x00000002u;
}
void GmailInfo::clear_gmailswitch() {
  gmailswitch_ = 0u;
  clear_has_gmailswitch();
}
::google::protobuf::uint32 GmailInfo::gmailswitch() const {
  // @@protoc_insertion_point(field_get:micromsg.GmailInfo.GmailSwitch)
  return gmailswitch_;
}
void GmailInfo::set_gmailswitch(::google::protobuf::uint32 value) {
  set_has_gmailswitch();
  gmailswitch_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GmailInfo.GmailSwitch)
}

// required uint32 GmailErrCode = 3;
bool GmailInfo::has_gmailerrcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GmailInfo::set_has_gmailerrcode() {
  _has_bits_[0] |= 0x00000004u;
}
void GmailInfo::clear_has_gmailerrcode() {
  _has_bits_[0] &= ~0x00000004u;
}
void GmailInfo::clear_gmailerrcode() {
  gmailerrcode_ = 0u;
  clear_has_gmailerrcode();
}
::google::protobuf::uint32 GmailInfo::gmailerrcode() const {
  // @@protoc_insertion_point(field_get:micromsg.GmailInfo.GmailErrCode)
  return gmailerrcode_;
}
void GmailInfo::set_gmailerrcode(::google::protobuf::uint32 value) {
  set_has_gmailerrcode();
  gmailerrcode_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GmailInfo.GmailErrCode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GmailList::kCountFieldNumber;
const int GmailList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GmailList::GmailList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GmailList)
}
GmailList::GmailList(const GmailList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:micromsg.GmailList)
}

void GmailList::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0u;
}

GmailList::~GmailList() {
  // @@protoc_insertion_point(destructor:micromsg.GmailList)
  SharedDtor();
}

void GmailList::SharedDtor() {
}

void GmailList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GmailList::descriptor() {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GmailList& GmailList::default_instance() {
  protobuf_mmbase_2eproto::InitDefaults();
  return *internal_default_instance();
}

GmailList* GmailList::New(::google::protobuf::Arena* arena) const {
  GmailList* n = new GmailList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GmailList::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GmailList)
  list_.Clear();
  count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GmailList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GmailList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.GmailInfo List = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GmailList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GmailList)
  return false;
#undef DO_
}

void GmailList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GmailList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Count = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count(), output);
  }

  // repeated .micromsg.GmailInfo List = 2;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GmailList)
}

::google::protobuf::uint8* GmailList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GmailList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 Count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->count(), target);
  }

  // repeated .micromsg.GmailInfo List = 2;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->list(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GmailList)
  return target;
}

size_t GmailList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GmailList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 Count = 1;
  if (has_count()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }
  // repeated .micromsg.GmailInfo List = 2;
  {
    unsigned int count = this->list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GmailList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GmailList)
  GOOGLE_DCHECK_NE(&from, this);
  const GmailList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GmailList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GmailList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GmailList)
    MergeFrom(*source);
  }
}

void GmailList::MergeFrom(const GmailList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GmailList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  if (from.has_count()) {
    set_count(from.count());
  }
}

void GmailList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GmailList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GmailList::CopyFrom(const GmailList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GmailList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GmailList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void GmailList::Swap(GmailList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GmailList::InternalSwap(GmailList* other) {
  list_.InternalSwap(&other->list_);
  std::swap(count_, other->count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GmailList::GetMetadata() const {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GmailList

// required uint32 Count = 1;
bool GmailList::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GmailList::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
void GmailList::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
void GmailList::clear_count() {
  count_ = 0u;
  clear_has_count();
}
::google::protobuf::uint32 GmailList::count() const {
  // @@protoc_insertion_point(field_get:micromsg.GmailList.Count)
  return count_;
}
void GmailList::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GmailList.Count)
}

// repeated .micromsg.GmailInfo List = 2;
int GmailList::list_size() const {
  return list_.size();
}
void GmailList::clear_list() {
  list_.Clear();
}
const ::micromsg::GmailInfo& GmailList::list(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GmailList.List)
  return list_.Get(index);
}
::micromsg::GmailInfo* GmailList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GmailList.List)
  return list_.Mutable(index);
}
::micromsg::GmailInfo* GmailList::add_list() {
  // @@protoc_insertion_point(field_add:micromsg.GmailList.List)
  return list_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::GmailInfo >*
GmailList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GmailList.List)
  return &list_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::GmailInfo >&
GmailList::list() const {
  // @@protoc_insertion_point(field_list:micromsg.GmailList.List)
  return list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LinkedinContactItem::kLinkedinNameFieldNumber;
const int LinkedinContactItem::kLinkedinMemberIDFieldNumber;
const int LinkedinContactItem::kLinkedinPublicUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LinkedinContactItem::LinkedinContactItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.LinkedinContactItem)
}
LinkedinContactItem::LinkedinContactItem(const LinkedinContactItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  linkedinname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_linkedinname()) {
    linkedinname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.linkedinname_);
  }
  linkedinmemberid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_linkedinmemberid()) {
    linkedinmemberid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.linkedinmemberid_);
  }
  linkedinpublicurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_linkedinpublicurl()) {
    linkedinpublicurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.linkedinpublicurl_);
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.LinkedinContactItem)
}

void LinkedinContactItem::SharedCtor() {
  _cached_size_ = 0;
  linkedinname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  linkedinmemberid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  linkedinpublicurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

LinkedinContactItem::~LinkedinContactItem() {
  // @@protoc_insertion_point(destructor:micromsg.LinkedinContactItem)
  SharedDtor();
}

void LinkedinContactItem::SharedDtor() {
  linkedinname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  linkedinmemberid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  linkedinpublicurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LinkedinContactItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LinkedinContactItem::descriptor() {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LinkedinContactItem& LinkedinContactItem::default_instance() {
  protobuf_mmbase_2eproto::InitDefaults();
  return *internal_default_instance();
}

LinkedinContactItem* LinkedinContactItem::New(::google::protobuf::Arena* arena) const {
  LinkedinContactItem* n = new LinkedinContactItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LinkedinContactItem::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.LinkedinContactItem)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_linkedinname()) {
      GOOGLE_DCHECK(!linkedinname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*linkedinname_.UnsafeRawStringPointer())->clear();
    }
    if (has_linkedinmemberid()) {
      GOOGLE_DCHECK(!linkedinmemberid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*linkedinmemberid_.UnsafeRawStringPointer())->clear();
    }
    if (has_linkedinpublicurl()) {
      GOOGLE_DCHECK(!linkedinpublicurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*linkedinpublicurl_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LinkedinContactItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.LinkedinContactItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string LinkedinName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_linkedinname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->linkedinname().data(), this->linkedinname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.LinkedinContactItem.LinkedinName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string LinkedinMemberID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_linkedinmemberid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->linkedinmemberid().data(), this->linkedinmemberid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.LinkedinContactItem.LinkedinMemberID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string LinkedinPublicUrl = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_linkedinpublicurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->linkedinpublicurl().data(), this->linkedinpublicurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.LinkedinContactItem.LinkedinPublicUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.LinkedinContactItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.LinkedinContactItem)
  return false;
#undef DO_
}

void LinkedinContactItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.LinkedinContactItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string LinkedinName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->linkedinname().data(), this->linkedinname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.LinkedinContactItem.LinkedinName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->linkedinname(), output);
  }

  // optional string LinkedinMemberID = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->linkedinmemberid().data(), this->linkedinmemberid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.LinkedinContactItem.LinkedinMemberID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->linkedinmemberid(), output);
  }

  // optional string LinkedinPublicUrl = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->linkedinpublicurl().data(), this->linkedinpublicurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.LinkedinContactItem.LinkedinPublicUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->linkedinpublicurl(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.LinkedinContactItem)
}

::google::protobuf::uint8* LinkedinContactItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.LinkedinContactItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string LinkedinName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->linkedinname().data(), this->linkedinname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.LinkedinContactItem.LinkedinName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->linkedinname(), target);
  }

  // optional string LinkedinMemberID = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->linkedinmemberid().data(), this->linkedinmemberid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.LinkedinContactItem.LinkedinMemberID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->linkedinmemberid(), target);
  }

  // optional string LinkedinPublicUrl = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->linkedinpublicurl().data(), this->linkedinpublicurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.LinkedinContactItem.LinkedinPublicUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->linkedinpublicurl(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.LinkedinContactItem)
  return target;
}

size_t LinkedinContactItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.LinkedinContactItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string LinkedinName = 1;
    if (has_linkedinname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->linkedinname());
    }

    // optional string LinkedinMemberID = 2;
    if (has_linkedinmemberid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->linkedinmemberid());
    }

    // optional string LinkedinPublicUrl = 3;
    if (has_linkedinpublicurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->linkedinpublicurl());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LinkedinContactItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.LinkedinContactItem)
  GOOGLE_DCHECK_NE(&from, this);
  const LinkedinContactItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LinkedinContactItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.LinkedinContactItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.LinkedinContactItem)
    MergeFrom(*source);
  }
}

void LinkedinContactItem::MergeFrom(const LinkedinContactItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.LinkedinContactItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_linkedinname();
      linkedinname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.linkedinname_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_linkedinmemberid();
      linkedinmemberid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.linkedinmemberid_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_linkedinpublicurl();
      linkedinpublicurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.linkedinpublicurl_);
    }
  }
}

void LinkedinContactItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.LinkedinContactItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkedinContactItem::CopyFrom(const LinkedinContactItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.LinkedinContactItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkedinContactItem::IsInitialized() const {
  return true;
}

void LinkedinContactItem::Swap(LinkedinContactItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LinkedinContactItem::InternalSwap(LinkedinContactItem* other) {
  linkedinname_.Swap(&other->linkedinname_);
  linkedinmemberid_.Swap(&other->linkedinmemberid_);
  linkedinpublicurl_.Swap(&other->linkedinpublicurl_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LinkedinContactItem::GetMetadata() const {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LinkedinContactItem

// optional string LinkedinName = 1;
bool LinkedinContactItem::has_linkedinname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LinkedinContactItem::set_has_linkedinname() {
  _has_bits_[0] |= 0x00000001u;
}
void LinkedinContactItem::clear_has_linkedinname() {
  _has_bits_[0] &= ~0x00000001u;
}
void LinkedinContactItem::clear_linkedinname() {
  linkedinname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_linkedinname();
}
const ::std::string& LinkedinContactItem::linkedinname() const {
  // @@protoc_insertion_point(field_get:micromsg.LinkedinContactItem.LinkedinName)
  return linkedinname_.GetNoArena();
}
void LinkedinContactItem::set_linkedinname(const ::std::string& value) {
  set_has_linkedinname();
  linkedinname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.LinkedinContactItem.LinkedinName)
}
#if LANG_CXX11
void LinkedinContactItem::set_linkedinname(::std::string&& value) {
  set_has_linkedinname();
  linkedinname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.LinkedinContactItem.LinkedinName)
}
#endif
void LinkedinContactItem::set_linkedinname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_linkedinname();
  linkedinname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.LinkedinContactItem.LinkedinName)
}
void LinkedinContactItem::set_linkedinname(const char* value, size_t size) {
  set_has_linkedinname();
  linkedinname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.LinkedinContactItem.LinkedinName)
}
::std::string* LinkedinContactItem::mutable_linkedinname() {
  set_has_linkedinname();
  // @@protoc_insertion_point(field_mutable:micromsg.LinkedinContactItem.LinkedinName)
  return linkedinname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LinkedinContactItem::release_linkedinname() {
  // @@protoc_insertion_point(field_release:micromsg.LinkedinContactItem.LinkedinName)
  clear_has_linkedinname();
  return linkedinname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LinkedinContactItem::set_allocated_linkedinname(::std::string* linkedinname) {
  if (linkedinname != NULL) {
    set_has_linkedinname();
  } else {
    clear_has_linkedinname();
  }
  linkedinname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), linkedinname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.LinkedinContactItem.LinkedinName)
}

// optional string LinkedinMemberID = 2;
bool LinkedinContactItem::has_linkedinmemberid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LinkedinContactItem::set_has_linkedinmemberid() {
  _has_bits_[0] |= 0x00000002u;
}
void LinkedinContactItem::clear_has_linkedinmemberid() {
  _has_bits_[0] &= ~0x00000002u;
}
void LinkedinContactItem::clear_linkedinmemberid() {
  linkedinmemberid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_linkedinmemberid();
}
const ::std::string& LinkedinContactItem::linkedinmemberid() const {
  // @@protoc_insertion_point(field_get:micromsg.LinkedinContactItem.LinkedinMemberID)
  return linkedinmemberid_.GetNoArena();
}
void LinkedinContactItem::set_linkedinmemberid(const ::std::string& value) {
  set_has_linkedinmemberid();
  linkedinmemberid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.LinkedinContactItem.LinkedinMemberID)
}
#if LANG_CXX11
void LinkedinContactItem::set_linkedinmemberid(::std::string&& value) {
  set_has_linkedinmemberid();
  linkedinmemberid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.LinkedinContactItem.LinkedinMemberID)
}
#endif
void LinkedinContactItem::set_linkedinmemberid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_linkedinmemberid();
  linkedinmemberid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.LinkedinContactItem.LinkedinMemberID)
}
void LinkedinContactItem::set_linkedinmemberid(const char* value, size_t size) {
  set_has_linkedinmemberid();
  linkedinmemberid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.LinkedinContactItem.LinkedinMemberID)
}
::std::string* LinkedinContactItem::mutable_linkedinmemberid() {
  set_has_linkedinmemberid();
  // @@protoc_insertion_point(field_mutable:micromsg.LinkedinContactItem.LinkedinMemberID)
  return linkedinmemberid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LinkedinContactItem::release_linkedinmemberid() {
  // @@protoc_insertion_point(field_release:micromsg.LinkedinContactItem.LinkedinMemberID)
  clear_has_linkedinmemberid();
  return linkedinmemberid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LinkedinContactItem::set_allocated_linkedinmemberid(::std::string* linkedinmemberid) {
  if (linkedinmemberid != NULL) {
    set_has_linkedinmemberid();
  } else {
    clear_has_linkedinmemberid();
  }
  linkedinmemberid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), linkedinmemberid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.LinkedinContactItem.LinkedinMemberID)
}

// optional string LinkedinPublicUrl = 3;
bool LinkedinContactItem::has_linkedinpublicurl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LinkedinContactItem::set_has_linkedinpublicurl() {
  _has_bits_[0] |= 0x00000004u;
}
void LinkedinContactItem::clear_has_linkedinpublicurl() {
  _has_bits_[0] &= ~0x00000004u;
}
void LinkedinContactItem::clear_linkedinpublicurl() {
  linkedinpublicurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_linkedinpublicurl();
}
const ::std::string& LinkedinContactItem::linkedinpublicurl() const {
  // @@protoc_insertion_point(field_get:micromsg.LinkedinContactItem.LinkedinPublicUrl)
  return linkedinpublicurl_.GetNoArena();
}
void LinkedinContactItem::set_linkedinpublicurl(const ::std::string& value) {
  set_has_linkedinpublicurl();
  linkedinpublicurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.LinkedinContactItem.LinkedinPublicUrl)
}
#if LANG_CXX11
void LinkedinContactItem::set_linkedinpublicurl(::std::string&& value) {
  set_has_linkedinpublicurl();
  linkedinpublicurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.LinkedinContactItem.LinkedinPublicUrl)
}
#endif
void LinkedinContactItem::set_linkedinpublicurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_linkedinpublicurl();
  linkedinpublicurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.LinkedinContactItem.LinkedinPublicUrl)
}
void LinkedinContactItem::set_linkedinpublicurl(const char* value, size_t size) {
  set_has_linkedinpublicurl();
  linkedinpublicurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.LinkedinContactItem.LinkedinPublicUrl)
}
::std::string* LinkedinContactItem::mutable_linkedinpublicurl() {
  set_has_linkedinpublicurl();
  // @@protoc_insertion_point(field_mutable:micromsg.LinkedinContactItem.LinkedinPublicUrl)
  return linkedinpublicurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LinkedinContactItem::release_linkedinpublicurl() {
  // @@protoc_insertion_point(field_release:micromsg.LinkedinContactItem.LinkedinPublicUrl)
  clear_has_linkedinpublicurl();
  return linkedinpublicurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LinkedinContactItem::set_allocated_linkedinpublicurl(::std::string* linkedinpublicurl) {
  if (linkedinpublicurl != NULL) {
    set_has_linkedinpublicurl();
  } else {
    clear_has_linkedinpublicurl();
  }
  linkedinpublicurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), linkedinpublicurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.LinkedinContactItem.LinkedinPublicUrl)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdditionalContactList::kLinkedinContactItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdditionalContactList::AdditionalContactList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.AdditionalContactList)
}
AdditionalContactList::AdditionalContactList(const AdditionalContactList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_linkedincontactitem()) {
    linkedincontactitem_ = new ::micromsg::LinkedinContactItem(*from.linkedincontactitem_);
  } else {
    linkedincontactitem_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.AdditionalContactList)
}

void AdditionalContactList::SharedCtor() {
  _cached_size_ = 0;
  linkedincontactitem_ = NULL;
}

AdditionalContactList::~AdditionalContactList() {
  // @@protoc_insertion_point(destructor:micromsg.AdditionalContactList)
  SharedDtor();
}

void AdditionalContactList::SharedDtor() {
  if (this != internal_default_instance()) {
    delete linkedincontactitem_;
  }
}

void AdditionalContactList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdditionalContactList::descriptor() {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AdditionalContactList& AdditionalContactList::default_instance() {
  protobuf_mmbase_2eproto::InitDefaults();
  return *internal_default_instance();
}

AdditionalContactList* AdditionalContactList::New(::google::protobuf::Arena* arena) const {
  AdditionalContactList* n = new AdditionalContactList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AdditionalContactList::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.AdditionalContactList)
  if (has_linkedincontactitem()) {
    GOOGLE_DCHECK(linkedincontactitem_ != NULL);
    linkedincontactitem_->::micromsg::LinkedinContactItem::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AdditionalContactList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.AdditionalContactList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .micromsg.LinkedinContactItem LinkedinContactItem = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linkedincontactitem()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.AdditionalContactList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.AdditionalContactList)
  return false;
#undef DO_
}

void AdditionalContactList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.AdditionalContactList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .micromsg.LinkedinContactItem LinkedinContactItem = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->linkedincontactitem_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.AdditionalContactList)
}

::google::protobuf::uint8* AdditionalContactList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.AdditionalContactList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .micromsg.LinkedinContactItem LinkedinContactItem = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->linkedincontactitem_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.AdditionalContactList)
  return target;
}

size_t AdditionalContactList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.AdditionalContactList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .micromsg.LinkedinContactItem LinkedinContactItem = 1;
  if (has_linkedincontactitem()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->linkedincontactitem_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdditionalContactList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.AdditionalContactList)
  GOOGLE_DCHECK_NE(&from, this);
  const AdditionalContactList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AdditionalContactList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.AdditionalContactList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.AdditionalContactList)
    MergeFrom(*source);
  }
}

void AdditionalContactList::MergeFrom(const AdditionalContactList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.AdditionalContactList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_linkedincontactitem()) {
    mutable_linkedincontactitem()->::micromsg::LinkedinContactItem::MergeFrom(from.linkedincontactitem());
  }
}

void AdditionalContactList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.AdditionalContactList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdditionalContactList::CopyFrom(const AdditionalContactList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.AdditionalContactList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdditionalContactList::IsInitialized() const {
  return true;
}

void AdditionalContactList::Swap(AdditionalContactList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdditionalContactList::InternalSwap(AdditionalContactList* other) {
  std::swap(linkedincontactitem_, other->linkedincontactitem_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AdditionalContactList::GetMetadata() const {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AdditionalContactList

// optional .micromsg.LinkedinContactItem LinkedinContactItem = 1;
bool AdditionalContactList::has_linkedincontactitem() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AdditionalContactList::set_has_linkedincontactitem() {
  _has_bits_[0] |= 0x00000001u;
}
void AdditionalContactList::clear_has_linkedincontactitem() {
  _has_bits_[0] &= ~0x00000001u;
}
void AdditionalContactList::clear_linkedincontactitem() {
  if (linkedincontactitem_ != NULL) linkedincontactitem_->::micromsg::LinkedinContactItem::Clear();
  clear_has_linkedincontactitem();
}
const ::micromsg::LinkedinContactItem& AdditionalContactList::linkedincontactitem() const {
  // @@protoc_insertion_point(field_get:micromsg.AdditionalContactList.LinkedinContactItem)
  return linkedincontactitem_ != NULL ? *linkedincontactitem_
                         : *::micromsg::LinkedinContactItem::internal_default_instance();
}
::micromsg::LinkedinContactItem* AdditionalContactList::mutable_linkedincontactitem() {
  set_has_linkedincontactitem();
  if (linkedincontactitem_ == NULL) {
    linkedincontactitem_ = new ::micromsg::LinkedinContactItem;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.AdditionalContactList.LinkedinContactItem)
  return linkedincontactitem_;
}
::micromsg::LinkedinContactItem* AdditionalContactList::release_linkedincontactitem() {
  // @@protoc_insertion_point(field_release:micromsg.AdditionalContactList.LinkedinContactItem)
  clear_has_linkedincontactitem();
  ::micromsg::LinkedinContactItem* temp = linkedincontactitem_;
  linkedincontactitem_ = NULL;
  return temp;
}
void AdditionalContactList::set_allocated_linkedincontactitem(::micromsg::LinkedinContactItem* linkedincontactitem) {
  delete linkedincontactitem_;
  linkedincontactitem_ = linkedincontactitem;
  if (linkedincontactitem) {
    set_has_linkedincontactitem();
  } else {
    clear_has_linkedincontactitem();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.AdditionalContactList.LinkedinContactItem)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatRoomMemberInfo::kUserNameFieldNumber;
const int ChatRoomMemberInfo::kNickNameFieldNumber;
const int ChatRoomMemberInfo::kDisplayNameFieldNumber;
const int ChatRoomMemberInfo::kBigHeadImgUrlFieldNumber;
const int ChatRoomMemberInfo::kSmallHeadImgUrlFieldNumber;
const int ChatRoomMemberInfo::kChatroomMemberFlagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatRoomMemberInfo::ChatRoomMemberInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.ChatRoomMemberInfo)
}
ChatRoomMemberInfo::ChatRoomMemberInfo(const ChatRoomMemberInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nickname()) {
    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  displayname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_displayname()) {
    displayname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.displayname_);
  }
  bigheadimgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bigheadimgurl()) {
    bigheadimgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bigheadimgurl_);
  }
  smallheadimgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_smallheadimgurl()) {
    smallheadimgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smallheadimgurl_);
  }
  chatroommemberflag_ = from.chatroommemberflag_;
  // @@protoc_insertion_point(copy_constructor:micromsg.ChatRoomMemberInfo)
}

void ChatRoomMemberInfo::SharedCtor() {
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  displayname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bigheadimgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smallheadimgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chatroommemberflag_ = 0u;
}

ChatRoomMemberInfo::~ChatRoomMemberInfo() {
  // @@protoc_insertion_point(destructor:micromsg.ChatRoomMemberInfo)
  SharedDtor();
}

void ChatRoomMemberInfo::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  displayname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bigheadimgurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smallheadimgurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChatRoomMemberInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatRoomMemberInfo::descriptor() {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChatRoomMemberInfo& ChatRoomMemberInfo::default_instance() {
  protobuf_mmbase_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChatRoomMemberInfo* ChatRoomMemberInfo::New(::google::protobuf::Arena* arena) const {
  ChatRoomMemberInfo* n = new ChatRoomMemberInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChatRoomMemberInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.ChatRoomMemberInfo)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_username()) {
      GOOGLE_DCHECK(!username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*username_.UnsafeRawStringPointer())->clear();
    }
    if (has_nickname()) {
      GOOGLE_DCHECK(!nickname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*nickname_.UnsafeRawStringPointer())->clear();
    }
    if (has_displayname()) {
      GOOGLE_DCHECK(!displayname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*displayname_.UnsafeRawStringPointer())->clear();
    }
    if (has_bigheadimgurl()) {
      GOOGLE_DCHECK(!bigheadimgurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bigheadimgurl_.UnsafeRawStringPointer())->clear();
    }
    if (has_smallheadimgurl()) {
      GOOGLE_DCHECK(!smallheadimgurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*smallheadimgurl_.UnsafeRawStringPointer())->clear();
    }
  }
  chatroommemberflag_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChatRoomMemberInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.ChatRoomMemberInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string UserName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ChatRoomMemberInfo.UserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string NickName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ChatRoomMemberInfo.NickName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string DisplayName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_displayname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->displayname().data(), this->displayname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ChatRoomMemberInfo.DisplayName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string BigHeadImgUrl = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bigheadimgurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bigheadimgurl().data(), this->bigheadimgurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ChatRoomMemberInfo.BigHeadImgUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string SmallHeadImgUrl = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_smallheadimgurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->smallheadimgurl().data(), this->smallheadimgurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ChatRoomMemberInfo.SmallHeadImgUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ChatroomMemberFlag = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_chatroommemberflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chatroommemberflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.ChatRoomMemberInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.ChatRoomMemberInfo)
  return false;
#undef DO_
}

void ChatRoomMemberInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.ChatRoomMemberInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string UserName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ChatRoomMemberInfo.UserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // optional string NickName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ChatRoomMemberInfo.NickName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  // optional string DisplayName = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->displayname().data(), this->displayname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ChatRoomMemberInfo.DisplayName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->displayname(), output);
  }

  // optional string BigHeadImgUrl = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bigheadimgurl().data(), this->bigheadimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ChatRoomMemberInfo.BigHeadImgUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->bigheadimgurl(), output);
  }

  // optional string SmallHeadImgUrl = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->smallheadimgurl().data(), this->smallheadimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ChatRoomMemberInfo.SmallHeadImgUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->smallheadimgurl(), output);
  }

  // required uint32 ChatroomMemberFlag = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->chatroommemberflag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.ChatRoomMemberInfo)
}

::google::protobuf::uint8* ChatRoomMemberInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.ChatRoomMemberInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string UserName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ChatRoomMemberInfo.UserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // optional string NickName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ChatRoomMemberInfo.NickName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // optional string DisplayName = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->displayname().data(), this->displayname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ChatRoomMemberInfo.DisplayName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->displayname(), target);
  }

  // optional string BigHeadImgUrl = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bigheadimgurl().data(), this->bigheadimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ChatRoomMemberInfo.BigHeadImgUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->bigheadimgurl(), target);
  }

  // optional string SmallHeadImgUrl = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->smallheadimgurl().data(), this->smallheadimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ChatRoomMemberInfo.SmallHeadImgUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->smallheadimgurl(), target);
  }

  // required uint32 ChatroomMemberFlag = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->chatroommemberflag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.ChatRoomMemberInfo)
  return target;
}

size_t ChatRoomMemberInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.ChatRoomMemberInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 ChatroomMemberFlag = 6;
  if (has_chatroommemberflag()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->chatroommemberflag());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string UserName = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string NickName = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional string DisplayName = 3;
    if (has_displayname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->displayname());
    }

    // optional string BigHeadImgUrl = 4;
    if (has_bigheadimgurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bigheadimgurl());
    }

    // optional string SmallHeadImgUrl = 5;
    if (has_smallheadimgurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->smallheadimgurl());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatRoomMemberInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.ChatRoomMemberInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatRoomMemberInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChatRoomMemberInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.ChatRoomMemberInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.ChatRoomMemberInfo)
    MergeFrom(*source);
  }
}

void ChatRoomMemberInfo::MergeFrom(const ChatRoomMemberInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.ChatRoomMemberInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_nickname();
      nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_displayname();
      displayname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.displayname_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_bigheadimgurl();
      bigheadimgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bigheadimgurl_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_smallheadimgurl();
      smallheadimgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smallheadimgurl_);
    }
    if (cached_has_bits & 0x00000020u) {
      chatroommemberflag_ = from.chatroommemberflag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChatRoomMemberInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.ChatRoomMemberInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatRoomMemberInfo::CopyFrom(const ChatRoomMemberInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.ChatRoomMemberInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRoomMemberInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000020) != 0x00000020) return false;
  return true;
}

void ChatRoomMemberInfo::Swap(ChatRoomMemberInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChatRoomMemberInfo::InternalSwap(ChatRoomMemberInfo* other) {
  username_.Swap(&other->username_);
  nickname_.Swap(&other->nickname_);
  displayname_.Swap(&other->displayname_);
  bigheadimgurl_.Swap(&other->bigheadimgurl_);
  smallheadimgurl_.Swap(&other->smallheadimgurl_);
  std::swap(chatroommemberflag_, other->chatroommemberflag_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChatRoomMemberInfo::GetMetadata() const {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChatRoomMemberInfo

// optional string UserName = 1;
bool ChatRoomMemberInfo::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChatRoomMemberInfo::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
void ChatRoomMemberInfo::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChatRoomMemberInfo::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
const ::std::string& ChatRoomMemberInfo::username() const {
  // @@protoc_insertion_point(field_get:micromsg.ChatRoomMemberInfo.UserName)
  return username_.GetNoArena();
}
void ChatRoomMemberInfo::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ChatRoomMemberInfo.UserName)
}
#if LANG_CXX11
void ChatRoomMemberInfo::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ChatRoomMemberInfo.UserName)
}
#endif
void ChatRoomMemberInfo::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ChatRoomMemberInfo.UserName)
}
void ChatRoomMemberInfo::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ChatRoomMemberInfo.UserName)
}
::std::string* ChatRoomMemberInfo::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:micromsg.ChatRoomMemberInfo.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChatRoomMemberInfo::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.ChatRoomMemberInfo.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChatRoomMemberInfo::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ChatRoomMemberInfo.UserName)
}

// optional string NickName = 2;
bool ChatRoomMemberInfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChatRoomMemberInfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
void ChatRoomMemberInfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChatRoomMemberInfo::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
const ::std::string& ChatRoomMemberInfo::nickname() const {
  // @@protoc_insertion_point(field_get:micromsg.ChatRoomMemberInfo.NickName)
  return nickname_.GetNoArena();
}
void ChatRoomMemberInfo::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ChatRoomMemberInfo.NickName)
}
#if LANG_CXX11
void ChatRoomMemberInfo::set_nickname(::std::string&& value) {
  set_has_nickname();
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ChatRoomMemberInfo.NickName)
}
#endif
void ChatRoomMemberInfo::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ChatRoomMemberInfo.NickName)
}
void ChatRoomMemberInfo::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ChatRoomMemberInfo.NickName)
}
::std::string* ChatRoomMemberInfo::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:micromsg.ChatRoomMemberInfo.NickName)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChatRoomMemberInfo::release_nickname() {
  // @@protoc_insertion_point(field_release:micromsg.ChatRoomMemberInfo.NickName)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChatRoomMemberInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ChatRoomMemberInfo.NickName)
}

// optional string DisplayName = 3;
bool ChatRoomMemberInfo::has_displayname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ChatRoomMemberInfo::set_has_displayname() {
  _has_bits_[0] |= 0x00000004u;
}
void ChatRoomMemberInfo::clear_has_displayname() {
  _has_bits_[0] &= ~0x00000004u;
}
void ChatRoomMemberInfo::clear_displayname() {
  displayname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_displayname();
}
const ::std::string& ChatRoomMemberInfo::displayname() const {
  // @@protoc_insertion_point(field_get:micromsg.ChatRoomMemberInfo.DisplayName)
  return displayname_.GetNoArena();
}
void ChatRoomMemberInfo::set_displayname(const ::std::string& value) {
  set_has_displayname();
  displayname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ChatRoomMemberInfo.DisplayName)
}
#if LANG_CXX11
void ChatRoomMemberInfo::set_displayname(::std::string&& value) {
  set_has_displayname();
  displayname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ChatRoomMemberInfo.DisplayName)
}
#endif
void ChatRoomMemberInfo::set_displayname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_displayname();
  displayname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ChatRoomMemberInfo.DisplayName)
}
void ChatRoomMemberInfo::set_displayname(const char* value, size_t size) {
  set_has_displayname();
  displayname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ChatRoomMemberInfo.DisplayName)
}
::std::string* ChatRoomMemberInfo::mutable_displayname() {
  set_has_displayname();
  // @@protoc_insertion_point(field_mutable:micromsg.ChatRoomMemberInfo.DisplayName)
  return displayname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChatRoomMemberInfo::release_displayname() {
  // @@protoc_insertion_point(field_release:micromsg.ChatRoomMemberInfo.DisplayName)
  clear_has_displayname();
  return displayname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChatRoomMemberInfo::set_allocated_displayname(::std::string* displayname) {
  if (displayname != NULL) {
    set_has_displayname();
  } else {
    clear_has_displayname();
  }
  displayname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), displayname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ChatRoomMemberInfo.DisplayName)
}

// optional string BigHeadImgUrl = 4;
bool ChatRoomMemberInfo::has_bigheadimgurl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ChatRoomMemberInfo::set_has_bigheadimgurl() {
  _has_bits_[0] |= 0x00000008u;
}
void ChatRoomMemberInfo::clear_has_bigheadimgurl() {
  _has_bits_[0] &= ~0x00000008u;
}
void ChatRoomMemberInfo::clear_bigheadimgurl() {
  bigheadimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bigheadimgurl();
}
const ::std::string& ChatRoomMemberInfo::bigheadimgurl() const {
  // @@protoc_insertion_point(field_get:micromsg.ChatRoomMemberInfo.BigHeadImgUrl)
  return bigheadimgurl_.GetNoArena();
}
void ChatRoomMemberInfo::set_bigheadimgurl(const ::std::string& value) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ChatRoomMemberInfo.BigHeadImgUrl)
}
#if LANG_CXX11
void ChatRoomMemberInfo::set_bigheadimgurl(::std::string&& value) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ChatRoomMemberInfo.BigHeadImgUrl)
}
#endif
void ChatRoomMemberInfo::set_bigheadimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ChatRoomMemberInfo.BigHeadImgUrl)
}
void ChatRoomMemberInfo::set_bigheadimgurl(const char* value, size_t size) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ChatRoomMemberInfo.BigHeadImgUrl)
}
::std::string* ChatRoomMemberInfo::mutable_bigheadimgurl() {
  set_has_bigheadimgurl();
  // @@protoc_insertion_point(field_mutable:micromsg.ChatRoomMemberInfo.BigHeadImgUrl)
  return bigheadimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChatRoomMemberInfo::release_bigheadimgurl() {
  // @@protoc_insertion_point(field_release:micromsg.ChatRoomMemberInfo.BigHeadImgUrl)
  clear_has_bigheadimgurl();
  return bigheadimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChatRoomMemberInfo::set_allocated_bigheadimgurl(::std::string* bigheadimgurl) {
  if (bigheadimgurl != NULL) {
    set_has_bigheadimgurl();
  } else {
    clear_has_bigheadimgurl();
  }
  bigheadimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bigheadimgurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ChatRoomMemberInfo.BigHeadImgUrl)
}

// optional string SmallHeadImgUrl = 5;
bool ChatRoomMemberInfo::has_smallheadimgurl() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ChatRoomMemberInfo::set_has_smallheadimgurl() {
  _has_bits_[0] |= 0x00000010u;
}
void ChatRoomMemberInfo::clear_has_smallheadimgurl() {
  _has_bits_[0] &= ~0x00000010u;
}
void ChatRoomMemberInfo::clear_smallheadimgurl() {
  smallheadimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_smallheadimgurl();
}
const ::std::string& ChatRoomMemberInfo::smallheadimgurl() const {
  // @@protoc_insertion_point(field_get:micromsg.ChatRoomMemberInfo.SmallHeadImgUrl)
  return smallheadimgurl_.GetNoArena();
}
void ChatRoomMemberInfo::set_smallheadimgurl(const ::std::string& value) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ChatRoomMemberInfo.SmallHeadImgUrl)
}
#if LANG_CXX11
void ChatRoomMemberInfo::set_smallheadimgurl(::std::string&& value) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ChatRoomMemberInfo.SmallHeadImgUrl)
}
#endif
void ChatRoomMemberInfo::set_smallheadimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ChatRoomMemberInfo.SmallHeadImgUrl)
}
void ChatRoomMemberInfo::set_smallheadimgurl(const char* value, size_t size) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ChatRoomMemberInfo.SmallHeadImgUrl)
}
::std::string* ChatRoomMemberInfo::mutable_smallheadimgurl() {
  set_has_smallheadimgurl();
  // @@protoc_insertion_point(field_mutable:micromsg.ChatRoomMemberInfo.SmallHeadImgUrl)
  return smallheadimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChatRoomMemberInfo::release_smallheadimgurl() {
  // @@protoc_insertion_point(field_release:micromsg.ChatRoomMemberInfo.SmallHeadImgUrl)
  clear_has_smallheadimgurl();
  return smallheadimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChatRoomMemberInfo::set_allocated_smallheadimgurl(::std::string* smallheadimgurl) {
  if (smallheadimgurl != NULL) {
    set_has_smallheadimgurl();
  } else {
    clear_has_smallheadimgurl();
  }
  smallheadimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smallheadimgurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ChatRoomMemberInfo.SmallHeadImgUrl)
}

// required uint32 ChatroomMemberFlag = 6;
bool ChatRoomMemberInfo::has_chatroommemberflag() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ChatRoomMemberInfo::set_has_chatroommemberflag() {
  _has_bits_[0] |= 0x00000020u;
}
void ChatRoomMemberInfo::clear_has_chatroommemberflag() {
  _has_bits_[0] &= ~0x00000020u;
}
void ChatRoomMemberInfo::clear_chatroommemberflag() {
  chatroommemberflag_ = 0u;
  clear_has_chatroommemberflag();
}
::google::protobuf::uint32 ChatRoomMemberInfo::chatroommemberflag() const {
  // @@protoc_insertion_point(field_get:micromsg.ChatRoomMemberInfo.ChatroomMemberFlag)
  return chatroommemberflag_;
}
void ChatRoomMemberInfo::set_chatroommemberflag(::google::protobuf::uint32 value) {
  set_has_chatroommemberflag();
  chatroommemberflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ChatRoomMemberInfo.ChatroomMemberFlag)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatRoomMemberData::kMemberCountFieldNumber;
const int ChatRoomMemberData::kChatRoomMemberFieldNumber;
const int ChatRoomMemberData::kInfoMaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatRoomMemberData::ChatRoomMemberData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.ChatRoomMemberData)
}
ChatRoomMemberData::ChatRoomMemberData(const ChatRoomMemberData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      chatroommember_(from.chatroommember_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&membercount_, &from.membercount_,
    reinterpret_cast<char*>(&infomask_) -
    reinterpret_cast<char*>(&membercount_) + sizeof(infomask_));
  // @@protoc_insertion_point(copy_constructor:micromsg.ChatRoomMemberData)
}

void ChatRoomMemberData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&membercount_, 0, reinterpret_cast<char*>(&infomask_) -
    reinterpret_cast<char*>(&membercount_) + sizeof(infomask_));
}

ChatRoomMemberData::~ChatRoomMemberData() {
  // @@protoc_insertion_point(destructor:micromsg.ChatRoomMemberData)
  SharedDtor();
}

void ChatRoomMemberData::SharedDtor() {
}

void ChatRoomMemberData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatRoomMemberData::descriptor() {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChatRoomMemberData& ChatRoomMemberData::default_instance() {
  protobuf_mmbase_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChatRoomMemberData* ChatRoomMemberData::New(::google::protobuf::Arena* arena) const {
  ChatRoomMemberData* n = new ChatRoomMemberData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChatRoomMemberData::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.ChatRoomMemberData)
  chatroommember_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&membercount_, 0, reinterpret_cast<char*>(&infomask_) -
      reinterpret_cast<char*>(&membercount_) + sizeof(infomask_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChatRoomMemberData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.ChatRoomMemberData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 MemberCount = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_membercount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &membercount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.ChatRoomMemberInfo ChatRoomMember = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chatroommember()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 InfoMask = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_infomask();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &infomask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.ChatRoomMemberData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.ChatRoomMemberData)
  return false;
#undef DO_
}

void ChatRoomMemberData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.ChatRoomMemberData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 MemberCount = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->membercount(), output);
  }

  // repeated .micromsg.ChatRoomMemberInfo ChatRoomMember = 2;
  for (unsigned int i = 0, n = this->chatroommember_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->chatroommember(i), output);
  }

  // optional uint32 InfoMask = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->infomask(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.ChatRoomMemberData)
}

::google::protobuf::uint8* ChatRoomMemberData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.ChatRoomMemberData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 MemberCount = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->membercount(), target);
  }

  // repeated .micromsg.ChatRoomMemberInfo ChatRoomMember = 2;
  for (unsigned int i = 0, n = this->chatroommember_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->chatroommember(i), deterministic, target);
  }

  // optional uint32 InfoMask = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->infomask(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.ChatRoomMemberData)
  return target;
}

size_t ChatRoomMemberData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.ChatRoomMemberData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 MemberCount = 1;
  if (has_membercount()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->membercount());
  }
  // repeated .micromsg.ChatRoomMemberInfo ChatRoomMember = 2;
  {
    unsigned int count = this->chatroommember_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chatroommember(i));
    }
  }

  // optional uint32 InfoMask = 3;
  if (has_infomask()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->infomask());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatRoomMemberData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.ChatRoomMemberData)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatRoomMemberData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChatRoomMemberData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.ChatRoomMemberData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.ChatRoomMemberData)
    MergeFrom(*source);
  }
}

void ChatRoomMemberData::MergeFrom(const ChatRoomMemberData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.ChatRoomMemberData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chatroommember_.MergeFrom(from.chatroommember_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      membercount_ = from.membercount_;
    }
    if (cached_has_bits & 0x00000002u) {
      infomask_ = from.infomask_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChatRoomMemberData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.ChatRoomMemberData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatRoomMemberData::CopyFrom(const ChatRoomMemberData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.ChatRoomMemberData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRoomMemberData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->chatroommember())) return false;
  return true;
}

void ChatRoomMemberData::Swap(ChatRoomMemberData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChatRoomMemberData::InternalSwap(ChatRoomMemberData* other) {
  chatroommember_.InternalSwap(&other->chatroommember_);
  std::swap(membercount_, other->membercount_);
  std::swap(infomask_, other->infomask_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChatRoomMemberData::GetMetadata() const {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChatRoomMemberData

// required uint32 MemberCount = 1;
bool ChatRoomMemberData::has_membercount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChatRoomMemberData::set_has_membercount() {
  _has_bits_[0] |= 0x00000001u;
}
void ChatRoomMemberData::clear_has_membercount() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChatRoomMemberData::clear_membercount() {
  membercount_ = 0u;
  clear_has_membercount();
}
::google::protobuf::uint32 ChatRoomMemberData::membercount() const {
  // @@protoc_insertion_point(field_get:micromsg.ChatRoomMemberData.MemberCount)
  return membercount_;
}
void ChatRoomMemberData::set_membercount(::google::protobuf::uint32 value) {
  set_has_membercount();
  membercount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ChatRoomMemberData.MemberCount)
}

// repeated .micromsg.ChatRoomMemberInfo ChatRoomMember = 2;
int ChatRoomMemberData::chatroommember_size() const {
  return chatroommember_.size();
}
void ChatRoomMemberData::clear_chatroommember() {
  chatroommember_.Clear();
}
const ::micromsg::ChatRoomMemberInfo& ChatRoomMemberData::chatroommember(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.ChatRoomMemberData.ChatRoomMember)
  return chatroommember_.Get(index);
}
::micromsg::ChatRoomMemberInfo* ChatRoomMemberData::mutable_chatroommember(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.ChatRoomMemberData.ChatRoomMember)
  return chatroommember_.Mutable(index);
}
::micromsg::ChatRoomMemberInfo* ChatRoomMemberData::add_chatroommember() {
  // @@protoc_insertion_point(field_add:micromsg.ChatRoomMemberData.ChatRoomMember)
  return chatroommember_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::ChatRoomMemberInfo >*
ChatRoomMemberData::mutable_chatroommember() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.ChatRoomMemberData.ChatRoomMember)
  return &chatroommember_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::ChatRoomMemberInfo >&
ChatRoomMemberData::chatroommember() const {
  // @@protoc_insertion_point(field_list:micromsg.ChatRoomMemberData.ChatRoomMember)
  return chatroommember_;
}

// optional uint32 InfoMask = 3;
bool ChatRoomMemberData::has_infomask() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChatRoomMemberData::set_has_infomask() {
  _has_bits_[0] |= 0x00000002u;
}
void ChatRoomMemberData::clear_has_infomask() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChatRoomMemberData::clear_infomask() {
  infomask_ = 0u;
  clear_has_infomask();
}
::google::protobuf::uint32 ChatRoomMemberData::infomask() const {
  // @@protoc_insertion_point(field_get:micromsg.ChatRoomMemberData.InfoMask)
  return infomask_;
}
void ChatRoomMemberData::set_infomask(::google::protobuf::uint32 value) {
  set_has_infomask();
  infomask_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ChatRoomMemberData.InfoMask)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PatternLockInfo::kPatternVersionFieldNumber;
const int PatternLockInfo::kSignFieldNumber;
const int PatternLockInfo::kLockStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PatternLockInfo::PatternLockInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.PatternLockInfo)
}
PatternLockInfo::PatternLockInfo(const PatternLockInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sign()) {
    sign_ = new ::micromsg::SKBuiltinBuffer_t(*from.sign_);
  } else {
    sign_ = NULL;
  }
  ::memcpy(&patternversion_, &from.patternversion_,
    reinterpret_cast<char*>(&lockstatus_) -
    reinterpret_cast<char*>(&patternversion_) + sizeof(lockstatus_));
  // @@protoc_insertion_point(copy_constructor:micromsg.PatternLockInfo)
}

void PatternLockInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&sign_, 0, reinterpret_cast<char*>(&lockstatus_) -
    reinterpret_cast<char*>(&sign_) + sizeof(lockstatus_));
}

PatternLockInfo::~PatternLockInfo() {
  // @@protoc_insertion_point(destructor:micromsg.PatternLockInfo)
  SharedDtor();
}

void PatternLockInfo::SharedDtor() {
  if (this != internal_default_instance()) {
    delete sign_;
  }
}

void PatternLockInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PatternLockInfo::descriptor() {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PatternLockInfo& PatternLockInfo::default_instance() {
  protobuf_mmbase_2eproto::InitDefaults();
  return *internal_default_instance();
}

PatternLockInfo* PatternLockInfo::New(::google::protobuf::Arena* arena) const {
  PatternLockInfo* n = new PatternLockInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PatternLockInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.PatternLockInfo)
  if (has_sign()) {
    GOOGLE_DCHECK(sign_ != NULL);
    sign_->::micromsg::SKBuiltinBuffer_t::Clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&patternversion_, 0, reinterpret_cast<char*>(&lockstatus_) -
      reinterpret_cast<char*>(&patternversion_) + sizeof(lockstatus_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PatternLockInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.PatternLockInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 PatternVersion = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_patternversion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &patternversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinBuffer_t Sign = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sign()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 LockStatus = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_lockstatus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lockstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.PatternLockInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.PatternLockInfo)
  return false;
#undef DO_
}

void PatternLockInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.PatternLockInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 PatternVersion = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->patternversion(), output);
  }

  // optional .micromsg.SKBuiltinBuffer_t Sign = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->sign_, output);
  }

  // optional uint32 LockStatus = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->lockstatus(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.PatternLockInfo)
}

::google::protobuf::uint8* PatternLockInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.PatternLockInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 PatternVersion = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->patternversion(), target);
  }

  // optional .micromsg.SKBuiltinBuffer_t Sign = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->sign_, deterministic, target);
  }

  // optional uint32 LockStatus = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->lockstatus(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.PatternLockInfo)
  return target;
}

size_t PatternLockInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.PatternLockInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .micromsg.SKBuiltinBuffer_t Sign = 2;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sign_);
    }

    // optional uint32 PatternVersion = 1;
    if (has_patternversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->patternversion());
    }

    // optional uint32 LockStatus = 3;
    if (has_lockstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lockstatus());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PatternLockInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.PatternLockInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PatternLockInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PatternLockInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.PatternLockInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.PatternLockInfo)
    MergeFrom(*source);
  }
}

void PatternLockInfo::MergeFrom(const PatternLockInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.PatternLockInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_sign()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.sign());
    }
    if (cached_has_bits & 0x00000002u) {
      patternversion_ = from.patternversion_;
    }
    if (cached_has_bits & 0x00000004u) {
      lockstatus_ = from.lockstatus_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PatternLockInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.PatternLockInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatternLockInfo::CopyFrom(const PatternLockInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.PatternLockInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatternLockInfo::IsInitialized() const {
  if (has_sign()) {
    if (!this->sign_->IsInitialized()) return false;
  }
  return true;
}

void PatternLockInfo::Swap(PatternLockInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PatternLockInfo::InternalSwap(PatternLockInfo* other) {
  std::swap(sign_, other->sign_);
  std::swap(patternversion_, other->patternversion_);
  std::swap(lockstatus_, other->lockstatus_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PatternLockInfo::GetMetadata() const {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PatternLockInfo

// optional uint32 PatternVersion = 1;
bool PatternLockInfo::has_patternversion() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PatternLockInfo::set_has_patternversion() {
  _has_bits_[0] |= 0x00000002u;
}
void PatternLockInfo::clear_has_patternversion() {
  _has_bits_[0] &= ~0x00000002u;
}
void PatternLockInfo::clear_patternversion() {
  patternversion_ = 0u;
  clear_has_patternversion();
}
::google::protobuf::uint32 PatternLockInfo::patternversion() const {
  // @@protoc_insertion_point(field_get:micromsg.PatternLockInfo.PatternVersion)
  return patternversion_;
}
void PatternLockInfo::set_patternversion(::google::protobuf::uint32 value) {
  set_has_patternversion();
  patternversion_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PatternLockInfo.PatternVersion)
}

// optional .micromsg.SKBuiltinBuffer_t Sign = 2;
bool PatternLockInfo::has_sign() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PatternLockInfo::set_has_sign() {
  _has_bits_[0] |= 0x00000001u;
}
void PatternLockInfo::clear_has_sign() {
  _has_bits_[0] &= ~0x00000001u;
}
void PatternLockInfo::clear_sign() {
  if (sign_ != NULL) sign_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_sign();
}
const ::micromsg::SKBuiltinBuffer_t& PatternLockInfo::sign() const {
  // @@protoc_insertion_point(field_get:micromsg.PatternLockInfo.Sign)
  return sign_ != NULL ? *sign_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* PatternLockInfo::mutable_sign() {
  set_has_sign();
  if (sign_ == NULL) {
    sign_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.PatternLockInfo.Sign)
  return sign_;
}
::micromsg::SKBuiltinBuffer_t* PatternLockInfo::release_sign() {
  // @@protoc_insertion_point(field_release:micromsg.PatternLockInfo.Sign)
  clear_has_sign();
  ::micromsg::SKBuiltinBuffer_t* temp = sign_;
  sign_ = NULL;
  return temp;
}
void PatternLockInfo::set_allocated_sign(::micromsg::SKBuiltinBuffer_t* sign) {
  delete sign_;
  sign_ = sign;
  if (sign) {
    set_has_sign();
  } else {
    clear_has_sign();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.PatternLockInfo.Sign)
}

// optional uint32 LockStatus = 3;
bool PatternLockInfo::has_lockstatus() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PatternLockInfo::set_has_lockstatus() {
  _has_bits_[0] |= 0x00000004u;
}
void PatternLockInfo::clear_has_lockstatus() {
  _has_bits_[0] &= ~0x00000004u;
}
void PatternLockInfo::clear_lockstatus() {
  lockstatus_ = 0u;
  clear_has_lockstatus();
}
::google::protobuf::uint32 PatternLockInfo::lockstatus() const {
  // @@protoc_insertion_point(field_get:micromsg.PatternLockInfo.LockStatus)
  return lockstatus_;
}
void PatternLockInfo::set_lockstatus(::google::protobuf::uint32 value) {
  set_has_lockstatus();
  lockstatus_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PatternLockInfo.LockStatus)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModUserInfo::kBitFlagFieldNumber;
const int ModUserInfo::kUserNameFieldNumber;
const int ModUserInfo::kNickNameFieldNumber;
const int ModUserInfo::kBindUinFieldNumber;
const int ModUserInfo::kBindEmailFieldNumber;
const int ModUserInfo::kBindMobileFieldNumber;
const int ModUserInfo::kStatusFieldNumber;
const int ModUserInfo::kImgLenFieldNumber;
const int ModUserInfo::kImgBufFieldNumber;
const int ModUserInfo::kSexFieldNumber;
const int ModUserInfo::kProvinceFieldNumber;
const int ModUserInfo::kCityFieldNumber;
const int ModUserInfo::kSignatureFieldNumber;
const int ModUserInfo::kPersonalCardFieldNumber;
const int ModUserInfo::kDisturbSettingFieldNumber;
const int ModUserInfo::kPluginFlagFieldNumber;
const int ModUserInfo::kVerifyFlagFieldNumber;
const int ModUserInfo::kVerifyInfoFieldNumber;
const int ModUserInfo::kPointFieldNumber;
const int ModUserInfo::kExperienceFieldNumber;
const int ModUserInfo::kLevelFieldNumber;
const int ModUserInfo::kLevelLowExpFieldNumber;
const int ModUserInfo::kLevelHighExpFieldNumber;
const int ModUserInfo::kWeiboFieldNumber;
const int ModUserInfo::kPluginSwitchFieldNumber;
const int ModUserInfo::kGmailListFieldNumber;
const int ModUserInfo::kAliasFieldNumber;
const int ModUserInfo::kWeiboNicknameFieldNumber;
const int ModUserInfo::kWeiboFlagFieldNumber;
const int ModUserInfo::kFaceBookFlagFieldNumber;
const int ModUserInfo::kFBUserIDFieldNumber;
const int ModUserInfo::kFBUserNameFieldNumber;
const int ModUserInfo::kAlbumStyleFieldNumber;
const int ModUserInfo::kAlbumFlagFieldNumber;
const int ModUserInfo::kAlbumBGImgIDFieldNumber;
const int ModUserInfo::kTXNewsCategoryFieldNumber;
const int ModUserInfo::kFBTokenFieldNumber;
const int ModUserInfo::kCountryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModUserInfo::ModUserInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.ModUserInfo)
}
ModUserInfo::ModUserInfo(const ModUserInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  imgbuf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_imgbuf()) {
    imgbuf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imgbuf_);
  }
  province_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_province()) {
    province_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.province_);
  }
  city_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_city()) {
    city_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.city_);
  }
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_signature()) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  verifyinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_verifyinfo()) {
    verifyinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verifyinfo_);
  }
  weibo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_weibo()) {
    weibo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.weibo_);
  }
  alias_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_alias()) {
    alias_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alias_);
  }
  weibonickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_weibonickname()) {
    weibonickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.weibonickname_);
  }
  fbusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fbusername()) {
    fbusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fbusername_);
  }
  albumbgimgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_albumbgimgid()) {
    albumbgimgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.albumbgimgid_);
  }
  fbtoken_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fbtoken()) {
    fbtoken_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fbtoken_);
  }
  country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_country()) {
    country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_);
  }
  if (from.has_username()) {
    username_ = new ::micromsg::SKBuiltinString_t(*from.username_);
  } else {
    username_ = NULL;
  }
  if (from.has_nickname()) {
    nickname_ = new ::micromsg::SKBuiltinString_t(*from.nickname_);
  } else {
    nickname_ = NULL;
  }
  if (from.has_bindemail()) {
    bindemail_ = new ::micromsg::SKBuiltinString_t(*from.bindemail_);
  } else {
    bindemail_ = NULL;
  }
  if (from.has_bindmobile()) {
    bindmobile_ = new ::micromsg::SKBuiltinString_t(*from.bindmobile_);
  } else {
    bindmobile_ = NULL;
  }
  if (from.has_disturbsetting()) {
    disturbsetting_ = new ::micromsg::DisturbSetting(*from.disturbsetting_);
  } else {
    disturbsetting_ = NULL;
  }
  if (from.has_gmaillist()) {
    gmaillist_ = new ::micromsg::GmailList(*from.gmaillist_);
  } else {
    gmaillist_ = NULL;
  }
  ::memcpy(&bitflag_, &from.bitflag_,
    reinterpret_cast<char*>(&txnewscategory_) -
    reinterpret_cast<char*>(&bitflag_) + sizeof(txnewscategory_));
  // @@protoc_insertion_point(copy_constructor:micromsg.ModUserInfo)
}

void ModUserInfo::SharedCtor() {
  imgbuf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  province_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verifyinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weibo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alias_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weibonickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fbusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  albumbgimgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fbtoken_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&username_, 0, reinterpret_cast<char*>(&txnewscategory_) -
    reinterpret_cast<char*>(&username_) + sizeof(txnewscategory_));
  _cached_size_ = 0;
}

ModUserInfo::~ModUserInfo() {
  // @@protoc_insertion_point(destructor:micromsg.ModUserInfo)
  SharedDtor();
}

void ModUserInfo::SharedDtor() {
  imgbuf_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  province_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verifyinfo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weibo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alias_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weibonickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fbusername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  albumbgimgid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fbtoken_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete username_;
  }
  if (this != internal_default_instance()) {
    delete nickname_;
  }
  if (this != internal_default_instance()) {
    delete bindemail_;
  }
  if (this != internal_default_instance()) {
    delete bindmobile_;
  }
  if (this != internal_default_instance()) {
    delete disturbsetting_;
  }
  if (this != internal_default_instance()) {
    delete gmaillist_;
  }
}

void ModUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModUserInfo::descriptor() {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ModUserInfo& ModUserInfo::default_instance() {
  protobuf_mmbase_2eproto::InitDefaults();
  return *internal_default_instance();
}

ModUserInfo* ModUserInfo::New(::google::protobuf::Arena* arena) const {
  ModUserInfo* n = new ModUserInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModUserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.ModUserInfo)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_imgbuf()) {
      GOOGLE_DCHECK(!imgbuf_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*imgbuf_.UnsafeRawStringPointer())->clear();
    }
    if (has_province()) {
      GOOGLE_DCHECK(!province_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*province_.UnsafeRawStringPointer())->clear();
    }
    if (has_city()) {
      GOOGLE_DCHECK(!city_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*city_.UnsafeRawStringPointer())->clear();
    }
    if (has_signature()) {
      GOOGLE_DCHECK(!signature_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*signature_.UnsafeRawStringPointer())->clear();
    }
    if (has_verifyinfo()) {
      GOOGLE_DCHECK(!verifyinfo_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*verifyinfo_.UnsafeRawStringPointer())->clear();
    }
    if (has_weibo()) {
      GOOGLE_DCHECK(!weibo_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*weibo_.UnsafeRawStringPointer())->clear();
    }
    if (has_alias()) {
      GOOGLE_DCHECK(!alias_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*alias_.UnsafeRawStringPointer())->clear();
    }
    if (has_weibonickname()) {
      GOOGLE_DCHECK(!weibonickname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*weibonickname_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    if (has_fbusername()) {
      GOOGLE_DCHECK(!fbusername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fbusername_.UnsafeRawStringPointer())->clear();
    }
    if (has_albumbgimgid()) {
      GOOGLE_DCHECK(!albumbgimgid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*albumbgimgid_.UnsafeRawStringPointer())->clear();
    }
    if (has_fbtoken()) {
      GOOGLE_DCHECK(!fbtoken_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fbtoken_.UnsafeRawStringPointer())->clear();
    }
    if (has_country()) {
      GOOGLE_DCHECK(!country_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*country_.UnsafeRawStringPointer())->clear();
    }
    if (has_username()) {
      GOOGLE_DCHECK(username_ != NULL);
      username_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_nickname()) {
      GOOGLE_DCHECK(nickname_ != NULL);
      nickname_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_bindemail()) {
      GOOGLE_DCHECK(bindemail_ != NULL);
      bindemail_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_bindmobile()) {
      GOOGLE_DCHECK(bindmobile_ != NULL);
      bindmobile_->::micromsg::SKBuiltinString_t::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 196608u) {
    if (has_disturbsetting()) {
      GOOGLE_DCHECK(disturbsetting_ != NULL);
      disturbsetting_->::micromsg::DisturbSetting::Clear();
    }
    if (has_gmaillist()) {
      GOOGLE_DCHECK(gmaillist_ != NULL);
      gmaillist_->::micromsg::GmailList::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 16515072u) {
    ::memset(&bitflag_, 0, reinterpret_cast<char*>(&personalcard_) -
      reinterpret_cast<char*>(&bitflag_) + sizeof(personalcard_));
  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    ::memset(&pluginflag_, 0, reinterpret_cast<char*>(&pluginswitch_) -
      reinterpret_cast<char*>(&pluginflag_) + sizeof(pluginswitch_));
  }
  if (_has_bits_[32 / 32] & 63u) {
    ::memset(&weiboflag_, 0, reinterpret_cast<char*>(&txnewscategory_) -
      reinterpret_cast<char*>(&weiboflag_) + sizeof(txnewscategory_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ModUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.ModUserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 BitFlag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_bitflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bitflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t UserName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_username()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t NickName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nickname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 BindUin = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_binduin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &binduin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t BindEmail = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bindemail()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t BindMobile = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bindmobile()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Status = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ImgLen = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_imglen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &imglen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes ImgBuf = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_imgbuf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 Sex = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_sex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Province = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_province()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->province().data(), this->province().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ModUserInfo.Province");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string City = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->city().data(), this->city().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ModUserInfo.City");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Signature = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ModUserInfo.Signature");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 PersonalCard = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_personalcard();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &personalcard_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.DisturbSetting DisturbSetting = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_disturbsetting()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 PluginFlag = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_pluginflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pluginflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 VerifyFlag = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_verifyflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &verifyflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string VerifyInfo = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verifyinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->verifyinfo().data(), this->verifyinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ModUserInfo.VerifyInfo");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 Point = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_point();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 Experience = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          set_has_experience();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &experience_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 Level = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 LevelLowExp = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          set_has_levellowexp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &levellowexp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 LevelHighExp = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u)) {
          set_has_levelhighexp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &levelhighexp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Weibo = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weibo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->weibo().data(), this->weibo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ModUserInfo.Weibo");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 PluginSwitch = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u)) {
          set_has_pluginswitch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pluginswitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.GmailList GmailList = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gmaillist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Alias = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alias()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->alias().data(), this->alias().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ModUserInfo.Alias");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string WeiboNickname = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weibonickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->weibonickname().data(), this->weibonickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ModUserInfo.WeiboNickname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 WeiboFlag = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u)) {
          set_has_weiboflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weiboflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 FaceBookFlag = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u)) {
          set_has_facebookflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &facebookflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 FBUserID = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u)) {
          set_has_fbuserid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fbuserid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string FBUserName = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(258u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fbusername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fbusername().data(), this->fbusername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ModUserInfo.FBUserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 AlbumStyle = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(264u)) {
          set_has_albumstyle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &albumstyle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 AlbumFlag = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(272u)) {
          set_has_albumflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &albumflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string AlbumBGImgID = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(282u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_albumbgimgid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->albumbgimgid().data(), this->albumbgimgid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ModUserInfo.AlbumBGImgID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 TXNewsCategory = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(288u)) {
          set_has_txnewscategory();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &txnewscategory_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string FBToken = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(298u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fbtoken()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fbtoken().data(), this->fbtoken().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ModUserInfo.FBToken");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Country = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(306u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country().data(), this->country().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ModUserInfo.Country");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.ModUserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.ModUserInfo)
  return false;
#undef DO_
}

void ModUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.ModUserInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 BitFlag = 1;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bitflag(), output);
  }

  // required .micromsg.SKBuiltinString_t UserName = 2;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->username_, output);
  }

  // required .micromsg.SKBuiltinString_t NickName = 3;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->nickname_, output);
  }

  // required uint32 BindUin = 4;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->binduin(), output);
  }

  // required .micromsg.SKBuiltinString_t BindEmail = 5;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->bindemail_, output);
  }

  // required .micromsg.SKBuiltinString_t BindMobile = 6;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->bindmobile_, output);
  }

  // required uint32 Status = 7;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->status(), output);
  }

  // required uint32 ImgLen = 8;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->imglen(), output);
  }

  // optional bytes ImgBuf = 9;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->imgbuf(), output);
  }

  // optional int32 Sex = 10;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->sex(), output);
  }

  // optional string Province = 11;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->province().data(), this->province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModUserInfo.Province");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->province(), output);
  }

  // optional string City = 12;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModUserInfo.City");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->city(), output);
  }

  // optional string Signature = 13;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModUserInfo.Signature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->signature(), output);
  }

  // optional uint32 PersonalCard = 14;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->personalcard(), output);
  }

  // optional .micromsg.DisturbSetting DisturbSetting = 15;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->disturbsetting_, output);
  }

  // optional uint32 PluginFlag = 16;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->pluginflag(), output);
  }

  // optional uint32 VerifyFlag = 17;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->verifyflag(), output);
  }

  // optional string VerifyInfo = 18;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verifyinfo().data(), this->verifyinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModUserInfo.VerifyInfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->verifyinfo(), output);
  }

  // optional int32 Point = 19;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->point(), output);
  }

  // optional int32 Experience = 20;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->experience(), output);
  }

  // optional int32 Level = 21;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->level(), output);
  }

  // optional int32 LevelLowExp = 22;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->levellowexp(), output);
  }

  // optional int32 LevelHighExp = 23;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->levelhighexp(), output);
  }

  // optional string Weibo = 24;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->weibo().data(), this->weibo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModUserInfo.Weibo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      24, this->weibo(), output);
  }

  // optional uint32 PluginSwitch = 25;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->pluginswitch(), output);
  }

  // optional .micromsg.GmailList GmailList = 26;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, *this->gmaillist_, output);
  }

  // optional string Alias = 27;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModUserInfo.Alias");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      27, this->alias(), output);
  }

  // optional string WeiboNickname = 28;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->weibonickname().data(), this->weibonickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModUserInfo.WeiboNickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      28, this->weibonickname(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 WeiboFlag = 29;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->weiboflag(), output);
  }

  // optional uint32 FaceBookFlag = 30;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->facebookflag(), output);
  }

  // optional uint64 FBUserID = 31;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(31, this->fbuserid(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string FBUserName = 32;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fbusername().data(), this->fbusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModUserInfo.FBUserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      32, this->fbusername(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 AlbumStyle = 33;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->albumstyle(), output);
  }

  // optional int32 AlbumFlag = 34;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->albumflag(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string AlbumBGImgID = 35;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->albumbgimgid().data(), this->albumbgimgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModUserInfo.AlbumBGImgID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      35, this->albumbgimgid(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 TXNewsCategory = 36;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->txnewscategory(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string FBToken = 37;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fbtoken().data(), this->fbtoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModUserInfo.FBToken");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      37, this->fbtoken(), output);
  }

  // optional string Country = 38;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModUserInfo.Country");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      38, this->country(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.ModUserInfo)
}

::google::protobuf::uint8* ModUserInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.ModUserInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 BitFlag = 1;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bitflag(), target);
  }

  // required .micromsg.SKBuiltinString_t UserName = 2;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->username_, deterministic, target);
  }

  // required .micromsg.SKBuiltinString_t NickName = 3;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->nickname_, deterministic, target);
  }

  // required uint32 BindUin = 4;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->binduin(), target);
  }

  // required .micromsg.SKBuiltinString_t BindEmail = 5;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->bindemail_, deterministic, target);
  }

  // required .micromsg.SKBuiltinString_t BindMobile = 6;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->bindmobile_, deterministic, target);
  }

  // required uint32 Status = 7;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->status(), target);
  }

  // required uint32 ImgLen = 8;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->imglen(), target);
  }

  // optional bytes ImgBuf = 9;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->imgbuf(), target);
  }

  // optional int32 Sex = 10;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->sex(), target);
  }

  // optional string Province = 11;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->province().data(), this->province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModUserInfo.Province");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->province(), target);
  }

  // optional string City = 12;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModUserInfo.City");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->city(), target);
  }

  // optional string Signature = 13;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModUserInfo.Signature");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->signature(), target);
  }

  // optional uint32 PersonalCard = 14;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->personalcard(), target);
  }

  // optional .micromsg.DisturbSetting DisturbSetting = 15;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->disturbsetting_, deterministic, target);
  }

  // optional uint32 PluginFlag = 16;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->pluginflag(), target);
  }

  // optional uint32 VerifyFlag = 17;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->verifyflag(), target);
  }

  // optional string VerifyInfo = 18;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verifyinfo().data(), this->verifyinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModUserInfo.VerifyInfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->verifyinfo(), target);
  }

  // optional int32 Point = 19;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->point(), target);
  }

  // optional int32 Experience = 20;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->experience(), target);
  }

  // optional int32 Level = 21;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->level(), target);
  }

  // optional int32 LevelLowExp = 22;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->levellowexp(), target);
  }

  // optional int32 LevelHighExp = 23;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->levelhighexp(), target);
  }

  // optional string Weibo = 24;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->weibo().data(), this->weibo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModUserInfo.Weibo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->weibo(), target);
  }

  // optional uint32 PluginSwitch = 25;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->pluginswitch(), target);
  }

  // optional .micromsg.GmailList GmailList = 26;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        26, *this->gmaillist_, deterministic, target);
  }

  // optional string Alias = 27;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModUserInfo.Alias");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->alias(), target);
  }

  // optional string WeiboNickname = 28;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->weibonickname().data(), this->weibonickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModUserInfo.WeiboNickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->weibonickname(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 WeiboFlag = 29;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->weiboflag(), target);
  }

  // optional uint32 FaceBookFlag = 30;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->facebookflag(), target);
  }

  // optional uint64 FBUserID = 31;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(31, this->fbuserid(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string FBUserName = 32;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fbusername().data(), this->fbusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModUserInfo.FBUserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        32, this->fbusername(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 AlbumStyle = 33;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->albumstyle(), target);
  }

  // optional int32 AlbumFlag = 34;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->albumflag(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string AlbumBGImgID = 35;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->albumbgimgid().data(), this->albumbgimgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModUserInfo.AlbumBGImgID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        35, this->albumbgimgid(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 TXNewsCategory = 36;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(36, this->txnewscategory(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string FBToken = 37;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fbtoken().data(), this->fbtoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModUserInfo.FBToken");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        37, this->fbtoken(), target);
  }

  // optional string Country = 38;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModUserInfo.Country");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        38, this->country(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.ModUserInfo)
  return target;
}

size_t ModUserInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.ModUserInfo)
  size_t total_size = 0;

  if (has_username()) {
    // required .micromsg.SKBuiltinString_t UserName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->username_);
  }

  if (has_nickname()) {
    // required .micromsg.SKBuiltinString_t NickName = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->nickname_);
  }

  if (has_bindemail()) {
    // required .micromsg.SKBuiltinString_t BindEmail = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bindemail_);
  }

  if (has_bindmobile()) {
    // required .micromsg.SKBuiltinString_t BindMobile = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bindmobile_);
  }

  if (has_bitflag()) {
    // required uint32 BitFlag = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bitflag());
  }

  if (has_binduin()) {
    // required uint32 BindUin = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->binduin());
  }

  if (has_status()) {
    // required uint32 Status = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());
  }

  if (has_imglen()) {
    // required uint32 ImgLen = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->imglen());
  }

  return total_size;
}
size_t ModUserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.ModUserInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x003cf000) ^ 0x003cf000) == 0) {  // All required fields are present.
    // required .micromsg.SKBuiltinString_t UserName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->username_);

    // required .micromsg.SKBuiltinString_t NickName = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->nickname_);

    // required .micromsg.SKBuiltinString_t BindEmail = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bindemail_);

    // required .micromsg.SKBuiltinString_t BindMobile = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bindmobile_);

    // required uint32 BitFlag = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bitflag());

    // required uint32 BindUin = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->binduin());

    // required uint32 Status = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());

    // required uint32 ImgLen = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->imglen());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes ImgBuf = 9;
    if (has_imgbuf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->imgbuf());
    }

    // optional string Province = 11;
    if (has_province()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->province());
    }

    // optional string City = 12;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city());
    }

    // optional string Signature = 13;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signature());
    }

    // optional string VerifyInfo = 18;
    if (has_verifyinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->verifyinfo());
    }

    // optional string Weibo = 24;
    if (has_weibo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->weibo());
    }

    // optional string Alias = 27;
    if (has_alias()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alias());
    }

    // optional string WeiboNickname = 28;
    if (has_weibonickname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->weibonickname());
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional string FBUserName = 32;
    if (has_fbusername()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fbusername());
    }

    // optional string AlbumBGImgID = 35;
    if (has_albumbgimgid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->albumbgimgid());
    }

    // optional string FBToken = 37;
    if (has_fbtoken()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fbtoken());
    }

    // optional string Country = 38;
    if (has_country()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country());
    }

  }
  if (_has_bits_[16 / 32] & 196608u) {
    // optional .micromsg.DisturbSetting DisturbSetting = 15;
    if (has_disturbsetting()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->disturbsetting_);
    }

    // optional .micromsg.GmailList GmailList = 26;
    if (has_gmaillist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->gmaillist_);
    }

  }
  if (_has_bits_[16 / 32] & 12582912u) {
    // optional int32 Sex = 10;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional uint32 PersonalCard = 14;
    if (has_personalcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->personalcard());
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional uint32 PluginFlag = 16;
    if (has_pluginflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pluginflag());
    }

    // optional uint32 VerifyFlag = 17;
    if (has_verifyflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->verifyflag());
    }

    // optional int32 Point = 19;
    if (has_point()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->point());
    }

    // optional int32 Experience = 20;
    if (has_experience()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->experience());
    }

    // optional int32 Level = 21;
    if (has_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 LevelLowExp = 22;
    if (has_levellowexp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->levellowexp());
    }

    // optional int32 LevelHighExp = 23;
    if (has_levelhighexp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->levelhighexp());
    }

    // optional uint32 PluginSwitch = 25;
    if (has_pluginswitch()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pluginswitch());
    }

  }
  if (_has_bits_[32 / 32] & 63u) {
    // optional uint32 WeiboFlag = 29;
    if (has_weiboflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weiboflag());
    }

    // optional uint32 FaceBookFlag = 30;
    if (has_facebookflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->facebookflag());
    }

    // optional uint64 FBUserID = 31;
    if (has_fbuserid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fbuserid());
    }

    // optional int32 AlbumStyle = 33;
    if (has_albumstyle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->albumstyle());
    }

    // optional int32 AlbumFlag = 34;
    if (has_albumflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->albumflag());
    }

    // optional uint32 TXNewsCategory = 36;
    if (has_txnewscategory()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->txnewscategory());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.ModUserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ModUserInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ModUserInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.ModUserInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.ModUserInfo)
    MergeFrom(*source);
  }
}

void ModUserInfo::MergeFrom(const ModUserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.ModUserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_imgbuf();
      imgbuf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imgbuf_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_province();
      province_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.province_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_city();
      city_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.city_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_signature();
      signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_verifyinfo();
      verifyinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verifyinfo_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_weibo();
      weibo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.weibo_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_alias();
      alias_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alias_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_weibonickname();
      weibonickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.weibonickname_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_fbusername();
      fbusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fbusername_);
    }
    if (cached_has_bits & 0x00000200u) {
      set_has_albumbgimgid();
      albumbgimgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.albumbgimgid_);
    }
    if (cached_has_bits & 0x00000400u) {
      set_has_fbtoken();
      fbtoken_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fbtoken_);
    }
    if (cached_has_bits & 0x00000800u) {
      set_has_country();
      country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_);
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_username()->::micromsg::SKBuiltinString_t::MergeFrom(from.username());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_nickname()->::micromsg::SKBuiltinString_t::MergeFrom(from.nickname());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_bindemail()->::micromsg::SKBuiltinString_t::MergeFrom(from.bindemail());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_bindmobile()->::micromsg::SKBuiltinString_t::MergeFrom(from.bindmobile());
    }
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_disturbsetting()->::micromsg::DisturbSetting::MergeFrom(from.disturbsetting());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_gmaillist()->::micromsg::GmailList::MergeFrom(from.gmaillist());
    }
    if (cached_has_bits & 0x00040000u) {
      bitflag_ = from.bitflag_;
    }
    if (cached_has_bits & 0x00080000u) {
      binduin_ = from.binduin_;
    }
    if (cached_has_bits & 0x00100000u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00200000u) {
      imglen_ = from.imglen_;
    }
    if (cached_has_bits & 0x00400000u) {
      sex_ = from.sex_;
    }
    if (cached_has_bits & 0x00800000u) {
      personalcard_ = from.personalcard_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      pluginflag_ = from.pluginflag_;
    }
    if (cached_has_bits & 0x02000000u) {
      verifyflag_ = from.verifyflag_;
    }
    if (cached_has_bits & 0x04000000u) {
      point_ = from.point_;
    }
    if (cached_has_bits & 0x08000000u) {
      experience_ = from.experience_;
    }
    if (cached_has_bits & 0x10000000u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x20000000u) {
      levellowexp_ = from.levellowexp_;
    }
    if (cached_has_bits & 0x40000000u) {
      levelhighexp_ = from.levelhighexp_;
    }
    if (cached_has_bits & 0x80000000u) {
      pluginswitch_ = from.pluginswitch_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      weiboflag_ = from.weiboflag_;
    }
    if (cached_has_bits & 0x00000002u) {
      facebookflag_ = from.facebookflag_;
    }
    if (cached_has_bits & 0x00000004u) {
      fbuserid_ = from.fbuserid_;
    }
    if (cached_has_bits & 0x00000008u) {
      albumstyle_ = from.albumstyle_;
    }
    if (cached_has_bits & 0x00000010u) {
      albumflag_ = from.albumflag_;
    }
    if (cached_has_bits & 0x00000020u) {
      txnewscategory_ = from.txnewscategory_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void ModUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.ModUserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModUserInfo::CopyFrom(const ModUserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.ModUserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModUserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x003cf000) != 0x003cf000) return false;
  if (has_disturbsetting()) {
    if (!this->disturbsetting_->IsInitialized()) return false;
  }
  if (has_gmaillist()) {
    if (!this->gmaillist_->IsInitialized()) return false;
  }
  return true;
}

void ModUserInfo::Swap(ModUserInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModUserInfo::InternalSwap(ModUserInfo* other) {
  imgbuf_.Swap(&other->imgbuf_);
  province_.Swap(&other->province_);
  city_.Swap(&other->city_);
  signature_.Swap(&other->signature_);
  verifyinfo_.Swap(&other->verifyinfo_);
  weibo_.Swap(&other->weibo_);
  alias_.Swap(&other->alias_);
  weibonickname_.Swap(&other->weibonickname_);
  fbusername_.Swap(&other->fbusername_);
  albumbgimgid_.Swap(&other->albumbgimgid_);
  fbtoken_.Swap(&other->fbtoken_);
  country_.Swap(&other->country_);
  std::swap(username_, other->username_);
  std::swap(nickname_, other->nickname_);
  std::swap(bindemail_, other->bindemail_);
  std::swap(bindmobile_, other->bindmobile_);
  std::swap(disturbsetting_, other->disturbsetting_);
  std::swap(gmaillist_, other->gmaillist_);
  std::swap(bitflag_, other->bitflag_);
  std::swap(binduin_, other->binduin_);
  std::swap(status_, other->status_);
  std::swap(imglen_, other->imglen_);
  std::swap(sex_, other->sex_);
  std::swap(personalcard_, other->personalcard_);
  std::swap(pluginflag_, other->pluginflag_);
  std::swap(verifyflag_, other->verifyflag_);
  std::swap(point_, other->point_);
  std::swap(experience_, other->experience_);
  std::swap(level_, other->level_);
  std::swap(levellowexp_, other->levellowexp_);
  std::swap(levelhighexp_, other->levelhighexp_);
  std::swap(pluginswitch_, other->pluginswitch_);
  std::swap(weiboflag_, other->weiboflag_);
  std::swap(facebookflag_, other->facebookflag_);
  std::swap(fbuserid_, other->fbuserid_);
  std::swap(albumstyle_, other->albumstyle_);
  std::swap(albumflag_, other->albumflag_);
  std::swap(txnewscategory_, other->txnewscategory_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModUserInfo::GetMetadata() const {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModUserInfo

// required uint32 BitFlag = 1;
bool ModUserInfo::has_bitflag() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void ModUserInfo::set_has_bitflag() {
  _has_bits_[0] |= 0x00040000u;
}
void ModUserInfo::clear_has_bitflag() {
  _has_bits_[0] &= ~0x00040000u;
}
void ModUserInfo::clear_bitflag() {
  bitflag_ = 0u;
  clear_has_bitflag();
}
::google::protobuf::uint32 ModUserInfo::bitflag() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.BitFlag)
  return bitflag_;
}
void ModUserInfo::set_bitflag(::google::protobuf::uint32 value) {
  set_has_bitflag();
  bitflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModUserInfo.BitFlag)
}

// required .micromsg.SKBuiltinString_t UserName = 2;
bool ModUserInfo::has_username() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ModUserInfo::set_has_username() {
  _has_bits_[0] |= 0x00001000u;
}
void ModUserInfo::clear_has_username() {
  _has_bits_[0] &= ~0x00001000u;
}
void ModUserInfo::clear_username() {
  if (username_ != NULL) username_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_username();
}
const ::micromsg::SKBuiltinString_t& ModUserInfo::username() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.UserName)
  return username_ != NULL ? *username_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* ModUserInfo::mutable_username() {
  set_has_username();
  if (username_ == NULL) {
    username_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ModUserInfo.UserName)
  return username_;
}
::micromsg::SKBuiltinString_t* ModUserInfo::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.ModUserInfo.UserName)
  clear_has_username();
  ::micromsg::SKBuiltinString_t* temp = username_;
  username_ = NULL;
  return temp;
}
void ModUserInfo::set_allocated_username(::micromsg::SKBuiltinString_t* username) {
  delete username_;
  username_ = username;
  if (username) {
    set_has_username();
  } else {
    clear_has_username();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModUserInfo.UserName)
}

// required .micromsg.SKBuiltinString_t NickName = 3;
bool ModUserInfo::has_nickname() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void ModUserInfo::set_has_nickname() {
  _has_bits_[0] |= 0x00002000u;
}
void ModUserInfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00002000u;
}
void ModUserInfo::clear_nickname() {
  if (nickname_ != NULL) nickname_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_nickname();
}
const ::micromsg::SKBuiltinString_t& ModUserInfo::nickname() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.NickName)
  return nickname_ != NULL ? *nickname_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* ModUserInfo::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == NULL) {
    nickname_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ModUserInfo.NickName)
  return nickname_;
}
::micromsg::SKBuiltinString_t* ModUserInfo::release_nickname() {
  // @@protoc_insertion_point(field_release:micromsg.ModUserInfo.NickName)
  clear_has_nickname();
  ::micromsg::SKBuiltinString_t* temp = nickname_;
  nickname_ = NULL;
  return temp;
}
void ModUserInfo::set_allocated_nickname(::micromsg::SKBuiltinString_t* nickname) {
  delete nickname_;
  nickname_ = nickname;
  if (nickname) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModUserInfo.NickName)
}

// required uint32 BindUin = 4;
bool ModUserInfo::has_binduin() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void ModUserInfo::set_has_binduin() {
  _has_bits_[0] |= 0x00080000u;
}
void ModUserInfo::clear_has_binduin() {
  _has_bits_[0] &= ~0x00080000u;
}
void ModUserInfo::clear_binduin() {
  binduin_ = 0u;
  clear_has_binduin();
}
::google::protobuf::uint32 ModUserInfo::binduin() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.BindUin)
  return binduin_;
}
void ModUserInfo::set_binduin(::google::protobuf::uint32 value) {
  set_has_binduin();
  binduin_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModUserInfo.BindUin)
}

// required .micromsg.SKBuiltinString_t BindEmail = 5;
bool ModUserInfo::has_bindemail() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void ModUserInfo::set_has_bindemail() {
  _has_bits_[0] |= 0x00004000u;
}
void ModUserInfo::clear_has_bindemail() {
  _has_bits_[0] &= ~0x00004000u;
}
void ModUserInfo::clear_bindemail() {
  if (bindemail_ != NULL) bindemail_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_bindemail();
}
const ::micromsg::SKBuiltinString_t& ModUserInfo::bindemail() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.BindEmail)
  return bindemail_ != NULL ? *bindemail_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* ModUserInfo::mutable_bindemail() {
  set_has_bindemail();
  if (bindemail_ == NULL) {
    bindemail_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ModUserInfo.BindEmail)
  return bindemail_;
}
::micromsg::SKBuiltinString_t* ModUserInfo::release_bindemail() {
  // @@protoc_insertion_point(field_release:micromsg.ModUserInfo.BindEmail)
  clear_has_bindemail();
  ::micromsg::SKBuiltinString_t* temp = bindemail_;
  bindemail_ = NULL;
  return temp;
}
void ModUserInfo::set_allocated_bindemail(::micromsg::SKBuiltinString_t* bindemail) {
  delete bindemail_;
  bindemail_ = bindemail;
  if (bindemail) {
    set_has_bindemail();
  } else {
    clear_has_bindemail();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModUserInfo.BindEmail)
}

// required .micromsg.SKBuiltinString_t BindMobile = 6;
bool ModUserInfo::has_bindmobile() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void ModUserInfo::set_has_bindmobile() {
  _has_bits_[0] |= 0x00008000u;
}
void ModUserInfo::clear_has_bindmobile() {
  _has_bits_[0] &= ~0x00008000u;
}
void ModUserInfo::clear_bindmobile() {
  if (bindmobile_ != NULL) bindmobile_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_bindmobile();
}
const ::micromsg::SKBuiltinString_t& ModUserInfo::bindmobile() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.BindMobile)
  return bindmobile_ != NULL ? *bindmobile_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* ModUserInfo::mutable_bindmobile() {
  set_has_bindmobile();
  if (bindmobile_ == NULL) {
    bindmobile_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ModUserInfo.BindMobile)
  return bindmobile_;
}
::micromsg::SKBuiltinString_t* ModUserInfo::release_bindmobile() {
  // @@protoc_insertion_point(field_release:micromsg.ModUserInfo.BindMobile)
  clear_has_bindmobile();
  ::micromsg::SKBuiltinString_t* temp = bindmobile_;
  bindmobile_ = NULL;
  return temp;
}
void ModUserInfo::set_allocated_bindmobile(::micromsg::SKBuiltinString_t* bindmobile) {
  delete bindmobile_;
  bindmobile_ = bindmobile;
  if (bindmobile) {
    set_has_bindmobile();
  } else {
    clear_has_bindmobile();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModUserInfo.BindMobile)
}

// required uint32 Status = 7;
bool ModUserInfo::has_status() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void ModUserInfo::set_has_status() {
  _has_bits_[0] |= 0x00100000u;
}
void ModUserInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00100000u;
}
void ModUserInfo::clear_status() {
  status_ = 0u;
  clear_has_status();
}
::google::protobuf::uint32 ModUserInfo::status() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.Status)
  return status_;
}
void ModUserInfo::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModUserInfo.Status)
}

// required uint32 ImgLen = 8;
bool ModUserInfo::has_imglen() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void ModUserInfo::set_has_imglen() {
  _has_bits_[0] |= 0x00200000u;
}
void ModUserInfo::clear_has_imglen() {
  _has_bits_[0] &= ~0x00200000u;
}
void ModUserInfo::clear_imglen() {
  imglen_ = 0u;
  clear_has_imglen();
}
::google::protobuf::uint32 ModUserInfo::imglen() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.ImgLen)
  return imglen_;
}
void ModUserInfo::set_imglen(::google::protobuf::uint32 value) {
  set_has_imglen();
  imglen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModUserInfo.ImgLen)
}

// optional bytes ImgBuf = 9;
bool ModUserInfo::has_imgbuf() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ModUserInfo::set_has_imgbuf() {
  _has_bits_[0] |= 0x00000001u;
}
void ModUserInfo::clear_has_imgbuf() {
  _has_bits_[0] &= ~0x00000001u;
}
void ModUserInfo::clear_imgbuf() {
  imgbuf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_imgbuf();
}
const ::std::string& ModUserInfo::imgbuf() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.ImgBuf)
  return imgbuf_.GetNoArena();
}
void ModUserInfo::set_imgbuf(const ::std::string& value) {
  set_has_imgbuf();
  imgbuf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModUserInfo.ImgBuf)
}
#if LANG_CXX11
void ModUserInfo::set_imgbuf(::std::string&& value) {
  set_has_imgbuf();
  imgbuf_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModUserInfo.ImgBuf)
}
#endif
void ModUserInfo::set_imgbuf(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_imgbuf();
  imgbuf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModUserInfo.ImgBuf)
}
void ModUserInfo::set_imgbuf(const void* value, size_t size) {
  set_has_imgbuf();
  imgbuf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModUserInfo.ImgBuf)
}
::std::string* ModUserInfo::mutable_imgbuf() {
  set_has_imgbuf();
  // @@protoc_insertion_point(field_mutable:micromsg.ModUserInfo.ImgBuf)
  return imgbuf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModUserInfo::release_imgbuf() {
  // @@protoc_insertion_point(field_release:micromsg.ModUserInfo.ImgBuf)
  clear_has_imgbuf();
  return imgbuf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModUserInfo::set_allocated_imgbuf(::std::string* imgbuf) {
  if (imgbuf != NULL) {
    set_has_imgbuf();
  } else {
    clear_has_imgbuf();
  }
  imgbuf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imgbuf);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModUserInfo.ImgBuf)
}

// optional int32 Sex = 10;
bool ModUserInfo::has_sex() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void ModUserInfo::set_has_sex() {
  _has_bits_[0] |= 0x00400000u;
}
void ModUserInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00400000u;
}
void ModUserInfo::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
::google::protobuf::int32 ModUserInfo::sex() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.Sex)
  return sex_;
}
void ModUserInfo::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModUserInfo.Sex)
}

// optional string Province = 11;
bool ModUserInfo::has_province() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ModUserInfo::set_has_province() {
  _has_bits_[0] |= 0x00000002u;
}
void ModUserInfo::clear_has_province() {
  _has_bits_[0] &= ~0x00000002u;
}
void ModUserInfo::clear_province() {
  province_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_province();
}
const ::std::string& ModUserInfo::province() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.Province)
  return province_.GetNoArena();
}
void ModUserInfo::set_province(const ::std::string& value) {
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModUserInfo.Province)
}
#if LANG_CXX11
void ModUserInfo::set_province(::std::string&& value) {
  set_has_province();
  province_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModUserInfo.Province)
}
#endif
void ModUserInfo::set_province(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModUserInfo.Province)
}
void ModUserInfo::set_province(const char* value, size_t size) {
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModUserInfo.Province)
}
::std::string* ModUserInfo::mutable_province() {
  set_has_province();
  // @@protoc_insertion_point(field_mutable:micromsg.ModUserInfo.Province)
  return province_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModUserInfo::release_province() {
  // @@protoc_insertion_point(field_release:micromsg.ModUserInfo.Province)
  clear_has_province();
  return province_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModUserInfo::set_allocated_province(::std::string* province) {
  if (province != NULL) {
    set_has_province();
  } else {
    clear_has_province();
  }
  province_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), province);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModUserInfo.Province)
}

// optional string City = 12;
bool ModUserInfo::has_city() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ModUserInfo::set_has_city() {
  _has_bits_[0] |= 0x00000004u;
}
void ModUserInfo::clear_has_city() {
  _has_bits_[0] &= ~0x00000004u;
}
void ModUserInfo::clear_city() {
  city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_city();
}
const ::std::string& ModUserInfo::city() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.City)
  return city_.GetNoArena();
}
void ModUserInfo::set_city(const ::std::string& value) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModUserInfo.City)
}
#if LANG_CXX11
void ModUserInfo::set_city(::std::string&& value) {
  set_has_city();
  city_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModUserInfo.City)
}
#endif
void ModUserInfo::set_city(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModUserInfo.City)
}
void ModUserInfo::set_city(const char* value, size_t size) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModUserInfo.City)
}
::std::string* ModUserInfo::mutable_city() {
  set_has_city();
  // @@protoc_insertion_point(field_mutable:micromsg.ModUserInfo.City)
  return city_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModUserInfo::release_city() {
  // @@protoc_insertion_point(field_release:micromsg.ModUserInfo.City)
  clear_has_city();
  return city_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModUserInfo::set_allocated_city(::std::string* city) {
  if (city != NULL) {
    set_has_city();
  } else {
    clear_has_city();
  }
  city_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModUserInfo.City)
}

// optional string Signature = 13;
bool ModUserInfo::has_signature() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ModUserInfo::set_has_signature() {
  _has_bits_[0] |= 0x00000008u;
}
void ModUserInfo::clear_has_signature() {
  _has_bits_[0] &= ~0x00000008u;
}
void ModUserInfo::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_signature();
}
const ::std::string& ModUserInfo::signature() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.Signature)
  return signature_.GetNoArena();
}
void ModUserInfo::set_signature(const ::std::string& value) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModUserInfo.Signature)
}
#if LANG_CXX11
void ModUserInfo::set_signature(::std::string&& value) {
  set_has_signature();
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModUserInfo.Signature)
}
#endif
void ModUserInfo::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModUserInfo.Signature)
}
void ModUserInfo::set_signature(const char* value, size_t size) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModUserInfo.Signature)
}
::std::string* ModUserInfo::mutable_signature() {
  set_has_signature();
  // @@protoc_insertion_point(field_mutable:micromsg.ModUserInfo.Signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModUserInfo::release_signature() {
  // @@protoc_insertion_point(field_release:micromsg.ModUserInfo.Signature)
  clear_has_signature();
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModUserInfo::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModUserInfo.Signature)
}

// optional uint32 PersonalCard = 14;
bool ModUserInfo::has_personalcard() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void ModUserInfo::set_has_personalcard() {
  _has_bits_[0] |= 0x00800000u;
}
void ModUserInfo::clear_has_personalcard() {
  _has_bits_[0] &= ~0x00800000u;
}
void ModUserInfo::clear_personalcard() {
  personalcard_ = 0u;
  clear_has_personalcard();
}
::google::protobuf::uint32 ModUserInfo::personalcard() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.PersonalCard)
  return personalcard_;
}
void ModUserInfo::set_personalcard(::google::protobuf::uint32 value) {
  set_has_personalcard();
  personalcard_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModUserInfo.PersonalCard)
}

// optional .micromsg.DisturbSetting DisturbSetting = 15;
bool ModUserInfo::has_disturbsetting() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void ModUserInfo::set_has_disturbsetting() {
  _has_bits_[0] |= 0x00010000u;
}
void ModUserInfo::clear_has_disturbsetting() {
  _has_bits_[0] &= ~0x00010000u;
}
void ModUserInfo::clear_disturbsetting() {
  if (disturbsetting_ != NULL) disturbsetting_->::micromsg::DisturbSetting::Clear();
  clear_has_disturbsetting();
}
const ::micromsg::DisturbSetting& ModUserInfo::disturbsetting() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.DisturbSetting)
  return disturbsetting_ != NULL ? *disturbsetting_
                         : *::micromsg::DisturbSetting::internal_default_instance();
}
::micromsg::DisturbSetting* ModUserInfo::mutable_disturbsetting() {
  set_has_disturbsetting();
  if (disturbsetting_ == NULL) {
    disturbsetting_ = new ::micromsg::DisturbSetting;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ModUserInfo.DisturbSetting)
  return disturbsetting_;
}
::micromsg::DisturbSetting* ModUserInfo::release_disturbsetting() {
  // @@protoc_insertion_point(field_release:micromsg.ModUserInfo.DisturbSetting)
  clear_has_disturbsetting();
  ::micromsg::DisturbSetting* temp = disturbsetting_;
  disturbsetting_ = NULL;
  return temp;
}
void ModUserInfo::set_allocated_disturbsetting(::micromsg::DisturbSetting* disturbsetting) {
  delete disturbsetting_;
  disturbsetting_ = disturbsetting;
  if (disturbsetting) {
    set_has_disturbsetting();
  } else {
    clear_has_disturbsetting();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModUserInfo.DisturbSetting)
}

// optional uint32 PluginFlag = 16;
bool ModUserInfo::has_pluginflag() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void ModUserInfo::set_has_pluginflag() {
  _has_bits_[0] |= 0x01000000u;
}
void ModUserInfo::clear_has_pluginflag() {
  _has_bits_[0] &= ~0x01000000u;
}
void ModUserInfo::clear_pluginflag() {
  pluginflag_ = 0u;
  clear_has_pluginflag();
}
::google::protobuf::uint32 ModUserInfo::pluginflag() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.PluginFlag)
  return pluginflag_;
}
void ModUserInfo::set_pluginflag(::google::protobuf::uint32 value) {
  set_has_pluginflag();
  pluginflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModUserInfo.PluginFlag)
}

// optional uint32 VerifyFlag = 17;
bool ModUserInfo::has_verifyflag() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void ModUserInfo::set_has_verifyflag() {
  _has_bits_[0] |= 0x02000000u;
}
void ModUserInfo::clear_has_verifyflag() {
  _has_bits_[0] &= ~0x02000000u;
}
void ModUserInfo::clear_verifyflag() {
  verifyflag_ = 0u;
  clear_has_verifyflag();
}
::google::protobuf::uint32 ModUserInfo::verifyflag() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.VerifyFlag)
  return verifyflag_;
}
void ModUserInfo::set_verifyflag(::google::protobuf::uint32 value) {
  set_has_verifyflag();
  verifyflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModUserInfo.VerifyFlag)
}

// optional string VerifyInfo = 18;
bool ModUserInfo::has_verifyinfo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ModUserInfo::set_has_verifyinfo() {
  _has_bits_[0] |= 0x00000010u;
}
void ModUserInfo::clear_has_verifyinfo() {
  _has_bits_[0] &= ~0x00000010u;
}
void ModUserInfo::clear_verifyinfo() {
  verifyinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_verifyinfo();
}
const ::std::string& ModUserInfo::verifyinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.VerifyInfo)
  return verifyinfo_.GetNoArena();
}
void ModUserInfo::set_verifyinfo(const ::std::string& value) {
  set_has_verifyinfo();
  verifyinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModUserInfo.VerifyInfo)
}
#if LANG_CXX11
void ModUserInfo::set_verifyinfo(::std::string&& value) {
  set_has_verifyinfo();
  verifyinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModUserInfo.VerifyInfo)
}
#endif
void ModUserInfo::set_verifyinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_verifyinfo();
  verifyinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModUserInfo.VerifyInfo)
}
void ModUserInfo::set_verifyinfo(const char* value, size_t size) {
  set_has_verifyinfo();
  verifyinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModUserInfo.VerifyInfo)
}
::std::string* ModUserInfo::mutable_verifyinfo() {
  set_has_verifyinfo();
  // @@protoc_insertion_point(field_mutable:micromsg.ModUserInfo.VerifyInfo)
  return verifyinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModUserInfo::release_verifyinfo() {
  // @@protoc_insertion_point(field_release:micromsg.ModUserInfo.VerifyInfo)
  clear_has_verifyinfo();
  return verifyinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModUserInfo::set_allocated_verifyinfo(::std::string* verifyinfo) {
  if (verifyinfo != NULL) {
    set_has_verifyinfo();
  } else {
    clear_has_verifyinfo();
  }
  verifyinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verifyinfo);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModUserInfo.VerifyInfo)
}

// optional int32 Point = 19;
bool ModUserInfo::has_point() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void ModUserInfo::set_has_point() {
  _has_bits_[0] |= 0x04000000u;
}
void ModUserInfo::clear_has_point() {
  _has_bits_[0] &= ~0x04000000u;
}
void ModUserInfo::clear_point() {
  point_ = 0;
  clear_has_point();
}
::google::protobuf::int32 ModUserInfo::point() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.Point)
  return point_;
}
void ModUserInfo::set_point(::google::protobuf::int32 value) {
  set_has_point();
  point_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModUserInfo.Point)
}

// optional int32 Experience = 20;
bool ModUserInfo::has_experience() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void ModUserInfo::set_has_experience() {
  _has_bits_[0] |= 0x08000000u;
}
void ModUserInfo::clear_has_experience() {
  _has_bits_[0] &= ~0x08000000u;
}
void ModUserInfo::clear_experience() {
  experience_ = 0;
  clear_has_experience();
}
::google::protobuf::int32 ModUserInfo::experience() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.Experience)
  return experience_;
}
void ModUserInfo::set_experience(::google::protobuf::int32 value) {
  set_has_experience();
  experience_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModUserInfo.Experience)
}

// optional int32 Level = 21;
bool ModUserInfo::has_level() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void ModUserInfo::set_has_level() {
  _has_bits_[0] |= 0x10000000u;
}
void ModUserInfo::clear_has_level() {
  _has_bits_[0] &= ~0x10000000u;
}
void ModUserInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
::google::protobuf::int32 ModUserInfo::level() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.Level)
  return level_;
}
void ModUserInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModUserInfo.Level)
}

// optional int32 LevelLowExp = 22;
bool ModUserInfo::has_levellowexp() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void ModUserInfo::set_has_levellowexp() {
  _has_bits_[0] |= 0x20000000u;
}
void ModUserInfo::clear_has_levellowexp() {
  _has_bits_[0] &= ~0x20000000u;
}
void ModUserInfo::clear_levellowexp() {
  levellowexp_ = 0;
  clear_has_levellowexp();
}
::google::protobuf::int32 ModUserInfo::levellowexp() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.LevelLowExp)
  return levellowexp_;
}
void ModUserInfo::set_levellowexp(::google::protobuf::int32 value) {
  set_has_levellowexp();
  levellowexp_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModUserInfo.LevelLowExp)
}

// optional int32 LevelHighExp = 23;
bool ModUserInfo::has_levelhighexp() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void ModUserInfo::set_has_levelhighexp() {
  _has_bits_[0] |= 0x40000000u;
}
void ModUserInfo::clear_has_levelhighexp() {
  _has_bits_[0] &= ~0x40000000u;
}
void ModUserInfo::clear_levelhighexp() {
  levelhighexp_ = 0;
  clear_has_levelhighexp();
}
::google::protobuf::int32 ModUserInfo::levelhighexp() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.LevelHighExp)
  return levelhighexp_;
}
void ModUserInfo::set_levelhighexp(::google::protobuf::int32 value) {
  set_has_levelhighexp();
  levelhighexp_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModUserInfo.LevelHighExp)
}

// optional string Weibo = 24;
bool ModUserInfo::has_weibo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ModUserInfo::set_has_weibo() {
  _has_bits_[0] |= 0x00000020u;
}
void ModUserInfo::clear_has_weibo() {
  _has_bits_[0] &= ~0x00000020u;
}
void ModUserInfo::clear_weibo() {
  weibo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_weibo();
}
const ::std::string& ModUserInfo::weibo() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.Weibo)
  return weibo_.GetNoArena();
}
void ModUserInfo::set_weibo(const ::std::string& value) {
  set_has_weibo();
  weibo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModUserInfo.Weibo)
}
#if LANG_CXX11
void ModUserInfo::set_weibo(::std::string&& value) {
  set_has_weibo();
  weibo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModUserInfo.Weibo)
}
#endif
void ModUserInfo::set_weibo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_weibo();
  weibo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModUserInfo.Weibo)
}
void ModUserInfo::set_weibo(const char* value, size_t size) {
  set_has_weibo();
  weibo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModUserInfo.Weibo)
}
::std::string* ModUserInfo::mutable_weibo() {
  set_has_weibo();
  // @@protoc_insertion_point(field_mutable:micromsg.ModUserInfo.Weibo)
  return weibo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModUserInfo::release_weibo() {
  // @@protoc_insertion_point(field_release:micromsg.ModUserInfo.Weibo)
  clear_has_weibo();
  return weibo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModUserInfo::set_allocated_weibo(::std::string* weibo) {
  if (weibo != NULL) {
    set_has_weibo();
  } else {
    clear_has_weibo();
  }
  weibo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), weibo);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModUserInfo.Weibo)
}

// optional uint32 PluginSwitch = 25;
bool ModUserInfo::has_pluginswitch() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void ModUserInfo::set_has_pluginswitch() {
  _has_bits_[0] |= 0x80000000u;
}
void ModUserInfo::clear_has_pluginswitch() {
  _has_bits_[0] &= ~0x80000000u;
}
void ModUserInfo::clear_pluginswitch() {
  pluginswitch_ = 0u;
  clear_has_pluginswitch();
}
::google::protobuf::uint32 ModUserInfo::pluginswitch() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.PluginSwitch)
  return pluginswitch_;
}
void ModUserInfo::set_pluginswitch(::google::protobuf::uint32 value) {
  set_has_pluginswitch();
  pluginswitch_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModUserInfo.PluginSwitch)
}

// optional .micromsg.GmailList GmailList = 26;
bool ModUserInfo::has_gmaillist() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void ModUserInfo::set_has_gmaillist() {
  _has_bits_[0] |= 0x00020000u;
}
void ModUserInfo::clear_has_gmaillist() {
  _has_bits_[0] &= ~0x00020000u;
}
void ModUserInfo::clear_gmaillist() {
  if (gmaillist_ != NULL) gmaillist_->::micromsg::GmailList::Clear();
  clear_has_gmaillist();
}
const ::micromsg::GmailList& ModUserInfo::gmaillist() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.GmailList)
  return gmaillist_ != NULL ? *gmaillist_
                         : *::micromsg::GmailList::internal_default_instance();
}
::micromsg::GmailList* ModUserInfo::mutable_gmaillist() {
  set_has_gmaillist();
  if (gmaillist_ == NULL) {
    gmaillist_ = new ::micromsg::GmailList;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ModUserInfo.GmailList)
  return gmaillist_;
}
::micromsg::GmailList* ModUserInfo::release_gmaillist() {
  // @@protoc_insertion_point(field_release:micromsg.ModUserInfo.GmailList)
  clear_has_gmaillist();
  ::micromsg::GmailList* temp = gmaillist_;
  gmaillist_ = NULL;
  return temp;
}
void ModUserInfo::set_allocated_gmaillist(::micromsg::GmailList* gmaillist) {
  delete gmaillist_;
  gmaillist_ = gmaillist;
  if (gmaillist) {
    set_has_gmaillist();
  } else {
    clear_has_gmaillist();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModUserInfo.GmailList)
}

// optional string Alias = 27;
bool ModUserInfo::has_alias() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ModUserInfo::set_has_alias() {
  _has_bits_[0] |= 0x00000040u;
}
void ModUserInfo::clear_has_alias() {
  _has_bits_[0] &= ~0x00000040u;
}
void ModUserInfo::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_alias();
}
const ::std::string& ModUserInfo::alias() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.Alias)
  return alias_.GetNoArena();
}
void ModUserInfo::set_alias(const ::std::string& value) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModUserInfo.Alias)
}
#if LANG_CXX11
void ModUserInfo::set_alias(::std::string&& value) {
  set_has_alias();
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModUserInfo.Alias)
}
#endif
void ModUserInfo::set_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModUserInfo.Alias)
}
void ModUserInfo::set_alias(const char* value, size_t size) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModUserInfo.Alias)
}
::std::string* ModUserInfo::mutable_alias() {
  set_has_alias();
  // @@protoc_insertion_point(field_mutable:micromsg.ModUserInfo.Alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModUserInfo::release_alias() {
  // @@protoc_insertion_point(field_release:micromsg.ModUserInfo.Alias)
  clear_has_alias();
  return alias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModUserInfo::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    set_has_alias();
  } else {
    clear_has_alias();
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModUserInfo.Alias)
}

// optional string WeiboNickname = 28;
bool ModUserInfo::has_weibonickname() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ModUserInfo::set_has_weibonickname() {
  _has_bits_[0] |= 0x00000080u;
}
void ModUserInfo::clear_has_weibonickname() {
  _has_bits_[0] &= ~0x00000080u;
}
void ModUserInfo::clear_weibonickname() {
  weibonickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_weibonickname();
}
const ::std::string& ModUserInfo::weibonickname() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.WeiboNickname)
  return weibonickname_.GetNoArena();
}
void ModUserInfo::set_weibonickname(const ::std::string& value) {
  set_has_weibonickname();
  weibonickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModUserInfo.WeiboNickname)
}
#if LANG_CXX11
void ModUserInfo::set_weibonickname(::std::string&& value) {
  set_has_weibonickname();
  weibonickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModUserInfo.WeiboNickname)
}
#endif
void ModUserInfo::set_weibonickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_weibonickname();
  weibonickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModUserInfo.WeiboNickname)
}
void ModUserInfo::set_weibonickname(const char* value, size_t size) {
  set_has_weibonickname();
  weibonickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModUserInfo.WeiboNickname)
}
::std::string* ModUserInfo::mutable_weibonickname() {
  set_has_weibonickname();
  // @@protoc_insertion_point(field_mutable:micromsg.ModUserInfo.WeiboNickname)
  return weibonickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModUserInfo::release_weibonickname() {
  // @@protoc_insertion_point(field_release:micromsg.ModUserInfo.WeiboNickname)
  clear_has_weibonickname();
  return weibonickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModUserInfo::set_allocated_weibonickname(::std::string* weibonickname) {
  if (weibonickname != NULL) {
    set_has_weibonickname();
  } else {
    clear_has_weibonickname();
  }
  weibonickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), weibonickname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModUserInfo.WeiboNickname)
}

// optional uint32 WeiboFlag = 29;
bool ModUserInfo::has_weiboflag() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void ModUserInfo::set_has_weiboflag() {
  _has_bits_[1] |= 0x00000001u;
}
void ModUserInfo::clear_has_weiboflag() {
  _has_bits_[1] &= ~0x00000001u;
}
void ModUserInfo::clear_weiboflag() {
  weiboflag_ = 0u;
  clear_has_weiboflag();
}
::google::protobuf::uint32 ModUserInfo::weiboflag() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.WeiboFlag)
  return weiboflag_;
}
void ModUserInfo::set_weiboflag(::google::protobuf::uint32 value) {
  set_has_weiboflag();
  weiboflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModUserInfo.WeiboFlag)
}

// optional uint32 FaceBookFlag = 30;
bool ModUserInfo::has_facebookflag() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void ModUserInfo::set_has_facebookflag() {
  _has_bits_[1] |= 0x00000002u;
}
void ModUserInfo::clear_has_facebookflag() {
  _has_bits_[1] &= ~0x00000002u;
}
void ModUserInfo::clear_facebookflag() {
  facebookflag_ = 0u;
  clear_has_facebookflag();
}
::google::protobuf::uint32 ModUserInfo::facebookflag() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.FaceBookFlag)
  return facebookflag_;
}
void ModUserInfo::set_facebookflag(::google::protobuf::uint32 value) {
  set_has_facebookflag();
  facebookflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModUserInfo.FaceBookFlag)
}

// optional uint64 FBUserID = 31;
bool ModUserInfo::has_fbuserid() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void ModUserInfo::set_has_fbuserid() {
  _has_bits_[1] |= 0x00000004u;
}
void ModUserInfo::clear_has_fbuserid() {
  _has_bits_[1] &= ~0x00000004u;
}
void ModUserInfo::clear_fbuserid() {
  fbuserid_ = GOOGLE_ULONGLONG(0);
  clear_has_fbuserid();
}
::google::protobuf::uint64 ModUserInfo::fbuserid() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.FBUserID)
  return fbuserid_;
}
void ModUserInfo::set_fbuserid(::google::protobuf::uint64 value) {
  set_has_fbuserid();
  fbuserid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModUserInfo.FBUserID)
}

// optional string FBUserName = 32;
bool ModUserInfo::has_fbusername() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ModUserInfo::set_has_fbusername() {
  _has_bits_[0] |= 0x00000100u;
}
void ModUserInfo::clear_has_fbusername() {
  _has_bits_[0] &= ~0x00000100u;
}
void ModUserInfo::clear_fbusername() {
  fbusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fbusername();
}
const ::std::string& ModUserInfo::fbusername() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.FBUserName)
  return fbusername_.GetNoArena();
}
void ModUserInfo::set_fbusername(const ::std::string& value) {
  set_has_fbusername();
  fbusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModUserInfo.FBUserName)
}
#if LANG_CXX11
void ModUserInfo::set_fbusername(::std::string&& value) {
  set_has_fbusername();
  fbusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModUserInfo.FBUserName)
}
#endif
void ModUserInfo::set_fbusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fbusername();
  fbusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModUserInfo.FBUserName)
}
void ModUserInfo::set_fbusername(const char* value, size_t size) {
  set_has_fbusername();
  fbusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModUserInfo.FBUserName)
}
::std::string* ModUserInfo::mutable_fbusername() {
  set_has_fbusername();
  // @@protoc_insertion_point(field_mutable:micromsg.ModUserInfo.FBUserName)
  return fbusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModUserInfo::release_fbusername() {
  // @@protoc_insertion_point(field_release:micromsg.ModUserInfo.FBUserName)
  clear_has_fbusername();
  return fbusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModUserInfo::set_allocated_fbusername(::std::string* fbusername) {
  if (fbusername != NULL) {
    set_has_fbusername();
  } else {
    clear_has_fbusername();
  }
  fbusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fbusername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModUserInfo.FBUserName)
}

// optional int32 AlbumStyle = 33;
bool ModUserInfo::has_albumstyle() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void ModUserInfo::set_has_albumstyle() {
  _has_bits_[1] |= 0x00000008u;
}
void ModUserInfo::clear_has_albumstyle() {
  _has_bits_[1] &= ~0x00000008u;
}
void ModUserInfo::clear_albumstyle() {
  albumstyle_ = 0;
  clear_has_albumstyle();
}
::google::protobuf::int32 ModUserInfo::albumstyle() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.AlbumStyle)
  return albumstyle_;
}
void ModUserInfo::set_albumstyle(::google::protobuf::int32 value) {
  set_has_albumstyle();
  albumstyle_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModUserInfo.AlbumStyle)
}

// optional int32 AlbumFlag = 34;
bool ModUserInfo::has_albumflag() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void ModUserInfo::set_has_albumflag() {
  _has_bits_[1] |= 0x00000010u;
}
void ModUserInfo::clear_has_albumflag() {
  _has_bits_[1] &= ~0x00000010u;
}
void ModUserInfo::clear_albumflag() {
  albumflag_ = 0;
  clear_has_albumflag();
}
::google::protobuf::int32 ModUserInfo::albumflag() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.AlbumFlag)
  return albumflag_;
}
void ModUserInfo::set_albumflag(::google::protobuf::int32 value) {
  set_has_albumflag();
  albumflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModUserInfo.AlbumFlag)
}

// optional string AlbumBGImgID = 35;
bool ModUserInfo::has_albumbgimgid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ModUserInfo::set_has_albumbgimgid() {
  _has_bits_[0] |= 0x00000200u;
}
void ModUserInfo::clear_has_albumbgimgid() {
  _has_bits_[0] &= ~0x00000200u;
}
void ModUserInfo::clear_albumbgimgid() {
  albumbgimgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_albumbgimgid();
}
const ::std::string& ModUserInfo::albumbgimgid() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.AlbumBGImgID)
  return albumbgimgid_.GetNoArena();
}
void ModUserInfo::set_albumbgimgid(const ::std::string& value) {
  set_has_albumbgimgid();
  albumbgimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModUserInfo.AlbumBGImgID)
}
#if LANG_CXX11
void ModUserInfo::set_albumbgimgid(::std::string&& value) {
  set_has_albumbgimgid();
  albumbgimgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModUserInfo.AlbumBGImgID)
}
#endif
void ModUserInfo::set_albumbgimgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_albumbgimgid();
  albumbgimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModUserInfo.AlbumBGImgID)
}
void ModUserInfo::set_albumbgimgid(const char* value, size_t size) {
  set_has_albumbgimgid();
  albumbgimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModUserInfo.AlbumBGImgID)
}
::std::string* ModUserInfo::mutable_albumbgimgid() {
  set_has_albumbgimgid();
  // @@protoc_insertion_point(field_mutable:micromsg.ModUserInfo.AlbumBGImgID)
  return albumbgimgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModUserInfo::release_albumbgimgid() {
  // @@protoc_insertion_point(field_release:micromsg.ModUserInfo.AlbumBGImgID)
  clear_has_albumbgimgid();
  return albumbgimgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModUserInfo::set_allocated_albumbgimgid(::std::string* albumbgimgid) {
  if (albumbgimgid != NULL) {
    set_has_albumbgimgid();
  } else {
    clear_has_albumbgimgid();
  }
  albumbgimgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), albumbgimgid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModUserInfo.AlbumBGImgID)
}

// optional uint32 TXNewsCategory = 36;
bool ModUserInfo::has_txnewscategory() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void ModUserInfo::set_has_txnewscategory() {
  _has_bits_[1] |= 0x00000020u;
}
void ModUserInfo::clear_has_txnewscategory() {
  _has_bits_[1] &= ~0x00000020u;
}
void ModUserInfo::clear_txnewscategory() {
  txnewscategory_ = 0u;
  clear_has_txnewscategory();
}
::google::protobuf::uint32 ModUserInfo::txnewscategory() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.TXNewsCategory)
  return txnewscategory_;
}
void ModUserInfo::set_txnewscategory(::google::protobuf::uint32 value) {
  set_has_txnewscategory();
  txnewscategory_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModUserInfo.TXNewsCategory)
}

// optional string FBToken = 37;
bool ModUserInfo::has_fbtoken() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ModUserInfo::set_has_fbtoken() {
  _has_bits_[0] |= 0x00000400u;
}
void ModUserInfo::clear_has_fbtoken() {
  _has_bits_[0] &= ~0x00000400u;
}
void ModUserInfo::clear_fbtoken() {
  fbtoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fbtoken();
}
const ::std::string& ModUserInfo::fbtoken() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.FBToken)
  return fbtoken_.GetNoArena();
}
void ModUserInfo::set_fbtoken(const ::std::string& value) {
  set_has_fbtoken();
  fbtoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModUserInfo.FBToken)
}
#if LANG_CXX11
void ModUserInfo::set_fbtoken(::std::string&& value) {
  set_has_fbtoken();
  fbtoken_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModUserInfo.FBToken)
}
#endif
void ModUserInfo::set_fbtoken(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fbtoken();
  fbtoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModUserInfo.FBToken)
}
void ModUserInfo::set_fbtoken(const char* value, size_t size) {
  set_has_fbtoken();
  fbtoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModUserInfo.FBToken)
}
::std::string* ModUserInfo::mutable_fbtoken() {
  set_has_fbtoken();
  // @@protoc_insertion_point(field_mutable:micromsg.ModUserInfo.FBToken)
  return fbtoken_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModUserInfo::release_fbtoken() {
  // @@protoc_insertion_point(field_release:micromsg.ModUserInfo.FBToken)
  clear_has_fbtoken();
  return fbtoken_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModUserInfo::set_allocated_fbtoken(::std::string* fbtoken) {
  if (fbtoken != NULL) {
    set_has_fbtoken();
  } else {
    clear_has_fbtoken();
  }
  fbtoken_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fbtoken);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModUserInfo.FBToken)
}

// optional string Country = 38;
bool ModUserInfo::has_country() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ModUserInfo::set_has_country() {
  _has_bits_[0] |= 0x00000800u;
}
void ModUserInfo::clear_has_country() {
  _has_bits_[0] &= ~0x00000800u;
}
void ModUserInfo::clear_country() {
  country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country();
}
const ::std::string& ModUserInfo::country() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.Country)
  return country_.GetNoArena();
}
void ModUserInfo::set_country(const ::std::string& value) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModUserInfo.Country)
}
#if LANG_CXX11
void ModUserInfo::set_country(::std::string&& value) {
  set_has_country();
  country_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModUserInfo.Country)
}
#endif
void ModUserInfo::set_country(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModUserInfo.Country)
}
void ModUserInfo::set_country(const char* value, size_t size) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModUserInfo.Country)
}
::std::string* ModUserInfo::mutable_country() {
  set_has_country();
  // @@protoc_insertion_point(field_mutable:micromsg.ModUserInfo.Country)
  return country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModUserInfo::release_country() {
  // @@protoc_insertion_point(field_release:micromsg.ModUserInfo.Country)
  clear_has_country();
  return country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModUserInfo::set_allocated_country(::std::string* country) {
  if (country != NULL) {
    set_has_country();
  } else {
    clear_has_country();
  }
  country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModUserInfo.Country)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserInfoExt::kSnsUserInfoFieldNumber;
const int UserInfoExt::kMyBrandListFieldNumber;
const int UserInfoExt::kMsgPushSoundFieldNumber;
const int UserInfoExt::kVoipPushSoundFieldNumber;
const int UserInfoExt::kBigChatRoomSizeFieldNumber;
const int UserInfoExt::kBigChatRoomQuotaFieldNumber;
const int UserInfoExt::kBigChatRoomInviteFieldNumber;
const int UserInfoExt::kSafeMobileFieldNumber;
const int UserInfoExt::kBigHeadImgUrlFieldNumber;
const int UserInfoExt::kSmallHeadImgUrlFieldNumber;
const int UserInfoExt::kMainAcctTypeFieldNumber;
const int UserInfoExt::kExtXmlFieldNumber;
const int UserInfoExt::kSafeDeviceListFieldNumber;
const int UserInfoExt::kSafeDeviceFieldNumber;
const int UserInfoExt::kGrayscaleFlagFieldNumber;
const int UserInfoExt::kGoogleContactNameFieldNumber;
const int UserInfoExt::kIDCardNumFieldNumber;
const int UserInfoExt::kRealNameFieldNumber;
const int UserInfoExt::kRegCountryFieldNumber;
const int UserInfoExt::kBBPPIDFieldNumber;
const int UserInfoExt::kBBPINFieldNumber;
const int UserInfoExt::kBBMNickNameFieldNumber;
const int UserInfoExt::kLinkedinContactItemFieldNumber;
const int UserInfoExt::kKFInfoFieldNumber;
const int UserInfoExt::kPatternLockInfoFieldNumber;
const int UserInfoExt::kSecurityDeviceIdFieldNumber;
const int UserInfoExt::kPayWalletTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserInfoExt::UserInfoExt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.UserInfoExt)
}
UserInfoExt::UserInfoExt(const UserInfoExt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mybrandlist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mybrandlist()) {
    mybrandlist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mybrandlist_);
  }
  msgpushsound_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_msgpushsound()) {
    msgpushsound_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msgpushsound_);
  }
  voippushsound_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_voippushsound()) {
    voippushsound_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.voippushsound_);
  }
  safemobile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_safemobile()) {
    safemobile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.safemobile_);
  }
  bigheadimgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bigheadimgurl()) {
    bigheadimgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bigheadimgurl_);
  }
  smallheadimgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_smallheadimgurl()) {
    smallheadimgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smallheadimgurl_);
  }
  googlecontactname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_googlecontactname()) {
    googlecontactname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.googlecontactname_);
  }
  idcardnum_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_idcardnum()) {
    idcardnum_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.idcardnum_);
  }
  realname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_realname()) {
    realname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.realname_);
  }
  regcountry_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_regcountry()) {
    regcountry_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.regcountry_);
  }
  bbppid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bbppid()) {
    bbppid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bbppid_);
  }
  bbpin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bbpin()) {
    bbpin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bbpin_);
  }
  bbmnickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bbmnickname()) {
    bbmnickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bbmnickname_);
  }
  kfinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_kfinfo()) {
    kfinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kfinfo_);
  }
  securitydeviceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_securitydeviceid()) {
    securitydeviceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.securitydeviceid_);
  }
  if (from.has_snsuserinfo()) {
    snsuserinfo_ = new ::micromsg::SnsUserInfo(*from.snsuserinfo_);
  } else {
    snsuserinfo_ = NULL;
  }
  if (from.has_extxml()) {
    extxml_ = new ::micromsg::SKBuiltinString_t(*from.extxml_);
  } else {
    extxml_ = NULL;
  }
  if (from.has_safedevicelist()) {
    safedevicelist_ = new ::micromsg::SafeDeviceList(*from.safedevicelist_);
  } else {
    safedevicelist_ = NULL;
  }
  if (from.has_linkedincontactitem()) {
    linkedincontactitem_ = new ::micromsg::LinkedinContactItem(*from.linkedincontactitem_);
  } else {
    linkedincontactitem_ = NULL;
  }
  if (from.has_patternlockinfo()) {
    patternlockinfo_ = new ::micromsg::PatternLockInfo(*from.patternlockinfo_);
  } else {
    patternlockinfo_ = NULL;
  }
  ::memcpy(&bigchatroomsize_, &from.bigchatroomsize_,
    reinterpret_cast<char*>(&paywallettype_) -
    reinterpret_cast<char*>(&bigchatroomsize_) + sizeof(paywallettype_));
  // @@protoc_insertion_point(copy_constructor:micromsg.UserInfoExt)
}

void UserInfoExt::SharedCtor() {
  _cached_size_ = 0;
  mybrandlist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgpushsound_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  voippushsound_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  safemobile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bigheadimgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smallheadimgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  googlecontactname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  idcardnum_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  realname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  regcountry_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bbppid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bbpin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bbmnickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kfinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  securitydeviceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&snsuserinfo_, 0, reinterpret_cast<char*>(&paywallettype_) -
    reinterpret_cast<char*>(&snsuserinfo_) + sizeof(paywallettype_));
}

UserInfoExt::~UserInfoExt() {
  // @@protoc_insertion_point(destructor:micromsg.UserInfoExt)
  SharedDtor();
}

void UserInfoExt::SharedDtor() {
  mybrandlist_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgpushsound_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  voippushsound_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  safemobile_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bigheadimgurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smallheadimgurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  googlecontactname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  idcardnum_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  realname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  regcountry_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bbppid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bbpin_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bbmnickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kfinfo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  securitydeviceid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete snsuserinfo_;
  }
  if (this != internal_default_instance()) {
    delete extxml_;
  }
  if (this != internal_default_instance()) {
    delete safedevicelist_;
  }
  if (this != internal_default_instance()) {
    delete linkedincontactitem_;
  }
  if (this != internal_default_instance()) {
    delete patternlockinfo_;
  }
}

void UserInfoExt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInfoExt::descriptor() {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserInfoExt& UserInfoExt::default_instance() {
  protobuf_mmbase_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserInfoExt* UserInfoExt::New(::google::protobuf::Arena* arena) const {
  UserInfoExt* n = new UserInfoExt;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserInfoExt::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.UserInfoExt)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_mybrandlist()) {
      GOOGLE_DCHECK(!mybrandlist_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mybrandlist_.UnsafeRawStringPointer())->clear();
    }
    if (has_msgpushsound()) {
      GOOGLE_DCHECK(!msgpushsound_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*msgpushsound_.UnsafeRawStringPointer())->clear();
    }
    if (has_voippushsound()) {
      GOOGLE_DCHECK(!voippushsound_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*voippushsound_.UnsafeRawStringPointer())->clear();
    }
    if (has_safemobile()) {
      GOOGLE_DCHECK(!safemobile_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*safemobile_.UnsafeRawStringPointer())->clear();
    }
    if (has_bigheadimgurl()) {
      GOOGLE_DCHECK(!bigheadimgurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bigheadimgurl_.UnsafeRawStringPointer())->clear();
    }
    if (has_smallheadimgurl()) {
      GOOGLE_DCHECK(!smallheadimgurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*smallheadimgurl_.UnsafeRawStringPointer())->clear();
    }
    if (has_googlecontactname()) {
      GOOGLE_DCHECK(!googlecontactname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*googlecontactname_.UnsafeRawStringPointer())->clear();
    }
    if (has_idcardnum()) {
      GOOGLE_DCHECK(!idcardnum_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*idcardnum_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    if (has_realname()) {
      GOOGLE_DCHECK(!realname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*realname_.UnsafeRawStringPointer())->clear();
    }
    if (has_regcountry()) {
      GOOGLE_DCHECK(!regcountry_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*regcountry_.UnsafeRawStringPointer())->clear();
    }
    if (has_bbppid()) {
      GOOGLE_DCHECK(!bbppid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bbppid_.UnsafeRawStringPointer())->clear();
    }
    if (has_bbpin()) {
      GOOGLE_DCHECK(!bbpin_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bbpin_.UnsafeRawStringPointer())->clear();
    }
    if (has_bbmnickname()) {
      GOOGLE_DCHECK(!bbmnickname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bbmnickname_.UnsafeRawStringPointer())->clear();
    }
    if (has_kfinfo()) {
      GOOGLE_DCHECK(!kfinfo_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*kfinfo_.UnsafeRawStringPointer())->clear();
    }
    if (has_securitydeviceid()) {
      GOOGLE_DCHECK(!securitydeviceid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*securitydeviceid_.UnsafeRawStringPointer())->clear();
    }
    if (has_snsuserinfo()) {
      GOOGLE_DCHECK(snsuserinfo_ != NULL);
      snsuserinfo_->::micromsg::SnsUserInfo::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 983040u) {
    if (has_extxml()) {
      GOOGLE_DCHECK(extxml_ != NULL);
      extxml_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_safedevicelist()) {
      GOOGLE_DCHECK(safedevicelist_ != NULL);
      safedevicelist_->::micromsg::SafeDeviceList::Clear();
    }
    if (has_linkedincontactitem()) {
      GOOGLE_DCHECK(linkedincontactitem_ != NULL);
      linkedincontactitem_->::micromsg::LinkedinContactItem::Clear();
    }
    if (has_patternlockinfo()) {
      GOOGLE_DCHECK(patternlockinfo_ != NULL);
      patternlockinfo_->::micromsg::PatternLockInfo::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 15728640u) {
    ::memset(&bigchatroomsize_, 0, reinterpret_cast<char*>(&mainaccttype_) -
      reinterpret_cast<char*>(&bigchatroomsize_) + sizeof(mainaccttype_));
  }
  if (_has_bits_[24 / 32] & 117440512u) {
    ::memset(&safedevice_, 0, reinterpret_cast<char*>(&paywallettype_) -
      reinterpret_cast<char*>(&safedevice_) + sizeof(paywallettype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserInfoExt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.UserInfoExt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.SnsUserInfo SnsUserInfo = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_snsuserinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string MyBrandList = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mybrandlist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mybrandlist().data(), this->mybrandlist().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UserInfoExt.MyBrandList");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string MsgPushSound = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgpushsound()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msgpushsound().data(), this->msgpushsound().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UserInfoExt.MsgPushSound");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string VoipPushSound = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_voippushsound()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->voippushsound().data(), this->voippushsound().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UserInfoExt.VoipPushSound");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 BigChatRoomSize = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_bigchatroomsize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bigchatroomsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 BigChatRoomQuota = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_bigchatroomquota();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bigchatroomquota_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 BigChatRoomInvite = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_bigchatroominvite();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bigchatroominvite_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string SafeMobile = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_safemobile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->safemobile().data(), this->safemobile().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UserInfoExt.SafeMobile");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string BigHeadImgUrl = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bigheadimgurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bigheadimgurl().data(), this->bigheadimgurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UserInfoExt.BigHeadImgUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string SmallHeadImgUrl = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_smallheadimgurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->smallheadimgurl().data(), this->smallheadimgurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UserInfoExt.SmallHeadImgUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 MainAcctType = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_mainaccttype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mainaccttype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinString_t ExtXml = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extxml()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SafeDeviceList SafeDeviceList = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_safedevicelist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 SafeDevice = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_safedevice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &safedevice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 GrayscaleFlag = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_grayscaleflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grayscaleflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string GoogleContactName = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_googlecontactname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->googlecontactname().data(), this->googlecontactname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UserInfoExt.GoogleContactName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string IDCardNum = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_idcardnum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->idcardnum().data(), this->idcardnum().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UserInfoExt.IDCardNum");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string RealName = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_realname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->realname().data(), this->realname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UserInfoExt.RealName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string RegCountry = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_regcountry()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->regcountry().data(), this->regcountry().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UserInfoExt.RegCountry");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string BBPPID = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bbppid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bbppid().data(), this->bbppid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UserInfoExt.BBPPID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string BBPIN = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bbpin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bbpin().data(), this->bbpin().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UserInfoExt.BBPIN");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string BBMNickName = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bbmnickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bbmnickname().data(), this->bbmnickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UserInfoExt.BBMNickName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.LinkedinContactItem LinkedinContactItem = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linkedincontactitem()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string KFInfo = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kfinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->kfinfo().data(), this->kfinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UserInfoExt.KFInfo");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.PatternLockInfo PatternLockInfo = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_patternlockinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string SecurityDeviceId = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_securitydeviceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->securitydeviceid().data(), this->securitydeviceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.UserInfoExt.SecurityDeviceId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 PayWalletType = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u)) {
          set_has_paywallettype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &paywallettype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.UserInfoExt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.UserInfoExt)
  return false;
#undef DO_
}

void UserInfoExt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.UserInfoExt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SnsUserInfo SnsUserInfo = 1;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->snsuserinfo_, output);
  }

  // optional string MyBrandList = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mybrandlist().data(), this->mybrandlist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UserInfoExt.MyBrandList");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mybrandlist(), output);
  }

  // optional string MsgPushSound = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msgpushsound().data(), this->msgpushsound().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UserInfoExt.MsgPushSound");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->msgpushsound(), output);
  }

  // optional string VoipPushSound = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->voippushsound().data(), this->voippushsound().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UserInfoExt.VoipPushSound");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->voippushsound(), output);
  }

  // optional uint32 BigChatRoomSize = 5;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->bigchatroomsize(), output);
  }

  // optional uint32 BigChatRoomQuota = 6;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->bigchatroomquota(), output);
  }

  // optional uint32 BigChatRoomInvite = 7;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->bigchatroominvite(), output);
  }

  // optional string SafeMobile = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->safemobile().data(), this->safemobile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UserInfoExt.SafeMobile");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->safemobile(), output);
  }

  // optional string BigHeadImgUrl = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bigheadimgurl().data(), this->bigheadimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UserInfoExt.BigHeadImgUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->bigheadimgurl(), output);
  }

  // optional string SmallHeadImgUrl = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->smallheadimgurl().data(), this->smallheadimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UserInfoExt.SmallHeadImgUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->smallheadimgurl(), output);
  }

  // optional uint32 MainAcctType = 11;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->mainaccttype(), output);
  }

  // optional .micromsg.SKBuiltinString_t ExtXml = 12;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->extxml_, output);
  }

  // optional .micromsg.SafeDeviceList SafeDeviceList = 13;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->safedevicelist_, output);
  }

  // optional uint32 SafeDevice = 14;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->safedevice(), output);
  }

  // optional uint32 GrayscaleFlag = 15;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->grayscaleflag(), output);
  }

  // optional string GoogleContactName = 16;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->googlecontactname().data(), this->googlecontactname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UserInfoExt.GoogleContactName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->googlecontactname(), output);
  }

  // optional string IDCardNum = 17;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->idcardnum().data(), this->idcardnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UserInfoExt.IDCardNum");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->idcardnum(), output);
  }

  // optional string RealName = 18;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->realname().data(), this->realname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UserInfoExt.RealName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->realname(), output);
  }

  // optional string RegCountry = 19;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->regcountry().data(), this->regcountry().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UserInfoExt.RegCountry");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->regcountry(), output);
  }

  // optional string BBPPID = 20;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bbppid().data(), this->bbppid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UserInfoExt.BBPPID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->bbppid(), output);
  }

  // optional string BBPIN = 21;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bbpin().data(), this->bbpin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UserInfoExt.BBPIN");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->bbpin(), output);
  }

  // optional string BBMNickName = 22;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bbmnickname().data(), this->bbmnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UserInfoExt.BBMNickName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->bbmnickname(), output);
  }

  // optional .micromsg.LinkedinContactItem LinkedinContactItem = 23;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, *this->linkedincontactitem_, output);
  }

  // optional string KFInfo = 24;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->kfinfo().data(), this->kfinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UserInfoExt.KFInfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      24, this->kfinfo(), output);
  }

  // optional .micromsg.PatternLockInfo PatternLockInfo = 25;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, *this->patternlockinfo_, output);
  }

  // optional string SecurityDeviceId = 26;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->securitydeviceid().data(), this->securitydeviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UserInfoExt.SecurityDeviceId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      26, this->securitydeviceid(), output);
  }

  // optional uint32 PayWalletType = 27;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->paywallettype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.UserInfoExt)
}

::google::protobuf::uint8* UserInfoExt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.UserInfoExt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SnsUserInfo SnsUserInfo = 1;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->snsuserinfo_, deterministic, target);
  }

  // optional string MyBrandList = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mybrandlist().data(), this->mybrandlist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UserInfoExt.MyBrandList");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mybrandlist(), target);
  }

  // optional string MsgPushSound = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msgpushsound().data(), this->msgpushsound().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UserInfoExt.MsgPushSound");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msgpushsound(), target);
  }

  // optional string VoipPushSound = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->voippushsound().data(), this->voippushsound().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UserInfoExt.VoipPushSound");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->voippushsound(), target);
  }

  // optional uint32 BigChatRoomSize = 5;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->bigchatroomsize(), target);
  }

  // optional uint32 BigChatRoomQuota = 6;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->bigchatroomquota(), target);
  }

  // optional uint32 BigChatRoomInvite = 7;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->bigchatroominvite(), target);
  }

  // optional string SafeMobile = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->safemobile().data(), this->safemobile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UserInfoExt.SafeMobile");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->safemobile(), target);
  }

  // optional string BigHeadImgUrl = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bigheadimgurl().data(), this->bigheadimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UserInfoExt.BigHeadImgUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->bigheadimgurl(), target);
  }

  // optional string SmallHeadImgUrl = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->smallheadimgurl().data(), this->smallheadimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UserInfoExt.SmallHeadImgUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->smallheadimgurl(), target);
  }

  // optional uint32 MainAcctType = 11;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->mainaccttype(), target);
  }

  // optional .micromsg.SKBuiltinString_t ExtXml = 12;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->extxml_, deterministic, target);
  }

  // optional .micromsg.SafeDeviceList SafeDeviceList = 13;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->safedevicelist_, deterministic, target);
  }

  // optional uint32 SafeDevice = 14;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->safedevice(), target);
  }

  // optional uint32 GrayscaleFlag = 15;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->grayscaleflag(), target);
  }

  // optional string GoogleContactName = 16;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->googlecontactname().data(), this->googlecontactname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UserInfoExt.GoogleContactName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->googlecontactname(), target);
  }

  // optional string IDCardNum = 17;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->idcardnum().data(), this->idcardnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UserInfoExt.IDCardNum");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->idcardnum(), target);
  }

  // optional string RealName = 18;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->realname().data(), this->realname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UserInfoExt.RealName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->realname(), target);
  }

  // optional string RegCountry = 19;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->regcountry().data(), this->regcountry().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UserInfoExt.RegCountry");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->regcountry(), target);
  }

  // optional string BBPPID = 20;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bbppid().data(), this->bbppid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UserInfoExt.BBPPID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->bbppid(), target);
  }

  // optional string BBPIN = 21;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bbpin().data(), this->bbpin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UserInfoExt.BBPIN");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->bbpin(), target);
  }

  // optional string BBMNickName = 22;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bbmnickname().data(), this->bbmnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UserInfoExt.BBMNickName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->bbmnickname(), target);
  }

  // optional .micromsg.LinkedinContactItem LinkedinContactItem = 23;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        23, *this->linkedincontactitem_, deterministic, target);
  }

  // optional string KFInfo = 24;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->kfinfo().data(), this->kfinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UserInfoExt.KFInfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->kfinfo(), target);
  }

  // optional .micromsg.PatternLockInfo PatternLockInfo = 25;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        25, *this->patternlockinfo_, deterministic, target);
  }

  // optional string SecurityDeviceId = 26;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->securitydeviceid().data(), this->securitydeviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.UserInfoExt.SecurityDeviceId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->securitydeviceid(), target);
  }

  // optional uint32 PayWalletType = 27;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->paywallettype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.UserInfoExt)
  return target;
}

size_t UserInfoExt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.UserInfoExt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.SnsUserInfo SnsUserInfo = 1;
  if (has_snsuserinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->snsuserinfo_);
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string MyBrandList = 2;
    if (has_mybrandlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mybrandlist());
    }

    // optional string MsgPushSound = 3;
    if (has_msgpushsound()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgpushsound());
    }

    // optional string VoipPushSound = 4;
    if (has_voippushsound()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->voippushsound());
    }

    // optional string SafeMobile = 8;
    if (has_safemobile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->safemobile());
    }

    // optional string BigHeadImgUrl = 9;
    if (has_bigheadimgurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bigheadimgurl());
    }

    // optional string SmallHeadImgUrl = 10;
    if (has_smallheadimgurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->smallheadimgurl());
    }

    // optional string GoogleContactName = 16;
    if (has_googlecontactname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->googlecontactname());
    }

    // optional string IDCardNum = 17;
    if (has_idcardnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->idcardnum());
    }

  }
  if (_has_bits_[8 / 32] & 32512u) {
    // optional string RealName = 18;
    if (has_realname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->realname());
    }

    // optional string RegCountry = 19;
    if (has_regcountry()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->regcountry());
    }

    // optional string BBPPID = 20;
    if (has_bbppid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bbppid());
    }

    // optional string BBPIN = 21;
    if (has_bbpin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bbpin());
    }

    // optional string BBMNickName = 22;
    if (has_bbmnickname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bbmnickname());
    }

    // optional string KFInfo = 24;
    if (has_kfinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->kfinfo());
    }

    // optional string SecurityDeviceId = 26;
    if (has_securitydeviceid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->securitydeviceid());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional .micromsg.SKBuiltinString_t ExtXml = 12;
    if (has_extxml()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->extxml_);
    }

    // optional .micromsg.SafeDeviceList SafeDeviceList = 13;
    if (has_safedevicelist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->safedevicelist_);
    }

    // optional .micromsg.LinkedinContactItem LinkedinContactItem = 23;
    if (has_linkedincontactitem()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->linkedincontactitem_);
    }

    // optional .micromsg.PatternLockInfo PatternLockInfo = 25;
    if (has_patternlockinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->patternlockinfo_);
    }

    // optional uint32 BigChatRoomSize = 5;
    if (has_bigchatroomsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bigchatroomsize());
    }

    // optional uint32 BigChatRoomQuota = 6;
    if (has_bigchatroomquota()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bigchatroomquota());
    }

    // optional uint32 BigChatRoomInvite = 7;
    if (has_bigchatroominvite()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bigchatroominvite());
    }

    // optional uint32 MainAcctType = 11;
    if (has_mainaccttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mainaccttype());
    }

  }
  if (_has_bits_[24 / 32] & 117440512u) {
    // optional uint32 SafeDevice = 14;
    if (has_safedevice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->safedevice());
    }

    // optional uint32 GrayscaleFlag = 15;
    if (has_grayscaleflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grayscaleflag());
    }

    // optional uint32 PayWalletType = 27;
    if (has_paywallettype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->paywallettype());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfoExt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.UserInfoExt)
  GOOGLE_DCHECK_NE(&from, this);
  const UserInfoExt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserInfoExt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.UserInfoExt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.UserInfoExt)
    MergeFrom(*source);
  }
}

void UserInfoExt::MergeFrom(const UserInfoExt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.UserInfoExt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_mybrandlist();
      mybrandlist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mybrandlist_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_msgpushsound();
      msgpushsound_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msgpushsound_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_voippushsound();
      voippushsound_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.voippushsound_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_safemobile();
      safemobile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.safemobile_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_bigheadimgurl();
      bigheadimgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bigheadimgurl_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_smallheadimgurl();
      smallheadimgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smallheadimgurl_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_googlecontactname();
      googlecontactname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.googlecontactname_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_idcardnum();
      idcardnum_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.idcardnum_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_realname();
      realname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.realname_);
    }
    if (cached_has_bits & 0x00000200u) {
      set_has_regcountry();
      regcountry_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.regcountry_);
    }
    if (cached_has_bits & 0x00000400u) {
      set_has_bbppid();
      bbppid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bbppid_);
    }
    if (cached_has_bits & 0x00000800u) {
      set_has_bbpin();
      bbpin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bbpin_);
    }
    if (cached_has_bits & 0x00001000u) {
      set_has_bbmnickname();
      bbmnickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bbmnickname_);
    }
    if (cached_has_bits & 0x00002000u) {
      set_has_kfinfo();
      kfinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kfinfo_);
    }
    if (cached_has_bits & 0x00004000u) {
      set_has_securitydeviceid();
      securitydeviceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.securitydeviceid_);
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_snsuserinfo()->::micromsg::SnsUserInfo::MergeFrom(from.snsuserinfo());
    }
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_extxml()->::micromsg::SKBuiltinString_t::MergeFrom(from.extxml());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_safedevicelist()->::micromsg::SafeDeviceList::MergeFrom(from.safedevicelist());
    }
    if (cached_has_bits & 0x00040000u) {
      mutable_linkedincontactitem()->::micromsg::LinkedinContactItem::MergeFrom(from.linkedincontactitem());
    }
    if (cached_has_bits & 0x00080000u) {
      mutable_patternlockinfo()->::micromsg::PatternLockInfo::MergeFrom(from.patternlockinfo());
    }
    if (cached_has_bits & 0x00100000u) {
      bigchatroomsize_ = from.bigchatroomsize_;
    }
    if (cached_has_bits & 0x00200000u) {
      bigchatroomquota_ = from.bigchatroomquota_;
    }
    if (cached_has_bits & 0x00400000u) {
      bigchatroominvite_ = from.bigchatroominvite_;
    }
    if (cached_has_bits & 0x00800000u) {
      mainaccttype_ = from.mainaccttype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 117440512u) {
    if (cached_has_bits & 0x01000000u) {
      safedevice_ = from.safedevice_;
    }
    if (cached_has_bits & 0x02000000u) {
      grayscaleflag_ = from.grayscaleflag_;
    }
    if (cached_has_bits & 0x04000000u) {
      paywallettype_ = from.paywallettype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserInfoExt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.UserInfoExt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfoExt::CopyFrom(const UserInfoExt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.UserInfoExt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfoExt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00008000) != 0x00008000) return false;
  if (has_snsuserinfo()) {
    if (!this->snsuserinfo_->IsInitialized()) return false;
  }
  if (has_safedevicelist()) {
    if (!this->safedevicelist_->IsInitialized()) return false;
  }
  if (has_patternlockinfo()) {
    if (!this->patternlockinfo_->IsInitialized()) return false;
  }
  return true;
}

void UserInfoExt::Swap(UserInfoExt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserInfoExt::InternalSwap(UserInfoExt* other) {
  mybrandlist_.Swap(&other->mybrandlist_);
  msgpushsound_.Swap(&other->msgpushsound_);
  voippushsound_.Swap(&other->voippushsound_);
  safemobile_.Swap(&other->safemobile_);
  bigheadimgurl_.Swap(&other->bigheadimgurl_);
  smallheadimgurl_.Swap(&other->smallheadimgurl_);
  googlecontactname_.Swap(&other->googlecontactname_);
  idcardnum_.Swap(&other->idcardnum_);
  realname_.Swap(&other->realname_);
  regcountry_.Swap(&other->regcountry_);
  bbppid_.Swap(&other->bbppid_);
  bbpin_.Swap(&other->bbpin_);
  bbmnickname_.Swap(&other->bbmnickname_);
  kfinfo_.Swap(&other->kfinfo_);
  securitydeviceid_.Swap(&other->securitydeviceid_);
  std::swap(snsuserinfo_, other->snsuserinfo_);
  std::swap(extxml_, other->extxml_);
  std::swap(safedevicelist_, other->safedevicelist_);
  std::swap(linkedincontactitem_, other->linkedincontactitem_);
  std::swap(patternlockinfo_, other->patternlockinfo_);
  std::swap(bigchatroomsize_, other->bigchatroomsize_);
  std::swap(bigchatroomquota_, other->bigchatroomquota_);
  std::swap(bigchatroominvite_, other->bigchatroominvite_);
  std::swap(mainaccttype_, other->mainaccttype_);
  std::swap(safedevice_, other->safedevice_);
  std::swap(grayscaleflag_, other->grayscaleflag_);
  std::swap(paywallettype_, other->paywallettype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserInfoExt::GetMetadata() const {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserInfoExt

// required .micromsg.SnsUserInfo SnsUserInfo = 1;
bool UserInfoExt::has_snsuserinfo() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void UserInfoExt::set_has_snsuserinfo() {
  _has_bits_[0] |= 0x00008000u;
}
void UserInfoExt::clear_has_snsuserinfo() {
  _has_bits_[0] &= ~0x00008000u;
}
void UserInfoExt::clear_snsuserinfo() {
  if (snsuserinfo_ != NULL) snsuserinfo_->::micromsg::SnsUserInfo::Clear();
  clear_has_snsuserinfo();
}
const ::micromsg::SnsUserInfo& UserInfoExt::snsuserinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.UserInfoExt.SnsUserInfo)
  return snsuserinfo_ != NULL ? *snsuserinfo_
                         : *::micromsg::SnsUserInfo::internal_default_instance();
}
::micromsg::SnsUserInfo* UserInfoExt::mutable_snsuserinfo() {
  set_has_snsuserinfo();
  if (snsuserinfo_ == NULL) {
    snsuserinfo_ = new ::micromsg::SnsUserInfo;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UserInfoExt.SnsUserInfo)
  return snsuserinfo_;
}
::micromsg::SnsUserInfo* UserInfoExt::release_snsuserinfo() {
  // @@protoc_insertion_point(field_release:micromsg.UserInfoExt.SnsUserInfo)
  clear_has_snsuserinfo();
  ::micromsg::SnsUserInfo* temp = snsuserinfo_;
  snsuserinfo_ = NULL;
  return temp;
}
void UserInfoExt::set_allocated_snsuserinfo(::micromsg::SnsUserInfo* snsuserinfo) {
  delete snsuserinfo_;
  snsuserinfo_ = snsuserinfo;
  if (snsuserinfo) {
    set_has_snsuserinfo();
  } else {
    clear_has_snsuserinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UserInfoExt.SnsUserInfo)
}

// optional string MyBrandList = 2;
bool UserInfoExt::has_mybrandlist() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserInfoExt::set_has_mybrandlist() {
  _has_bits_[0] |= 0x00000001u;
}
void UserInfoExt::clear_has_mybrandlist() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserInfoExt::clear_mybrandlist() {
  mybrandlist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mybrandlist();
}
const ::std::string& UserInfoExt::mybrandlist() const {
  // @@protoc_insertion_point(field_get:micromsg.UserInfoExt.MyBrandList)
  return mybrandlist_.GetNoArena();
}
void UserInfoExt::set_mybrandlist(const ::std::string& value) {
  set_has_mybrandlist();
  mybrandlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UserInfoExt.MyBrandList)
}
#if LANG_CXX11
void UserInfoExt::set_mybrandlist(::std::string&& value) {
  set_has_mybrandlist();
  mybrandlist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UserInfoExt.MyBrandList)
}
#endif
void UserInfoExt::set_mybrandlist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mybrandlist();
  mybrandlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UserInfoExt.MyBrandList)
}
void UserInfoExt::set_mybrandlist(const char* value, size_t size) {
  set_has_mybrandlist();
  mybrandlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UserInfoExt.MyBrandList)
}
::std::string* UserInfoExt::mutable_mybrandlist() {
  set_has_mybrandlist();
  // @@protoc_insertion_point(field_mutable:micromsg.UserInfoExt.MyBrandList)
  return mybrandlist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserInfoExt::release_mybrandlist() {
  // @@protoc_insertion_point(field_release:micromsg.UserInfoExt.MyBrandList)
  clear_has_mybrandlist();
  return mybrandlist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserInfoExt::set_allocated_mybrandlist(::std::string* mybrandlist) {
  if (mybrandlist != NULL) {
    set_has_mybrandlist();
  } else {
    clear_has_mybrandlist();
  }
  mybrandlist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mybrandlist);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UserInfoExt.MyBrandList)
}

// optional string MsgPushSound = 3;
bool UserInfoExt::has_msgpushsound() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserInfoExt::set_has_msgpushsound() {
  _has_bits_[0] |= 0x00000002u;
}
void UserInfoExt::clear_has_msgpushsound() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserInfoExt::clear_msgpushsound() {
  msgpushsound_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msgpushsound();
}
const ::std::string& UserInfoExt::msgpushsound() const {
  // @@protoc_insertion_point(field_get:micromsg.UserInfoExt.MsgPushSound)
  return msgpushsound_.GetNoArena();
}
void UserInfoExt::set_msgpushsound(const ::std::string& value) {
  set_has_msgpushsound();
  msgpushsound_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UserInfoExt.MsgPushSound)
}
#if LANG_CXX11
void UserInfoExt::set_msgpushsound(::std::string&& value) {
  set_has_msgpushsound();
  msgpushsound_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UserInfoExt.MsgPushSound)
}
#endif
void UserInfoExt::set_msgpushsound(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msgpushsound();
  msgpushsound_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UserInfoExt.MsgPushSound)
}
void UserInfoExt::set_msgpushsound(const char* value, size_t size) {
  set_has_msgpushsound();
  msgpushsound_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UserInfoExt.MsgPushSound)
}
::std::string* UserInfoExt::mutable_msgpushsound() {
  set_has_msgpushsound();
  // @@protoc_insertion_point(field_mutable:micromsg.UserInfoExt.MsgPushSound)
  return msgpushsound_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserInfoExt::release_msgpushsound() {
  // @@protoc_insertion_point(field_release:micromsg.UserInfoExt.MsgPushSound)
  clear_has_msgpushsound();
  return msgpushsound_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserInfoExt::set_allocated_msgpushsound(::std::string* msgpushsound) {
  if (msgpushsound != NULL) {
    set_has_msgpushsound();
  } else {
    clear_has_msgpushsound();
  }
  msgpushsound_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgpushsound);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UserInfoExt.MsgPushSound)
}

// optional string VoipPushSound = 4;
bool UserInfoExt::has_voippushsound() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UserInfoExt::set_has_voippushsound() {
  _has_bits_[0] |= 0x00000004u;
}
void UserInfoExt::clear_has_voippushsound() {
  _has_bits_[0] &= ~0x00000004u;
}
void UserInfoExt::clear_voippushsound() {
  voippushsound_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_voippushsound();
}
const ::std::string& UserInfoExt::voippushsound() const {
  // @@protoc_insertion_point(field_get:micromsg.UserInfoExt.VoipPushSound)
  return voippushsound_.GetNoArena();
}
void UserInfoExt::set_voippushsound(const ::std::string& value) {
  set_has_voippushsound();
  voippushsound_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UserInfoExt.VoipPushSound)
}
#if LANG_CXX11
void UserInfoExt::set_voippushsound(::std::string&& value) {
  set_has_voippushsound();
  voippushsound_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UserInfoExt.VoipPushSound)
}
#endif
void UserInfoExt::set_voippushsound(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_voippushsound();
  voippushsound_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UserInfoExt.VoipPushSound)
}
void UserInfoExt::set_voippushsound(const char* value, size_t size) {
  set_has_voippushsound();
  voippushsound_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UserInfoExt.VoipPushSound)
}
::std::string* UserInfoExt::mutable_voippushsound() {
  set_has_voippushsound();
  // @@protoc_insertion_point(field_mutable:micromsg.UserInfoExt.VoipPushSound)
  return voippushsound_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserInfoExt::release_voippushsound() {
  // @@protoc_insertion_point(field_release:micromsg.UserInfoExt.VoipPushSound)
  clear_has_voippushsound();
  return voippushsound_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserInfoExt::set_allocated_voippushsound(::std::string* voippushsound) {
  if (voippushsound != NULL) {
    set_has_voippushsound();
  } else {
    clear_has_voippushsound();
  }
  voippushsound_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), voippushsound);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UserInfoExt.VoipPushSound)
}

// optional uint32 BigChatRoomSize = 5;
bool UserInfoExt::has_bigchatroomsize() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void UserInfoExt::set_has_bigchatroomsize() {
  _has_bits_[0] |= 0x00100000u;
}
void UserInfoExt::clear_has_bigchatroomsize() {
  _has_bits_[0] &= ~0x00100000u;
}
void UserInfoExt::clear_bigchatroomsize() {
  bigchatroomsize_ = 0u;
  clear_has_bigchatroomsize();
}
::google::protobuf::uint32 UserInfoExt::bigchatroomsize() const {
  // @@protoc_insertion_point(field_get:micromsg.UserInfoExt.BigChatRoomSize)
  return bigchatroomsize_;
}
void UserInfoExt::set_bigchatroomsize(::google::protobuf::uint32 value) {
  set_has_bigchatroomsize();
  bigchatroomsize_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UserInfoExt.BigChatRoomSize)
}

// optional uint32 BigChatRoomQuota = 6;
bool UserInfoExt::has_bigchatroomquota() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void UserInfoExt::set_has_bigchatroomquota() {
  _has_bits_[0] |= 0x00200000u;
}
void UserInfoExt::clear_has_bigchatroomquota() {
  _has_bits_[0] &= ~0x00200000u;
}
void UserInfoExt::clear_bigchatroomquota() {
  bigchatroomquota_ = 0u;
  clear_has_bigchatroomquota();
}
::google::protobuf::uint32 UserInfoExt::bigchatroomquota() const {
  // @@protoc_insertion_point(field_get:micromsg.UserInfoExt.BigChatRoomQuota)
  return bigchatroomquota_;
}
void UserInfoExt::set_bigchatroomquota(::google::protobuf::uint32 value) {
  set_has_bigchatroomquota();
  bigchatroomquota_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UserInfoExt.BigChatRoomQuota)
}

// optional uint32 BigChatRoomInvite = 7;
bool UserInfoExt::has_bigchatroominvite() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void UserInfoExt::set_has_bigchatroominvite() {
  _has_bits_[0] |= 0x00400000u;
}
void UserInfoExt::clear_has_bigchatroominvite() {
  _has_bits_[0] &= ~0x00400000u;
}
void UserInfoExt::clear_bigchatroominvite() {
  bigchatroominvite_ = 0u;
  clear_has_bigchatroominvite();
}
::google::protobuf::uint32 UserInfoExt::bigchatroominvite() const {
  // @@protoc_insertion_point(field_get:micromsg.UserInfoExt.BigChatRoomInvite)
  return bigchatroominvite_;
}
void UserInfoExt::set_bigchatroominvite(::google::protobuf::uint32 value) {
  set_has_bigchatroominvite();
  bigchatroominvite_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UserInfoExt.BigChatRoomInvite)
}

// optional string SafeMobile = 8;
bool UserInfoExt::has_safemobile() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UserInfoExt::set_has_safemobile() {
  _has_bits_[0] |= 0x00000008u;
}
void UserInfoExt::clear_has_safemobile() {
  _has_bits_[0] &= ~0x00000008u;
}
void UserInfoExt::clear_safemobile() {
  safemobile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_safemobile();
}
const ::std::string& UserInfoExt::safemobile() const {
  // @@protoc_insertion_point(field_get:micromsg.UserInfoExt.SafeMobile)
  return safemobile_.GetNoArena();
}
void UserInfoExt::set_safemobile(const ::std::string& value) {
  set_has_safemobile();
  safemobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UserInfoExt.SafeMobile)
}
#if LANG_CXX11
void UserInfoExt::set_safemobile(::std::string&& value) {
  set_has_safemobile();
  safemobile_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UserInfoExt.SafeMobile)
}
#endif
void UserInfoExt::set_safemobile(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_safemobile();
  safemobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UserInfoExt.SafeMobile)
}
void UserInfoExt::set_safemobile(const char* value, size_t size) {
  set_has_safemobile();
  safemobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UserInfoExt.SafeMobile)
}
::std::string* UserInfoExt::mutable_safemobile() {
  set_has_safemobile();
  // @@protoc_insertion_point(field_mutable:micromsg.UserInfoExt.SafeMobile)
  return safemobile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserInfoExt::release_safemobile() {
  // @@protoc_insertion_point(field_release:micromsg.UserInfoExt.SafeMobile)
  clear_has_safemobile();
  return safemobile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserInfoExt::set_allocated_safemobile(::std::string* safemobile) {
  if (safemobile != NULL) {
    set_has_safemobile();
  } else {
    clear_has_safemobile();
  }
  safemobile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), safemobile);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UserInfoExt.SafeMobile)
}

// optional string BigHeadImgUrl = 9;
bool UserInfoExt::has_bigheadimgurl() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void UserInfoExt::set_has_bigheadimgurl() {
  _has_bits_[0] |= 0x00000010u;
}
void UserInfoExt::clear_has_bigheadimgurl() {
  _has_bits_[0] &= ~0x00000010u;
}
void UserInfoExt::clear_bigheadimgurl() {
  bigheadimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bigheadimgurl();
}
const ::std::string& UserInfoExt::bigheadimgurl() const {
  // @@protoc_insertion_point(field_get:micromsg.UserInfoExt.BigHeadImgUrl)
  return bigheadimgurl_.GetNoArena();
}
void UserInfoExt::set_bigheadimgurl(const ::std::string& value) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UserInfoExt.BigHeadImgUrl)
}
#if LANG_CXX11
void UserInfoExt::set_bigheadimgurl(::std::string&& value) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UserInfoExt.BigHeadImgUrl)
}
#endif
void UserInfoExt::set_bigheadimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UserInfoExt.BigHeadImgUrl)
}
void UserInfoExt::set_bigheadimgurl(const char* value, size_t size) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UserInfoExt.BigHeadImgUrl)
}
::std::string* UserInfoExt::mutable_bigheadimgurl() {
  set_has_bigheadimgurl();
  // @@protoc_insertion_point(field_mutable:micromsg.UserInfoExt.BigHeadImgUrl)
  return bigheadimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserInfoExt::release_bigheadimgurl() {
  // @@protoc_insertion_point(field_release:micromsg.UserInfoExt.BigHeadImgUrl)
  clear_has_bigheadimgurl();
  return bigheadimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserInfoExt::set_allocated_bigheadimgurl(::std::string* bigheadimgurl) {
  if (bigheadimgurl != NULL) {
    set_has_bigheadimgurl();
  } else {
    clear_has_bigheadimgurl();
  }
  bigheadimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bigheadimgurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UserInfoExt.BigHeadImgUrl)
}

// optional string SmallHeadImgUrl = 10;
bool UserInfoExt::has_smallheadimgurl() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void UserInfoExt::set_has_smallheadimgurl() {
  _has_bits_[0] |= 0x00000020u;
}
void UserInfoExt::clear_has_smallheadimgurl() {
  _has_bits_[0] &= ~0x00000020u;
}
void UserInfoExt::clear_smallheadimgurl() {
  smallheadimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_smallheadimgurl();
}
const ::std::string& UserInfoExt::smallheadimgurl() const {
  // @@protoc_insertion_point(field_get:micromsg.UserInfoExt.SmallHeadImgUrl)
  return smallheadimgurl_.GetNoArena();
}
void UserInfoExt::set_smallheadimgurl(const ::std::string& value) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UserInfoExt.SmallHeadImgUrl)
}
#if LANG_CXX11
void UserInfoExt::set_smallheadimgurl(::std::string&& value) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UserInfoExt.SmallHeadImgUrl)
}
#endif
void UserInfoExt::set_smallheadimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UserInfoExt.SmallHeadImgUrl)
}
void UserInfoExt::set_smallheadimgurl(const char* value, size_t size) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UserInfoExt.SmallHeadImgUrl)
}
::std::string* UserInfoExt::mutable_smallheadimgurl() {
  set_has_smallheadimgurl();
  // @@protoc_insertion_point(field_mutable:micromsg.UserInfoExt.SmallHeadImgUrl)
  return smallheadimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserInfoExt::release_smallheadimgurl() {
  // @@protoc_insertion_point(field_release:micromsg.UserInfoExt.SmallHeadImgUrl)
  clear_has_smallheadimgurl();
  return smallheadimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserInfoExt::set_allocated_smallheadimgurl(::std::string* smallheadimgurl) {
  if (smallheadimgurl != NULL) {
    set_has_smallheadimgurl();
  } else {
    clear_has_smallheadimgurl();
  }
  smallheadimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smallheadimgurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UserInfoExt.SmallHeadImgUrl)
}

// optional uint32 MainAcctType = 11;
bool UserInfoExt::has_mainaccttype() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void UserInfoExt::set_has_mainaccttype() {
  _has_bits_[0] |= 0x00800000u;
}
void UserInfoExt::clear_has_mainaccttype() {
  _has_bits_[0] &= ~0x00800000u;
}
void UserInfoExt::clear_mainaccttype() {
  mainaccttype_ = 0u;
  clear_has_mainaccttype();
}
::google::protobuf::uint32 UserInfoExt::mainaccttype() const {
  // @@protoc_insertion_point(field_get:micromsg.UserInfoExt.MainAcctType)
  return mainaccttype_;
}
void UserInfoExt::set_mainaccttype(::google::protobuf::uint32 value) {
  set_has_mainaccttype();
  mainaccttype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UserInfoExt.MainAcctType)
}

// optional .micromsg.SKBuiltinString_t ExtXml = 12;
bool UserInfoExt::has_extxml() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void UserInfoExt::set_has_extxml() {
  _has_bits_[0] |= 0x00010000u;
}
void UserInfoExt::clear_has_extxml() {
  _has_bits_[0] &= ~0x00010000u;
}
void UserInfoExt::clear_extxml() {
  if (extxml_ != NULL) extxml_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_extxml();
}
const ::micromsg::SKBuiltinString_t& UserInfoExt::extxml() const {
  // @@protoc_insertion_point(field_get:micromsg.UserInfoExt.ExtXml)
  return extxml_ != NULL ? *extxml_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* UserInfoExt::mutable_extxml() {
  set_has_extxml();
  if (extxml_ == NULL) {
    extxml_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UserInfoExt.ExtXml)
  return extxml_;
}
::micromsg::SKBuiltinString_t* UserInfoExt::release_extxml() {
  // @@protoc_insertion_point(field_release:micromsg.UserInfoExt.ExtXml)
  clear_has_extxml();
  ::micromsg::SKBuiltinString_t* temp = extxml_;
  extxml_ = NULL;
  return temp;
}
void UserInfoExt::set_allocated_extxml(::micromsg::SKBuiltinString_t* extxml) {
  delete extxml_;
  extxml_ = extxml;
  if (extxml) {
    set_has_extxml();
  } else {
    clear_has_extxml();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UserInfoExt.ExtXml)
}

// optional .micromsg.SafeDeviceList SafeDeviceList = 13;
bool UserInfoExt::has_safedevicelist() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void UserInfoExt::set_has_safedevicelist() {
  _has_bits_[0] |= 0x00020000u;
}
void UserInfoExt::clear_has_safedevicelist() {
  _has_bits_[0] &= ~0x00020000u;
}
void UserInfoExt::clear_safedevicelist() {
  if (safedevicelist_ != NULL) safedevicelist_->::micromsg::SafeDeviceList::Clear();
  clear_has_safedevicelist();
}
const ::micromsg::SafeDeviceList& UserInfoExt::safedevicelist() const {
  // @@protoc_insertion_point(field_get:micromsg.UserInfoExt.SafeDeviceList)
  return safedevicelist_ != NULL ? *safedevicelist_
                         : *::micromsg::SafeDeviceList::internal_default_instance();
}
::micromsg::SafeDeviceList* UserInfoExt::mutable_safedevicelist() {
  set_has_safedevicelist();
  if (safedevicelist_ == NULL) {
    safedevicelist_ = new ::micromsg::SafeDeviceList;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UserInfoExt.SafeDeviceList)
  return safedevicelist_;
}
::micromsg::SafeDeviceList* UserInfoExt::release_safedevicelist() {
  // @@protoc_insertion_point(field_release:micromsg.UserInfoExt.SafeDeviceList)
  clear_has_safedevicelist();
  ::micromsg::SafeDeviceList* temp = safedevicelist_;
  safedevicelist_ = NULL;
  return temp;
}
void UserInfoExt::set_allocated_safedevicelist(::micromsg::SafeDeviceList* safedevicelist) {
  delete safedevicelist_;
  safedevicelist_ = safedevicelist;
  if (safedevicelist) {
    set_has_safedevicelist();
  } else {
    clear_has_safedevicelist();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UserInfoExt.SafeDeviceList)
}

// optional uint32 SafeDevice = 14;
bool UserInfoExt::has_safedevice() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void UserInfoExt::set_has_safedevice() {
  _has_bits_[0] |= 0x01000000u;
}
void UserInfoExt::clear_has_safedevice() {
  _has_bits_[0] &= ~0x01000000u;
}
void UserInfoExt::clear_safedevice() {
  safedevice_ = 0u;
  clear_has_safedevice();
}
::google::protobuf::uint32 UserInfoExt::safedevice() const {
  // @@protoc_insertion_point(field_get:micromsg.UserInfoExt.SafeDevice)
  return safedevice_;
}
void UserInfoExt::set_safedevice(::google::protobuf::uint32 value) {
  set_has_safedevice();
  safedevice_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UserInfoExt.SafeDevice)
}

// optional uint32 GrayscaleFlag = 15;
bool UserInfoExt::has_grayscaleflag() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void UserInfoExt::set_has_grayscaleflag() {
  _has_bits_[0] |= 0x02000000u;
}
void UserInfoExt::clear_has_grayscaleflag() {
  _has_bits_[0] &= ~0x02000000u;
}
void UserInfoExt::clear_grayscaleflag() {
  grayscaleflag_ = 0u;
  clear_has_grayscaleflag();
}
::google::protobuf::uint32 UserInfoExt::grayscaleflag() const {
  // @@protoc_insertion_point(field_get:micromsg.UserInfoExt.GrayscaleFlag)
  return grayscaleflag_;
}
void UserInfoExt::set_grayscaleflag(::google::protobuf::uint32 value) {
  set_has_grayscaleflag();
  grayscaleflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UserInfoExt.GrayscaleFlag)
}

// optional string GoogleContactName = 16;
bool UserInfoExt::has_googlecontactname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void UserInfoExt::set_has_googlecontactname() {
  _has_bits_[0] |= 0x00000040u;
}
void UserInfoExt::clear_has_googlecontactname() {
  _has_bits_[0] &= ~0x00000040u;
}
void UserInfoExt::clear_googlecontactname() {
  googlecontactname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_googlecontactname();
}
const ::std::string& UserInfoExt::googlecontactname() const {
  // @@protoc_insertion_point(field_get:micromsg.UserInfoExt.GoogleContactName)
  return googlecontactname_.GetNoArena();
}
void UserInfoExt::set_googlecontactname(const ::std::string& value) {
  set_has_googlecontactname();
  googlecontactname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UserInfoExt.GoogleContactName)
}
#if LANG_CXX11
void UserInfoExt::set_googlecontactname(::std::string&& value) {
  set_has_googlecontactname();
  googlecontactname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UserInfoExt.GoogleContactName)
}
#endif
void UserInfoExt::set_googlecontactname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_googlecontactname();
  googlecontactname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UserInfoExt.GoogleContactName)
}
void UserInfoExt::set_googlecontactname(const char* value, size_t size) {
  set_has_googlecontactname();
  googlecontactname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UserInfoExt.GoogleContactName)
}
::std::string* UserInfoExt::mutable_googlecontactname() {
  set_has_googlecontactname();
  // @@protoc_insertion_point(field_mutable:micromsg.UserInfoExt.GoogleContactName)
  return googlecontactname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserInfoExt::release_googlecontactname() {
  // @@protoc_insertion_point(field_release:micromsg.UserInfoExt.GoogleContactName)
  clear_has_googlecontactname();
  return googlecontactname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserInfoExt::set_allocated_googlecontactname(::std::string* googlecontactname) {
  if (googlecontactname != NULL) {
    set_has_googlecontactname();
  } else {
    clear_has_googlecontactname();
  }
  googlecontactname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), googlecontactname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UserInfoExt.GoogleContactName)
}

// optional string IDCardNum = 17;
bool UserInfoExt::has_idcardnum() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void UserInfoExt::set_has_idcardnum() {
  _has_bits_[0] |= 0x00000080u;
}
void UserInfoExt::clear_has_idcardnum() {
  _has_bits_[0] &= ~0x00000080u;
}
void UserInfoExt::clear_idcardnum() {
  idcardnum_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_idcardnum();
}
const ::std::string& UserInfoExt::idcardnum() const {
  // @@protoc_insertion_point(field_get:micromsg.UserInfoExt.IDCardNum)
  return idcardnum_.GetNoArena();
}
void UserInfoExt::set_idcardnum(const ::std::string& value) {
  set_has_idcardnum();
  idcardnum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UserInfoExt.IDCardNum)
}
#if LANG_CXX11
void UserInfoExt::set_idcardnum(::std::string&& value) {
  set_has_idcardnum();
  idcardnum_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UserInfoExt.IDCardNum)
}
#endif
void UserInfoExt::set_idcardnum(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_idcardnum();
  idcardnum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UserInfoExt.IDCardNum)
}
void UserInfoExt::set_idcardnum(const char* value, size_t size) {
  set_has_idcardnum();
  idcardnum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UserInfoExt.IDCardNum)
}
::std::string* UserInfoExt::mutable_idcardnum() {
  set_has_idcardnum();
  // @@protoc_insertion_point(field_mutable:micromsg.UserInfoExt.IDCardNum)
  return idcardnum_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserInfoExt::release_idcardnum() {
  // @@protoc_insertion_point(field_release:micromsg.UserInfoExt.IDCardNum)
  clear_has_idcardnum();
  return idcardnum_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserInfoExt::set_allocated_idcardnum(::std::string* idcardnum) {
  if (idcardnum != NULL) {
    set_has_idcardnum();
  } else {
    clear_has_idcardnum();
  }
  idcardnum_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), idcardnum);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UserInfoExt.IDCardNum)
}

// optional string RealName = 18;
bool UserInfoExt::has_realname() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void UserInfoExt::set_has_realname() {
  _has_bits_[0] |= 0x00000100u;
}
void UserInfoExt::clear_has_realname() {
  _has_bits_[0] &= ~0x00000100u;
}
void UserInfoExt::clear_realname() {
  realname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_realname();
}
const ::std::string& UserInfoExt::realname() const {
  // @@protoc_insertion_point(field_get:micromsg.UserInfoExt.RealName)
  return realname_.GetNoArena();
}
void UserInfoExt::set_realname(const ::std::string& value) {
  set_has_realname();
  realname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UserInfoExt.RealName)
}
#if LANG_CXX11
void UserInfoExt::set_realname(::std::string&& value) {
  set_has_realname();
  realname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UserInfoExt.RealName)
}
#endif
void UserInfoExt::set_realname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_realname();
  realname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UserInfoExt.RealName)
}
void UserInfoExt::set_realname(const char* value, size_t size) {
  set_has_realname();
  realname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UserInfoExt.RealName)
}
::std::string* UserInfoExt::mutable_realname() {
  set_has_realname();
  // @@protoc_insertion_point(field_mutable:micromsg.UserInfoExt.RealName)
  return realname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserInfoExt::release_realname() {
  // @@protoc_insertion_point(field_release:micromsg.UserInfoExt.RealName)
  clear_has_realname();
  return realname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserInfoExt::set_allocated_realname(::std::string* realname) {
  if (realname != NULL) {
    set_has_realname();
  } else {
    clear_has_realname();
  }
  realname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), realname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UserInfoExt.RealName)
}

// optional string RegCountry = 19;
bool UserInfoExt::has_regcountry() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void UserInfoExt::set_has_regcountry() {
  _has_bits_[0] |= 0x00000200u;
}
void UserInfoExt::clear_has_regcountry() {
  _has_bits_[0] &= ~0x00000200u;
}
void UserInfoExt::clear_regcountry() {
  regcountry_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_regcountry();
}
const ::std::string& UserInfoExt::regcountry() const {
  // @@protoc_insertion_point(field_get:micromsg.UserInfoExt.RegCountry)
  return regcountry_.GetNoArena();
}
void UserInfoExt::set_regcountry(const ::std::string& value) {
  set_has_regcountry();
  regcountry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UserInfoExt.RegCountry)
}
#if LANG_CXX11
void UserInfoExt::set_regcountry(::std::string&& value) {
  set_has_regcountry();
  regcountry_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UserInfoExt.RegCountry)
}
#endif
void UserInfoExt::set_regcountry(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_regcountry();
  regcountry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UserInfoExt.RegCountry)
}
void UserInfoExt::set_regcountry(const char* value, size_t size) {
  set_has_regcountry();
  regcountry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UserInfoExt.RegCountry)
}
::std::string* UserInfoExt::mutable_regcountry() {
  set_has_regcountry();
  // @@protoc_insertion_point(field_mutable:micromsg.UserInfoExt.RegCountry)
  return regcountry_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserInfoExt::release_regcountry() {
  // @@protoc_insertion_point(field_release:micromsg.UserInfoExt.RegCountry)
  clear_has_regcountry();
  return regcountry_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserInfoExt::set_allocated_regcountry(::std::string* regcountry) {
  if (regcountry != NULL) {
    set_has_regcountry();
  } else {
    clear_has_regcountry();
  }
  regcountry_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), regcountry);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UserInfoExt.RegCountry)
}

// optional string BBPPID = 20;
bool UserInfoExt::has_bbppid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void UserInfoExt::set_has_bbppid() {
  _has_bits_[0] |= 0x00000400u;
}
void UserInfoExt::clear_has_bbppid() {
  _has_bits_[0] &= ~0x00000400u;
}
void UserInfoExt::clear_bbppid() {
  bbppid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bbppid();
}
const ::std::string& UserInfoExt::bbppid() const {
  // @@protoc_insertion_point(field_get:micromsg.UserInfoExt.BBPPID)
  return bbppid_.GetNoArena();
}
void UserInfoExt::set_bbppid(const ::std::string& value) {
  set_has_bbppid();
  bbppid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UserInfoExt.BBPPID)
}
#if LANG_CXX11
void UserInfoExt::set_bbppid(::std::string&& value) {
  set_has_bbppid();
  bbppid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UserInfoExt.BBPPID)
}
#endif
void UserInfoExt::set_bbppid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bbppid();
  bbppid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UserInfoExt.BBPPID)
}
void UserInfoExt::set_bbppid(const char* value, size_t size) {
  set_has_bbppid();
  bbppid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UserInfoExt.BBPPID)
}
::std::string* UserInfoExt::mutable_bbppid() {
  set_has_bbppid();
  // @@protoc_insertion_point(field_mutable:micromsg.UserInfoExt.BBPPID)
  return bbppid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserInfoExt::release_bbppid() {
  // @@protoc_insertion_point(field_release:micromsg.UserInfoExt.BBPPID)
  clear_has_bbppid();
  return bbppid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserInfoExt::set_allocated_bbppid(::std::string* bbppid) {
  if (bbppid != NULL) {
    set_has_bbppid();
  } else {
    clear_has_bbppid();
  }
  bbppid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bbppid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UserInfoExt.BBPPID)
}

// optional string BBPIN = 21;
bool UserInfoExt::has_bbpin() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void UserInfoExt::set_has_bbpin() {
  _has_bits_[0] |= 0x00000800u;
}
void UserInfoExt::clear_has_bbpin() {
  _has_bits_[0] &= ~0x00000800u;
}
void UserInfoExt::clear_bbpin() {
  bbpin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bbpin();
}
const ::std::string& UserInfoExt::bbpin() const {
  // @@protoc_insertion_point(field_get:micromsg.UserInfoExt.BBPIN)
  return bbpin_.GetNoArena();
}
void UserInfoExt::set_bbpin(const ::std::string& value) {
  set_has_bbpin();
  bbpin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UserInfoExt.BBPIN)
}
#if LANG_CXX11
void UserInfoExt::set_bbpin(::std::string&& value) {
  set_has_bbpin();
  bbpin_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UserInfoExt.BBPIN)
}
#endif
void UserInfoExt::set_bbpin(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bbpin();
  bbpin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UserInfoExt.BBPIN)
}
void UserInfoExt::set_bbpin(const char* value, size_t size) {
  set_has_bbpin();
  bbpin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UserInfoExt.BBPIN)
}
::std::string* UserInfoExt::mutable_bbpin() {
  set_has_bbpin();
  // @@protoc_insertion_point(field_mutable:micromsg.UserInfoExt.BBPIN)
  return bbpin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserInfoExt::release_bbpin() {
  // @@protoc_insertion_point(field_release:micromsg.UserInfoExt.BBPIN)
  clear_has_bbpin();
  return bbpin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserInfoExt::set_allocated_bbpin(::std::string* bbpin) {
  if (bbpin != NULL) {
    set_has_bbpin();
  } else {
    clear_has_bbpin();
  }
  bbpin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bbpin);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UserInfoExt.BBPIN)
}

// optional string BBMNickName = 22;
bool UserInfoExt::has_bbmnickname() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void UserInfoExt::set_has_bbmnickname() {
  _has_bits_[0] |= 0x00001000u;
}
void UserInfoExt::clear_has_bbmnickname() {
  _has_bits_[0] &= ~0x00001000u;
}
void UserInfoExt::clear_bbmnickname() {
  bbmnickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bbmnickname();
}
const ::std::string& UserInfoExt::bbmnickname() const {
  // @@protoc_insertion_point(field_get:micromsg.UserInfoExt.BBMNickName)
  return bbmnickname_.GetNoArena();
}
void UserInfoExt::set_bbmnickname(const ::std::string& value) {
  set_has_bbmnickname();
  bbmnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UserInfoExt.BBMNickName)
}
#if LANG_CXX11
void UserInfoExt::set_bbmnickname(::std::string&& value) {
  set_has_bbmnickname();
  bbmnickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UserInfoExt.BBMNickName)
}
#endif
void UserInfoExt::set_bbmnickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bbmnickname();
  bbmnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UserInfoExt.BBMNickName)
}
void UserInfoExt::set_bbmnickname(const char* value, size_t size) {
  set_has_bbmnickname();
  bbmnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UserInfoExt.BBMNickName)
}
::std::string* UserInfoExt::mutable_bbmnickname() {
  set_has_bbmnickname();
  // @@protoc_insertion_point(field_mutable:micromsg.UserInfoExt.BBMNickName)
  return bbmnickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserInfoExt::release_bbmnickname() {
  // @@protoc_insertion_point(field_release:micromsg.UserInfoExt.BBMNickName)
  clear_has_bbmnickname();
  return bbmnickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserInfoExt::set_allocated_bbmnickname(::std::string* bbmnickname) {
  if (bbmnickname != NULL) {
    set_has_bbmnickname();
  } else {
    clear_has_bbmnickname();
  }
  bbmnickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bbmnickname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UserInfoExt.BBMNickName)
}

// optional .micromsg.LinkedinContactItem LinkedinContactItem = 23;
bool UserInfoExt::has_linkedincontactitem() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void UserInfoExt::set_has_linkedincontactitem() {
  _has_bits_[0] |= 0x00040000u;
}
void UserInfoExt::clear_has_linkedincontactitem() {
  _has_bits_[0] &= ~0x00040000u;
}
void UserInfoExt::clear_linkedincontactitem() {
  if (linkedincontactitem_ != NULL) linkedincontactitem_->::micromsg::LinkedinContactItem::Clear();
  clear_has_linkedincontactitem();
}
const ::micromsg::LinkedinContactItem& UserInfoExt::linkedincontactitem() const {
  // @@protoc_insertion_point(field_get:micromsg.UserInfoExt.LinkedinContactItem)
  return linkedincontactitem_ != NULL ? *linkedincontactitem_
                         : *::micromsg::LinkedinContactItem::internal_default_instance();
}
::micromsg::LinkedinContactItem* UserInfoExt::mutable_linkedincontactitem() {
  set_has_linkedincontactitem();
  if (linkedincontactitem_ == NULL) {
    linkedincontactitem_ = new ::micromsg::LinkedinContactItem;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UserInfoExt.LinkedinContactItem)
  return linkedincontactitem_;
}
::micromsg::LinkedinContactItem* UserInfoExt::release_linkedincontactitem() {
  // @@protoc_insertion_point(field_release:micromsg.UserInfoExt.LinkedinContactItem)
  clear_has_linkedincontactitem();
  ::micromsg::LinkedinContactItem* temp = linkedincontactitem_;
  linkedincontactitem_ = NULL;
  return temp;
}
void UserInfoExt::set_allocated_linkedincontactitem(::micromsg::LinkedinContactItem* linkedincontactitem) {
  delete linkedincontactitem_;
  linkedincontactitem_ = linkedincontactitem;
  if (linkedincontactitem) {
    set_has_linkedincontactitem();
  } else {
    clear_has_linkedincontactitem();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UserInfoExt.LinkedinContactItem)
}

// optional string KFInfo = 24;
bool UserInfoExt::has_kfinfo() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void UserInfoExt::set_has_kfinfo() {
  _has_bits_[0] |= 0x00002000u;
}
void UserInfoExt::clear_has_kfinfo() {
  _has_bits_[0] &= ~0x00002000u;
}
void UserInfoExt::clear_kfinfo() {
  kfinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_kfinfo();
}
const ::std::string& UserInfoExt::kfinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.UserInfoExt.KFInfo)
  return kfinfo_.GetNoArena();
}
void UserInfoExt::set_kfinfo(const ::std::string& value) {
  set_has_kfinfo();
  kfinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UserInfoExt.KFInfo)
}
#if LANG_CXX11
void UserInfoExt::set_kfinfo(::std::string&& value) {
  set_has_kfinfo();
  kfinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UserInfoExt.KFInfo)
}
#endif
void UserInfoExt::set_kfinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_kfinfo();
  kfinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UserInfoExt.KFInfo)
}
void UserInfoExt::set_kfinfo(const char* value, size_t size) {
  set_has_kfinfo();
  kfinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UserInfoExt.KFInfo)
}
::std::string* UserInfoExt::mutable_kfinfo() {
  set_has_kfinfo();
  // @@protoc_insertion_point(field_mutable:micromsg.UserInfoExt.KFInfo)
  return kfinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserInfoExt::release_kfinfo() {
  // @@protoc_insertion_point(field_release:micromsg.UserInfoExt.KFInfo)
  clear_has_kfinfo();
  return kfinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserInfoExt::set_allocated_kfinfo(::std::string* kfinfo) {
  if (kfinfo != NULL) {
    set_has_kfinfo();
  } else {
    clear_has_kfinfo();
  }
  kfinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), kfinfo);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UserInfoExt.KFInfo)
}

// optional .micromsg.PatternLockInfo PatternLockInfo = 25;
bool UserInfoExt::has_patternlockinfo() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void UserInfoExt::set_has_patternlockinfo() {
  _has_bits_[0] |= 0x00080000u;
}
void UserInfoExt::clear_has_patternlockinfo() {
  _has_bits_[0] &= ~0x00080000u;
}
void UserInfoExt::clear_patternlockinfo() {
  if (patternlockinfo_ != NULL) patternlockinfo_->::micromsg::PatternLockInfo::Clear();
  clear_has_patternlockinfo();
}
const ::micromsg::PatternLockInfo& UserInfoExt::patternlockinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.UserInfoExt.PatternLockInfo)
  return patternlockinfo_ != NULL ? *patternlockinfo_
                         : *::micromsg::PatternLockInfo::internal_default_instance();
}
::micromsg::PatternLockInfo* UserInfoExt::mutable_patternlockinfo() {
  set_has_patternlockinfo();
  if (patternlockinfo_ == NULL) {
    patternlockinfo_ = new ::micromsg::PatternLockInfo;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UserInfoExt.PatternLockInfo)
  return patternlockinfo_;
}
::micromsg::PatternLockInfo* UserInfoExt::release_patternlockinfo() {
  // @@protoc_insertion_point(field_release:micromsg.UserInfoExt.PatternLockInfo)
  clear_has_patternlockinfo();
  ::micromsg::PatternLockInfo* temp = patternlockinfo_;
  patternlockinfo_ = NULL;
  return temp;
}
void UserInfoExt::set_allocated_patternlockinfo(::micromsg::PatternLockInfo* patternlockinfo) {
  delete patternlockinfo_;
  patternlockinfo_ = patternlockinfo;
  if (patternlockinfo) {
    set_has_patternlockinfo();
  } else {
    clear_has_patternlockinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UserInfoExt.PatternLockInfo)
}

// optional string SecurityDeviceId = 26;
bool UserInfoExt::has_securitydeviceid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void UserInfoExt::set_has_securitydeviceid() {
  _has_bits_[0] |= 0x00004000u;
}
void UserInfoExt::clear_has_securitydeviceid() {
  _has_bits_[0] &= ~0x00004000u;
}
void UserInfoExt::clear_securitydeviceid() {
  securitydeviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_securitydeviceid();
}
const ::std::string& UserInfoExt::securitydeviceid() const {
  // @@protoc_insertion_point(field_get:micromsg.UserInfoExt.SecurityDeviceId)
  return securitydeviceid_.GetNoArena();
}
void UserInfoExt::set_securitydeviceid(const ::std::string& value) {
  set_has_securitydeviceid();
  securitydeviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UserInfoExt.SecurityDeviceId)
}
#if LANG_CXX11
void UserInfoExt::set_securitydeviceid(::std::string&& value) {
  set_has_securitydeviceid();
  securitydeviceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UserInfoExt.SecurityDeviceId)
}
#endif
void UserInfoExt::set_securitydeviceid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_securitydeviceid();
  securitydeviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UserInfoExt.SecurityDeviceId)
}
void UserInfoExt::set_securitydeviceid(const char* value, size_t size) {
  set_has_securitydeviceid();
  securitydeviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UserInfoExt.SecurityDeviceId)
}
::std::string* UserInfoExt::mutable_securitydeviceid() {
  set_has_securitydeviceid();
  // @@protoc_insertion_point(field_mutable:micromsg.UserInfoExt.SecurityDeviceId)
  return securitydeviceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserInfoExt::release_securitydeviceid() {
  // @@protoc_insertion_point(field_release:micromsg.UserInfoExt.SecurityDeviceId)
  clear_has_securitydeviceid();
  return securitydeviceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserInfoExt::set_allocated_securitydeviceid(::std::string* securitydeviceid) {
  if (securitydeviceid != NULL) {
    set_has_securitydeviceid();
  } else {
    clear_has_securitydeviceid();
  }
  securitydeviceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), securitydeviceid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UserInfoExt.SecurityDeviceId)
}

// optional uint32 PayWalletType = 27;
bool UserInfoExt::has_paywallettype() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void UserInfoExt::set_has_paywallettype() {
  _has_bits_[0] |= 0x04000000u;
}
void UserInfoExt::clear_has_paywallettype() {
  _has_bits_[0] &= ~0x04000000u;
}
void UserInfoExt::clear_paywallettype() {
  paywallettype_ = 0u;
  clear_has_paywallettype();
}
::google::protobuf::uint32 UserInfoExt::paywallettype() const {
  // @@protoc_insertion_point(field_get:micromsg.UserInfoExt.PayWalletType)
  return paywallettype_;
}
void UserInfoExt::set_paywallettype(::google::protobuf::uint32 value) {
  set_has_paywallettype();
  paywallettype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UserInfoExt.PayWalletType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModContact::kUserNameFieldNumber;
const int ModContact::kNickNameFieldNumber;
const int ModContact::kPYInitialFieldNumber;
const int ModContact::kQuanPinFieldNumber;
const int ModContact::kSexFieldNumber;
const int ModContact::kImgBufFieldNumber;
const int ModContact::kBitMaskFieldNumber;
const int ModContact::kBitValFieldNumber;
const int ModContact::kImgFlagFieldNumber;
const int ModContact::kRemarkFieldNumber;
const int ModContact::kRemarkPYInitialFieldNumber;
const int ModContact::kRemarkQuanPinFieldNumber;
const int ModContact::kContactTypeFieldNumber;
const int ModContact::kRoomInfoCountFieldNumber;
const int ModContact::kRoomInfoListFieldNumber;
const int ModContact::kDomainListFieldNumber;
const int ModContact::kChatRoomNotifyFieldNumber;
const int ModContact::kAddContactSceneFieldNumber;
const int ModContact::kProvinceFieldNumber;
const int ModContact::kCityFieldNumber;
const int ModContact::kSignatureFieldNumber;
const int ModContact::kPersonalCardFieldNumber;
const int ModContact::kHasWeiXinHdHeadImgFieldNumber;
const int ModContact::kVerifyFlagFieldNumber;
const int ModContact::kVerifyInfoFieldNumber;
const int ModContact::kLevelFieldNumber;
const int ModContact::kSourceFieldNumber;
const int ModContact::kWeiboFieldNumber;
const int ModContact::kVerifyContentFieldNumber;
const int ModContact::kAliasFieldNumber;
const int ModContact::kChatRoomOwnerFieldNumber;
const int ModContact::kWeiboNicknameFieldNumber;
const int ModContact::kWeiboFlagFieldNumber;
const int ModContact::kAlbumStyleFieldNumber;
const int ModContact::kAlbumFlagFieldNumber;
const int ModContact::kAlbumBGImgIDFieldNumber;
const int ModContact::kSnsUserInfoFieldNumber;
const int ModContact::kCountryFieldNumber;
const int ModContact::kBigHeadImgUrlFieldNumber;
const int ModContact::kSmallHeadImgUrlFieldNumber;
const int ModContact::kMyBrandListFieldNumber;
const int ModContact::kCustomizedInfoFieldNumber;
const int ModContact::kChatRoomDataFieldNumber;
const int ModContact::kHeadImgMd5FieldNumber;
const int ModContact::kEncryptUserNameFieldNumber;
const int ModContact::kIDCardNumFieldNumber;
const int ModContact::kRealNameFieldNumber;
const int ModContact::kMobileHashFieldNumber;
const int ModContact::kMobileFullHashFieldNumber;
const int ModContact::kAdditionalContactListFieldNumber;
const int ModContact::kChatroomVersionFieldNumber;
const int ModContact::kExtInfoFieldNumber;
const int ModContact::kChatroomMaxCountFieldNumber;
const int ModContact::kChatroomTypeFieldNumber;
const int ModContact::kNewChatroomDataFieldNumber;
const int ModContact::kDeleteFlagFieldNumber;
const int ModContact::kDescriptionFieldNumber;
const int ModContact::kCardImgUrlFieldNumber;
const int ModContact::kLabelIDListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModContact::ModContact()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.ModContact)
}
ModContact::ModContact(const ModContact& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      roominfolist_(from.roominfolist_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  province_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_province()) {
    province_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.province_);
  }
  city_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_city()) {
    city_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.city_);
  }
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_signature()) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  verifyinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_verifyinfo()) {
    verifyinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verifyinfo_);
  }
  weibo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_weibo()) {
    weibo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.weibo_);
  }
  verifycontent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_verifycontent()) {
    verifycontent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verifycontent_);
  }
  alias_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_alias()) {
    alias_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alias_);
  }
  chatroomowner_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_chatroomowner()) {
    chatroomowner_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chatroomowner_);
  }
  weibonickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_weibonickname()) {
    weibonickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.weibonickname_);
  }
  albumbgimgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_albumbgimgid()) {
    albumbgimgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.albumbgimgid_);
  }
  country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_country()) {
    country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_);
  }
  bigheadimgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bigheadimgurl()) {
    bigheadimgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bigheadimgurl_);
  }
  smallheadimgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_smallheadimgurl()) {
    smallheadimgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smallheadimgurl_);
  }
  mybrandlist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mybrandlist()) {
    mybrandlist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mybrandlist_);
  }
  chatroomdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_chatroomdata()) {
    chatroomdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chatroomdata_);
  }
  headimgmd5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_headimgmd5()) {
    headimgmd5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.headimgmd5_);
  }
  encryptusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_encryptusername()) {
    encryptusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encryptusername_);
  }
  idcardnum_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_idcardnum()) {
    idcardnum_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.idcardnum_);
  }
  realname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_realname()) {
    realname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.realname_);
  }
  mobilehash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mobilehash()) {
    mobilehash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mobilehash_);
  }
  mobilefullhash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mobilefullhash()) {
    mobilefullhash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mobilefullhash_);
  }
  extinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_extinfo()) {
    extinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extinfo_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  cardimgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cardimgurl()) {
    cardimgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cardimgurl_);
  }
  labelidlist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_labelidlist()) {
    labelidlist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.labelidlist_);
  }
  if (from.has_username()) {
    username_ = new ::micromsg::SKBuiltinString_t(*from.username_);
  } else {
    username_ = NULL;
  }
  if (from.has_nickname()) {
    nickname_ = new ::micromsg::SKBuiltinString_t(*from.nickname_);
  } else {
    nickname_ = NULL;
  }
  if (from.has_pyinitial()) {
    pyinitial_ = new ::micromsg::SKBuiltinString_t(*from.pyinitial_);
  } else {
    pyinitial_ = NULL;
  }
  if (from.has_quanpin()) {
    quanpin_ = new ::micromsg::SKBuiltinString_t(*from.quanpin_);
  } else {
    quanpin_ = NULL;
  }
  if (from.has_imgbuf()) {
    imgbuf_ = new ::micromsg::SKBuiltinBuffer_t(*from.imgbuf_);
  } else {
    imgbuf_ = NULL;
  }
  if (from.has_remark()) {
    remark_ = new ::micromsg::SKBuiltinString_t(*from.remark_);
  } else {
    remark_ = NULL;
  }
  if (from.has_remarkpyinitial()) {
    remarkpyinitial_ = new ::micromsg::SKBuiltinString_t(*from.remarkpyinitial_);
  } else {
    remarkpyinitial_ = NULL;
  }
  if (from.has_remarkquanpin()) {
    remarkquanpin_ = new ::micromsg::SKBuiltinString_t(*from.remarkquanpin_);
  } else {
    remarkquanpin_ = NULL;
  }
  if (from.has_domainlist()) {
    domainlist_ = new ::micromsg::SKBuiltinString_t(*from.domainlist_);
  } else {
    domainlist_ = NULL;
  }
  if (from.has_snsuserinfo()) {
    snsuserinfo_ = new ::micromsg::SnsUserInfo(*from.snsuserinfo_);
  } else {
    snsuserinfo_ = NULL;
  }
  if (from.has_customizedinfo()) {
    customizedinfo_ = new ::micromsg::CustomizedInfo(*from.customizedinfo_);
  } else {
    customizedinfo_ = NULL;
  }
  if (from.has_additionalcontactlist()) {
    additionalcontactlist_ = new ::micromsg::AdditionalContactList(*from.additionalcontactlist_);
  } else {
    additionalcontactlist_ = NULL;
  }
  if (from.has_newchatroomdata()) {
    newchatroomdata_ = new ::micromsg::ChatRoomMemberData(*from.newchatroomdata_);
  } else {
    newchatroomdata_ = NULL;
  }
  ::memcpy(&sex_, &from.sex_,
    reinterpret_cast<char*>(&deleteflag_) -
    reinterpret_cast<char*>(&sex_) + sizeof(deleteflag_));
  // @@protoc_insertion_point(copy_constructor:micromsg.ModContact)
}

void ModContact::SharedCtor() {
  province_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verifyinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weibo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verifycontent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alias_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chatroomowner_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weibonickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  albumbgimgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bigheadimgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smallheadimgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mybrandlist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chatroomdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headimgmd5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encryptusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  idcardnum_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  realname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobilehash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobilefullhash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cardimgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  labelidlist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&username_, 0, reinterpret_cast<char*>(&deleteflag_) -
    reinterpret_cast<char*>(&username_) + sizeof(deleteflag_));
  _cached_size_ = 0;
}

ModContact::~ModContact() {
  // @@protoc_insertion_point(destructor:micromsg.ModContact)
  SharedDtor();
}

void ModContact::SharedDtor() {
  province_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verifyinfo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weibo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verifycontent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alias_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chatroomowner_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weibonickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  albumbgimgid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bigheadimgurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smallheadimgurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mybrandlist_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chatroomdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headimgmd5_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encryptusername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  idcardnum_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  realname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobilehash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobilefullhash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extinfo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cardimgurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  labelidlist_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete username_;
  }
  if (this != internal_default_instance()) {
    delete nickname_;
  }
  if (this != internal_default_instance()) {
    delete pyinitial_;
  }
  if (this != internal_default_instance()) {
    delete quanpin_;
  }
  if (this != internal_default_instance()) {
    delete imgbuf_;
  }
  if (this != internal_default_instance()) {
    delete remark_;
  }
  if (this != internal_default_instance()) {
    delete remarkpyinitial_;
  }
  if (this != internal_default_instance()) {
    delete remarkquanpin_;
  }
  if (this != internal_default_instance()) {
    delete domainlist_;
  }
  if (this != internal_default_instance()) {
    delete snsuserinfo_;
  }
  if (this != internal_default_instance()) {
    delete customizedinfo_;
  }
  if (this != internal_default_instance()) {
    delete additionalcontactlist_;
  }
  if (this != internal_default_instance()) {
    delete newchatroomdata_;
  }
}

void ModContact::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModContact::descriptor() {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ModContact& ModContact::default_instance() {
  protobuf_mmbase_2eproto::InitDefaults();
  return *internal_default_instance();
}

ModContact* ModContact::New(::google::protobuf::Arena* arena) const {
  ModContact* n = new ModContact;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModContact::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.ModContact)
  roominfolist_.Clear();
  if (_has_bits_[0 / 32] & 255u) {
    if (has_province()) {
      GOOGLE_DCHECK(!province_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*province_.UnsafeRawStringPointer())->clear();
    }
    if (has_city()) {
      GOOGLE_DCHECK(!city_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*city_.UnsafeRawStringPointer())->clear();
    }
    if (has_signature()) {
      GOOGLE_DCHECK(!signature_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*signature_.UnsafeRawStringPointer())->clear();
    }
    if (has_verifyinfo()) {
      GOOGLE_DCHECK(!verifyinfo_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*verifyinfo_.UnsafeRawStringPointer())->clear();
    }
    if (has_weibo()) {
      GOOGLE_DCHECK(!weibo_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*weibo_.UnsafeRawStringPointer())->clear();
    }
    if (has_verifycontent()) {
      GOOGLE_DCHECK(!verifycontent_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*verifycontent_.UnsafeRawStringPointer())->clear();
    }
    if (has_alias()) {
      GOOGLE_DCHECK(!alias_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*alias_.UnsafeRawStringPointer())->clear();
    }
    if (has_chatroomowner()) {
      GOOGLE_DCHECK(!chatroomowner_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*chatroomowner_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    if (has_weibonickname()) {
      GOOGLE_DCHECK(!weibonickname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*weibonickname_.UnsafeRawStringPointer())->clear();
    }
    if (has_albumbgimgid()) {
      GOOGLE_DCHECK(!albumbgimgid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*albumbgimgid_.UnsafeRawStringPointer())->clear();
    }
    if (has_country()) {
      GOOGLE_DCHECK(!country_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*country_.UnsafeRawStringPointer())->clear();
    }
    if (has_bigheadimgurl()) {
      GOOGLE_DCHECK(!bigheadimgurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bigheadimgurl_.UnsafeRawStringPointer())->clear();
    }
    if (has_smallheadimgurl()) {
      GOOGLE_DCHECK(!smallheadimgurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*smallheadimgurl_.UnsafeRawStringPointer())->clear();
    }
    if (has_mybrandlist()) {
      GOOGLE_DCHECK(!mybrandlist_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mybrandlist_.UnsafeRawStringPointer())->clear();
    }
    if (has_chatroomdata()) {
      GOOGLE_DCHECK(!chatroomdata_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*chatroomdata_.UnsafeRawStringPointer())->clear();
    }
    if (has_headimgmd5()) {
      GOOGLE_DCHECK(!headimgmd5_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*headimgmd5_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    if (has_encryptusername()) {
      GOOGLE_DCHECK(!encryptusername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*encryptusername_.UnsafeRawStringPointer())->clear();
    }
    if (has_idcardnum()) {
      GOOGLE_DCHECK(!idcardnum_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*idcardnum_.UnsafeRawStringPointer())->clear();
    }
    if (has_realname()) {
      GOOGLE_DCHECK(!realname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*realname_.UnsafeRawStringPointer())->clear();
    }
    if (has_mobilehash()) {
      GOOGLE_DCHECK(!mobilehash_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mobilehash_.UnsafeRawStringPointer())->clear();
    }
    if (has_mobilefullhash()) {
      GOOGLE_DCHECK(!mobilefullhash_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mobilefullhash_.UnsafeRawStringPointer())->clear();
    }
    if (has_extinfo()) {
      GOOGLE_DCHECK(!extinfo_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*extinfo_.UnsafeRawStringPointer())->clear();
    }
    if (has_description()) {
      GOOGLE_DCHECK(!description_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*description_.UnsafeRawStringPointer())->clear();
    }
    if (has_cardimgurl()) {
      GOOGLE_DCHECK(!cardimgurl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*cardimgurl_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    if (has_labelidlist()) {
      GOOGLE_DCHECK(!labelidlist_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*labelidlist_.UnsafeRawStringPointer())->clear();
    }
    if (has_username()) {
      GOOGLE_DCHECK(username_ != NULL);
      username_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_nickname()) {
      GOOGLE_DCHECK(nickname_ != NULL);
      nickname_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_pyinitial()) {
      GOOGLE_DCHECK(pyinitial_ != NULL);
      pyinitial_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_quanpin()) {
      GOOGLE_DCHECK(quanpin_ != NULL);
      quanpin_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_imgbuf()) {
      GOOGLE_DCHECK(imgbuf_ != NULL);
      imgbuf_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
    if (has_remark()) {
      GOOGLE_DCHECK(remark_ != NULL);
      remark_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_remarkpyinitial()) {
      GOOGLE_DCHECK(remarkpyinitial_ != NULL);
      remarkpyinitial_->::micromsg::SKBuiltinString_t::Clear();
    }
  }
  if (_has_bits_[32 / 32] & 63u) {
    if (has_remarkquanpin()) {
      GOOGLE_DCHECK(remarkquanpin_ != NULL);
      remarkquanpin_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_domainlist()) {
      GOOGLE_DCHECK(domainlist_ != NULL);
      domainlist_->::micromsg::SKBuiltinString_t::Clear();
    }
    if (has_snsuserinfo()) {
      GOOGLE_DCHECK(snsuserinfo_ != NULL);
      snsuserinfo_->::micromsg::SnsUserInfo::Clear();
    }
    if (has_customizedinfo()) {
      GOOGLE_DCHECK(customizedinfo_ != NULL);
      customizedinfo_->::micromsg::CustomizedInfo::Clear();
    }
    if (has_additionalcontactlist()) {
      GOOGLE_DCHECK(additionalcontactlist_ != NULL);
      additionalcontactlist_->::micromsg::AdditionalContactList::Clear();
    }
    if (has_newchatroomdata()) {
      GOOGLE_DCHECK(newchatroomdata_ != NULL);
      newchatroomdata_->::micromsg::ChatRoomMemberData::Clear();
    }
  }
  if (_has_bits_[32 / 32] & 192u) {
    ::memset(&sex_, 0, reinterpret_cast<char*>(&bitmask_) -
      reinterpret_cast<char*>(&sex_) + sizeof(bitmask_));
  }
  if (_has_bits_[40 / 32] & 65280u) {
    ::memset(&bitval_, 0, reinterpret_cast<char*>(&hasweixinhdheadimg_) -
      reinterpret_cast<char*>(&bitval_) + sizeof(hasweixinhdheadimg_));
  }
  if (_has_bits_[48 / 32] & 16711680u) {
    ::memset(&verifyflag_, 0, reinterpret_cast<char*>(&chatroommaxcount_) -
      reinterpret_cast<char*>(&verifyflag_) + sizeof(chatroommaxcount_));
  }
  if (_has_bits_[56 / 32] & 50331648u) {
    ::memset(&chatroomtype_, 0, reinterpret_cast<char*>(&deleteflag_) -
      reinterpret_cast<char*>(&chatroomtype_) + sizeof(deleteflag_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ModContact::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.ModContact)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.SKBuiltinString_t UserName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_username()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t NickName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nickname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t PYInitial = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pyinitial()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t QuanPin = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quanpin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 Sex = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_sex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t ImgBuf = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imgbuf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 BitMask = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_bitmask();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bitmask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 BitVal = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_bitval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bitval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ImgFlag = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_imgflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &imgflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinString_t Remark = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_remark()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinString_t RemarkPYInitial = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_remarkpyinitial()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinString_t RemarkQuanPin = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_remarkquanpin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ContactType = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_contacttype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contacttype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 RoomInfoCount = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_roominfocount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roominfocount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.RoomInfo RoomInfoList = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roominfolist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SKBuiltinString_t DomainList = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_domainlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ChatRoomNotify = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_chatroomnotify();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chatroomnotify_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 AddContactScene = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_addcontactscene();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addcontactscene_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Province = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_province()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->province().data(), this->province().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ModContact.Province");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string City = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->city().data(), this->city().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ModContact.City");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Signature = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ModContact.Signature");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 PersonalCard = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          set_has_personalcard();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &personalcard_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 HasWeiXinHdHeadImg = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u)) {
          set_has_hasweixinhdheadimg();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hasweixinhdheadimg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 VerifyFlag = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u)) {
          set_has_verifyflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &verifyflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string VerifyInfo = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verifyinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->verifyinfo().data(), this->verifyinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ModContact.VerifyInfo");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 Level = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 Source = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u)) {
          set_has_source();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Weibo = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weibo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->weibo().data(), this->weibo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ModContact.Weibo");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string VerifyContent = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verifycontent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->verifycontent().data(), this->verifycontent().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ModContact.VerifyContent");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Alias = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alias()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->alias().data(), this->alias().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ModContact.Alias");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ChatRoomOwner = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chatroomowner()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->chatroomowner().data(), this->chatroomowner().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ModContact.ChatRoomOwner");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string WeiboNickname = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(258u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weibonickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->weibonickname().data(), this->weibonickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ModContact.WeiboNickname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 WeiboFlag = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(264u)) {
          set_has_weiboflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weiboflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 AlbumStyle = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(272u)) {
          set_has_albumstyle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &albumstyle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 AlbumFlag = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(280u)) {
          set_has_albumflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &albumflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string AlbumBGImgID = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(290u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_albumbgimgid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->albumbgimgid().data(), this->albumbgimgid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ModContact.AlbumBGImgID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.SnsUserInfo SnsUserInfo = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(298u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_snsuserinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Country = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(306u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country().data(), this->country().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ModContact.Country");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string BigHeadImgUrl = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(314u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bigheadimgurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bigheadimgurl().data(), this->bigheadimgurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ModContact.BigHeadImgUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string SmallHeadImgUrl = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(322u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_smallheadimgurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->smallheadimgurl().data(), this->smallheadimgurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ModContact.SmallHeadImgUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string MyBrandList = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(330u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mybrandlist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mybrandlist().data(), this->mybrandlist().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ModContact.MyBrandList");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.CustomizedInfo CustomizedInfo = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(338u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_customizedinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ChatRoomData = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(346u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chatroomdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->chatroomdata().data(), this->chatroomdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ModContact.ChatRoomData");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string HeadImgMd5 = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(354u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headimgmd5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->headimgmd5().data(), this->headimgmd5().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ModContact.HeadImgMd5");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string EncryptUserName = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(362u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_encryptusername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->encryptusername().data(), this->encryptusername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ModContact.EncryptUserName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string IDCardNum = 46;
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(370u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_idcardnum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->idcardnum().data(), this->idcardnum().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ModContact.IDCardNum");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string RealName = 47;
      case 47: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(378u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_realname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->realname().data(), this->realname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ModContact.RealName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string MobileHash = 48;
      case 48: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(386u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mobilehash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mobilehash().data(), this->mobilehash().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ModContact.MobileHash");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string MobileFullHash = 49;
      case 49: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(394u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mobilefullhash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mobilefullhash().data(), this->mobilefullhash().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ModContact.MobileFullHash");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.AdditionalContactList AdditionalContactList = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(402u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_additionalcontactlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ChatroomVersion = 53;
      case 53: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(424u)) {
          set_has_chatroomversion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chatroomversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ExtInfo = 54;
      case 54: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(434u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->extinfo().data(), this->extinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ModContact.ExtInfo");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ChatroomMaxCount = 55;
      case 55: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(440u)) {
          set_has_chatroommaxcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chatroommaxcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ChatroomType = 56;
      case 56: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(448u)) {
          set_has_chatroomtype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chatroomtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.ChatRoomMemberData NewChatroomData = 57;
      case 57: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(458u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newchatroomdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 DeleteFlag = 58;
      case 58: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(464u)) {
          set_has_deleteflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deleteflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string Description = 59;
      case 59: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(474u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ModContact.Description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string CardImgUrl = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(482u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cardimgurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cardimgurl().data(), this->cardimgurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ModContact.CardImgUrl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string LabelIDList = 61;
      case 61: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(490u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_labelidlist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->labelidlist().data(), this->labelidlist().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.ModContact.LabelIDList");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.ModContact)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.ModContact)
  return false;
#undef DO_
}

void ModContact::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.ModContact)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinString_t UserName = 1;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->username_, output);
  }

  // required .micromsg.SKBuiltinString_t NickName = 2;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->nickname_, output);
  }

  // required .micromsg.SKBuiltinString_t PYInitial = 3;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->pyinitial_, output);
  }

  // required .micromsg.SKBuiltinString_t QuanPin = 4;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->quanpin_, output);
  }

  cached_has_bits = _has_bits_[1];
  // required int32 Sex = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sex(), output);
  }

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinBuffer_t ImgBuf = 6;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->imgbuf_, output);
  }

  cached_has_bits = _has_bits_[1];
  // required uint32 BitMask = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->bitmask(), output);
  }

  // required uint32 BitVal = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->bitval(), output);
  }

  // required uint32 ImgFlag = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->imgflag(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .micromsg.SKBuiltinString_t Remark = 10;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->remark_, output);
  }

  // optional .micromsg.SKBuiltinString_t RemarkPYInitial = 11;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->remarkpyinitial_, output);
  }

  cached_has_bits = _has_bits_[1];
  // optional .micromsg.SKBuiltinString_t RemarkQuanPin = 12;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->remarkquanpin_, output);
  }

  // optional uint32 ContactType = 13;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->contacttype(), output);
  }

  // optional uint32 RoomInfoCount = 14;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->roominfocount(), output);
  }

  // repeated .micromsg.RoomInfo RoomInfoList = 15;
  for (unsigned int i = 0, n = this->roominfolist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->roominfolist(i), output);
  }

  // optional .micromsg.SKBuiltinString_t DomainList = 16;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->domainlist_, output);
  }

  // optional uint32 ChatRoomNotify = 17;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->chatroomnotify(), output);
  }

  // optional uint32 AddContactScene = 18;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->addcontactscene(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string Province = 19;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->province().data(), this->province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModContact.Province");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->province(), output);
  }

  // optional string City = 20;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModContact.City");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->city(), output);
  }

  // optional string Signature = 21;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModContact.Signature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->signature(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 PersonalCard = 22;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->personalcard(), output);
  }

  // optional uint32 HasWeiXinHdHeadImg = 23;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->hasweixinhdheadimg(), output);
  }

  // optional uint32 VerifyFlag = 24;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->verifyflag(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string VerifyInfo = 25;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verifyinfo().data(), this->verifyinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModContact.VerifyInfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      25, this->verifyinfo(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 Level = 26;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->level(), output);
  }

  // optional uint32 Source = 27;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->source(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string Weibo = 28;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->weibo().data(), this->weibo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModContact.Weibo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      28, this->weibo(), output);
  }

  // optional string VerifyContent = 29;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verifycontent().data(), this->verifycontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModContact.VerifyContent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      29, this->verifycontent(), output);
  }

  // optional string Alias = 30;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModContact.Alias");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      30, this->alias(), output);
  }

  // optional string ChatRoomOwner = 31;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chatroomowner().data(), this->chatroomowner().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModContact.ChatRoomOwner");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      31, this->chatroomowner(), output);
  }

  // optional string WeiboNickname = 32;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->weibonickname().data(), this->weibonickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModContact.WeiboNickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      32, this->weibonickname(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 WeiboFlag = 33;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->weiboflag(), output);
  }

  // optional int32 AlbumStyle = 34;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->albumstyle(), output);
  }

  // optional int32 AlbumFlag = 35;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->albumflag(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string AlbumBGImgID = 36;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->albumbgimgid().data(), this->albumbgimgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModContact.AlbumBGImgID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      36, this->albumbgimgid(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional .micromsg.SnsUserInfo SnsUserInfo = 37;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, *this->snsuserinfo_, output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string Country = 38;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModContact.Country");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      38, this->country(), output);
  }

  // optional string BigHeadImgUrl = 39;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bigheadimgurl().data(), this->bigheadimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModContact.BigHeadImgUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      39, this->bigheadimgurl(), output);
  }

  // optional string SmallHeadImgUrl = 40;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->smallheadimgurl().data(), this->smallheadimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModContact.SmallHeadImgUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      40, this->smallheadimgurl(), output);
  }

  // optional string MyBrandList = 41;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mybrandlist().data(), this->mybrandlist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModContact.MyBrandList");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      41, this->mybrandlist(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional .micromsg.CustomizedInfo CustomizedInfo = 42;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, *this->customizedinfo_, output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string ChatRoomData = 43;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chatroomdata().data(), this->chatroomdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModContact.ChatRoomData");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      43, this->chatroomdata(), output);
  }

  // optional string HeadImgMd5 = 44;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->headimgmd5().data(), this->headimgmd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModContact.HeadImgMd5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      44, this->headimgmd5(), output);
  }

  // optional string EncryptUserName = 45;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->encryptusername().data(), this->encryptusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModContact.EncryptUserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      45, this->encryptusername(), output);
  }

  // optional string IDCardNum = 46;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->idcardnum().data(), this->idcardnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModContact.IDCardNum");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      46, this->idcardnum(), output);
  }

  // optional string RealName = 47;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->realname().data(), this->realname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModContact.RealName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      47, this->realname(), output);
  }

  // optional string MobileHash = 48;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mobilehash().data(), this->mobilehash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModContact.MobileHash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      48, this->mobilehash(), output);
  }

  // optional string MobileFullHash = 49;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mobilefullhash().data(), this->mobilefullhash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModContact.MobileFullHash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      49, this->mobilefullhash(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional .micromsg.AdditionalContactList AdditionalContactList = 50;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, *this->additionalcontactlist_, output);
  }

  // optional uint32 ChatroomVersion = 53;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(53, this->chatroomversion(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string ExtInfo = 54;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extinfo().data(), this->extinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModContact.ExtInfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      54, this->extinfo(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 ChatroomMaxCount = 55;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(55, this->chatroommaxcount(), output);
  }

  // optional uint32 ChatroomType = 56;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(56, this->chatroomtype(), output);
  }

  // optional .micromsg.ChatRoomMemberData NewChatroomData = 57;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      57, *this->newchatroomdata_, output);
  }

  // optional int32 DeleteFlag = 58;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(58, this->deleteflag(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string Description = 59;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModContact.Description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      59, this->description(), output);
  }

  // optional string CardImgUrl = 60;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cardimgurl().data(), this->cardimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModContact.CardImgUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      60, this->cardimgurl(), output);
  }

  // optional string LabelIDList = 61;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->labelidlist().data(), this->labelidlist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModContact.LabelIDList");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      61, this->labelidlist(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.ModContact)
}

::google::protobuf::uint8* ModContact::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.ModContact)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinString_t UserName = 1;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->username_, deterministic, target);
  }

  // required .micromsg.SKBuiltinString_t NickName = 2;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->nickname_, deterministic, target);
  }

  // required .micromsg.SKBuiltinString_t PYInitial = 3;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->pyinitial_, deterministic, target);
  }

  // required .micromsg.SKBuiltinString_t QuanPin = 4;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->quanpin_, deterministic, target);
  }

  cached_has_bits = _has_bits_[1];
  // required int32 Sex = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sex(), target);
  }

  cached_has_bits = _has_bits_[0];
  // required .micromsg.SKBuiltinBuffer_t ImgBuf = 6;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->imgbuf_, deterministic, target);
  }

  cached_has_bits = _has_bits_[1];
  // required uint32 BitMask = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->bitmask(), target);
  }

  // required uint32 BitVal = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->bitval(), target);
  }

  // required uint32 ImgFlag = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->imgflag(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .micromsg.SKBuiltinString_t Remark = 10;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->remark_, deterministic, target);
  }

  // optional .micromsg.SKBuiltinString_t RemarkPYInitial = 11;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->remarkpyinitial_, deterministic, target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .micromsg.SKBuiltinString_t RemarkQuanPin = 12;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->remarkquanpin_, deterministic, target);
  }

  // optional uint32 ContactType = 13;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->contacttype(), target);
  }

  // optional uint32 RoomInfoCount = 14;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->roominfocount(), target);
  }

  // repeated .micromsg.RoomInfo RoomInfoList = 15;
  for (unsigned int i = 0, n = this->roominfolist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, this->roominfolist(i), deterministic, target);
  }

  // optional .micromsg.SKBuiltinString_t DomainList = 16;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *this->domainlist_, deterministic, target);
  }

  // optional uint32 ChatRoomNotify = 17;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->chatroomnotify(), target);
  }

  // optional uint32 AddContactScene = 18;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->addcontactscene(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string Province = 19;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->province().data(), this->province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModContact.Province");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->province(), target);
  }

  // optional string City = 20;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModContact.City");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->city(), target);
  }

  // optional string Signature = 21;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModContact.Signature");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->signature(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 PersonalCard = 22;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->personalcard(), target);
  }

  // optional uint32 HasWeiXinHdHeadImg = 23;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->hasweixinhdheadimg(), target);
  }

  // optional uint32 VerifyFlag = 24;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->verifyflag(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string VerifyInfo = 25;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verifyinfo().data(), this->verifyinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModContact.VerifyInfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->verifyinfo(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 Level = 26;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->level(), target);
  }

  // optional uint32 Source = 27;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->source(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string Weibo = 28;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->weibo().data(), this->weibo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModContact.Weibo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->weibo(), target);
  }

  // optional string VerifyContent = 29;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verifycontent().data(), this->verifycontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModContact.VerifyContent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->verifycontent(), target);
  }

  // optional string Alias = 30;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModContact.Alias");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->alias(), target);
  }

  // optional string ChatRoomOwner = 31;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chatroomowner().data(), this->chatroomowner().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModContact.ChatRoomOwner");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->chatroomowner(), target);
  }

  // optional string WeiboNickname = 32;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->weibonickname().data(), this->weibonickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModContact.WeiboNickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        32, this->weibonickname(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 WeiboFlag = 33;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->weiboflag(), target);
  }

  // optional int32 AlbumStyle = 34;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->albumstyle(), target);
  }

  // optional int32 AlbumFlag = 35;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->albumflag(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string AlbumBGImgID = 36;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->albumbgimgid().data(), this->albumbgimgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModContact.AlbumBGImgID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        36, this->albumbgimgid(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .micromsg.SnsUserInfo SnsUserInfo = 37;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        37, *this->snsuserinfo_, deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string Country = 38;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModContact.Country");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        38, this->country(), target);
  }

  // optional string BigHeadImgUrl = 39;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bigheadimgurl().data(), this->bigheadimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModContact.BigHeadImgUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        39, this->bigheadimgurl(), target);
  }

  // optional string SmallHeadImgUrl = 40;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->smallheadimgurl().data(), this->smallheadimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModContact.SmallHeadImgUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        40, this->smallheadimgurl(), target);
  }

  // optional string MyBrandList = 41;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mybrandlist().data(), this->mybrandlist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModContact.MyBrandList");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        41, this->mybrandlist(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .micromsg.CustomizedInfo CustomizedInfo = 42;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        42, *this->customizedinfo_, deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string ChatRoomData = 43;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chatroomdata().data(), this->chatroomdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModContact.ChatRoomData");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        43, this->chatroomdata(), target);
  }

  // optional string HeadImgMd5 = 44;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->headimgmd5().data(), this->headimgmd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModContact.HeadImgMd5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        44, this->headimgmd5(), target);
  }

  // optional string EncryptUserName = 45;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->encryptusername().data(), this->encryptusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModContact.EncryptUserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        45, this->encryptusername(), target);
  }

  // optional string IDCardNum = 46;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->idcardnum().data(), this->idcardnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModContact.IDCardNum");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        46, this->idcardnum(), target);
  }

  // optional string RealName = 47;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->realname().data(), this->realname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModContact.RealName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        47, this->realname(), target);
  }

  // optional string MobileHash = 48;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mobilehash().data(), this->mobilehash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModContact.MobileHash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        48, this->mobilehash(), target);
  }

  // optional string MobileFullHash = 49;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mobilefullhash().data(), this->mobilefullhash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModContact.MobileFullHash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        49, this->mobilefullhash(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .micromsg.AdditionalContactList AdditionalContactList = 50;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        50, *this->additionalcontactlist_, deterministic, target);
  }

  // optional uint32 ChatroomVersion = 53;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(53, this->chatroomversion(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string ExtInfo = 54;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extinfo().data(), this->extinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModContact.ExtInfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        54, this->extinfo(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 ChatroomMaxCount = 55;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(55, this->chatroommaxcount(), target);
  }

  // optional uint32 ChatroomType = 56;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(56, this->chatroomtype(), target);
  }

  // optional .micromsg.ChatRoomMemberData NewChatroomData = 57;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        57, *this->newchatroomdata_, deterministic, target);
  }

  // optional int32 DeleteFlag = 58;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(58, this->deleteflag(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string Description = 59;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModContact.Description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        59, this->description(), target);
  }

  // optional string CardImgUrl = 60;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cardimgurl().data(), this->cardimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModContact.CardImgUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        60, this->cardimgurl(), target);
  }

  // optional string LabelIDList = 61;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->labelidlist().data(), this->labelidlist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.ModContact.LabelIDList");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        61, this->labelidlist(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.ModContact)
  return target;
}

size_t ModContact::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.ModContact)
  size_t total_size = 0;

  if (has_username()) {
    // required .micromsg.SKBuiltinString_t UserName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->username_);
  }

  if (has_nickname()) {
    // required .micromsg.SKBuiltinString_t NickName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->nickname_);
  }

  if (has_pyinitial()) {
    // required .micromsg.SKBuiltinString_t PYInitial = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pyinitial_);
  }

  if (has_quanpin()) {
    // required .micromsg.SKBuiltinString_t QuanPin = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->quanpin_);
  }

  if (has_imgbuf()) {
    // required .micromsg.SKBuiltinBuffer_t ImgBuf = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->imgbuf_);
  }

  if (has_sex()) {
    // required int32 Sex = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sex());
  }

  if (has_bitmask()) {
    // required uint32 BitMask = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bitmask());
  }

  if (has_bitval()) {
    // required uint32 BitVal = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bitval());
  }

  if (has_imgflag()) {
    // required uint32 ImgFlag = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->imgflag());
  }

  return total_size;
}
size_t ModContact::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.ModContact)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if ((((_has_bits_[0] & 0x3e000000) ^ 0x3e000000)
         | ((_has_bits_[1] & 0x000003c0) ^ 0x000003c0)) == 0) {  // All required fields are present.
    // required .micromsg.SKBuiltinString_t UserName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->username_);

    // required .micromsg.SKBuiltinString_t NickName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->nickname_);

    // required .micromsg.SKBuiltinString_t PYInitial = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pyinitial_);

    // required .micromsg.SKBuiltinString_t QuanPin = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->quanpin_);

    // required .micromsg.SKBuiltinBuffer_t ImgBuf = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->imgbuf_);

    // required int32 Sex = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sex());

    // required uint32 BitMask = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bitmask());

    // required uint32 BitVal = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bitval());

    // required uint32 ImgFlag = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->imgflag());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .micromsg.RoomInfo RoomInfoList = 15;
  {
    unsigned int count = this->roominfolist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roominfolist(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string Province = 19;
    if (has_province()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->province());
    }

    // optional string City = 20;
    if (has_city()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city());
    }

    // optional string Signature = 21;
    if (has_signature()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signature());
    }

    // optional string VerifyInfo = 25;
    if (has_verifyinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->verifyinfo());
    }

    // optional string Weibo = 28;
    if (has_weibo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->weibo());
    }

    // optional string VerifyContent = 29;
    if (has_verifycontent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->verifycontent());
    }

    // optional string Alias = 30;
    if (has_alias()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alias());
    }

    // optional string ChatRoomOwner = 31;
    if (has_chatroomowner()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chatroomowner());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional string WeiboNickname = 32;
    if (has_weibonickname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->weibonickname());
    }

    // optional string AlbumBGImgID = 36;
    if (has_albumbgimgid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->albumbgimgid());
    }

    // optional string Country = 38;
    if (has_country()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country());
    }

    // optional string BigHeadImgUrl = 39;
    if (has_bigheadimgurl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bigheadimgurl());
    }

    // optional string SmallHeadImgUrl = 40;
    if (has_smallheadimgurl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->smallheadimgurl());
    }

    // optional string MyBrandList = 41;
    if (has_mybrandlist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mybrandlist());
    }

    // optional string ChatRoomData = 43;
    if (has_chatroomdata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chatroomdata());
    }

    // optional string HeadImgMd5 = 44;
    if (has_headimgmd5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headimgmd5());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional string EncryptUserName = 45;
    if (has_encryptusername()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->encryptusername());
    }

    // optional string IDCardNum = 46;
    if (has_idcardnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->idcardnum());
    }

    // optional string RealName = 47;
    if (has_realname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->realname());
    }

    // optional string MobileHash = 48;
    if (has_mobilehash()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mobilehash());
    }

    // optional string MobileFullHash = 49;
    if (has_mobilefullhash()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mobilefullhash());
    }

    // optional string ExtInfo = 54;
    if (has_extinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extinfo());
    }

    // optional string Description = 59;
    if (has_description()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional string CardImgUrl = 60;
    if (has_cardimgurl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cardimgurl());
    }

  }
  // optional string LabelIDList = 61;
  if (has_labelidlist()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->labelidlist());
  }

  if (_has_bits_[24 / 32] & 3221225472u) {
    // optional .micromsg.SKBuiltinString_t Remark = 10;
    if (has_remark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->remark_);
    }

    // optional .micromsg.SKBuiltinString_t RemarkPYInitial = 11;
    if (has_remarkpyinitial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->remarkpyinitial_);
    }

  }
  if (_has_bits_[32 / 32] & 63u) {
    // optional .micromsg.SKBuiltinString_t RemarkQuanPin = 12;
    if (has_remarkquanpin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->remarkquanpin_);
    }

    // optional .micromsg.SKBuiltinString_t DomainList = 16;
    if (has_domainlist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->domainlist_);
    }

    // optional .micromsg.SnsUserInfo SnsUserInfo = 37;
    if (has_snsuserinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->snsuserinfo_);
    }

    // optional .micromsg.CustomizedInfo CustomizedInfo = 42;
    if (has_customizedinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->customizedinfo_);
    }

    // optional .micromsg.AdditionalContactList AdditionalContactList = 50;
    if (has_additionalcontactlist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->additionalcontactlist_);
    }

    // optional .micromsg.ChatRoomMemberData NewChatroomData = 57;
    if (has_newchatroomdata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->newchatroomdata_);
    }

  }
  if (_has_bits_[40 / 32] & 64512u) {
    // optional uint32 ContactType = 13;
    if (has_contacttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->contacttype());
    }

    // optional uint32 RoomInfoCount = 14;
    if (has_roominfocount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roominfocount());
    }

    // optional uint32 ChatRoomNotify = 17;
    if (has_chatroomnotify()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chatroomnotify());
    }

    // optional uint32 AddContactScene = 18;
    if (has_addcontactscene()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addcontactscene());
    }

    // optional uint32 PersonalCard = 22;
    if (has_personalcard()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->personalcard());
    }

    // optional uint32 HasWeiXinHdHeadImg = 23;
    if (has_hasweixinhdheadimg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hasweixinhdheadimg());
    }

  }
  if (_has_bits_[48 / 32] & 16711680u) {
    // optional uint32 VerifyFlag = 24;
    if (has_verifyflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->verifyflag());
    }

    // optional int32 Level = 26;
    if (has_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional uint32 Source = 27;
    if (has_source()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source());
    }

    // optional uint32 WeiboFlag = 33;
    if (has_weiboflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weiboflag());
    }

    // optional int32 AlbumStyle = 34;
    if (has_albumstyle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->albumstyle());
    }

    // optional int32 AlbumFlag = 35;
    if (has_albumflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->albumflag());
    }

    // optional uint32 ChatroomVersion = 53;
    if (has_chatroomversion()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chatroomversion());
    }

    // optional uint32 ChatroomMaxCount = 55;
    if (has_chatroommaxcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chatroommaxcount());
    }

  }
  if (_has_bits_[56 / 32] & 50331648u) {
    // optional uint32 ChatroomType = 56;
    if (has_chatroomtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chatroomtype());
    }

    // optional int32 DeleteFlag = 58;
    if (has_deleteflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deleteflag());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModContact::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.ModContact)
  GOOGLE_DCHECK_NE(&from, this);
  const ModContact* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ModContact>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.ModContact)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.ModContact)
    MergeFrom(*source);
  }
}

void ModContact::MergeFrom(const ModContact& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.ModContact)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  roominfolist_.MergeFrom(from.roominfolist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_province();
      province_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.province_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_city();
      city_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.city_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_signature();
      signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_verifyinfo();
      verifyinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verifyinfo_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_weibo();
      weibo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.weibo_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_verifycontent();
      verifycontent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verifycontent_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_alias();
      alias_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alias_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_chatroomowner();
      chatroomowner_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chatroomowner_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_weibonickname();
      weibonickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.weibonickname_);
    }
    if (cached_has_bits & 0x00000200u) {
      set_has_albumbgimgid();
      albumbgimgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.albumbgimgid_);
    }
    if (cached_has_bits & 0x00000400u) {
      set_has_country();
      country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_);
    }
    if (cached_has_bits & 0x00000800u) {
      set_has_bigheadimgurl();
      bigheadimgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bigheadimgurl_);
    }
    if (cached_has_bits & 0x00001000u) {
      set_has_smallheadimgurl();
      smallheadimgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smallheadimgurl_);
    }
    if (cached_has_bits & 0x00002000u) {
      set_has_mybrandlist();
      mybrandlist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mybrandlist_);
    }
    if (cached_has_bits & 0x00004000u) {
      set_has_chatroomdata();
      chatroomdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chatroomdata_);
    }
    if (cached_has_bits & 0x00008000u) {
      set_has_headimgmd5();
      headimgmd5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.headimgmd5_);
    }
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      set_has_encryptusername();
      encryptusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encryptusername_);
    }
    if (cached_has_bits & 0x00020000u) {
      set_has_idcardnum();
      idcardnum_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.idcardnum_);
    }
    if (cached_has_bits & 0x00040000u) {
      set_has_realname();
      realname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.realname_);
    }
    if (cached_has_bits & 0x00080000u) {
      set_has_mobilehash();
      mobilehash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mobilehash_);
    }
    if (cached_has_bits & 0x00100000u) {
      set_has_mobilefullhash();
      mobilefullhash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mobilefullhash_);
    }
    if (cached_has_bits & 0x00200000u) {
      set_has_extinfo();
      extinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extinfo_);
    }
    if (cached_has_bits & 0x00400000u) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00800000u) {
      set_has_cardimgurl();
      cardimgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cardimgurl_);
    }
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      set_has_labelidlist();
      labelidlist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.labelidlist_);
    }
    if (cached_has_bits & 0x02000000u) {
      mutable_username()->::micromsg::SKBuiltinString_t::MergeFrom(from.username());
    }
    if (cached_has_bits & 0x04000000u) {
      mutable_nickname()->::micromsg::SKBuiltinString_t::MergeFrom(from.nickname());
    }
    if (cached_has_bits & 0x08000000u) {
      mutable_pyinitial()->::micromsg::SKBuiltinString_t::MergeFrom(from.pyinitial());
    }
    if (cached_has_bits & 0x10000000u) {
      mutable_quanpin()->::micromsg::SKBuiltinString_t::MergeFrom(from.quanpin());
    }
    if (cached_has_bits & 0x20000000u) {
      mutable_imgbuf()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.imgbuf());
    }
    if (cached_has_bits & 0x40000000u) {
      mutable_remark()->::micromsg::SKBuiltinString_t::MergeFrom(from.remark());
    }
    if (cached_has_bits & 0x80000000u) {
      mutable_remarkpyinitial()->::micromsg::SKBuiltinString_t::MergeFrom(from.remarkpyinitial());
    }
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_remarkquanpin()->::micromsg::SKBuiltinString_t::MergeFrom(from.remarkquanpin());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_domainlist()->::micromsg::SKBuiltinString_t::MergeFrom(from.domainlist());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_snsuserinfo()->::micromsg::SnsUserInfo::MergeFrom(from.snsuserinfo());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_customizedinfo()->::micromsg::CustomizedInfo::MergeFrom(from.customizedinfo());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_additionalcontactlist()->::micromsg::AdditionalContactList::MergeFrom(from.additionalcontactlist());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_newchatroomdata()->::micromsg::ChatRoomMemberData::MergeFrom(from.newchatroomdata());
    }
    if (cached_has_bits & 0x00000040u) {
      sex_ = from.sex_;
    }
    if (cached_has_bits & 0x00000080u) {
      bitmask_ = from.bitmask_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      bitval_ = from.bitval_;
    }
    if (cached_has_bits & 0x00000200u) {
      imgflag_ = from.imgflag_;
    }
    if (cached_has_bits & 0x00000400u) {
      contacttype_ = from.contacttype_;
    }
    if (cached_has_bits & 0x00000800u) {
      roominfocount_ = from.roominfocount_;
    }
    if (cached_has_bits & 0x00001000u) {
      chatroomnotify_ = from.chatroomnotify_;
    }
    if (cached_has_bits & 0x00002000u) {
      addcontactscene_ = from.addcontactscene_;
    }
    if (cached_has_bits & 0x00004000u) {
      personalcard_ = from.personalcard_;
    }
    if (cached_has_bits & 0x00008000u) {
      hasweixinhdheadimg_ = from.hasweixinhdheadimg_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      verifyflag_ = from.verifyflag_;
    }
    if (cached_has_bits & 0x00020000u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00040000u) {
      source_ = from.source_;
    }
    if (cached_has_bits & 0x00080000u) {
      weiboflag_ = from.weiboflag_;
    }
    if (cached_has_bits & 0x00100000u) {
      albumstyle_ = from.albumstyle_;
    }
    if (cached_has_bits & 0x00200000u) {
      albumflag_ = from.albumflag_;
    }
    if (cached_has_bits & 0x00400000u) {
      chatroomversion_ = from.chatroomversion_;
    }
    if (cached_has_bits & 0x00800000u) {
      chatroommaxcount_ = from.chatroommaxcount_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 50331648u) {
    if (cached_has_bits & 0x01000000u) {
      chatroomtype_ = from.chatroomtype_;
    }
    if (cached_has_bits & 0x02000000u) {
      deleteflag_ = from.deleteflag_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void ModContact::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.ModContact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModContact::CopyFrom(const ModContact& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.ModContact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModContact::IsInitialized() const {
  if ((_has_bits_[0] & 0x3e000000) != 0x3e000000) return false;
  if ((_has_bits_[1] & 0x000003c0) != 0x000003c0) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->roominfolist())) return false;
  if (has_imgbuf()) {
    if (!this->imgbuf_->IsInitialized()) return false;
  }
  if (has_snsuserinfo()) {
    if (!this->snsuserinfo_->IsInitialized()) return false;
  }
  if (has_customizedinfo()) {
    if (!this->customizedinfo_->IsInitialized()) return false;
  }
  if (has_newchatroomdata()) {
    if (!this->newchatroomdata_->IsInitialized()) return false;
  }
  return true;
}

void ModContact::Swap(ModContact* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModContact::InternalSwap(ModContact* other) {
  roominfolist_.InternalSwap(&other->roominfolist_);
  province_.Swap(&other->province_);
  city_.Swap(&other->city_);
  signature_.Swap(&other->signature_);
  verifyinfo_.Swap(&other->verifyinfo_);
  weibo_.Swap(&other->weibo_);
  verifycontent_.Swap(&other->verifycontent_);
  alias_.Swap(&other->alias_);
  chatroomowner_.Swap(&other->chatroomowner_);
  weibonickname_.Swap(&other->weibonickname_);
  albumbgimgid_.Swap(&other->albumbgimgid_);
  country_.Swap(&other->country_);
  bigheadimgurl_.Swap(&other->bigheadimgurl_);
  smallheadimgurl_.Swap(&other->smallheadimgurl_);
  mybrandlist_.Swap(&other->mybrandlist_);
  chatroomdata_.Swap(&other->chatroomdata_);
  headimgmd5_.Swap(&other->headimgmd5_);
  encryptusername_.Swap(&other->encryptusername_);
  idcardnum_.Swap(&other->idcardnum_);
  realname_.Swap(&other->realname_);
  mobilehash_.Swap(&other->mobilehash_);
  mobilefullhash_.Swap(&other->mobilefullhash_);
  extinfo_.Swap(&other->extinfo_);
  description_.Swap(&other->description_);
  cardimgurl_.Swap(&other->cardimgurl_);
  labelidlist_.Swap(&other->labelidlist_);
  std::swap(username_, other->username_);
  std::swap(nickname_, other->nickname_);
  std::swap(pyinitial_, other->pyinitial_);
  std::swap(quanpin_, other->quanpin_);
  std::swap(imgbuf_, other->imgbuf_);
  std::swap(remark_, other->remark_);
  std::swap(remarkpyinitial_, other->remarkpyinitial_);
  std::swap(remarkquanpin_, other->remarkquanpin_);
  std::swap(domainlist_, other->domainlist_);
  std::swap(snsuserinfo_, other->snsuserinfo_);
  std::swap(customizedinfo_, other->customizedinfo_);
  std::swap(additionalcontactlist_, other->additionalcontactlist_);
  std::swap(newchatroomdata_, other->newchatroomdata_);
  std::swap(sex_, other->sex_);
  std::swap(bitmask_, other->bitmask_);
  std::swap(bitval_, other->bitval_);
  std::swap(imgflag_, other->imgflag_);
  std::swap(contacttype_, other->contacttype_);
  std::swap(roominfocount_, other->roominfocount_);
  std::swap(chatroomnotify_, other->chatroomnotify_);
  std::swap(addcontactscene_, other->addcontactscene_);
  std::swap(personalcard_, other->personalcard_);
  std::swap(hasweixinhdheadimg_, other->hasweixinhdheadimg_);
  std::swap(verifyflag_, other->verifyflag_);
  std::swap(level_, other->level_);
  std::swap(source_, other->source_);
  std::swap(weiboflag_, other->weiboflag_);
  std::swap(albumstyle_, other->albumstyle_);
  std::swap(albumflag_, other->albumflag_);
  std::swap(chatroomversion_, other->chatroomversion_);
  std::swap(chatroommaxcount_, other->chatroommaxcount_);
  std::swap(chatroomtype_, other->chatroomtype_);
  std::swap(deleteflag_, other->deleteflag_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModContact::GetMetadata() const {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModContact

// required .micromsg.SKBuiltinString_t UserName = 1;
bool ModContact::has_username() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void ModContact::set_has_username() {
  _has_bits_[0] |= 0x02000000u;
}
void ModContact::clear_has_username() {
  _has_bits_[0] &= ~0x02000000u;
}
void ModContact::clear_username() {
  if (username_ != NULL) username_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_username();
}
const ::micromsg::SKBuiltinString_t& ModContact::username() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.UserName)
  return username_ != NULL ? *username_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* ModContact::mutable_username() {
  set_has_username();
  if (username_ == NULL) {
    username_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.UserName)
  return username_;
}
::micromsg::SKBuiltinString_t* ModContact::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.UserName)
  clear_has_username();
  ::micromsg::SKBuiltinString_t* temp = username_;
  username_ = NULL;
  return temp;
}
void ModContact::set_allocated_username(::micromsg::SKBuiltinString_t* username) {
  delete username_;
  username_ = username;
  if (username) {
    set_has_username();
  } else {
    clear_has_username();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.UserName)
}

// required .micromsg.SKBuiltinString_t NickName = 2;
bool ModContact::has_nickname() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void ModContact::set_has_nickname() {
  _has_bits_[0] |= 0x04000000u;
}
void ModContact::clear_has_nickname() {
  _has_bits_[0] &= ~0x04000000u;
}
void ModContact::clear_nickname() {
  if (nickname_ != NULL) nickname_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_nickname();
}
const ::micromsg::SKBuiltinString_t& ModContact::nickname() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.NickName)
  return nickname_ != NULL ? *nickname_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* ModContact::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == NULL) {
    nickname_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.NickName)
  return nickname_;
}
::micromsg::SKBuiltinString_t* ModContact::release_nickname() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.NickName)
  clear_has_nickname();
  ::micromsg::SKBuiltinString_t* temp = nickname_;
  nickname_ = NULL;
  return temp;
}
void ModContact::set_allocated_nickname(::micromsg::SKBuiltinString_t* nickname) {
  delete nickname_;
  nickname_ = nickname;
  if (nickname) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.NickName)
}

// required .micromsg.SKBuiltinString_t PYInitial = 3;
bool ModContact::has_pyinitial() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void ModContact::set_has_pyinitial() {
  _has_bits_[0] |= 0x08000000u;
}
void ModContact::clear_has_pyinitial() {
  _has_bits_[0] &= ~0x08000000u;
}
void ModContact::clear_pyinitial() {
  if (pyinitial_ != NULL) pyinitial_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_pyinitial();
}
const ::micromsg::SKBuiltinString_t& ModContact::pyinitial() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.PYInitial)
  return pyinitial_ != NULL ? *pyinitial_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* ModContact::mutable_pyinitial() {
  set_has_pyinitial();
  if (pyinitial_ == NULL) {
    pyinitial_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.PYInitial)
  return pyinitial_;
}
::micromsg::SKBuiltinString_t* ModContact::release_pyinitial() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.PYInitial)
  clear_has_pyinitial();
  ::micromsg::SKBuiltinString_t* temp = pyinitial_;
  pyinitial_ = NULL;
  return temp;
}
void ModContact::set_allocated_pyinitial(::micromsg::SKBuiltinString_t* pyinitial) {
  delete pyinitial_;
  pyinitial_ = pyinitial;
  if (pyinitial) {
    set_has_pyinitial();
  } else {
    clear_has_pyinitial();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.PYInitial)
}

// required .micromsg.SKBuiltinString_t QuanPin = 4;
bool ModContact::has_quanpin() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void ModContact::set_has_quanpin() {
  _has_bits_[0] |= 0x10000000u;
}
void ModContact::clear_has_quanpin() {
  _has_bits_[0] &= ~0x10000000u;
}
void ModContact::clear_quanpin() {
  if (quanpin_ != NULL) quanpin_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_quanpin();
}
const ::micromsg::SKBuiltinString_t& ModContact::quanpin() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.QuanPin)
  return quanpin_ != NULL ? *quanpin_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* ModContact::mutable_quanpin() {
  set_has_quanpin();
  if (quanpin_ == NULL) {
    quanpin_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.QuanPin)
  return quanpin_;
}
::micromsg::SKBuiltinString_t* ModContact::release_quanpin() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.QuanPin)
  clear_has_quanpin();
  ::micromsg::SKBuiltinString_t* temp = quanpin_;
  quanpin_ = NULL;
  return temp;
}
void ModContact::set_allocated_quanpin(::micromsg::SKBuiltinString_t* quanpin) {
  delete quanpin_;
  quanpin_ = quanpin;
  if (quanpin) {
    set_has_quanpin();
  } else {
    clear_has_quanpin();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.QuanPin)
}

// required int32 Sex = 5;
bool ModContact::has_sex() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
void ModContact::set_has_sex() {
  _has_bits_[1] |= 0x00000040u;
}
void ModContact::clear_has_sex() {
  _has_bits_[1] &= ~0x00000040u;
}
void ModContact::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
::google::protobuf::int32 ModContact::sex() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.Sex)
  return sex_;
}
void ModContact::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModContact.Sex)
}

// required .micromsg.SKBuiltinBuffer_t ImgBuf = 6;
bool ModContact::has_imgbuf() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void ModContact::set_has_imgbuf() {
  _has_bits_[0] |= 0x20000000u;
}
void ModContact::clear_has_imgbuf() {
  _has_bits_[0] &= ~0x20000000u;
}
void ModContact::clear_imgbuf() {
  if (imgbuf_ != NULL) imgbuf_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_imgbuf();
}
const ::micromsg::SKBuiltinBuffer_t& ModContact::imgbuf() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.ImgBuf)
  return imgbuf_ != NULL ? *imgbuf_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* ModContact::mutable_imgbuf() {
  set_has_imgbuf();
  if (imgbuf_ == NULL) {
    imgbuf_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.ImgBuf)
  return imgbuf_;
}
::micromsg::SKBuiltinBuffer_t* ModContact::release_imgbuf() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.ImgBuf)
  clear_has_imgbuf();
  ::micromsg::SKBuiltinBuffer_t* temp = imgbuf_;
  imgbuf_ = NULL;
  return temp;
}
void ModContact::set_allocated_imgbuf(::micromsg::SKBuiltinBuffer_t* imgbuf) {
  delete imgbuf_;
  imgbuf_ = imgbuf;
  if (imgbuf) {
    set_has_imgbuf();
  } else {
    clear_has_imgbuf();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.ImgBuf)
}

// required uint32 BitMask = 7;
bool ModContact::has_bitmask() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
void ModContact::set_has_bitmask() {
  _has_bits_[1] |= 0x00000080u;
}
void ModContact::clear_has_bitmask() {
  _has_bits_[1] &= ~0x00000080u;
}
void ModContact::clear_bitmask() {
  bitmask_ = 0u;
  clear_has_bitmask();
}
::google::protobuf::uint32 ModContact::bitmask() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.BitMask)
  return bitmask_;
}
void ModContact::set_bitmask(::google::protobuf::uint32 value) {
  set_has_bitmask();
  bitmask_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModContact.BitMask)
}

// required uint32 BitVal = 8;
bool ModContact::has_bitval() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
void ModContact::set_has_bitval() {
  _has_bits_[1] |= 0x00000100u;
}
void ModContact::clear_has_bitval() {
  _has_bits_[1] &= ~0x00000100u;
}
void ModContact::clear_bitval() {
  bitval_ = 0u;
  clear_has_bitval();
}
::google::protobuf::uint32 ModContact::bitval() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.BitVal)
  return bitval_;
}
void ModContact::set_bitval(::google::protobuf::uint32 value) {
  set_has_bitval();
  bitval_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModContact.BitVal)
}

// required uint32 ImgFlag = 9;
bool ModContact::has_imgflag() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
void ModContact::set_has_imgflag() {
  _has_bits_[1] |= 0x00000200u;
}
void ModContact::clear_has_imgflag() {
  _has_bits_[1] &= ~0x00000200u;
}
void ModContact::clear_imgflag() {
  imgflag_ = 0u;
  clear_has_imgflag();
}
::google::protobuf::uint32 ModContact::imgflag() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.ImgFlag)
  return imgflag_;
}
void ModContact::set_imgflag(::google::protobuf::uint32 value) {
  set_has_imgflag();
  imgflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModContact.ImgFlag)
}

// optional .micromsg.SKBuiltinString_t Remark = 10;
bool ModContact::has_remark() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void ModContact::set_has_remark() {
  _has_bits_[0] |= 0x40000000u;
}
void ModContact::clear_has_remark() {
  _has_bits_[0] &= ~0x40000000u;
}
void ModContact::clear_remark() {
  if (remark_ != NULL) remark_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_remark();
}
const ::micromsg::SKBuiltinString_t& ModContact::remark() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.Remark)
  return remark_ != NULL ? *remark_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* ModContact::mutable_remark() {
  set_has_remark();
  if (remark_ == NULL) {
    remark_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.Remark)
  return remark_;
}
::micromsg::SKBuiltinString_t* ModContact::release_remark() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.Remark)
  clear_has_remark();
  ::micromsg::SKBuiltinString_t* temp = remark_;
  remark_ = NULL;
  return temp;
}
void ModContact::set_allocated_remark(::micromsg::SKBuiltinString_t* remark) {
  delete remark_;
  remark_ = remark;
  if (remark) {
    set_has_remark();
  } else {
    clear_has_remark();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.Remark)
}

// optional .micromsg.SKBuiltinString_t RemarkPYInitial = 11;
bool ModContact::has_remarkpyinitial() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void ModContact::set_has_remarkpyinitial() {
  _has_bits_[0] |= 0x80000000u;
}
void ModContact::clear_has_remarkpyinitial() {
  _has_bits_[0] &= ~0x80000000u;
}
void ModContact::clear_remarkpyinitial() {
  if (remarkpyinitial_ != NULL) remarkpyinitial_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_remarkpyinitial();
}
const ::micromsg::SKBuiltinString_t& ModContact::remarkpyinitial() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.RemarkPYInitial)
  return remarkpyinitial_ != NULL ? *remarkpyinitial_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* ModContact::mutable_remarkpyinitial() {
  set_has_remarkpyinitial();
  if (remarkpyinitial_ == NULL) {
    remarkpyinitial_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.RemarkPYInitial)
  return remarkpyinitial_;
}
::micromsg::SKBuiltinString_t* ModContact::release_remarkpyinitial() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.RemarkPYInitial)
  clear_has_remarkpyinitial();
  ::micromsg::SKBuiltinString_t* temp = remarkpyinitial_;
  remarkpyinitial_ = NULL;
  return temp;
}
void ModContact::set_allocated_remarkpyinitial(::micromsg::SKBuiltinString_t* remarkpyinitial) {
  delete remarkpyinitial_;
  remarkpyinitial_ = remarkpyinitial;
  if (remarkpyinitial) {
    set_has_remarkpyinitial();
  } else {
    clear_has_remarkpyinitial();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.RemarkPYInitial)
}

// optional .micromsg.SKBuiltinString_t RemarkQuanPin = 12;
bool ModContact::has_remarkquanpin() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void ModContact::set_has_remarkquanpin() {
  _has_bits_[1] |= 0x00000001u;
}
void ModContact::clear_has_remarkquanpin() {
  _has_bits_[1] &= ~0x00000001u;
}
void ModContact::clear_remarkquanpin() {
  if (remarkquanpin_ != NULL) remarkquanpin_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_remarkquanpin();
}
const ::micromsg::SKBuiltinString_t& ModContact::remarkquanpin() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.RemarkQuanPin)
  return remarkquanpin_ != NULL ? *remarkquanpin_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* ModContact::mutable_remarkquanpin() {
  set_has_remarkquanpin();
  if (remarkquanpin_ == NULL) {
    remarkquanpin_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.RemarkQuanPin)
  return remarkquanpin_;
}
::micromsg::SKBuiltinString_t* ModContact::release_remarkquanpin() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.RemarkQuanPin)
  clear_has_remarkquanpin();
  ::micromsg::SKBuiltinString_t* temp = remarkquanpin_;
  remarkquanpin_ = NULL;
  return temp;
}
void ModContact::set_allocated_remarkquanpin(::micromsg::SKBuiltinString_t* remarkquanpin) {
  delete remarkquanpin_;
  remarkquanpin_ = remarkquanpin;
  if (remarkquanpin) {
    set_has_remarkquanpin();
  } else {
    clear_has_remarkquanpin();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.RemarkQuanPin)
}

// optional uint32 ContactType = 13;
bool ModContact::has_contacttype() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
void ModContact::set_has_contacttype() {
  _has_bits_[1] |= 0x00000400u;
}
void ModContact::clear_has_contacttype() {
  _has_bits_[1] &= ~0x00000400u;
}
void ModContact::clear_contacttype() {
  contacttype_ = 0u;
  clear_has_contacttype();
}
::google::protobuf::uint32 ModContact::contacttype() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.ContactType)
  return contacttype_;
}
void ModContact::set_contacttype(::google::protobuf::uint32 value) {
  set_has_contacttype();
  contacttype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModContact.ContactType)
}

// optional uint32 RoomInfoCount = 14;
bool ModContact::has_roominfocount() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
void ModContact::set_has_roominfocount() {
  _has_bits_[1] |= 0x00000800u;
}
void ModContact::clear_has_roominfocount() {
  _has_bits_[1] &= ~0x00000800u;
}
void ModContact::clear_roominfocount() {
  roominfocount_ = 0u;
  clear_has_roominfocount();
}
::google::protobuf::uint32 ModContact::roominfocount() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.RoomInfoCount)
  return roominfocount_;
}
void ModContact::set_roominfocount(::google::protobuf::uint32 value) {
  set_has_roominfocount();
  roominfocount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModContact.RoomInfoCount)
}

// repeated .micromsg.RoomInfo RoomInfoList = 15;
int ModContact::roominfolist_size() const {
  return roominfolist_.size();
}
void ModContact::clear_roominfolist() {
  roominfolist_.Clear();
}
const ::micromsg::RoomInfo& ModContact::roominfolist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.RoomInfoList)
  return roominfolist_.Get(index);
}
::micromsg::RoomInfo* ModContact::mutable_roominfolist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.RoomInfoList)
  return roominfolist_.Mutable(index);
}
::micromsg::RoomInfo* ModContact::add_roominfolist() {
  // @@protoc_insertion_point(field_add:micromsg.ModContact.RoomInfoList)
  return roominfolist_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::RoomInfo >*
ModContact::mutable_roominfolist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.ModContact.RoomInfoList)
  return &roominfolist_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::RoomInfo >&
ModContact::roominfolist() const {
  // @@protoc_insertion_point(field_list:micromsg.ModContact.RoomInfoList)
  return roominfolist_;
}

// optional .micromsg.SKBuiltinString_t DomainList = 16;
bool ModContact::has_domainlist() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void ModContact::set_has_domainlist() {
  _has_bits_[1] |= 0x00000002u;
}
void ModContact::clear_has_domainlist() {
  _has_bits_[1] &= ~0x00000002u;
}
void ModContact::clear_domainlist() {
  if (domainlist_ != NULL) domainlist_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_domainlist();
}
const ::micromsg::SKBuiltinString_t& ModContact::domainlist() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.DomainList)
  return domainlist_ != NULL ? *domainlist_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* ModContact::mutable_domainlist() {
  set_has_domainlist();
  if (domainlist_ == NULL) {
    domainlist_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.DomainList)
  return domainlist_;
}
::micromsg::SKBuiltinString_t* ModContact::release_domainlist() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.DomainList)
  clear_has_domainlist();
  ::micromsg::SKBuiltinString_t* temp = domainlist_;
  domainlist_ = NULL;
  return temp;
}
void ModContact::set_allocated_domainlist(::micromsg::SKBuiltinString_t* domainlist) {
  delete domainlist_;
  domainlist_ = domainlist;
  if (domainlist) {
    set_has_domainlist();
  } else {
    clear_has_domainlist();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.DomainList)
}

// optional uint32 ChatRoomNotify = 17;
bool ModContact::has_chatroomnotify() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
void ModContact::set_has_chatroomnotify() {
  _has_bits_[1] |= 0x00001000u;
}
void ModContact::clear_has_chatroomnotify() {
  _has_bits_[1] &= ~0x00001000u;
}
void ModContact::clear_chatroomnotify() {
  chatroomnotify_ = 0u;
  clear_has_chatroomnotify();
}
::google::protobuf::uint32 ModContact::chatroomnotify() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.ChatRoomNotify)
  return chatroomnotify_;
}
void ModContact::set_chatroomnotify(::google::protobuf::uint32 value) {
  set_has_chatroomnotify();
  chatroomnotify_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModContact.ChatRoomNotify)
}

// optional uint32 AddContactScene = 18;
bool ModContact::has_addcontactscene() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
void ModContact::set_has_addcontactscene() {
  _has_bits_[1] |= 0x00002000u;
}
void ModContact::clear_has_addcontactscene() {
  _has_bits_[1] &= ~0x00002000u;
}
void ModContact::clear_addcontactscene() {
  addcontactscene_ = 0u;
  clear_has_addcontactscene();
}
::google::protobuf::uint32 ModContact::addcontactscene() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.AddContactScene)
  return addcontactscene_;
}
void ModContact::set_addcontactscene(::google::protobuf::uint32 value) {
  set_has_addcontactscene();
  addcontactscene_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModContact.AddContactScene)
}

// optional string Province = 19;
bool ModContact::has_province() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ModContact::set_has_province() {
  _has_bits_[0] |= 0x00000001u;
}
void ModContact::clear_has_province() {
  _has_bits_[0] &= ~0x00000001u;
}
void ModContact::clear_province() {
  province_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_province();
}
const ::std::string& ModContact::province() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.Province)
  return province_.GetNoArena();
}
void ModContact::set_province(const ::std::string& value) {
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModContact.Province)
}
#if LANG_CXX11
void ModContact::set_province(::std::string&& value) {
  set_has_province();
  province_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModContact.Province)
}
#endif
void ModContact::set_province(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModContact.Province)
}
void ModContact::set_province(const char* value, size_t size) {
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModContact.Province)
}
::std::string* ModContact::mutable_province() {
  set_has_province();
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.Province)
  return province_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModContact::release_province() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.Province)
  clear_has_province();
  return province_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModContact::set_allocated_province(::std::string* province) {
  if (province != NULL) {
    set_has_province();
  } else {
    clear_has_province();
  }
  province_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), province);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.Province)
}

// optional string City = 20;
bool ModContact::has_city() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ModContact::set_has_city() {
  _has_bits_[0] |= 0x00000002u;
}
void ModContact::clear_has_city() {
  _has_bits_[0] &= ~0x00000002u;
}
void ModContact::clear_city() {
  city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_city();
}
const ::std::string& ModContact::city() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.City)
  return city_.GetNoArena();
}
void ModContact::set_city(const ::std::string& value) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModContact.City)
}
#if LANG_CXX11
void ModContact::set_city(::std::string&& value) {
  set_has_city();
  city_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModContact.City)
}
#endif
void ModContact::set_city(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModContact.City)
}
void ModContact::set_city(const char* value, size_t size) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModContact.City)
}
::std::string* ModContact::mutable_city() {
  set_has_city();
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.City)
  return city_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModContact::release_city() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.City)
  clear_has_city();
  return city_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModContact::set_allocated_city(::std::string* city) {
  if (city != NULL) {
    set_has_city();
  } else {
    clear_has_city();
  }
  city_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.City)
}

// optional string Signature = 21;
bool ModContact::has_signature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ModContact::set_has_signature() {
  _has_bits_[0] |= 0x00000004u;
}
void ModContact::clear_has_signature() {
  _has_bits_[0] &= ~0x00000004u;
}
void ModContact::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_signature();
}
const ::std::string& ModContact::signature() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.Signature)
  return signature_.GetNoArena();
}
void ModContact::set_signature(const ::std::string& value) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModContact.Signature)
}
#if LANG_CXX11
void ModContact::set_signature(::std::string&& value) {
  set_has_signature();
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModContact.Signature)
}
#endif
void ModContact::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModContact.Signature)
}
void ModContact::set_signature(const char* value, size_t size) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModContact.Signature)
}
::std::string* ModContact::mutable_signature() {
  set_has_signature();
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.Signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModContact::release_signature() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.Signature)
  clear_has_signature();
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModContact::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.Signature)
}

// optional uint32 PersonalCard = 22;
bool ModContact::has_personalcard() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
void ModContact::set_has_personalcard() {
  _has_bits_[1] |= 0x00004000u;
}
void ModContact::clear_has_personalcard() {
  _has_bits_[1] &= ~0x00004000u;
}
void ModContact::clear_personalcard() {
  personalcard_ = 0u;
  clear_has_personalcard();
}
::google::protobuf::uint32 ModContact::personalcard() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.PersonalCard)
  return personalcard_;
}
void ModContact::set_personalcard(::google::protobuf::uint32 value) {
  set_has_personalcard();
  personalcard_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModContact.PersonalCard)
}

// optional uint32 HasWeiXinHdHeadImg = 23;
bool ModContact::has_hasweixinhdheadimg() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
void ModContact::set_has_hasweixinhdheadimg() {
  _has_bits_[1] |= 0x00008000u;
}
void ModContact::clear_has_hasweixinhdheadimg() {
  _has_bits_[1] &= ~0x00008000u;
}
void ModContact::clear_hasweixinhdheadimg() {
  hasweixinhdheadimg_ = 0u;
  clear_has_hasweixinhdheadimg();
}
::google::protobuf::uint32 ModContact::hasweixinhdheadimg() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.HasWeiXinHdHeadImg)
  return hasweixinhdheadimg_;
}
void ModContact::set_hasweixinhdheadimg(::google::protobuf::uint32 value) {
  set_has_hasweixinhdheadimg();
  hasweixinhdheadimg_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModContact.HasWeiXinHdHeadImg)
}

// optional uint32 VerifyFlag = 24;
bool ModContact::has_verifyflag() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
void ModContact::set_has_verifyflag() {
  _has_bits_[1] |= 0x00010000u;
}
void ModContact::clear_has_verifyflag() {
  _has_bits_[1] &= ~0x00010000u;
}
void ModContact::clear_verifyflag() {
  verifyflag_ = 0u;
  clear_has_verifyflag();
}
::google::protobuf::uint32 ModContact::verifyflag() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.VerifyFlag)
  return verifyflag_;
}
void ModContact::set_verifyflag(::google::protobuf::uint32 value) {
  set_has_verifyflag();
  verifyflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModContact.VerifyFlag)
}

// optional string VerifyInfo = 25;
bool ModContact::has_verifyinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ModContact::set_has_verifyinfo() {
  _has_bits_[0] |= 0x00000008u;
}
void ModContact::clear_has_verifyinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
void ModContact::clear_verifyinfo() {
  verifyinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_verifyinfo();
}
const ::std::string& ModContact::verifyinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.VerifyInfo)
  return verifyinfo_.GetNoArena();
}
void ModContact::set_verifyinfo(const ::std::string& value) {
  set_has_verifyinfo();
  verifyinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModContact.VerifyInfo)
}
#if LANG_CXX11
void ModContact::set_verifyinfo(::std::string&& value) {
  set_has_verifyinfo();
  verifyinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModContact.VerifyInfo)
}
#endif
void ModContact::set_verifyinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_verifyinfo();
  verifyinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModContact.VerifyInfo)
}
void ModContact::set_verifyinfo(const char* value, size_t size) {
  set_has_verifyinfo();
  verifyinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModContact.VerifyInfo)
}
::std::string* ModContact::mutable_verifyinfo() {
  set_has_verifyinfo();
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.VerifyInfo)
  return verifyinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModContact::release_verifyinfo() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.VerifyInfo)
  clear_has_verifyinfo();
  return verifyinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModContact::set_allocated_verifyinfo(::std::string* verifyinfo) {
  if (verifyinfo != NULL) {
    set_has_verifyinfo();
  } else {
    clear_has_verifyinfo();
  }
  verifyinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verifyinfo);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.VerifyInfo)
}

// optional int32 Level = 26;
bool ModContact::has_level() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
void ModContact::set_has_level() {
  _has_bits_[1] |= 0x00020000u;
}
void ModContact::clear_has_level() {
  _has_bits_[1] &= ~0x00020000u;
}
void ModContact::clear_level() {
  level_ = 0;
  clear_has_level();
}
::google::protobuf::int32 ModContact::level() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.Level)
  return level_;
}
void ModContact::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModContact.Level)
}

// optional uint32 Source = 27;
bool ModContact::has_source() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
void ModContact::set_has_source() {
  _has_bits_[1] |= 0x00040000u;
}
void ModContact::clear_has_source() {
  _has_bits_[1] &= ~0x00040000u;
}
void ModContact::clear_source() {
  source_ = 0u;
  clear_has_source();
}
::google::protobuf::uint32 ModContact::source() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.Source)
  return source_;
}
void ModContact::set_source(::google::protobuf::uint32 value) {
  set_has_source();
  source_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModContact.Source)
}

// optional string Weibo = 28;
bool ModContact::has_weibo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ModContact::set_has_weibo() {
  _has_bits_[0] |= 0x00000010u;
}
void ModContact::clear_has_weibo() {
  _has_bits_[0] &= ~0x00000010u;
}
void ModContact::clear_weibo() {
  weibo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_weibo();
}
const ::std::string& ModContact::weibo() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.Weibo)
  return weibo_.GetNoArena();
}
void ModContact::set_weibo(const ::std::string& value) {
  set_has_weibo();
  weibo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModContact.Weibo)
}
#if LANG_CXX11
void ModContact::set_weibo(::std::string&& value) {
  set_has_weibo();
  weibo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModContact.Weibo)
}
#endif
void ModContact::set_weibo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_weibo();
  weibo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModContact.Weibo)
}
void ModContact::set_weibo(const char* value, size_t size) {
  set_has_weibo();
  weibo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModContact.Weibo)
}
::std::string* ModContact::mutable_weibo() {
  set_has_weibo();
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.Weibo)
  return weibo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModContact::release_weibo() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.Weibo)
  clear_has_weibo();
  return weibo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModContact::set_allocated_weibo(::std::string* weibo) {
  if (weibo != NULL) {
    set_has_weibo();
  } else {
    clear_has_weibo();
  }
  weibo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), weibo);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.Weibo)
}

// optional string VerifyContent = 29;
bool ModContact::has_verifycontent() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ModContact::set_has_verifycontent() {
  _has_bits_[0] |= 0x00000020u;
}
void ModContact::clear_has_verifycontent() {
  _has_bits_[0] &= ~0x00000020u;
}
void ModContact::clear_verifycontent() {
  verifycontent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_verifycontent();
}
const ::std::string& ModContact::verifycontent() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.VerifyContent)
  return verifycontent_.GetNoArena();
}
void ModContact::set_verifycontent(const ::std::string& value) {
  set_has_verifycontent();
  verifycontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModContact.VerifyContent)
}
#if LANG_CXX11
void ModContact::set_verifycontent(::std::string&& value) {
  set_has_verifycontent();
  verifycontent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModContact.VerifyContent)
}
#endif
void ModContact::set_verifycontent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_verifycontent();
  verifycontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModContact.VerifyContent)
}
void ModContact::set_verifycontent(const char* value, size_t size) {
  set_has_verifycontent();
  verifycontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModContact.VerifyContent)
}
::std::string* ModContact::mutable_verifycontent() {
  set_has_verifycontent();
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.VerifyContent)
  return verifycontent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModContact::release_verifycontent() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.VerifyContent)
  clear_has_verifycontent();
  return verifycontent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModContact::set_allocated_verifycontent(::std::string* verifycontent) {
  if (verifycontent != NULL) {
    set_has_verifycontent();
  } else {
    clear_has_verifycontent();
  }
  verifycontent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verifycontent);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.VerifyContent)
}

// optional string Alias = 30;
bool ModContact::has_alias() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ModContact::set_has_alias() {
  _has_bits_[0] |= 0x00000040u;
}
void ModContact::clear_has_alias() {
  _has_bits_[0] &= ~0x00000040u;
}
void ModContact::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_alias();
}
const ::std::string& ModContact::alias() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.Alias)
  return alias_.GetNoArena();
}
void ModContact::set_alias(const ::std::string& value) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModContact.Alias)
}
#if LANG_CXX11
void ModContact::set_alias(::std::string&& value) {
  set_has_alias();
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModContact.Alias)
}
#endif
void ModContact::set_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModContact.Alias)
}
void ModContact::set_alias(const char* value, size_t size) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModContact.Alias)
}
::std::string* ModContact::mutable_alias() {
  set_has_alias();
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.Alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModContact::release_alias() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.Alias)
  clear_has_alias();
  return alias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModContact::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    set_has_alias();
  } else {
    clear_has_alias();
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.Alias)
}

// optional string ChatRoomOwner = 31;
bool ModContact::has_chatroomowner() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ModContact::set_has_chatroomowner() {
  _has_bits_[0] |= 0x00000080u;
}
void ModContact::clear_has_chatroomowner() {
  _has_bits_[0] &= ~0x00000080u;
}
void ModContact::clear_chatroomowner() {
  chatroomowner_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chatroomowner();
}
const ::std::string& ModContact::chatroomowner() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.ChatRoomOwner)
  return chatroomowner_.GetNoArena();
}
void ModContact::set_chatroomowner(const ::std::string& value) {
  set_has_chatroomowner();
  chatroomowner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModContact.ChatRoomOwner)
}
#if LANG_CXX11
void ModContact::set_chatroomowner(::std::string&& value) {
  set_has_chatroomowner();
  chatroomowner_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModContact.ChatRoomOwner)
}
#endif
void ModContact::set_chatroomowner(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_chatroomowner();
  chatroomowner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModContact.ChatRoomOwner)
}
void ModContact::set_chatroomowner(const char* value, size_t size) {
  set_has_chatroomowner();
  chatroomowner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModContact.ChatRoomOwner)
}
::std::string* ModContact::mutable_chatroomowner() {
  set_has_chatroomowner();
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.ChatRoomOwner)
  return chatroomowner_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModContact::release_chatroomowner() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.ChatRoomOwner)
  clear_has_chatroomowner();
  return chatroomowner_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModContact::set_allocated_chatroomowner(::std::string* chatroomowner) {
  if (chatroomowner != NULL) {
    set_has_chatroomowner();
  } else {
    clear_has_chatroomowner();
  }
  chatroomowner_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chatroomowner);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.ChatRoomOwner)
}

// optional string WeiboNickname = 32;
bool ModContact::has_weibonickname() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ModContact::set_has_weibonickname() {
  _has_bits_[0] |= 0x00000100u;
}
void ModContact::clear_has_weibonickname() {
  _has_bits_[0] &= ~0x00000100u;
}
void ModContact::clear_weibonickname() {
  weibonickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_weibonickname();
}
const ::std::string& ModContact::weibonickname() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.WeiboNickname)
  return weibonickname_.GetNoArena();
}
void ModContact::set_weibonickname(const ::std::string& value) {
  set_has_weibonickname();
  weibonickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModContact.WeiboNickname)
}
#if LANG_CXX11
void ModContact::set_weibonickname(::std::string&& value) {
  set_has_weibonickname();
  weibonickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModContact.WeiboNickname)
}
#endif
void ModContact::set_weibonickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_weibonickname();
  weibonickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModContact.WeiboNickname)
}
void ModContact::set_weibonickname(const char* value, size_t size) {
  set_has_weibonickname();
  weibonickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModContact.WeiboNickname)
}
::std::string* ModContact::mutable_weibonickname() {
  set_has_weibonickname();
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.WeiboNickname)
  return weibonickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModContact::release_weibonickname() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.WeiboNickname)
  clear_has_weibonickname();
  return weibonickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModContact::set_allocated_weibonickname(::std::string* weibonickname) {
  if (weibonickname != NULL) {
    set_has_weibonickname();
  } else {
    clear_has_weibonickname();
  }
  weibonickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), weibonickname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.WeiboNickname)
}

// optional uint32 WeiboFlag = 33;
bool ModContact::has_weiboflag() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
void ModContact::set_has_weiboflag() {
  _has_bits_[1] |= 0x00080000u;
}
void ModContact::clear_has_weiboflag() {
  _has_bits_[1] &= ~0x00080000u;
}
void ModContact::clear_weiboflag() {
  weiboflag_ = 0u;
  clear_has_weiboflag();
}
::google::protobuf::uint32 ModContact::weiboflag() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.WeiboFlag)
  return weiboflag_;
}
void ModContact::set_weiboflag(::google::protobuf::uint32 value) {
  set_has_weiboflag();
  weiboflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModContact.WeiboFlag)
}

// optional int32 AlbumStyle = 34;
bool ModContact::has_albumstyle() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
void ModContact::set_has_albumstyle() {
  _has_bits_[1] |= 0x00100000u;
}
void ModContact::clear_has_albumstyle() {
  _has_bits_[1] &= ~0x00100000u;
}
void ModContact::clear_albumstyle() {
  albumstyle_ = 0;
  clear_has_albumstyle();
}
::google::protobuf::int32 ModContact::albumstyle() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.AlbumStyle)
  return albumstyle_;
}
void ModContact::set_albumstyle(::google::protobuf::int32 value) {
  set_has_albumstyle();
  albumstyle_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModContact.AlbumStyle)
}

// optional int32 AlbumFlag = 35;
bool ModContact::has_albumflag() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
void ModContact::set_has_albumflag() {
  _has_bits_[1] |= 0x00200000u;
}
void ModContact::clear_has_albumflag() {
  _has_bits_[1] &= ~0x00200000u;
}
void ModContact::clear_albumflag() {
  albumflag_ = 0;
  clear_has_albumflag();
}
::google::protobuf::int32 ModContact::albumflag() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.AlbumFlag)
  return albumflag_;
}
void ModContact::set_albumflag(::google::protobuf::int32 value) {
  set_has_albumflag();
  albumflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModContact.AlbumFlag)
}

// optional string AlbumBGImgID = 36;
bool ModContact::has_albumbgimgid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ModContact::set_has_albumbgimgid() {
  _has_bits_[0] |= 0x00000200u;
}
void ModContact::clear_has_albumbgimgid() {
  _has_bits_[0] &= ~0x00000200u;
}
void ModContact::clear_albumbgimgid() {
  albumbgimgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_albumbgimgid();
}
const ::std::string& ModContact::albumbgimgid() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.AlbumBGImgID)
  return albumbgimgid_.GetNoArena();
}
void ModContact::set_albumbgimgid(const ::std::string& value) {
  set_has_albumbgimgid();
  albumbgimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModContact.AlbumBGImgID)
}
#if LANG_CXX11
void ModContact::set_albumbgimgid(::std::string&& value) {
  set_has_albumbgimgid();
  albumbgimgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModContact.AlbumBGImgID)
}
#endif
void ModContact::set_albumbgimgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_albumbgimgid();
  albumbgimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModContact.AlbumBGImgID)
}
void ModContact::set_albumbgimgid(const char* value, size_t size) {
  set_has_albumbgimgid();
  albumbgimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModContact.AlbumBGImgID)
}
::std::string* ModContact::mutable_albumbgimgid() {
  set_has_albumbgimgid();
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.AlbumBGImgID)
  return albumbgimgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModContact::release_albumbgimgid() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.AlbumBGImgID)
  clear_has_albumbgimgid();
  return albumbgimgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModContact::set_allocated_albumbgimgid(::std::string* albumbgimgid) {
  if (albumbgimgid != NULL) {
    set_has_albumbgimgid();
  } else {
    clear_has_albumbgimgid();
  }
  albumbgimgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), albumbgimgid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.AlbumBGImgID)
}

// optional .micromsg.SnsUserInfo SnsUserInfo = 37;
bool ModContact::has_snsuserinfo() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void ModContact::set_has_snsuserinfo() {
  _has_bits_[1] |= 0x00000004u;
}
void ModContact::clear_has_snsuserinfo() {
  _has_bits_[1] &= ~0x00000004u;
}
void ModContact::clear_snsuserinfo() {
  if (snsuserinfo_ != NULL) snsuserinfo_->::micromsg::SnsUserInfo::Clear();
  clear_has_snsuserinfo();
}
const ::micromsg::SnsUserInfo& ModContact::snsuserinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.SnsUserInfo)
  return snsuserinfo_ != NULL ? *snsuserinfo_
                         : *::micromsg::SnsUserInfo::internal_default_instance();
}
::micromsg::SnsUserInfo* ModContact::mutable_snsuserinfo() {
  set_has_snsuserinfo();
  if (snsuserinfo_ == NULL) {
    snsuserinfo_ = new ::micromsg::SnsUserInfo;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.SnsUserInfo)
  return snsuserinfo_;
}
::micromsg::SnsUserInfo* ModContact::release_snsuserinfo() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.SnsUserInfo)
  clear_has_snsuserinfo();
  ::micromsg::SnsUserInfo* temp = snsuserinfo_;
  snsuserinfo_ = NULL;
  return temp;
}
void ModContact::set_allocated_snsuserinfo(::micromsg::SnsUserInfo* snsuserinfo) {
  delete snsuserinfo_;
  snsuserinfo_ = snsuserinfo;
  if (snsuserinfo) {
    set_has_snsuserinfo();
  } else {
    clear_has_snsuserinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.SnsUserInfo)
}

// optional string Country = 38;
bool ModContact::has_country() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ModContact::set_has_country() {
  _has_bits_[0] |= 0x00000400u;
}
void ModContact::clear_has_country() {
  _has_bits_[0] &= ~0x00000400u;
}
void ModContact::clear_country() {
  country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country();
}
const ::std::string& ModContact::country() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.Country)
  return country_.GetNoArena();
}
void ModContact::set_country(const ::std::string& value) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModContact.Country)
}
#if LANG_CXX11
void ModContact::set_country(::std::string&& value) {
  set_has_country();
  country_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModContact.Country)
}
#endif
void ModContact::set_country(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModContact.Country)
}
void ModContact::set_country(const char* value, size_t size) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModContact.Country)
}
::std::string* ModContact::mutable_country() {
  set_has_country();
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.Country)
  return country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModContact::release_country() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.Country)
  clear_has_country();
  return country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModContact::set_allocated_country(::std::string* country) {
  if (country != NULL) {
    set_has_country();
  } else {
    clear_has_country();
  }
  country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.Country)
}

// optional string BigHeadImgUrl = 39;
bool ModContact::has_bigheadimgurl() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ModContact::set_has_bigheadimgurl() {
  _has_bits_[0] |= 0x00000800u;
}
void ModContact::clear_has_bigheadimgurl() {
  _has_bits_[0] &= ~0x00000800u;
}
void ModContact::clear_bigheadimgurl() {
  bigheadimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bigheadimgurl();
}
const ::std::string& ModContact::bigheadimgurl() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.BigHeadImgUrl)
  return bigheadimgurl_.GetNoArena();
}
void ModContact::set_bigheadimgurl(const ::std::string& value) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModContact.BigHeadImgUrl)
}
#if LANG_CXX11
void ModContact::set_bigheadimgurl(::std::string&& value) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModContact.BigHeadImgUrl)
}
#endif
void ModContact::set_bigheadimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModContact.BigHeadImgUrl)
}
void ModContact::set_bigheadimgurl(const char* value, size_t size) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModContact.BigHeadImgUrl)
}
::std::string* ModContact::mutable_bigheadimgurl() {
  set_has_bigheadimgurl();
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.BigHeadImgUrl)
  return bigheadimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModContact::release_bigheadimgurl() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.BigHeadImgUrl)
  clear_has_bigheadimgurl();
  return bigheadimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModContact::set_allocated_bigheadimgurl(::std::string* bigheadimgurl) {
  if (bigheadimgurl != NULL) {
    set_has_bigheadimgurl();
  } else {
    clear_has_bigheadimgurl();
  }
  bigheadimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bigheadimgurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.BigHeadImgUrl)
}

// optional string SmallHeadImgUrl = 40;
bool ModContact::has_smallheadimgurl() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ModContact::set_has_smallheadimgurl() {
  _has_bits_[0] |= 0x00001000u;
}
void ModContact::clear_has_smallheadimgurl() {
  _has_bits_[0] &= ~0x00001000u;
}
void ModContact::clear_smallheadimgurl() {
  smallheadimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_smallheadimgurl();
}
const ::std::string& ModContact::smallheadimgurl() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.SmallHeadImgUrl)
  return smallheadimgurl_.GetNoArena();
}
void ModContact::set_smallheadimgurl(const ::std::string& value) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModContact.SmallHeadImgUrl)
}
#if LANG_CXX11
void ModContact::set_smallheadimgurl(::std::string&& value) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModContact.SmallHeadImgUrl)
}
#endif
void ModContact::set_smallheadimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModContact.SmallHeadImgUrl)
}
void ModContact::set_smallheadimgurl(const char* value, size_t size) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModContact.SmallHeadImgUrl)
}
::std::string* ModContact::mutable_smallheadimgurl() {
  set_has_smallheadimgurl();
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.SmallHeadImgUrl)
  return smallheadimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModContact::release_smallheadimgurl() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.SmallHeadImgUrl)
  clear_has_smallheadimgurl();
  return smallheadimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModContact::set_allocated_smallheadimgurl(::std::string* smallheadimgurl) {
  if (smallheadimgurl != NULL) {
    set_has_smallheadimgurl();
  } else {
    clear_has_smallheadimgurl();
  }
  smallheadimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smallheadimgurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.SmallHeadImgUrl)
}

// optional string MyBrandList = 41;
bool ModContact::has_mybrandlist() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void ModContact::set_has_mybrandlist() {
  _has_bits_[0] |= 0x00002000u;
}
void ModContact::clear_has_mybrandlist() {
  _has_bits_[0] &= ~0x00002000u;
}
void ModContact::clear_mybrandlist() {
  mybrandlist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mybrandlist();
}
const ::std::string& ModContact::mybrandlist() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.MyBrandList)
  return mybrandlist_.GetNoArena();
}
void ModContact::set_mybrandlist(const ::std::string& value) {
  set_has_mybrandlist();
  mybrandlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModContact.MyBrandList)
}
#if LANG_CXX11
void ModContact::set_mybrandlist(::std::string&& value) {
  set_has_mybrandlist();
  mybrandlist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModContact.MyBrandList)
}
#endif
void ModContact::set_mybrandlist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mybrandlist();
  mybrandlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModContact.MyBrandList)
}
void ModContact::set_mybrandlist(const char* value, size_t size) {
  set_has_mybrandlist();
  mybrandlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModContact.MyBrandList)
}
::std::string* ModContact::mutable_mybrandlist() {
  set_has_mybrandlist();
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.MyBrandList)
  return mybrandlist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModContact::release_mybrandlist() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.MyBrandList)
  clear_has_mybrandlist();
  return mybrandlist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModContact::set_allocated_mybrandlist(::std::string* mybrandlist) {
  if (mybrandlist != NULL) {
    set_has_mybrandlist();
  } else {
    clear_has_mybrandlist();
  }
  mybrandlist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mybrandlist);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.MyBrandList)
}

// optional .micromsg.CustomizedInfo CustomizedInfo = 42;
bool ModContact::has_customizedinfo() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void ModContact::set_has_customizedinfo() {
  _has_bits_[1] |= 0x00000008u;
}
void ModContact::clear_has_customizedinfo() {
  _has_bits_[1] &= ~0x00000008u;
}
void ModContact::clear_customizedinfo() {
  if (customizedinfo_ != NULL) customizedinfo_->::micromsg::CustomizedInfo::Clear();
  clear_has_customizedinfo();
}
const ::micromsg::CustomizedInfo& ModContact::customizedinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.CustomizedInfo)
  return customizedinfo_ != NULL ? *customizedinfo_
                         : *::micromsg::CustomizedInfo::internal_default_instance();
}
::micromsg::CustomizedInfo* ModContact::mutable_customizedinfo() {
  set_has_customizedinfo();
  if (customizedinfo_ == NULL) {
    customizedinfo_ = new ::micromsg::CustomizedInfo;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.CustomizedInfo)
  return customizedinfo_;
}
::micromsg::CustomizedInfo* ModContact::release_customizedinfo() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.CustomizedInfo)
  clear_has_customizedinfo();
  ::micromsg::CustomizedInfo* temp = customizedinfo_;
  customizedinfo_ = NULL;
  return temp;
}
void ModContact::set_allocated_customizedinfo(::micromsg::CustomizedInfo* customizedinfo) {
  delete customizedinfo_;
  customizedinfo_ = customizedinfo;
  if (customizedinfo) {
    set_has_customizedinfo();
  } else {
    clear_has_customizedinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.CustomizedInfo)
}

// optional string ChatRoomData = 43;
bool ModContact::has_chatroomdata() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void ModContact::set_has_chatroomdata() {
  _has_bits_[0] |= 0x00004000u;
}
void ModContact::clear_has_chatroomdata() {
  _has_bits_[0] &= ~0x00004000u;
}
void ModContact::clear_chatroomdata() {
  chatroomdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chatroomdata();
}
const ::std::string& ModContact::chatroomdata() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.ChatRoomData)
  return chatroomdata_.GetNoArena();
}
void ModContact::set_chatroomdata(const ::std::string& value) {
  set_has_chatroomdata();
  chatroomdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModContact.ChatRoomData)
}
#if LANG_CXX11
void ModContact::set_chatroomdata(::std::string&& value) {
  set_has_chatroomdata();
  chatroomdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModContact.ChatRoomData)
}
#endif
void ModContact::set_chatroomdata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_chatroomdata();
  chatroomdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModContact.ChatRoomData)
}
void ModContact::set_chatroomdata(const char* value, size_t size) {
  set_has_chatroomdata();
  chatroomdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModContact.ChatRoomData)
}
::std::string* ModContact::mutable_chatroomdata() {
  set_has_chatroomdata();
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.ChatRoomData)
  return chatroomdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModContact::release_chatroomdata() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.ChatRoomData)
  clear_has_chatroomdata();
  return chatroomdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModContact::set_allocated_chatroomdata(::std::string* chatroomdata) {
  if (chatroomdata != NULL) {
    set_has_chatroomdata();
  } else {
    clear_has_chatroomdata();
  }
  chatroomdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chatroomdata);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.ChatRoomData)
}

// optional string HeadImgMd5 = 44;
bool ModContact::has_headimgmd5() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void ModContact::set_has_headimgmd5() {
  _has_bits_[0] |= 0x00008000u;
}
void ModContact::clear_has_headimgmd5() {
  _has_bits_[0] &= ~0x00008000u;
}
void ModContact::clear_headimgmd5() {
  headimgmd5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_headimgmd5();
}
const ::std::string& ModContact::headimgmd5() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.HeadImgMd5)
  return headimgmd5_.GetNoArena();
}
void ModContact::set_headimgmd5(const ::std::string& value) {
  set_has_headimgmd5();
  headimgmd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModContact.HeadImgMd5)
}
#if LANG_CXX11
void ModContact::set_headimgmd5(::std::string&& value) {
  set_has_headimgmd5();
  headimgmd5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModContact.HeadImgMd5)
}
#endif
void ModContact::set_headimgmd5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_headimgmd5();
  headimgmd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModContact.HeadImgMd5)
}
void ModContact::set_headimgmd5(const char* value, size_t size) {
  set_has_headimgmd5();
  headimgmd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModContact.HeadImgMd5)
}
::std::string* ModContact::mutable_headimgmd5() {
  set_has_headimgmd5();
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.HeadImgMd5)
  return headimgmd5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModContact::release_headimgmd5() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.HeadImgMd5)
  clear_has_headimgmd5();
  return headimgmd5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModContact::set_allocated_headimgmd5(::std::string* headimgmd5) {
  if (headimgmd5 != NULL) {
    set_has_headimgmd5();
  } else {
    clear_has_headimgmd5();
  }
  headimgmd5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), headimgmd5);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.HeadImgMd5)
}

// optional string EncryptUserName = 45;
bool ModContact::has_encryptusername() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void ModContact::set_has_encryptusername() {
  _has_bits_[0] |= 0x00010000u;
}
void ModContact::clear_has_encryptusername() {
  _has_bits_[0] &= ~0x00010000u;
}
void ModContact::clear_encryptusername() {
  encryptusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_encryptusername();
}
const ::std::string& ModContact::encryptusername() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.EncryptUserName)
  return encryptusername_.GetNoArena();
}
void ModContact::set_encryptusername(const ::std::string& value) {
  set_has_encryptusername();
  encryptusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModContact.EncryptUserName)
}
#if LANG_CXX11
void ModContact::set_encryptusername(::std::string&& value) {
  set_has_encryptusername();
  encryptusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModContact.EncryptUserName)
}
#endif
void ModContact::set_encryptusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_encryptusername();
  encryptusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModContact.EncryptUserName)
}
void ModContact::set_encryptusername(const char* value, size_t size) {
  set_has_encryptusername();
  encryptusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModContact.EncryptUserName)
}
::std::string* ModContact::mutable_encryptusername() {
  set_has_encryptusername();
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.EncryptUserName)
  return encryptusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModContact::release_encryptusername() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.EncryptUserName)
  clear_has_encryptusername();
  return encryptusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModContact::set_allocated_encryptusername(::std::string* encryptusername) {
  if (encryptusername != NULL) {
    set_has_encryptusername();
  } else {
    clear_has_encryptusername();
  }
  encryptusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), encryptusername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.EncryptUserName)
}

// optional string IDCardNum = 46;
bool ModContact::has_idcardnum() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void ModContact::set_has_idcardnum() {
  _has_bits_[0] |= 0x00020000u;
}
void ModContact::clear_has_idcardnum() {
  _has_bits_[0] &= ~0x00020000u;
}
void ModContact::clear_idcardnum() {
  idcardnum_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_idcardnum();
}
const ::std::string& ModContact::idcardnum() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.IDCardNum)
  return idcardnum_.GetNoArena();
}
void ModContact::set_idcardnum(const ::std::string& value) {
  set_has_idcardnum();
  idcardnum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModContact.IDCardNum)
}
#if LANG_CXX11
void ModContact::set_idcardnum(::std::string&& value) {
  set_has_idcardnum();
  idcardnum_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModContact.IDCardNum)
}
#endif
void ModContact::set_idcardnum(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_idcardnum();
  idcardnum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModContact.IDCardNum)
}
void ModContact::set_idcardnum(const char* value, size_t size) {
  set_has_idcardnum();
  idcardnum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModContact.IDCardNum)
}
::std::string* ModContact::mutable_idcardnum() {
  set_has_idcardnum();
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.IDCardNum)
  return idcardnum_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModContact::release_idcardnum() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.IDCardNum)
  clear_has_idcardnum();
  return idcardnum_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModContact::set_allocated_idcardnum(::std::string* idcardnum) {
  if (idcardnum != NULL) {
    set_has_idcardnum();
  } else {
    clear_has_idcardnum();
  }
  idcardnum_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), idcardnum);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.IDCardNum)
}

// optional string RealName = 47;
bool ModContact::has_realname() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void ModContact::set_has_realname() {
  _has_bits_[0] |= 0x00040000u;
}
void ModContact::clear_has_realname() {
  _has_bits_[0] &= ~0x00040000u;
}
void ModContact::clear_realname() {
  realname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_realname();
}
const ::std::string& ModContact::realname() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.RealName)
  return realname_.GetNoArena();
}
void ModContact::set_realname(const ::std::string& value) {
  set_has_realname();
  realname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModContact.RealName)
}
#if LANG_CXX11
void ModContact::set_realname(::std::string&& value) {
  set_has_realname();
  realname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModContact.RealName)
}
#endif
void ModContact::set_realname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_realname();
  realname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModContact.RealName)
}
void ModContact::set_realname(const char* value, size_t size) {
  set_has_realname();
  realname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModContact.RealName)
}
::std::string* ModContact::mutable_realname() {
  set_has_realname();
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.RealName)
  return realname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModContact::release_realname() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.RealName)
  clear_has_realname();
  return realname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModContact::set_allocated_realname(::std::string* realname) {
  if (realname != NULL) {
    set_has_realname();
  } else {
    clear_has_realname();
  }
  realname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), realname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.RealName)
}

// optional string MobileHash = 48;
bool ModContact::has_mobilehash() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void ModContact::set_has_mobilehash() {
  _has_bits_[0] |= 0x00080000u;
}
void ModContact::clear_has_mobilehash() {
  _has_bits_[0] &= ~0x00080000u;
}
void ModContact::clear_mobilehash() {
  mobilehash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mobilehash();
}
const ::std::string& ModContact::mobilehash() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.MobileHash)
  return mobilehash_.GetNoArena();
}
void ModContact::set_mobilehash(const ::std::string& value) {
  set_has_mobilehash();
  mobilehash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModContact.MobileHash)
}
#if LANG_CXX11
void ModContact::set_mobilehash(::std::string&& value) {
  set_has_mobilehash();
  mobilehash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModContact.MobileHash)
}
#endif
void ModContact::set_mobilehash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mobilehash();
  mobilehash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModContact.MobileHash)
}
void ModContact::set_mobilehash(const char* value, size_t size) {
  set_has_mobilehash();
  mobilehash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModContact.MobileHash)
}
::std::string* ModContact::mutable_mobilehash() {
  set_has_mobilehash();
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.MobileHash)
  return mobilehash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModContact::release_mobilehash() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.MobileHash)
  clear_has_mobilehash();
  return mobilehash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModContact::set_allocated_mobilehash(::std::string* mobilehash) {
  if (mobilehash != NULL) {
    set_has_mobilehash();
  } else {
    clear_has_mobilehash();
  }
  mobilehash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mobilehash);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.MobileHash)
}

// optional string MobileFullHash = 49;
bool ModContact::has_mobilefullhash() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void ModContact::set_has_mobilefullhash() {
  _has_bits_[0] |= 0x00100000u;
}
void ModContact::clear_has_mobilefullhash() {
  _has_bits_[0] &= ~0x00100000u;
}
void ModContact::clear_mobilefullhash() {
  mobilefullhash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mobilefullhash();
}
const ::std::string& ModContact::mobilefullhash() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.MobileFullHash)
  return mobilefullhash_.GetNoArena();
}
void ModContact::set_mobilefullhash(const ::std::string& value) {
  set_has_mobilefullhash();
  mobilefullhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModContact.MobileFullHash)
}
#if LANG_CXX11
void ModContact::set_mobilefullhash(::std::string&& value) {
  set_has_mobilefullhash();
  mobilefullhash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModContact.MobileFullHash)
}
#endif
void ModContact::set_mobilefullhash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mobilefullhash();
  mobilefullhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModContact.MobileFullHash)
}
void ModContact::set_mobilefullhash(const char* value, size_t size) {
  set_has_mobilefullhash();
  mobilefullhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModContact.MobileFullHash)
}
::std::string* ModContact::mutable_mobilefullhash() {
  set_has_mobilefullhash();
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.MobileFullHash)
  return mobilefullhash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModContact::release_mobilefullhash() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.MobileFullHash)
  clear_has_mobilefullhash();
  return mobilefullhash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModContact::set_allocated_mobilefullhash(::std::string* mobilefullhash) {
  if (mobilefullhash != NULL) {
    set_has_mobilefullhash();
  } else {
    clear_has_mobilefullhash();
  }
  mobilefullhash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mobilefullhash);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.MobileFullHash)
}

// optional .micromsg.AdditionalContactList AdditionalContactList = 50;
bool ModContact::has_additionalcontactlist() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void ModContact::set_has_additionalcontactlist() {
  _has_bits_[1] |= 0x00000010u;
}
void ModContact::clear_has_additionalcontactlist() {
  _has_bits_[1] &= ~0x00000010u;
}
void ModContact::clear_additionalcontactlist() {
  if (additionalcontactlist_ != NULL) additionalcontactlist_->::micromsg::AdditionalContactList::Clear();
  clear_has_additionalcontactlist();
}
const ::micromsg::AdditionalContactList& ModContact::additionalcontactlist() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.AdditionalContactList)
  return additionalcontactlist_ != NULL ? *additionalcontactlist_
                         : *::micromsg::AdditionalContactList::internal_default_instance();
}
::micromsg::AdditionalContactList* ModContact::mutable_additionalcontactlist() {
  set_has_additionalcontactlist();
  if (additionalcontactlist_ == NULL) {
    additionalcontactlist_ = new ::micromsg::AdditionalContactList;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.AdditionalContactList)
  return additionalcontactlist_;
}
::micromsg::AdditionalContactList* ModContact::release_additionalcontactlist() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.AdditionalContactList)
  clear_has_additionalcontactlist();
  ::micromsg::AdditionalContactList* temp = additionalcontactlist_;
  additionalcontactlist_ = NULL;
  return temp;
}
void ModContact::set_allocated_additionalcontactlist(::micromsg::AdditionalContactList* additionalcontactlist) {
  delete additionalcontactlist_;
  additionalcontactlist_ = additionalcontactlist;
  if (additionalcontactlist) {
    set_has_additionalcontactlist();
  } else {
    clear_has_additionalcontactlist();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.AdditionalContactList)
}

// optional uint32 ChatroomVersion = 53;
bool ModContact::has_chatroomversion() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
void ModContact::set_has_chatroomversion() {
  _has_bits_[1] |= 0x00400000u;
}
void ModContact::clear_has_chatroomversion() {
  _has_bits_[1] &= ~0x00400000u;
}
void ModContact::clear_chatroomversion() {
  chatroomversion_ = 0u;
  clear_has_chatroomversion();
}
::google::protobuf::uint32 ModContact::chatroomversion() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.ChatroomVersion)
  return chatroomversion_;
}
void ModContact::set_chatroomversion(::google::protobuf::uint32 value) {
  set_has_chatroomversion();
  chatroomversion_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModContact.ChatroomVersion)
}

// optional string ExtInfo = 54;
bool ModContact::has_extinfo() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void ModContact::set_has_extinfo() {
  _has_bits_[0] |= 0x00200000u;
}
void ModContact::clear_has_extinfo() {
  _has_bits_[0] &= ~0x00200000u;
}
void ModContact::clear_extinfo() {
  extinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_extinfo();
}
const ::std::string& ModContact::extinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.ExtInfo)
  return extinfo_.GetNoArena();
}
void ModContact::set_extinfo(const ::std::string& value) {
  set_has_extinfo();
  extinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModContact.ExtInfo)
}
#if LANG_CXX11
void ModContact::set_extinfo(::std::string&& value) {
  set_has_extinfo();
  extinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModContact.ExtInfo)
}
#endif
void ModContact::set_extinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_extinfo();
  extinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModContact.ExtInfo)
}
void ModContact::set_extinfo(const char* value, size_t size) {
  set_has_extinfo();
  extinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModContact.ExtInfo)
}
::std::string* ModContact::mutable_extinfo() {
  set_has_extinfo();
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.ExtInfo)
  return extinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModContact::release_extinfo() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.ExtInfo)
  clear_has_extinfo();
  return extinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModContact::set_allocated_extinfo(::std::string* extinfo) {
  if (extinfo != NULL) {
    set_has_extinfo();
  } else {
    clear_has_extinfo();
  }
  extinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extinfo);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.ExtInfo)
}

// optional uint32 ChatroomMaxCount = 55;
bool ModContact::has_chatroommaxcount() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
void ModContact::set_has_chatroommaxcount() {
  _has_bits_[1] |= 0x00800000u;
}
void ModContact::clear_has_chatroommaxcount() {
  _has_bits_[1] &= ~0x00800000u;
}
void ModContact::clear_chatroommaxcount() {
  chatroommaxcount_ = 0u;
  clear_has_chatroommaxcount();
}
::google::protobuf::uint32 ModContact::chatroommaxcount() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.ChatroomMaxCount)
  return chatroommaxcount_;
}
void ModContact::set_chatroommaxcount(::google::protobuf::uint32 value) {
  set_has_chatroommaxcount();
  chatroommaxcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModContact.ChatroomMaxCount)
}

// optional uint32 ChatroomType = 56;
bool ModContact::has_chatroomtype() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
void ModContact::set_has_chatroomtype() {
  _has_bits_[1] |= 0x01000000u;
}
void ModContact::clear_has_chatroomtype() {
  _has_bits_[1] &= ~0x01000000u;
}
void ModContact::clear_chatroomtype() {
  chatroomtype_ = 0u;
  clear_has_chatroomtype();
}
::google::protobuf::uint32 ModContact::chatroomtype() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.ChatroomType)
  return chatroomtype_;
}
void ModContact::set_chatroomtype(::google::protobuf::uint32 value) {
  set_has_chatroomtype();
  chatroomtype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModContact.ChatroomType)
}

// optional .micromsg.ChatRoomMemberData NewChatroomData = 57;
bool ModContact::has_newchatroomdata() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void ModContact::set_has_newchatroomdata() {
  _has_bits_[1] |= 0x00000020u;
}
void ModContact::clear_has_newchatroomdata() {
  _has_bits_[1] &= ~0x00000020u;
}
void ModContact::clear_newchatroomdata() {
  if (newchatroomdata_ != NULL) newchatroomdata_->::micromsg::ChatRoomMemberData::Clear();
  clear_has_newchatroomdata();
}
const ::micromsg::ChatRoomMemberData& ModContact::newchatroomdata() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.NewChatroomData)
  return newchatroomdata_ != NULL ? *newchatroomdata_
                         : *::micromsg::ChatRoomMemberData::internal_default_instance();
}
::micromsg::ChatRoomMemberData* ModContact::mutable_newchatroomdata() {
  set_has_newchatroomdata();
  if (newchatroomdata_ == NULL) {
    newchatroomdata_ = new ::micromsg::ChatRoomMemberData;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.NewChatroomData)
  return newchatroomdata_;
}
::micromsg::ChatRoomMemberData* ModContact::release_newchatroomdata() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.NewChatroomData)
  clear_has_newchatroomdata();
  ::micromsg::ChatRoomMemberData* temp = newchatroomdata_;
  newchatroomdata_ = NULL;
  return temp;
}
void ModContact::set_allocated_newchatroomdata(::micromsg::ChatRoomMemberData* newchatroomdata) {
  delete newchatroomdata_;
  newchatroomdata_ = newchatroomdata;
  if (newchatroomdata) {
    set_has_newchatroomdata();
  } else {
    clear_has_newchatroomdata();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.NewChatroomData)
}

// optional int32 DeleteFlag = 58;
bool ModContact::has_deleteflag() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
void ModContact::set_has_deleteflag() {
  _has_bits_[1] |= 0x02000000u;
}
void ModContact::clear_has_deleteflag() {
  _has_bits_[1] &= ~0x02000000u;
}
void ModContact::clear_deleteflag() {
  deleteflag_ = 0;
  clear_has_deleteflag();
}
::google::protobuf::int32 ModContact::deleteflag() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.DeleteFlag)
  return deleteflag_;
}
void ModContact::set_deleteflag(::google::protobuf::int32 value) {
  set_has_deleteflag();
  deleteflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModContact.DeleteFlag)
}

// optional string Description = 59;
bool ModContact::has_description() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void ModContact::set_has_description() {
  _has_bits_[0] |= 0x00400000u;
}
void ModContact::clear_has_description() {
  _has_bits_[0] &= ~0x00400000u;
}
void ModContact::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
const ::std::string& ModContact::description() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.Description)
  return description_.GetNoArena();
}
void ModContact::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModContact.Description)
}
#if LANG_CXX11
void ModContact::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModContact.Description)
}
#endif
void ModContact::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModContact.Description)
}
void ModContact::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModContact.Description)
}
::std::string* ModContact::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.Description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModContact::release_description() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.Description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModContact::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.Description)
}

// optional string CardImgUrl = 60;
bool ModContact::has_cardimgurl() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void ModContact::set_has_cardimgurl() {
  _has_bits_[0] |= 0x00800000u;
}
void ModContact::clear_has_cardimgurl() {
  _has_bits_[0] &= ~0x00800000u;
}
void ModContact::clear_cardimgurl() {
  cardimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cardimgurl();
}
const ::std::string& ModContact::cardimgurl() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.CardImgUrl)
  return cardimgurl_.GetNoArena();
}
void ModContact::set_cardimgurl(const ::std::string& value) {
  set_has_cardimgurl();
  cardimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModContact.CardImgUrl)
}
#if LANG_CXX11
void ModContact::set_cardimgurl(::std::string&& value) {
  set_has_cardimgurl();
  cardimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModContact.CardImgUrl)
}
#endif
void ModContact::set_cardimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cardimgurl();
  cardimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModContact.CardImgUrl)
}
void ModContact::set_cardimgurl(const char* value, size_t size) {
  set_has_cardimgurl();
  cardimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModContact.CardImgUrl)
}
::std::string* ModContact::mutable_cardimgurl() {
  set_has_cardimgurl();
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.CardImgUrl)
  return cardimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModContact::release_cardimgurl() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.CardImgUrl)
  clear_has_cardimgurl();
  return cardimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModContact::set_allocated_cardimgurl(::std::string* cardimgurl) {
  if (cardimgurl != NULL) {
    set_has_cardimgurl();
  } else {
    clear_has_cardimgurl();
  }
  cardimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cardimgurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.CardImgUrl)
}

// optional string LabelIDList = 61;
bool ModContact::has_labelidlist() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void ModContact::set_has_labelidlist() {
  _has_bits_[0] |= 0x01000000u;
}
void ModContact::clear_has_labelidlist() {
  _has_bits_[0] &= ~0x01000000u;
}
void ModContact::clear_labelidlist() {
  labelidlist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_labelidlist();
}
const ::std::string& ModContact::labelidlist() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.LabelIDList)
  return labelidlist_.GetNoArena();
}
void ModContact::set_labelidlist(const ::std::string& value) {
  set_has_labelidlist();
  labelidlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModContact.LabelIDList)
}
#if LANG_CXX11
void ModContact::set_labelidlist(::std::string&& value) {
  set_has_labelidlist();
  labelidlist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModContact.LabelIDList)
}
#endif
void ModContact::set_labelidlist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_labelidlist();
  labelidlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModContact.LabelIDList)
}
void ModContact::set_labelidlist(const char* value, size_t size) {
  set_has_labelidlist();
  labelidlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModContact.LabelIDList)
}
::std::string* ModContact::mutable_labelidlist() {
  set_has_labelidlist();
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.LabelIDList)
  return labelidlist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModContact::release_labelidlist() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.LabelIDList)
  clear_has_labelidlist();
  return labelidlist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModContact::set_allocated_labelidlist(::std::string* labelidlist) {
  if (labelidlist != NULL) {
    set_has_labelidlist();
  } else {
    clear_has_labelidlist();
  }
  labelidlist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), labelidlist);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.LabelIDList)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HardDevice::kDeviceTypeFieldNumber;
const int HardDevice::kDeviceIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HardDevice::HardDevice()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.HardDevice)
}
HardDevice::HardDevice(const HardDevice& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  devicetype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_devicetype()) {
    devicetype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicetype_);
  }
  deviceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_deviceid()) {
    deviceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deviceid_);
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.HardDevice)
}

void HardDevice::SharedCtor() {
  _cached_size_ = 0;
  devicetype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deviceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

HardDevice::~HardDevice() {
  // @@protoc_insertion_point(destructor:micromsg.HardDevice)
  SharedDtor();
}

void HardDevice::SharedDtor() {
  devicetype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deviceid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HardDevice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HardDevice::descriptor() {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HardDevice& HardDevice::default_instance() {
  protobuf_mmbase_2eproto::InitDefaults();
  return *internal_default_instance();
}

HardDevice* HardDevice::New(::google::protobuf::Arena* arena) const {
  HardDevice* n = new HardDevice;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HardDevice::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.HardDevice)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_devicetype()) {
      GOOGLE_DCHECK(!devicetype_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*devicetype_.UnsafeRawStringPointer())->clear();
    }
    if (has_deviceid()) {
      GOOGLE_DCHECK(!deviceid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*deviceid_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HardDevice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.HardDevice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string DeviceType = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devicetype().data(), this->devicetype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.HardDevice.DeviceType");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string DeviceID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deviceid().data(), this->deviceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.HardDevice.DeviceID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.HardDevice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.HardDevice)
  return false;
#undef DO_
}

void HardDevice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.HardDevice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string DeviceType = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicetype().data(), this->devicetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.HardDevice.DeviceType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->devicetype(), output);
  }

  // optional string DeviceID = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.HardDevice.DeviceID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->deviceid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.HardDevice)
}

::google::protobuf::uint8* HardDevice::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.HardDevice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string DeviceType = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicetype().data(), this->devicetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.HardDevice.DeviceType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->devicetype(), target);
  }

  // optional string DeviceID = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.HardDevice.DeviceID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->deviceid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.HardDevice)
  return target;
}

size_t HardDevice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.HardDevice)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string DeviceType = 1;
    if (has_devicetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicetype());
    }

    // optional string DeviceID = 2;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HardDevice::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.HardDevice)
  GOOGLE_DCHECK_NE(&from, this);
  const HardDevice* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HardDevice>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.HardDevice)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.HardDevice)
    MergeFrom(*source);
  }
}

void HardDevice::MergeFrom(const HardDevice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.HardDevice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_devicetype();
      devicetype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicetype_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_deviceid();
      deviceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deviceid_);
    }
  }
}

void HardDevice::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.HardDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HardDevice::CopyFrom(const HardDevice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.HardDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HardDevice::IsInitialized() const {
  return true;
}

void HardDevice::Swap(HardDevice* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HardDevice::InternalSwap(HardDevice* other) {
  devicetype_.Swap(&other->devicetype_);
  deviceid_.Swap(&other->deviceid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HardDevice::GetMetadata() const {
  protobuf_mmbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HardDevice

// optional string DeviceType = 1;
bool HardDevice::has_devicetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HardDevice::set_has_devicetype() {
  _has_bits_[0] |= 0x00000001u;
}
void HardDevice::clear_has_devicetype() {
  _has_bits_[0] &= ~0x00000001u;
}
void HardDevice::clear_devicetype() {
  devicetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_devicetype();
}
const ::std::string& HardDevice::devicetype() const {
  // @@protoc_insertion_point(field_get:micromsg.HardDevice.DeviceType)
  return devicetype_.GetNoArena();
}
void HardDevice::set_devicetype(const ::std::string& value) {
  set_has_devicetype();
  devicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.HardDevice.DeviceType)
}
#if LANG_CXX11
void HardDevice::set_devicetype(::std::string&& value) {
  set_has_devicetype();
  devicetype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.HardDevice.DeviceType)
}
#endif
void HardDevice::set_devicetype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_devicetype();
  devicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.HardDevice.DeviceType)
}
void HardDevice::set_devicetype(const char* value, size_t size) {
  set_has_devicetype();
  devicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.HardDevice.DeviceType)
}
::std::string* HardDevice::mutable_devicetype() {
  set_has_devicetype();
  // @@protoc_insertion_point(field_mutable:micromsg.HardDevice.DeviceType)
  return devicetype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HardDevice::release_devicetype() {
  // @@protoc_insertion_point(field_release:micromsg.HardDevice.DeviceType)
  clear_has_devicetype();
  return devicetype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HardDevice::set_allocated_devicetype(::std::string* devicetype) {
  if (devicetype != NULL) {
    set_has_devicetype();
  } else {
    clear_has_devicetype();
  }
  devicetype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicetype);
  // @@protoc_insertion_point(field_set_allocated:micromsg.HardDevice.DeviceType)
}

// optional string DeviceID = 2;
bool HardDevice::has_deviceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HardDevice::set_has_deviceid() {
  _has_bits_[0] |= 0x00000002u;
}
void HardDevice::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000002u;
}
void HardDevice::clear_deviceid() {
  deviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_deviceid();
}
const ::std::string& HardDevice::deviceid() const {
  // @@protoc_insertion_point(field_get:micromsg.HardDevice.DeviceID)
  return deviceid_.GetNoArena();
}
void HardDevice::set_deviceid(const ::std::string& value) {
  set_has_deviceid();
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.HardDevice.DeviceID)
}
#if LANG_CXX11
void HardDevice::set_deviceid(::std::string&& value) {
  set_has_deviceid();
  deviceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.HardDevice.DeviceID)
}
#endif
void HardDevice::set_deviceid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_deviceid();
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.HardDevice.DeviceID)
}
void HardDevice::set_deviceid(const char* value, size_t size) {
  set_has_deviceid();
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.HardDevice.DeviceID)
}
::std::string* HardDevice::mutable_deviceid() {
  set_has_deviceid();
  // @@protoc_insertion_point(field_mutable:micromsg.HardDevice.DeviceID)
  return deviceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HardDevice::release_deviceid() {
  // @@protoc_insertion_point(field_release:micromsg.HardDevice.DeviceID)
  clear_has_deviceid();
  return deviceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HardDevice::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid != NULL) {
    set_has_deviceid();
  } else {
    clear_has_deviceid();
  }
  deviceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deviceid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.HardDevice.DeviceID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace micromsg

// @@protoc_insertion_point(global_scope)
