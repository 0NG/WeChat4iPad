// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mmbase.proto

#ifndef PROTOBUF_mmbase_2eproto__INCLUDED
#define PROTOBUF_mmbase_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "mmbuiltintype.pb.h"
// @@protoc_insertion_point(includes)
namespace micromsg {
class AdditionalContactList;
class AdditionalContactListDefaultTypeInternal;
extern AdditionalContactListDefaultTypeInternal _AdditionalContactList_default_instance_;
class BaseRequest;
class BaseRequestDefaultTypeInternal;
extern BaseRequestDefaultTypeInternal _BaseRequest_default_instance_;
class BaseResponse;
class BaseResponseDefaultTypeInternal;
extern BaseResponseDefaultTypeInternal _BaseResponse_default_instance_;
class BindEmailRequest;
class BindEmailRequestDefaultTypeInternal;
extern BindEmailRequestDefaultTypeInternal _BindEmailRequest_default_instance_;
class BindEmailResponse;
class BindEmailResponseDefaultTypeInternal;
extern BindEmailResponseDefaultTypeInternal _BindEmailResponse_default_instance_;
class BuiltinIP;
class BuiltinIPDefaultTypeInternal;
extern BuiltinIPDefaultTypeInternal _BuiltinIP_default_instance_;
class BuiltinIPList;
class BuiltinIPListDefaultTypeInternal;
extern BuiltinIPListDefaultTypeInternal _BuiltinIPList_default_instance_;
class CDNDnsInfo;
class CDNDnsInfoDefaultTypeInternal;
extern CDNDnsInfoDefaultTypeInternal _CDNDnsInfo_default_instance_;
class ChatRoomMemberData;
class ChatRoomMemberDataDefaultTypeInternal;
extern ChatRoomMemberDataDefaultTypeInternal _ChatRoomMemberData_default_instance_;
class ChatRoomMemberInfo;
class ChatRoomMemberInfoDefaultTypeInternal;
extern ChatRoomMemberInfoDefaultTypeInternal _ChatRoomMemberInfo_default_instance_;
class CmdItem;
class CmdItemDefaultTypeInternal;
extern CmdItemDefaultTypeInternal _CmdItem_default_instance_;
class CmdList;
class CmdListDefaultTypeInternal;
extern CmdListDefaultTypeInternal _CmdList_default_instance_;
class CustomizedInfo;
class CustomizedInfoDefaultTypeInternal;
extern CustomizedInfoDefaultTypeInternal _CustomizedInfo_default_instance_;
class DelMemberReq;
class DelMemberReqDefaultTypeInternal;
extern DelMemberReqDefaultTypeInternal _DelMemberReq_default_instance_;
class DelMemberResp;
class DelMemberRespDefaultTypeInternal;
extern DelMemberRespDefaultTypeInternal _DelMemberResp_default_instance_;
class DisturbSetting;
class DisturbSettingDefaultTypeInternal;
extern DisturbSettingDefaultTypeInternal _DisturbSetting_default_instance_;
class DisturbTimeSpan;
class DisturbTimeSpanDefaultTypeInternal;
extern DisturbTimeSpanDefaultTypeInternal _DisturbTimeSpan_default_instance_;
class GetLocationRequest;
class GetLocationRequestDefaultTypeInternal;
extern GetLocationRequestDefaultTypeInternal _GetLocationRequest_default_instance_;
class GetLocationResponse;
class GetLocationResponseDefaultTypeInternal;
extern GetLocationResponseDefaultTypeInternal _GetLocationResponse_default_instance_;
class GmailInfo;
class GmailInfoDefaultTypeInternal;
extern GmailInfoDefaultTypeInternal _GmailInfo_default_instance_;
class GmailList;
class GmailListDefaultTypeInternal;
extern GmailListDefaultTypeInternal _GmailList_default_instance_;
class HardDevice;
class HardDeviceDefaultTypeInternal;
extern HardDeviceDefaultTypeInternal _HardDevice_default_instance_;
class Host;
class HostDefaultTypeInternal;
extern HostDefaultTypeInternal _Host_default_instance_;
class HostList;
class HostListDefaultTypeInternal;
extern HostListDefaultTypeInternal _HostList_default_instance_;
class LinkedinContactItem;
class LinkedinContactItemDefaultTypeInternal;
extern LinkedinContactItemDefaultTypeInternal _LinkedinContactItem_default_instance_;
class MemberReq;
class MemberReqDefaultTypeInternal;
extern MemberReqDefaultTypeInternal _MemberReq_default_instance_;
class MemberResp;
class MemberRespDefaultTypeInternal;
extern MemberRespDefaultTypeInternal _MemberResp_default_instance_;
class ModContact;
class ModContactDefaultTypeInternal;
extern ModContactDefaultTypeInternal _ModContact_default_instance_;
class ModUserInfo;
class ModUserInfoDefaultTypeInternal;
extern ModUserInfoDefaultTypeInternal _ModUserInfo_default_instance_;
class NetworkControl;
class NetworkControlDefaultTypeInternal;
extern NetworkControlDefaultTypeInternal _NetworkControl_default_instance_;
class PatternLockInfo;
class PatternLockInfoDefaultTypeInternal;
extern PatternLockInfoDefaultTypeInternal _PatternLockInfo_default_instance_;
class PluginKey;
class PluginKeyDefaultTypeInternal;
extern PluginKeyDefaultTypeInternal _PluginKey_default_instance_;
class PluginKeyList;
class PluginKeyListDefaultTypeInternal;
extern PluginKeyListDefaultTypeInternal _PluginKeyList_default_instance_;
class PositionInfo;
class PositionInfoDefaultTypeInternal;
extern PositionInfoDefaultTypeInternal _PositionInfo_default_instance_;
class RoomInfo;
class RoomInfoDefaultTypeInternal;
extern RoomInfoDefaultTypeInternal _RoomInfo_default_instance_;
class SKBuiltinBuffer_t;
class SKBuiltinBuffer_tDefaultTypeInternal;
extern SKBuiltinBuffer_tDefaultTypeInternal _SKBuiltinBuffer_t_default_instance_;
class SKBuiltinChar_t;
class SKBuiltinChar_tDefaultTypeInternal;
extern SKBuiltinChar_tDefaultTypeInternal _SKBuiltinChar_t_default_instance_;
class SKBuiltinDouble64_t;
class SKBuiltinDouble64_tDefaultTypeInternal;
extern SKBuiltinDouble64_tDefaultTypeInternal _SKBuiltinDouble64_t_default_instance_;
class SKBuiltinFloat32_t;
class SKBuiltinFloat32_tDefaultTypeInternal;
extern SKBuiltinFloat32_tDefaultTypeInternal _SKBuiltinFloat32_t_default_instance_;
class SKBuiltinInt16_t;
class SKBuiltinInt16_tDefaultTypeInternal;
extern SKBuiltinInt16_tDefaultTypeInternal _SKBuiltinInt16_t_default_instance_;
class SKBuiltinInt32_t;
class SKBuiltinInt32_tDefaultTypeInternal;
extern SKBuiltinInt32_tDefaultTypeInternal _SKBuiltinInt32_t_default_instance_;
class SKBuiltinInt64_t;
class SKBuiltinInt64_tDefaultTypeInternal;
extern SKBuiltinInt64_tDefaultTypeInternal _SKBuiltinInt64_t_default_instance_;
class SKBuiltinInt8_t;
class SKBuiltinInt8_tDefaultTypeInternal;
extern SKBuiltinInt8_tDefaultTypeInternal _SKBuiltinInt8_t_default_instance_;
class SKBuiltinString_t;
class SKBuiltinString_tDefaultTypeInternal;
extern SKBuiltinString_tDefaultTypeInternal _SKBuiltinString_t_default_instance_;
class SKBuiltinUchar_t;
class SKBuiltinUchar_tDefaultTypeInternal;
extern SKBuiltinUchar_tDefaultTypeInternal _SKBuiltinUchar_t_default_instance_;
class SKBuiltinUint16_t;
class SKBuiltinUint16_tDefaultTypeInternal;
extern SKBuiltinUint16_tDefaultTypeInternal _SKBuiltinUint16_t_default_instance_;
class SKBuiltinUint32_t;
class SKBuiltinUint32_tDefaultTypeInternal;
extern SKBuiltinUint32_tDefaultTypeInternal _SKBuiltinUint32_t_default_instance_;
class SKBuiltinUint64_t;
class SKBuiltinUint64_tDefaultTypeInternal;
extern SKBuiltinUint64_tDefaultTypeInternal _SKBuiltinUint64_t_default_instance_;
class SKBuiltinUint8_t;
class SKBuiltinUint8_tDefaultTypeInternal;
extern SKBuiltinUint8_tDefaultTypeInternal _SKBuiltinUint8_t_default_instance_;
class SafeDevice;
class SafeDeviceDefaultTypeInternal;
extern SafeDeviceDefaultTypeInternal _SafeDevice_default_instance_;
class SafeDeviceList;
class SafeDeviceListDefaultTypeInternal;
extern SafeDeviceListDefaultTypeInternal _SafeDeviceList_default_instance_;
class ShakeSyncRequest;
class ShakeSyncRequestDefaultTypeInternal;
extern ShakeSyncRequestDefaultTypeInternal _ShakeSyncRequest_default_instance_;
class ShakeSyncResponse;
class ShakeSyncResponseDefaultTypeInternal;
extern ShakeSyncResponseDefaultTypeInternal _ShakeSyncResponse_default_instance_;
class ShowStyleKey;
class ShowStyleKeyDefaultTypeInternal;
extern ShowStyleKeyDefaultTypeInternal _ShowStyleKey_default_instance_;
class SnsUserInfo;
class SnsUserInfoDefaultTypeInternal;
extern SnsUserInfoDefaultTypeInternal _SnsUserInfo_default_instance_;
class StyleKeyVal;
class StyleKeyValDefaultTypeInternal;
extern StyleKeyValDefaultTypeInternal _StyleKeyVal_default_instance_;
class UserInfoExt;
class UserInfoExtDefaultTypeInternal;
extern UserInfoExtDefaultTypeInternal _UserInfoExt_default_instance_;
}  // namespace micromsg

namespace micromsg {

namespace protobuf_mmbase_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_mmbase_2eproto

// ===================================================================

class BuiltinIP : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.BuiltinIP) */ {
 public:
  BuiltinIP();
  virtual ~BuiltinIP();

  BuiltinIP(const BuiltinIP& from);

  inline BuiltinIP& operator=(const BuiltinIP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuiltinIP& default_instance();

  static inline const BuiltinIP* internal_default_instance() {
    return reinterpret_cast<const BuiltinIP*>(
               &_BuiltinIP_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(BuiltinIP* other);

  // implements Message ----------------------------------------------

  inline BuiltinIP* New() const PROTOBUF_FINAL { return New(NULL); }

  BuiltinIP* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BuiltinIP& from);
  void MergeFrom(const BuiltinIP& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BuiltinIP* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes IP = 3;
  bool has_ip() const;
  void clear_ip();
  static const int kIPFieldNumber = 3;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const void* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // optional bytes Domain = 4;
  bool has_domain() const;
  void clear_domain();
  static const int kDomainFieldNumber = 4;
  const ::std::string& domain() const;
  void set_domain(const ::std::string& value);
  #if LANG_CXX11
  void set_domain(::std::string&& value);
  #endif
  void set_domain(const char* value);
  void set_domain(const void* value, size_t size);
  ::std::string* mutable_domain();
  ::std::string* release_domain();
  void set_allocated_domain(::std::string* domain);

  // required uint32 type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // required uint32 port = 2;
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.BuiltinIP)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_port();
  void clear_has_port();
  void set_has_ip();
  void clear_has_ip();
  void set_has_domain();
  void clear_has_domain();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::internal::ArenaStringPtr domain_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 port_;
  friend struct protobuf_mmbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BuiltinIPList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.BuiltinIPList) */ {
 public:
  BuiltinIPList();
  virtual ~BuiltinIPList();

  BuiltinIPList(const BuiltinIPList& from);

  inline BuiltinIPList& operator=(const BuiltinIPList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuiltinIPList& default_instance();

  static inline const BuiltinIPList* internal_default_instance() {
    return reinterpret_cast<const BuiltinIPList*>(
               &_BuiltinIPList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(BuiltinIPList* other);

  // implements Message ----------------------------------------------

  inline BuiltinIPList* New() const PROTOBUF_FINAL { return New(NULL); }

  BuiltinIPList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BuiltinIPList& from);
  void MergeFrom(const BuiltinIPList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BuiltinIPList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.BuiltinIP LongConnectIPList = 3;
  int longconnectiplist_size() const;
  void clear_longconnectiplist();
  static const int kLongConnectIPListFieldNumber = 3;
  const ::micromsg::BuiltinIP& longconnectiplist(int index) const;
  ::micromsg::BuiltinIP* mutable_longconnectiplist(int index);
  ::micromsg::BuiltinIP* add_longconnectiplist();
  ::google::protobuf::RepeatedPtrField< ::micromsg::BuiltinIP >*
      mutable_longconnectiplist();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::BuiltinIP >&
      longconnectiplist() const;

  // repeated .micromsg.BuiltinIP ShortConnectIPList = 4;
  int shortconnectiplist_size() const;
  void clear_shortconnectiplist();
  static const int kShortConnectIPListFieldNumber = 4;
  const ::micromsg::BuiltinIP& shortconnectiplist(int index) const;
  ::micromsg::BuiltinIP* mutable_shortconnectiplist(int index);
  ::micromsg::BuiltinIP* add_shortconnectiplist();
  ::google::protobuf::RepeatedPtrField< ::micromsg::BuiltinIP >*
      mutable_shortconnectiplist();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::BuiltinIP >&
      shortconnectiplist() const;

  // required uint32 LongConnectIPCount = 1;
  bool has_longconnectipcount() const;
  void clear_longconnectipcount();
  static const int kLongConnectIPCountFieldNumber = 1;
  ::google::protobuf::uint32 longconnectipcount() const;
  void set_longconnectipcount(::google::protobuf::uint32 value);

  // required uint32 ShortConnectIPCount = 2;
  bool has_shortconnectipcount() const;
  void clear_shortconnectipcount();
  static const int kShortConnectIPCountFieldNumber = 2;
  ::google::protobuf::uint32 shortconnectipcount() const;
  void set_shortconnectipcount(::google::protobuf::uint32 value);

  // required uint32 Seq = 5;
  bool has_seq() const;
  void clear_seq();
  static const int kSeqFieldNumber = 5;
  ::google::protobuf::uint32 seq() const;
  void set_seq(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.BuiltinIPList)
 private:
  void set_has_longconnectipcount();
  void clear_has_longconnectipcount();
  void set_has_shortconnectipcount();
  void clear_has_shortconnectipcount();
  void set_has_seq();
  void clear_has_seq();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::BuiltinIP > longconnectiplist_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::BuiltinIP > shortconnectiplist_;
  ::google::protobuf::uint32 longconnectipcount_;
  ::google::protobuf::uint32 shortconnectipcount_;
  ::google::protobuf::uint32 seq_;
  friend struct protobuf_mmbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NetworkControl : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.NetworkControl) */ {
 public:
  NetworkControl();
  virtual ~NetworkControl();

  NetworkControl(const NetworkControl& from);

  inline NetworkControl& operator=(const NetworkControl& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetworkControl& default_instance();

  static inline const NetworkControl* internal_default_instance() {
    return reinterpret_cast<const NetworkControl*>(
               &_NetworkControl_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(NetworkControl* other);

  // implements Message ----------------------------------------------

  inline NetworkControl* New() const PROTOBUF_FINAL { return New(NULL); }

  NetworkControl* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NetworkControl& from);
  void MergeFrom(const NetworkControl& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NetworkControl* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string PortList = 1;
  bool has_portlist() const;
  void clear_portlist();
  static const int kPortListFieldNumber = 1;
  const ::std::string& portlist() const;
  void set_portlist(const ::std::string& value);
  #if LANG_CXX11
  void set_portlist(::std::string&& value);
  #endif
  void set_portlist(const char* value);
  void set_portlist(const char* value, size_t size);
  ::std::string* mutable_portlist();
  ::std::string* release_portlist();
  void set_allocated_portlist(::std::string* portlist);

  // optional string TimeoutList = 2;
  bool has_timeoutlist() const;
  void clear_timeoutlist();
  static const int kTimeoutListFieldNumber = 2;
  const ::std::string& timeoutlist() const;
  void set_timeoutlist(const ::std::string& value);
  #if LANG_CXX11
  void set_timeoutlist(::std::string&& value);
  #endif
  void set_timeoutlist(const char* value);
  void set_timeoutlist(const char* value, size_t size);
  ::std::string* mutable_timeoutlist();
  ::std::string* release_timeoutlist();
  void set_allocated_timeoutlist(::std::string* timeoutlist);

  // optional uint32 MinNoopInterval = 3;
  bool has_minnoopinterval() const;
  void clear_minnoopinterval();
  static const int kMinNoopIntervalFieldNumber = 3;
  ::google::protobuf::uint32 minnoopinterval() const;
  void set_minnoopinterval(::google::protobuf::uint32 value);

  // optional uint32 MaxNoopInterval = 4;
  bool has_maxnoopinterval() const;
  void clear_maxnoopinterval();
  static const int kMaxNoopIntervalFieldNumber = 4;
  ::google::protobuf::uint32 maxnoopinterval() const;
  void set_maxnoopinterval(::google::protobuf::uint32 value);

  // optional int32 TypingInterval = 5;
  bool has_typinginterval() const;
  void clear_typinginterval();
  static const int kTypingIntervalFieldNumber = 5;
  ::google::protobuf::int32 typinginterval() const;
  void set_typinginterval(::google::protobuf::int32 value);

  // optional int32 NoopIntervalTime = 7;
  bool has_noopintervaltime() const;
  void clear_noopintervaltime();
  static const int kNoopIntervalTimeFieldNumber = 7;
  ::google::protobuf::int32 noopintervaltime() const;
  void set_noopintervaltime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:micromsg.NetworkControl)
 private:
  void set_has_portlist();
  void clear_has_portlist();
  void set_has_timeoutlist();
  void clear_has_timeoutlist();
  void set_has_minnoopinterval();
  void clear_has_minnoopinterval();
  void set_has_maxnoopinterval();
  void clear_has_maxnoopinterval();
  void set_has_typinginterval();
  void clear_has_typinginterval();
  void set_has_noopintervaltime();
  void clear_has_noopintervaltime();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr portlist_;
  ::google::protobuf::internal::ArenaStringPtr timeoutlist_;
  ::google::protobuf::uint32 minnoopinterval_;
  ::google::protobuf::uint32 maxnoopinterval_;
  ::google::protobuf::int32 typinginterval_;
  ::google::protobuf::int32 noopintervaltime_;
  friend struct protobuf_mmbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PluginKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.PluginKey) */ {
 public:
  PluginKey();
  virtual ~PluginKey();

  PluginKey(const PluginKey& from);

  inline PluginKey& operator=(const PluginKey& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PluginKey& default_instance();

  static inline const PluginKey* internal_default_instance() {
    return reinterpret_cast<const PluginKey*>(
               &_PluginKey_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(PluginKey* other);

  // implements Message ----------------------------------------------

  inline PluginKey* New() const PROTOBUF_FINAL { return New(NULL); }

  PluginKey* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PluginKey& from);
  void MergeFrom(const PluginKey& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PluginKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional uint32 Id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.PluginKey)
 private:
  void set_has_key();
  void clear_has_key();
  void set_has_id();
  void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::uint32 id_;
  friend struct protobuf_mmbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PluginKeyList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.PluginKeyList) */ {
 public:
  PluginKeyList();
  virtual ~PluginKeyList();

  PluginKeyList(const PluginKeyList& from);

  inline PluginKeyList& operator=(const PluginKeyList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PluginKeyList& default_instance();

  static inline const PluginKeyList* internal_default_instance() {
    return reinterpret_cast<const PluginKeyList*>(
               &_PluginKeyList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(PluginKeyList* other);

  // implements Message ----------------------------------------------

  inline PluginKeyList* New() const PROTOBUF_FINAL { return New(NULL); }

  PluginKeyList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PluginKeyList& from);
  void MergeFrom(const PluginKeyList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PluginKeyList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.PluginKey List = 2;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 2;
  const ::micromsg::PluginKey& list(int index) const;
  ::micromsg::PluginKey* mutable_list(int index);
  ::micromsg::PluginKey* add_list();
  ::google::protobuf::RepeatedPtrField< ::micromsg::PluginKey >*
      mutable_list();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::PluginKey >&
      list() const;

  // required uint32 Count = 1;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 1;
  ::google::protobuf::uint32 count() const;
  void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.PluginKeyList)
 private:
  void set_has_count();
  void clear_has_count();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::PluginKey > list_;
  ::google::protobuf::uint32 count_;
  friend struct protobuf_mmbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Host : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.Host) */ {
 public:
  Host();
  virtual ~Host();

  Host(const Host& from);

  inline Host& operator=(const Host& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Host& default_instance();

  static inline const Host* internal_default_instance() {
    return reinterpret_cast<const Host*>(
               &_Host_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Host* other);

  // implements Message ----------------------------------------------

  inline Host* New() const PROTOBUF_FINAL { return New(NULL); }

  Host* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Host& from);
  void MergeFrom(const Host& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Host* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Origin = 1;
  bool has_origin() const;
  void clear_origin();
  static const int kOriginFieldNumber = 1;
  const ::std::string& origin() const;
  void set_origin(const ::std::string& value);
  #if LANG_CXX11
  void set_origin(::std::string&& value);
  #endif
  void set_origin(const char* value);
  void set_origin(const char* value, size_t size);
  ::std::string* mutable_origin();
  ::std::string* release_origin();
  void set_allocated_origin(::std::string* origin);

  // optional string Substitute = 2;
  bool has_substitute() const;
  void clear_substitute();
  static const int kSubstituteFieldNumber = 2;
  const ::std::string& substitute() const;
  void set_substitute(const ::std::string& value);
  #if LANG_CXX11
  void set_substitute(::std::string&& value);
  #endif
  void set_substitute(const char* value);
  void set_substitute(const char* value, size_t size);
  ::std::string* mutable_substitute();
  ::std::string* release_substitute();
  void set_allocated_substitute(::std::string* substitute);

  // optional int32 Priority = 3;
  bool has_priority() const;
  void clear_priority();
  static const int kPriorityFieldNumber = 3;
  ::google::protobuf::int32 priority() const;
  void set_priority(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:micromsg.Host)
 private:
  void set_has_origin();
  void clear_has_origin();
  void set_has_substitute();
  void clear_has_substitute();
  void set_has_priority();
  void clear_has_priority();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr origin_;
  ::google::protobuf::internal::ArenaStringPtr substitute_;
  ::google::protobuf::int32 priority_;
  friend struct protobuf_mmbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HostList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.HostList) */ {
 public:
  HostList();
  virtual ~HostList();

  HostList(const HostList& from);

  inline HostList& operator=(const HostList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HostList& default_instance();

  static inline const HostList* internal_default_instance() {
    return reinterpret_cast<const HostList*>(
               &_HostList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(HostList* other);

  // implements Message ----------------------------------------------

  inline HostList* New() const PROTOBUF_FINAL { return New(NULL); }

  HostList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HostList& from);
  void MergeFrom(const HostList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HostList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.Host List = 2;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 2;
  const ::micromsg::Host& list(int index) const;
  ::micromsg::Host* mutable_list(int index);
  ::micromsg::Host* add_list();
  ::google::protobuf::RepeatedPtrField< ::micromsg::Host >*
      mutable_list();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::Host >&
      list() const;

  // required uint32 Count = 1;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 1;
  ::google::protobuf::uint32 count() const;
  void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.HostList)
 private:
  void set_has_count();
  void clear_has_count();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::Host > list_;
  ::google::protobuf::uint32 count_;
  friend struct protobuf_mmbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PositionInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.PositionInfo) */ {
 public:
  PositionInfo();
  virtual ~PositionInfo();

  PositionInfo(const PositionInfo& from);

  inline PositionInfo& operator=(const PositionInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PositionInfo& default_instance();

  static inline const PositionInfo* internal_default_instance() {
    return reinterpret_cast<const PositionInfo*>(
               &_PositionInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(PositionInfo* other);

  // implements Message ----------------------------------------------

  inline PositionInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  PositionInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PositionInfo& from);
  void MergeFrom(const PositionInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PositionInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string MacAddr = 4;
  bool has_macaddr() const;
  void clear_macaddr();
  static const int kMacAddrFieldNumber = 4;
  const ::std::string& macaddr() const;
  void set_macaddr(const ::std::string& value);
  #if LANG_CXX11
  void set_macaddr(::std::string&& value);
  #endif
  void set_macaddr(const char* value);
  void set_macaddr(const char* value, size_t size);
  ::std::string* mutable_macaddr();
  ::std::string* release_macaddr();
  void set_allocated_macaddr(::std::string* macaddr);

  // optional string CellId = 5;
  bool has_cellid() const;
  void clear_cellid();
  static const int kCellIdFieldNumber = 5;
  const ::std::string& cellid() const;
  void set_cellid(const ::std::string& value);
  #if LANG_CXX11
  void set_cellid(::std::string&& value);
  #endif
  void set_cellid(const char* value);
  void set_cellid(const char* value, size_t size);
  ::std::string* mutable_cellid();
  ::std::string* release_cellid();
  void set_allocated_cellid(::std::string* cellid);

  // required float Longitude = 1;
  bool has_longitude() const;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 1;
  float longitude() const;
  void set_longitude(float value);

  // required float Latitude = 2;
  bool has_latitude() const;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 2;
  float latitude() const;
  void set_latitude(float value);

  // required int32 Precision = 3;
  bool has_precision() const;
  void clear_precision();
  static const int kPrecisionFieldNumber = 3;
  ::google::protobuf::int32 precision() const;
  void set_precision(::google::protobuf::int32 value);

  // required int32 GPSSource = 6;
  bool has_gpssource() const;
  void clear_gpssource();
  static const int kGPSSourceFieldNumber = 6;
  ::google::protobuf::int32 gpssource() const;
  void set_gpssource(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:micromsg.PositionInfo)
 private:
  void set_has_longitude();
  void clear_has_longitude();
  void set_has_latitude();
  void clear_has_latitude();
  void set_has_precision();
  void clear_has_precision();
  void set_has_macaddr();
  void clear_has_macaddr();
  void set_has_cellid();
  void clear_has_cellid();
  void set_has_gpssource();
  void clear_has_gpssource();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr macaddr_;
  ::google::protobuf::internal::ArenaStringPtr cellid_;
  float longitude_;
  float latitude_;
  ::google::protobuf::int32 precision_;
  ::google::protobuf::int32 gpssource_;
  friend struct protobuf_mmbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SnsUserInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.SnsUserInfo) */ {
 public:
  SnsUserInfo();
  virtual ~SnsUserInfo();

  SnsUserInfo(const SnsUserInfo& from);

  inline SnsUserInfo& operator=(const SnsUserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SnsUserInfo& default_instance();

  static inline const SnsUserInfo* internal_default_instance() {
    return reinterpret_cast<const SnsUserInfo*>(
               &_SnsUserInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(SnsUserInfo* other);

  // implements Message ----------------------------------------------

  inline SnsUserInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  SnsUserInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SnsUserInfo& from);
  void MergeFrom(const SnsUserInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SnsUserInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string SnsBGImgID = 2;
  bool has_snsbgimgid() const;
  void clear_snsbgimgid();
  static const int kSnsBGImgIDFieldNumber = 2;
  const ::std::string& snsbgimgid() const;
  void set_snsbgimgid(const ::std::string& value);
  #if LANG_CXX11
  void set_snsbgimgid(::std::string&& value);
  #endif
  void set_snsbgimgid(const char* value);
  void set_snsbgimgid(const char* value, size_t size);
  ::std::string* mutable_snsbgimgid();
  ::std::string* release_snsbgimgid();
  void set_allocated_snsbgimgid(::std::string* snsbgimgid);

  // required uint32 SnsFlag = 1;
  bool has_snsflag() const;
  void clear_snsflag();
  static const int kSnsFlagFieldNumber = 1;
  ::google::protobuf::uint32 snsflag() const;
  void set_snsflag(::google::protobuf::uint32 value);

  // optional uint32 SnsFlagEx = 4;
  bool has_snsflagex() const;
  void clear_snsflagex();
  static const int kSnsFlagExFieldNumber = 4;
  ::google::protobuf::uint32 snsflagex() const;
  void set_snsflagex(::google::protobuf::uint32 value);

  // optional uint64 SnsBGObjectID = 3;
  bool has_snsbgobjectid() const;
  void clear_snsbgobjectid();
  static const int kSnsBGObjectIDFieldNumber = 3;
  ::google::protobuf::uint64 snsbgobjectid() const;
  void set_snsbgobjectid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:micromsg.SnsUserInfo)
 private:
  void set_has_snsflag();
  void clear_has_snsflag();
  void set_has_snsbgimgid();
  void clear_has_snsbgimgid();
  void set_has_snsbgobjectid();
  void clear_has_snsbgobjectid();
  void set_has_snsflagex();
  void clear_has_snsflagex();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr snsbgimgid_;
  ::google::protobuf::uint32 snsflag_;
  ::google::protobuf::uint32 snsflagex_;
  ::google::protobuf::uint64 snsbgobjectid_;
  friend struct protobuf_mmbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CustomizedInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.CustomizedInfo) */ {
 public:
  CustomizedInfo();
  virtual ~CustomizedInfo();

  CustomizedInfo(const CustomizedInfo& from);

  inline CustomizedInfo& operator=(const CustomizedInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CustomizedInfo& default_instance();

  static inline const CustomizedInfo* internal_default_instance() {
    return reinterpret_cast<const CustomizedInfo*>(
               &_CustomizedInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(CustomizedInfo* other);

  // implements Message ----------------------------------------------

  inline CustomizedInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  CustomizedInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CustomizedInfo& from);
  void MergeFrom(const CustomizedInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CustomizedInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ExternalInfo = 2;
  bool has_externalinfo() const;
  void clear_externalinfo();
  static const int kExternalInfoFieldNumber = 2;
  const ::std::string& externalinfo() const;
  void set_externalinfo(const ::std::string& value);
  #if LANG_CXX11
  void set_externalinfo(::std::string&& value);
  #endif
  void set_externalinfo(const char* value);
  void set_externalinfo(const char* value, size_t size);
  ::std::string* mutable_externalinfo();
  ::std::string* release_externalinfo();
  void set_allocated_externalinfo(::std::string* externalinfo);

  // optional string BrandInfo = 3;
  bool has_brandinfo() const;
  void clear_brandinfo();
  static const int kBrandInfoFieldNumber = 3;
  const ::std::string& brandinfo() const;
  void set_brandinfo(const ::std::string& value);
  #if LANG_CXX11
  void set_brandinfo(::std::string&& value);
  #endif
  void set_brandinfo(const char* value);
  void set_brandinfo(const char* value, size_t size);
  ::std::string* mutable_brandinfo();
  ::std::string* release_brandinfo();
  void set_allocated_brandinfo(::std::string* brandinfo);

  // optional string BrandIconURL = 4;
  bool has_brandiconurl() const;
  void clear_brandiconurl();
  static const int kBrandIconURLFieldNumber = 4;
  const ::std::string& brandiconurl() const;
  void set_brandiconurl(const ::std::string& value);
  #if LANG_CXX11
  void set_brandiconurl(::std::string&& value);
  #endif
  void set_brandiconurl(const char* value);
  void set_brandiconurl(const char* value, size_t size);
  ::std::string* mutable_brandiconurl();
  ::std::string* release_brandiconurl();
  void set_allocated_brandiconurl(::std::string* brandiconurl);

  // required uint32 BrandFlag = 1;
  bool has_brandflag() const;
  void clear_brandflag();
  static const int kBrandFlagFieldNumber = 1;
  ::google::protobuf::uint32 brandflag() const;
  void set_brandflag(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.CustomizedInfo)
 private:
  void set_has_brandflag();
  void clear_has_brandflag();
  void set_has_externalinfo();
  void clear_has_externalinfo();
  void set_has_brandinfo();
  void clear_has_brandinfo();
  void set_has_brandiconurl();
  void clear_has_brandiconurl();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr externalinfo_;
  ::google::protobuf::internal::ArenaStringPtr brandinfo_;
  ::google::protobuf::internal::ArenaStringPtr brandiconurl_;
  ::google::protobuf::uint32 brandflag_;
  friend struct protobuf_mmbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.CmdItem) */ {
 public:
  CmdItem();
  virtual ~CmdItem();

  CmdItem(const CmdItem& from);

  inline CmdItem& operator=(const CmdItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdItem& default_instance();

  static inline const CmdItem* internal_default_instance() {
    return reinterpret_cast<const CmdItem*>(
               &_CmdItem_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(CmdItem* other);

  // implements Message ----------------------------------------------

  inline CmdItem* New() const PROTOBUF_FINAL { return New(NULL); }

  CmdItem* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CmdItem& from);
  void MergeFrom(const CmdItem& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CmdItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.SKBuiltinBuffer_t CmdBuf = 2;
  bool has_cmdbuf() const;
  void clear_cmdbuf();
  static const int kCmdBufFieldNumber = 2;
  const ::micromsg::SKBuiltinBuffer_t& cmdbuf() const;
  ::micromsg::SKBuiltinBuffer_t* mutable_cmdbuf();
  ::micromsg::SKBuiltinBuffer_t* release_cmdbuf();
  void set_allocated_cmdbuf(::micromsg::SKBuiltinBuffer_t* cmdbuf);

  // required int32 CmdId = 1;
  bool has_cmdid() const;
  void clear_cmdid();
  static const int kCmdIdFieldNumber = 1;
  ::google::protobuf::int32 cmdid() const;
  void set_cmdid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:micromsg.CmdItem)
 private:
  void set_has_cmdid();
  void clear_has_cmdid();
  void set_has_cmdbuf();
  void clear_has_cmdbuf();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::SKBuiltinBuffer_t* cmdbuf_;
  ::google::protobuf::int32 cmdid_;
  friend struct protobuf_mmbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CmdList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.CmdList) */ {
 public:
  CmdList();
  virtual ~CmdList();

  CmdList(const CmdList& from);

  inline CmdList& operator=(const CmdList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdList& default_instance();

  static inline const CmdList* internal_default_instance() {
    return reinterpret_cast<const CmdList*>(
               &_CmdList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(CmdList* other);

  // implements Message ----------------------------------------------

  inline CmdList* New() const PROTOBUF_FINAL { return New(NULL); }

  CmdList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CmdList& from);
  void MergeFrom(const CmdList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CmdList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.CmdItem List = 2;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 2;
  const ::micromsg::CmdItem& list(int index) const;
  ::micromsg::CmdItem* mutable_list(int index);
  ::micromsg::CmdItem* add_list();
  ::google::protobuf::RepeatedPtrField< ::micromsg::CmdItem >*
      mutable_list();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::CmdItem >&
      list() const;

  // required uint32 Count = 1;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 1;
  ::google::protobuf::uint32 count() const;
  void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.CmdList)
 private:
  void set_has_count();
  void clear_has_count();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::CmdItem > list_;
  ::google::protobuf::uint32 count_;
  friend struct protobuf_mmbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShakeSyncRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.ShakeSyncRequest) */ {
 public:
  ShakeSyncRequest();
  virtual ~ShakeSyncRequest();

  ShakeSyncRequest(const ShakeSyncRequest& from);

  inline ShakeSyncRequest& operator=(const ShakeSyncRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShakeSyncRequest& default_instance();

  static inline const ShakeSyncRequest* internal_default_instance() {
    return reinterpret_cast<const ShakeSyncRequest*>(
               &_ShakeSyncRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(ShakeSyncRequest* other);

  // implements Message ----------------------------------------------

  inline ShakeSyncRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ShakeSyncRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ShakeSyncRequest& from);
  void MergeFrom(const ShakeSyncRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ShakeSyncRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string MacAddr = 5;
  bool has_macaddr() const;
  void clear_macaddr();
  static const int kMacAddrFieldNumber = 5;
  const ::std::string& macaddr() const;
  void set_macaddr(const ::std::string& value);
  #if LANG_CXX11
  void set_macaddr(::std::string&& value);
  #endif
  void set_macaddr(const char* value);
  void set_macaddr(const char* value, size_t size);
  ::std::string* mutable_macaddr();
  ::std::string* release_macaddr();
  void set_allocated_macaddr(::std::string* macaddr);

  // optional string CellId = 6;
  bool has_cellid() const;
  void clear_cellid();
  static const int kCellIdFieldNumber = 6;
  const ::std::string& cellid() const;
  void set_cellid(const ::std::string& value);
  #if LANG_CXX11
  void set_cellid(::std::string&& value);
  #endif
  void set_cellid(const char* value);
  void set_cellid(const char* value, size_t size);
  ::std::string* mutable_cellid();
  ::std::string* release_cellid();
  void set_allocated_cellid(::std::string* cellid);

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required float Longitude = 2;
  bool has_longitude() const;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 2;
  float longitude() const;
  void set_longitude(float value);

  // required float Latitude = 3;
  bool has_latitude() const;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 3;
  float latitude() const;
  void set_latitude(float value);

  // required int32 Precision = 4;
  bool has_precision() const;
  void clear_precision();
  static const int kPrecisionFieldNumber = 4;
  ::google::protobuf::int32 precision() const;
  void set_precision(::google::protobuf::int32 value);

  // required uint32 ImgId = 7;
  bool has_imgid() const;
  void clear_imgid();
  static const int kImgIdFieldNumber = 7;
  ::google::protobuf::uint32 imgid() const;
  void set_imgid(::google::protobuf::uint32 value);

  // required uint32 Times = 8;
  bool has_times() const;
  void clear_times();
  static const int kTimesFieldNumber = 8;
  ::google::protobuf::uint32 times() const;
  void set_times(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.ShakeSyncRequest)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_longitude();
  void clear_has_longitude();
  void set_has_latitude();
  void clear_has_latitude();
  void set_has_precision();
  void clear_has_precision();
  void set_has_macaddr();
  void clear_has_macaddr();
  void set_has_cellid();
  void clear_has_cellid();
  void set_has_imgid();
  void clear_has_imgid();
  void set_has_times();
  void clear_has_times();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr macaddr_;
  ::google::protobuf::internal::ArenaStringPtr cellid_;
  ::micromsg::BaseRequest* baserequest_;
  float longitude_;
  float latitude_;
  ::google::protobuf::int32 precision_;
  ::google::protobuf::uint32 imgid_;
  ::google::protobuf::uint32 times_;
  friend struct protobuf_mmbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShakeSyncResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.ShakeSyncResponse) */ {
 public:
  ShakeSyncResponse();
  virtual ~ShakeSyncResponse();

  ShakeSyncResponse(const ShakeSyncResponse& from);

  inline ShakeSyncResponse& operator=(const ShakeSyncResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShakeSyncResponse& default_instance();

  static inline const ShakeSyncResponse* internal_default_instance() {
    return reinterpret_cast<const ShakeSyncResponse*>(
               &_ShakeSyncResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(ShakeSyncResponse* other);

  // implements Message ----------------------------------------------

  inline ShakeSyncResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ShakeSyncResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ShakeSyncResponse& from);
  void MergeFrom(const ShakeSyncResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ShakeSyncResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // required .micromsg.SKBuiltinBuffer_t Buffer = 2;
  bool has_buffer() const;
  void clear_buffer();
  static const int kBufferFieldNumber = 2;
  const ::micromsg::SKBuiltinBuffer_t& buffer() const;
  ::micromsg::SKBuiltinBuffer_t* mutable_buffer();
  ::micromsg::SKBuiltinBuffer_t* release_buffer();
  void set_allocated_buffer(::micromsg::SKBuiltinBuffer_t* buffer);

  // required uint32 Ret = 3;
  bool has_ret() const;
  void clear_ret();
  static const int kRetFieldNumber = 3;
  ::google::protobuf::uint32 ret() const;
  void set_ret(::google::protobuf::uint32 value);

  // required uint32 ImgId = 4;
  bool has_imgid() const;
  void clear_imgid();
  static const int kImgIdFieldNumber = 4;
  ::google::protobuf::uint32 imgid() const;
  void set_imgid(::google::protobuf::uint32 value);

  // required uint32 ImgTotoalLen = 5;
  bool has_imgtotoallen() const;
  void clear_imgtotoallen();
  static const int kImgTotoalLenFieldNumber = 5;
  ::google::protobuf::uint32 imgtotoallen() const;
  void set_imgtotoallen(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.ShakeSyncResponse)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_buffer();
  void clear_has_buffer();
  void set_has_ret();
  void clear_has_ret();
  void set_has_imgid();
  void clear_has_imgid();
  void set_has_imgtotoallen();
  void clear_has_imgtotoallen();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::BaseResponse* baseresponse_;
  ::micromsg::SKBuiltinBuffer_t* buffer_;
  ::google::protobuf::uint32 ret_;
  ::google::protobuf::uint32 imgid_;
  ::google::protobuf::uint32 imgtotoallen_;
  friend struct protobuf_mmbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BindEmailRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.BindEmailRequest) */ {
 public:
  BindEmailRequest();
  virtual ~BindEmailRequest();

  BindEmailRequest(const BindEmailRequest& from);

  inline BindEmailRequest& operator=(const BindEmailRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BindEmailRequest& default_instance();

  static inline const BindEmailRequest* internal_default_instance() {
    return reinterpret_cast<const BindEmailRequest*>(
               &_BindEmailRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(BindEmailRequest* other);

  // implements Message ----------------------------------------------

  inline BindEmailRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  BindEmailRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BindEmailRequest& from);
  void MergeFrom(const BindEmailRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BindEmailRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Email = 3;
  bool has_email() const;
  void clear_email();
  static const int kEmailFieldNumber = 3;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required uint32 OpCode = 2;
  bool has_opcode() const;
  void clear_opcode();
  static const int kOpCodeFieldNumber = 2;
  ::google::protobuf::uint32 opcode() const;
  void set_opcode(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.BindEmailRequest)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_opcode();
  void clear_has_opcode();
  void set_has_email();
  void clear_has_email();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::micromsg::BaseRequest* baserequest_;
  ::google::protobuf::uint32 opcode_;
  friend struct protobuf_mmbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BindEmailResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.BindEmailResponse) */ {
 public:
  BindEmailResponse();
  virtual ~BindEmailResponse();

  BindEmailResponse(const BindEmailResponse& from);

  inline BindEmailResponse& operator=(const BindEmailResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BindEmailResponse& default_instance();

  static inline const BindEmailResponse* internal_default_instance() {
    return reinterpret_cast<const BindEmailResponse*>(
               &_BindEmailResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(BindEmailResponse* other);

  // implements Message ----------------------------------------------

  inline BindEmailResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  BindEmailResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BindEmailResponse& from);
  void MergeFrom(const BindEmailResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BindEmailResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // @@protoc_insertion_point(class_scope:micromsg.BindEmailResponse)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::BaseResponse* baseresponse_;
  friend struct protobuf_mmbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetLocationRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GetLocationRequest) */ {
 public:
  GetLocationRequest();
  virtual ~GetLocationRequest();

  GetLocationRequest(const GetLocationRequest& from);

  inline GetLocationRequest& operator=(const GetLocationRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetLocationRequest& default_instance();

  static inline const GetLocationRequest* internal_default_instance() {
    return reinterpret_cast<const GetLocationRequest*>(
               &_GetLocationRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(GetLocationRequest* other);

  // implements Message ----------------------------------------------

  inline GetLocationRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetLocationRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetLocationRequest& from);
  void MergeFrom(const GetLocationRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetLocationRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string MacAddr = 6;
  bool has_macaddr() const;
  void clear_macaddr();
  static const int kMacAddrFieldNumber = 6;
  const ::std::string& macaddr() const;
  void set_macaddr(const ::std::string& value);
  #if LANG_CXX11
  void set_macaddr(::std::string&& value);
  #endif
  void set_macaddr(const char* value);
  void set_macaddr(const char* value, size_t size);
  ::std::string* mutable_macaddr();
  ::std::string* release_macaddr();
  void set_allocated_macaddr(::std::string* macaddr);

  // optional string CellId = 7;
  bool has_cellid() const;
  void clear_cellid();
  static const int kCellIdFieldNumber = 7;
  const ::std::string& cellid() const;
  void set_cellid(const ::std::string& value);
  #if LANG_CXX11
  void set_cellid(::std::string&& value);
  #endif
  void set_cellid(const char* value);
  void set_cellid(const char* value, size_t size);
  ::std::string* mutable_cellid();
  ::std::string* release_cellid();
  void set_allocated_cellid(::std::string* cellid);

  // required .micromsg.BaseRequest BaseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest();
  static const int kBaseRequestFieldNumber = 1;
  const ::micromsg::BaseRequest& baserequest() const;
  ::micromsg::BaseRequest* mutable_baserequest();
  ::micromsg::BaseRequest* release_baserequest();
  void set_allocated_baserequest(::micromsg::BaseRequest* baserequest);

  // required int32 Longitude = 3;
  bool has_longitude() const;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 3;
  ::google::protobuf::int32 longitude() const;
  void set_longitude(::google::protobuf::int32 value);

  // required int32 Latitude = 4;
  bool has_latitude() const;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 4;
  ::google::protobuf::int32 latitude() const;
  void set_latitude(::google::protobuf::int32 value);

  // required int32 Precision = 5;
  bool has_precision() const;
  void clear_precision();
  static const int kPrecisionFieldNumber = 5;
  ::google::protobuf::int32 precision() const;
  void set_precision(::google::protobuf::int32 value);

  // optional int32 GPSSource = 8;
  bool has_gpssource() const;
  void clear_gpssource();
  static const int kGPSSourceFieldNumber = 8;
  ::google::protobuf::int32 gpssource() const;
  void set_gpssource(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:micromsg.GetLocationRequest)
 private:
  void set_has_baserequest();
  void clear_has_baserequest();
  void set_has_longitude();
  void clear_has_longitude();
  void set_has_latitude();
  void clear_has_latitude();
  void set_has_precision();
  void clear_has_precision();
  void set_has_macaddr();
  void clear_has_macaddr();
  void set_has_cellid();
  void clear_has_cellid();
  void set_has_gpssource();
  void clear_has_gpssource();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr macaddr_;
  ::google::protobuf::internal::ArenaStringPtr cellid_;
  ::micromsg::BaseRequest* baserequest_;
  ::google::protobuf::int32 longitude_;
  ::google::protobuf::int32 latitude_;
  ::google::protobuf::int32 precision_;
  ::google::protobuf::int32 gpssource_;
  friend struct protobuf_mmbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetLocationResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GetLocationResponse) */ {
 public:
  GetLocationResponse();
  virtual ~GetLocationResponse();

  GetLocationResponse(const GetLocationResponse& from);

  inline GetLocationResponse& operator=(const GetLocationResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetLocationResponse& default_instance();

  static inline const GetLocationResponse* internal_default_instance() {
    return reinterpret_cast<const GetLocationResponse*>(
               &_GetLocationResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(GetLocationResponse* other);

  // implements Message ----------------------------------------------

  inline GetLocationResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetLocationResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetLocationResponse& from);
  void MergeFrom(const GetLocationResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetLocationResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.BaseResponse BaseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::micromsg::BaseResponse& baseresponse() const;
  ::micromsg::BaseResponse* mutable_baseresponse();
  ::micromsg::BaseResponse* release_baseresponse();
  void set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse);

  // required int32 Longitude = 2;
  bool has_longitude() const;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 2;
  ::google::protobuf::int32 longitude() const;
  void set_longitude(::google::protobuf::int32 value);

  // required int32 Latitude = 3;
  bool has_latitude() const;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 3;
  ::google::protobuf::int32 latitude() const;
  void set_latitude(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:micromsg.GetLocationResponse)
 private:
  void set_has_baseresponse();
  void clear_has_baseresponse();
  void set_has_longitude();
  void clear_has_longitude();
  void set_has_latitude();
  void clear_has_latitude();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::BaseResponse* baseresponse_;
  ::google::protobuf::int32 longitude_;
  ::google::protobuf::int32 latitude_;
  friend struct protobuf_mmbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RoomInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.RoomInfo) */ {
 public:
  RoomInfo();
  virtual ~RoomInfo();

  RoomInfo(const RoomInfo& from);

  inline RoomInfo& operator=(const RoomInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomInfo& default_instance();

  static inline const RoomInfo* internal_default_instance() {
    return reinterpret_cast<const RoomInfo*>(
               &_RoomInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(RoomInfo* other);

  // implements Message ----------------------------------------------

  inline RoomInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  RoomInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RoomInfo& from);
  void MergeFrom(const RoomInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RoomInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.SKBuiltinString_t UserName = 1;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 1;
  const ::micromsg::SKBuiltinString_t& username() const;
  ::micromsg::SKBuiltinString_t* mutable_username();
  ::micromsg::SKBuiltinString_t* release_username();
  void set_allocated_username(::micromsg::SKBuiltinString_t* username);

  // required .micromsg.SKBuiltinString_t NickName = 2;
  bool has_nickname() const;
  void clear_nickname();
  static const int kNickNameFieldNumber = 2;
  const ::micromsg::SKBuiltinString_t& nickname() const;
  ::micromsg::SKBuiltinString_t* mutable_nickname();
  ::micromsg::SKBuiltinString_t* release_nickname();
  void set_allocated_nickname(::micromsg::SKBuiltinString_t* nickname);

  // @@protoc_insertion_point(class_scope:micromsg.RoomInfo)
 private:
  void set_has_username();
  void clear_has_username();
  void set_has_nickname();
  void clear_has_nickname();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::SKBuiltinString_t* username_;
  ::micromsg::SKBuiltinString_t* nickname_;
  friend struct protobuf_mmbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CDNDnsInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.CDNDnsInfo) */ {
 public:
  CDNDnsInfo();
  virtual ~CDNDnsInfo();

  CDNDnsInfo(const CDNDnsInfo& from);

  inline CDNDnsInfo& operator=(const CDNDnsInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CDNDnsInfo& default_instance();

  static inline const CDNDnsInfo* internal_default_instance() {
    return reinterpret_cast<const CDNDnsInfo*>(
               &_CDNDnsInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(CDNDnsInfo* other);

  // implements Message ----------------------------------------------

  inline CDNDnsInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  CDNDnsInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CDNDnsInfo& from);
  void MergeFrom(const CDNDnsInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CDNDnsInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.SKBuiltinString_t FrontIPList = 6;
  int frontiplist_size() const;
  void clear_frontiplist();
  static const int kFrontIPListFieldNumber = 6;
  const ::micromsg::SKBuiltinString_t& frontiplist(int index) const;
  ::micromsg::SKBuiltinString_t* mutable_frontiplist(int index);
  ::micromsg::SKBuiltinString_t* add_frontiplist();
  ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >*
      mutable_frontiplist();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >&
      frontiplist() const;

  // repeated .micromsg.SKBuiltinString_t ZoneIPList = 11;
  int zoneiplist_size() const;
  void clear_zoneiplist();
  static const int kZoneIPListFieldNumber = 11;
  const ::micromsg::SKBuiltinString_t& zoneiplist(int index) const;
  ::micromsg::SKBuiltinString_t* mutable_zoneiplist(int index);
  ::micromsg::SKBuiltinString_t* add_zoneiplist();
  ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >*
      mutable_zoneiplist();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >&
      zoneiplist() const;

  // optional string ZoneDomain = 7;
  bool has_zonedomain() const;
  void clear_zonedomain();
  static const int kZoneDomainFieldNumber = 7;
  const ::std::string& zonedomain() const;
  void set_zonedomain(const ::std::string& value);
  #if LANG_CXX11
  void set_zonedomain(::std::string&& value);
  #endif
  void set_zonedomain(const char* value);
  void set_zonedomain(const char* value, size_t size);
  ::std::string* mutable_zonedomain();
  ::std::string* release_zonedomain();
  void set_allocated_zonedomain(::std::string* zonedomain);

  // required .micromsg.SKBuiltinBuffer_t AuthKey = 8;
  bool has_authkey() const;
  void clear_authkey();
  static const int kAuthKeyFieldNumber = 8;
  const ::micromsg::SKBuiltinBuffer_t& authkey() const;
  ::micromsg::SKBuiltinBuffer_t* mutable_authkey();
  ::micromsg::SKBuiltinBuffer_t* release_authkey();
  void set_allocated_authkey(::micromsg::SKBuiltinBuffer_t* authkey);

  // required uint32 Ver = 1;
  bool has_ver() const;
  void clear_ver();
  static const int kVerFieldNumber = 1;
  ::google::protobuf::uint32 ver() const;
  void set_ver(::google::protobuf::uint32 value);

  // required uint32 Uin = 2;
  bool has_uin() const;
  void clear_uin();
  static const int kUinFieldNumber = 2;
  ::google::protobuf::uint32 uin() const;
  void set_uin(::google::protobuf::uint32 value);

  // required uint32 ExpireTime = 3;
  bool has_expiretime() const;
  void clear_expiretime();
  static const int kExpireTimeFieldNumber = 3;
  ::google::protobuf::uint32 expiretime() const;
  void set_expiretime(::google::protobuf::uint32 value);

  // required int32 FrontID = 4;
  bool has_frontid() const;
  void clear_frontid();
  static const int kFrontIDFieldNumber = 4;
  ::google::protobuf::int32 frontid() const;
  void set_frontid(::google::protobuf::int32 value);

  // required int32 FrontIPCount = 5;
  bool has_frontipcount() const;
  void clear_frontipcount();
  static const int kFrontIPCountFieldNumber = 5;
  ::google::protobuf::int32 frontipcount() const;
  void set_frontipcount(::google::protobuf::int32 value);

  // required int32 ZoneID = 9;
  bool has_zoneid() const;
  void clear_zoneid();
  static const int kZoneIDFieldNumber = 9;
  ::google::protobuf::int32 zoneid() const;
  void set_zoneid(::google::protobuf::int32 value);

  // required int32 ZoneIPCount = 10;
  bool has_zoneipcount() const;
  void clear_zoneipcount();
  static const int kZoneIPCountFieldNumber = 10;
  ::google::protobuf::int32 zoneipcount() const;
  void set_zoneipcount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:micromsg.CDNDnsInfo)
 private:
  void set_has_ver();
  void clear_has_ver();
  void set_has_uin();
  void clear_has_uin();
  void set_has_expiretime();
  void clear_has_expiretime();
  void set_has_frontid();
  void clear_has_frontid();
  void set_has_frontipcount();
  void clear_has_frontipcount();
  void set_has_zonedomain();
  void clear_has_zonedomain();
  void set_has_authkey();
  void clear_has_authkey();
  void set_has_zoneid();
  void clear_has_zoneid();
  void set_has_zoneipcount();
  void clear_has_zoneipcount();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t > frontiplist_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t > zoneiplist_;
  ::google::protobuf::internal::ArenaStringPtr zonedomain_;
  ::micromsg::SKBuiltinBuffer_t* authkey_;
  ::google::protobuf::uint32 ver_;
  ::google::protobuf::uint32 uin_;
  ::google::protobuf::uint32 expiretime_;
  ::google::protobuf::int32 frontid_;
  ::google::protobuf::int32 frontipcount_;
  ::google::protobuf::int32 zoneid_;
  ::google::protobuf::int32 zoneipcount_;
  friend struct protobuf_mmbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StyleKeyVal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.StyleKeyVal) */ {
 public:
  StyleKeyVal();
  virtual ~StyleKeyVal();

  StyleKeyVal(const StyleKeyVal& from);

  inline StyleKeyVal& operator=(const StyleKeyVal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StyleKeyVal& default_instance();

  static inline const StyleKeyVal* internal_default_instance() {
    return reinterpret_cast<const StyleKeyVal*>(
               &_StyleKeyVal_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(StyleKeyVal* other);

  // implements Message ----------------------------------------------

  inline StyleKeyVal* New() const PROTOBUF_FINAL { return New(NULL); }

  StyleKeyVal* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StyleKeyVal& from);
  void MergeFrom(const StyleKeyVal& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StyleKeyVal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Val = 2;
  bool has_val() const;
  void clear_val();
  static const int kValFieldNumber = 2;
  const ::std::string& val() const;
  void set_val(const ::std::string& value);
  #if LANG_CXX11
  void set_val(::std::string&& value);
  #endif
  void set_val(const char* value);
  void set_val(const char* value, size_t size);
  ::std::string* mutable_val();
  ::std::string* release_val();
  void set_allocated_val(::std::string* val);

  // required uint32 Key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  ::google::protobuf::uint32 key() const;
  void set_key(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.StyleKeyVal)
 private:
  void set_has_key();
  void clear_has_key();
  void set_has_val();
  void clear_has_val();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr val_;
  ::google::protobuf::uint32 key_;
  friend struct protobuf_mmbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShowStyleKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.ShowStyleKey) */ {
 public:
  ShowStyleKey();
  virtual ~ShowStyleKey();

  ShowStyleKey(const ShowStyleKey& from);

  inline ShowStyleKey& operator=(const ShowStyleKey& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShowStyleKey& default_instance();

  static inline const ShowStyleKey* internal_default_instance() {
    return reinterpret_cast<const ShowStyleKey*>(
               &_ShowStyleKey_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(ShowStyleKey* other);

  // implements Message ----------------------------------------------

  inline ShowStyleKey* New() const PROTOBUF_FINAL { return New(NULL); }

  ShowStyleKey* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ShowStyleKey& from);
  void MergeFrom(const ShowStyleKey& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ShowStyleKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.StyleKeyVal Key = 2;
  int key_size() const;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::micromsg::StyleKeyVal& key(int index) const;
  ::micromsg::StyleKeyVal* mutable_key(int index);
  ::micromsg::StyleKeyVal* add_key();
  ::google::protobuf::RepeatedPtrField< ::micromsg::StyleKeyVal >*
      mutable_key();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::StyleKeyVal >&
      key() const;

  // required uint32 KeyCount = 1;
  bool has_keycount() const;
  void clear_keycount();
  static const int kKeyCountFieldNumber = 1;
  ::google::protobuf::uint32 keycount() const;
  void set_keycount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.ShowStyleKey)
 private:
  void set_has_keycount();
  void clear_has_keycount();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::StyleKeyVal > key_;
  ::google::protobuf::uint32 keycount_;
  friend struct protobuf_mmbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SafeDevice : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.SafeDevice) */ {
 public:
  SafeDevice();
  virtual ~SafeDevice();

  SafeDevice(const SafeDevice& from);

  inline SafeDevice& operator=(const SafeDevice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SafeDevice& default_instance();

  static inline const SafeDevice* internal_default_instance() {
    return reinterpret_cast<const SafeDevice*>(
               &_SafeDevice_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(SafeDevice* other);

  // implements Message ----------------------------------------------

  inline SafeDevice* New() const PROTOBUF_FINAL { return New(NULL); }

  SafeDevice* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SafeDevice& from);
  void MergeFrom(const SafeDevice& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SafeDevice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string Uuid = 2;
  bool has_uuid() const;
  void clear_uuid();
  static const int kUuidFieldNumber = 2;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_uuid(::std::string&& value);
  #endif
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // optional string DeviceType = 3;
  bool has_devicetype() const;
  void clear_devicetype();
  static const int kDeviceTypeFieldNumber = 3;
  const ::std::string& devicetype() const;
  void set_devicetype(const ::std::string& value);
  #if LANG_CXX11
  void set_devicetype(::std::string&& value);
  #endif
  void set_devicetype(const char* value);
  void set_devicetype(const char* value, size_t size);
  ::std::string* mutable_devicetype();
  ::std::string* release_devicetype();
  void set_allocated_devicetype(::std::string* devicetype);

  // required uint32 CreateTime = 4;
  bool has_createtime() const;
  void clear_createtime();
  static const int kCreateTimeFieldNumber = 4;
  ::google::protobuf::uint32 createtime() const;
  void set_createtime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.SafeDevice)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_uuid();
  void clear_has_uuid();
  void set_has_devicetype();
  void clear_has_devicetype();
  void set_has_createtime();
  void clear_has_createtime();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::google::protobuf::internal::ArenaStringPtr devicetype_;
  ::google::protobuf::uint32 createtime_;
  friend struct protobuf_mmbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SafeDeviceList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.SafeDeviceList) */ {
 public:
  SafeDeviceList();
  virtual ~SafeDeviceList();

  SafeDeviceList(const SafeDeviceList& from);

  inline SafeDeviceList& operator=(const SafeDeviceList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SafeDeviceList& default_instance();

  static inline const SafeDeviceList* internal_default_instance() {
    return reinterpret_cast<const SafeDeviceList*>(
               &_SafeDeviceList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(SafeDeviceList* other);

  // implements Message ----------------------------------------------

  inline SafeDeviceList* New() const PROTOBUF_FINAL { return New(NULL); }

  SafeDeviceList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SafeDeviceList& from);
  void MergeFrom(const SafeDeviceList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SafeDeviceList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.SafeDevice List = 2;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 2;
  const ::micromsg::SafeDevice& list(int index) const;
  ::micromsg::SafeDevice* mutable_list(int index);
  ::micromsg::SafeDevice* add_list();
  ::google::protobuf::RepeatedPtrField< ::micromsg::SafeDevice >*
      mutable_list();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::SafeDevice >&
      list() const;

  // required uint32 Count = 1;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 1;
  ::google::protobuf::uint32 count() const;
  void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.SafeDeviceList)
 private:
  void set_has_count();
  void clear_has_count();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::SafeDevice > list_;
  ::google::protobuf::uint32 count_;
  friend struct protobuf_mmbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MemberReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.MemberReq) */ {
 public:
  MemberReq();
  virtual ~MemberReq();

  MemberReq(const MemberReq& from);

  inline MemberReq& operator=(const MemberReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MemberReq& default_instance();

  static inline const MemberReq* internal_default_instance() {
    return reinterpret_cast<const MemberReq*>(
               &_MemberReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(MemberReq* other);

  // implements Message ----------------------------------------------

  inline MemberReq* New() const PROTOBUF_FINAL { return New(NULL); }

  MemberReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MemberReq& from);
  void MergeFrom(const MemberReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MemberReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.SKBuiltinString_t MemberName = 1;
  bool has_membername() const;
  void clear_membername();
  static const int kMemberNameFieldNumber = 1;
  const ::micromsg::SKBuiltinString_t& membername() const;
  ::micromsg::SKBuiltinString_t* mutable_membername();
  ::micromsg::SKBuiltinString_t* release_membername();
  void set_allocated_membername(::micromsg::SKBuiltinString_t* membername);

  // @@protoc_insertion_point(class_scope:micromsg.MemberReq)
 private:
  void set_has_membername();
  void clear_has_membername();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::SKBuiltinString_t* membername_;
  friend struct protobuf_mmbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MemberResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.MemberResp) */ {
 public:
  MemberResp();
  virtual ~MemberResp();

  MemberResp(const MemberResp& from);

  inline MemberResp& operator=(const MemberResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MemberResp& default_instance();

  static inline const MemberResp* internal_default_instance() {
    return reinterpret_cast<const MemberResp*>(
               &_MemberResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(MemberResp* other);

  // implements Message ----------------------------------------------

  inline MemberResp* New() const PROTOBUF_FINAL { return New(NULL); }

  MemberResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MemberResp& from);
  void MergeFrom(const MemberResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MemberResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Province = 13;
  bool has_province() const;
  void clear_province();
  static const int kProvinceFieldNumber = 13;
  const ::std::string& province() const;
  void set_province(const ::std::string& value);
  #if LANG_CXX11
  void set_province(::std::string&& value);
  #endif
  void set_province(const char* value);
  void set_province(const char* value, size_t size);
  ::std::string* mutable_province();
  ::std::string* release_province();
  void set_allocated_province(::std::string* province);

  // optional string City = 14;
  bool has_city() const;
  void clear_city();
  static const int kCityFieldNumber = 14;
  const ::std::string& city() const;
  void set_city(const ::std::string& value);
  #if LANG_CXX11
  void set_city(::std::string&& value);
  #endif
  void set_city(const char* value);
  void set_city(const char* value, size_t size);
  ::std::string* mutable_city();
  ::std::string* release_city();
  void set_allocated_city(::std::string* city);

  // optional string Signature = 15;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 15;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_signature(::std::string&& value);
  #endif
  void set_signature(const char* value);
  void set_signature(const char* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // optional string VerifyInfo = 18;
  bool has_verifyinfo() const;
  void clear_verifyinfo();
  static const int kVerifyInfoFieldNumber = 18;
  const ::std::string& verifyinfo() const;
  void set_verifyinfo(const ::std::string& value);
  #if LANG_CXX11
  void set_verifyinfo(::std::string&& value);
  #endif
  void set_verifyinfo(const char* value);
  void set_verifyinfo(const char* value, size_t size);
  ::std::string* mutable_verifyinfo();
  ::std::string* release_verifyinfo();
  void set_allocated_verifyinfo(::std::string* verifyinfo);

  // optional string Country = 19;
  bool has_country() const;
  void clear_country();
  static const int kCountryFieldNumber = 19;
  const ::std::string& country() const;
  void set_country(const ::std::string& value);
  #if LANG_CXX11
  void set_country(::std::string&& value);
  #endif
  void set_country(const char* value);
  void set_country(const char* value, size_t size);
  ::std::string* mutable_country();
  ::std::string* release_country();
  void set_allocated_country(::std::string* country);

  // required .micromsg.SKBuiltinString_t MemberName = 1;
  bool has_membername() const;
  void clear_membername();
  static const int kMemberNameFieldNumber = 1;
  const ::micromsg::SKBuiltinString_t& membername() const;
  ::micromsg::SKBuiltinString_t* mutable_membername();
  ::micromsg::SKBuiltinString_t* release_membername();
  void set_allocated_membername(::micromsg::SKBuiltinString_t* membername);

  // required .micromsg.SKBuiltinString_t NickName = 3;
  bool has_nickname() const;
  void clear_nickname();
  static const int kNickNameFieldNumber = 3;
  const ::micromsg::SKBuiltinString_t& nickname() const;
  ::micromsg::SKBuiltinString_t* mutable_nickname();
  ::micromsg::SKBuiltinString_t* release_nickname();
  void set_allocated_nickname(::micromsg::SKBuiltinString_t* nickname);

  // required .micromsg.SKBuiltinString_t PYInitial = 4;
  bool has_pyinitial() const;
  void clear_pyinitial();
  static const int kPYInitialFieldNumber = 4;
  const ::micromsg::SKBuiltinString_t& pyinitial() const;
  ::micromsg::SKBuiltinString_t* mutable_pyinitial();
  ::micromsg::SKBuiltinString_t* release_pyinitial();
  void set_allocated_pyinitial(::micromsg::SKBuiltinString_t* pyinitial);

  // required .micromsg.SKBuiltinString_t QuanPin = 5;
  bool has_quanpin() const;
  void clear_quanpin();
  static const int kQuanPinFieldNumber = 5;
  const ::micromsg::SKBuiltinString_t& quanpin() const;
  ::micromsg::SKBuiltinString_t* mutable_quanpin();
  ::micromsg::SKBuiltinString_t* release_quanpin();
  void set_allocated_quanpin(::micromsg::SKBuiltinString_t* quanpin);

  // required .micromsg.SKBuiltinString_t Remark = 9;
  bool has_remark() const;
  void clear_remark();
  static const int kRemarkFieldNumber = 9;
  const ::micromsg::SKBuiltinString_t& remark() const;
  ::micromsg::SKBuiltinString_t* mutable_remark();
  ::micromsg::SKBuiltinString_t* release_remark();
  void set_allocated_remark(::micromsg::SKBuiltinString_t* remark);

  // required .micromsg.SKBuiltinString_t RemarkPYInitial = 10;
  bool has_remarkpyinitial() const;
  void clear_remarkpyinitial();
  static const int kRemarkPYInitialFieldNumber = 10;
  const ::micromsg::SKBuiltinString_t& remarkpyinitial() const;
  ::micromsg::SKBuiltinString_t* mutable_remarkpyinitial();
  ::micromsg::SKBuiltinString_t* release_remarkpyinitial();
  void set_allocated_remarkpyinitial(::micromsg::SKBuiltinString_t* remarkpyinitial);

  // required .micromsg.SKBuiltinString_t RemarkQuanPin = 11;
  bool has_remarkquanpin() const;
  void clear_remarkquanpin();
  static const int kRemarkQuanPinFieldNumber = 11;
  const ::micromsg::SKBuiltinString_t& remarkquanpin() const;
  ::micromsg::SKBuiltinString_t* mutable_remarkquanpin();
  ::micromsg::SKBuiltinString_t* release_remarkquanpin();
  void set_allocated_remarkquanpin(::micromsg::SKBuiltinString_t* remarkquanpin);

  // required uint32 MemberStatus = 2;
  bool has_memberstatus() const;
  void clear_memberstatus();
  static const int kMemberStatusFieldNumber = 2;
  ::google::protobuf::uint32 memberstatus() const;
  void set_memberstatus(::google::protobuf::uint32 value);

  // required int32 Sex = 6;
  bool has_sex() const;
  void clear_sex();
  static const int kSexFieldNumber = 6;
  ::google::protobuf::int32 sex() const;
  void set_sex(::google::protobuf::int32 value);

  // required uint32 ContactType = 12;
  bool has_contacttype() const;
  void clear_contacttype();
  static const int kContactTypeFieldNumber = 12;
  ::google::protobuf::uint32 contacttype() const;
  void set_contacttype(::google::protobuf::uint32 value);

  // optional uint32 PersonalCard = 16;
  bool has_personalcard() const;
  void clear_personalcard();
  static const int kPersonalCardFieldNumber = 16;
  ::google::protobuf::uint32 personalcard() const;
  void set_personalcard(::google::protobuf::uint32 value);

  // optional uint32 VerifyFlag = 17;
  bool has_verifyflag() const;
  void clear_verifyflag();
  static const int kVerifyFlagFieldNumber = 17;
  ::google::protobuf::uint32 verifyflag() const;
  void set_verifyflag(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.MemberResp)
 private:
  void set_has_membername();
  void clear_has_membername();
  void set_has_memberstatus();
  void clear_has_memberstatus();
  void set_has_nickname();
  void clear_has_nickname();
  void set_has_pyinitial();
  void clear_has_pyinitial();
  void set_has_quanpin();
  void clear_has_quanpin();
  void set_has_sex();
  void clear_has_sex();
  void set_has_remark();
  void clear_has_remark();
  void set_has_remarkpyinitial();
  void clear_has_remarkpyinitial();
  void set_has_remarkquanpin();
  void clear_has_remarkquanpin();
  void set_has_contacttype();
  void clear_has_contacttype();
  void set_has_province();
  void clear_has_province();
  void set_has_city();
  void clear_has_city();
  void set_has_signature();
  void clear_has_signature();
  void set_has_personalcard();
  void clear_has_personalcard();
  void set_has_verifyflag();
  void clear_has_verifyflag();
  void set_has_verifyinfo();
  void clear_has_verifyinfo();
  void set_has_country();
  void clear_has_country();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr province_;
  ::google::protobuf::internal::ArenaStringPtr city_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  ::google::protobuf::internal::ArenaStringPtr verifyinfo_;
  ::google::protobuf::internal::ArenaStringPtr country_;
  ::micromsg::SKBuiltinString_t* membername_;
  ::micromsg::SKBuiltinString_t* nickname_;
  ::micromsg::SKBuiltinString_t* pyinitial_;
  ::micromsg::SKBuiltinString_t* quanpin_;
  ::micromsg::SKBuiltinString_t* remark_;
  ::micromsg::SKBuiltinString_t* remarkpyinitial_;
  ::micromsg::SKBuiltinString_t* remarkquanpin_;
  ::google::protobuf::uint32 memberstatus_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::uint32 contacttype_;
  ::google::protobuf::uint32 personalcard_;
  ::google::protobuf::uint32 verifyflag_;
  friend struct protobuf_mmbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DelMemberReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.DelMemberReq) */ {
 public:
  DelMemberReq();
  virtual ~DelMemberReq();

  DelMemberReq(const DelMemberReq& from);

  inline DelMemberReq& operator=(const DelMemberReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DelMemberReq& default_instance();

  static inline const DelMemberReq* internal_default_instance() {
    return reinterpret_cast<const DelMemberReq*>(
               &_DelMemberReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(DelMemberReq* other);

  // implements Message ----------------------------------------------

  inline DelMemberReq* New() const PROTOBUF_FINAL { return New(NULL); }

  DelMemberReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DelMemberReq& from);
  void MergeFrom(const DelMemberReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DelMemberReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.SKBuiltinString_t MemberName = 1;
  bool has_membername() const;
  void clear_membername();
  static const int kMemberNameFieldNumber = 1;
  const ::micromsg::SKBuiltinString_t& membername() const;
  ::micromsg::SKBuiltinString_t* mutable_membername();
  ::micromsg::SKBuiltinString_t* release_membername();
  void set_allocated_membername(::micromsg::SKBuiltinString_t* membername);

  // @@protoc_insertion_point(class_scope:micromsg.DelMemberReq)
 private:
  void set_has_membername();
  void clear_has_membername();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::SKBuiltinString_t* membername_;
  friend struct protobuf_mmbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DelMemberResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.DelMemberResp) */ {
 public:
  DelMemberResp();
  virtual ~DelMemberResp();

  DelMemberResp(const DelMemberResp& from);

  inline DelMemberResp& operator=(const DelMemberResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DelMemberResp& default_instance();

  static inline const DelMemberResp* internal_default_instance() {
    return reinterpret_cast<const DelMemberResp*>(
               &_DelMemberResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void Swap(DelMemberResp* other);

  // implements Message ----------------------------------------------

  inline DelMemberResp* New() const PROTOBUF_FINAL { return New(NULL); }

  DelMemberResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DelMemberResp& from);
  void MergeFrom(const DelMemberResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DelMemberResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.SKBuiltinString_t MemberName = 1;
  bool has_membername() const;
  void clear_membername();
  static const int kMemberNameFieldNumber = 1;
  const ::micromsg::SKBuiltinString_t& membername() const;
  ::micromsg::SKBuiltinString_t* mutable_membername();
  ::micromsg::SKBuiltinString_t* release_membername();
  void set_allocated_membername(::micromsg::SKBuiltinString_t* membername);

  // @@protoc_insertion_point(class_scope:micromsg.DelMemberResp)
 private:
  void set_has_membername();
  void clear_has_membername();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::SKBuiltinString_t* membername_;
  friend struct protobuf_mmbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DisturbTimeSpan : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.DisturbTimeSpan) */ {
 public:
  DisturbTimeSpan();
  virtual ~DisturbTimeSpan();

  DisturbTimeSpan(const DisturbTimeSpan& from);

  inline DisturbTimeSpan& operator=(const DisturbTimeSpan& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DisturbTimeSpan& default_instance();

  static inline const DisturbTimeSpan* internal_default_instance() {
    return reinterpret_cast<const DisturbTimeSpan*>(
               &_DisturbTimeSpan_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    28;

  void Swap(DisturbTimeSpan* other);

  // implements Message ----------------------------------------------

  inline DisturbTimeSpan* New() const PROTOBUF_FINAL { return New(NULL); }

  DisturbTimeSpan* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DisturbTimeSpan& from);
  void MergeFrom(const DisturbTimeSpan& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DisturbTimeSpan* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 BeginTime = 1;
  bool has_begintime() const;
  void clear_begintime();
  static const int kBeginTimeFieldNumber = 1;
  ::google::protobuf::uint32 begintime() const;
  void set_begintime(::google::protobuf::uint32 value);

  // required uint32 EndTime = 2;
  bool has_endtime() const;
  void clear_endtime();
  static const int kEndTimeFieldNumber = 2;
  ::google::protobuf::uint32 endtime() const;
  void set_endtime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.DisturbTimeSpan)
 private:
  void set_has_begintime();
  void clear_has_begintime();
  void set_has_endtime();
  void clear_has_endtime();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 begintime_;
  ::google::protobuf::uint32 endtime_;
  friend struct protobuf_mmbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DisturbSetting : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.DisturbSetting) */ {
 public:
  DisturbSetting();
  virtual ~DisturbSetting();

  DisturbSetting(const DisturbSetting& from);

  inline DisturbSetting& operator=(const DisturbSetting& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DisturbSetting& default_instance();

  static inline const DisturbSetting* internal_default_instance() {
    return reinterpret_cast<const DisturbSetting*>(
               &_DisturbSetting_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    29;

  void Swap(DisturbSetting* other);

  // implements Message ----------------------------------------------

  inline DisturbSetting* New() const PROTOBUF_FINAL { return New(NULL); }

  DisturbSetting* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DisturbSetting& from);
  void MergeFrom(const DisturbSetting& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DisturbSetting* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .micromsg.DisturbTimeSpan NightTime = 2;
  bool has_nighttime() const;
  void clear_nighttime();
  static const int kNightTimeFieldNumber = 2;
  const ::micromsg::DisturbTimeSpan& nighttime() const;
  ::micromsg::DisturbTimeSpan* mutable_nighttime();
  ::micromsg::DisturbTimeSpan* release_nighttime();
  void set_allocated_nighttime(::micromsg::DisturbTimeSpan* nighttime);

  // required .micromsg.DisturbTimeSpan AllDayTime = 4;
  bool has_alldaytime() const;
  void clear_alldaytime();
  static const int kAllDayTimeFieldNumber = 4;
  const ::micromsg::DisturbTimeSpan& alldaytime() const;
  ::micromsg::DisturbTimeSpan* mutable_alldaytime();
  ::micromsg::DisturbTimeSpan* release_alldaytime();
  void set_allocated_alldaytime(::micromsg::DisturbTimeSpan* alldaytime);

  // required uint32 NightSetting = 1;
  bool has_nightsetting() const;
  void clear_nightsetting();
  static const int kNightSettingFieldNumber = 1;
  ::google::protobuf::uint32 nightsetting() const;
  void set_nightsetting(::google::protobuf::uint32 value);

  // required uint32 AllDaySetting = 3;
  bool has_alldaysetting() const;
  void clear_alldaysetting();
  static const int kAllDaySettingFieldNumber = 3;
  ::google::protobuf::uint32 alldaysetting() const;
  void set_alldaysetting(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.DisturbSetting)
 private:
  void set_has_nightsetting();
  void clear_has_nightsetting();
  void set_has_nighttime();
  void clear_has_nighttime();
  void set_has_alldaysetting();
  void clear_has_alldaysetting();
  void set_has_alldaytime();
  void clear_has_alldaytime();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::DisturbTimeSpan* nighttime_;
  ::micromsg::DisturbTimeSpan* alldaytime_;
  ::google::protobuf::uint32 nightsetting_;
  ::google::protobuf::uint32 alldaysetting_;
  friend struct protobuf_mmbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GmailInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GmailInfo) */ {
 public:
  GmailInfo();
  virtual ~GmailInfo();

  GmailInfo(const GmailInfo& from);

  inline GmailInfo& operator=(const GmailInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GmailInfo& default_instance();

  static inline const GmailInfo* internal_default_instance() {
    return reinterpret_cast<const GmailInfo*>(
               &_GmailInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    30;

  void Swap(GmailInfo* other);

  // implements Message ----------------------------------------------

  inline GmailInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  GmailInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GmailInfo& from);
  void MergeFrom(const GmailInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GmailInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string GmailAcct = 1;
  bool has_gmailacct() const;
  void clear_gmailacct();
  static const int kGmailAcctFieldNumber = 1;
  const ::std::string& gmailacct() const;
  void set_gmailacct(const ::std::string& value);
  #if LANG_CXX11
  void set_gmailacct(::std::string&& value);
  #endif
  void set_gmailacct(const char* value);
  void set_gmailacct(const char* value, size_t size);
  ::std::string* mutable_gmailacct();
  ::std::string* release_gmailacct();
  void set_allocated_gmailacct(::std::string* gmailacct);

  // required uint32 GmailSwitch = 2;
  bool has_gmailswitch() const;
  void clear_gmailswitch();
  static const int kGmailSwitchFieldNumber = 2;
  ::google::protobuf::uint32 gmailswitch() const;
  void set_gmailswitch(::google::protobuf::uint32 value);

  // required uint32 GmailErrCode = 3;
  bool has_gmailerrcode() const;
  void clear_gmailerrcode();
  static const int kGmailErrCodeFieldNumber = 3;
  ::google::protobuf::uint32 gmailerrcode() const;
  void set_gmailerrcode(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.GmailInfo)
 private:
  void set_has_gmailacct();
  void clear_has_gmailacct();
  void set_has_gmailswitch();
  void clear_has_gmailswitch();
  void set_has_gmailerrcode();
  void clear_has_gmailerrcode();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr gmailacct_;
  ::google::protobuf::uint32 gmailswitch_;
  ::google::protobuf::uint32 gmailerrcode_;
  friend struct protobuf_mmbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GmailList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.GmailList) */ {
 public:
  GmailList();
  virtual ~GmailList();

  GmailList(const GmailList& from);

  inline GmailList& operator=(const GmailList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GmailList& default_instance();

  static inline const GmailList* internal_default_instance() {
    return reinterpret_cast<const GmailList*>(
               &_GmailList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    31;

  void Swap(GmailList* other);

  // implements Message ----------------------------------------------

  inline GmailList* New() const PROTOBUF_FINAL { return New(NULL); }

  GmailList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GmailList& from);
  void MergeFrom(const GmailList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GmailList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.GmailInfo List = 2;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 2;
  const ::micromsg::GmailInfo& list(int index) const;
  ::micromsg::GmailInfo* mutable_list(int index);
  ::micromsg::GmailInfo* add_list();
  ::google::protobuf::RepeatedPtrField< ::micromsg::GmailInfo >*
      mutable_list();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::GmailInfo >&
      list() const;

  // required uint32 Count = 1;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 1;
  ::google::protobuf::uint32 count() const;
  void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.GmailList)
 private:
  void set_has_count();
  void clear_has_count();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::GmailInfo > list_;
  ::google::protobuf::uint32 count_;
  friend struct protobuf_mmbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LinkedinContactItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.LinkedinContactItem) */ {
 public:
  LinkedinContactItem();
  virtual ~LinkedinContactItem();

  LinkedinContactItem(const LinkedinContactItem& from);

  inline LinkedinContactItem& operator=(const LinkedinContactItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkedinContactItem& default_instance();

  static inline const LinkedinContactItem* internal_default_instance() {
    return reinterpret_cast<const LinkedinContactItem*>(
               &_LinkedinContactItem_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    32;

  void Swap(LinkedinContactItem* other);

  // implements Message ----------------------------------------------

  inline LinkedinContactItem* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkedinContactItem* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkedinContactItem& from);
  void MergeFrom(const LinkedinContactItem& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkedinContactItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string LinkedinName = 1;
  bool has_linkedinname() const;
  void clear_linkedinname();
  static const int kLinkedinNameFieldNumber = 1;
  const ::std::string& linkedinname() const;
  void set_linkedinname(const ::std::string& value);
  #if LANG_CXX11
  void set_linkedinname(::std::string&& value);
  #endif
  void set_linkedinname(const char* value);
  void set_linkedinname(const char* value, size_t size);
  ::std::string* mutable_linkedinname();
  ::std::string* release_linkedinname();
  void set_allocated_linkedinname(::std::string* linkedinname);

  // optional string LinkedinMemberID = 2;
  bool has_linkedinmemberid() const;
  void clear_linkedinmemberid();
  static const int kLinkedinMemberIDFieldNumber = 2;
  const ::std::string& linkedinmemberid() const;
  void set_linkedinmemberid(const ::std::string& value);
  #if LANG_CXX11
  void set_linkedinmemberid(::std::string&& value);
  #endif
  void set_linkedinmemberid(const char* value);
  void set_linkedinmemberid(const char* value, size_t size);
  ::std::string* mutable_linkedinmemberid();
  ::std::string* release_linkedinmemberid();
  void set_allocated_linkedinmemberid(::std::string* linkedinmemberid);

  // optional string LinkedinPublicUrl = 3;
  bool has_linkedinpublicurl() const;
  void clear_linkedinpublicurl();
  static const int kLinkedinPublicUrlFieldNumber = 3;
  const ::std::string& linkedinpublicurl() const;
  void set_linkedinpublicurl(const ::std::string& value);
  #if LANG_CXX11
  void set_linkedinpublicurl(::std::string&& value);
  #endif
  void set_linkedinpublicurl(const char* value);
  void set_linkedinpublicurl(const char* value, size_t size);
  ::std::string* mutable_linkedinpublicurl();
  ::std::string* release_linkedinpublicurl();
  void set_allocated_linkedinpublicurl(::std::string* linkedinpublicurl);

  // @@protoc_insertion_point(class_scope:micromsg.LinkedinContactItem)
 private:
  void set_has_linkedinname();
  void clear_has_linkedinname();
  void set_has_linkedinmemberid();
  void clear_has_linkedinmemberid();
  void set_has_linkedinpublicurl();
  void clear_has_linkedinpublicurl();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr linkedinname_;
  ::google::protobuf::internal::ArenaStringPtr linkedinmemberid_;
  ::google::protobuf::internal::ArenaStringPtr linkedinpublicurl_;
  friend struct protobuf_mmbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AdditionalContactList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.AdditionalContactList) */ {
 public:
  AdditionalContactList();
  virtual ~AdditionalContactList();

  AdditionalContactList(const AdditionalContactList& from);

  inline AdditionalContactList& operator=(const AdditionalContactList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AdditionalContactList& default_instance();

  static inline const AdditionalContactList* internal_default_instance() {
    return reinterpret_cast<const AdditionalContactList*>(
               &_AdditionalContactList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    33;

  void Swap(AdditionalContactList* other);

  // implements Message ----------------------------------------------

  inline AdditionalContactList* New() const PROTOBUF_FINAL { return New(NULL); }

  AdditionalContactList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AdditionalContactList& from);
  void MergeFrom(const AdditionalContactList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AdditionalContactList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .micromsg.LinkedinContactItem LinkedinContactItem = 1;
  bool has_linkedincontactitem() const;
  void clear_linkedincontactitem();
  static const int kLinkedinContactItemFieldNumber = 1;
  const ::micromsg::LinkedinContactItem& linkedincontactitem() const;
  ::micromsg::LinkedinContactItem* mutable_linkedincontactitem();
  ::micromsg::LinkedinContactItem* release_linkedincontactitem();
  void set_allocated_linkedincontactitem(::micromsg::LinkedinContactItem* linkedincontactitem);

  // @@protoc_insertion_point(class_scope:micromsg.AdditionalContactList)
 private:
  void set_has_linkedincontactitem();
  void clear_has_linkedincontactitem();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::LinkedinContactItem* linkedincontactitem_;
  friend struct protobuf_mmbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChatRoomMemberInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.ChatRoomMemberInfo) */ {
 public:
  ChatRoomMemberInfo();
  virtual ~ChatRoomMemberInfo();

  ChatRoomMemberInfo(const ChatRoomMemberInfo& from);

  inline ChatRoomMemberInfo& operator=(const ChatRoomMemberInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatRoomMemberInfo& default_instance();

  static inline const ChatRoomMemberInfo* internal_default_instance() {
    return reinterpret_cast<const ChatRoomMemberInfo*>(
               &_ChatRoomMemberInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    34;

  void Swap(ChatRoomMemberInfo* other);

  // implements Message ----------------------------------------------

  inline ChatRoomMemberInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  ChatRoomMemberInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChatRoomMemberInfo& from);
  void MergeFrom(const ChatRoomMemberInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChatRoomMemberInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string UserName = 1;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // optional string NickName = 2;
  bool has_nickname() const;
  void clear_nickname();
  static const int kNickNameFieldNumber = 2;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  #if LANG_CXX11
  void set_nickname(::std::string&& value);
  #endif
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // optional string DisplayName = 3;
  bool has_displayname() const;
  void clear_displayname();
  static const int kDisplayNameFieldNumber = 3;
  const ::std::string& displayname() const;
  void set_displayname(const ::std::string& value);
  #if LANG_CXX11
  void set_displayname(::std::string&& value);
  #endif
  void set_displayname(const char* value);
  void set_displayname(const char* value, size_t size);
  ::std::string* mutable_displayname();
  ::std::string* release_displayname();
  void set_allocated_displayname(::std::string* displayname);

  // optional string BigHeadImgUrl = 4;
  bool has_bigheadimgurl() const;
  void clear_bigheadimgurl();
  static const int kBigHeadImgUrlFieldNumber = 4;
  const ::std::string& bigheadimgurl() const;
  void set_bigheadimgurl(const ::std::string& value);
  #if LANG_CXX11
  void set_bigheadimgurl(::std::string&& value);
  #endif
  void set_bigheadimgurl(const char* value);
  void set_bigheadimgurl(const char* value, size_t size);
  ::std::string* mutable_bigheadimgurl();
  ::std::string* release_bigheadimgurl();
  void set_allocated_bigheadimgurl(::std::string* bigheadimgurl);

  // optional string SmallHeadImgUrl = 5;
  bool has_smallheadimgurl() const;
  void clear_smallheadimgurl();
  static const int kSmallHeadImgUrlFieldNumber = 5;
  const ::std::string& smallheadimgurl() const;
  void set_smallheadimgurl(const ::std::string& value);
  #if LANG_CXX11
  void set_smallheadimgurl(::std::string&& value);
  #endif
  void set_smallheadimgurl(const char* value);
  void set_smallheadimgurl(const char* value, size_t size);
  ::std::string* mutable_smallheadimgurl();
  ::std::string* release_smallheadimgurl();
  void set_allocated_smallheadimgurl(::std::string* smallheadimgurl);

  // required uint32 ChatroomMemberFlag = 6;
  bool has_chatroommemberflag() const;
  void clear_chatroommemberflag();
  static const int kChatroomMemberFlagFieldNumber = 6;
  ::google::protobuf::uint32 chatroommemberflag() const;
  void set_chatroommemberflag(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.ChatRoomMemberInfo)
 private:
  void set_has_username();
  void clear_has_username();
  void set_has_nickname();
  void clear_has_nickname();
  void set_has_displayname();
  void clear_has_displayname();
  void set_has_bigheadimgurl();
  void clear_has_bigheadimgurl();
  void set_has_smallheadimgurl();
  void clear_has_smallheadimgurl();
  void set_has_chatroommemberflag();
  void clear_has_chatroommemberflag();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::internal::ArenaStringPtr displayname_;
  ::google::protobuf::internal::ArenaStringPtr bigheadimgurl_;
  ::google::protobuf::internal::ArenaStringPtr smallheadimgurl_;
  ::google::protobuf::uint32 chatroommemberflag_;
  friend struct protobuf_mmbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChatRoomMemberData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.ChatRoomMemberData) */ {
 public:
  ChatRoomMemberData();
  virtual ~ChatRoomMemberData();

  ChatRoomMemberData(const ChatRoomMemberData& from);

  inline ChatRoomMemberData& operator=(const ChatRoomMemberData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatRoomMemberData& default_instance();

  static inline const ChatRoomMemberData* internal_default_instance() {
    return reinterpret_cast<const ChatRoomMemberData*>(
               &_ChatRoomMemberData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    35;

  void Swap(ChatRoomMemberData* other);

  // implements Message ----------------------------------------------

  inline ChatRoomMemberData* New() const PROTOBUF_FINAL { return New(NULL); }

  ChatRoomMemberData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChatRoomMemberData& from);
  void MergeFrom(const ChatRoomMemberData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChatRoomMemberData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.ChatRoomMemberInfo ChatRoomMember = 2;
  int chatroommember_size() const;
  void clear_chatroommember();
  static const int kChatRoomMemberFieldNumber = 2;
  const ::micromsg::ChatRoomMemberInfo& chatroommember(int index) const;
  ::micromsg::ChatRoomMemberInfo* mutable_chatroommember(int index);
  ::micromsg::ChatRoomMemberInfo* add_chatroommember();
  ::google::protobuf::RepeatedPtrField< ::micromsg::ChatRoomMemberInfo >*
      mutable_chatroommember();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::ChatRoomMemberInfo >&
      chatroommember() const;

  // required uint32 MemberCount = 1;
  bool has_membercount() const;
  void clear_membercount();
  static const int kMemberCountFieldNumber = 1;
  ::google::protobuf::uint32 membercount() const;
  void set_membercount(::google::protobuf::uint32 value);

  // optional uint32 InfoMask = 3;
  bool has_infomask() const;
  void clear_infomask();
  static const int kInfoMaskFieldNumber = 3;
  ::google::protobuf::uint32 infomask() const;
  void set_infomask(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.ChatRoomMemberData)
 private:
  void set_has_membercount();
  void clear_has_membercount();
  void set_has_infomask();
  void clear_has_infomask();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::ChatRoomMemberInfo > chatroommember_;
  ::google::protobuf::uint32 membercount_;
  ::google::protobuf::uint32 infomask_;
  friend struct protobuf_mmbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PatternLockInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.PatternLockInfo) */ {
 public:
  PatternLockInfo();
  virtual ~PatternLockInfo();

  PatternLockInfo(const PatternLockInfo& from);

  inline PatternLockInfo& operator=(const PatternLockInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PatternLockInfo& default_instance();

  static inline const PatternLockInfo* internal_default_instance() {
    return reinterpret_cast<const PatternLockInfo*>(
               &_PatternLockInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    36;

  void Swap(PatternLockInfo* other);

  // implements Message ----------------------------------------------

  inline PatternLockInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  PatternLockInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PatternLockInfo& from);
  void MergeFrom(const PatternLockInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PatternLockInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .micromsg.SKBuiltinBuffer_t Sign = 2;
  bool has_sign() const;
  void clear_sign();
  static const int kSignFieldNumber = 2;
  const ::micromsg::SKBuiltinBuffer_t& sign() const;
  ::micromsg::SKBuiltinBuffer_t* mutable_sign();
  ::micromsg::SKBuiltinBuffer_t* release_sign();
  void set_allocated_sign(::micromsg::SKBuiltinBuffer_t* sign);

  // optional uint32 PatternVersion = 1;
  bool has_patternversion() const;
  void clear_patternversion();
  static const int kPatternVersionFieldNumber = 1;
  ::google::protobuf::uint32 patternversion() const;
  void set_patternversion(::google::protobuf::uint32 value);

  // optional uint32 LockStatus = 3;
  bool has_lockstatus() const;
  void clear_lockstatus();
  static const int kLockStatusFieldNumber = 3;
  ::google::protobuf::uint32 lockstatus() const;
  void set_lockstatus(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.PatternLockInfo)
 private:
  void set_has_patternversion();
  void clear_has_patternversion();
  void set_has_sign();
  void clear_has_sign();
  void set_has_lockstatus();
  void clear_has_lockstatus();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::micromsg::SKBuiltinBuffer_t* sign_;
  ::google::protobuf::uint32 patternversion_;
  ::google::protobuf::uint32 lockstatus_;
  friend struct protobuf_mmbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ModUserInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.ModUserInfo) */ {
 public:
  ModUserInfo();
  virtual ~ModUserInfo();

  ModUserInfo(const ModUserInfo& from);

  inline ModUserInfo& operator=(const ModUserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModUserInfo& default_instance();

  static inline const ModUserInfo* internal_default_instance() {
    return reinterpret_cast<const ModUserInfo*>(
               &_ModUserInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    37;

  void Swap(ModUserInfo* other);

  // implements Message ----------------------------------------------

  inline ModUserInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  ModUserInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ModUserInfo& from);
  void MergeFrom(const ModUserInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ModUserInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes ImgBuf = 9;
  bool has_imgbuf() const;
  void clear_imgbuf();
  static const int kImgBufFieldNumber = 9;
  const ::std::string& imgbuf() const;
  void set_imgbuf(const ::std::string& value);
  #if LANG_CXX11
  void set_imgbuf(::std::string&& value);
  #endif
  void set_imgbuf(const char* value);
  void set_imgbuf(const void* value, size_t size);
  ::std::string* mutable_imgbuf();
  ::std::string* release_imgbuf();
  void set_allocated_imgbuf(::std::string* imgbuf);

  // optional string Province = 11;
  bool has_province() const;
  void clear_province();
  static const int kProvinceFieldNumber = 11;
  const ::std::string& province() const;
  void set_province(const ::std::string& value);
  #if LANG_CXX11
  void set_province(::std::string&& value);
  #endif
  void set_province(const char* value);
  void set_province(const char* value, size_t size);
  ::std::string* mutable_province();
  ::std::string* release_province();
  void set_allocated_province(::std::string* province);

  // optional string City = 12;
  bool has_city() const;
  void clear_city();
  static const int kCityFieldNumber = 12;
  const ::std::string& city() const;
  void set_city(const ::std::string& value);
  #if LANG_CXX11
  void set_city(::std::string&& value);
  #endif
  void set_city(const char* value);
  void set_city(const char* value, size_t size);
  ::std::string* mutable_city();
  ::std::string* release_city();
  void set_allocated_city(::std::string* city);

  // optional string Signature = 13;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 13;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_signature(::std::string&& value);
  #endif
  void set_signature(const char* value);
  void set_signature(const char* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // optional string VerifyInfo = 18;
  bool has_verifyinfo() const;
  void clear_verifyinfo();
  static const int kVerifyInfoFieldNumber = 18;
  const ::std::string& verifyinfo() const;
  void set_verifyinfo(const ::std::string& value);
  #if LANG_CXX11
  void set_verifyinfo(::std::string&& value);
  #endif
  void set_verifyinfo(const char* value);
  void set_verifyinfo(const char* value, size_t size);
  ::std::string* mutable_verifyinfo();
  ::std::string* release_verifyinfo();
  void set_allocated_verifyinfo(::std::string* verifyinfo);

  // optional string Weibo = 24;
  bool has_weibo() const;
  void clear_weibo();
  static const int kWeiboFieldNumber = 24;
  const ::std::string& weibo() const;
  void set_weibo(const ::std::string& value);
  #if LANG_CXX11
  void set_weibo(::std::string&& value);
  #endif
  void set_weibo(const char* value);
  void set_weibo(const char* value, size_t size);
  ::std::string* mutable_weibo();
  ::std::string* release_weibo();
  void set_allocated_weibo(::std::string* weibo);

  // optional string Alias = 27;
  bool has_alias() const;
  void clear_alias();
  static const int kAliasFieldNumber = 27;
  const ::std::string& alias() const;
  void set_alias(const ::std::string& value);
  #if LANG_CXX11
  void set_alias(::std::string&& value);
  #endif
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  ::std::string* mutable_alias();
  ::std::string* release_alias();
  void set_allocated_alias(::std::string* alias);

  // optional string WeiboNickname = 28;
  bool has_weibonickname() const;
  void clear_weibonickname();
  static const int kWeiboNicknameFieldNumber = 28;
  const ::std::string& weibonickname() const;
  void set_weibonickname(const ::std::string& value);
  #if LANG_CXX11
  void set_weibonickname(::std::string&& value);
  #endif
  void set_weibonickname(const char* value);
  void set_weibonickname(const char* value, size_t size);
  ::std::string* mutable_weibonickname();
  ::std::string* release_weibonickname();
  void set_allocated_weibonickname(::std::string* weibonickname);

  // optional string FBUserName = 32;
  bool has_fbusername() const;
  void clear_fbusername();
  static const int kFBUserNameFieldNumber = 32;
  const ::std::string& fbusername() const;
  void set_fbusername(const ::std::string& value);
  #if LANG_CXX11
  void set_fbusername(::std::string&& value);
  #endif
  void set_fbusername(const char* value);
  void set_fbusername(const char* value, size_t size);
  ::std::string* mutable_fbusername();
  ::std::string* release_fbusername();
  void set_allocated_fbusername(::std::string* fbusername);

  // optional string AlbumBGImgID = 35;
  bool has_albumbgimgid() const;
  void clear_albumbgimgid();
  static const int kAlbumBGImgIDFieldNumber = 35;
  const ::std::string& albumbgimgid() const;
  void set_albumbgimgid(const ::std::string& value);
  #if LANG_CXX11
  void set_albumbgimgid(::std::string&& value);
  #endif
  void set_albumbgimgid(const char* value);
  void set_albumbgimgid(const char* value, size_t size);
  ::std::string* mutable_albumbgimgid();
  ::std::string* release_albumbgimgid();
  void set_allocated_albumbgimgid(::std::string* albumbgimgid);

  // optional string FBToken = 37;
  bool has_fbtoken() const;
  void clear_fbtoken();
  static const int kFBTokenFieldNumber = 37;
  const ::std::string& fbtoken() const;
  void set_fbtoken(const ::std::string& value);
  #if LANG_CXX11
  void set_fbtoken(::std::string&& value);
  #endif
  void set_fbtoken(const char* value);
  void set_fbtoken(const char* value, size_t size);
  ::std::string* mutable_fbtoken();
  ::std::string* release_fbtoken();
  void set_allocated_fbtoken(::std::string* fbtoken);

  // optional string Country = 38;
  bool has_country() const;
  void clear_country();
  static const int kCountryFieldNumber = 38;
  const ::std::string& country() const;
  void set_country(const ::std::string& value);
  #if LANG_CXX11
  void set_country(::std::string&& value);
  #endif
  void set_country(const char* value);
  void set_country(const char* value, size_t size);
  ::std::string* mutable_country();
  ::std::string* release_country();
  void set_allocated_country(::std::string* country);

  // required .micromsg.SKBuiltinString_t UserName = 2;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 2;
  const ::micromsg::SKBuiltinString_t& username() const;
  ::micromsg::SKBuiltinString_t* mutable_username();
  ::micromsg::SKBuiltinString_t* release_username();
  void set_allocated_username(::micromsg::SKBuiltinString_t* username);

  // required .micromsg.SKBuiltinString_t NickName = 3;
  bool has_nickname() const;
  void clear_nickname();
  static const int kNickNameFieldNumber = 3;
  const ::micromsg::SKBuiltinString_t& nickname() const;
  ::micromsg::SKBuiltinString_t* mutable_nickname();
  ::micromsg::SKBuiltinString_t* release_nickname();
  void set_allocated_nickname(::micromsg::SKBuiltinString_t* nickname);

  // required .micromsg.SKBuiltinString_t BindEmail = 5;
  bool has_bindemail() const;
  void clear_bindemail();
  static const int kBindEmailFieldNumber = 5;
  const ::micromsg::SKBuiltinString_t& bindemail() const;
  ::micromsg::SKBuiltinString_t* mutable_bindemail();
  ::micromsg::SKBuiltinString_t* release_bindemail();
  void set_allocated_bindemail(::micromsg::SKBuiltinString_t* bindemail);

  // required .micromsg.SKBuiltinString_t BindMobile = 6;
  bool has_bindmobile() const;
  void clear_bindmobile();
  static const int kBindMobileFieldNumber = 6;
  const ::micromsg::SKBuiltinString_t& bindmobile() const;
  ::micromsg::SKBuiltinString_t* mutable_bindmobile();
  ::micromsg::SKBuiltinString_t* release_bindmobile();
  void set_allocated_bindmobile(::micromsg::SKBuiltinString_t* bindmobile);

  // optional .micromsg.DisturbSetting DisturbSetting = 15;
  bool has_disturbsetting() const;
  void clear_disturbsetting();
  static const int kDisturbSettingFieldNumber = 15;
  const ::micromsg::DisturbSetting& disturbsetting() const;
  ::micromsg::DisturbSetting* mutable_disturbsetting();
  ::micromsg::DisturbSetting* release_disturbsetting();
  void set_allocated_disturbsetting(::micromsg::DisturbSetting* disturbsetting);

  // optional .micromsg.GmailList GmailList = 26;
  bool has_gmaillist() const;
  void clear_gmaillist();
  static const int kGmailListFieldNumber = 26;
  const ::micromsg::GmailList& gmaillist() const;
  ::micromsg::GmailList* mutable_gmaillist();
  ::micromsg::GmailList* release_gmaillist();
  void set_allocated_gmaillist(::micromsg::GmailList* gmaillist);

  // required uint32 BitFlag = 1;
  bool has_bitflag() const;
  void clear_bitflag();
  static const int kBitFlagFieldNumber = 1;
  ::google::protobuf::uint32 bitflag() const;
  void set_bitflag(::google::protobuf::uint32 value);

  // required uint32 BindUin = 4;
  bool has_binduin() const;
  void clear_binduin();
  static const int kBindUinFieldNumber = 4;
  ::google::protobuf::uint32 binduin() const;
  void set_binduin(::google::protobuf::uint32 value);

  // required uint32 Status = 7;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 7;
  ::google::protobuf::uint32 status() const;
  void set_status(::google::protobuf::uint32 value);

  // required uint32 ImgLen = 8;
  bool has_imglen() const;
  void clear_imglen();
  static const int kImgLenFieldNumber = 8;
  ::google::protobuf::uint32 imglen() const;
  void set_imglen(::google::protobuf::uint32 value);

  // optional int32 Sex = 10;
  bool has_sex() const;
  void clear_sex();
  static const int kSexFieldNumber = 10;
  ::google::protobuf::int32 sex() const;
  void set_sex(::google::protobuf::int32 value);

  // optional uint32 PersonalCard = 14;
  bool has_personalcard() const;
  void clear_personalcard();
  static const int kPersonalCardFieldNumber = 14;
  ::google::protobuf::uint32 personalcard() const;
  void set_personalcard(::google::protobuf::uint32 value);

  // optional uint32 PluginFlag = 16;
  bool has_pluginflag() const;
  void clear_pluginflag();
  static const int kPluginFlagFieldNumber = 16;
  ::google::protobuf::uint32 pluginflag() const;
  void set_pluginflag(::google::protobuf::uint32 value);

  // optional uint32 VerifyFlag = 17;
  bool has_verifyflag() const;
  void clear_verifyflag();
  static const int kVerifyFlagFieldNumber = 17;
  ::google::protobuf::uint32 verifyflag() const;
  void set_verifyflag(::google::protobuf::uint32 value);

  // optional int32 Point = 19;
  bool has_point() const;
  void clear_point();
  static const int kPointFieldNumber = 19;
  ::google::protobuf::int32 point() const;
  void set_point(::google::protobuf::int32 value);

  // optional int32 Experience = 20;
  bool has_experience() const;
  void clear_experience();
  static const int kExperienceFieldNumber = 20;
  ::google::protobuf::int32 experience() const;
  void set_experience(::google::protobuf::int32 value);

  // optional int32 Level = 21;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 21;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // optional int32 LevelLowExp = 22;
  bool has_levellowexp() const;
  void clear_levellowexp();
  static const int kLevelLowExpFieldNumber = 22;
  ::google::protobuf::int32 levellowexp() const;
  void set_levellowexp(::google::protobuf::int32 value);

  // optional int32 LevelHighExp = 23;
  bool has_levelhighexp() const;
  void clear_levelhighexp();
  static const int kLevelHighExpFieldNumber = 23;
  ::google::protobuf::int32 levelhighexp() const;
  void set_levelhighexp(::google::protobuf::int32 value);

  // optional uint32 PluginSwitch = 25;
  bool has_pluginswitch() const;
  void clear_pluginswitch();
  static const int kPluginSwitchFieldNumber = 25;
  ::google::protobuf::uint32 pluginswitch() const;
  void set_pluginswitch(::google::protobuf::uint32 value);

  // optional uint32 WeiboFlag = 29;
  bool has_weiboflag() const;
  void clear_weiboflag();
  static const int kWeiboFlagFieldNumber = 29;
  ::google::protobuf::uint32 weiboflag() const;
  void set_weiboflag(::google::protobuf::uint32 value);

  // optional uint32 FaceBookFlag = 30;
  bool has_facebookflag() const;
  void clear_facebookflag();
  static const int kFaceBookFlagFieldNumber = 30;
  ::google::protobuf::uint32 facebookflag() const;
  void set_facebookflag(::google::protobuf::uint32 value);

  // optional uint64 FBUserID = 31;
  bool has_fbuserid() const;
  void clear_fbuserid();
  static const int kFBUserIDFieldNumber = 31;
  ::google::protobuf::uint64 fbuserid() const;
  void set_fbuserid(::google::protobuf::uint64 value);

  // optional int32 AlbumStyle = 33;
  bool has_albumstyle() const;
  void clear_albumstyle();
  static const int kAlbumStyleFieldNumber = 33;
  ::google::protobuf::int32 albumstyle() const;
  void set_albumstyle(::google::protobuf::int32 value);

  // optional int32 AlbumFlag = 34;
  bool has_albumflag() const;
  void clear_albumflag();
  static const int kAlbumFlagFieldNumber = 34;
  ::google::protobuf::int32 albumflag() const;
  void set_albumflag(::google::protobuf::int32 value);

  // optional uint32 TXNewsCategory = 36;
  bool has_txnewscategory() const;
  void clear_txnewscategory();
  static const int kTXNewsCategoryFieldNumber = 36;
  ::google::protobuf::uint32 txnewscategory() const;
  void set_txnewscategory(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.ModUserInfo)
 private:
  void set_has_bitflag();
  void clear_has_bitflag();
  void set_has_username();
  void clear_has_username();
  void set_has_nickname();
  void clear_has_nickname();
  void set_has_binduin();
  void clear_has_binduin();
  void set_has_bindemail();
  void clear_has_bindemail();
  void set_has_bindmobile();
  void clear_has_bindmobile();
  void set_has_status();
  void clear_has_status();
  void set_has_imglen();
  void clear_has_imglen();
  void set_has_imgbuf();
  void clear_has_imgbuf();
  void set_has_sex();
  void clear_has_sex();
  void set_has_province();
  void clear_has_province();
  void set_has_city();
  void clear_has_city();
  void set_has_signature();
  void clear_has_signature();
  void set_has_personalcard();
  void clear_has_personalcard();
  void set_has_disturbsetting();
  void clear_has_disturbsetting();
  void set_has_pluginflag();
  void clear_has_pluginflag();
  void set_has_verifyflag();
  void clear_has_verifyflag();
  void set_has_verifyinfo();
  void clear_has_verifyinfo();
  void set_has_point();
  void clear_has_point();
  void set_has_experience();
  void clear_has_experience();
  void set_has_level();
  void clear_has_level();
  void set_has_levellowexp();
  void clear_has_levellowexp();
  void set_has_levelhighexp();
  void clear_has_levelhighexp();
  void set_has_weibo();
  void clear_has_weibo();
  void set_has_pluginswitch();
  void clear_has_pluginswitch();
  void set_has_gmaillist();
  void clear_has_gmaillist();
  void set_has_alias();
  void clear_has_alias();
  void set_has_weibonickname();
  void clear_has_weibonickname();
  void set_has_weiboflag();
  void clear_has_weiboflag();
  void set_has_facebookflag();
  void clear_has_facebookflag();
  void set_has_fbuserid();
  void clear_has_fbuserid();
  void set_has_fbusername();
  void clear_has_fbusername();
  void set_has_albumstyle();
  void clear_has_albumstyle();
  void set_has_albumflag();
  void clear_has_albumflag();
  void set_has_albumbgimgid();
  void clear_has_albumbgimgid();
  void set_has_txnewscategory();
  void clear_has_txnewscategory();
  void set_has_fbtoken();
  void clear_has_fbtoken();
  void set_has_country();
  void clear_has_country();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<2> _has_bits_;
  ::google::protobuf::internal::ArenaStringPtr imgbuf_;
  ::google::protobuf::internal::ArenaStringPtr province_;
  ::google::protobuf::internal::ArenaStringPtr city_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  ::google::protobuf::internal::ArenaStringPtr verifyinfo_;
  ::google::protobuf::internal::ArenaStringPtr weibo_;
  ::google::protobuf::internal::ArenaStringPtr alias_;
  ::google::protobuf::internal::ArenaStringPtr weibonickname_;
  ::google::protobuf::internal::ArenaStringPtr fbusername_;
  ::google::protobuf::internal::ArenaStringPtr albumbgimgid_;
  ::google::protobuf::internal::ArenaStringPtr fbtoken_;
  ::google::protobuf::internal::ArenaStringPtr country_;
  ::micromsg::SKBuiltinString_t* username_;
  ::micromsg::SKBuiltinString_t* nickname_;
  ::micromsg::SKBuiltinString_t* bindemail_;
  ::micromsg::SKBuiltinString_t* bindmobile_;
  ::micromsg::DisturbSetting* disturbsetting_;
  ::micromsg::GmailList* gmaillist_;
  ::google::protobuf::uint32 bitflag_;
  ::google::protobuf::uint32 binduin_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::uint32 imglen_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::uint32 personalcard_;
  ::google::protobuf::uint32 pluginflag_;
  ::google::protobuf::uint32 verifyflag_;
  ::google::protobuf::int32 point_;
  ::google::protobuf::int32 experience_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 levellowexp_;
  ::google::protobuf::int32 levelhighexp_;
  ::google::protobuf::uint32 pluginswitch_;
  ::google::protobuf::uint32 weiboflag_;
  ::google::protobuf::uint32 facebookflag_;
  ::google::protobuf::uint64 fbuserid_;
  ::google::protobuf::int32 albumstyle_;
  ::google::protobuf::int32 albumflag_;
  ::google::protobuf::uint32 txnewscategory_;
  mutable int _cached_size_;
  friend struct protobuf_mmbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserInfoExt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.UserInfoExt) */ {
 public:
  UserInfoExt();
  virtual ~UserInfoExt();

  UserInfoExt(const UserInfoExt& from);

  inline UserInfoExt& operator=(const UserInfoExt& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserInfoExt& default_instance();

  static inline const UserInfoExt* internal_default_instance() {
    return reinterpret_cast<const UserInfoExt*>(
               &_UserInfoExt_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    38;

  void Swap(UserInfoExt* other);

  // implements Message ----------------------------------------------

  inline UserInfoExt* New() const PROTOBUF_FINAL { return New(NULL); }

  UserInfoExt* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserInfoExt& from);
  void MergeFrom(const UserInfoExt& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserInfoExt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string MyBrandList = 2;
  bool has_mybrandlist() const;
  void clear_mybrandlist();
  static const int kMyBrandListFieldNumber = 2;
  const ::std::string& mybrandlist() const;
  void set_mybrandlist(const ::std::string& value);
  #if LANG_CXX11
  void set_mybrandlist(::std::string&& value);
  #endif
  void set_mybrandlist(const char* value);
  void set_mybrandlist(const char* value, size_t size);
  ::std::string* mutable_mybrandlist();
  ::std::string* release_mybrandlist();
  void set_allocated_mybrandlist(::std::string* mybrandlist);

  // optional string MsgPushSound = 3;
  bool has_msgpushsound() const;
  void clear_msgpushsound();
  static const int kMsgPushSoundFieldNumber = 3;
  const ::std::string& msgpushsound() const;
  void set_msgpushsound(const ::std::string& value);
  #if LANG_CXX11
  void set_msgpushsound(::std::string&& value);
  #endif
  void set_msgpushsound(const char* value);
  void set_msgpushsound(const char* value, size_t size);
  ::std::string* mutable_msgpushsound();
  ::std::string* release_msgpushsound();
  void set_allocated_msgpushsound(::std::string* msgpushsound);

  // optional string VoipPushSound = 4;
  bool has_voippushsound() const;
  void clear_voippushsound();
  static const int kVoipPushSoundFieldNumber = 4;
  const ::std::string& voippushsound() const;
  void set_voippushsound(const ::std::string& value);
  #if LANG_CXX11
  void set_voippushsound(::std::string&& value);
  #endif
  void set_voippushsound(const char* value);
  void set_voippushsound(const char* value, size_t size);
  ::std::string* mutable_voippushsound();
  ::std::string* release_voippushsound();
  void set_allocated_voippushsound(::std::string* voippushsound);

  // optional string SafeMobile = 8;
  bool has_safemobile() const;
  void clear_safemobile();
  static const int kSafeMobileFieldNumber = 8;
  const ::std::string& safemobile() const;
  void set_safemobile(const ::std::string& value);
  #if LANG_CXX11
  void set_safemobile(::std::string&& value);
  #endif
  void set_safemobile(const char* value);
  void set_safemobile(const char* value, size_t size);
  ::std::string* mutable_safemobile();
  ::std::string* release_safemobile();
  void set_allocated_safemobile(::std::string* safemobile);

  // optional string BigHeadImgUrl = 9;
  bool has_bigheadimgurl() const;
  void clear_bigheadimgurl();
  static const int kBigHeadImgUrlFieldNumber = 9;
  const ::std::string& bigheadimgurl() const;
  void set_bigheadimgurl(const ::std::string& value);
  #if LANG_CXX11
  void set_bigheadimgurl(::std::string&& value);
  #endif
  void set_bigheadimgurl(const char* value);
  void set_bigheadimgurl(const char* value, size_t size);
  ::std::string* mutable_bigheadimgurl();
  ::std::string* release_bigheadimgurl();
  void set_allocated_bigheadimgurl(::std::string* bigheadimgurl);

  // optional string SmallHeadImgUrl = 10;
  bool has_smallheadimgurl() const;
  void clear_smallheadimgurl();
  static const int kSmallHeadImgUrlFieldNumber = 10;
  const ::std::string& smallheadimgurl() const;
  void set_smallheadimgurl(const ::std::string& value);
  #if LANG_CXX11
  void set_smallheadimgurl(::std::string&& value);
  #endif
  void set_smallheadimgurl(const char* value);
  void set_smallheadimgurl(const char* value, size_t size);
  ::std::string* mutable_smallheadimgurl();
  ::std::string* release_smallheadimgurl();
  void set_allocated_smallheadimgurl(::std::string* smallheadimgurl);

  // optional string GoogleContactName = 16;
  bool has_googlecontactname() const;
  void clear_googlecontactname();
  static const int kGoogleContactNameFieldNumber = 16;
  const ::std::string& googlecontactname() const;
  void set_googlecontactname(const ::std::string& value);
  #if LANG_CXX11
  void set_googlecontactname(::std::string&& value);
  #endif
  void set_googlecontactname(const char* value);
  void set_googlecontactname(const char* value, size_t size);
  ::std::string* mutable_googlecontactname();
  ::std::string* release_googlecontactname();
  void set_allocated_googlecontactname(::std::string* googlecontactname);

  // optional string IDCardNum = 17;
  bool has_idcardnum() const;
  void clear_idcardnum();
  static const int kIDCardNumFieldNumber = 17;
  const ::std::string& idcardnum() const;
  void set_idcardnum(const ::std::string& value);
  #if LANG_CXX11
  void set_idcardnum(::std::string&& value);
  #endif
  void set_idcardnum(const char* value);
  void set_idcardnum(const char* value, size_t size);
  ::std::string* mutable_idcardnum();
  ::std::string* release_idcardnum();
  void set_allocated_idcardnum(::std::string* idcardnum);

  // optional string RealName = 18;
  bool has_realname() const;
  void clear_realname();
  static const int kRealNameFieldNumber = 18;
  const ::std::string& realname() const;
  void set_realname(const ::std::string& value);
  #if LANG_CXX11
  void set_realname(::std::string&& value);
  #endif
  void set_realname(const char* value);
  void set_realname(const char* value, size_t size);
  ::std::string* mutable_realname();
  ::std::string* release_realname();
  void set_allocated_realname(::std::string* realname);

  // optional string RegCountry = 19;
  bool has_regcountry() const;
  void clear_regcountry();
  static const int kRegCountryFieldNumber = 19;
  const ::std::string& regcountry() const;
  void set_regcountry(const ::std::string& value);
  #if LANG_CXX11
  void set_regcountry(::std::string&& value);
  #endif
  void set_regcountry(const char* value);
  void set_regcountry(const char* value, size_t size);
  ::std::string* mutable_regcountry();
  ::std::string* release_regcountry();
  void set_allocated_regcountry(::std::string* regcountry);

  // optional string BBPPID = 20;
  bool has_bbppid() const;
  void clear_bbppid();
  static const int kBBPPIDFieldNumber = 20;
  const ::std::string& bbppid() const;
  void set_bbppid(const ::std::string& value);
  #if LANG_CXX11
  void set_bbppid(::std::string&& value);
  #endif
  void set_bbppid(const char* value);
  void set_bbppid(const char* value, size_t size);
  ::std::string* mutable_bbppid();
  ::std::string* release_bbppid();
  void set_allocated_bbppid(::std::string* bbppid);

  // optional string BBPIN = 21;
  bool has_bbpin() const;
  void clear_bbpin();
  static const int kBBPINFieldNumber = 21;
  const ::std::string& bbpin() const;
  void set_bbpin(const ::std::string& value);
  #if LANG_CXX11
  void set_bbpin(::std::string&& value);
  #endif
  void set_bbpin(const char* value);
  void set_bbpin(const char* value, size_t size);
  ::std::string* mutable_bbpin();
  ::std::string* release_bbpin();
  void set_allocated_bbpin(::std::string* bbpin);

  // optional string BBMNickName = 22;
  bool has_bbmnickname() const;
  void clear_bbmnickname();
  static const int kBBMNickNameFieldNumber = 22;
  const ::std::string& bbmnickname() const;
  void set_bbmnickname(const ::std::string& value);
  #if LANG_CXX11
  void set_bbmnickname(::std::string&& value);
  #endif
  void set_bbmnickname(const char* value);
  void set_bbmnickname(const char* value, size_t size);
  ::std::string* mutable_bbmnickname();
  ::std::string* release_bbmnickname();
  void set_allocated_bbmnickname(::std::string* bbmnickname);

  // optional string KFInfo = 24;
  bool has_kfinfo() const;
  void clear_kfinfo();
  static const int kKFInfoFieldNumber = 24;
  const ::std::string& kfinfo() const;
  void set_kfinfo(const ::std::string& value);
  #if LANG_CXX11
  void set_kfinfo(::std::string&& value);
  #endif
  void set_kfinfo(const char* value);
  void set_kfinfo(const char* value, size_t size);
  ::std::string* mutable_kfinfo();
  ::std::string* release_kfinfo();
  void set_allocated_kfinfo(::std::string* kfinfo);

  // optional string SecurityDeviceId = 26;
  bool has_securitydeviceid() const;
  void clear_securitydeviceid();
  static const int kSecurityDeviceIdFieldNumber = 26;
  const ::std::string& securitydeviceid() const;
  void set_securitydeviceid(const ::std::string& value);
  #if LANG_CXX11
  void set_securitydeviceid(::std::string&& value);
  #endif
  void set_securitydeviceid(const char* value);
  void set_securitydeviceid(const char* value, size_t size);
  ::std::string* mutable_securitydeviceid();
  ::std::string* release_securitydeviceid();
  void set_allocated_securitydeviceid(::std::string* securitydeviceid);

  // required .micromsg.SnsUserInfo SnsUserInfo = 1;
  bool has_snsuserinfo() const;
  void clear_snsuserinfo();
  static const int kSnsUserInfoFieldNumber = 1;
  const ::micromsg::SnsUserInfo& snsuserinfo() const;
  ::micromsg::SnsUserInfo* mutable_snsuserinfo();
  ::micromsg::SnsUserInfo* release_snsuserinfo();
  void set_allocated_snsuserinfo(::micromsg::SnsUserInfo* snsuserinfo);

  // optional .micromsg.SKBuiltinString_t ExtXml = 12;
  bool has_extxml() const;
  void clear_extxml();
  static const int kExtXmlFieldNumber = 12;
  const ::micromsg::SKBuiltinString_t& extxml() const;
  ::micromsg::SKBuiltinString_t* mutable_extxml();
  ::micromsg::SKBuiltinString_t* release_extxml();
  void set_allocated_extxml(::micromsg::SKBuiltinString_t* extxml);

  // optional .micromsg.SafeDeviceList SafeDeviceList = 13;
  bool has_safedevicelist() const;
  void clear_safedevicelist();
  static const int kSafeDeviceListFieldNumber = 13;
  const ::micromsg::SafeDeviceList& safedevicelist() const;
  ::micromsg::SafeDeviceList* mutable_safedevicelist();
  ::micromsg::SafeDeviceList* release_safedevicelist();
  void set_allocated_safedevicelist(::micromsg::SafeDeviceList* safedevicelist);

  // optional .micromsg.LinkedinContactItem LinkedinContactItem = 23;
  bool has_linkedincontactitem() const;
  void clear_linkedincontactitem();
  static const int kLinkedinContactItemFieldNumber = 23;
  const ::micromsg::LinkedinContactItem& linkedincontactitem() const;
  ::micromsg::LinkedinContactItem* mutable_linkedincontactitem();
  ::micromsg::LinkedinContactItem* release_linkedincontactitem();
  void set_allocated_linkedincontactitem(::micromsg::LinkedinContactItem* linkedincontactitem);

  // optional .micromsg.PatternLockInfo PatternLockInfo = 25;
  bool has_patternlockinfo() const;
  void clear_patternlockinfo();
  static const int kPatternLockInfoFieldNumber = 25;
  const ::micromsg::PatternLockInfo& patternlockinfo() const;
  ::micromsg::PatternLockInfo* mutable_patternlockinfo();
  ::micromsg::PatternLockInfo* release_patternlockinfo();
  void set_allocated_patternlockinfo(::micromsg::PatternLockInfo* patternlockinfo);

  // optional uint32 BigChatRoomSize = 5;
  bool has_bigchatroomsize() const;
  void clear_bigchatroomsize();
  static const int kBigChatRoomSizeFieldNumber = 5;
  ::google::protobuf::uint32 bigchatroomsize() const;
  void set_bigchatroomsize(::google::protobuf::uint32 value);

  // optional uint32 BigChatRoomQuota = 6;
  bool has_bigchatroomquota() const;
  void clear_bigchatroomquota();
  static const int kBigChatRoomQuotaFieldNumber = 6;
  ::google::protobuf::uint32 bigchatroomquota() const;
  void set_bigchatroomquota(::google::protobuf::uint32 value);

  // optional uint32 BigChatRoomInvite = 7;
  bool has_bigchatroominvite() const;
  void clear_bigchatroominvite();
  static const int kBigChatRoomInviteFieldNumber = 7;
  ::google::protobuf::uint32 bigchatroominvite() const;
  void set_bigchatroominvite(::google::protobuf::uint32 value);

  // optional uint32 MainAcctType = 11;
  bool has_mainaccttype() const;
  void clear_mainaccttype();
  static const int kMainAcctTypeFieldNumber = 11;
  ::google::protobuf::uint32 mainaccttype() const;
  void set_mainaccttype(::google::protobuf::uint32 value);

  // optional uint32 SafeDevice = 14;
  bool has_safedevice() const;
  void clear_safedevice();
  static const int kSafeDeviceFieldNumber = 14;
  ::google::protobuf::uint32 safedevice() const;
  void set_safedevice(::google::protobuf::uint32 value);

  // optional uint32 GrayscaleFlag = 15;
  bool has_grayscaleflag() const;
  void clear_grayscaleflag();
  static const int kGrayscaleFlagFieldNumber = 15;
  ::google::protobuf::uint32 grayscaleflag() const;
  void set_grayscaleflag(::google::protobuf::uint32 value);

  // optional uint32 PayWalletType = 27;
  bool has_paywallettype() const;
  void clear_paywallettype();
  static const int kPayWalletTypeFieldNumber = 27;
  ::google::protobuf::uint32 paywallettype() const;
  void set_paywallettype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:micromsg.UserInfoExt)
 private:
  void set_has_snsuserinfo();
  void clear_has_snsuserinfo();
  void set_has_mybrandlist();
  void clear_has_mybrandlist();
  void set_has_msgpushsound();
  void clear_has_msgpushsound();
  void set_has_voippushsound();
  void clear_has_voippushsound();
  void set_has_bigchatroomsize();
  void clear_has_bigchatroomsize();
  void set_has_bigchatroomquota();
  void clear_has_bigchatroomquota();
  void set_has_bigchatroominvite();
  void clear_has_bigchatroominvite();
  void set_has_safemobile();
  void clear_has_safemobile();
  void set_has_bigheadimgurl();
  void clear_has_bigheadimgurl();
  void set_has_smallheadimgurl();
  void clear_has_smallheadimgurl();
  void set_has_mainaccttype();
  void clear_has_mainaccttype();
  void set_has_extxml();
  void clear_has_extxml();
  void set_has_safedevicelist();
  void clear_has_safedevicelist();
  void set_has_safedevice();
  void clear_has_safedevice();
  void set_has_grayscaleflag();
  void clear_has_grayscaleflag();
  void set_has_googlecontactname();
  void clear_has_googlecontactname();
  void set_has_idcardnum();
  void clear_has_idcardnum();
  void set_has_realname();
  void clear_has_realname();
  void set_has_regcountry();
  void clear_has_regcountry();
  void set_has_bbppid();
  void clear_has_bbppid();
  void set_has_bbpin();
  void clear_has_bbpin();
  void set_has_bbmnickname();
  void clear_has_bbmnickname();
  void set_has_linkedincontactitem();
  void clear_has_linkedincontactitem();
  void set_has_kfinfo();
  void clear_has_kfinfo();
  void set_has_patternlockinfo();
  void clear_has_patternlockinfo();
  void set_has_securitydeviceid();
  void clear_has_securitydeviceid();
  void set_has_paywallettype();
  void clear_has_paywallettype();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr mybrandlist_;
  ::google::protobuf::internal::ArenaStringPtr msgpushsound_;
  ::google::protobuf::internal::ArenaStringPtr voippushsound_;
  ::google::protobuf::internal::ArenaStringPtr safemobile_;
  ::google::protobuf::internal::ArenaStringPtr bigheadimgurl_;
  ::google::protobuf::internal::ArenaStringPtr smallheadimgurl_;
  ::google::protobuf::internal::ArenaStringPtr googlecontactname_;
  ::google::protobuf::internal::ArenaStringPtr idcardnum_;
  ::google::protobuf::internal::ArenaStringPtr realname_;
  ::google::protobuf::internal::ArenaStringPtr regcountry_;
  ::google::protobuf::internal::ArenaStringPtr bbppid_;
  ::google::protobuf::internal::ArenaStringPtr bbpin_;
  ::google::protobuf::internal::ArenaStringPtr bbmnickname_;
  ::google::protobuf::internal::ArenaStringPtr kfinfo_;
  ::google::protobuf::internal::ArenaStringPtr securitydeviceid_;
  ::micromsg::SnsUserInfo* snsuserinfo_;
  ::micromsg::SKBuiltinString_t* extxml_;
  ::micromsg::SafeDeviceList* safedevicelist_;
  ::micromsg::LinkedinContactItem* linkedincontactitem_;
  ::micromsg::PatternLockInfo* patternlockinfo_;
  ::google::protobuf::uint32 bigchatroomsize_;
  ::google::protobuf::uint32 bigchatroomquota_;
  ::google::protobuf::uint32 bigchatroominvite_;
  ::google::protobuf::uint32 mainaccttype_;
  ::google::protobuf::uint32 safedevice_;
  ::google::protobuf::uint32 grayscaleflag_;
  ::google::protobuf::uint32 paywallettype_;
  friend struct protobuf_mmbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ModContact : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.ModContact) */ {
 public:
  ModContact();
  virtual ~ModContact();

  ModContact(const ModContact& from);

  inline ModContact& operator=(const ModContact& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModContact& default_instance();

  static inline const ModContact* internal_default_instance() {
    return reinterpret_cast<const ModContact*>(
               &_ModContact_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    39;

  void Swap(ModContact* other);

  // implements Message ----------------------------------------------

  inline ModContact* New() const PROTOBUF_FINAL { return New(NULL); }

  ModContact* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ModContact& from);
  void MergeFrom(const ModContact& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ModContact* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .micromsg.RoomInfo RoomInfoList = 15;
  int roominfolist_size() const;
  void clear_roominfolist();
  static const int kRoomInfoListFieldNumber = 15;
  const ::micromsg::RoomInfo& roominfolist(int index) const;
  ::micromsg::RoomInfo* mutable_roominfolist(int index);
  ::micromsg::RoomInfo* add_roominfolist();
  ::google::protobuf::RepeatedPtrField< ::micromsg::RoomInfo >*
      mutable_roominfolist();
  const ::google::protobuf::RepeatedPtrField< ::micromsg::RoomInfo >&
      roominfolist() const;

  // optional string Province = 19;
  bool has_province() const;
  void clear_province();
  static const int kProvinceFieldNumber = 19;
  const ::std::string& province() const;
  void set_province(const ::std::string& value);
  #if LANG_CXX11
  void set_province(::std::string&& value);
  #endif
  void set_province(const char* value);
  void set_province(const char* value, size_t size);
  ::std::string* mutable_province();
  ::std::string* release_province();
  void set_allocated_province(::std::string* province);

  // optional string City = 20;
  bool has_city() const;
  void clear_city();
  static const int kCityFieldNumber = 20;
  const ::std::string& city() const;
  void set_city(const ::std::string& value);
  #if LANG_CXX11
  void set_city(::std::string&& value);
  #endif
  void set_city(const char* value);
  void set_city(const char* value, size_t size);
  ::std::string* mutable_city();
  ::std::string* release_city();
  void set_allocated_city(::std::string* city);

  // optional string Signature = 21;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 21;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_signature(::std::string&& value);
  #endif
  void set_signature(const char* value);
  void set_signature(const char* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // optional string VerifyInfo = 25;
  bool has_verifyinfo() const;
  void clear_verifyinfo();
  static const int kVerifyInfoFieldNumber = 25;
  const ::std::string& verifyinfo() const;
  void set_verifyinfo(const ::std::string& value);
  #if LANG_CXX11
  void set_verifyinfo(::std::string&& value);
  #endif
  void set_verifyinfo(const char* value);
  void set_verifyinfo(const char* value, size_t size);
  ::std::string* mutable_verifyinfo();
  ::std::string* release_verifyinfo();
  void set_allocated_verifyinfo(::std::string* verifyinfo);

  // optional string Weibo = 28;
  bool has_weibo() const;
  void clear_weibo();
  static const int kWeiboFieldNumber = 28;
  const ::std::string& weibo() const;
  void set_weibo(const ::std::string& value);
  #if LANG_CXX11
  void set_weibo(::std::string&& value);
  #endif
  void set_weibo(const char* value);
  void set_weibo(const char* value, size_t size);
  ::std::string* mutable_weibo();
  ::std::string* release_weibo();
  void set_allocated_weibo(::std::string* weibo);

  // optional string VerifyContent = 29;
  bool has_verifycontent() const;
  void clear_verifycontent();
  static const int kVerifyContentFieldNumber = 29;
  const ::std::string& verifycontent() const;
  void set_verifycontent(const ::std::string& value);
  #if LANG_CXX11
  void set_verifycontent(::std::string&& value);
  #endif
  void set_verifycontent(const char* value);
  void set_verifycontent(const char* value, size_t size);
  ::std::string* mutable_verifycontent();
  ::std::string* release_verifycontent();
  void set_allocated_verifycontent(::std::string* verifycontent);

  // optional string Alias = 30;
  bool has_alias() const;
  void clear_alias();
  static const int kAliasFieldNumber = 30;
  const ::std::string& alias() const;
  void set_alias(const ::std::string& value);
  #if LANG_CXX11
  void set_alias(::std::string&& value);
  #endif
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  ::std::string* mutable_alias();
  ::std::string* release_alias();
  void set_allocated_alias(::std::string* alias);

  // optional string ChatRoomOwner = 31;
  bool has_chatroomowner() const;
  void clear_chatroomowner();
  static const int kChatRoomOwnerFieldNumber = 31;
  const ::std::string& chatroomowner() const;
  void set_chatroomowner(const ::std::string& value);
  #if LANG_CXX11
  void set_chatroomowner(::std::string&& value);
  #endif
  void set_chatroomowner(const char* value);
  void set_chatroomowner(const char* value, size_t size);
  ::std::string* mutable_chatroomowner();
  ::std::string* release_chatroomowner();
  void set_allocated_chatroomowner(::std::string* chatroomowner);

  // optional string WeiboNickname = 32;
  bool has_weibonickname() const;
  void clear_weibonickname();
  static const int kWeiboNicknameFieldNumber = 32;
  const ::std::string& weibonickname() const;
  void set_weibonickname(const ::std::string& value);
  #if LANG_CXX11
  void set_weibonickname(::std::string&& value);
  #endif
  void set_weibonickname(const char* value);
  void set_weibonickname(const char* value, size_t size);
  ::std::string* mutable_weibonickname();
  ::std::string* release_weibonickname();
  void set_allocated_weibonickname(::std::string* weibonickname);

  // optional string AlbumBGImgID = 36;
  bool has_albumbgimgid() const;
  void clear_albumbgimgid();
  static const int kAlbumBGImgIDFieldNumber = 36;
  const ::std::string& albumbgimgid() const;
  void set_albumbgimgid(const ::std::string& value);
  #if LANG_CXX11
  void set_albumbgimgid(::std::string&& value);
  #endif
  void set_albumbgimgid(const char* value);
  void set_albumbgimgid(const char* value, size_t size);
  ::std::string* mutable_albumbgimgid();
  ::std::string* release_albumbgimgid();
  void set_allocated_albumbgimgid(::std::string* albumbgimgid);

  // optional string Country = 38;
  bool has_country() const;
  void clear_country();
  static const int kCountryFieldNumber = 38;
  const ::std::string& country() const;
  void set_country(const ::std::string& value);
  #if LANG_CXX11
  void set_country(::std::string&& value);
  #endif
  void set_country(const char* value);
  void set_country(const char* value, size_t size);
  ::std::string* mutable_country();
  ::std::string* release_country();
  void set_allocated_country(::std::string* country);

  // optional string BigHeadImgUrl = 39;
  bool has_bigheadimgurl() const;
  void clear_bigheadimgurl();
  static const int kBigHeadImgUrlFieldNumber = 39;
  const ::std::string& bigheadimgurl() const;
  void set_bigheadimgurl(const ::std::string& value);
  #if LANG_CXX11
  void set_bigheadimgurl(::std::string&& value);
  #endif
  void set_bigheadimgurl(const char* value);
  void set_bigheadimgurl(const char* value, size_t size);
  ::std::string* mutable_bigheadimgurl();
  ::std::string* release_bigheadimgurl();
  void set_allocated_bigheadimgurl(::std::string* bigheadimgurl);

  // optional string SmallHeadImgUrl = 40;
  bool has_smallheadimgurl() const;
  void clear_smallheadimgurl();
  static const int kSmallHeadImgUrlFieldNumber = 40;
  const ::std::string& smallheadimgurl() const;
  void set_smallheadimgurl(const ::std::string& value);
  #if LANG_CXX11
  void set_smallheadimgurl(::std::string&& value);
  #endif
  void set_smallheadimgurl(const char* value);
  void set_smallheadimgurl(const char* value, size_t size);
  ::std::string* mutable_smallheadimgurl();
  ::std::string* release_smallheadimgurl();
  void set_allocated_smallheadimgurl(::std::string* smallheadimgurl);

  // optional string MyBrandList = 41;
  bool has_mybrandlist() const;
  void clear_mybrandlist();
  static const int kMyBrandListFieldNumber = 41;
  const ::std::string& mybrandlist() const;
  void set_mybrandlist(const ::std::string& value);
  #if LANG_CXX11
  void set_mybrandlist(::std::string&& value);
  #endif
  void set_mybrandlist(const char* value);
  void set_mybrandlist(const char* value, size_t size);
  ::std::string* mutable_mybrandlist();
  ::std::string* release_mybrandlist();
  void set_allocated_mybrandlist(::std::string* mybrandlist);

  // optional string ChatRoomData = 43;
  bool has_chatroomdata() const;
  void clear_chatroomdata();
  static const int kChatRoomDataFieldNumber = 43;
  const ::std::string& chatroomdata() const;
  void set_chatroomdata(const ::std::string& value);
  #if LANG_CXX11
  void set_chatroomdata(::std::string&& value);
  #endif
  void set_chatroomdata(const char* value);
  void set_chatroomdata(const char* value, size_t size);
  ::std::string* mutable_chatroomdata();
  ::std::string* release_chatroomdata();
  void set_allocated_chatroomdata(::std::string* chatroomdata);

  // optional string HeadImgMd5 = 44;
  bool has_headimgmd5() const;
  void clear_headimgmd5();
  static const int kHeadImgMd5FieldNumber = 44;
  const ::std::string& headimgmd5() const;
  void set_headimgmd5(const ::std::string& value);
  #if LANG_CXX11
  void set_headimgmd5(::std::string&& value);
  #endif
  void set_headimgmd5(const char* value);
  void set_headimgmd5(const char* value, size_t size);
  ::std::string* mutable_headimgmd5();
  ::std::string* release_headimgmd5();
  void set_allocated_headimgmd5(::std::string* headimgmd5);

  // optional string EncryptUserName = 45;
  bool has_encryptusername() const;
  void clear_encryptusername();
  static const int kEncryptUserNameFieldNumber = 45;
  const ::std::string& encryptusername() const;
  void set_encryptusername(const ::std::string& value);
  #if LANG_CXX11
  void set_encryptusername(::std::string&& value);
  #endif
  void set_encryptusername(const char* value);
  void set_encryptusername(const char* value, size_t size);
  ::std::string* mutable_encryptusername();
  ::std::string* release_encryptusername();
  void set_allocated_encryptusername(::std::string* encryptusername);

  // optional string IDCardNum = 46;
  bool has_idcardnum() const;
  void clear_idcardnum();
  static const int kIDCardNumFieldNumber = 46;
  const ::std::string& idcardnum() const;
  void set_idcardnum(const ::std::string& value);
  #if LANG_CXX11
  void set_idcardnum(::std::string&& value);
  #endif
  void set_idcardnum(const char* value);
  void set_idcardnum(const char* value, size_t size);
  ::std::string* mutable_idcardnum();
  ::std::string* release_idcardnum();
  void set_allocated_idcardnum(::std::string* idcardnum);

  // optional string RealName = 47;
  bool has_realname() const;
  void clear_realname();
  static const int kRealNameFieldNumber = 47;
  const ::std::string& realname() const;
  void set_realname(const ::std::string& value);
  #if LANG_CXX11
  void set_realname(::std::string&& value);
  #endif
  void set_realname(const char* value);
  void set_realname(const char* value, size_t size);
  ::std::string* mutable_realname();
  ::std::string* release_realname();
  void set_allocated_realname(::std::string* realname);

  // optional string MobileHash = 48;
  bool has_mobilehash() const;
  void clear_mobilehash();
  static const int kMobileHashFieldNumber = 48;
  const ::std::string& mobilehash() const;
  void set_mobilehash(const ::std::string& value);
  #if LANG_CXX11
  void set_mobilehash(::std::string&& value);
  #endif
  void set_mobilehash(const char* value);
  void set_mobilehash(const char* value, size_t size);
  ::std::string* mutable_mobilehash();
  ::std::string* release_mobilehash();
  void set_allocated_mobilehash(::std::string* mobilehash);

  // optional string MobileFullHash = 49;
  bool has_mobilefullhash() const;
  void clear_mobilefullhash();
  static const int kMobileFullHashFieldNumber = 49;
  const ::std::string& mobilefullhash() const;
  void set_mobilefullhash(const ::std::string& value);
  #if LANG_CXX11
  void set_mobilefullhash(::std::string&& value);
  #endif
  void set_mobilefullhash(const char* value);
  void set_mobilefullhash(const char* value, size_t size);
  ::std::string* mutable_mobilefullhash();
  ::std::string* release_mobilefullhash();
  void set_allocated_mobilefullhash(::std::string* mobilefullhash);

  // optional string ExtInfo = 54;
  bool has_extinfo() const;
  void clear_extinfo();
  static const int kExtInfoFieldNumber = 54;
  const ::std::string& extinfo() const;
  void set_extinfo(const ::std::string& value);
  #if LANG_CXX11
  void set_extinfo(::std::string&& value);
  #endif
  void set_extinfo(const char* value);
  void set_extinfo(const char* value, size_t size);
  ::std::string* mutable_extinfo();
  ::std::string* release_extinfo();
  void set_allocated_extinfo(::std::string* extinfo);

  // optional string Description = 59;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 59;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // optional string CardImgUrl = 60;
  bool has_cardimgurl() const;
  void clear_cardimgurl();
  static const int kCardImgUrlFieldNumber = 60;
  const ::std::string& cardimgurl() const;
  void set_cardimgurl(const ::std::string& value);
  #if LANG_CXX11
  void set_cardimgurl(::std::string&& value);
  #endif
  void set_cardimgurl(const char* value);
  void set_cardimgurl(const char* value, size_t size);
  ::std::string* mutable_cardimgurl();
  ::std::string* release_cardimgurl();
  void set_allocated_cardimgurl(::std::string* cardimgurl);

  // optional string LabelIDList = 61;
  bool has_labelidlist() const;
  void clear_labelidlist();
  static const int kLabelIDListFieldNumber = 61;
  const ::std::string& labelidlist() const;
  void set_labelidlist(const ::std::string& value);
  #if LANG_CXX11
  void set_labelidlist(::std::string&& value);
  #endif
  void set_labelidlist(const char* value);
  void set_labelidlist(const char* value, size_t size);
  ::std::string* mutable_labelidlist();
  ::std::string* release_labelidlist();
  void set_allocated_labelidlist(::std::string* labelidlist);

  // required .micromsg.SKBuiltinString_t UserName = 1;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 1;
  const ::micromsg::SKBuiltinString_t& username() const;
  ::micromsg::SKBuiltinString_t* mutable_username();
  ::micromsg::SKBuiltinString_t* release_username();
  void set_allocated_username(::micromsg::SKBuiltinString_t* username);

  // required .micromsg.SKBuiltinString_t NickName = 2;
  bool has_nickname() const;
  void clear_nickname();
  static const int kNickNameFieldNumber = 2;
  const ::micromsg::SKBuiltinString_t& nickname() const;
  ::micromsg::SKBuiltinString_t* mutable_nickname();
  ::micromsg::SKBuiltinString_t* release_nickname();
  void set_allocated_nickname(::micromsg::SKBuiltinString_t* nickname);

  // required .micromsg.SKBuiltinString_t PYInitial = 3;
  bool has_pyinitial() const;
  void clear_pyinitial();
  static const int kPYInitialFieldNumber = 3;
  const ::micromsg::SKBuiltinString_t& pyinitial() const;
  ::micromsg::SKBuiltinString_t* mutable_pyinitial();
  ::micromsg::SKBuiltinString_t* release_pyinitial();
  void set_allocated_pyinitial(::micromsg::SKBuiltinString_t* pyinitial);

  // required .micromsg.SKBuiltinString_t QuanPin = 4;
  bool has_quanpin() const;
  void clear_quanpin();
  static const int kQuanPinFieldNumber = 4;
  const ::micromsg::SKBuiltinString_t& quanpin() const;
  ::micromsg::SKBuiltinString_t* mutable_quanpin();
  ::micromsg::SKBuiltinString_t* release_quanpin();
  void set_allocated_quanpin(::micromsg::SKBuiltinString_t* quanpin);

  // required .micromsg.SKBuiltinBuffer_t ImgBuf = 6;
  bool has_imgbuf() const;
  void clear_imgbuf();
  static const int kImgBufFieldNumber = 6;
  const ::micromsg::SKBuiltinBuffer_t& imgbuf() const;
  ::micromsg::SKBuiltinBuffer_t* mutable_imgbuf();
  ::micromsg::SKBuiltinBuffer_t* release_imgbuf();
  void set_allocated_imgbuf(::micromsg::SKBuiltinBuffer_t* imgbuf);

  // optional .micromsg.SKBuiltinString_t Remark = 10;
  bool has_remark() const;
  void clear_remark();
  static const int kRemarkFieldNumber = 10;
  const ::micromsg::SKBuiltinString_t& remark() const;
  ::micromsg::SKBuiltinString_t* mutable_remark();
  ::micromsg::SKBuiltinString_t* release_remark();
  void set_allocated_remark(::micromsg::SKBuiltinString_t* remark);

  // optional .micromsg.SKBuiltinString_t RemarkPYInitial = 11;
  bool has_remarkpyinitial() const;
  void clear_remarkpyinitial();
  static const int kRemarkPYInitialFieldNumber = 11;
  const ::micromsg::SKBuiltinString_t& remarkpyinitial() const;
  ::micromsg::SKBuiltinString_t* mutable_remarkpyinitial();
  ::micromsg::SKBuiltinString_t* release_remarkpyinitial();
  void set_allocated_remarkpyinitial(::micromsg::SKBuiltinString_t* remarkpyinitial);

  // optional .micromsg.SKBuiltinString_t RemarkQuanPin = 12;
  bool has_remarkquanpin() const;
  void clear_remarkquanpin();
  static const int kRemarkQuanPinFieldNumber = 12;
  const ::micromsg::SKBuiltinString_t& remarkquanpin() const;
  ::micromsg::SKBuiltinString_t* mutable_remarkquanpin();
  ::micromsg::SKBuiltinString_t* release_remarkquanpin();
  void set_allocated_remarkquanpin(::micromsg::SKBuiltinString_t* remarkquanpin);

  // optional .micromsg.SKBuiltinString_t DomainList = 16;
  bool has_domainlist() const;
  void clear_domainlist();
  static const int kDomainListFieldNumber = 16;
  const ::micromsg::SKBuiltinString_t& domainlist() const;
  ::micromsg::SKBuiltinString_t* mutable_domainlist();
  ::micromsg::SKBuiltinString_t* release_domainlist();
  void set_allocated_domainlist(::micromsg::SKBuiltinString_t* domainlist);

  // optional .micromsg.SnsUserInfo SnsUserInfo = 37;
  bool has_snsuserinfo() const;
  void clear_snsuserinfo();
  static const int kSnsUserInfoFieldNumber = 37;
  const ::micromsg::SnsUserInfo& snsuserinfo() const;
  ::micromsg::SnsUserInfo* mutable_snsuserinfo();
  ::micromsg::SnsUserInfo* release_snsuserinfo();
  void set_allocated_snsuserinfo(::micromsg::SnsUserInfo* snsuserinfo);

  // optional .micromsg.CustomizedInfo CustomizedInfo = 42;
  bool has_customizedinfo() const;
  void clear_customizedinfo();
  static const int kCustomizedInfoFieldNumber = 42;
  const ::micromsg::CustomizedInfo& customizedinfo() const;
  ::micromsg::CustomizedInfo* mutable_customizedinfo();
  ::micromsg::CustomizedInfo* release_customizedinfo();
  void set_allocated_customizedinfo(::micromsg::CustomizedInfo* customizedinfo);

  // optional .micromsg.AdditionalContactList AdditionalContactList = 50;
  bool has_additionalcontactlist() const;
  void clear_additionalcontactlist();
  static const int kAdditionalContactListFieldNumber = 50;
  const ::micromsg::AdditionalContactList& additionalcontactlist() const;
  ::micromsg::AdditionalContactList* mutable_additionalcontactlist();
  ::micromsg::AdditionalContactList* release_additionalcontactlist();
  void set_allocated_additionalcontactlist(::micromsg::AdditionalContactList* additionalcontactlist);

  // optional .micromsg.ChatRoomMemberData NewChatroomData = 57;
  bool has_newchatroomdata() const;
  void clear_newchatroomdata();
  static const int kNewChatroomDataFieldNumber = 57;
  const ::micromsg::ChatRoomMemberData& newchatroomdata() const;
  ::micromsg::ChatRoomMemberData* mutable_newchatroomdata();
  ::micromsg::ChatRoomMemberData* release_newchatroomdata();
  void set_allocated_newchatroomdata(::micromsg::ChatRoomMemberData* newchatroomdata);

  // required int32 Sex = 5;
  bool has_sex() const;
  void clear_sex();
  static const int kSexFieldNumber = 5;
  ::google::protobuf::int32 sex() const;
  void set_sex(::google::protobuf::int32 value);

  // required uint32 BitMask = 7;
  bool has_bitmask() const;
  void clear_bitmask();
  static const int kBitMaskFieldNumber = 7;
  ::google::protobuf::uint32 bitmask() const;
  void set_bitmask(::google::protobuf::uint32 value);

  // required uint32 BitVal = 8;
  bool has_bitval() const;
  void clear_bitval();
  static const int kBitValFieldNumber = 8;
  ::google::protobuf::uint32 bitval() const;
  void set_bitval(::google::protobuf::uint32 value);

  // required uint32 ImgFlag = 9;
  bool has_imgflag() const;
  void clear_imgflag();
  static const int kImgFlagFieldNumber = 9;
  ::google::protobuf::uint32 imgflag() const;
  void set_imgflag(::google::protobuf::uint32 value);

  // optional uint32 ContactType = 13;
  bool has_contacttype() const;
  void clear_contacttype();
  static const int kContactTypeFieldNumber = 13;
  ::google::protobuf::uint32 contacttype() const;
  void set_contacttype(::google::protobuf::uint32 value);

  // optional uint32 RoomInfoCount = 14;
  bool has_roominfocount() const;
  void clear_roominfocount();
  static const int kRoomInfoCountFieldNumber = 14;
  ::google::protobuf::uint32 roominfocount() const;
  void set_roominfocount(::google::protobuf::uint32 value);

  // optional uint32 ChatRoomNotify = 17;
  bool has_chatroomnotify() const;
  void clear_chatroomnotify();
  static const int kChatRoomNotifyFieldNumber = 17;
  ::google::protobuf::uint32 chatroomnotify() const;
  void set_chatroomnotify(::google::protobuf::uint32 value);

  // optional uint32 AddContactScene = 18;
  bool has_addcontactscene() const;
  void clear_addcontactscene();
  static const int kAddContactSceneFieldNumber = 18;
  ::google::protobuf::uint32 addcontactscene() const;
  void set_addcontactscene(::google::protobuf::uint32 value);

  // optional uint32 PersonalCard = 22;
  bool has_personalcard() const;
  void clear_personalcard();
  static const int kPersonalCardFieldNumber = 22;
  ::google::protobuf::uint32 personalcard() const;
  void set_personalcard(::google::protobuf::uint32 value);

  // optional uint32 HasWeiXinHdHeadImg = 23;
  bool has_hasweixinhdheadimg() const;
  void clear_hasweixinhdheadimg();
  static const int kHasWeiXinHdHeadImgFieldNumber = 23;
  ::google::protobuf::uint32 hasweixinhdheadimg() const;
  void set_hasweixinhdheadimg(::google::protobuf::uint32 value);

  // optional uint32 VerifyFlag = 24;
  bool has_verifyflag() const;
  void clear_verifyflag();
  static const int kVerifyFlagFieldNumber = 24;
  ::google::protobuf::uint32 verifyflag() const;
  void set_verifyflag(::google::protobuf::uint32 value);

  // optional int32 Level = 26;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 26;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // optional uint32 Source = 27;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 27;
  ::google::protobuf::uint32 source() const;
  void set_source(::google::protobuf::uint32 value);

  // optional uint32 WeiboFlag = 33;
  bool has_weiboflag() const;
  void clear_weiboflag();
  static const int kWeiboFlagFieldNumber = 33;
  ::google::protobuf::uint32 weiboflag() const;
  void set_weiboflag(::google::protobuf::uint32 value);

  // optional int32 AlbumStyle = 34;
  bool has_albumstyle() const;
  void clear_albumstyle();
  static const int kAlbumStyleFieldNumber = 34;
  ::google::protobuf::int32 albumstyle() const;
  void set_albumstyle(::google::protobuf::int32 value);

  // optional int32 AlbumFlag = 35;
  bool has_albumflag() const;
  void clear_albumflag();
  static const int kAlbumFlagFieldNumber = 35;
  ::google::protobuf::int32 albumflag() const;
  void set_albumflag(::google::protobuf::int32 value);

  // optional uint32 ChatroomVersion = 53;
  bool has_chatroomversion() const;
  void clear_chatroomversion();
  static const int kChatroomVersionFieldNumber = 53;
  ::google::protobuf::uint32 chatroomversion() const;
  void set_chatroomversion(::google::protobuf::uint32 value);

  // optional uint32 ChatroomMaxCount = 55;
  bool has_chatroommaxcount() const;
  void clear_chatroommaxcount();
  static const int kChatroomMaxCountFieldNumber = 55;
  ::google::protobuf::uint32 chatroommaxcount() const;
  void set_chatroommaxcount(::google::protobuf::uint32 value);

  // optional uint32 ChatroomType = 56;
  bool has_chatroomtype() const;
  void clear_chatroomtype();
  static const int kChatroomTypeFieldNumber = 56;
  ::google::protobuf::uint32 chatroomtype() const;
  void set_chatroomtype(::google::protobuf::uint32 value);

  // optional int32 DeleteFlag = 58;
  bool has_deleteflag() const;
  void clear_deleteflag();
  static const int kDeleteFlagFieldNumber = 58;
  ::google::protobuf::int32 deleteflag() const;
  void set_deleteflag(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:micromsg.ModContact)
 private:
  void set_has_username();
  void clear_has_username();
  void set_has_nickname();
  void clear_has_nickname();
  void set_has_pyinitial();
  void clear_has_pyinitial();
  void set_has_quanpin();
  void clear_has_quanpin();
  void set_has_sex();
  void clear_has_sex();
  void set_has_imgbuf();
  void clear_has_imgbuf();
  void set_has_bitmask();
  void clear_has_bitmask();
  void set_has_bitval();
  void clear_has_bitval();
  void set_has_imgflag();
  void clear_has_imgflag();
  void set_has_remark();
  void clear_has_remark();
  void set_has_remarkpyinitial();
  void clear_has_remarkpyinitial();
  void set_has_remarkquanpin();
  void clear_has_remarkquanpin();
  void set_has_contacttype();
  void clear_has_contacttype();
  void set_has_roominfocount();
  void clear_has_roominfocount();
  void set_has_domainlist();
  void clear_has_domainlist();
  void set_has_chatroomnotify();
  void clear_has_chatroomnotify();
  void set_has_addcontactscene();
  void clear_has_addcontactscene();
  void set_has_province();
  void clear_has_province();
  void set_has_city();
  void clear_has_city();
  void set_has_signature();
  void clear_has_signature();
  void set_has_personalcard();
  void clear_has_personalcard();
  void set_has_hasweixinhdheadimg();
  void clear_has_hasweixinhdheadimg();
  void set_has_verifyflag();
  void clear_has_verifyflag();
  void set_has_verifyinfo();
  void clear_has_verifyinfo();
  void set_has_level();
  void clear_has_level();
  void set_has_source();
  void clear_has_source();
  void set_has_weibo();
  void clear_has_weibo();
  void set_has_verifycontent();
  void clear_has_verifycontent();
  void set_has_alias();
  void clear_has_alias();
  void set_has_chatroomowner();
  void clear_has_chatroomowner();
  void set_has_weibonickname();
  void clear_has_weibonickname();
  void set_has_weiboflag();
  void clear_has_weiboflag();
  void set_has_albumstyle();
  void clear_has_albumstyle();
  void set_has_albumflag();
  void clear_has_albumflag();
  void set_has_albumbgimgid();
  void clear_has_albumbgimgid();
  void set_has_snsuserinfo();
  void clear_has_snsuserinfo();
  void set_has_country();
  void clear_has_country();
  void set_has_bigheadimgurl();
  void clear_has_bigheadimgurl();
  void set_has_smallheadimgurl();
  void clear_has_smallheadimgurl();
  void set_has_mybrandlist();
  void clear_has_mybrandlist();
  void set_has_customizedinfo();
  void clear_has_customizedinfo();
  void set_has_chatroomdata();
  void clear_has_chatroomdata();
  void set_has_headimgmd5();
  void clear_has_headimgmd5();
  void set_has_encryptusername();
  void clear_has_encryptusername();
  void set_has_idcardnum();
  void clear_has_idcardnum();
  void set_has_realname();
  void clear_has_realname();
  void set_has_mobilehash();
  void clear_has_mobilehash();
  void set_has_mobilefullhash();
  void clear_has_mobilefullhash();
  void set_has_additionalcontactlist();
  void clear_has_additionalcontactlist();
  void set_has_chatroomversion();
  void clear_has_chatroomversion();
  void set_has_extinfo();
  void clear_has_extinfo();
  void set_has_chatroommaxcount();
  void clear_has_chatroommaxcount();
  void set_has_chatroomtype();
  void clear_has_chatroomtype();
  void set_has_newchatroomdata();
  void clear_has_newchatroomdata();
  void set_has_deleteflag();
  void clear_has_deleteflag();
  void set_has_description();
  void clear_has_description();
  void set_has_cardimgurl();
  void clear_has_cardimgurl();
  void set_has_labelidlist();
  void clear_has_labelidlist();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<2> _has_bits_;
  ::google::protobuf::RepeatedPtrField< ::micromsg::RoomInfo > roominfolist_;
  ::google::protobuf::internal::ArenaStringPtr province_;
  ::google::protobuf::internal::ArenaStringPtr city_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  ::google::protobuf::internal::ArenaStringPtr verifyinfo_;
  ::google::protobuf::internal::ArenaStringPtr weibo_;
  ::google::protobuf::internal::ArenaStringPtr verifycontent_;
  ::google::protobuf::internal::ArenaStringPtr alias_;
  ::google::protobuf::internal::ArenaStringPtr chatroomowner_;
  ::google::protobuf::internal::ArenaStringPtr weibonickname_;
  ::google::protobuf::internal::ArenaStringPtr albumbgimgid_;
  ::google::protobuf::internal::ArenaStringPtr country_;
  ::google::protobuf::internal::ArenaStringPtr bigheadimgurl_;
  ::google::protobuf::internal::ArenaStringPtr smallheadimgurl_;
  ::google::protobuf::internal::ArenaStringPtr mybrandlist_;
  ::google::protobuf::internal::ArenaStringPtr chatroomdata_;
  ::google::protobuf::internal::ArenaStringPtr headimgmd5_;
  ::google::protobuf::internal::ArenaStringPtr encryptusername_;
  ::google::protobuf::internal::ArenaStringPtr idcardnum_;
  ::google::protobuf::internal::ArenaStringPtr realname_;
  ::google::protobuf::internal::ArenaStringPtr mobilehash_;
  ::google::protobuf::internal::ArenaStringPtr mobilefullhash_;
  ::google::protobuf::internal::ArenaStringPtr extinfo_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr cardimgurl_;
  ::google::protobuf::internal::ArenaStringPtr labelidlist_;
  ::micromsg::SKBuiltinString_t* username_;
  ::micromsg::SKBuiltinString_t* nickname_;
  ::micromsg::SKBuiltinString_t* pyinitial_;
  ::micromsg::SKBuiltinString_t* quanpin_;
  ::micromsg::SKBuiltinBuffer_t* imgbuf_;
  ::micromsg::SKBuiltinString_t* remark_;
  ::micromsg::SKBuiltinString_t* remarkpyinitial_;
  ::micromsg::SKBuiltinString_t* remarkquanpin_;
  ::micromsg::SKBuiltinString_t* domainlist_;
  ::micromsg::SnsUserInfo* snsuserinfo_;
  ::micromsg::CustomizedInfo* customizedinfo_;
  ::micromsg::AdditionalContactList* additionalcontactlist_;
  ::micromsg::ChatRoomMemberData* newchatroomdata_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::uint32 bitmask_;
  ::google::protobuf::uint32 bitval_;
  ::google::protobuf::uint32 imgflag_;
  ::google::protobuf::uint32 contacttype_;
  ::google::protobuf::uint32 roominfocount_;
  ::google::protobuf::uint32 chatroomnotify_;
  ::google::protobuf::uint32 addcontactscene_;
  ::google::protobuf::uint32 personalcard_;
  ::google::protobuf::uint32 hasweixinhdheadimg_;
  ::google::protobuf::uint32 verifyflag_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::uint32 source_;
  ::google::protobuf::uint32 weiboflag_;
  ::google::protobuf::int32 albumstyle_;
  ::google::protobuf::int32 albumflag_;
  ::google::protobuf::uint32 chatroomversion_;
  ::google::protobuf::uint32 chatroommaxcount_;
  ::google::protobuf::uint32 chatroomtype_;
  ::google::protobuf::int32 deleteflag_;
  mutable int _cached_size_;
  friend struct protobuf_mmbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HardDevice : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:micromsg.HardDevice) */ {
 public:
  HardDevice();
  virtual ~HardDevice();

  HardDevice(const HardDevice& from);

  inline HardDevice& operator=(const HardDevice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HardDevice& default_instance();

  static inline const HardDevice* internal_default_instance() {
    return reinterpret_cast<const HardDevice*>(
               &_HardDevice_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    40;

  void Swap(HardDevice* other);

  // implements Message ----------------------------------------------

  inline HardDevice* New() const PROTOBUF_FINAL { return New(NULL); }

  HardDevice* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HardDevice& from);
  void MergeFrom(const HardDevice& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HardDevice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string DeviceType = 1;
  bool has_devicetype() const;
  void clear_devicetype();
  static const int kDeviceTypeFieldNumber = 1;
  const ::std::string& devicetype() const;
  void set_devicetype(const ::std::string& value);
  #if LANG_CXX11
  void set_devicetype(::std::string&& value);
  #endif
  void set_devicetype(const char* value);
  void set_devicetype(const char* value, size_t size);
  ::std::string* mutable_devicetype();
  ::std::string* release_devicetype();
  void set_allocated_devicetype(::std::string* devicetype);

  // optional string DeviceID = 2;
  bool has_deviceid() const;
  void clear_deviceid();
  static const int kDeviceIDFieldNumber = 2;
  const ::std::string& deviceid() const;
  void set_deviceid(const ::std::string& value);
  #if LANG_CXX11
  void set_deviceid(::std::string&& value);
  #endif
  void set_deviceid(const char* value);
  void set_deviceid(const char* value, size_t size);
  ::std::string* mutable_deviceid();
  ::std::string* release_deviceid();
  void set_allocated_deviceid(::std::string* deviceid);

  // @@protoc_insertion_point(class_scope:micromsg.HardDevice)
 private:
  void set_has_devicetype();
  void clear_has_devicetype();
  void set_has_deviceid();
  void clear_has_deviceid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr devicetype_;
  ::google::protobuf::internal::ArenaStringPtr deviceid_;
  friend struct protobuf_mmbase_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// BuiltinIP

// required uint32 type = 1;
inline bool BuiltinIP::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuiltinIP::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuiltinIP::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuiltinIP::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 BuiltinIP::type() const {
  // @@protoc_insertion_point(field_get:micromsg.BuiltinIP.type)
  return type_;
}
inline void BuiltinIP::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BuiltinIP.type)
}

// required uint32 port = 2;
inline bool BuiltinIP::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BuiltinIP::set_has_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BuiltinIP::clear_has_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BuiltinIP::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 BuiltinIP::port() const {
  // @@protoc_insertion_point(field_get:micromsg.BuiltinIP.port)
  return port_;
}
inline void BuiltinIP::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BuiltinIP.port)
}

// optional bytes IP = 3;
inline bool BuiltinIP::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuiltinIP::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuiltinIP::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuiltinIP::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
inline const ::std::string& BuiltinIP::ip() const {
  // @@protoc_insertion_point(field_get:micromsg.BuiltinIP.IP)
  return ip_.GetNoArena();
}
inline void BuiltinIP::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BuiltinIP.IP)
}
#if LANG_CXX11
inline void BuiltinIP::set_ip(::std::string&& value) {
  set_has_ip();
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BuiltinIP.IP)
}
#endif
inline void BuiltinIP::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BuiltinIP.IP)
}
inline void BuiltinIP::set_ip(const void* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BuiltinIP.IP)
}
inline ::std::string* BuiltinIP::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:micromsg.BuiltinIP.IP)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BuiltinIP::release_ip() {
  // @@protoc_insertion_point(field_release:micromsg.BuiltinIP.IP)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BuiltinIP::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BuiltinIP.IP)
}

// optional bytes Domain = 4;
inline bool BuiltinIP::has_domain() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuiltinIP::set_has_domain() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuiltinIP::clear_has_domain() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuiltinIP::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_domain();
}
inline const ::std::string& BuiltinIP::domain() const {
  // @@protoc_insertion_point(field_get:micromsg.BuiltinIP.Domain)
  return domain_.GetNoArena();
}
inline void BuiltinIP::set_domain(const ::std::string& value) {
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BuiltinIP.Domain)
}
#if LANG_CXX11
inline void BuiltinIP::set_domain(::std::string&& value) {
  set_has_domain();
  domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BuiltinIP.Domain)
}
#endif
inline void BuiltinIP::set_domain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BuiltinIP.Domain)
}
inline void BuiltinIP::set_domain(const void* value, size_t size) {
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BuiltinIP.Domain)
}
inline ::std::string* BuiltinIP::mutable_domain() {
  set_has_domain();
  // @@protoc_insertion_point(field_mutable:micromsg.BuiltinIP.Domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BuiltinIP::release_domain() {
  // @@protoc_insertion_point(field_release:micromsg.BuiltinIP.Domain)
  clear_has_domain();
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BuiltinIP::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    set_has_domain();
  } else {
    clear_has_domain();
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BuiltinIP.Domain)
}

// -------------------------------------------------------------------

// BuiltinIPList

// required uint32 LongConnectIPCount = 1;
inline bool BuiltinIPList::has_longconnectipcount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuiltinIPList::set_has_longconnectipcount() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuiltinIPList::clear_has_longconnectipcount() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuiltinIPList::clear_longconnectipcount() {
  longconnectipcount_ = 0u;
  clear_has_longconnectipcount();
}
inline ::google::protobuf::uint32 BuiltinIPList::longconnectipcount() const {
  // @@protoc_insertion_point(field_get:micromsg.BuiltinIPList.LongConnectIPCount)
  return longconnectipcount_;
}
inline void BuiltinIPList::set_longconnectipcount(::google::protobuf::uint32 value) {
  set_has_longconnectipcount();
  longconnectipcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BuiltinIPList.LongConnectIPCount)
}

// required uint32 ShortConnectIPCount = 2;
inline bool BuiltinIPList::has_shortconnectipcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuiltinIPList::set_has_shortconnectipcount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuiltinIPList::clear_has_shortconnectipcount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuiltinIPList::clear_shortconnectipcount() {
  shortconnectipcount_ = 0u;
  clear_has_shortconnectipcount();
}
inline ::google::protobuf::uint32 BuiltinIPList::shortconnectipcount() const {
  // @@protoc_insertion_point(field_get:micromsg.BuiltinIPList.ShortConnectIPCount)
  return shortconnectipcount_;
}
inline void BuiltinIPList::set_shortconnectipcount(::google::protobuf::uint32 value) {
  set_has_shortconnectipcount();
  shortconnectipcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BuiltinIPList.ShortConnectIPCount)
}

// required uint32 Seq = 5;
inline bool BuiltinIPList::has_seq() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuiltinIPList::set_has_seq() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuiltinIPList::clear_has_seq() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuiltinIPList::clear_seq() {
  seq_ = 0u;
  clear_has_seq();
}
inline ::google::protobuf::uint32 BuiltinIPList::seq() const {
  // @@protoc_insertion_point(field_get:micromsg.BuiltinIPList.Seq)
  return seq_;
}
inline void BuiltinIPList::set_seq(::google::protobuf::uint32 value) {
  set_has_seq();
  seq_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BuiltinIPList.Seq)
}

// repeated .micromsg.BuiltinIP LongConnectIPList = 3;
inline int BuiltinIPList::longconnectiplist_size() const {
  return longconnectiplist_.size();
}
inline void BuiltinIPList::clear_longconnectiplist() {
  longconnectiplist_.Clear();
}
inline const ::micromsg::BuiltinIP& BuiltinIPList::longconnectiplist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.BuiltinIPList.LongConnectIPList)
  return longconnectiplist_.Get(index);
}
inline ::micromsg::BuiltinIP* BuiltinIPList::mutable_longconnectiplist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.BuiltinIPList.LongConnectIPList)
  return longconnectiplist_.Mutable(index);
}
inline ::micromsg::BuiltinIP* BuiltinIPList::add_longconnectiplist() {
  // @@protoc_insertion_point(field_add:micromsg.BuiltinIPList.LongConnectIPList)
  return longconnectiplist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::BuiltinIP >*
BuiltinIPList::mutable_longconnectiplist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.BuiltinIPList.LongConnectIPList)
  return &longconnectiplist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::BuiltinIP >&
BuiltinIPList::longconnectiplist() const {
  // @@protoc_insertion_point(field_list:micromsg.BuiltinIPList.LongConnectIPList)
  return longconnectiplist_;
}

// repeated .micromsg.BuiltinIP ShortConnectIPList = 4;
inline int BuiltinIPList::shortconnectiplist_size() const {
  return shortconnectiplist_.size();
}
inline void BuiltinIPList::clear_shortconnectiplist() {
  shortconnectiplist_.Clear();
}
inline const ::micromsg::BuiltinIP& BuiltinIPList::shortconnectiplist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.BuiltinIPList.ShortConnectIPList)
  return shortconnectiplist_.Get(index);
}
inline ::micromsg::BuiltinIP* BuiltinIPList::mutable_shortconnectiplist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.BuiltinIPList.ShortConnectIPList)
  return shortconnectiplist_.Mutable(index);
}
inline ::micromsg::BuiltinIP* BuiltinIPList::add_shortconnectiplist() {
  // @@protoc_insertion_point(field_add:micromsg.BuiltinIPList.ShortConnectIPList)
  return shortconnectiplist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::BuiltinIP >*
BuiltinIPList::mutable_shortconnectiplist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.BuiltinIPList.ShortConnectIPList)
  return &shortconnectiplist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::BuiltinIP >&
BuiltinIPList::shortconnectiplist() const {
  // @@protoc_insertion_point(field_list:micromsg.BuiltinIPList.ShortConnectIPList)
  return shortconnectiplist_;
}

// -------------------------------------------------------------------

// NetworkControl

// optional string PortList = 1;
inline bool NetworkControl::has_portlist() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetworkControl::set_has_portlist() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetworkControl::clear_has_portlist() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetworkControl::clear_portlist() {
  portlist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_portlist();
}
inline const ::std::string& NetworkControl::portlist() const {
  // @@protoc_insertion_point(field_get:micromsg.NetworkControl.PortList)
  return portlist_.GetNoArena();
}
inline void NetworkControl::set_portlist(const ::std::string& value) {
  set_has_portlist();
  portlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NetworkControl.PortList)
}
#if LANG_CXX11
inline void NetworkControl::set_portlist(::std::string&& value) {
  set_has_portlist();
  portlist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NetworkControl.PortList)
}
#endif
inline void NetworkControl::set_portlist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_portlist();
  portlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NetworkControl.PortList)
}
inline void NetworkControl::set_portlist(const char* value, size_t size) {
  set_has_portlist();
  portlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NetworkControl.PortList)
}
inline ::std::string* NetworkControl::mutable_portlist() {
  set_has_portlist();
  // @@protoc_insertion_point(field_mutable:micromsg.NetworkControl.PortList)
  return portlist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkControl::release_portlist() {
  // @@protoc_insertion_point(field_release:micromsg.NetworkControl.PortList)
  clear_has_portlist();
  return portlist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkControl::set_allocated_portlist(::std::string* portlist) {
  if (portlist != NULL) {
    set_has_portlist();
  } else {
    clear_has_portlist();
  }
  portlist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), portlist);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NetworkControl.PortList)
}

// optional string TimeoutList = 2;
inline bool NetworkControl::has_timeoutlist() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetworkControl::set_has_timeoutlist() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetworkControl::clear_has_timeoutlist() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetworkControl::clear_timeoutlist() {
  timeoutlist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_timeoutlist();
}
inline const ::std::string& NetworkControl::timeoutlist() const {
  // @@protoc_insertion_point(field_get:micromsg.NetworkControl.TimeoutList)
  return timeoutlist_.GetNoArena();
}
inline void NetworkControl::set_timeoutlist(const ::std::string& value) {
  set_has_timeoutlist();
  timeoutlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.NetworkControl.TimeoutList)
}
#if LANG_CXX11
inline void NetworkControl::set_timeoutlist(::std::string&& value) {
  set_has_timeoutlist();
  timeoutlist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.NetworkControl.TimeoutList)
}
#endif
inline void NetworkControl::set_timeoutlist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_timeoutlist();
  timeoutlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.NetworkControl.TimeoutList)
}
inline void NetworkControl::set_timeoutlist(const char* value, size_t size) {
  set_has_timeoutlist();
  timeoutlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.NetworkControl.TimeoutList)
}
inline ::std::string* NetworkControl::mutable_timeoutlist() {
  set_has_timeoutlist();
  // @@protoc_insertion_point(field_mutable:micromsg.NetworkControl.TimeoutList)
  return timeoutlist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkControl::release_timeoutlist() {
  // @@protoc_insertion_point(field_release:micromsg.NetworkControl.TimeoutList)
  clear_has_timeoutlist();
  return timeoutlist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkControl::set_allocated_timeoutlist(::std::string* timeoutlist) {
  if (timeoutlist != NULL) {
    set_has_timeoutlist();
  } else {
    clear_has_timeoutlist();
  }
  timeoutlist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timeoutlist);
  // @@protoc_insertion_point(field_set_allocated:micromsg.NetworkControl.TimeoutList)
}

// optional uint32 MinNoopInterval = 3;
inline bool NetworkControl::has_minnoopinterval() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetworkControl::set_has_minnoopinterval() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetworkControl::clear_has_minnoopinterval() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetworkControl::clear_minnoopinterval() {
  minnoopinterval_ = 0u;
  clear_has_minnoopinterval();
}
inline ::google::protobuf::uint32 NetworkControl::minnoopinterval() const {
  // @@protoc_insertion_point(field_get:micromsg.NetworkControl.MinNoopInterval)
  return minnoopinterval_;
}
inline void NetworkControl::set_minnoopinterval(::google::protobuf::uint32 value) {
  set_has_minnoopinterval();
  minnoopinterval_ = value;
  // @@protoc_insertion_point(field_set:micromsg.NetworkControl.MinNoopInterval)
}

// optional uint32 MaxNoopInterval = 4;
inline bool NetworkControl::has_maxnoopinterval() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetworkControl::set_has_maxnoopinterval() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetworkControl::clear_has_maxnoopinterval() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetworkControl::clear_maxnoopinterval() {
  maxnoopinterval_ = 0u;
  clear_has_maxnoopinterval();
}
inline ::google::protobuf::uint32 NetworkControl::maxnoopinterval() const {
  // @@protoc_insertion_point(field_get:micromsg.NetworkControl.MaxNoopInterval)
  return maxnoopinterval_;
}
inline void NetworkControl::set_maxnoopinterval(::google::protobuf::uint32 value) {
  set_has_maxnoopinterval();
  maxnoopinterval_ = value;
  // @@protoc_insertion_point(field_set:micromsg.NetworkControl.MaxNoopInterval)
}

// optional int32 TypingInterval = 5;
inline bool NetworkControl::has_typinginterval() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NetworkControl::set_has_typinginterval() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NetworkControl::clear_has_typinginterval() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NetworkControl::clear_typinginterval() {
  typinginterval_ = 0;
  clear_has_typinginterval();
}
inline ::google::protobuf::int32 NetworkControl::typinginterval() const {
  // @@protoc_insertion_point(field_get:micromsg.NetworkControl.TypingInterval)
  return typinginterval_;
}
inline void NetworkControl::set_typinginterval(::google::protobuf::int32 value) {
  set_has_typinginterval();
  typinginterval_ = value;
  // @@protoc_insertion_point(field_set:micromsg.NetworkControl.TypingInterval)
}

// optional int32 NoopIntervalTime = 7;
inline bool NetworkControl::has_noopintervaltime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NetworkControl::set_has_noopintervaltime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NetworkControl::clear_has_noopintervaltime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NetworkControl::clear_noopintervaltime() {
  noopintervaltime_ = 0;
  clear_has_noopintervaltime();
}
inline ::google::protobuf::int32 NetworkControl::noopintervaltime() const {
  // @@protoc_insertion_point(field_get:micromsg.NetworkControl.NoopIntervalTime)
  return noopintervaltime_;
}
inline void NetworkControl::set_noopintervaltime(::google::protobuf::int32 value) {
  set_has_noopintervaltime();
  noopintervaltime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.NetworkControl.NoopIntervalTime)
}

// -------------------------------------------------------------------

// PluginKey

// optional string Key = 1;
inline bool PluginKey::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PluginKey::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PluginKey::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PluginKey::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& PluginKey::key() const {
  // @@protoc_insertion_point(field_get:micromsg.PluginKey.Key)
  return key_.GetNoArena();
}
inline void PluginKey::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.PluginKey.Key)
}
#if LANG_CXX11
inline void PluginKey::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.PluginKey.Key)
}
#endif
inline void PluginKey::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.PluginKey.Key)
}
inline void PluginKey::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.PluginKey.Key)
}
inline ::std::string* PluginKey::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:micromsg.PluginKey.Key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PluginKey::release_key() {
  // @@protoc_insertion_point(field_release:micromsg.PluginKey.Key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PluginKey::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:micromsg.PluginKey.Key)
}

// optional uint32 Id = 2;
inline bool PluginKey::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PluginKey::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PluginKey::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PluginKey::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 PluginKey::id() const {
  // @@protoc_insertion_point(field_get:micromsg.PluginKey.Id)
  return id_;
}
inline void PluginKey::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PluginKey.Id)
}

// -------------------------------------------------------------------

// PluginKeyList

// required uint32 Count = 1;
inline bool PluginKeyList::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PluginKeyList::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PluginKeyList::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PluginKeyList::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 PluginKeyList::count() const {
  // @@protoc_insertion_point(field_get:micromsg.PluginKeyList.Count)
  return count_;
}
inline void PluginKeyList::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PluginKeyList.Count)
}

// repeated .micromsg.PluginKey List = 2;
inline int PluginKeyList::list_size() const {
  return list_.size();
}
inline void PluginKeyList::clear_list() {
  list_.Clear();
}
inline const ::micromsg::PluginKey& PluginKeyList::list(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.PluginKeyList.List)
  return list_.Get(index);
}
inline ::micromsg::PluginKey* PluginKeyList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.PluginKeyList.List)
  return list_.Mutable(index);
}
inline ::micromsg::PluginKey* PluginKeyList::add_list() {
  // @@protoc_insertion_point(field_add:micromsg.PluginKeyList.List)
  return list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::PluginKey >*
PluginKeyList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.PluginKeyList.List)
  return &list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::PluginKey >&
PluginKeyList::list() const {
  // @@protoc_insertion_point(field_list:micromsg.PluginKeyList.List)
  return list_;
}

// -------------------------------------------------------------------

// Host

// optional string Origin = 1;
inline bool Host::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Host::set_has_origin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Host::clear_has_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Host::clear_origin() {
  origin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_origin();
}
inline const ::std::string& Host::origin() const {
  // @@protoc_insertion_point(field_get:micromsg.Host.Origin)
  return origin_.GetNoArena();
}
inline void Host::set_origin(const ::std::string& value) {
  set_has_origin();
  origin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.Host.Origin)
}
#if LANG_CXX11
inline void Host::set_origin(::std::string&& value) {
  set_has_origin();
  origin_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.Host.Origin)
}
#endif
inline void Host::set_origin(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_origin();
  origin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.Host.Origin)
}
inline void Host::set_origin(const char* value, size_t size) {
  set_has_origin();
  origin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.Host.Origin)
}
inline ::std::string* Host::mutable_origin() {
  set_has_origin();
  // @@protoc_insertion_point(field_mutable:micromsg.Host.Origin)
  return origin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Host::release_origin() {
  // @@protoc_insertion_point(field_release:micromsg.Host.Origin)
  clear_has_origin();
  return origin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Host::set_allocated_origin(::std::string* origin) {
  if (origin != NULL) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  origin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), origin);
  // @@protoc_insertion_point(field_set_allocated:micromsg.Host.Origin)
}

// optional string Substitute = 2;
inline bool Host::has_substitute() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Host::set_has_substitute() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Host::clear_has_substitute() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Host::clear_substitute() {
  substitute_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_substitute();
}
inline const ::std::string& Host::substitute() const {
  // @@protoc_insertion_point(field_get:micromsg.Host.Substitute)
  return substitute_.GetNoArena();
}
inline void Host::set_substitute(const ::std::string& value) {
  set_has_substitute();
  substitute_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.Host.Substitute)
}
#if LANG_CXX11
inline void Host::set_substitute(::std::string&& value) {
  set_has_substitute();
  substitute_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.Host.Substitute)
}
#endif
inline void Host::set_substitute(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_substitute();
  substitute_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.Host.Substitute)
}
inline void Host::set_substitute(const char* value, size_t size) {
  set_has_substitute();
  substitute_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.Host.Substitute)
}
inline ::std::string* Host::mutable_substitute() {
  set_has_substitute();
  // @@protoc_insertion_point(field_mutable:micromsg.Host.Substitute)
  return substitute_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Host::release_substitute() {
  // @@protoc_insertion_point(field_release:micromsg.Host.Substitute)
  clear_has_substitute();
  return substitute_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Host::set_allocated_substitute(::std::string* substitute) {
  if (substitute != NULL) {
    set_has_substitute();
  } else {
    clear_has_substitute();
  }
  substitute_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), substitute);
  // @@protoc_insertion_point(field_set_allocated:micromsg.Host.Substitute)
}

// optional int32 Priority = 3;
inline bool Host::has_priority() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Host::set_has_priority() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Host::clear_has_priority() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Host::clear_priority() {
  priority_ = 0;
  clear_has_priority();
}
inline ::google::protobuf::int32 Host::priority() const {
  // @@protoc_insertion_point(field_get:micromsg.Host.Priority)
  return priority_;
}
inline void Host::set_priority(::google::protobuf::int32 value) {
  set_has_priority();
  priority_ = value;
  // @@protoc_insertion_point(field_set:micromsg.Host.Priority)
}

// -------------------------------------------------------------------

// HostList

// required uint32 Count = 1;
inline bool HostList::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HostList::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HostList::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HostList::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 HostList::count() const {
  // @@protoc_insertion_point(field_get:micromsg.HostList.Count)
  return count_;
}
inline void HostList::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.HostList.Count)
}

// repeated .micromsg.Host List = 2;
inline int HostList::list_size() const {
  return list_.size();
}
inline void HostList::clear_list() {
  list_.Clear();
}
inline const ::micromsg::Host& HostList::list(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.HostList.List)
  return list_.Get(index);
}
inline ::micromsg::Host* HostList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.HostList.List)
  return list_.Mutable(index);
}
inline ::micromsg::Host* HostList::add_list() {
  // @@protoc_insertion_point(field_add:micromsg.HostList.List)
  return list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::Host >*
HostList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.HostList.List)
  return &list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::Host >&
HostList::list() const {
  // @@protoc_insertion_point(field_list:micromsg.HostList.List)
  return list_;
}

// -------------------------------------------------------------------

// PositionInfo

// required float Longitude = 1;
inline bool PositionInfo::has_longitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PositionInfo::set_has_longitude() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PositionInfo::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PositionInfo::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline float PositionInfo::longitude() const {
  // @@protoc_insertion_point(field_get:micromsg.PositionInfo.Longitude)
  return longitude_;
}
inline void PositionInfo::set_longitude(float value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PositionInfo.Longitude)
}

// required float Latitude = 2;
inline bool PositionInfo::has_latitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PositionInfo::set_has_latitude() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PositionInfo::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PositionInfo::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline float PositionInfo::latitude() const {
  // @@protoc_insertion_point(field_get:micromsg.PositionInfo.Latitude)
  return latitude_;
}
inline void PositionInfo::set_latitude(float value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PositionInfo.Latitude)
}

// required int32 Precision = 3;
inline bool PositionInfo::has_precision() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PositionInfo::set_has_precision() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PositionInfo::clear_has_precision() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PositionInfo::clear_precision() {
  precision_ = 0;
  clear_has_precision();
}
inline ::google::protobuf::int32 PositionInfo::precision() const {
  // @@protoc_insertion_point(field_get:micromsg.PositionInfo.Precision)
  return precision_;
}
inline void PositionInfo::set_precision(::google::protobuf::int32 value) {
  set_has_precision();
  precision_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PositionInfo.Precision)
}

// optional string MacAddr = 4;
inline bool PositionInfo::has_macaddr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PositionInfo::set_has_macaddr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PositionInfo::clear_has_macaddr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PositionInfo::clear_macaddr() {
  macaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_macaddr();
}
inline const ::std::string& PositionInfo::macaddr() const {
  // @@protoc_insertion_point(field_get:micromsg.PositionInfo.MacAddr)
  return macaddr_.GetNoArena();
}
inline void PositionInfo::set_macaddr(const ::std::string& value) {
  set_has_macaddr();
  macaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.PositionInfo.MacAddr)
}
#if LANG_CXX11
inline void PositionInfo::set_macaddr(::std::string&& value) {
  set_has_macaddr();
  macaddr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.PositionInfo.MacAddr)
}
#endif
inline void PositionInfo::set_macaddr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_macaddr();
  macaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.PositionInfo.MacAddr)
}
inline void PositionInfo::set_macaddr(const char* value, size_t size) {
  set_has_macaddr();
  macaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.PositionInfo.MacAddr)
}
inline ::std::string* PositionInfo::mutable_macaddr() {
  set_has_macaddr();
  // @@protoc_insertion_point(field_mutable:micromsg.PositionInfo.MacAddr)
  return macaddr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PositionInfo::release_macaddr() {
  // @@protoc_insertion_point(field_release:micromsg.PositionInfo.MacAddr)
  clear_has_macaddr();
  return macaddr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PositionInfo::set_allocated_macaddr(::std::string* macaddr) {
  if (macaddr != NULL) {
    set_has_macaddr();
  } else {
    clear_has_macaddr();
  }
  macaddr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), macaddr);
  // @@protoc_insertion_point(field_set_allocated:micromsg.PositionInfo.MacAddr)
}

// optional string CellId = 5;
inline bool PositionInfo::has_cellid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PositionInfo::set_has_cellid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PositionInfo::clear_has_cellid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PositionInfo::clear_cellid() {
  cellid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cellid();
}
inline const ::std::string& PositionInfo::cellid() const {
  // @@protoc_insertion_point(field_get:micromsg.PositionInfo.CellId)
  return cellid_.GetNoArena();
}
inline void PositionInfo::set_cellid(const ::std::string& value) {
  set_has_cellid();
  cellid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.PositionInfo.CellId)
}
#if LANG_CXX11
inline void PositionInfo::set_cellid(::std::string&& value) {
  set_has_cellid();
  cellid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.PositionInfo.CellId)
}
#endif
inline void PositionInfo::set_cellid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cellid();
  cellid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.PositionInfo.CellId)
}
inline void PositionInfo::set_cellid(const char* value, size_t size) {
  set_has_cellid();
  cellid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.PositionInfo.CellId)
}
inline ::std::string* PositionInfo::mutable_cellid() {
  set_has_cellid();
  // @@protoc_insertion_point(field_mutable:micromsg.PositionInfo.CellId)
  return cellid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PositionInfo::release_cellid() {
  // @@protoc_insertion_point(field_release:micromsg.PositionInfo.CellId)
  clear_has_cellid();
  return cellid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PositionInfo::set_allocated_cellid(::std::string* cellid) {
  if (cellid != NULL) {
    set_has_cellid();
  } else {
    clear_has_cellid();
  }
  cellid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cellid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.PositionInfo.CellId)
}

// required int32 GPSSource = 6;
inline bool PositionInfo::has_gpssource() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PositionInfo::set_has_gpssource() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PositionInfo::clear_has_gpssource() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PositionInfo::clear_gpssource() {
  gpssource_ = 0;
  clear_has_gpssource();
}
inline ::google::protobuf::int32 PositionInfo::gpssource() const {
  // @@protoc_insertion_point(field_get:micromsg.PositionInfo.GPSSource)
  return gpssource_;
}
inline void PositionInfo::set_gpssource(::google::protobuf::int32 value) {
  set_has_gpssource();
  gpssource_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PositionInfo.GPSSource)
}

// -------------------------------------------------------------------

// SnsUserInfo

// required uint32 SnsFlag = 1;
inline bool SnsUserInfo::has_snsflag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SnsUserInfo::set_has_snsflag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SnsUserInfo::clear_has_snsflag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SnsUserInfo::clear_snsflag() {
  snsflag_ = 0u;
  clear_has_snsflag();
}
inline ::google::protobuf::uint32 SnsUserInfo::snsflag() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsUserInfo.SnsFlag)
  return snsflag_;
}
inline void SnsUserInfo::set_snsflag(::google::protobuf::uint32 value) {
  set_has_snsflag();
  snsflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsUserInfo.SnsFlag)
}

// optional string SnsBGImgID = 2;
inline bool SnsUserInfo::has_snsbgimgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SnsUserInfo::set_has_snsbgimgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SnsUserInfo::clear_has_snsbgimgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SnsUserInfo::clear_snsbgimgid() {
  snsbgimgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_snsbgimgid();
}
inline const ::std::string& SnsUserInfo::snsbgimgid() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsUserInfo.SnsBGImgID)
  return snsbgimgid_.GetNoArena();
}
inline void SnsUserInfo::set_snsbgimgid(const ::std::string& value) {
  set_has_snsbgimgid();
  snsbgimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SnsUserInfo.SnsBGImgID)
}
#if LANG_CXX11
inline void SnsUserInfo::set_snsbgimgid(::std::string&& value) {
  set_has_snsbgimgid();
  snsbgimgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SnsUserInfo.SnsBGImgID)
}
#endif
inline void SnsUserInfo::set_snsbgimgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_snsbgimgid();
  snsbgimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SnsUserInfo.SnsBGImgID)
}
inline void SnsUserInfo::set_snsbgimgid(const char* value, size_t size) {
  set_has_snsbgimgid();
  snsbgimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SnsUserInfo.SnsBGImgID)
}
inline ::std::string* SnsUserInfo::mutable_snsbgimgid() {
  set_has_snsbgimgid();
  // @@protoc_insertion_point(field_mutable:micromsg.SnsUserInfo.SnsBGImgID)
  return snsbgimgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SnsUserInfo::release_snsbgimgid() {
  // @@protoc_insertion_point(field_release:micromsg.SnsUserInfo.SnsBGImgID)
  clear_has_snsbgimgid();
  return snsbgimgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SnsUserInfo::set_allocated_snsbgimgid(::std::string* snsbgimgid) {
  if (snsbgimgid != NULL) {
    set_has_snsbgimgid();
  } else {
    clear_has_snsbgimgid();
  }
  snsbgimgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), snsbgimgid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SnsUserInfo.SnsBGImgID)
}

// optional uint64 SnsBGObjectID = 3;
inline bool SnsUserInfo::has_snsbgobjectid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SnsUserInfo::set_has_snsbgobjectid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SnsUserInfo::clear_has_snsbgobjectid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SnsUserInfo::clear_snsbgobjectid() {
  snsbgobjectid_ = GOOGLE_ULONGLONG(0);
  clear_has_snsbgobjectid();
}
inline ::google::protobuf::uint64 SnsUserInfo::snsbgobjectid() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsUserInfo.SnsBGObjectID)
  return snsbgobjectid_;
}
inline void SnsUserInfo::set_snsbgobjectid(::google::protobuf::uint64 value) {
  set_has_snsbgobjectid();
  snsbgobjectid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsUserInfo.SnsBGObjectID)
}

// optional uint32 SnsFlagEx = 4;
inline bool SnsUserInfo::has_snsflagex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SnsUserInfo::set_has_snsflagex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SnsUserInfo::clear_has_snsflagex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SnsUserInfo::clear_snsflagex() {
  snsflagex_ = 0u;
  clear_has_snsflagex();
}
inline ::google::protobuf::uint32 SnsUserInfo::snsflagex() const {
  // @@protoc_insertion_point(field_get:micromsg.SnsUserInfo.SnsFlagEx)
  return snsflagex_;
}
inline void SnsUserInfo::set_snsflagex(::google::protobuf::uint32 value) {
  set_has_snsflagex();
  snsflagex_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SnsUserInfo.SnsFlagEx)
}

// -------------------------------------------------------------------

// CustomizedInfo

// required uint32 BrandFlag = 1;
inline bool CustomizedInfo::has_brandflag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CustomizedInfo::set_has_brandflag() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CustomizedInfo::clear_has_brandflag() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CustomizedInfo::clear_brandflag() {
  brandflag_ = 0u;
  clear_has_brandflag();
}
inline ::google::protobuf::uint32 CustomizedInfo::brandflag() const {
  // @@protoc_insertion_point(field_get:micromsg.CustomizedInfo.BrandFlag)
  return brandflag_;
}
inline void CustomizedInfo::set_brandflag(::google::protobuf::uint32 value) {
  set_has_brandflag();
  brandflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CustomizedInfo.BrandFlag)
}

// optional string ExternalInfo = 2;
inline bool CustomizedInfo::has_externalinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CustomizedInfo::set_has_externalinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CustomizedInfo::clear_has_externalinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CustomizedInfo::clear_externalinfo() {
  externalinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_externalinfo();
}
inline const ::std::string& CustomizedInfo::externalinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.CustomizedInfo.ExternalInfo)
  return externalinfo_.GetNoArena();
}
inline void CustomizedInfo::set_externalinfo(const ::std::string& value) {
  set_has_externalinfo();
  externalinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CustomizedInfo.ExternalInfo)
}
#if LANG_CXX11
inline void CustomizedInfo::set_externalinfo(::std::string&& value) {
  set_has_externalinfo();
  externalinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CustomizedInfo.ExternalInfo)
}
#endif
inline void CustomizedInfo::set_externalinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_externalinfo();
  externalinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CustomizedInfo.ExternalInfo)
}
inline void CustomizedInfo::set_externalinfo(const char* value, size_t size) {
  set_has_externalinfo();
  externalinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CustomizedInfo.ExternalInfo)
}
inline ::std::string* CustomizedInfo::mutable_externalinfo() {
  set_has_externalinfo();
  // @@protoc_insertion_point(field_mutable:micromsg.CustomizedInfo.ExternalInfo)
  return externalinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CustomizedInfo::release_externalinfo() {
  // @@protoc_insertion_point(field_release:micromsg.CustomizedInfo.ExternalInfo)
  clear_has_externalinfo();
  return externalinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CustomizedInfo::set_allocated_externalinfo(::std::string* externalinfo) {
  if (externalinfo != NULL) {
    set_has_externalinfo();
  } else {
    clear_has_externalinfo();
  }
  externalinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), externalinfo);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CustomizedInfo.ExternalInfo)
}

// optional string BrandInfo = 3;
inline bool CustomizedInfo::has_brandinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CustomizedInfo::set_has_brandinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CustomizedInfo::clear_has_brandinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CustomizedInfo::clear_brandinfo() {
  brandinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_brandinfo();
}
inline const ::std::string& CustomizedInfo::brandinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.CustomizedInfo.BrandInfo)
  return brandinfo_.GetNoArena();
}
inline void CustomizedInfo::set_brandinfo(const ::std::string& value) {
  set_has_brandinfo();
  brandinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CustomizedInfo.BrandInfo)
}
#if LANG_CXX11
inline void CustomizedInfo::set_brandinfo(::std::string&& value) {
  set_has_brandinfo();
  brandinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CustomizedInfo.BrandInfo)
}
#endif
inline void CustomizedInfo::set_brandinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_brandinfo();
  brandinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CustomizedInfo.BrandInfo)
}
inline void CustomizedInfo::set_brandinfo(const char* value, size_t size) {
  set_has_brandinfo();
  brandinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CustomizedInfo.BrandInfo)
}
inline ::std::string* CustomizedInfo::mutable_brandinfo() {
  set_has_brandinfo();
  // @@protoc_insertion_point(field_mutable:micromsg.CustomizedInfo.BrandInfo)
  return brandinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CustomizedInfo::release_brandinfo() {
  // @@protoc_insertion_point(field_release:micromsg.CustomizedInfo.BrandInfo)
  clear_has_brandinfo();
  return brandinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CustomizedInfo::set_allocated_brandinfo(::std::string* brandinfo) {
  if (brandinfo != NULL) {
    set_has_brandinfo();
  } else {
    clear_has_brandinfo();
  }
  brandinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brandinfo);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CustomizedInfo.BrandInfo)
}

// optional string BrandIconURL = 4;
inline bool CustomizedInfo::has_brandiconurl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CustomizedInfo::set_has_brandiconurl() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CustomizedInfo::clear_has_brandiconurl() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CustomizedInfo::clear_brandiconurl() {
  brandiconurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_brandiconurl();
}
inline const ::std::string& CustomizedInfo::brandiconurl() const {
  // @@protoc_insertion_point(field_get:micromsg.CustomizedInfo.BrandIconURL)
  return brandiconurl_.GetNoArena();
}
inline void CustomizedInfo::set_brandiconurl(const ::std::string& value) {
  set_has_brandiconurl();
  brandiconurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CustomizedInfo.BrandIconURL)
}
#if LANG_CXX11
inline void CustomizedInfo::set_brandiconurl(::std::string&& value) {
  set_has_brandiconurl();
  brandiconurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CustomizedInfo.BrandIconURL)
}
#endif
inline void CustomizedInfo::set_brandiconurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_brandiconurl();
  brandiconurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CustomizedInfo.BrandIconURL)
}
inline void CustomizedInfo::set_brandiconurl(const char* value, size_t size) {
  set_has_brandiconurl();
  brandiconurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CustomizedInfo.BrandIconURL)
}
inline ::std::string* CustomizedInfo::mutable_brandiconurl() {
  set_has_brandiconurl();
  // @@protoc_insertion_point(field_mutable:micromsg.CustomizedInfo.BrandIconURL)
  return brandiconurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CustomizedInfo::release_brandiconurl() {
  // @@protoc_insertion_point(field_release:micromsg.CustomizedInfo.BrandIconURL)
  clear_has_brandiconurl();
  return brandiconurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CustomizedInfo::set_allocated_brandiconurl(::std::string* brandiconurl) {
  if (brandiconurl != NULL) {
    set_has_brandiconurl();
  } else {
    clear_has_brandiconurl();
  }
  brandiconurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brandiconurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CustomizedInfo.BrandIconURL)
}

// -------------------------------------------------------------------

// CmdItem

// required int32 CmdId = 1;
inline bool CmdItem::has_cmdid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdItem::set_has_cmdid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdItem::clear_has_cmdid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdItem::clear_cmdid() {
  cmdid_ = 0;
  clear_has_cmdid();
}
inline ::google::protobuf::int32 CmdItem::cmdid() const {
  // @@protoc_insertion_point(field_get:micromsg.CmdItem.CmdId)
  return cmdid_;
}
inline void CmdItem::set_cmdid(::google::protobuf::int32 value) {
  set_has_cmdid();
  cmdid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CmdItem.CmdId)
}

// required .micromsg.SKBuiltinBuffer_t CmdBuf = 2;
inline bool CmdItem::has_cmdbuf() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdItem::set_has_cmdbuf() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdItem::clear_has_cmdbuf() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdItem::clear_cmdbuf() {
  if (cmdbuf_ != NULL) cmdbuf_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_cmdbuf();
}
inline const ::micromsg::SKBuiltinBuffer_t& CmdItem::cmdbuf() const {
  // @@protoc_insertion_point(field_get:micromsg.CmdItem.CmdBuf)
  return cmdbuf_ != NULL ? *cmdbuf_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinBuffer_t* CmdItem::mutable_cmdbuf() {
  set_has_cmdbuf();
  if (cmdbuf_ == NULL) {
    cmdbuf_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CmdItem.CmdBuf)
  return cmdbuf_;
}
inline ::micromsg::SKBuiltinBuffer_t* CmdItem::release_cmdbuf() {
  // @@protoc_insertion_point(field_release:micromsg.CmdItem.CmdBuf)
  clear_has_cmdbuf();
  ::micromsg::SKBuiltinBuffer_t* temp = cmdbuf_;
  cmdbuf_ = NULL;
  return temp;
}
inline void CmdItem::set_allocated_cmdbuf(::micromsg::SKBuiltinBuffer_t* cmdbuf) {
  delete cmdbuf_;
  cmdbuf_ = cmdbuf;
  if (cmdbuf) {
    set_has_cmdbuf();
  } else {
    clear_has_cmdbuf();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CmdItem.CmdBuf)
}

// -------------------------------------------------------------------

// CmdList

// required uint32 Count = 1;
inline bool CmdList::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdList::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdList::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdList::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 CmdList::count() const {
  // @@protoc_insertion_point(field_get:micromsg.CmdList.Count)
  return count_;
}
inline void CmdList::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CmdList.Count)
}

// repeated .micromsg.CmdItem List = 2;
inline int CmdList::list_size() const {
  return list_.size();
}
inline void CmdList::clear_list() {
  list_.Clear();
}
inline const ::micromsg::CmdItem& CmdList::list(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.CmdList.List)
  return list_.Get(index);
}
inline ::micromsg::CmdItem* CmdList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.CmdList.List)
  return list_.Mutable(index);
}
inline ::micromsg::CmdItem* CmdList::add_list() {
  // @@protoc_insertion_point(field_add:micromsg.CmdList.List)
  return list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::CmdItem >*
CmdList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.CmdList.List)
  return &list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::CmdItem >&
CmdList::list() const {
  // @@protoc_insertion_point(field_list:micromsg.CmdList.List)
  return list_;
}

// -------------------------------------------------------------------

// ShakeSyncRequest

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool ShakeSyncRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ShakeSyncRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ShakeSyncRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ShakeSyncRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& ShakeSyncRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.ShakeSyncRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* ShakeSyncRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ShakeSyncRequest.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* ShakeSyncRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.ShakeSyncRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void ShakeSyncRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ShakeSyncRequest.BaseRequest)
}

// required float Longitude = 2;
inline bool ShakeSyncRequest::has_longitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ShakeSyncRequest::set_has_longitude() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ShakeSyncRequest::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ShakeSyncRequest::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline float ShakeSyncRequest::longitude() const {
  // @@protoc_insertion_point(field_get:micromsg.ShakeSyncRequest.Longitude)
  return longitude_;
}
inline void ShakeSyncRequest::set_longitude(float value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ShakeSyncRequest.Longitude)
}

// required float Latitude = 3;
inline bool ShakeSyncRequest::has_latitude() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ShakeSyncRequest::set_has_latitude() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ShakeSyncRequest::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ShakeSyncRequest::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline float ShakeSyncRequest::latitude() const {
  // @@protoc_insertion_point(field_get:micromsg.ShakeSyncRequest.Latitude)
  return latitude_;
}
inline void ShakeSyncRequest::set_latitude(float value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ShakeSyncRequest.Latitude)
}

// required int32 Precision = 4;
inline bool ShakeSyncRequest::has_precision() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ShakeSyncRequest::set_has_precision() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ShakeSyncRequest::clear_has_precision() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ShakeSyncRequest::clear_precision() {
  precision_ = 0;
  clear_has_precision();
}
inline ::google::protobuf::int32 ShakeSyncRequest::precision() const {
  // @@protoc_insertion_point(field_get:micromsg.ShakeSyncRequest.Precision)
  return precision_;
}
inline void ShakeSyncRequest::set_precision(::google::protobuf::int32 value) {
  set_has_precision();
  precision_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ShakeSyncRequest.Precision)
}

// optional string MacAddr = 5;
inline bool ShakeSyncRequest::has_macaddr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShakeSyncRequest::set_has_macaddr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShakeSyncRequest::clear_has_macaddr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShakeSyncRequest::clear_macaddr() {
  macaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_macaddr();
}
inline const ::std::string& ShakeSyncRequest::macaddr() const {
  // @@protoc_insertion_point(field_get:micromsg.ShakeSyncRequest.MacAddr)
  return macaddr_.GetNoArena();
}
inline void ShakeSyncRequest::set_macaddr(const ::std::string& value) {
  set_has_macaddr();
  macaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ShakeSyncRequest.MacAddr)
}
#if LANG_CXX11
inline void ShakeSyncRequest::set_macaddr(::std::string&& value) {
  set_has_macaddr();
  macaddr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ShakeSyncRequest.MacAddr)
}
#endif
inline void ShakeSyncRequest::set_macaddr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_macaddr();
  macaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ShakeSyncRequest.MacAddr)
}
inline void ShakeSyncRequest::set_macaddr(const char* value, size_t size) {
  set_has_macaddr();
  macaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ShakeSyncRequest.MacAddr)
}
inline ::std::string* ShakeSyncRequest::mutable_macaddr() {
  set_has_macaddr();
  // @@protoc_insertion_point(field_mutable:micromsg.ShakeSyncRequest.MacAddr)
  return macaddr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShakeSyncRequest::release_macaddr() {
  // @@protoc_insertion_point(field_release:micromsg.ShakeSyncRequest.MacAddr)
  clear_has_macaddr();
  return macaddr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShakeSyncRequest::set_allocated_macaddr(::std::string* macaddr) {
  if (macaddr != NULL) {
    set_has_macaddr();
  } else {
    clear_has_macaddr();
  }
  macaddr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), macaddr);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ShakeSyncRequest.MacAddr)
}

// optional string CellId = 6;
inline bool ShakeSyncRequest::has_cellid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShakeSyncRequest::set_has_cellid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShakeSyncRequest::clear_has_cellid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShakeSyncRequest::clear_cellid() {
  cellid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cellid();
}
inline const ::std::string& ShakeSyncRequest::cellid() const {
  // @@protoc_insertion_point(field_get:micromsg.ShakeSyncRequest.CellId)
  return cellid_.GetNoArena();
}
inline void ShakeSyncRequest::set_cellid(const ::std::string& value) {
  set_has_cellid();
  cellid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ShakeSyncRequest.CellId)
}
#if LANG_CXX11
inline void ShakeSyncRequest::set_cellid(::std::string&& value) {
  set_has_cellid();
  cellid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ShakeSyncRequest.CellId)
}
#endif
inline void ShakeSyncRequest::set_cellid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cellid();
  cellid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ShakeSyncRequest.CellId)
}
inline void ShakeSyncRequest::set_cellid(const char* value, size_t size) {
  set_has_cellid();
  cellid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ShakeSyncRequest.CellId)
}
inline ::std::string* ShakeSyncRequest::mutable_cellid() {
  set_has_cellid();
  // @@protoc_insertion_point(field_mutable:micromsg.ShakeSyncRequest.CellId)
  return cellid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShakeSyncRequest::release_cellid() {
  // @@protoc_insertion_point(field_release:micromsg.ShakeSyncRequest.CellId)
  clear_has_cellid();
  return cellid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShakeSyncRequest::set_allocated_cellid(::std::string* cellid) {
  if (cellid != NULL) {
    set_has_cellid();
  } else {
    clear_has_cellid();
  }
  cellid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cellid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ShakeSyncRequest.CellId)
}

// required uint32 ImgId = 7;
inline bool ShakeSyncRequest::has_imgid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ShakeSyncRequest::set_has_imgid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ShakeSyncRequest::clear_has_imgid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ShakeSyncRequest::clear_imgid() {
  imgid_ = 0u;
  clear_has_imgid();
}
inline ::google::protobuf::uint32 ShakeSyncRequest::imgid() const {
  // @@protoc_insertion_point(field_get:micromsg.ShakeSyncRequest.ImgId)
  return imgid_;
}
inline void ShakeSyncRequest::set_imgid(::google::protobuf::uint32 value) {
  set_has_imgid();
  imgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ShakeSyncRequest.ImgId)
}

// required uint32 Times = 8;
inline bool ShakeSyncRequest::has_times() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ShakeSyncRequest::set_has_times() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ShakeSyncRequest::clear_has_times() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ShakeSyncRequest::clear_times() {
  times_ = 0u;
  clear_has_times();
}
inline ::google::protobuf::uint32 ShakeSyncRequest::times() const {
  // @@protoc_insertion_point(field_get:micromsg.ShakeSyncRequest.Times)
  return times_;
}
inline void ShakeSyncRequest::set_times(::google::protobuf::uint32 value) {
  set_has_times();
  times_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ShakeSyncRequest.Times)
}

// -------------------------------------------------------------------

// ShakeSyncResponse

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool ShakeSyncResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShakeSyncResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShakeSyncResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShakeSyncResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& ShakeSyncResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.ShakeSyncResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* ShakeSyncResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ShakeSyncResponse.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* ShakeSyncResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.ShakeSyncResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void ShakeSyncResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ShakeSyncResponse.BaseResponse)
}

// required .micromsg.SKBuiltinBuffer_t Buffer = 2;
inline bool ShakeSyncResponse::has_buffer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShakeSyncResponse::set_has_buffer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShakeSyncResponse::clear_has_buffer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShakeSyncResponse::clear_buffer() {
  if (buffer_ != NULL) buffer_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_buffer();
}
inline const ::micromsg::SKBuiltinBuffer_t& ShakeSyncResponse::buffer() const {
  // @@protoc_insertion_point(field_get:micromsg.ShakeSyncResponse.Buffer)
  return buffer_ != NULL ? *buffer_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinBuffer_t* ShakeSyncResponse::mutable_buffer() {
  set_has_buffer();
  if (buffer_ == NULL) {
    buffer_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ShakeSyncResponse.Buffer)
  return buffer_;
}
inline ::micromsg::SKBuiltinBuffer_t* ShakeSyncResponse::release_buffer() {
  // @@protoc_insertion_point(field_release:micromsg.ShakeSyncResponse.Buffer)
  clear_has_buffer();
  ::micromsg::SKBuiltinBuffer_t* temp = buffer_;
  buffer_ = NULL;
  return temp;
}
inline void ShakeSyncResponse::set_allocated_buffer(::micromsg::SKBuiltinBuffer_t* buffer) {
  delete buffer_;
  buffer_ = buffer;
  if (buffer) {
    set_has_buffer();
  } else {
    clear_has_buffer();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ShakeSyncResponse.Buffer)
}

// required uint32 Ret = 3;
inline bool ShakeSyncResponse::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ShakeSyncResponse::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ShakeSyncResponse::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ShakeSyncResponse::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 ShakeSyncResponse::ret() const {
  // @@protoc_insertion_point(field_get:micromsg.ShakeSyncResponse.Ret)
  return ret_;
}
inline void ShakeSyncResponse::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ShakeSyncResponse.Ret)
}

// required uint32 ImgId = 4;
inline bool ShakeSyncResponse::has_imgid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ShakeSyncResponse::set_has_imgid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ShakeSyncResponse::clear_has_imgid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ShakeSyncResponse::clear_imgid() {
  imgid_ = 0u;
  clear_has_imgid();
}
inline ::google::protobuf::uint32 ShakeSyncResponse::imgid() const {
  // @@protoc_insertion_point(field_get:micromsg.ShakeSyncResponse.ImgId)
  return imgid_;
}
inline void ShakeSyncResponse::set_imgid(::google::protobuf::uint32 value) {
  set_has_imgid();
  imgid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ShakeSyncResponse.ImgId)
}

// required uint32 ImgTotoalLen = 5;
inline bool ShakeSyncResponse::has_imgtotoallen() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ShakeSyncResponse::set_has_imgtotoallen() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ShakeSyncResponse::clear_has_imgtotoallen() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ShakeSyncResponse::clear_imgtotoallen() {
  imgtotoallen_ = 0u;
  clear_has_imgtotoallen();
}
inline ::google::protobuf::uint32 ShakeSyncResponse::imgtotoallen() const {
  // @@protoc_insertion_point(field_get:micromsg.ShakeSyncResponse.ImgTotoalLen)
  return imgtotoallen_;
}
inline void ShakeSyncResponse::set_imgtotoallen(::google::protobuf::uint32 value) {
  set_has_imgtotoallen();
  imgtotoallen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ShakeSyncResponse.ImgTotoalLen)
}

// -------------------------------------------------------------------

// BindEmailRequest

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool BindEmailRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BindEmailRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BindEmailRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BindEmailRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& BindEmailRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.BindEmailRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* BindEmailRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BindEmailRequest.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* BindEmailRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.BindEmailRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void BindEmailRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindEmailRequest.BaseRequest)
}

// required uint32 OpCode = 2;
inline bool BindEmailRequest::has_opcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BindEmailRequest::set_has_opcode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BindEmailRequest::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BindEmailRequest::clear_opcode() {
  opcode_ = 0u;
  clear_has_opcode();
}
inline ::google::protobuf::uint32 BindEmailRequest::opcode() const {
  // @@protoc_insertion_point(field_get:micromsg.BindEmailRequest.OpCode)
  return opcode_;
}
inline void BindEmailRequest::set_opcode(::google::protobuf::uint32 value) {
  set_has_opcode();
  opcode_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BindEmailRequest.OpCode)
}

// optional string Email = 3;
inline bool BindEmailRequest::has_email() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BindEmailRequest::set_has_email() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BindEmailRequest::clear_has_email() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BindEmailRequest::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_email();
}
inline const ::std::string& BindEmailRequest::email() const {
  // @@protoc_insertion_point(field_get:micromsg.BindEmailRequest.Email)
  return email_.GetNoArena();
}
inline void BindEmailRequest::set_email(const ::std::string& value) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BindEmailRequest.Email)
}
#if LANG_CXX11
inline void BindEmailRequest::set_email(::std::string&& value) {
  set_has_email();
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BindEmailRequest.Email)
}
#endif
inline void BindEmailRequest::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BindEmailRequest.Email)
}
inline void BindEmailRequest::set_email(const char* value, size_t size) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BindEmailRequest.Email)
}
inline ::std::string* BindEmailRequest::mutable_email() {
  set_has_email();
  // @@protoc_insertion_point(field_mutable:micromsg.BindEmailRequest.Email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BindEmailRequest::release_email() {
  // @@protoc_insertion_point(field_release:micromsg.BindEmailRequest.Email)
  clear_has_email();
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BindEmailRequest::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    set_has_email();
  } else {
    clear_has_email();
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindEmailRequest.Email)
}

// -------------------------------------------------------------------

// BindEmailResponse

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool BindEmailResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BindEmailResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BindEmailResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BindEmailResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& BindEmailResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.BindEmailResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* BindEmailResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BindEmailResponse.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* BindEmailResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.BindEmailResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void BindEmailResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BindEmailResponse.BaseResponse)
}

// -------------------------------------------------------------------

// GetLocationRequest

// required .micromsg.BaseRequest BaseRequest = 1;
inline bool GetLocationRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetLocationRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetLocationRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetLocationRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
inline const ::micromsg::BaseRequest& GetLocationRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetLocationRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
inline ::micromsg::BaseRequest* GetLocationRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetLocationRequest.BaseRequest)
  return baserequest_;
}
inline ::micromsg::BaseRequest* GetLocationRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetLocationRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
inline void GetLocationRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetLocationRequest.BaseRequest)
}

// required int32 Longitude = 3;
inline bool GetLocationRequest::has_longitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetLocationRequest::set_has_longitude() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetLocationRequest::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetLocationRequest::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline ::google::protobuf::int32 GetLocationRequest::longitude() const {
  // @@protoc_insertion_point(field_get:micromsg.GetLocationRequest.Longitude)
  return longitude_;
}
inline void GetLocationRequest::set_longitude(::google::protobuf::int32 value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetLocationRequest.Longitude)
}

// required int32 Latitude = 4;
inline bool GetLocationRequest::has_latitude() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GetLocationRequest::set_has_latitude() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GetLocationRequest::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GetLocationRequest::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline ::google::protobuf::int32 GetLocationRequest::latitude() const {
  // @@protoc_insertion_point(field_get:micromsg.GetLocationRequest.Latitude)
  return latitude_;
}
inline void GetLocationRequest::set_latitude(::google::protobuf::int32 value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetLocationRequest.Latitude)
}

// required int32 Precision = 5;
inline bool GetLocationRequest::has_precision() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GetLocationRequest::set_has_precision() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GetLocationRequest::clear_has_precision() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GetLocationRequest::clear_precision() {
  precision_ = 0;
  clear_has_precision();
}
inline ::google::protobuf::int32 GetLocationRequest::precision() const {
  // @@protoc_insertion_point(field_get:micromsg.GetLocationRequest.Precision)
  return precision_;
}
inline void GetLocationRequest::set_precision(::google::protobuf::int32 value) {
  set_has_precision();
  precision_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetLocationRequest.Precision)
}

// optional string MacAddr = 6;
inline bool GetLocationRequest::has_macaddr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetLocationRequest::set_has_macaddr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetLocationRequest::clear_has_macaddr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetLocationRequest::clear_macaddr() {
  macaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_macaddr();
}
inline const ::std::string& GetLocationRequest::macaddr() const {
  // @@protoc_insertion_point(field_get:micromsg.GetLocationRequest.MacAddr)
  return macaddr_.GetNoArena();
}
inline void GetLocationRequest::set_macaddr(const ::std::string& value) {
  set_has_macaddr();
  macaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetLocationRequest.MacAddr)
}
#if LANG_CXX11
inline void GetLocationRequest::set_macaddr(::std::string&& value) {
  set_has_macaddr();
  macaddr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetLocationRequest.MacAddr)
}
#endif
inline void GetLocationRequest::set_macaddr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_macaddr();
  macaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetLocationRequest.MacAddr)
}
inline void GetLocationRequest::set_macaddr(const char* value, size_t size) {
  set_has_macaddr();
  macaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetLocationRequest.MacAddr)
}
inline ::std::string* GetLocationRequest::mutable_macaddr() {
  set_has_macaddr();
  // @@protoc_insertion_point(field_mutable:micromsg.GetLocationRequest.MacAddr)
  return macaddr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetLocationRequest::release_macaddr() {
  // @@protoc_insertion_point(field_release:micromsg.GetLocationRequest.MacAddr)
  clear_has_macaddr();
  return macaddr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetLocationRequest::set_allocated_macaddr(::std::string* macaddr) {
  if (macaddr != NULL) {
    set_has_macaddr();
  } else {
    clear_has_macaddr();
  }
  macaddr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), macaddr);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetLocationRequest.MacAddr)
}

// optional string CellId = 7;
inline bool GetLocationRequest::has_cellid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetLocationRequest::set_has_cellid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetLocationRequest::clear_has_cellid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetLocationRequest::clear_cellid() {
  cellid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cellid();
}
inline const ::std::string& GetLocationRequest::cellid() const {
  // @@protoc_insertion_point(field_get:micromsg.GetLocationRequest.CellId)
  return cellid_.GetNoArena();
}
inline void GetLocationRequest::set_cellid(const ::std::string& value) {
  set_has_cellid();
  cellid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetLocationRequest.CellId)
}
#if LANG_CXX11
inline void GetLocationRequest::set_cellid(::std::string&& value) {
  set_has_cellid();
  cellid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetLocationRequest.CellId)
}
#endif
inline void GetLocationRequest::set_cellid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cellid();
  cellid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetLocationRequest.CellId)
}
inline void GetLocationRequest::set_cellid(const char* value, size_t size) {
  set_has_cellid();
  cellid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetLocationRequest.CellId)
}
inline ::std::string* GetLocationRequest::mutable_cellid() {
  set_has_cellid();
  // @@protoc_insertion_point(field_mutable:micromsg.GetLocationRequest.CellId)
  return cellid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetLocationRequest::release_cellid() {
  // @@protoc_insertion_point(field_release:micromsg.GetLocationRequest.CellId)
  clear_has_cellid();
  return cellid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetLocationRequest::set_allocated_cellid(::std::string* cellid) {
  if (cellid != NULL) {
    set_has_cellid();
  } else {
    clear_has_cellid();
  }
  cellid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cellid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetLocationRequest.CellId)
}

// optional int32 GPSSource = 8;
inline bool GetLocationRequest::has_gpssource() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GetLocationRequest::set_has_gpssource() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GetLocationRequest::clear_has_gpssource() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GetLocationRequest::clear_gpssource() {
  gpssource_ = 0;
  clear_has_gpssource();
}
inline ::google::protobuf::int32 GetLocationRequest::gpssource() const {
  // @@protoc_insertion_point(field_get:micromsg.GetLocationRequest.GPSSource)
  return gpssource_;
}
inline void GetLocationRequest::set_gpssource(::google::protobuf::int32 value) {
  set_has_gpssource();
  gpssource_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetLocationRequest.GPSSource)
}

// -------------------------------------------------------------------

// GetLocationResponse

// required .micromsg.BaseResponse BaseResponse = 1;
inline bool GetLocationResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetLocationResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetLocationResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetLocationResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
inline const ::micromsg::BaseResponse& GetLocationResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetLocationResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
inline ::micromsg::BaseResponse* GetLocationResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetLocationResponse.BaseResponse)
  return baseresponse_;
}
inline ::micromsg::BaseResponse* GetLocationResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetLocationResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
inline void GetLocationResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetLocationResponse.BaseResponse)
}

// required int32 Longitude = 2;
inline bool GetLocationResponse::has_longitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetLocationResponse::set_has_longitude() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetLocationResponse::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetLocationResponse::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline ::google::protobuf::int32 GetLocationResponse::longitude() const {
  // @@protoc_insertion_point(field_get:micromsg.GetLocationResponse.Longitude)
  return longitude_;
}
inline void GetLocationResponse::set_longitude(::google::protobuf::int32 value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetLocationResponse.Longitude)
}

// required int32 Latitude = 3;
inline bool GetLocationResponse::has_latitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetLocationResponse::set_has_latitude() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetLocationResponse::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetLocationResponse::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline ::google::protobuf::int32 GetLocationResponse::latitude() const {
  // @@protoc_insertion_point(field_get:micromsg.GetLocationResponse.Latitude)
  return latitude_;
}
inline void GetLocationResponse::set_latitude(::google::protobuf::int32 value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetLocationResponse.Latitude)
}

// -------------------------------------------------------------------

// RoomInfo

// required .micromsg.SKBuiltinString_t UserName = 1;
inline bool RoomInfo::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoomInfo::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoomInfo::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoomInfo::clear_username() {
  if (username_ != NULL) username_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_username();
}
inline const ::micromsg::SKBuiltinString_t& RoomInfo::username() const {
  // @@protoc_insertion_point(field_get:micromsg.RoomInfo.UserName)
  return username_ != NULL ? *username_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinString_t* RoomInfo::mutable_username() {
  set_has_username();
  if (username_ == NULL) {
    username_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.RoomInfo.UserName)
  return username_;
}
inline ::micromsg::SKBuiltinString_t* RoomInfo::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.RoomInfo.UserName)
  clear_has_username();
  ::micromsg::SKBuiltinString_t* temp = username_;
  username_ = NULL;
  return temp;
}
inline void RoomInfo::set_allocated_username(::micromsg::SKBuiltinString_t* username) {
  delete username_;
  username_ = username;
  if (username) {
    set_has_username();
  } else {
    clear_has_username();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.RoomInfo.UserName)
}

// required .micromsg.SKBuiltinString_t NickName = 2;
inline bool RoomInfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoomInfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoomInfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoomInfo::clear_nickname() {
  if (nickname_ != NULL) nickname_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_nickname();
}
inline const ::micromsg::SKBuiltinString_t& RoomInfo::nickname() const {
  // @@protoc_insertion_point(field_get:micromsg.RoomInfo.NickName)
  return nickname_ != NULL ? *nickname_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinString_t* RoomInfo::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == NULL) {
    nickname_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.RoomInfo.NickName)
  return nickname_;
}
inline ::micromsg::SKBuiltinString_t* RoomInfo::release_nickname() {
  // @@protoc_insertion_point(field_release:micromsg.RoomInfo.NickName)
  clear_has_nickname();
  ::micromsg::SKBuiltinString_t* temp = nickname_;
  nickname_ = NULL;
  return temp;
}
inline void RoomInfo::set_allocated_nickname(::micromsg::SKBuiltinString_t* nickname) {
  delete nickname_;
  nickname_ = nickname;
  if (nickname) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.RoomInfo.NickName)
}

// -------------------------------------------------------------------

// CDNDnsInfo

// required uint32 Ver = 1;
inline bool CDNDnsInfo::has_ver() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDNDnsInfo::set_has_ver() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDNDnsInfo::clear_has_ver() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDNDnsInfo::clear_ver() {
  ver_ = 0u;
  clear_has_ver();
}
inline ::google::protobuf::uint32 CDNDnsInfo::ver() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNDnsInfo.Ver)
  return ver_;
}
inline void CDNDnsInfo::set_ver(::google::protobuf::uint32 value) {
  set_has_ver();
  ver_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CDNDnsInfo.Ver)
}

// required uint32 Uin = 2;
inline bool CDNDnsInfo::has_uin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDNDnsInfo::set_has_uin() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CDNDnsInfo::clear_has_uin() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CDNDnsInfo::clear_uin() {
  uin_ = 0u;
  clear_has_uin();
}
inline ::google::protobuf::uint32 CDNDnsInfo::uin() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNDnsInfo.Uin)
  return uin_;
}
inline void CDNDnsInfo::set_uin(::google::protobuf::uint32 value) {
  set_has_uin();
  uin_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CDNDnsInfo.Uin)
}

// required uint32 ExpireTime = 3;
inline bool CDNDnsInfo::has_expiretime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CDNDnsInfo::set_has_expiretime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CDNDnsInfo::clear_has_expiretime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CDNDnsInfo::clear_expiretime() {
  expiretime_ = 0u;
  clear_has_expiretime();
}
inline ::google::protobuf::uint32 CDNDnsInfo::expiretime() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNDnsInfo.ExpireTime)
  return expiretime_;
}
inline void CDNDnsInfo::set_expiretime(::google::protobuf::uint32 value) {
  set_has_expiretime();
  expiretime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CDNDnsInfo.ExpireTime)
}

// required int32 FrontID = 4;
inline bool CDNDnsInfo::has_frontid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CDNDnsInfo::set_has_frontid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CDNDnsInfo::clear_has_frontid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CDNDnsInfo::clear_frontid() {
  frontid_ = 0;
  clear_has_frontid();
}
inline ::google::protobuf::int32 CDNDnsInfo::frontid() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNDnsInfo.FrontID)
  return frontid_;
}
inline void CDNDnsInfo::set_frontid(::google::protobuf::int32 value) {
  set_has_frontid();
  frontid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CDNDnsInfo.FrontID)
}

// required int32 FrontIPCount = 5;
inline bool CDNDnsInfo::has_frontipcount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CDNDnsInfo::set_has_frontipcount() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CDNDnsInfo::clear_has_frontipcount() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CDNDnsInfo::clear_frontipcount() {
  frontipcount_ = 0;
  clear_has_frontipcount();
}
inline ::google::protobuf::int32 CDNDnsInfo::frontipcount() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNDnsInfo.FrontIPCount)
  return frontipcount_;
}
inline void CDNDnsInfo::set_frontipcount(::google::protobuf::int32 value) {
  set_has_frontipcount();
  frontipcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CDNDnsInfo.FrontIPCount)
}

// repeated .micromsg.SKBuiltinString_t FrontIPList = 6;
inline int CDNDnsInfo::frontiplist_size() const {
  return frontiplist_.size();
}
inline void CDNDnsInfo::clear_frontiplist() {
  frontiplist_.Clear();
}
inline const ::micromsg::SKBuiltinString_t& CDNDnsInfo::frontiplist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.CDNDnsInfo.FrontIPList)
  return frontiplist_.Get(index);
}
inline ::micromsg::SKBuiltinString_t* CDNDnsInfo::mutable_frontiplist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.CDNDnsInfo.FrontIPList)
  return frontiplist_.Mutable(index);
}
inline ::micromsg::SKBuiltinString_t* CDNDnsInfo::add_frontiplist() {
  // @@protoc_insertion_point(field_add:micromsg.CDNDnsInfo.FrontIPList)
  return frontiplist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >*
CDNDnsInfo::mutable_frontiplist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.CDNDnsInfo.FrontIPList)
  return &frontiplist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >&
CDNDnsInfo::frontiplist() const {
  // @@protoc_insertion_point(field_list:micromsg.CDNDnsInfo.FrontIPList)
  return frontiplist_;
}

// optional string ZoneDomain = 7;
inline bool CDNDnsInfo::has_zonedomain() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDNDnsInfo::set_has_zonedomain() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDNDnsInfo::clear_has_zonedomain() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDNDnsInfo::clear_zonedomain() {
  zonedomain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_zonedomain();
}
inline const ::std::string& CDNDnsInfo::zonedomain() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNDnsInfo.ZoneDomain)
  return zonedomain_.GetNoArena();
}
inline void CDNDnsInfo::set_zonedomain(const ::std::string& value) {
  set_has_zonedomain();
  zonedomain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CDNDnsInfo.ZoneDomain)
}
#if LANG_CXX11
inline void CDNDnsInfo::set_zonedomain(::std::string&& value) {
  set_has_zonedomain();
  zonedomain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CDNDnsInfo.ZoneDomain)
}
#endif
inline void CDNDnsInfo::set_zonedomain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_zonedomain();
  zonedomain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CDNDnsInfo.ZoneDomain)
}
inline void CDNDnsInfo::set_zonedomain(const char* value, size_t size) {
  set_has_zonedomain();
  zonedomain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CDNDnsInfo.ZoneDomain)
}
inline ::std::string* CDNDnsInfo::mutable_zonedomain() {
  set_has_zonedomain();
  // @@protoc_insertion_point(field_mutable:micromsg.CDNDnsInfo.ZoneDomain)
  return zonedomain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CDNDnsInfo::release_zonedomain() {
  // @@protoc_insertion_point(field_release:micromsg.CDNDnsInfo.ZoneDomain)
  clear_has_zonedomain();
  return zonedomain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDNDnsInfo::set_allocated_zonedomain(::std::string* zonedomain) {
  if (zonedomain != NULL) {
    set_has_zonedomain();
  } else {
    clear_has_zonedomain();
  }
  zonedomain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zonedomain);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CDNDnsInfo.ZoneDomain)
}

// required .micromsg.SKBuiltinBuffer_t AuthKey = 8;
inline bool CDNDnsInfo::has_authkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDNDnsInfo::set_has_authkey() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDNDnsInfo::clear_has_authkey() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDNDnsInfo::clear_authkey() {
  if (authkey_ != NULL) authkey_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_authkey();
}
inline const ::micromsg::SKBuiltinBuffer_t& CDNDnsInfo::authkey() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNDnsInfo.AuthKey)
  return authkey_ != NULL ? *authkey_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinBuffer_t* CDNDnsInfo::mutable_authkey() {
  set_has_authkey();
  if (authkey_ == NULL) {
    authkey_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CDNDnsInfo.AuthKey)
  return authkey_;
}
inline ::micromsg::SKBuiltinBuffer_t* CDNDnsInfo::release_authkey() {
  // @@protoc_insertion_point(field_release:micromsg.CDNDnsInfo.AuthKey)
  clear_has_authkey();
  ::micromsg::SKBuiltinBuffer_t* temp = authkey_;
  authkey_ = NULL;
  return temp;
}
inline void CDNDnsInfo::set_allocated_authkey(::micromsg::SKBuiltinBuffer_t* authkey) {
  delete authkey_;
  authkey_ = authkey;
  if (authkey) {
    set_has_authkey();
  } else {
    clear_has_authkey();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CDNDnsInfo.AuthKey)
}

// required int32 ZoneID = 9;
inline bool CDNDnsInfo::has_zoneid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CDNDnsInfo::set_has_zoneid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CDNDnsInfo::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CDNDnsInfo::clear_zoneid() {
  zoneid_ = 0;
  clear_has_zoneid();
}
inline ::google::protobuf::int32 CDNDnsInfo::zoneid() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNDnsInfo.ZoneID)
  return zoneid_;
}
inline void CDNDnsInfo::set_zoneid(::google::protobuf::int32 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CDNDnsInfo.ZoneID)
}

// required int32 ZoneIPCount = 10;
inline bool CDNDnsInfo::has_zoneipcount() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CDNDnsInfo::set_has_zoneipcount() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CDNDnsInfo::clear_has_zoneipcount() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CDNDnsInfo::clear_zoneipcount() {
  zoneipcount_ = 0;
  clear_has_zoneipcount();
}
inline ::google::protobuf::int32 CDNDnsInfo::zoneipcount() const {
  // @@protoc_insertion_point(field_get:micromsg.CDNDnsInfo.ZoneIPCount)
  return zoneipcount_;
}
inline void CDNDnsInfo::set_zoneipcount(::google::protobuf::int32 value) {
  set_has_zoneipcount();
  zoneipcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CDNDnsInfo.ZoneIPCount)
}

// repeated .micromsg.SKBuiltinString_t ZoneIPList = 11;
inline int CDNDnsInfo::zoneiplist_size() const {
  return zoneiplist_.size();
}
inline void CDNDnsInfo::clear_zoneiplist() {
  zoneiplist_.Clear();
}
inline const ::micromsg::SKBuiltinString_t& CDNDnsInfo::zoneiplist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.CDNDnsInfo.ZoneIPList)
  return zoneiplist_.Get(index);
}
inline ::micromsg::SKBuiltinString_t* CDNDnsInfo::mutable_zoneiplist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.CDNDnsInfo.ZoneIPList)
  return zoneiplist_.Mutable(index);
}
inline ::micromsg::SKBuiltinString_t* CDNDnsInfo::add_zoneiplist() {
  // @@protoc_insertion_point(field_add:micromsg.CDNDnsInfo.ZoneIPList)
  return zoneiplist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >*
CDNDnsInfo::mutable_zoneiplist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.CDNDnsInfo.ZoneIPList)
  return &zoneiplist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::SKBuiltinString_t >&
CDNDnsInfo::zoneiplist() const {
  // @@protoc_insertion_point(field_list:micromsg.CDNDnsInfo.ZoneIPList)
  return zoneiplist_;
}

// -------------------------------------------------------------------

// StyleKeyVal

// required uint32 Key = 1;
inline bool StyleKeyVal::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StyleKeyVal::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StyleKeyVal::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StyleKeyVal::clear_key() {
  key_ = 0u;
  clear_has_key();
}
inline ::google::protobuf::uint32 StyleKeyVal::key() const {
  // @@protoc_insertion_point(field_get:micromsg.StyleKeyVal.Key)
  return key_;
}
inline void StyleKeyVal::set_key(::google::protobuf::uint32 value) {
  set_has_key();
  key_ = value;
  // @@protoc_insertion_point(field_set:micromsg.StyleKeyVal.Key)
}

// optional string Val = 2;
inline bool StyleKeyVal::has_val() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StyleKeyVal::set_has_val() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StyleKeyVal::clear_has_val() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StyleKeyVal::clear_val() {
  val_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_val();
}
inline const ::std::string& StyleKeyVal::val() const {
  // @@protoc_insertion_point(field_get:micromsg.StyleKeyVal.Val)
  return val_.GetNoArena();
}
inline void StyleKeyVal::set_val(const ::std::string& value) {
  set_has_val();
  val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.StyleKeyVal.Val)
}
#if LANG_CXX11
inline void StyleKeyVal::set_val(::std::string&& value) {
  set_has_val();
  val_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.StyleKeyVal.Val)
}
#endif
inline void StyleKeyVal::set_val(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_val();
  val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.StyleKeyVal.Val)
}
inline void StyleKeyVal::set_val(const char* value, size_t size) {
  set_has_val();
  val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.StyleKeyVal.Val)
}
inline ::std::string* StyleKeyVal::mutable_val() {
  set_has_val();
  // @@protoc_insertion_point(field_mutable:micromsg.StyleKeyVal.Val)
  return val_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StyleKeyVal::release_val() {
  // @@protoc_insertion_point(field_release:micromsg.StyleKeyVal.Val)
  clear_has_val();
  return val_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StyleKeyVal::set_allocated_val(::std::string* val) {
  if (val != NULL) {
    set_has_val();
  } else {
    clear_has_val();
  }
  val_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), val);
  // @@protoc_insertion_point(field_set_allocated:micromsg.StyleKeyVal.Val)
}

// -------------------------------------------------------------------

// ShowStyleKey

// required uint32 KeyCount = 1;
inline bool ShowStyleKey::has_keycount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShowStyleKey::set_has_keycount() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShowStyleKey::clear_has_keycount() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShowStyleKey::clear_keycount() {
  keycount_ = 0u;
  clear_has_keycount();
}
inline ::google::protobuf::uint32 ShowStyleKey::keycount() const {
  // @@protoc_insertion_point(field_get:micromsg.ShowStyleKey.KeyCount)
  return keycount_;
}
inline void ShowStyleKey::set_keycount(::google::protobuf::uint32 value) {
  set_has_keycount();
  keycount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ShowStyleKey.KeyCount)
}

// repeated .micromsg.StyleKeyVal Key = 2;
inline int ShowStyleKey::key_size() const {
  return key_.size();
}
inline void ShowStyleKey::clear_key() {
  key_.Clear();
}
inline const ::micromsg::StyleKeyVal& ShowStyleKey::key(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.ShowStyleKey.Key)
  return key_.Get(index);
}
inline ::micromsg::StyleKeyVal* ShowStyleKey::mutable_key(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.ShowStyleKey.Key)
  return key_.Mutable(index);
}
inline ::micromsg::StyleKeyVal* ShowStyleKey::add_key() {
  // @@protoc_insertion_point(field_add:micromsg.ShowStyleKey.Key)
  return key_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::StyleKeyVal >*
ShowStyleKey::mutable_key() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.ShowStyleKey.Key)
  return &key_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::StyleKeyVal >&
ShowStyleKey::key() const {
  // @@protoc_insertion_point(field_list:micromsg.ShowStyleKey.Key)
  return key_;
}

// -------------------------------------------------------------------

// SafeDevice

// optional string Name = 1;
inline bool SafeDevice::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SafeDevice::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SafeDevice::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SafeDevice::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& SafeDevice::name() const {
  // @@protoc_insertion_point(field_get:micromsg.SafeDevice.Name)
  return name_.GetNoArena();
}
inline void SafeDevice::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SafeDevice.Name)
}
#if LANG_CXX11
inline void SafeDevice::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SafeDevice.Name)
}
#endif
inline void SafeDevice::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SafeDevice.Name)
}
inline void SafeDevice::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SafeDevice.Name)
}
inline ::std::string* SafeDevice::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:micromsg.SafeDevice.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SafeDevice::release_name() {
  // @@protoc_insertion_point(field_release:micromsg.SafeDevice.Name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SafeDevice::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SafeDevice.Name)
}

// optional string Uuid = 2;
inline bool SafeDevice::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SafeDevice::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SafeDevice::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SafeDevice::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uuid();
}
inline const ::std::string& SafeDevice::uuid() const {
  // @@protoc_insertion_point(field_get:micromsg.SafeDevice.Uuid)
  return uuid_.GetNoArena();
}
inline void SafeDevice::set_uuid(const ::std::string& value) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SafeDevice.Uuid)
}
#if LANG_CXX11
inline void SafeDevice::set_uuid(::std::string&& value) {
  set_has_uuid();
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SafeDevice.Uuid)
}
#endif
inline void SafeDevice::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SafeDevice.Uuid)
}
inline void SafeDevice::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SafeDevice.Uuid)
}
inline ::std::string* SafeDevice::mutable_uuid() {
  set_has_uuid();
  // @@protoc_insertion_point(field_mutable:micromsg.SafeDevice.Uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SafeDevice::release_uuid() {
  // @@protoc_insertion_point(field_release:micromsg.SafeDevice.Uuid)
  clear_has_uuid();
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SafeDevice::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    set_has_uuid();
  } else {
    clear_has_uuid();
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SafeDevice.Uuid)
}

// optional string DeviceType = 3;
inline bool SafeDevice::has_devicetype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SafeDevice::set_has_devicetype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SafeDevice::clear_has_devicetype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SafeDevice::clear_devicetype() {
  devicetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_devicetype();
}
inline const ::std::string& SafeDevice::devicetype() const {
  // @@protoc_insertion_point(field_get:micromsg.SafeDevice.DeviceType)
  return devicetype_.GetNoArena();
}
inline void SafeDevice::set_devicetype(const ::std::string& value) {
  set_has_devicetype();
  devicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SafeDevice.DeviceType)
}
#if LANG_CXX11
inline void SafeDevice::set_devicetype(::std::string&& value) {
  set_has_devicetype();
  devicetype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SafeDevice.DeviceType)
}
#endif
inline void SafeDevice::set_devicetype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_devicetype();
  devicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SafeDevice.DeviceType)
}
inline void SafeDevice::set_devicetype(const char* value, size_t size) {
  set_has_devicetype();
  devicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SafeDevice.DeviceType)
}
inline ::std::string* SafeDevice::mutable_devicetype() {
  set_has_devicetype();
  // @@protoc_insertion_point(field_mutable:micromsg.SafeDevice.DeviceType)
  return devicetype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SafeDevice::release_devicetype() {
  // @@protoc_insertion_point(field_release:micromsg.SafeDevice.DeviceType)
  clear_has_devicetype();
  return devicetype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SafeDevice::set_allocated_devicetype(::std::string* devicetype) {
  if (devicetype != NULL) {
    set_has_devicetype();
  } else {
    clear_has_devicetype();
  }
  devicetype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicetype);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SafeDevice.DeviceType)
}

// required uint32 CreateTime = 4;
inline bool SafeDevice::has_createtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SafeDevice::set_has_createtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SafeDevice::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SafeDevice::clear_createtime() {
  createtime_ = 0u;
  clear_has_createtime();
}
inline ::google::protobuf::uint32 SafeDevice::createtime() const {
  // @@protoc_insertion_point(field_get:micromsg.SafeDevice.CreateTime)
  return createtime_;
}
inline void SafeDevice::set_createtime(::google::protobuf::uint32 value) {
  set_has_createtime();
  createtime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SafeDevice.CreateTime)
}

// -------------------------------------------------------------------

// SafeDeviceList

// required uint32 Count = 1;
inline bool SafeDeviceList::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SafeDeviceList::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SafeDeviceList::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SafeDeviceList::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 SafeDeviceList::count() const {
  // @@protoc_insertion_point(field_get:micromsg.SafeDeviceList.Count)
  return count_;
}
inline void SafeDeviceList::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SafeDeviceList.Count)
}

// repeated .micromsg.SafeDevice List = 2;
inline int SafeDeviceList::list_size() const {
  return list_.size();
}
inline void SafeDeviceList::clear_list() {
  list_.Clear();
}
inline const ::micromsg::SafeDevice& SafeDeviceList::list(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.SafeDeviceList.List)
  return list_.Get(index);
}
inline ::micromsg::SafeDevice* SafeDeviceList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.SafeDeviceList.List)
  return list_.Mutable(index);
}
inline ::micromsg::SafeDevice* SafeDeviceList::add_list() {
  // @@protoc_insertion_point(field_add:micromsg.SafeDeviceList.List)
  return list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::SafeDevice >*
SafeDeviceList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.SafeDeviceList.List)
  return &list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::SafeDevice >&
SafeDeviceList::list() const {
  // @@protoc_insertion_point(field_list:micromsg.SafeDeviceList.List)
  return list_;
}

// -------------------------------------------------------------------

// MemberReq

// required .micromsg.SKBuiltinString_t MemberName = 1;
inline bool MemberReq::has_membername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MemberReq::set_has_membername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MemberReq::clear_has_membername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MemberReq::clear_membername() {
  if (membername_ != NULL) membername_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_membername();
}
inline const ::micromsg::SKBuiltinString_t& MemberReq::membername() const {
  // @@protoc_insertion_point(field_get:micromsg.MemberReq.MemberName)
  return membername_ != NULL ? *membername_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinString_t* MemberReq::mutable_membername() {
  set_has_membername();
  if (membername_ == NULL) {
    membername_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.MemberReq.MemberName)
  return membername_;
}
inline ::micromsg::SKBuiltinString_t* MemberReq::release_membername() {
  // @@protoc_insertion_point(field_release:micromsg.MemberReq.MemberName)
  clear_has_membername();
  ::micromsg::SKBuiltinString_t* temp = membername_;
  membername_ = NULL;
  return temp;
}
inline void MemberReq::set_allocated_membername(::micromsg::SKBuiltinString_t* membername) {
  delete membername_;
  membername_ = membername;
  if (membername) {
    set_has_membername();
  } else {
    clear_has_membername();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.MemberReq.MemberName)
}

// -------------------------------------------------------------------

// MemberResp

// required .micromsg.SKBuiltinString_t MemberName = 1;
inline bool MemberResp::has_membername() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MemberResp::set_has_membername() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MemberResp::clear_has_membername() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MemberResp::clear_membername() {
  if (membername_ != NULL) membername_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_membername();
}
inline const ::micromsg::SKBuiltinString_t& MemberResp::membername() const {
  // @@protoc_insertion_point(field_get:micromsg.MemberResp.MemberName)
  return membername_ != NULL ? *membername_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinString_t* MemberResp::mutable_membername() {
  set_has_membername();
  if (membername_ == NULL) {
    membername_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.MemberResp.MemberName)
  return membername_;
}
inline ::micromsg::SKBuiltinString_t* MemberResp::release_membername() {
  // @@protoc_insertion_point(field_release:micromsg.MemberResp.MemberName)
  clear_has_membername();
  ::micromsg::SKBuiltinString_t* temp = membername_;
  membername_ = NULL;
  return temp;
}
inline void MemberResp::set_allocated_membername(::micromsg::SKBuiltinString_t* membername) {
  delete membername_;
  membername_ = membername;
  if (membername) {
    set_has_membername();
  } else {
    clear_has_membername();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.MemberResp.MemberName)
}

// required uint32 MemberStatus = 2;
inline bool MemberResp::has_memberstatus() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MemberResp::set_has_memberstatus() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MemberResp::clear_has_memberstatus() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MemberResp::clear_memberstatus() {
  memberstatus_ = 0u;
  clear_has_memberstatus();
}
inline ::google::protobuf::uint32 MemberResp::memberstatus() const {
  // @@protoc_insertion_point(field_get:micromsg.MemberResp.MemberStatus)
  return memberstatus_;
}
inline void MemberResp::set_memberstatus(::google::protobuf::uint32 value) {
  set_has_memberstatus();
  memberstatus_ = value;
  // @@protoc_insertion_point(field_set:micromsg.MemberResp.MemberStatus)
}

// required .micromsg.SKBuiltinString_t NickName = 3;
inline bool MemberResp::has_nickname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MemberResp::set_has_nickname() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MemberResp::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MemberResp::clear_nickname() {
  if (nickname_ != NULL) nickname_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_nickname();
}
inline const ::micromsg::SKBuiltinString_t& MemberResp::nickname() const {
  // @@protoc_insertion_point(field_get:micromsg.MemberResp.NickName)
  return nickname_ != NULL ? *nickname_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinString_t* MemberResp::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == NULL) {
    nickname_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.MemberResp.NickName)
  return nickname_;
}
inline ::micromsg::SKBuiltinString_t* MemberResp::release_nickname() {
  // @@protoc_insertion_point(field_release:micromsg.MemberResp.NickName)
  clear_has_nickname();
  ::micromsg::SKBuiltinString_t* temp = nickname_;
  nickname_ = NULL;
  return temp;
}
inline void MemberResp::set_allocated_nickname(::micromsg::SKBuiltinString_t* nickname) {
  delete nickname_;
  nickname_ = nickname;
  if (nickname) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.MemberResp.NickName)
}

// required .micromsg.SKBuiltinString_t PYInitial = 4;
inline bool MemberResp::has_pyinitial() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MemberResp::set_has_pyinitial() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MemberResp::clear_has_pyinitial() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MemberResp::clear_pyinitial() {
  if (pyinitial_ != NULL) pyinitial_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_pyinitial();
}
inline const ::micromsg::SKBuiltinString_t& MemberResp::pyinitial() const {
  // @@protoc_insertion_point(field_get:micromsg.MemberResp.PYInitial)
  return pyinitial_ != NULL ? *pyinitial_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinString_t* MemberResp::mutable_pyinitial() {
  set_has_pyinitial();
  if (pyinitial_ == NULL) {
    pyinitial_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.MemberResp.PYInitial)
  return pyinitial_;
}
inline ::micromsg::SKBuiltinString_t* MemberResp::release_pyinitial() {
  // @@protoc_insertion_point(field_release:micromsg.MemberResp.PYInitial)
  clear_has_pyinitial();
  ::micromsg::SKBuiltinString_t* temp = pyinitial_;
  pyinitial_ = NULL;
  return temp;
}
inline void MemberResp::set_allocated_pyinitial(::micromsg::SKBuiltinString_t* pyinitial) {
  delete pyinitial_;
  pyinitial_ = pyinitial;
  if (pyinitial) {
    set_has_pyinitial();
  } else {
    clear_has_pyinitial();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.MemberResp.PYInitial)
}

// required .micromsg.SKBuiltinString_t QuanPin = 5;
inline bool MemberResp::has_quanpin() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MemberResp::set_has_quanpin() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MemberResp::clear_has_quanpin() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MemberResp::clear_quanpin() {
  if (quanpin_ != NULL) quanpin_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_quanpin();
}
inline const ::micromsg::SKBuiltinString_t& MemberResp::quanpin() const {
  // @@protoc_insertion_point(field_get:micromsg.MemberResp.QuanPin)
  return quanpin_ != NULL ? *quanpin_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinString_t* MemberResp::mutable_quanpin() {
  set_has_quanpin();
  if (quanpin_ == NULL) {
    quanpin_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.MemberResp.QuanPin)
  return quanpin_;
}
inline ::micromsg::SKBuiltinString_t* MemberResp::release_quanpin() {
  // @@protoc_insertion_point(field_release:micromsg.MemberResp.QuanPin)
  clear_has_quanpin();
  ::micromsg::SKBuiltinString_t* temp = quanpin_;
  quanpin_ = NULL;
  return temp;
}
inline void MemberResp::set_allocated_quanpin(::micromsg::SKBuiltinString_t* quanpin) {
  delete quanpin_;
  quanpin_ = quanpin;
  if (quanpin) {
    set_has_quanpin();
  } else {
    clear_has_quanpin();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.MemberResp.QuanPin)
}

// required int32 Sex = 6;
inline bool MemberResp::has_sex() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MemberResp::set_has_sex() {
  _has_bits_[0] |= 0x00002000u;
}
inline void MemberResp::clear_has_sex() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void MemberResp::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 MemberResp::sex() const {
  // @@protoc_insertion_point(field_get:micromsg.MemberResp.Sex)
  return sex_;
}
inline void MemberResp::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:micromsg.MemberResp.Sex)
}

// required .micromsg.SKBuiltinString_t Remark = 9;
inline bool MemberResp::has_remark() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MemberResp::set_has_remark() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MemberResp::clear_has_remark() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MemberResp::clear_remark() {
  if (remark_ != NULL) remark_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_remark();
}
inline const ::micromsg::SKBuiltinString_t& MemberResp::remark() const {
  // @@protoc_insertion_point(field_get:micromsg.MemberResp.Remark)
  return remark_ != NULL ? *remark_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinString_t* MemberResp::mutable_remark() {
  set_has_remark();
  if (remark_ == NULL) {
    remark_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.MemberResp.Remark)
  return remark_;
}
inline ::micromsg::SKBuiltinString_t* MemberResp::release_remark() {
  // @@protoc_insertion_point(field_release:micromsg.MemberResp.Remark)
  clear_has_remark();
  ::micromsg::SKBuiltinString_t* temp = remark_;
  remark_ = NULL;
  return temp;
}
inline void MemberResp::set_allocated_remark(::micromsg::SKBuiltinString_t* remark) {
  delete remark_;
  remark_ = remark;
  if (remark) {
    set_has_remark();
  } else {
    clear_has_remark();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.MemberResp.Remark)
}

// required .micromsg.SKBuiltinString_t RemarkPYInitial = 10;
inline bool MemberResp::has_remarkpyinitial() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MemberResp::set_has_remarkpyinitial() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MemberResp::clear_has_remarkpyinitial() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MemberResp::clear_remarkpyinitial() {
  if (remarkpyinitial_ != NULL) remarkpyinitial_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_remarkpyinitial();
}
inline const ::micromsg::SKBuiltinString_t& MemberResp::remarkpyinitial() const {
  // @@protoc_insertion_point(field_get:micromsg.MemberResp.RemarkPYInitial)
  return remarkpyinitial_ != NULL ? *remarkpyinitial_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinString_t* MemberResp::mutable_remarkpyinitial() {
  set_has_remarkpyinitial();
  if (remarkpyinitial_ == NULL) {
    remarkpyinitial_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.MemberResp.RemarkPYInitial)
  return remarkpyinitial_;
}
inline ::micromsg::SKBuiltinString_t* MemberResp::release_remarkpyinitial() {
  // @@protoc_insertion_point(field_release:micromsg.MemberResp.RemarkPYInitial)
  clear_has_remarkpyinitial();
  ::micromsg::SKBuiltinString_t* temp = remarkpyinitial_;
  remarkpyinitial_ = NULL;
  return temp;
}
inline void MemberResp::set_allocated_remarkpyinitial(::micromsg::SKBuiltinString_t* remarkpyinitial) {
  delete remarkpyinitial_;
  remarkpyinitial_ = remarkpyinitial;
  if (remarkpyinitial) {
    set_has_remarkpyinitial();
  } else {
    clear_has_remarkpyinitial();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.MemberResp.RemarkPYInitial)
}

// required .micromsg.SKBuiltinString_t RemarkQuanPin = 11;
inline bool MemberResp::has_remarkquanpin() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MemberResp::set_has_remarkquanpin() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MemberResp::clear_has_remarkquanpin() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MemberResp::clear_remarkquanpin() {
  if (remarkquanpin_ != NULL) remarkquanpin_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_remarkquanpin();
}
inline const ::micromsg::SKBuiltinString_t& MemberResp::remarkquanpin() const {
  // @@protoc_insertion_point(field_get:micromsg.MemberResp.RemarkQuanPin)
  return remarkquanpin_ != NULL ? *remarkquanpin_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinString_t* MemberResp::mutable_remarkquanpin() {
  set_has_remarkquanpin();
  if (remarkquanpin_ == NULL) {
    remarkquanpin_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.MemberResp.RemarkQuanPin)
  return remarkquanpin_;
}
inline ::micromsg::SKBuiltinString_t* MemberResp::release_remarkquanpin() {
  // @@protoc_insertion_point(field_release:micromsg.MemberResp.RemarkQuanPin)
  clear_has_remarkquanpin();
  ::micromsg::SKBuiltinString_t* temp = remarkquanpin_;
  remarkquanpin_ = NULL;
  return temp;
}
inline void MemberResp::set_allocated_remarkquanpin(::micromsg::SKBuiltinString_t* remarkquanpin) {
  delete remarkquanpin_;
  remarkquanpin_ = remarkquanpin;
  if (remarkquanpin) {
    set_has_remarkquanpin();
  } else {
    clear_has_remarkquanpin();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.MemberResp.RemarkQuanPin)
}

// required uint32 ContactType = 12;
inline bool MemberResp::has_contacttype() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void MemberResp::set_has_contacttype() {
  _has_bits_[0] |= 0x00004000u;
}
inline void MemberResp::clear_has_contacttype() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void MemberResp::clear_contacttype() {
  contacttype_ = 0u;
  clear_has_contacttype();
}
inline ::google::protobuf::uint32 MemberResp::contacttype() const {
  // @@protoc_insertion_point(field_get:micromsg.MemberResp.ContactType)
  return contacttype_;
}
inline void MemberResp::set_contacttype(::google::protobuf::uint32 value) {
  set_has_contacttype();
  contacttype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.MemberResp.ContactType)
}

// optional string Province = 13;
inline bool MemberResp::has_province() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MemberResp::set_has_province() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MemberResp::clear_has_province() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MemberResp::clear_province() {
  province_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_province();
}
inline const ::std::string& MemberResp::province() const {
  // @@protoc_insertion_point(field_get:micromsg.MemberResp.Province)
  return province_.GetNoArena();
}
inline void MemberResp::set_province(const ::std::string& value) {
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.MemberResp.Province)
}
#if LANG_CXX11
inline void MemberResp::set_province(::std::string&& value) {
  set_has_province();
  province_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.MemberResp.Province)
}
#endif
inline void MemberResp::set_province(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.MemberResp.Province)
}
inline void MemberResp::set_province(const char* value, size_t size) {
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.MemberResp.Province)
}
inline ::std::string* MemberResp::mutable_province() {
  set_has_province();
  // @@protoc_insertion_point(field_mutable:micromsg.MemberResp.Province)
  return province_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MemberResp::release_province() {
  // @@protoc_insertion_point(field_release:micromsg.MemberResp.Province)
  clear_has_province();
  return province_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MemberResp::set_allocated_province(::std::string* province) {
  if (province != NULL) {
    set_has_province();
  } else {
    clear_has_province();
  }
  province_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), province);
  // @@protoc_insertion_point(field_set_allocated:micromsg.MemberResp.Province)
}

// optional string City = 14;
inline bool MemberResp::has_city() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MemberResp::set_has_city() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MemberResp::clear_has_city() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MemberResp::clear_city() {
  city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_city();
}
inline const ::std::string& MemberResp::city() const {
  // @@protoc_insertion_point(field_get:micromsg.MemberResp.City)
  return city_.GetNoArena();
}
inline void MemberResp::set_city(const ::std::string& value) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.MemberResp.City)
}
#if LANG_CXX11
inline void MemberResp::set_city(::std::string&& value) {
  set_has_city();
  city_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.MemberResp.City)
}
#endif
inline void MemberResp::set_city(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.MemberResp.City)
}
inline void MemberResp::set_city(const char* value, size_t size) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.MemberResp.City)
}
inline ::std::string* MemberResp::mutable_city() {
  set_has_city();
  // @@protoc_insertion_point(field_mutable:micromsg.MemberResp.City)
  return city_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MemberResp::release_city() {
  // @@protoc_insertion_point(field_release:micromsg.MemberResp.City)
  clear_has_city();
  return city_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MemberResp::set_allocated_city(::std::string* city) {
  if (city != NULL) {
    set_has_city();
  } else {
    clear_has_city();
  }
  city_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:micromsg.MemberResp.City)
}

// optional string Signature = 15;
inline bool MemberResp::has_signature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MemberResp::set_has_signature() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MemberResp::clear_has_signature() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MemberResp::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_signature();
}
inline const ::std::string& MemberResp::signature() const {
  // @@protoc_insertion_point(field_get:micromsg.MemberResp.Signature)
  return signature_.GetNoArena();
}
inline void MemberResp::set_signature(const ::std::string& value) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.MemberResp.Signature)
}
#if LANG_CXX11
inline void MemberResp::set_signature(::std::string&& value) {
  set_has_signature();
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.MemberResp.Signature)
}
#endif
inline void MemberResp::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.MemberResp.Signature)
}
inline void MemberResp::set_signature(const char* value, size_t size) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.MemberResp.Signature)
}
inline ::std::string* MemberResp::mutable_signature() {
  set_has_signature();
  // @@protoc_insertion_point(field_mutable:micromsg.MemberResp.Signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MemberResp::release_signature() {
  // @@protoc_insertion_point(field_release:micromsg.MemberResp.Signature)
  clear_has_signature();
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MemberResp::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:micromsg.MemberResp.Signature)
}

// optional uint32 PersonalCard = 16;
inline bool MemberResp::has_personalcard() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void MemberResp::set_has_personalcard() {
  _has_bits_[0] |= 0x00008000u;
}
inline void MemberResp::clear_has_personalcard() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void MemberResp::clear_personalcard() {
  personalcard_ = 0u;
  clear_has_personalcard();
}
inline ::google::protobuf::uint32 MemberResp::personalcard() const {
  // @@protoc_insertion_point(field_get:micromsg.MemberResp.PersonalCard)
  return personalcard_;
}
inline void MemberResp::set_personalcard(::google::protobuf::uint32 value) {
  set_has_personalcard();
  personalcard_ = value;
  // @@protoc_insertion_point(field_set:micromsg.MemberResp.PersonalCard)
}

// optional uint32 VerifyFlag = 17;
inline bool MemberResp::has_verifyflag() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void MemberResp::set_has_verifyflag() {
  _has_bits_[0] |= 0x00010000u;
}
inline void MemberResp::clear_has_verifyflag() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void MemberResp::clear_verifyflag() {
  verifyflag_ = 0u;
  clear_has_verifyflag();
}
inline ::google::protobuf::uint32 MemberResp::verifyflag() const {
  // @@protoc_insertion_point(field_get:micromsg.MemberResp.VerifyFlag)
  return verifyflag_;
}
inline void MemberResp::set_verifyflag(::google::protobuf::uint32 value) {
  set_has_verifyflag();
  verifyflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.MemberResp.VerifyFlag)
}

// optional string VerifyInfo = 18;
inline bool MemberResp::has_verifyinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MemberResp::set_has_verifyinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MemberResp::clear_has_verifyinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MemberResp::clear_verifyinfo() {
  verifyinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_verifyinfo();
}
inline const ::std::string& MemberResp::verifyinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.MemberResp.VerifyInfo)
  return verifyinfo_.GetNoArena();
}
inline void MemberResp::set_verifyinfo(const ::std::string& value) {
  set_has_verifyinfo();
  verifyinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.MemberResp.VerifyInfo)
}
#if LANG_CXX11
inline void MemberResp::set_verifyinfo(::std::string&& value) {
  set_has_verifyinfo();
  verifyinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.MemberResp.VerifyInfo)
}
#endif
inline void MemberResp::set_verifyinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_verifyinfo();
  verifyinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.MemberResp.VerifyInfo)
}
inline void MemberResp::set_verifyinfo(const char* value, size_t size) {
  set_has_verifyinfo();
  verifyinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.MemberResp.VerifyInfo)
}
inline ::std::string* MemberResp::mutable_verifyinfo() {
  set_has_verifyinfo();
  // @@protoc_insertion_point(field_mutable:micromsg.MemberResp.VerifyInfo)
  return verifyinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MemberResp::release_verifyinfo() {
  // @@protoc_insertion_point(field_release:micromsg.MemberResp.VerifyInfo)
  clear_has_verifyinfo();
  return verifyinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MemberResp::set_allocated_verifyinfo(::std::string* verifyinfo) {
  if (verifyinfo != NULL) {
    set_has_verifyinfo();
  } else {
    clear_has_verifyinfo();
  }
  verifyinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verifyinfo);
  // @@protoc_insertion_point(field_set_allocated:micromsg.MemberResp.VerifyInfo)
}

// optional string Country = 19;
inline bool MemberResp::has_country() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MemberResp::set_has_country() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MemberResp::clear_has_country() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MemberResp::clear_country() {
  country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country();
}
inline const ::std::string& MemberResp::country() const {
  // @@protoc_insertion_point(field_get:micromsg.MemberResp.Country)
  return country_.GetNoArena();
}
inline void MemberResp::set_country(const ::std::string& value) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.MemberResp.Country)
}
#if LANG_CXX11
inline void MemberResp::set_country(::std::string&& value) {
  set_has_country();
  country_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.MemberResp.Country)
}
#endif
inline void MemberResp::set_country(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.MemberResp.Country)
}
inline void MemberResp::set_country(const char* value, size_t size) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.MemberResp.Country)
}
inline ::std::string* MemberResp::mutable_country() {
  set_has_country();
  // @@protoc_insertion_point(field_mutable:micromsg.MemberResp.Country)
  return country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MemberResp::release_country() {
  // @@protoc_insertion_point(field_release:micromsg.MemberResp.Country)
  clear_has_country();
  return country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MemberResp::set_allocated_country(::std::string* country) {
  if (country != NULL) {
    set_has_country();
  } else {
    clear_has_country();
  }
  country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:micromsg.MemberResp.Country)
}

// -------------------------------------------------------------------

// DelMemberReq

// required .micromsg.SKBuiltinString_t MemberName = 1;
inline bool DelMemberReq::has_membername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DelMemberReq::set_has_membername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DelMemberReq::clear_has_membername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DelMemberReq::clear_membername() {
  if (membername_ != NULL) membername_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_membername();
}
inline const ::micromsg::SKBuiltinString_t& DelMemberReq::membername() const {
  // @@protoc_insertion_point(field_get:micromsg.DelMemberReq.MemberName)
  return membername_ != NULL ? *membername_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinString_t* DelMemberReq::mutable_membername() {
  set_has_membername();
  if (membername_ == NULL) {
    membername_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.DelMemberReq.MemberName)
  return membername_;
}
inline ::micromsg::SKBuiltinString_t* DelMemberReq::release_membername() {
  // @@protoc_insertion_point(field_release:micromsg.DelMemberReq.MemberName)
  clear_has_membername();
  ::micromsg::SKBuiltinString_t* temp = membername_;
  membername_ = NULL;
  return temp;
}
inline void DelMemberReq::set_allocated_membername(::micromsg::SKBuiltinString_t* membername) {
  delete membername_;
  membername_ = membername;
  if (membername) {
    set_has_membername();
  } else {
    clear_has_membername();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.DelMemberReq.MemberName)
}

// -------------------------------------------------------------------

// DelMemberResp

// required .micromsg.SKBuiltinString_t MemberName = 1;
inline bool DelMemberResp::has_membername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DelMemberResp::set_has_membername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DelMemberResp::clear_has_membername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DelMemberResp::clear_membername() {
  if (membername_ != NULL) membername_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_membername();
}
inline const ::micromsg::SKBuiltinString_t& DelMemberResp::membername() const {
  // @@protoc_insertion_point(field_get:micromsg.DelMemberResp.MemberName)
  return membername_ != NULL ? *membername_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinString_t* DelMemberResp::mutable_membername() {
  set_has_membername();
  if (membername_ == NULL) {
    membername_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.DelMemberResp.MemberName)
  return membername_;
}
inline ::micromsg::SKBuiltinString_t* DelMemberResp::release_membername() {
  // @@protoc_insertion_point(field_release:micromsg.DelMemberResp.MemberName)
  clear_has_membername();
  ::micromsg::SKBuiltinString_t* temp = membername_;
  membername_ = NULL;
  return temp;
}
inline void DelMemberResp::set_allocated_membername(::micromsg::SKBuiltinString_t* membername) {
  delete membername_;
  membername_ = membername;
  if (membername) {
    set_has_membername();
  } else {
    clear_has_membername();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.DelMemberResp.MemberName)
}

// -------------------------------------------------------------------

// DisturbTimeSpan

// required uint32 BeginTime = 1;
inline bool DisturbTimeSpan::has_begintime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DisturbTimeSpan::set_has_begintime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DisturbTimeSpan::clear_has_begintime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DisturbTimeSpan::clear_begintime() {
  begintime_ = 0u;
  clear_has_begintime();
}
inline ::google::protobuf::uint32 DisturbTimeSpan::begintime() const {
  // @@protoc_insertion_point(field_get:micromsg.DisturbTimeSpan.BeginTime)
  return begintime_;
}
inline void DisturbTimeSpan::set_begintime(::google::protobuf::uint32 value) {
  set_has_begintime();
  begintime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DisturbTimeSpan.BeginTime)
}

// required uint32 EndTime = 2;
inline bool DisturbTimeSpan::has_endtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DisturbTimeSpan::set_has_endtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DisturbTimeSpan::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DisturbTimeSpan::clear_endtime() {
  endtime_ = 0u;
  clear_has_endtime();
}
inline ::google::protobuf::uint32 DisturbTimeSpan::endtime() const {
  // @@protoc_insertion_point(field_get:micromsg.DisturbTimeSpan.EndTime)
  return endtime_;
}
inline void DisturbTimeSpan::set_endtime(::google::protobuf::uint32 value) {
  set_has_endtime();
  endtime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DisturbTimeSpan.EndTime)
}

// -------------------------------------------------------------------

// DisturbSetting

// required uint32 NightSetting = 1;
inline bool DisturbSetting::has_nightsetting() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DisturbSetting::set_has_nightsetting() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DisturbSetting::clear_has_nightsetting() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DisturbSetting::clear_nightsetting() {
  nightsetting_ = 0u;
  clear_has_nightsetting();
}
inline ::google::protobuf::uint32 DisturbSetting::nightsetting() const {
  // @@protoc_insertion_point(field_get:micromsg.DisturbSetting.NightSetting)
  return nightsetting_;
}
inline void DisturbSetting::set_nightsetting(::google::protobuf::uint32 value) {
  set_has_nightsetting();
  nightsetting_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DisturbSetting.NightSetting)
}

// required .micromsg.DisturbTimeSpan NightTime = 2;
inline bool DisturbSetting::has_nighttime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DisturbSetting::set_has_nighttime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DisturbSetting::clear_has_nighttime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DisturbSetting::clear_nighttime() {
  if (nighttime_ != NULL) nighttime_->::micromsg::DisturbTimeSpan::Clear();
  clear_has_nighttime();
}
inline const ::micromsg::DisturbTimeSpan& DisturbSetting::nighttime() const {
  // @@protoc_insertion_point(field_get:micromsg.DisturbSetting.NightTime)
  return nighttime_ != NULL ? *nighttime_
                         : *::micromsg::DisturbTimeSpan::internal_default_instance();
}
inline ::micromsg::DisturbTimeSpan* DisturbSetting::mutable_nighttime() {
  set_has_nighttime();
  if (nighttime_ == NULL) {
    nighttime_ = new ::micromsg::DisturbTimeSpan;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.DisturbSetting.NightTime)
  return nighttime_;
}
inline ::micromsg::DisturbTimeSpan* DisturbSetting::release_nighttime() {
  // @@protoc_insertion_point(field_release:micromsg.DisturbSetting.NightTime)
  clear_has_nighttime();
  ::micromsg::DisturbTimeSpan* temp = nighttime_;
  nighttime_ = NULL;
  return temp;
}
inline void DisturbSetting::set_allocated_nighttime(::micromsg::DisturbTimeSpan* nighttime) {
  delete nighttime_;
  nighttime_ = nighttime;
  if (nighttime) {
    set_has_nighttime();
  } else {
    clear_has_nighttime();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.DisturbSetting.NightTime)
}

// required uint32 AllDaySetting = 3;
inline bool DisturbSetting::has_alldaysetting() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DisturbSetting::set_has_alldaysetting() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DisturbSetting::clear_has_alldaysetting() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DisturbSetting::clear_alldaysetting() {
  alldaysetting_ = 0u;
  clear_has_alldaysetting();
}
inline ::google::protobuf::uint32 DisturbSetting::alldaysetting() const {
  // @@protoc_insertion_point(field_get:micromsg.DisturbSetting.AllDaySetting)
  return alldaysetting_;
}
inline void DisturbSetting::set_alldaysetting(::google::protobuf::uint32 value) {
  set_has_alldaysetting();
  alldaysetting_ = value;
  // @@protoc_insertion_point(field_set:micromsg.DisturbSetting.AllDaySetting)
}

// required .micromsg.DisturbTimeSpan AllDayTime = 4;
inline bool DisturbSetting::has_alldaytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DisturbSetting::set_has_alldaytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DisturbSetting::clear_has_alldaytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DisturbSetting::clear_alldaytime() {
  if (alldaytime_ != NULL) alldaytime_->::micromsg::DisturbTimeSpan::Clear();
  clear_has_alldaytime();
}
inline const ::micromsg::DisturbTimeSpan& DisturbSetting::alldaytime() const {
  // @@protoc_insertion_point(field_get:micromsg.DisturbSetting.AllDayTime)
  return alldaytime_ != NULL ? *alldaytime_
                         : *::micromsg::DisturbTimeSpan::internal_default_instance();
}
inline ::micromsg::DisturbTimeSpan* DisturbSetting::mutable_alldaytime() {
  set_has_alldaytime();
  if (alldaytime_ == NULL) {
    alldaytime_ = new ::micromsg::DisturbTimeSpan;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.DisturbSetting.AllDayTime)
  return alldaytime_;
}
inline ::micromsg::DisturbTimeSpan* DisturbSetting::release_alldaytime() {
  // @@protoc_insertion_point(field_release:micromsg.DisturbSetting.AllDayTime)
  clear_has_alldaytime();
  ::micromsg::DisturbTimeSpan* temp = alldaytime_;
  alldaytime_ = NULL;
  return temp;
}
inline void DisturbSetting::set_allocated_alldaytime(::micromsg::DisturbTimeSpan* alldaytime) {
  delete alldaytime_;
  alldaytime_ = alldaytime;
  if (alldaytime) {
    set_has_alldaytime();
  } else {
    clear_has_alldaytime();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.DisturbSetting.AllDayTime)
}

// -------------------------------------------------------------------

// GmailInfo

// optional string GmailAcct = 1;
inline bool GmailInfo::has_gmailacct() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GmailInfo::set_has_gmailacct() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GmailInfo::clear_has_gmailacct() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GmailInfo::clear_gmailacct() {
  gmailacct_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gmailacct();
}
inline const ::std::string& GmailInfo::gmailacct() const {
  // @@protoc_insertion_point(field_get:micromsg.GmailInfo.GmailAcct)
  return gmailacct_.GetNoArena();
}
inline void GmailInfo::set_gmailacct(const ::std::string& value) {
  set_has_gmailacct();
  gmailacct_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GmailInfo.GmailAcct)
}
#if LANG_CXX11
inline void GmailInfo::set_gmailacct(::std::string&& value) {
  set_has_gmailacct();
  gmailacct_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GmailInfo.GmailAcct)
}
#endif
inline void GmailInfo::set_gmailacct(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gmailacct();
  gmailacct_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GmailInfo.GmailAcct)
}
inline void GmailInfo::set_gmailacct(const char* value, size_t size) {
  set_has_gmailacct();
  gmailacct_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GmailInfo.GmailAcct)
}
inline ::std::string* GmailInfo::mutable_gmailacct() {
  set_has_gmailacct();
  // @@protoc_insertion_point(field_mutable:micromsg.GmailInfo.GmailAcct)
  return gmailacct_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GmailInfo::release_gmailacct() {
  // @@protoc_insertion_point(field_release:micromsg.GmailInfo.GmailAcct)
  clear_has_gmailacct();
  return gmailacct_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GmailInfo::set_allocated_gmailacct(::std::string* gmailacct) {
  if (gmailacct != NULL) {
    set_has_gmailacct();
  } else {
    clear_has_gmailacct();
  }
  gmailacct_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gmailacct);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GmailInfo.GmailAcct)
}

// required uint32 GmailSwitch = 2;
inline bool GmailInfo::has_gmailswitch() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GmailInfo::set_has_gmailswitch() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GmailInfo::clear_has_gmailswitch() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GmailInfo::clear_gmailswitch() {
  gmailswitch_ = 0u;
  clear_has_gmailswitch();
}
inline ::google::protobuf::uint32 GmailInfo::gmailswitch() const {
  // @@protoc_insertion_point(field_get:micromsg.GmailInfo.GmailSwitch)
  return gmailswitch_;
}
inline void GmailInfo::set_gmailswitch(::google::protobuf::uint32 value) {
  set_has_gmailswitch();
  gmailswitch_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GmailInfo.GmailSwitch)
}

// required uint32 GmailErrCode = 3;
inline bool GmailInfo::has_gmailerrcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GmailInfo::set_has_gmailerrcode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GmailInfo::clear_has_gmailerrcode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GmailInfo::clear_gmailerrcode() {
  gmailerrcode_ = 0u;
  clear_has_gmailerrcode();
}
inline ::google::protobuf::uint32 GmailInfo::gmailerrcode() const {
  // @@protoc_insertion_point(field_get:micromsg.GmailInfo.GmailErrCode)
  return gmailerrcode_;
}
inline void GmailInfo::set_gmailerrcode(::google::protobuf::uint32 value) {
  set_has_gmailerrcode();
  gmailerrcode_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GmailInfo.GmailErrCode)
}

// -------------------------------------------------------------------

// GmailList

// required uint32 Count = 1;
inline bool GmailList::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GmailList::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GmailList::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GmailList::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 GmailList::count() const {
  // @@protoc_insertion_point(field_get:micromsg.GmailList.Count)
  return count_;
}
inline void GmailList::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GmailList.Count)
}

// repeated .micromsg.GmailInfo List = 2;
inline int GmailList::list_size() const {
  return list_.size();
}
inline void GmailList::clear_list() {
  list_.Clear();
}
inline const ::micromsg::GmailInfo& GmailList::list(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GmailList.List)
  return list_.Get(index);
}
inline ::micromsg::GmailInfo* GmailList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GmailList.List)
  return list_.Mutable(index);
}
inline ::micromsg::GmailInfo* GmailList::add_list() {
  // @@protoc_insertion_point(field_add:micromsg.GmailList.List)
  return list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::GmailInfo >*
GmailList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GmailList.List)
  return &list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::GmailInfo >&
GmailList::list() const {
  // @@protoc_insertion_point(field_list:micromsg.GmailList.List)
  return list_;
}

// -------------------------------------------------------------------

// LinkedinContactItem

// optional string LinkedinName = 1;
inline bool LinkedinContactItem::has_linkedinname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LinkedinContactItem::set_has_linkedinname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LinkedinContactItem::clear_has_linkedinname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LinkedinContactItem::clear_linkedinname() {
  linkedinname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_linkedinname();
}
inline const ::std::string& LinkedinContactItem::linkedinname() const {
  // @@protoc_insertion_point(field_get:micromsg.LinkedinContactItem.LinkedinName)
  return linkedinname_.GetNoArena();
}
inline void LinkedinContactItem::set_linkedinname(const ::std::string& value) {
  set_has_linkedinname();
  linkedinname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.LinkedinContactItem.LinkedinName)
}
#if LANG_CXX11
inline void LinkedinContactItem::set_linkedinname(::std::string&& value) {
  set_has_linkedinname();
  linkedinname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.LinkedinContactItem.LinkedinName)
}
#endif
inline void LinkedinContactItem::set_linkedinname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_linkedinname();
  linkedinname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.LinkedinContactItem.LinkedinName)
}
inline void LinkedinContactItem::set_linkedinname(const char* value, size_t size) {
  set_has_linkedinname();
  linkedinname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.LinkedinContactItem.LinkedinName)
}
inline ::std::string* LinkedinContactItem::mutable_linkedinname() {
  set_has_linkedinname();
  // @@protoc_insertion_point(field_mutable:micromsg.LinkedinContactItem.LinkedinName)
  return linkedinname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinkedinContactItem::release_linkedinname() {
  // @@protoc_insertion_point(field_release:micromsg.LinkedinContactItem.LinkedinName)
  clear_has_linkedinname();
  return linkedinname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinkedinContactItem::set_allocated_linkedinname(::std::string* linkedinname) {
  if (linkedinname != NULL) {
    set_has_linkedinname();
  } else {
    clear_has_linkedinname();
  }
  linkedinname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), linkedinname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.LinkedinContactItem.LinkedinName)
}

// optional string LinkedinMemberID = 2;
inline bool LinkedinContactItem::has_linkedinmemberid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LinkedinContactItem::set_has_linkedinmemberid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LinkedinContactItem::clear_has_linkedinmemberid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LinkedinContactItem::clear_linkedinmemberid() {
  linkedinmemberid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_linkedinmemberid();
}
inline const ::std::string& LinkedinContactItem::linkedinmemberid() const {
  // @@protoc_insertion_point(field_get:micromsg.LinkedinContactItem.LinkedinMemberID)
  return linkedinmemberid_.GetNoArena();
}
inline void LinkedinContactItem::set_linkedinmemberid(const ::std::string& value) {
  set_has_linkedinmemberid();
  linkedinmemberid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.LinkedinContactItem.LinkedinMemberID)
}
#if LANG_CXX11
inline void LinkedinContactItem::set_linkedinmemberid(::std::string&& value) {
  set_has_linkedinmemberid();
  linkedinmemberid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.LinkedinContactItem.LinkedinMemberID)
}
#endif
inline void LinkedinContactItem::set_linkedinmemberid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_linkedinmemberid();
  linkedinmemberid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.LinkedinContactItem.LinkedinMemberID)
}
inline void LinkedinContactItem::set_linkedinmemberid(const char* value, size_t size) {
  set_has_linkedinmemberid();
  linkedinmemberid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.LinkedinContactItem.LinkedinMemberID)
}
inline ::std::string* LinkedinContactItem::mutable_linkedinmemberid() {
  set_has_linkedinmemberid();
  // @@protoc_insertion_point(field_mutable:micromsg.LinkedinContactItem.LinkedinMemberID)
  return linkedinmemberid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinkedinContactItem::release_linkedinmemberid() {
  // @@protoc_insertion_point(field_release:micromsg.LinkedinContactItem.LinkedinMemberID)
  clear_has_linkedinmemberid();
  return linkedinmemberid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinkedinContactItem::set_allocated_linkedinmemberid(::std::string* linkedinmemberid) {
  if (linkedinmemberid != NULL) {
    set_has_linkedinmemberid();
  } else {
    clear_has_linkedinmemberid();
  }
  linkedinmemberid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), linkedinmemberid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.LinkedinContactItem.LinkedinMemberID)
}

// optional string LinkedinPublicUrl = 3;
inline bool LinkedinContactItem::has_linkedinpublicurl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LinkedinContactItem::set_has_linkedinpublicurl() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LinkedinContactItem::clear_has_linkedinpublicurl() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LinkedinContactItem::clear_linkedinpublicurl() {
  linkedinpublicurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_linkedinpublicurl();
}
inline const ::std::string& LinkedinContactItem::linkedinpublicurl() const {
  // @@protoc_insertion_point(field_get:micromsg.LinkedinContactItem.LinkedinPublicUrl)
  return linkedinpublicurl_.GetNoArena();
}
inline void LinkedinContactItem::set_linkedinpublicurl(const ::std::string& value) {
  set_has_linkedinpublicurl();
  linkedinpublicurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.LinkedinContactItem.LinkedinPublicUrl)
}
#if LANG_CXX11
inline void LinkedinContactItem::set_linkedinpublicurl(::std::string&& value) {
  set_has_linkedinpublicurl();
  linkedinpublicurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.LinkedinContactItem.LinkedinPublicUrl)
}
#endif
inline void LinkedinContactItem::set_linkedinpublicurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_linkedinpublicurl();
  linkedinpublicurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.LinkedinContactItem.LinkedinPublicUrl)
}
inline void LinkedinContactItem::set_linkedinpublicurl(const char* value, size_t size) {
  set_has_linkedinpublicurl();
  linkedinpublicurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.LinkedinContactItem.LinkedinPublicUrl)
}
inline ::std::string* LinkedinContactItem::mutable_linkedinpublicurl() {
  set_has_linkedinpublicurl();
  // @@protoc_insertion_point(field_mutable:micromsg.LinkedinContactItem.LinkedinPublicUrl)
  return linkedinpublicurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinkedinContactItem::release_linkedinpublicurl() {
  // @@protoc_insertion_point(field_release:micromsg.LinkedinContactItem.LinkedinPublicUrl)
  clear_has_linkedinpublicurl();
  return linkedinpublicurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinkedinContactItem::set_allocated_linkedinpublicurl(::std::string* linkedinpublicurl) {
  if (linkedinpublicurl != NULL) {
    set_has_linkedinpublicurl();
  } else {
    clear_has_linkedinpublicurl();
  }
  linkedinpublicurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), linkedinpublicurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.LinkedinContactItem.LinkedinPublicUrl)
}

// -------------------------------------------------------------------

// AdditionalContactList

// optional .micromsg.LinkedinContactItem LinkedinContactItem = 1;
inline bool AdditionalContactList::has_linkedincontactitem() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AdditionalContactList::set_has_linkedincontactitem() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AdditionalContactList::clear_has_linkedincontactitem() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AdditionalContactList::clear_linkedincontactitem() {
  if (linkedincontactitem_ != NULL) linkedincontactitem_->::micromsg::LinkedinContactItem::Clear();
  clear_has_linkedincontactitem();
}
inline const ::micromsg::LinkedinContactItem& AdditionalContactList::linkedincontactitem() const {
  // @@protoc_insertion_point(field_get:micromsg.AdditionalContactList.LinkedinContactItem)
  return linkedincontactitem_ != NULL ? *linkedincontactitem_
                         : *::micromsg::LinkedinContactItem::internal_default_instance();
}
inline ::micromsg::LinkedinContactItem* AdditionalContactList::mutable_linkedincontactitem() {
  set_has_linkedincontactitem();
  if (linkedincontactitem_ == NULL) {
    linkedincontactitem_ = new ::micromsg::LinkedinContactItem;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.AdditionalContactList.LinkedinContactItem)
  return linkedincontactitem_;
}
inline ::micromsg::LinkedinContactItem* AdditionalContactList::release_linkedincontactitem() {
  // @@protoc_insertion_point(field_release:micromsg.AdditionalContactList.LinkedinContactItem)
  clear_has_linkedincontactitem();
  ::micromsg::LinkedinContactItem* temp = linkedincontactitem_;
  linkedincontactitem_ = NULL;
  return temp;
}
inline void AdditionalContactList::set_allocated_linkedincontactitem(::micromsg::LinkedinContactItem* linkedincontactitem) {
  delete linkedincontactitem_;
  linkedincontactitem_ = linkedincontactitem;
  if (linkedincontactitem) {
    set_has_linkedincontactitem();
  } else {
    clear_has_linkedincontactitem();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.AdditionalContactList.LinkedinContactItem)
}

// -------------------------------------------------------------------

// ChatRoomMemberInfo

// optional string UserName = 1;
inline bool ChatRoomMemberInfo::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatRoomMemberInfo::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatRoomMemberInfo::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatRoomMemberInfo::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& ChatRoomMemberInfo::username() const {
  // @@protoc_insertion_point(field_get:micromsg.ChatRoomMemberInfo.UserName)
  return username_.GetNoArena();
}
inline void ChatRoomMemberInfo::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ChatRoomMemberInfo.UserName)
}
#if LANG_CXX11
inline void ChatRoomMemberInfo::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ChatRoomMemberInfo.UserName)
}
#endif
inline void ChatRoomMemberInfo::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ChatRoomMemberInfo.UserName)
}
inline void ChatRoomMemberInfo::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ChatRoomMemberInfo.UserName)
}
inline ::std::string* ChatRoomMemberInfo::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:micromsg.ChatRoomMemberInfo.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatRoomMemberInfo::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.ChatRoomMemberInfo.UserName)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatRoomMemberInfo::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ChatRoomMemberInfo.UserName)
}

// optional string NickName = 2;
inline bool ChatRoomMemberInfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatRoomMemberInfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatRoomMemberInfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatRoomMemberInfo::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
inline const ::std::string& ChatRoomMemberInfo::nickname() const {
  // @@protoc_insertion_point(field_get:micromsg.ChatRoomMemberInfo.NickName)
  return nickname_.GetNoArena();
}
inline void ChatRoomMemberInfo::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ChatRoomMemberInfo.NickName)
}
#if LANG_CXX11
inline void ChatRoomMemberInfo::set_nickname(::std::string&& value) {
  set_has_nickname();
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ChatRoomMemberInfo.NickName)
}
#endif
inline void ChatRoomMemberInfo::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ChatRoomMemberInfo.NickName)
}
inline void ChatRoomMemberInfo::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ChatRoomMemberInfo.NickName)
}
inline ::std::string* ChatRoomMemberInfo::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:micromsg.ChatRoomMemberInfo.NickName)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatRoomMemberInfo::release_nickname() {
  // @@protoc_insertion_point(field_release:micromsg.ChatRoomMemberInfo.NickName)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatRoomMemberInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ChatRoomMemberInfo.NickName)
}

// optional string DisplayName = 3;
inline bool ChatRoomMemberInfo::has_displayname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChatRoomMemberInfo::set_has_displayname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChatRoomMemberInfo::clear_has_displayname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChatRoomMemberInfo::clear_displayname() {
  displayname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_displayname();
}
inline const ::std::string& ChatRoomMemberInfo::displayname() const {
  // @@protoc_insertion_point(field_get:micromsg.ChatRoomMemberInfo.DisplayName)
  return displayname_.GetNoArena();
}
inline void ChatRoomMemberInfo::set_displayname(const ::std::string& value) {
  set_has_displayname();
  displayname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ChatRoomMemberInfo.DisplayName)
}
#if LANG_CXX11
inline void ChatRoomMemberInfo::set_displayname(::std::string&& value) {
  set_has_displayname();
  displayname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ChatRoomMemberInfo.DisplayName)
}
#endif
inline void ChatRoomMemberInfo::set_displayname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_displayname();
  displayname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ChatRoomMemberInfo.DisplayName)
}
inline void ChatRoomMemberInfo::set_displayname(const char* value, size_t size) {
  set_has_displayname();
  displayname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ChatRoomMemberInfo.DisplayName)
}
inline ::std::string* ChatRoomMemberInfo::mutable_displayname() {
  set_has_displayname();
  // @@protoc_insertion_point(field_mutable:micromsg.ChatRoomMemberInfo.DisplayName)
  return displayname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatRoomMemberInfo::release_displayname() {
  // @@protoc_insertion_point(field_release:micromsg.ChatRoomMemberInfo.DisplayName)
  clear_has_displayname();
  return displayname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatRoomMemberInfo::set_allocated_displayname(::std::string* displayname) {
  if (displayname != NULL) {
    set_has_displayname();
  } else {
    clear_has_displayname();
  }
  displayname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), displayname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ChatRoomMemberInfo.DisplayName)
}

// optional string BigHeadImgUrl = 4;
inline bool ChatRoomMemberInfo::has_bigheadimgurl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChatRoomMemberInfo::set_has_bigheadimgurl() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChatRoomMemberInfo::clear_has_bigheadimgurl() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChatRoomMemberInfo::clear_bigheadimgurl() {
  bigheadimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bigheadimgurl();
}
inline const ::std::string& ChatRoomMemberInfo::bigheadimgurl() const {
  // @@protoc_insertion_point(field_get:micromsg.ChatRoomMemberInfo.BigHeadImgUrl)
  return bigheadimgurl_.GetNoArena();
}
inline void ChatRoomMemberInfo::set_bigheadimgurl(const ::std::string& value) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ChatRoomMemberInfo.BigHeadImgUrl)
}
#if LANG_CXX11
inline void ChatRoomMemberInfo::set_bigheadimgurl(::std::string&& value) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ChatRoomMemberInfo.BigHeadImgUrl)
}
#endif
inline void ChatRoomMemberInfo::set_bigheadimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ChatRoomMemberInfo.BigHeadImgUrl)
}
inline void ChatRoomMemberInfo::set_bigheadimgurl(const char* value, size_t size) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ChatRoomMemberInfo.BigHeadImgUrl)
}
inline ::std::string* ChatRoomMemberInfo::mutable_bigheadimgurl() {
  set_has_bigheadimgurl();
  // @@protoc_insertion_point(field_mutable:micromsg.ChatRoomMemberInfo.BigHeadImgUrl)
  return bigheadimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatRoomMemberInfo::release_bigheadimgurl() {
  // @@protoc_insertion_point(field_release:micromsg.ChatRoomMemberInfo.BigHeadImgUrl)
  clear_has_bigheadimgurl();
  return bigheadimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatRoomMemberInfo::set_allocated_bigheadimgurl(::std::string* bigheadimgurl) {
  if (bigheadimgurl != NULL) {
    set_has_bigheadimgurl();
  } else {
    clear_has_bigheadimgurl();
  }
  bigheadimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bigheadimgurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ChatRoomMemberInfo.BigHeadImgUrl)
}

// optional string SmallHeadImgUrl = 5;
inline bool ChatRoomMemberInfo::has_smallheadimgurl() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChatRoomMemberInfo::set_has_smallheadimgurl() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChatRoomMemberInfo::clear_has_smallheadimgurl() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChatRoomMemberInfo::clear_smallheadimgurl() {
  smallheadimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_smallheadimgurl();
}
inline const ::std::string& ChatRoomMemberInfo::smallheadimgurl() const {
  // @@protoc_insertion_point(field_get:micromsg.ChatRoomMemberInfo.SmallHeadImgUrl)
  return smallheadimgurl_.GetNoArena();
}
inline void ChatRoomMemberInfo::set_smallheadimgurl(const ::std::string& value) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ChatRoomMemberInfo.SmallHeadImgUrl)
}
#if LANG_CXX11
inline void ChatRoomMemberInfo::set_smallheadimgurl(::std::string&& value) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ChatRoomMemberInfo.SmallHeadImgUrl)
}
#endif
inline void ChatRoomMemberInfo::set_smallheadimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ChatRoomMemberInfo.SmallHeadImgUrl)
}
inline void ChatRoomMemberInfo::set_smallheadimgurl(const char* value, size_t size) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ChatRoomMemberInfo.SmallHeadImgUrl)
}
inline ::std::string* ChatRoomMemberInfo::mutable_smallheadimgurl() {
  set_has_smallheadimgurl();
  // @@protoc_insertion_point(field_mutable:micromsg.ChatRoomMemberInfo.SmallHeadImgUrl)
  return smallheadimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatRoomMemberInfo::release_smallheadimgurl() {
  // @@protoc_insertion_point(field_release:micromsg.ChatRoomMemberInfo.SmallHeadImgUrl)
  clear_has_smallheadimgurl();
  return smallheadimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatRoomMemberInfo::set_allocated_smallheadimgurl(::std::string* smallheadimgurl) {
  if (smallheadimgurl != NULL) {
    set_has_smallheadimgurl();
  } else {
    clear_has_smallheadimgurl();
  }
  smallheadimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smallheadimgurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ChatRoomMemberInfo.SmallHeadImgUrl)
}

// required uint32 ChatroomMemberFlag = 6;
inline bool ChatRoomMemberInfo::has_chatroommemberflag() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChatRoomMemberInfo::set_has_chatroommemberflag() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChatRoomMemberInfo::clear_has_chatroommemberflag() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChatRoomMemberInfo::clear_chatroommemberflag() {
  chatroommemberflag_ = 0u;
  clear_has_chatroommemberflag();
}
inline ::google::protobuf::uint32 ChatRoomMemberInfo::chatroommemberflag() const {
  // @@protoc_insertion_point(field_get:micromsg.ChatRoomMemberInfo.ChatroomMemberFlag)
  return chatroommemberflag_;
}
inline void ChatRoomMemberInfo::set_chatroommemberflag(::google::protobuf::uint32 value) {
  set_has_chatroommemberflag();
  chatroommemberflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ChatRoomMemberInfo.ChatroomMemberFlag)
}

// -------------------------------------------------------------------

// ChatRoomMemberData

// required uint32 MemberCount = 1;
inline bool ChatRoomMemberData::has_membercount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatRoomMemberData::set_has_membercount() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatRoomMemberData::clear_has_membercount() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatRoomMemberData::clear_membercount() {
  membercount_ = 0u;
  clear_has_membercount();
}
inline ::google::protobuf::uint32 ChatRoomMemberData::membercount() const {
  // @@protoc_insertion_point(field_get:micromsg.ChatRoomMemberData.MemberCount)
  return membercount_;
}
inline void ChatRoomMemberData::set_membercount(::google::protobuf::uint32 value) {
  set_has_membercount();
  membercount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ChatRoomMemberData.MemberCount)
}

// repeated .micromsg.ChatRoomMemberInfo ChatRoomMember = 2;
inline int ChatRoomMemberData::chatroommember_size() const {
  return chatroommember_.size();
}
inline void ChatRoomMemberData::clear_chatroommember() {
  chatroommember_.Clear();
}
inline const ::micromsg::ChatRoomMemberInfo& ChatRoomMemberData::chatroommember(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.ChatRoomMemberData.ChatRoomMember)
  return chatroommember_.Get(index);
}
inline ::micromsg::ChatRoomMemberInfo* ChatRoomMemberData::mutable_chatroommember(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.ChatRoomMemberData.ChatRoomMember)
  return chatroommember_.Mutable(index);
}
inline ::micromsg::ChatRoomMemberInfo* ChatRoomMemberData::add_chatroommember() {
  // @@protoc_insertion_point(field_add:micromsg.ChatRoomMemberData.ChatRoomMember)
  return chatroommember_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::ChatRoomMemberInfo >*
ChatRoomMemberData::mutable_chatroommember() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.ChatRoomMemberData.ChatRoomMember)
  return &chatroommember_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::ChatRoomMemberInfo >&
ChatRoomMemberData::chatroommember() const {
  // @@protoc_insertion_point(field_list:micromsg.ChatRoomMemberData.ChatRoomMember)
  return chatroommember_;
}

// optional uint32 InfoMask = 3;
inline bool ChatRoomMemberData::has_infomask() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatRoomMemberData::set_has_infomask() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatRoomMemberData::clear_has_infomask() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatRoomMemberData::clear_infomask() {
  infomask_ = 0u;
  clear_has_infomask();
}
inline ::google::protobuf::uint32 ChatRoomMemberData::infomask() const {
  // @@protoc_insertion_point(field_get:micromsg.ChatRoomMemberData.InfoMask)
  return infomask_;
}
inline void ChatRoomMemberData::set_infomask(::google::protobuf::uint32 value) {
  set_has_infomask();
  infomask_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ChatRoomMemberData.InfoMask)
}

// -------------------------------------------------------------------

// PatternLockInfo

// optional uint32 PatternVersion = 1;
inline bool PatternLockInfo::has_patternversion() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PatternLockInfo::set_has_patternversion() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PatternLockInfo::clear_has_patternversion() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PatternLockInfo::clear_patternversion() {
  patternversion_ = 0u;
  clear_has_patternversion();
}
inline ::google::protobuf::uint32 PatternLockInfo::patternversion() const {
  // @@protoc_insertion_point(field_get:micromsg.PatternLockInfo.PatternVersion)
  return patternversion_;
}
inline void PatternLockInfo::set_patternversion(::google::protobuf::uint32 value) {
  set_has_patternversion();
  patternversion_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PatternLockInfo.PatternVersion)
}

// optional .micromsg.SKBuiltinBuffer_t Sign = 2;
inline bool PatternLockInfo::has_sign() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PatternLockInfo::set_has_sign() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PatternLockInfo::clear_has_sign() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PatternLockInfo::clear_sign() {
  if (sign_ != NULL) sign_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_sign();
}
inline const ::micromsg::SKBuiltinBuffer_t& PatternLockInfo::sign() const {
  // @@protoc_insertion_point(field_get:micromsg.PatternLockInfo.Sign)
  return sign_ != NULL ? *sign_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinBuffer_t* PatternLockInfo::mutable_sign() {
  set_has_sign();
  if (sign_ == NULL) {
    sign_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.PatternLockInfo.Sign)
  return sign_;
}
inline ::micromsg::SKBuiltinBuffer_t* PatternLockInfo::release_sign() {
  // @@protoc_insertion_point(field_release:micromsg.PatternLockInfo.Sign)
  clear_has_sign();
  ::micromsg::SKBuiltinBuffer_t* temp = sign_;
  sign_ = NULL;
  return temp;
}
inline void PatternLockInfo::set_allocated_sign(::micromsg::SKBuiltinBuffer_t* sign) {
  delete sign_;
  sign_ = sign;
  if (sign) {
    set_has_sign();
  } else {
    clear_has_sign();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.PatternLockInfo.Sign)
}

// optional uint32 LockStatus = 3;
inline bool PatternLockInfo::has_lockstatus() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PatternLockInfo::set_has_lockstatus() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PatternLockInfo::clear_has_lockstatus() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PatternLockInfo::clear_lockstatus() {
  lockstatus_ = 0u;
  clear_has_lockstatus();
}
inline ::google::protobuf::uint32 PatternLockInfo::lockstatus() const {
  // @@protoc_insertion_point(field_get:micromsg.PatternLockInfo.LockStatus)
  return lockstatus_;
}
inline void PatternLockInfo::set_lockstatus(::google::protobuf::uint32 value) {
  set_has_lockstatus();
  lockstatus_ = value;
  // @@protoc_insertion_point(field_set:micromsg.PatternLockInfo.LockStatus)
}

// -------------------------------------------------------------------

// ModUserInfo

// required uint32 BitFlag = 1;
inline bool ModUserInfo::has_bitflag() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ModUserInfo::set_has_bitflag() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ModUserInfo::clear_has_bitflag() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ModUserInfo::clear_bitflag() {
  bitflag_ = 0u;
  clear_has_bitflag();
}
inline ::google::protobuf::uint32 ModUserInfo::bitflag() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.BitFlag)
  return bitflag_;
}
inline void ModUserInfo::set_bitflag(::google::protobuf::uint32 value) {
  set_has_bitflag();
  bitflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModUserInfo.BitFlag)
}

// required .micromsg.SKBuiltinString_t UserName = 2;
inline bool ModUserInfo::has_username() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ModUserInfo::set_has_username() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ModUserInfo::clear_has_username() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ModUserInfo::clear_username() {
  if (username_ != NULL) username_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_username();
}
inline const ::micromsg::SKBuiltinString_t& ModUserInfo::username() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.UserName)
  return username_ != NULL ? *username_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinString_t* ModUserInfo::mutable_username() {
  set_has_username();
  if (username_ == NULL) {
    username_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ModUserInfo.UserName)
  return username_;
}
inline ::micromsg::SKBuiltinString_t* ModUserInfo::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.ModUserInfo.UserName)
  clear_has_username();
  ::micromsg::SKBuiltinString_t* temp = username_;
  username_ = NULL;
  return temp;
}
inline void ModUserInfo::set_allocated_username(::micromsg::SKBuiltinString_t* username) {
  delete username_;
  username_ = username;
  if (username) {
    set_has_username();
  } else {
    clear_has_username();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModUserInfo.UserName)
}

// required .micromsg.SKBuiltinString_t NickName = 3;
inline bool ModUserInfo::has_nickname() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ModUserInfo::set_has_nickname() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ModUserInfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ModUserInfo::clear_nickname() {
  if (nickname_ != NULL) nickname_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_nickname();
}
inline const ::micromsg::SKBuiltinString_t& ModUserInfo::nickname() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.NickName)
  return nickname_ != NULL ? *nickname_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinString_t* ModUserInfo::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == NULL) {
    nickname_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ModUserInfo.NickName)
  return nickname_;
}
inline ::micromsg::SKBuiltinString_t* ModUserInfo::release_nickname() {
  // @@protoc_insertion_point(field_release:micromsg.ModUserInfo.NickName)
  clear_has_nickname();
  ::micromsg::SKBuiltinString_t* temp = nickname_;
  nickname_ = NULL;
  return temp;
}
inline void ModUserInfo::set_allocated_nickname(::micromsg::SKBuiltinString_t* nickname) {
  delete nickname_;
  nickname_ = nickname;
  if (nickname) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModUserInfo.NickName)
}

// required uint32 BindUin = 4;
inline bool ModUserInfo::has_binduin() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ModUserInfo::set_has_binduin() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ModUserInfo::clear_has_binduin() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ModUserInfo::clear_binduin() {
  binduin_ = 0u;
  clear_has_binduin();
}
inline ::google::protobuf::uint32 ModUserInfo::binduin() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.BindUin)
  return binduin_;
}
inline void ModUserInfo::set_binduin(::google::protobuf::uint32 value) {
  set_has_binduin();
  binduin_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModUserInfo.BindUin)
}

// required .micromsg.SKBuiltinString_t BindEmail = 5;
inline bool ModUserInfo::has_bindemail() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ModUserInfo::set_has_bindemail() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ModUserInfo::clear_has_bindemail() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ModUserInfo::clear_bindemail() {
  if (bindemail_ != NULL) bindemail_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_bindemail();
}
inline const ::micromsg::SKBuiltinString_t& ModUserInfo::bindemail() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.BindEmail)
  return bindemail_ != NULL ? *bindemail_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinString_t* ModUserInfo::mutable_bindemail() {
  set_has_bindemail();
  if (bindemail_ == NULL) {
    bindemail_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ModUserInfo.BindEmail)
  return bindemail_;
}
inline ::micromsg::SKBuiltinString_t* ModUserInfo::release_bindemail() {
  // @@protoc_insertion_point(field_release:micromsg.ModUserInfo.BindEmail)
  clear_has_bindemail();
  ::micromsg::SKBuiltinString_t* temp = bindemail_;
  bindemail_ = NULL;
  return temp;
}
inline void ModUserInfo::set_allocated_bindemail(::micromsg::SKBuiltinString_t* bindemail) {
  delete bindemail_;
  bindemail_ = bindemail;
  if (bindemail) {
    set_has_bindemail();
  } else {
    clear_has_bindemail();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModUserInfo.BindEmail)
}

// required .micromsg.SKBuiltinString_t BindMobile = 6;
inline bool ModUserInfo::has_bindmobile() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ModUserInfo::set_has_bindmobile() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ModUserInfo::clear_has_bindmobile() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ModUserInfo::clear_bindmobile() {
  if (bindmobile_ != NULL) bindmobile_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_bindmobile();
}
inline const ::micromsg::SKBuiltinString_t& ModUserInfo::bindmobile() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.BindMobile)
  return bindmobile_ != NULL ? *bindmobile_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinString_t* ModUserInfo::mutable_bindmobile() {
  set_has_bindmobile();
  if (bindmobile_ == NULL) {
    bindmobile_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ModUserInfo.BindMobile)
  return bindmobile_;
}
inline ::micromsg::SKBuiltinString_t* ModUserInfo::release_bindmobile() {
  // @@protoc_insertion_point(field_release:micromsg.ModUserInfo.BindMobile)
  clear_has_bindmobile();
  ::micromsg::SKBuiltinString_t* temp = bindmobile_;
  bindmobile_ = NULL;
  return temp;
}
inline void ModUserInfo::set_allocated_bindmobile(::micromsg::SKBuiltinString_t* bindmobile) {
  delete bindmobile_;
  bindmobile_ = bindmobile;
  if (bindmobile) {
    set_has_bindmobile();
  } else {
    clear_has_bindmobile();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModUserInfo.BindMobile)
}

// required uint32 Status = 7;
inline bool ModUserInfo::has_status() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ModUserInfo::set_has_status() {
  _has_bits_[0] |= 0x00100000u;
}
inline void ModUserInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void ModUserInfo::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 ModUserInfo::status() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.Status)
  return status_;
}
inline void ModUserInfo::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModUserInfo.Status)
}

// required uint32 ImgLen = 8;
inline bool ModUserInfo::has_imglen() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void ModUserInfo::set_has_imglen() {
  _has_bits_[0] |= 0x00200000u;
}
inline void ModUserInfo::clear_has_imglen() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void ModUserInfo::clear_imglen() {
  imglen_ = 0u;
  clear_has_imglen();
}
inline ::google::protobuf::uint32 ModUserInfo::imglen() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.ImgLen)
  return imglen_;
}
inline void ModUserInfo::set_imglen(::google::protobuf::uint32 value) {
  set_has_imglen();
  imglen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModUserInfo.ImgLen)
}

// optional bytes ImgBuf = 9;
inline bool ModUserInfo::has_imgbuf() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ModUserInfo::set_has_imgbuf() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ModUserInfo::clear_has_imgbuf() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ModUserInfo::clear_imgbuf() {
  imgbuf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_imgbuf();
}
inline const ::std::string& ModUserInfo::imgbuf() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.ImgBuf)
  return imgbuf_.GetNoArena();
}
inline void ModUserInfo::set_imgbuf(const ::std::string& value) {
  set_has_imgbuf();
  imgbuf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModUserInfo.ImgBuf)
}
#if LANG_CXX11
inline void ModUserInfo::set_imgbuf(::std::string&& value) {
  set_has_imgbuf();
  imgbuf_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModUserInfo.ImgBuf)
}
#endif
inline void ModUserInfo::set_imgbuf(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_imgbuf();
  imgbuf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModUserInfo.ImgBuf)
}
inline void ModUserInfo::set_imgbuf(const void* value, size_t size) {
  set_has_imgbuf();
  imgbuf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModUserInfo.ImgBuf)
}
inline ::std::string* ModUserInfo::mutable_imgbuf() {
  set_has_imgbuf();
  // @@protoc_insertion_point(field_mutable:micromsg.ModUserInfo.ImgBuf)
  return imgbuf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModUserInfo::release_imgbuf() {
  // @@protoc_insertion_point(field_release:micromsg.ModUserInfo.ImgBuf)
  clear_has_imgbuf();
  return imgbuf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModUserInfo::set_allocated_imgbuf(::std::string* imgbuf) {
  if (imgbuf != NULL) {
    set_has_imgbuf();
  } else {
    clear_has_imgbuf();
  }
  imgbuf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imgbuf);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModUserInfo.ImgBuf)
}

// optional int32 Sex = 10;
inline bool ModUserInfo::has_sex() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void ModUserInfo::set_has_sex() {
  _has_bits_[0] |= 0x00400000u;
}
inline void ModUserInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void ModUserInfo::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 ModUserInfo::sex() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.Sex)
  return sex_;
}
inline void ModUserInfo::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModUserInfo.Sex)
}

// optional string Province = 11;
inline bool ModUserInfo::has_province() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ModUserInfo::set_has_province() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ModUserInfo::clear_has_province() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ModUserInfo::clear_province() {
  province_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_province();
}
inline const ::std::string& ModUserInfo::province() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.Province)
  return province_.GetNoArena();
}
inline void ModUserInfo::set_province(const ::std::string& value) {
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModUserInfo.Province)
}
#if LANG_CXX11
inline void ModUserInfo::set_province(::std::string&& value) {
  set_has_province();
  province_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModUserInfo.Province)
}
#endif
inline void ModUserInfo::set_province(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModUserInfo.Province)
}
inline void ModUserInfo::set_province(const char* value, size_t size) {
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModUserInfo.Province)
}
inline ::std::string* ModUserInfo::mutable_province() {
  set_has_province();
  // @@protoc_insertion_point(field_mutable:micromsg.ModUserInfo.Province)
  return province_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModUserInfo::release_province() {
  // @@protoc_insertion_point(field_release:micromsg.ModUserInfo.Province)
  clear_has_province();
  return province_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModUserInfo::set_allocated_province(::std::string* province) {
  if (province != NULL) {
    set_has_province();
  } else {
    clear_has_province();
  }
  province_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), province);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModUserInfo.Province)
}

// optional string City = 12;
inline bool ModUserInfo::has_city() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ModUserInfo::set_has_city() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ModUserInfo::clear_has_city() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ModUserInfo::clear_city() {
  city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_city();
}
inline const ::std::string& ModUserInfo::city() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.City)
  return city_.GetNoArena();
}
inline void ModUserInfo::set_city(const ::std::string& value) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModUserInfo.City)
}
#if LANG_CXX11
inline void ModUserInfo::set_city(::std::string&& value) {
  set_has_city();
  city_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModUserInfo.City)
}
#endif
inline void ModUserInfo::set_city(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModUserInfo.City)
}
inline void ModUserInfo::set_city(const char* value, size_t size) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModUserInfo.City)
}
inline ::std::string* ModUserInfo::mutable_city() {
  set_has_city();
  // @@protoc_insertion_point(field_mutable:micromsg.ModUserInfo.City)
  return city_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModUserInfo::release_city() {
  // @@protoc_insertion_point(field_release:micromsg.ModUserInfo.City)
  clear_has_city();
  return city_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModUserInfo::set_allocated_city(::std::string* city) {
  if (city != NULL) {
    set_has_city();
  } else {
    clear_has_city();
  }
  city_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModUserInfo.City)
}

// optional string Signature = 13;
inline bool ModUserInfo::has_signature() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ModUserInfo::set_has_signature() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ModUserInfo::clear_has_signature() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ModUserInfo::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_signature();
}
inline const ::std::string& ModUserInfo::signature() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.Signature)
  return signature_.GetNoArena();
}
inline void ModUserInfo::set_signature(const ::std::string& value) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModUserInfo.Signature)
}
#if LANG_CXX11
inline void ModUserInfo::set_signature(::std::string&& value) {
  set_has_signature();
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModUserInfo.Signature)
}
#endif
inline void ModUserInfo::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModUserInfo.Signature)
}
inline void ModUserInfo::set_signature(const char* value, size_t size) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModUserInfo.Signature)
}
inline ::std::string* ModUserInfo::mutable_signature() {
  set_has_signature();
  // @@protoc_insertion_point(field_mutable:micromsg.ModUserInfo.Signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModUserInfo::release_signature() {
  // @@protoc_insertion_point(field_release:micromsg.ModUserInfo.Signature)
  clear_has_signature();
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModUserInfo::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModUserInfo.Signature)
}

// optional uint32 PersonalCard = 14;
inline bool ModUserInfo::has_personalcard() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void ModUserInfo::set_has_personalcard() {
  _has_bits_[0] |= 0x00800000u;
}
inline void ModUserInfo::clear_has_personalcard() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void ModUserInfo::clear_personalcard() {
  personalcard_ = 0u;
  clear_has_personalcard();
}
inline ::google::protobuf::uint32 ModUserInfo::personalcard() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.PersonalCard)
  return personalcard_;
}
inline void ModUserInfo::set_personalcard(::google::protobuf::uint32 value) {
  set_has_personalcard();
  personalcard_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModUserInfo.PersonalCard)
}

// optional .micromsg.DisturbSetting DisturbSetting = 15;
inline bool ModUserInfo::has_disturbsetting() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ModUserInfo::set_has_disturbsetting() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ModUserInfo::clear_has_disturbsetting() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ModUserInfo::clear_disturbsetting() {
  if (disturbsetting_ != NULL) disturbsetting_->::micromsg::DisturbSetting::Clear();
  clear_has_disturbsetting();
}
inline const ::micromsg::DisturbSetting& ModUserInfo::disturbsetting() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.DisturbSetting)
  return disturbsetting_ != NULL ? *disturbsetting_
                         : *::micromsg::DisturbSetting::internal_default_instance();
}
inline ::micromsg::DisturbSetting* ModUserInfo::mutable_disturbsetting() {
  set_has_disturbsetting();
  if (disturbsetting_ == NULL) {
    disturbsetting_ = new ::micromsg::DisturbSetting;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ModUserInfo.DisturbSetting)
  return disturbsetting_;
}
inline ::micromsg::DisturbSetting* ModUserInfo::release_disturbsetting() {
  // @@protoc_insertion_point(field_release:micromsg.ModUserInfo.DisturbSetting)
  clear_has_disturbsetting();
  ::micromsg::DisturbSetting* temp = disturbsetting_;
  disturbsetting_ = NULL;
  return temp;
}
inline void ModUserInfo::set_allocated_disturbsetting(::micromsg::DisturbSetting* disturbsetting) {
  delete disturbsetting_;
  disturbsetting_ = disturbsetting;
  if (disturbsetting) {
    set_has_disturbsetting();
  } else {
    clear_has_disturbsetting();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModUserInfo.DisturbSetting)
}

// optional uint32 PluginFlag = 16;
inline bool ModUserInfo::has_pluginflag() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void ModUserInfo::set_has_pluginflag() {
  _has_bits_[0] |= 0x01000000u;
}
inline void ModUserInfo::clear_has_pluginflag() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void ModUserInfo::clear_pluginflag() {
  pluginflag_ = 0u;
  clear_has_pluginflag();
}
inline ::google::protobuf::uint32 ModUserInfo::pluginflag() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.PluginFlag)
  return pluginflag_;
}
inline void ModUserInfo::set_pluginflag(::google::protobuf::uint32 value) {
  set_has_pluginflag();
  pluginflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModUserInfo.PluginFlag)
}

// optional uint32 VerifyFlag = 17;
inline bool ModUserInfo::has_verifyflag() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void ModUserInfo::set_has_verifyflag() {
  _has_bits_[0] |= 0x02000000u;
}
inline void ModUserInfo::clear_has_verifyflag() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void ModUserInfo::clear_verifyflag() {
  verifyflag_ = 0u;
  clear_has_verifyflag();
}
inline ::google::protobuf::uint32 ModUserInfo::verifyflag() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.VerifyFlag)
  return verifyflag_;
}
inline void ModUserInfo::set_verifyflag(::google::protobuf::uint32 value) {
  set_has_verifyflag();
  verifyflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModUserInfo.VerifyFlag)
}

// optional string VerifyInfo = 18;
inline bool ModUserInfo::has_verifyinfo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ModUserInfo::set_has_verifyinfo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ModUserInfo::clear_has_verifyinfo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ModUserInfo::clear_verifyinfo() {
  verifyinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_verifyinfo();
}
inline const ::std::string& ModUserInfo::verifyinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.VerifyInfo)
  return verifyinfo_.GetNoArena();
}
inline void ModUserInfo::set_verifyinfo(const ::std::string& value) {
  set_has_verifyinfo();
  verifyinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModUserInfo.VerifyInfo)
}
#if LANG_CXX11
inline void ModUserInfo::set_verifyinfo(::std::string&& value) {
  set_has_verifyinfo();
  verifyinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModUserInfo.VerifyInfo)
}
#endif
inline void ModUserInfo::set_verifyinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_verifyinfo();
  verifyinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModUserInfo.VerifyInfo)
}
inline void ModUserInfo::set_verifyinfo(const char* value, size_t size) {
  set_has_verifyinfo();
  verifyinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModUserInfo.VerifyInfo)
}
inline ::std::string* ModUserInfo::mutable_verifyinfo() {
  set_has_verifyinfo();
  // @@protoc_insertion_point(field_mutable:micromsg.ModUserInfo.VerifyInfo)
  return verifyinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModUserInfo::release_verifyinfo() {
  // @@protoc_insertion_point(field_release:micromsg.ModUserInfo.VerifyInfo)
  clear_has_verifyinfo();
  return verifyinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModUserInfo::set_allocated_verifyinfo(::std::string* verifyinfo) {
  if (verifyinfo != NULL) {
    set_has_verifyinfo();
  } else {
    clear_has_verifyinfo();
  }
  verifyinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verifyinfo);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModUserInfo.VerifyInfo)
}

// optional int32 Point = 19;
inline bool ModUserInfo::has_point() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void ModUserInfo::set_has_point() {
  _has_bits_[0] |= 0x04000000u;
}
inline void ModUserInfo::clear_has_point() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void ModUserInfo::clear_point() {
  point_ = 0;
  clear_has_point();
}
inline ::google::protobuf::int32 ModUserInfo::point() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.Point)
  return point_;
}
inline void ModUserInfo::set_point(::google::protobuf::int32 value) {
  set_has_point();
  point_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModUserInfo.Point)
}

// optional int32 Experience = 20;
inline bool ModUserInfo::has_experience() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void ModUserInfo::set_has_experience() {
  _has_bits_[0] |= 0x08000000u;
}
inline void ModUserInfo::clear_has_experience() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void ModUserInfo::clear_experience() {
  experience_ = 0;
  clear_has_experience();
}
inline ::google::protobuf::int32 ModUserInfo::experience() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.Experience)
  return experience_;
}
inline void ModUserInfo::set_experience(::google::protobuf::int32 value) {
  set_has_experience();
  experience_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModUserInfo.Experience)
}

// optional int32 Level = 21;
inline bool ModUserInfo::has_level() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void ModUserInfo::set_has_level() {
  _has_bits_[0] |= 0x10000000u;
}
inline void ModUserInfo::clear_has_level() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void ModUserInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 ModUserInfo::level() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.Level)
  return level_;
}
inline void ModUserInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModUserInfo.Level)
}

// optional int32 LevelLowExp = 22;
inline bool ModUserInfo::has_levellowexp() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void ModUserInfo::set_has_levellowexp() {
  _has_bits_[0] |= 0x20000000u;
}
inline void ModUserInfo::clear_has_levellowexp() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void ModUserInfo::clear_levellowexp() {
  levellowexp_ = 0;
  clear_has_levellowexp();
}
inline ::google::protobuf::int32 ModUserInfo::levellowexp() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.LevelLowExp)
  return levellowexp_;
}
inline void ModUserInfo::set_levellowexp(::google::protobuf::int32 value) {
  set_has_levellowexp();
  levellowexp_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModUserInfo.LevelLowExp)
}

// optional int32 LevelHighExp = 23;
inline bool ModUserInfo::has_levelhighexp() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void ModUserInfo::set_has_levelhighexp() {
  _has_bits_[0] |= 0x40000000u;
}
inline void ModUserInfo::clear_has_levelhighexp() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void ModUserInfo::clear_levelhighexp() {
  levelhighexp_ = 0;
  clear_has_levelhighexp();
}
inline ::google::protobuf::int32 ModUserInfo::levelhighexp() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.LevelHighExp)
  return levelhighexp_;
}
inline void ModUserInfo::set_levelhighexp(::google::protobuf::int32 value) {
  set_has_levelhighexp();
  levelhighexp_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModUserInfo.LevelHighExp)
}

// optional string Weibo = 24;
inline bool ModUserInfo::has_weibo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ModUserInfo::set_has_weibo() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ModUserInfo::clear_has_weibo() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ModUserInfo::clear_weibo() {
  weibo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_weibo();
}
inline const ::std::string& ModUserInfo::weibo() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.Weibo)
  return weibo_.GetNoArena();
}
inline void ModUserInfo::set_weibo(const ::std::string& value) {
  set_has_weibo();
  weibo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModUserInfo.Weibo)
}
#if LANG_CXX11
inline void ModUserInfo::set_weibo(::std::string&& value) {
  set_has_weibo();
  weibo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModUserInfo.Weibo)
}
#endif
inline void ModUserInfo::set_weibo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_weibo();
  weibo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModUserInfo.Weibo)
}
inline void ModUserInfo::set_weibo(const char* value, size_t size) {
  set_has_weibo();
  weibo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModUserInfo.Weibo)
}
inline ::std::string* ModUserInfo::mutable_weibo() {
  set_has_weibo();
  // @@protoc_insertion_point(field_mutable:micromsg.ModUserInfo.Weibo)
  return weibo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModUserInfo::release_weibo() {
  // @@protoc_insertion_point(field_release:micromsg.ModUserInfo.Weibo)
  clear_has_weibo();
  return weibo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModUserInfo::set_allocated_weibo(::std::string* weibo) {
  if (weibo != NULL) {
    set_has_weibo();
  } else {
    clear_has_weibo();
  }
  weibo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), weibo);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModUserInfo.Weibo)
}

// optional uint32 PluginSwitch = 25;
inline bool ModUserInfo::has_pluginswitch() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void ModUserInfo::set_has_pluginswitch() {
  _has_bits_[0] |= 0x80000000u;
}
inline void ModUserInfo::clear_has_pluginswitch() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void ModUserInfo::clear_pluginswitch() {
  pluginswitch_ = 0u;
  clear_has_pluginswitch();
}
inline ::google::protobuf::uint32 ModUserInfo::pluginswitch() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.PluginSwitch)
  return pluginswitch_;
}
inline void ModUserInfo::set_pluginswitch(::google::protobuf::uint32 value) {
  set_has_pluginswitch();
  pluginswitch_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModUserInfo.PluginSwitch)
}

// optional .micromsg.GmailList GmailList = 26;
inline bool ModUserInfo::has_gmaillist() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ModUserInfo::set_has_gmaillist() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ModUserInfo::clear_has_gmaillist() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ModUserInfo::clear_gmaillist() {
  if (gmaillist_ != NULL) gmaillist_->::micromsg::GmailList::Clear();
  clear_has_gmaillist();
}
inline const ::micromsg::GmailList& ModUserInfo::gmaillist() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.GmailList)
  return gmaillist_ != NULL ? *gmaillist_
                         : *::micromsg::GmailList::internal_default_instance();
}
inline ::micromsg::GmailList* ModUserInfo::mutable_gmaillist() {
  set_has_gmaillist();
  if (gmaillist_ == NULL) {
    gmaillist_ = new ::micromsg::GmailList;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ModUserInfo.GmailList)
  return gmaillist_;
}
inline ::micromsg::GmailList* ModUserInfo::release_gmaillist() {
  // @@protoc_insertion_point(field_release:micromsg.ModUserInfo.GmailList)
  clear_has_gmaillist();
  ::micromsg::GmailList* temp = gmaillist_;
  gmaillist_ = NULL;
  return temp;
}
inline void ModUserInfo::set_allocated_gmaillist(::micromsg::GmailList* gmaillist) {
  delete gmaillist_;
  gmaillist_ = gmaillist;
  if (gmaillist) {
    set_has_gmaillist();
  } else {
    clear_has_gmaillist();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModUserInfo.GmailList)
}

// optional string Alias = 27;
inline bool ModUserInfo::has_alias() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ModUserInfo::set_has_alias() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ModUserInfo::clear_has_alias() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ModUserInfo::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_alias();
}
inline const ::std::string& ModUserInfo::alias() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.Alias)
  return alias_.GetNoArena();
}
inline void ModUserInfo::set_alias(const ::std::string& value) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModUserInfo.Alias)
}
#if LANG_CXX11
inline void ModUserInfo::set_alias(::std::string&& value) {
  set_has_alias();
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModUserInfo.Alias)
}
#endif
inline void ModUserInfo::set_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModUserInfo.Alias)
}
inline void ModUserInfo::set_alias(const char* value, size_t size) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModUserInfo.Alias)
}
inline ::std::string* ModUserInfo::mutable_alias() {
  set_has_alias();
  // @@protoc_insertion_point(field_mutable:micromsg.ModUserInfo.Alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModUserInfo::release_alias() {
  // @@protoc_insertion_point(field_release:micromsg.ModUserInfo.Alias)
  clear_has_alias();
  return alias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModUserInfo::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    set_has_alias();
  } else {
    clear_has_alias();
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModUserInfo.Alias)
}

// optional string WeiboNickname = 28;
inline bool ModUserInfo::has_weibonickname() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ModUserInfo::set_has_weibonickname() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ModUserInfo::clear_has_weibonickname() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ModUserInfo::clear_weibonickname() {
  weibonickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_weibonickname();
}
inline const ::std::string& ModUserInfo::weibonickname() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.WeiboNickname)
  return weibonickname_.GetNoArena();
}
inline void ModUserInfo::set_weibonickname(const ::std::string& value) {
  set_has_weibonickname();
  weibonickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModUserInfo.WeiboNickname)
}
#if LANG_CXX11
inline void ModUserInfo::set_weibonickname(::std::string&& value) {
  set_has_weibonickname();
  weibonickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModUserInfo.WeiboNickname)
}
#endif
inline void ModUserInfo::set_weibonickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_weibonickname();
  weibonickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModUserInfo.WeiboNickname)
}
inline void ModUserInfo::set_weibonickname(const char* value, size_t size) {
  set_has_weibonickname();
  weibonickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModUserInfo.WeiboNickname)
}
inline ::std::string* ModUserInfo::mutable_weibonickname() {
  set_has_weibonickname();
  // @@protoc_insertion_point(field_mutable:micromsg.ModUserInfo.WeiboNickname)
  return weibonickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModUserInfo::release_weibonickname() {
  // @@protoc_insertion_point(field_release:micromsg.ModUserInfo.WeiboNickname)
  clear_has_weibonickname();
  return weibonickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModUserInfo::set_allocated_weibonickname(::std::string* weibonickname) {
  if (weibonickname != NULL) {
    set_has_weibonickname();
  } else {
    clear_has_weibonickname();
  }
  weibonickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), weibonickname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModUserInfo.WeiboNickname)
}

// optional uint32 WeiboFlag = 29;
inline bool ModUserInfo::has_weiboflag() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void ModUserInfo::set_has_weiboflag() {
  _has_bits_[1] |= 0x00000001u;
}
inline void ModUserInfo::clear_has_weiboflag() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void ModUserInfo::clear_weiboflag() {
  weiboflag_ = 0u;
  clear_has_weiboflag();
}
inline ::google::protobuf::uint32 ModUserInfo::weiboflag() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.WeiboFlag)
  return weiboflag_;
}
inline void ModUserInfo::set_weiboflag(::google::protobuf::uint32 value) {
  set_has_weiboflag();
  weiboflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModUserInfo.WeiboFlag)
}

// optional uint32 FaceBookFlag = 30;
inline bool ModUserInfo::has_facebookflag() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void ModUserInfo::set_has_facebookflag() {
  _has_bits_[1] |= 0x00000002u;
}
inline void ModUserInfo::clear_has_facebookflag() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void ModUserInfo::clear_facebookflag() {
  facebookflag_ = 0u;
  clear_has_facebookflag();
}
inline ::google::protobuf::uint32 ModUserInfo::facebookflag() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.FaceBookFlag)
  return facebookflag_;
}
inline void ModUserInfo::set_facebookflag(::google::protobuf::uint32 value) {
  set_has_facebookflag();
  facebookflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModUserInfo.FaceBookFlag)
}

// optional uint64 FBUserID = 31;
inline bool ModUserInfo::has_fbuserid() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void ModUserInfo::set_has_fbuserid() {
  _has_bits_[1] |= 0x00000004u;
}
inline void ModUserInfo::clear_has_fbuserid() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void ModUserInfo::clear_fbuserid() {
  fbuserid_ = GOOGLE_ULONGLONG(0);
  clear_has_fbuserid();
}
inline ::google::protobuf::uint64 ModUserInfo::fbuserid() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.FBUserID)
  return fbuserid_;
}
inline void ModUserInfo::set_fbuserid(::google::protobuf::uint64 value) {
  set_has_fbuserid();
  fbuserid_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModUserInfo.FBUserID)
}

// optional string FBUserName = 32;
inline bool ModUserInfo::has_fbusername() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ModUserInfo::set_has_fbusername() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ModUserInfo::clear_has_fbusername() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ModUserInfo::clear_fbusername() {
  fbusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fbusername();
}
inline const ::std::string& ModUserInfo::fbusername() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.FBUserName)
  return fbusername_.GetNoArena();
}
inline void ModUserInfo::set_fbusername(const ::std::string& value) {
  set_has_fbusername();
  fbusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModUserInfo.FBUserName)
}
#if LANG_CXX11
inline void ModUserInfo::set_fbusername(::std::string&& value) {
  set_has_fbusername();
  fbusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModUserInfo.FBUserName)
}
#endif
inline void ModUserInfo::set_fbusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fbusername();
  fbusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModUserInfo.FBUserName)
}
inline void ModUserInfo::set_fbusername(const char* value, size_t size) {
  set_has_fbusername();
  fbusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModUserInfo.FBUserName)
}
inline ::std::string* ModUserInfo::mutable_fbusername() {
  set_has_fbusername();
  // @@protoc_insertion_point(field_mutable:micromsg.ModUserInfo.FBUserName)
  return fbusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModUserInfo::release_fbusername() {
  // @@protoc_insertion_point(field_release:micromsg.ModUserInfo.FBUserName)
  clear_has_fbusername();
  return fbusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModUserInfo::set_allocated_fbusername(::std::string* fbusername) {
  if (fbusername != NULL) {
    set_has_fbusername();
  } else {
    clear_has_fbusername();
  }
  fbusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fbusername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModUserInfo.FBUserName)
}

// optional int32 AlbumStyle = 33;
inline bool ModUserInfo::has_albumstyle() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void ModUserInfo::set_has_albumstyle() {
  _has_bits_[1] |= 0x00000008u;
}
inline void ModUserInfo::clear_has_albumstyle() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void ModUserInfo::clear_albumstyle() {
  albumstyle_ = 0;
  clear_has_albumstyle();
}
inline ::google::protobuf::int32 ModUserInfo::albumstyle() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.AlbumStyle)
  return albumstyle_;
}
inline void ModUserInfo::set_albumstyle(::google::protobuf::int32 value) {
  set_has_albumstyle();
  albumstyle_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModUserInfo.AlbumStyle)
}

// optional int32 AlbumFlag = 34;
inline bool ModUserInfo::has_albumflag() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void ModUserInfo::set_has_albumflag() {
  _has_bits_[1] |= 0x00000010u;
}
inline void ModUserInfo::clear_has_albumflag() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void ModUserInfo::clear_albumflag() {
  albumflag_ = 0;
  clear_has_albumflag();
}
inline ::google::protobuf::int32 ModUserInfo::albumflag() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.AlbumFlag)
  return albumflag_;
}
inline void ModUserInfo::set_albumflag(::google::protobuf::int32 value) {
  set_has_albumflag();
  albumflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModUserInfo.AlbumFlag)
}

// optional string AlbumBGImgID = 35;
inline bool ModUserInfo::has_albumbgimgid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ModUserInfo::set_has_albumbgimgid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ModUserInfo::clear_has_albumbgimgid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ModUserInfo::clear_albumbgimgid() {
  albumbgimgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_albumbgimgid();
}
inline const ::std::string& ModUserInfo::albumbgimgid() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.AlbumBGImgID)
  return albumbgimgid_.GetNoArena();
}
inline void ModUserInfo::set_albumbgimgid(const ::std::string& value) {
  set_has_albumbgimgid();
  albumbgimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModUserInfo.AlbumBGImgID)
}
#if LANG_CXX11
inline void ModUserInfo::set_albumbgimgid(::std::string&& value) {
  set_has_albumbgimgid();
  albumbgimgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModUserInfo.AlbumBGImgID)
}
#endif
inline void ModUserInfo::set_albumbgimgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_albumbgimgid();
  albumbgimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModUserInfo.AlbumBGImgID)
}
inline void ModUserInfo::set_albumbgimgid(const char* value, size_t size) {
  set_has_albumbgimgid();
  albumbgimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModUserInfo.AlbumBGImgID)
}
inline ::std::string* ModUserInfo::mutable_albumbgimgid() {
  set_has_albumbgimgid();
  // @@protoc_insertion_point(field_mutable:micromsg.ModUserInfo.AlbumBGImgID)
  return albumbgimgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModUserInfo::release_albumbgimgid() {
  // @@protoc_insertion_point(field_release:micromsg.ModUserInfo.AlbumBGImgID)
  clear_has_albumbgimgid();
  return albumbgimgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModUserInfo::set_allocated_albumbgimgid(::std::string* albumbgimgid) {
  if (albumbgimgid != NULL) {
    set_has_albumbgimgid();
  } else {
    clear_has_albumbgimgid();
  }
  albumbgimgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), albumbgimgid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModUserInfo.AlbumBGImgID)
}

// optional uint32 TXNewsCategory = 36;
inline bool ModUserInfo::has_txnewscategory() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void ModUserInfo::set_has_txnewscategory() {
  _has_bits_[1] |= 0x00000020u;
}
inline void ModUserInfo::clear_has_txnewscategory() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void ModUserInfo::clear_txnewscategory() {
  txnewscategory_ = 0u;
  clear_has_txnewscategory();
}
inline ::google::protobuf::uint32 ModUserInfo::txnewscategory() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.TXNewsCategory)
  return txnewscategory_;
}
inline void ModUserInfo::set_txnewscategory(::google::protobuf::uint32 value) {
  set_has_txnewscategory();
  txnewscategory_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModUserInfo.TXNewsCategory)
}

// optional string FBToken = 37;
inline bool ModUserInfo::has_fbtoken() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ModUserInfo::set_has_fbtoken() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ModUserInfo::clear_has_fbtoken() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ModUserInfo::clear_fbtoken() {
  fbtoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fbtoken();
}
inline const ::std::string& ModUserInfo::fbtoken() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.FBToken)
  return fbtoken_.GetNoArena();
}
inline void ModUserInfo::set_fbtoken(const ::std::string& value) {
  set_has_fbtoken();
  fbtoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModUserInfo.FBToken)
}
#if LANG_CXX11
inline void ModUserInfo::set_fbtoken(::std::string&& value) {
  set_has_fbtoken();
  fbtoken_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModUserInfo.FBToken)
}
#endif
inline void ModUserInfo::set_fbtoken(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fbtoken();
  fbtoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModUserInfo.FBToken)
}
inline void ModUserInfo::set_fbtoken(const char* value, size_t size) {
  set_has_fbtoken();
  fbtoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModUserInfo.FBToken)
}
inline ::std::string* ModUserInfo::mutable_fbtoken() {
  set_has_fbtoken();
  // @@protoc_insertion_point(field_mutable:micromsg.ModUserInfo.FBToken)
  return fbtoken_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModUserInfo::release_fbtoken() {
  // @@protoc_insertion_point(field_release:micromsg.ModUserInfo.FBToken)
  clear_has_fbtoken();
  return fbtoken_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModUserInfo::set_allocated_fbtoken(::std::string* fbtoken) {
  if (fbtoken != NULL) {
    set_has_fbtoken();
  } else {
    clear_has_fbtoken();
  }
  fbtoken_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fbtoken);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModUserInfo.FBToken)
}

// optional string Country = 38;
inline bool ModUserInfo::has_country() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ModUserInfo::set_has_country() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ModUserInfo::clear_has_country() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ModUserInfo::clear_country() {
  country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country();
}
inline const ::std::string& ModUserInfo::country() const {
  // @@protoc_insertion_point(field_get:micromsg.ModUserInfo.Country)
  return country_.GetNoArena();
}
inline void ModUserInfo::set_country(const ::std::string& value) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModUserInfo.Country)
}
#if LANG_CXX11
inline void ModUserInfo::set_country(::std::string&& value) {
  set_has_country();
  country_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModUserInfo.Country)
}
#endif
inline void ModUserInfo::set_country(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModUserInfo.Country)
}
inline void ModUserInfo::set_country(const char* value, size_t size) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModUserInfo.Country)
}
inline ::std::string* ModUserInfo::mutable_country() {
  set_has_country();
  // @@protoc_insertion_point(field_mutable:micromsg.ModUserInfo.Country)
  return country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModUserInfo::release_country() {
  // @@protoc_insertion_point(field_release:micromsg.ModUserInfo.Country)
  clear_has_country();
  return country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModUserInfo::set_allocated_country(::std::string* country) {
  if (country != NULL) {
    set_has_country();
  } else {
    clear_has_country();
  }
  country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModUserInfo.Country)
}

// -------------------------------------------------------------------

// UserInfoExt

// required .micromsg.SnsUserInfo SnsUserInfo = 1;
inline bool UserInfoExt::has_snsuserinfo() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void UserInfoExt::set_has_snsuserinfo() {
  _has_bits_[0] |= 0x00008000u;
}
inline void UserInfoExt::clear_has_snsuserinfo() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void UserInfoExt::clear_snsuserinfo() {
  if (snsuserinfo_ != NULL) snsuserinfo_->::micromsg::SnsUserInfo::Clear();
  clear_has_snsuserinfo();
}
inline const ::micromsg::SnsUserInfo& UserInfoExt::snsuserinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.UserInfoExt.SnsUserInfo)
  return snsuserinfo_ != NULL ? *snsuserinfo_
                         : *::micromsg::SnsUserInfo::internal_default_instance();
}
inline ::micromsg::SnsUserInfo* UserInfoExt::mutable_snsuserinfo() {
  set_has_snsuserinfo();
  if (snsuserinfo_ == NULL) {
    snsuserinfo_ = new ::micromsg::SnsUserInfo;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UserInfoExt.SnsUserInfo)
  return snsuserinfo_;
}
inline ::micromsg::SnsUserInfo* UserInfoExt::release_snsuserinfo() {
  // @@protoc_insertion_point(field_release:micromsg.UserInfoExt.SnsUserInfo)
  clear_has_snsuserinfo();
  ::micromsg::SnsUserInfo* temp = snsuserinfo_;
  snsuserinfo_ = NULL;
  return temp;
}
inline void UserInfoExt::set_allocated_snsuserinfo(::micromsg::SnsUserInfo* snsuserinfo) {
  delete snsuserinfo_;
  snsuserinfo_ = snsuserinfo;
  if (snsuserinfo) {
    set_has_snsuserinfo();
  } else {
    clear_has_snsuserinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UserInfoExt.SnsUserInfo)
}

// optional string MyBrandList = 2;
inline bool UserInfoExt::has_mybrandlist() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserInfoExt::set_has_mybrandlist() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserInfoExt::clear_has_mybrandlist() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserInfoExt::clear_mybrandlist() {
  mybrandlist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mybrandlist();
}
inline const ::std::string& UserInfoExt::mybrandlist() const {
  // @@protoc_insertion_point(field_get:micromsg.UserInfoExt.MyBrandList)
  return mybrandlist_.GetNoArena();
}
inline void UserInfoExt::set_mybrandlist(const ::std::string& value) {
  set_has_mybrandlist();
  mybrandlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UserInfoExt.MyBrandList)
}
#if LANG_CXX11
inline void UserInfoExt::set_mybrandlist(::std::string&& value) {
  set_has_mybrandlist();
  mybrandlist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UserInfoExt.MyBrandList)
}
#endif
inline void UserInfoExt::set_mybrandlist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mybrandlist();
  mybrandlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UserInfoExt.MyBrandList)
}
inline void UserInfoExt::set_mybrandlist(const char* value, size_t size) {
  set_has_mybrandlist();
  mybrandlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UserInfoExt.MyBrandList)
}
inline ::std::string* UserInfoExt::mutable_mybrandlist() {
  set_has_mybrandlist();
  // @@protoc_insertion_point(field_mutable:micromsg.UserInfoExt.MyBrandList)
  return mybrandlist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfoExt::release_mybrandlist() {
  // @@protoc_insertion_point(field_release:micromsg.UserInfoExt.MyBrandList)
  clear_has_mybrandlist();
  return mybrandlist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfoExt::set_allocated_mybrandlist(::std::string* mybrandlist) {
  if (mybrandlist != NULL) {
    set_has_mybrandlist();
  } else {
    clear_has_mybrandlist();
  }
  mybrandlist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mybrandlist);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UserInfoExt.MyBrandList)
}

// optional string MsgPushSound = 3;
inline bool UserInfoExt::has_msgpushsound() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserInfoExt::set_has_msgpushsound() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserInfoExt::clear_has_msgpushsound() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserInfoExt::clear_msgpushsound() {
  msgpushsound_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msgpushsound();
}
inline const ::std::string& UserInfoExt::msgpushsound() const {
  // @@protoc_insertion_point(field_get:micromsg.UserInfoExt.MsgPushSound)
  return msgpushsound_.GetNoArena();
}
inline void UserInfoExt::set_msgpushsound(const ::std::string& value) {
  set_has_msgpushsound();
  msgpushsound_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UserInfoExt.MsgPushSound)
}
#if LANG_CXX11
inline void UserInfoExt::set_msgpushsound(::std::string&& value) {
  set_has_msgpushsound();
  msgpushsound_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UserInfoExt.MsgPushSound)
}
#endif
inline void UserInfoExt::set_msgpushsound(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msgpushsound();
  msgpushsound_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UserInfoExt.MsgPushSound)
}
inline void UserInfoExt::set_msgpushsound(const char* value, size_t size) {
  set_has_msgpushsound();
  msgpushsound_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UserInfoExt.MsgPushSound)
}
inline ::std::string* UserInfoExt::mutable_msgpushsound() {
  set_has_msgpushsound();
  // @@protoc_insertion_point(field_mutable:micromsg.UserInfoExt.MsgPushSound)
  return msgpushsound_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfoExt::release_msgpushsound() {
  // @@protoc_insertion_point(field_release:micromsg.UserInfoExt.MsgPushSound)
  clear_has_msgpushsound();
  return msgpushsound_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfoExt::set_allocated_msgpushsound(::std::string* msgpushsound) {
  if (msgpushsound != NULL) {
    set_has_msgpushsound();
  } else {
    clear_has_msgpushsound();
  }
  msgpushsound_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgpushsound);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UserInfoExt.MsgPushSound)
}

// optional string VoipPushSound = 4;
inline bool UserInfoExt::has_voippushsound() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserInfoExt::set_has_voippushsound() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserInfoExt::clear_has_voippushsound() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserInfoExt::clear_voippushsound() {
  voippushsound_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_voippushsound();
}
inline const ::std::string& UserInfoExt::voippushsound() const {
  // @@protoc_insertion_point(field_get:micromsg.UserInfoExt.VoipPushSound)
  return voippushsound_.GetNoArena();
}
inline void UserInfoExt::set_voippushsound(const ::std::string& value) {
  set_has_voippushsound();
  voippushsound_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UserInfoExt.VoipPushSound)
}
#if LANG_CXX11
inline void UserInfoExt::set_voippushsound(::std::string&& value) {
  set_has_voippushsound();
  voippushsound_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UserInfoExt.VoipPushSound)
}
#endif
inline void UserInfoExt::set_voippushsound(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_voippushsound();
  voippushsound_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UserInfoExt.VoipPushSound)
}
inline void UserInfoExt::set_voippushsound(const char* value, size_t size) {
  set_has_voippushsound();
  voippushsound_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UserInfoExt.VoipPushSound)
}
inline ::std::string* UserInfoExt::mutable_voippushsound() {
  set_has_voippushsound();
  // @@protoc_insertion_point(field_mutable:micromsg.UserInfoExt.VoipPushSound)
  return voippushsound_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfoExt::release_voippushsound() {
  // @@protoc_insertion_point(field_release:micromsg.UserInfoExt.VoipPushSound)
  clear_has_voippushsound();
  return voippushsound_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfoExt::set_allocated_voippushsound(::std::string* voippushsound) {
  if (voippushsound != NULL) {
    set_has_voippushsound();
  } else {
    clear_has_voippushsound();
  }
  voippushsound_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), voippushsound);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UserInfoExt.VoipPushSound)
}

// optional uint32 BigChatRoomSize = 5;
inline bool UserInfoExt::has_bigchatroomsize() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void UserInfoExt::set_has_bigchatroomsize() {
  _has_bits_[0] |= 0x00100000u;
}
inline void UserInfoExt::clear_has_bigchatroomsize() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void UserInfoExt::clear_bigchatroomsize() {
  bigchatroomsize_ = 0u;
  clear_has_bigchatroomsize();
}
inline ::google::protobuf::uint32 UserInfoExt::bigchatroomsize() const {
  // @@protoc_insertion_point(field_get:micromsg.UserInfoExt.BigChatRoomSize)
  return bigchatroomsize_;
}
inline void UserInfoExt::set_bigchatroomsize(::google::protobuf::uint32 value) {
  set_has_bigchatroomsize();
  bigchatroomsize_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UserInfoExt.BigChatRoomSize)
}

// optional uint32 BigChatRoomQuota = 6;
inline bool UserInfoExt::has_bigchatroomquota() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void UserInfoExt::set_has_bigchatroomquota() {
  _has_bits_[0] |= 0x00200000u;
}
inline void UserInfoExt::clear_has_bigchatroomquota() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void UserInfoExt::clear_bigchatroomquota() {
  bigchatroomquota_ = 0u;
  clear_has_bigchatroomquota();
}
inline ::google::protobuf::uint32 UserInfoExt::bigchatroomquota() const {
  // @@protoc_insertion_point(field_get:micromsg.UserInfoExt.BigChatRoomQuota)
  return bigchatroomquota_;
}
inline void UserInfoExt::set_bigchatroomquota(::google::protobuf::uint32 value) {
  set_has_bigchatroomquota();
  bigchatroomquota_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UserInfoExt.BigChatRoomQuota)
}

// optional uint32 BigChatRoomInvite = 7;
inline bool UserInfoExt::has_bigchatroominvite() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void UserInfoExt::set_has_bigchatroominvite() {
  _has_bits_[0] |= 0x00400000u;
}
inline void UserInfoExt::clear_has_bigchatroominvite() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void UserInfoExt::clear_bigchatroominvite() {
  bigchatroominvite_ = 0u;
  clear_has_bigchatroominvite();
}
inline ::google::protobuf::uint32 UserInfoExt::bigchatroominvite() const {
  // @@protoc_insertion_point(field_get:micromsg.UserInfoExt.BigChatRoomInvite)
  return bigchatroominvite_;
}
inline void UserInfoExt::set_bigchatroominvite(::google::protobuf::uint32 value) {
  set_has_bigchatroominvite();
  bigchatroominvite_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UserInfoExt.BigChatRoomInvite)
}

// optional string SafeMobile = 8;
inline bool UserInfoExt::has_safemobile() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserInfoExt::set_has_safemobile() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserInfoExt::clear_has_safemobile() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserInfoExt::clear_safemobile() {
  safemobile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_safemobile();
}
inline const ::std::string& UserInfoExt::safemobile() const {
  // @@protoc_insertion_point(field_get:micromsg.UserInfoExt.SafeMobile)
  return safemobile_.GetNoArena();
}
inline void UserInfoExt::set_safemobile(const ::std::string& value) {
  set_has_safemobile();
  safemobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UserInfoExt.SafeMobile)
}
#if LANG_CXX11
inline void UserInfoExt::set_safemobile(::std::string&& value) {
  set_has_safemobile();
  safemobile_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UserInfoExt.SafeMobile)
}
#endif
inline void UserInfoExt::set_safemobile(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_safemobile();
  safemobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UserInfoExt.SafeMobile)
}
inline void UserInfoExt::set_safemobile(const char* value, size_t size) {
  set_has_safemobile();
  safemobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UserInfoExt.SafeMobile)
}
inline ::std::string* UserInfoExt::mutable_safemobile() {
  set_has_safemobile();
  // @@protoc_insertion_point(field_mutable:micromsg.UserInfoExt.SafeMobile)
  return safemobile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfoExt::release_safemobile() {
  // @@protoc_insertion_point(field_release:micromsg.UserInfoExt.SafeMobile)
  clear_has_safemobile();
  return safemobile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfoExt::set_allocated_safemobile(::std::string* safemobile) {
  if (safemobile != NULL) {
    set_has_safemobile();
  } else {
    clear_has_safemobile();
  }
  safemobile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), safemobile);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UserInfoExt.SafeMobile)
}

// optional string BigHeadImgUrl = 9;
inline bool UserInfoExt::has_bigheadimgurl() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserInfoExt::set_has_bigheadimgurl() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserInfoExt::clear_has_bigheadimgurl() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserInfoExt::clear_bigheadimgurl() {
  bigheadimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bigheadimgurl();
}
inline const ::std::string& UserInfoExt::bigheadimgurl() const {
  // @@protoc_insertion_point(field_get:micromsg.UserInfoExt.BigHeadImgUrl)
  return bigheadimgurl_.GetNoArena();
}
inline void UserInfoExt::set_bigheadimgurl(const ::std::string& value) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UserInfoExt.BigHeadImgUrl)
}
#if LANG_CXX11
inline void UserInfoExt::set_bigheadimgurl(::std::string&& value) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UserInfoExt.BigHeadImgUrl)
}
#endif
inline void UserInfoExt::set_bigheadimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UserInfoExt.BigHeadImgUrl)
}
inline void UserInfoExt::set_bigheadimgurl(const char* value, size_t size) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UserInfoExt.BigHeadImgUrl)
}
inline ::std::string* UserInfoExt::mutable_bigheadimgurl() {
  set_has_bigheadimgurl();
  // @@protoc_insertion_point(field_mutable:micromsg.UserInfoExt.BigHeadImgUrl)
  return bigheadimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfoExt::release_bigheadimgurl() {
  // @@protoc_insertion_point(field_release:micromsg.UserInfoExt.BigHeadImgUrl)
  clear_has_bigheadimgurl();
  return bigheadimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfoExt::set_allocated_bigheadimgurl(::std::string* bigheadimgurl) {
  if (bigheadimgurl != NULL) {
    set_has_bigheadimgurl();
  } else {
    clear_has_bigheadimgurl();
  }
  bigheadimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bigheadimgurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UserInfoExt.BigHeadImgUrl)
}

// optional string SmallHeadImgUrl = 10;
inline bool UserInfoExt::has_smallheadimgurl() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserInfoExt::set_has_smallheadimgurl() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserInfoExt::clear_has_smallheadimgurl() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserInfoExt::clear_smallheadimgurl() {
  smallheadimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_smallheadimgurl();
}
inline const ::std::string& UserInfoExt::smallheadimgurl() const {
  // @@protoc_insertion_point(field_get:micromsg.UserInfoExt.SmallHeadImgUrl)
  return smallheadimgurl_.GetNoArena();
}
inline void UserInfoExt::set_smallheadimgurl(const ::std::string& value) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UserInfoExt.SmallHeadImgUrl)
}
#if LANG_CXX11
inline void UserInfoExt::set_smallheadimgurl(::std::string&& value) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UserInfoExt.SmallHeadImgUrl)
}
#endif
inline void UserInfoExt::set_smallheadimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UserInfoExt.SmallHeadImgUrl)
}
inline void UserInfoExt::set_smallheadimgurl(const char* value, size_t size) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UserInfoExt.SmallHeadImgUrl)
}
inline ::std::string* UserInfoExt::mutable_smallheadimgurl() {
  set_has_smallheadimgurl();
  // @@protoc_insertion_point(field_mutable:micromsg.UserInfoExt.SmallHeadImgUrl)
  return smallheadimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfoExt::release_smallheadimgurl() {
  // @@protoc_insertion_point(field_release:micromsg.UserInfoExt.SmallHeadImgUrl)
  clear_has_smallheadimgurl();
  return smallheadimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfoExt::set_allocated_smallheadimgurl(::std::string* smallheadimgurl) {
  if (smallheadimgurl != NULL) {
    set_has_smallheadimgurl();
  } else {
    clear_has_smallheadimgurl();
  }
  smallheadimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smallheadimgurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UserInfoExt.SmallHeadImgUrl)
}

// optional uint32 MainAcctType = 11;
inline bool UserInfoExt::has_mainaccttype() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void UserInfoExt::set_has_mainaccttype() {
  _has_bits_[0] |= 0x00800000u;
}
inline void UserInfoExt::clear_has_mainaccttype() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void UserInfoExt::clear_mainaccttype() {
  mainaccttype_ = 0u;
  clear_has_mainaccttype();
}
inline ::google::protobuf::uint32 UserInfoExt::mainaccttype() const {
  // @@protoc_insertion_point(field_get:micromsg.UserInfoExt.MainAcctType)
  return mainaccttype_;
}
inline void UserInfoExt::set_mainaccttype(::google::protobuf::uint32 value) {
  set_has_mainaccttype();
  mainaccttype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UserInfoExt.MainAcctType)
}

// optional .micromsg.SKBuiltinString_t ExtXml = 12;
inline bool UserInfoExt::has_extxml() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void UserInfoExt::set_has_extxml() {
  _has_bits_[0] |= 0x00010000u;
}
inline void UserInfoExt::clear_has_extxml() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void UserInfoExt::clear_extxml() {
  if (extxml_ != NULL) extxml_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_extxml();
}
inline const ::micromsg::SKBuiltinString_t& UserInfoExt::extxml() const {
  // @@protoc_insertion_point(field_get:micromsg.UserInfoExt.ExtXml)
  return extxml_ != NULL ? *extxml_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinString_t* UserInfoExt::mutable_extxml() {
  set_has_extxml();
  if (extxml_ == NULL) {
    extxml_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UserInfoExt.ExtXml)
  return extxml_;
}
inline ::micromsg::SKBuiltinString_t* UserInfoExt::release_extxml() {
  // @@protoc_insertion_point(field_release:micromsg.UserInfoExt.ExtXml)
  clear_has_extxml();
  ::micromsg::SKBuiltinString_t* temp = extxml_;
  extxml_ = NULL;
  return temp;
}
inline void UserInfoExt::set_allocated_extxml(::micromsg::SKBuiltinString_t* extxml) {
  delete extxml_;
  extxml_ = extxml;
  if (extxml) {
    set_has_extxml();
  } else {
    clear_has_extxml();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UserInfoExt.ExtXml)
}

// optional .micromsg.SafeDeviceList SafeDeviceList = 13;
inline bool UserInfoExt::has_safedevicelist() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void UserInfoExt::set_has_safedevicelist() {
  _has_bits_[0] |= 0x00020000u;
}
inline void UserInfoExt::clear_has_safedevicelist() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void UserInfoExt::clear_safedevicelist() {
  if (safedevicelist_ != NULL) safedevicelist_->::micromsg::SafeDeviceList::Clear();
  clear_has_safedevicelist();
}
inline const ::micromsg::SafeDeviceList& UserInfoExt::safedevicelist() const {
  // @@protoc_insertion_point(field_get:micromsg.UserInfoExt.SafeDeviceList)
  return safedevicelist_ != NULL ? *safedevicelist_
                         : *::micromsg::SafeDeviceList::internal_default_instance();
}
inline ::micromsg::SafeDeviceList* UserInfoExt::mutable_safedevicelist() {
  set_has_safedevicelist();
  if (safedevicelist_ == NULL) {
    safedevicelist_ = new ::micromsg::SafeDeviceList;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UserInfoExt.SafeDeviceList)
  return safedevicelist_;
}
inline ::micromsg::SafeDeviceList* UserInfoExt::release_safedevicelist() {
  // @@protoc_insertion_point(field_release:micromsg.UserInfoExt.SafeDeviceList)
  clear_has_safedevicelist();
  ::micromsg::SafeDeviceList* temp = safedevicelist_;
  safedevicelist_ = NULL;
  return temp;
}
inline void UserInfoExt::set_allocated_safedevicelist(::micromsg::SafeDeviceList* safedevicelist) {
  delete safedevicelist_;
  safedevicelist_ = safedevicelist;
  if (safedevicelist) {
    set_has_safedevicelist();
  } else {
    clear_has_safedevicelist();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UserInfoExt.SafeDeviceList)
}

// optional uint32 SafeDevice = 14;
inline bool UserInfoExt::has_safedevice() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void UserInfoExt::set_has_safedevice() {
  _has_bits_[0] |= 0x01000000u;
}
inline void UserInfoExt::clear_has_safedevice() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void UserInfoExt::clear_safedevice() {
  safedevice_ = 0u;
  clear_has_safedevice();
}
inline ::google::protobuf::uint32 UserInfoExt::safedevice() const {
  // @@protoc_insertion_point(field_get:micromsg.UserInfoExt.SafeDevice)
  return safedevice_;
}
inline void UserInfoExt::set_safedevice(::google::protobuf::uint32 value) {
  set_has_safedevice();
  safedevice_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UserInfoExt.SafeDevice)
}

// optional uint32 GrayscaleFlag = 15;
inline bool UserInfoExt::has_grayscaleflag() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void UserInfoExt::set_has_grayscaleflag() {
  _has_bits_[0] |= 0x02000000u;
}
inline void UserInfoExt::clear_has_grayscaleflag() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void UserInfoExt::clear_grayscaleflag() {
  grayscaleflag_ = 0u;
  clear_has_grayscaleflag();
}
inline ::google::protobuf::uint32 UserInfoExt::grayscaleflag() const {
  // @@protoc_insertion_point(field_get:micromsg.UserInfoExt.GrayscaleFlag)
  return grayscaleflag_;
}
inline void UserInfoExt::set_grayscaleflag(::google::protobuf::uint32 value) {
  set_has_grayscaleflag();
  grayscaleflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UserInfoExt.GrayscaleFlag)
}

// optional string GoogleContactName = 16;
inline bool UserInfoExt::has_googlecontactname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserInfoExt::set_has_googlecontactname() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserInfoExt::clear_has_googlecontactname() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserInfoExt::clear_googlecontactname() {
  googlecontactname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_googlecontactname();
}
inline const ::std::string& UserInfoExt::googlecontactname() const {
  // @@protoc_insertion_point(field_get:micromsg.UserInfoExt.GoogleContactName)
  return googlecontactname_.GetNoArena();
}
inline void UserInfoExt::set_googlecontactname(const ::std::string& value) {
  set_has_googlecontactname();
  googlecontactname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UserInfoExt.GoogleContactName)
}
#if LANG_CXX11
inline void UserInfoExt::set_googlecontactname(::std::string&& value) {
  set_has_googlecontactname();
  googlecontactname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UserInfoExt.GoogleContactName)
}
#endif
inline void UserInfoExt::set_googlecontactname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_googlecontactname();
  googlecontactname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UserInfoExt.GoogleContactName)
}
inline void UserInfoExt::set_googlecontactname(const char* value, size_t size) {
  set_has_googlecontactname();
  googlecontactname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UserInfoExt.GoogleContactName)
}
inline ::std::string* UserInfoExt::mutable_googlecontactname() {
  set_has_googlecontactname();
  // @@protoc_insertion_point(field_mutable:micromsg.UserInfoExt.GoogleContactName)
  return googlecontactname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfoExt::release_googlecontactname() {
  // @@protoc_insertion_point(field_release:micromsg.UserInfoExt.GoogleContactName)
  clear_has_googlecontactname();
  return googlecontactname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfoExt::set_allocated_googlecontactname(::std::string* googlecontactname) {
  if (googlecontactname != NULL) {
    set_has_googlecontactname();
  } else {
    clear_has_googlecontactname();
  }
  googlecontactname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), googlecontactname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UserInfoExt.GoogleContactName)
}

// optional string IDCardNum = 17;
inline bool UserInfoExt::has_idcardnum() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UserInfoExt::set_has_idcardnum() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UserInfoExt::clear_has_idcardnum() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UserInfoExt::clear_idcardnum() {
  idcardnum_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_idcardnum();
}
inline const ::std::string& UserInfoExt::idcardnum() const {
  // @@protoc_insertion_point(field_get:micromsg.UserInfoExt.IDCardNum)
  return idcardnum_.GetNoArena();
}
inline void UserInfoExt::set_idcardnum(const ::std::string& value) {
  set_has_idcardnum();
  idcardnum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UserInfoExt.IDCardNum)
}
#if LANG_CXX11
inline void UserInfoExt::set_idcardnum(::std::string&& value) {
  set_has_idcardnum();
  idcardnum_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UserInfoExt.IDCardNum)
}
#endif
inline void UserInfoExt::set_idcardnum(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_idcardnum();
  idcardnum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UserInfoExt.IDCardNum)
}
inline void UserInfoExt::set_idcardnum(const char* value, size_t size) {
  set_has_idcardnum();
  idcardnum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UserInfoExt.IDCardNum)
}
inline ::std::string* UserInfoExt::mutable_idcardnum() {
  set_has_idcardnum();
  // @@protoc_insertion_point(field_mutable:micromsg.UserInfoExt.IDCardNum)
  return idcardnum_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfoExt::release_idcardnum() {
  // @@protoc_insertion_point(field_release:micromsg.UserInfoExt.IDCardNum)
  clear_has_idcardnum();
  return idcardnum_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfoExt::set_allocated_idcardnum(::std::string* idcardnum) {
  if (idcardnum != NULL) {
    set_has_idcardnum();
  } else {
    clear_has_idcardnum();
  }
  idcardnum_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), idcardnum);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UserInfoExt.IDCardNum)
}

// optional string RealName = 18;
inline bool UserInfoExt::has_realname() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UserInfoExt::set_has_realname() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UserInfoExt::clear_has_realname() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UserInfoExt::clear_realname() {
  realname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_realname();
}
inline const ::std::string& UserInfoExt::realname() const {
  // @@protoc_insertion_point(field_get:micromsg.UserInfoExt.RealName)
  return realname_.GetNoArena();
}
inline void UserInfoExt::set_realname(const ::std::string& value) {
  set_has_realname();
  realname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UserInfoExt.RealName)
}
#if LANG_CXX11
inline void UserInfoExt::set_realname(::std::string&& value) {
  set_has_realname();
  realname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UserInfoExt.RealName)
}
#endif
inline void UserInfoExt::set_realname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_realname();
  realname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UserInfoExt.RealName)
}
inline void UserInfoExt::set_realname(const char* value, size_t size) {
  set_has_realname();
  realname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UserInfoExt.RealName)
}
inline ::std::string* UserInfoExt::mutable_realname() {
  set_has_realname();
  // @@protoc_insertion_point(field_mutable:micromsg.UserInfoExt.RealName)
  return realname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfoExt::release_realname() {
  // @@protoc_insertion_point(field_release:micromsg.UserInfoExt.RealName)
  clear_has_realname();
  return realname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfoExt::set_allocated_realname(::std::string* realname) {
  if (realname != NULL) {
    set_has_realname();
  } else {
    clear_has_realname();
  }
  realname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), realname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UserInfoExt.RealName)
}

// optional string RegCountry = 19;
inline bool UserInfoExt::has_regcountry() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void UserInfoExt::set_has_regcountry() {
  _has_bits_[0] |= 0x00000200u;
}
inline void UserInfoExt::clear_has_regcountry() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void UserInfoExt::clear_regcountry() {
  regcountry_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_regcountry();
}
inline const ::std::string& UserInfoExt::regcountry() const {
  // @@protoc_insertion_point(field_get:micromsg.UserInfoExt.RegCountry)
  return regcountry_.GetNoArena();
}
inline void UserInfoExt::set_regcountry(const ::std::string& value) {
  set_has_regcountry();
  regcountry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UserInfoExt.RegCountry)
}
#if LANG_CXX11
inline void UserInfoExt::set_regcountry(::std::string&& value) {
  set_has_regcountry();
  regcountry_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UserInfoExt.RegCountry)
}
#endif
inline void UserInfoExt::set_regcountry(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_regcountry();
  regcountry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UserInfoExt.RegCountry)
}
inline void UserInfoExt::set_regcountry(const char* value, size_t size) {
  set_has_regcountry();
  regcountry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UserInfoExt.RegCountry)
}
inline ::std::string* UserInfoExt::mutable_regcountry() {
  set_has_regcountry();
  // @@protoc_insertion_point(field_mutable:micromsg.UserInfoExt.RegCountry)
  return regcountry_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfoExt::release_regcountry() {
  // @@protoc_insertion_point(field_release:micromsg.UserInfoExt.RegCountry)
  clear_has_regcountry();
  return regcountry_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfoExt::set_allocated_regcountry(::std::string* regcountry) {
  if (regcountry != NULL) {
    set_has_regcountry();
  } else {
    clear_has_regcountry();
  }
  regcountry_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), regcountry);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UserInfoExt.RegCountry)
}

// optional string BBPPID = 20;
inline bool UserInfoExt::has_bbppid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void UserInfoExt::set_has_bbppid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void UserInfoExt::clear_has_bbppid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void UserInfoExt::clear_bbppid() {
  bbppid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bbppid();
}
inline const ::std::string& UserInfoExt::bbppid() const {
  // @@protoc_insertion_point(field_get:micromsg.UserInfoExt.BBPPID)
  return bbppid_.GetNoArena();
}
inline void UserInfoExt::set_bbppid(const ::std::string& value) {
  set_has_bbppid();
  bbppid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UserInfoExt.BBPPID)
}
#if LANG_CXX11
inline void UserInfoExt::set_bbppid(::std::string&& value) {
  set_has_bbppid();
  bbppid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UserInfoExt.BBPPID)
}
#endif
inline void UserInfoExt::set_bbppid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bbppid();
  bbppid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UserInfoExt.BBPPID)
}
inline void UserInfoExt::set_bbppid(const char* value, size_t size) {
  set_has_bbppid();
  bbppid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UserInfoExt.BBPPID)
}
inline ::std::string* UserInfoExt::mutable_bbppid() {
  set_has_bbppid();
  // @@protoc_insertion_point(field_mutable:micromsg.UserInfoExt.BBPPID)
  return bbppid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfoExt::release_bbppid() {
  // @@protoc_insertion_point(field_release:micromsg.UserInfoExt.BBPPID)
  clear_has_bbppid();
  return bbppid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfoExt::set_allocated_bbppid(::std::string* bbppid) {
  if (bbppid != NULL) {
    set_has_bbppid();
  } else {
    clear_has_bbppid();
  }
  bbppid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bbppid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UserInfoExt.BBPPID)
}

// optional string BBPIN = 21;
inline bool UserInfoExt::has_bbpin() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void UserInfoExt::set_has_bbpin() {
  _has_bits_[0] |= 0x00000800u;
}
inline void UserInfoExt::clear_has_bbpin() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void UserInfoExt::clear_bbpin() {
  bbpin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bbpin();
}
inline const ::std::string& UserInfoExt::bbpin() const {
  // @@protoc_insertion_point(field_get:micromsg.UserInfoExt.BBPIN)
  return bbpin_.GetNoArena();
}
inline void UserInfoExt::set_bbpin(const ::std::string& value) {
  set_has_bbpin();
  bbpin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UserInfoExt.BBPIN)
}
#if LANG_CXX11
inline void UserInfoExt::set_bbpin(::std::string&& value) {
  set_has_bbpin();
  bbpin_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UserInfoExt.BBPIN)
}
#endif
inline void UserInfoExt::set_bbpin(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bbpin();
  bbpin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UserInfoExt.BBPIN)
}
inline void UserInfoExt::set_bbpin(const char* value, size_t size) {
  set_has_bbpin();
  bbpin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UserInfoExt.BBPIN)
}
inline ::std::string* UserInfoExt::mutable_bbpin() {
  set_has_bbpin();
  // @@protoc_insertion_point(field_mutable:micromsg.UserInfoExt.BBPIN)
  return bbpin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfoExt::release_bbpin() {
  // @@protoc_insertion_point(field_release:micromsg.UserInfoExt.BBPIN)
  clear_has_bbpin();
  return bbpin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfoExt::set_allocated_bbpin(::std::string* bbpin) {
  if (bbpin != NULL) {
    set_has_bbpin();
  } else {
    clear_has_bbpin();
  }
  bbpin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bbpin);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UserInfoExt.BBPIN)
}

// optional string BBMNickName = 22;
inline bool UserInfoExt::has_bbmnickname() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void UserInfoExt::set_has_bbmnickname() {
  _has_bits_[0] |= 0x00001000u;
}
inline void UserInfoExt::clear_has_bbmnickname() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void UserInfoExt::clear_bbmnickname() {
  bbmnickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bbmnickname();
}
inline const ::std::string& UserInfoExt::bbmnickname() const {
  // @@protoc_insertion_point(field_get:micromsg.UserInfoExt.BBMNickName)
  return bbmnickname_.GetNoArena();
}
inline void UserInfoExt::set_bbmnickname(const ::std::string& value) {
  set_has_bbmnickname();
  bbmnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UserInfoExt.BBMNickName)
}
#if LANG_CXX11
inline void UserInfoExt::set_bbmnickname(::std::string&& value) {
  set_has_bbmnickname();
  bbmnickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UserInfoExt.BBMNickName)
}
#endif
inline void UserInfoExt::set_bbmnickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bbmnickname();
  bbmnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UserInfoExt.BBMNickName)
}
inline void UserInfoExt::set_bbmnickname(const char* value, size_t size) {
  set_has_bbmnickname();
  bbmnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UserInfoExt.BBMNickName)
}
inline ::std::string* UserInfoExt::mutable_bbmnickname() {
  set_has_bbmnickname();
  // @@protoc_insertion_point(field_mutable:micromsg.UserInfoExt.BBMNickName)
  return bbmnickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfoExt::release_bbmnickname() {
  // @@protoc_insertion_point(field_release:micromsg.UserInfoExt.BBMNickName)
  clear_has_bbmnickname();
  return bbmnickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfoExt::set_allocated_bbmnickname(::std::string* bbmnickname) {
  if (bbmnickname != NULL) {
    set_has_bbmnickname();
  } else {
    clear_has_bbmnickname();
  }
  bbmnickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bbmnickname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UserInfoExt.BBMNickName)
}

// optional .micromsg.LinkedinContactItem LinkedinContactItem = 23;
inline bool UserInfoExt::has_linkedincontactitem() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void UserInfoExt::set_has_linkedincontactitem() {
  _has_bits_[0] |= 0x00040000u;
}
inline void UserInfoExt::clear_has_linkedincontactitem() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void UserInfoExt::clear_linkedincontactitem() {
  if (linkedincontactitem_ != NULL) linkedincontactitem_->::micromsg::LinkedinContactItem::Clear();
  clear_has_linkedincontactitem();
}
inline const ::micromsg::LinkedinContactItem& UserInfoExt::linkedincontactitem() const {
  // @@protoc_insertion_point(field_get:micromsg.UserInfoExt.LinkedinContactItem)
  return linkedincontactitem_ != NULL ? *linkedincontactitem_
                         : *::micromsg::LinkedinContactItem::internal_default_instance();
}
inline ::micromsg::LinkedinContactItem* UserInfoExt::mutable_linkedincontactitem() {
  set_has_linkedincontactitem();
  if (linkedincontactitem_ == NULL) {
    linkedincontactitem_ = new ::micromsg::LinkedinContactItem;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UserInfoExt.LinkedinContactItem)
  return linkedincontactitem_;
}
inline ::micromsg::LinkedinContactItem* UserInfoExt::release_linkedincontactitem() {
  // @@protoc_insertion_point(field_release:micromsg.UserInfoExt.LinkedinContactItem)
  clear_has_linkedincontactitem();
  ::micromsg::LinkedinContactItem* temp = linkedincontactitem_;
  linkedincontactitem_ = NULL;
  return temp;
}
inline void UserInfoExt::set_allocated_linkedincontactitem(::micromsg::LinkedinContactItem* linkedincontactitem) {
  delete linkedincontactitem_;
  linkedincontactitem_ = linkedincontactitem;
  if (linkedincontactitem) {
    set_has_linkedincontactitem();
  } else {
    clear_has_linkedincontactitem();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UserInfoExt.LinkedinContactItem)
}

// optional string KFInfo = 24;
inline bool UserInfoExt::has_kfinfo() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void UserInfoExt::set_has_kfinfo() {
  _has_bits_[0] |= 0x00002000u;
}
inline void UserInfoExt::clear_has_kfinfo() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void UserInfoExt::clear_kfinfo() {
  kfinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_kfinfo();
}
inline const ::std::string& UserInfoExt::kfinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.UserInfoExt.KFInfo)
  return kfinfo_.GetNoArena();
}
inline void UserInfoExt::set_kfinfo(const ::std::string& value) {
  set_has_kfinfo();
  kfinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UserInfoExt.KFInfo)
}
#if LANG_CXX11
inline void UserInfoExt::set_kfinfo(::std::string&& value) {
  set_has_kfinfo();
  kfinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UserInfoExt.KFInfo)
}
#endif
inline void UserInfoExt::set_kfinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_kfinfo();
  kfinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UserInfoExt.KFInfo)
}
inline void UserInfoExt::set_kfinfo(const char* value, size_t size) {
  set_has_kfinfo();
  kfinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UserInfoExt.KFInfo)
}
inline ::std::string* UserInfoExt::mutable_kfinfo() {
  set_has_kfinfo();
  // @@protoc_insertion_point(field_mutable:micromsg.UserInfoExt.KFInfo)
  return kfinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfoExt::release_kfinfo() {
  // @@protoc_insertion_point(field_release:micromsg.UserInfoExt.KFInfo)
  clear_has_kfinfo();
  return kfinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfoExt::set_allocated_kfinfo(::std::string* kfinfo) {
  if (kfinfo != NULL) {
    set_has_kfinfo();
  } else {
    clear_has_kfinfo();
  }
  kfinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), kfinfo);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UserInfoExt.KFInfo)
}

// optional .micromsg.PatternLockInfo PatternLockInfo = 25;
inline bool UserInfoExt::has_patternlockinfo() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void UserInfoExt::set_has_patternlockinfo() {
  _has_bits_[0] |= 0x00080000u;
}
inline void UserInfoExt::clear_has_patternlockinfo() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void UserInfoExt::clear_patternlockinfo() {
  if (patternlockinfo_ != NULL) patternlockinfo_->::micromsg::PatternLockInfo::Clear();
  clear_has_patternlockinfo();
}
inline const ::micromsg::PatternLockInfo& UserInfoExt::patternlockinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.UserInfoExt.PatternLockInfo)
  return patternlockinfo_ != NULL ? *patternlockinfo_
                         : *::micromsg::PatternLockInfo::internal_default_instance();
}
inline ::micromsg::PatternLockInfo* UserInfoExt::mutable_patternlockinfo() {
  set_has_patternlockinfo();
  if (patternlockinfo_ == NULL) {
    patternlockinfo_ = new ::micromsg::PatternLockInfo;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.UserInfoExt.PatternLockInfo)
  return patternlockinfo_;
}
inline ::micromsg::PatternLockInfo* UserInfoExt::release_patternlockinfo() {
  // @@protoc_insertion_point(field_release:micromsg.UserInfoExt.PatternLockInfo)
  clear_has_patternlockinfo();
  ::micromsg::PatternLockInfo* temp = patternlockinfo_;
  patternlockinfo_ = NULL;
  return temp;
}
inline void UserInfoExt::set_allocated_patternlockinfo(::micromsg::PatternLockInfo* patternlockinfo) {
  delete patternlockinfo_;
  patternlockinfo_ = patternlockinfo;
  if (patternlockinfo) {
    set_has_patternlockinfo();
  } else {
    clear_has_patternlockinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.UserInfoExt.PatternLockInfo)
}

// optional string SecurityDeviceId = 26;
inline bool UserInfoExt::has_securitydeviceid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void UserInfoExt::set_has_securitydeviceid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void UserInfoExt::clear_has_securitydeviceid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void UserInfoExt::clear_securitydeviceid() {
  securitydeviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_securitydeviceid();
}
inline const ::std::string& UserInfoExt::securitydeviceid() const {
  // @@protoc_insertion_point(field_get:micromsg.UserInfoExt.SecurityDeviceId)
  return securitydeviceid_.GetNoArena();
}
inline void UserInfoExt::set_securitydeviceid(const ::std::string& value) {
  set_has_securitydeviceid();
  securitydeviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.UserInfoExt.SecurityDeviceId)
}
#if LANG_CXX11
inline void UserInfoExt::set_securitydeviceid(::std::string&& value) {
  set_has_securitydeviceid();
  securitydeviceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.UserInfoExt.SecurityDeviceId)
}
#endif
inline void UserInfoExt::set_securitydeviceid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_securitydeviceid();
  securitydeviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.UserInfoExt.SecurityDeviceId)
}
inline void UserInfoExt::set_securitydeviceid(const char* value, size_t size) {
  set_has_securitydeviceid();
  securitydeviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.UserInfoExt.SecurityDeviceId)
}
inline ::std::string* UserInfoExt::mutable_securitydeviceid() {
  set_has_securitydeviceid();
  // @@protoc_insertion_point(field_mutable:micromsg.UserInfoExt.SecurityDeviceId)
  return securitydeviceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfoExt::release_securitydeviceid() {
  // @@protoc_insertion_point(field_release:micromsg.UserInfoExt.SecurityDeviceId)
  clear_has_securitydeviceid();
  return securitydeviceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfoExt::set_allocated_securitydeviceid(::std::string* securitydeviceid) {
  if (securitydeviceid != NULL) {
    set_has_securitydeviceid();
  } else {
    clear_has_securitydeviceid();
  }
  securitydeviceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), securitydeviceid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.UserInfoExt.SecurityDeviceId)
}

// optional uint32 PayWalletType = 27;
inline bool UserInfoExt::has_paywallettype() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void UserInfoExt::set_has_paywallettype() {
  _has_bits_[0] |= 0x04000000u;
}
inline void UserInfoExt::clear_has_paywallettype() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void UserInfoExt::clear_paywallettype() {
  paywallettype_ = 0u;
  clear_has_paywallettype();
}
inline ::google::protobuf::uint32 UserInfoExt::paywallettype() const {
  // @@protoc_insertion_point(field_get:micromsg.UserInfoExt.PayWalletType)
  return paywallettype_;
}
inline void UserInfoExt::set_paywallettype(::google::protobuf::uint32 value) {
  set_has_paywallettype();
  paywallettype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.UserInfoExt.PayWalletType)
}

// -------------------------------------------------------------------

// ModContact

// required .micromsg.SKBuiltinString_t UserName = 1;
inline bool ModContact::has_username() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void ModContact::set_has_username() {
  _has_bits_[0] |= 0x02000000u;
}
inline void ModContact::clear_has_username() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void ModContact::clear_username() {
  if (username_ != NULL) username_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_username();
}
inline const ::micromsg::SKBuiltinString_t& ModContact::username() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.UserName)
  return username_ != NULL ? *username_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinString_t* ModContact::mutable_username() {
  set_has_username();
  if (username_ == NULL) {
    username_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.UserName)
  return username_;
}
inline ::micromsg::SKBuiltinString_t* ModContact::release_username() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.UserName)
  clear_has_username();
  ::micromsg::SKBuiltinString_t* temp = username_;
  username_ = NULL;
  return temp;
}
inline void ModContact::set_allocated_username(::micromsg::SKBuiltinString_t* username) {
  delete username_;
  username_ = username;
  if (username) {
    set_has_username();
  } else {
    clear_has_username();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.UserName)
}

// required .micromsg.SKBuiltinString_t NickName = 2;
inline bool ModContact::has_nickname() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void ModContact::set_has_nickname() {
  _has_bits_[0] |= 0x04000000u;
}
inline void ModContact::clear_has_nickname() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void ModContact::clear_nickname() {
  if (nickname_ != NULL) nickname_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_nickname();
}
inline const ::micromsg::SKBuiltinString_t& ModContact::nickname() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.NickName)
  return nickname_ != NULL ? *nickname_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinString_t* ModContact::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == NULL) {
    nickname_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.NickName)
  return nickname_;
}
inline ::micromsg::SKBuiltinString_t* ModContact::release_nickname() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.NickName)
  clear_has_nickname();
  ::micromsg::SKBuiltinString_t* temp = nickname_;
  nickname_ = NULL;
  return temp;
}
inline void ModContact::set_allocated_nickname(::micromsg::SKBuiltinString_t* nickname) {
  delete nickname_;
  nickname_ = nickname;
  if (nickname) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.NickName)
}

// required .micromsg.SKBuiltinString_t PYInitial = 3;
inline bool ModContact::has_pyinitial() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void ModContact::set_has_pyinitial() {
  _has_bits_[0] |= 0x08000000u;
}
inline void ModContact::clear_has_pyinitial() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void ModContact::clear_pyinitial() {
  if (pyinitial_ != NULL) pyinitial_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_pyinitial();
}
inline const ::micromsg::SKBuiltinString_t& ModContact::pyinitial() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.PYInitial)
  return pyinitial_ != NULL ? *pyinitial_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinString_t* ModContact::mutable_pyinitial() {
  set_has_pyinitial();
  if (pyinitial_ == NULL) {
    pyinitial_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.PYInitial)
  return pyinitial_;
}
inline ::micromsg::SKBuiltinString_t* ModContact::release_pyinitial() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.PYInitial)
  clear_has_pyinitial();
  ::micromsg::SKBuiltinString_t* temp = pyinitial_;
  pyinitial_ = NULL;
  return temp;
}
inline void ModContact::set_allocated_pyinitial(::micromsg::SKBuiltinString_t* pyinitial) {
  delete pyinitial_;
  pyinitial_ = pyinitial;
  if (pyinitial) {
    set_has_pyinitial();
  } else {
    clear_has_pyinitial();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.PYInitial)
}

// required .micromsg.SKBuiltinString_t QuanPin = 4;
inline bool ModContact::has_quanpin() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void ModContact::set_has_quanpin() {
  _has_bits_[0] |= 0x10000000u;
}
inline void ModContact::clear_has_quanpin() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void ModContact::clear_quanpin() {
  if (quanpin_ != NULL) quanpin_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_quanpin();
}
inline const ::micromsg::SKBuiltinString_t& ModContact::quanpin() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.QuanPin)
  return quanpin_ != NULL ? *quanpin_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinString_t* ModContact::mutable_quanpin() {
  set_has_quanpin();
  if (quanpin_ == NULL) {
    quanpin_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.QuanPin)
  return quanpin_;
}
inline ::micromsg::SKBuiltinString_t* ModContact::release_quanpin() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.QuanPin)
  clear_has_quanpin();
  ::micromsg::SKBuiltinString_t* temp = quanpin_;
  quanpin_ = NULL;
  return temp;
}
inline void ModContact::set_allocated_quanpin(::micromsg::SKBuiltinString_t* quanpin) {
  delete quanpin_;
  quanpin_ = quanpin;
  if (quanpin) {
    set_has_quanpin();
  } else {
    clear_has_quanpin();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.QuanPin)
}

// required int32 Sex = 5;
inline bool ModContact::has_sex() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void ModContact::set_has_sex() {
  _has_bits_[1] |= 0x00000040u;
}
inline void ModContact::clear_has_sex() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void ModContact::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 ModContact::sex() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.Sex)
  return sex_;
}
inline void ModContact::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModContact.Sex)
}

// required .micromsg.SKBuiltinBuffer_t ImgBuf = 6;
inline bool ModContact::has_imgbuf() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void ModContact::set_has_imgbuf() {
  _has_bits_[0] |= 0x20000000u;
}
inline void ModContact::clear_has_imgbuf() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void ModContact::clear_imgbuf() {
  if (imgbuf_ != NULL) imgbuf_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_imgbuf();
}
inline const ::micromsg::SKBuiltinBuffer_t& ModContact::imgbuf() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.ImgBuf)
  return imgbuf_ != NULL ? *imgbuf_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinBuffer_t* ModContact::mutable_imgbuf() {
  set_has_imgbuf();
  if (imgbuf_ == NULL) {
    imgbuf_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.ImgBuf)
  return imgbuf_;
}
inline ::micromsg::SKBuiltinBuffer_t* ModContact::release_imgbuf() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.ImgBuf)
  clear_has_imgbuf();
  ::micromsg::SKBuiltinBuffer_t* temp = imgbuf_;
  imgbuf_ = NULL;
  return temp;
}
inline void ModContact::set_allocated_imgbuf(::micromsg::SKBuiltinBuffer_t* imgbuf) {
  delete imgbuf_;
  imgbuf_ = imgbuf;
  if (imgbuf) {
    set_has_imgbuf();
  } else {
    clear_has_imgbuf();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.ImgBuf)
}

// required uint32 BitMask = 7;
inline bool ModContact::has_bitmask() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void ModContact::set_has_bitmask() {
  _has_bits_[1] |= 0x00000080u;
}
inline void ModContact::clear_has_bitmask() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void ModContact::clear_bitmask() {
  bitmask_ = 0u;
  clear_has_bitmask();
}
inline ::google::protobuf::uint32 ModContact::bitmask() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.BitMask)
  return bitmask_;
}
inline void ModContact::set_bitmask(::google::protobuf::uint32 value) {
  set_has_bitmask();
  bitmask_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModContact.BitMask)
}

// required uint32 BitVal = 8;
inline bool ModContact::has_bitval() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void ModContact::set_has_bitval() {
  _has_bits_[1] |= 0x00000100u;
}
inline void ModContact::clear_has_bitval() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void ModContact::clear_bitval() {
  bitval_ = 0u;
  clear_has_bitval();
}
inline ::google::protobuf::uint32 ModContact::bitval() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.BitVal)
  return bitval_;
}
inline void ModContact::set_bitval(::google::protobuf::uint32 value) {
  set_has_bitval();
  bitval_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModContact.BitVal)
}

// required uint32 ImgFlag = 9;
inline bool ModContact::has_imgflag() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void ModContact::set_has_imgflag() {
  _has_bits_[1] |= 0x00000200u;
}
inline void ModContact::clear_has_imgflag() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void ModContact::clear_imgflag() {
  imgflag_ = 0u;
  clear_has_imgflag();
}
inline ::google::protobuf::uint32 ModContact::imgflag() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.ImgFlag)
  return imgflag_;
}
inline void ModContact::set_imgflag(::google::protobuf::uint32 value) {
  set_has_imgflag();
  imgflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModContact.ImgFlag)
}

// optional .micromsg.SKBuiltinString_t Remark = 10;
inline bool ModContact::has_remark() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void ModContact::set_has_remark() {
  _has_bits_[0] |= 0x40000000u;
}
inline void ModContact::clear_has_remark() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void ModContact::clear_remark() {
  if (remark_ != NULL) remark_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_remark();
}
inline const ::micromsg::SKBuiltinString_t& ModContact::remark() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.Remark)
  return remark_ != NULL ? *remark_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinString_t* ModContact::mutable_remark() {
  set_has_remark();
  if (remark_ == NULL) {
    remark_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.Remark)
  return remark_;
}
inline ::micromsg::SKBuiltinString_t* ModContact::release_remark() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.Remark)
  clear_has_remark();
  ::micromsg::SKBuiltinString_t* temp = remark_;
  remark_ = NULL;
  return temp;
}
inline void ModContact::set_allocated_remark(::micromsg::SKBuiltinString_t* remark) {
  delete remark_;
  remark_ = remark;
  if (remark) {
    set_has_remark();
  } else {
    clear_has_remark();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.Remark)
}

// optional .micromsg.SKBuiltinString_t RemarkPYInitial = 11;
inline bool ModContact::has_remarkpyinitial() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void ModContact::set_has_remarkpyinitial() {
  _has_bits_[0] |= 0x80000000u;
}
inline void ModContact::clear_has_remarkpyinitial() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void ModContact::clear_remarkpyinitial() {
  if (remarkpyinitial_ != NULL) remarkpyinitial_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_remarkpyinitial();
}
inline const ::micromsg::SKBuiltinString_t& ModContact::remarkpyinitial() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.RemarkPYInitial)
  return remarkpyinitial_ != NULL ? *remarkpyinitial_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinString_t* ModContact::mutable_remarkpyinitial() {
  set_has_remarkpyinitial();
  if (remarkpyinitial_ == NULL) {
    remarkpyinitial_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.RemarkPYInitial)
  return remarkpyinitial_;
}
inline ::micromsg::SKBuiltinString_t* ModContact::release_remarkpyinitial() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.RemarkPYInitial)
  clear_has_remarkpyinitial();
  ::micromsg::SKBuiltinString_t* temp = remarkpyinitial_;
  remarkpyinitial_ = NULL;
  return temp;
}
inline void ModContact::set_allocated_remarkpyinitial(::micromsg::SKBuiltinString_t* remarkpyinitial) {
  delete remarkpyinitial_;
  remarkpyinitial_ = remarkpyinitial;
  if (remarkpyinitial) {
    set_has_remarkpyinitial();
  } else {
    clear_has_remarkpyinitial();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.RemarkPYInitial)
}

// optional .micromsg.SKBuiltinString_t RemarkQuanPin = 12;
inline bool ModContact::has_remarkquanpin() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void ModContact::set_has_remarkquanpin() {
  _has_bits_[1] |= 0x00000001u;
}
inline void ModContact::clear_has_remarkquanpin() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void ModContact::clear_remarkquanpin() {
  if (remarkquanpin_ != NULL) remarkquanpin_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_remarkquanpin();
}
inline const ::micromsg::SKBuiltinString_t& ModContact::remarkquanpin() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.RemarkQuanPin)
  return remarkquanpin_ != NULL ? *remarkquanpin_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinString_t* ModContact::mutable_remarkquanpin() {
  set_has_remarkquanpin();
  if (remarkquanpin_ == NULL) {
    remarkquanpin_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.RemarkQuanPin)
  return remarkquanpin_;
}
inline ::micromsg::SKBuiltinString_t* ModContact::release_remarkquanpin() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.RemarkQuanPin)
  clear_has_remarkquanpin();
  ::micromsg::SKBuiltinString_t* temp = remarkquanpin_;
  remarkquanpin_ = NULL;
  return temp;
}
inline void ModContact::set_allocated_remarkquanpin(::micromsg::SKBuiltinString_t* remarkquanpin) {
  delete remarkquanpin_;
  remarkquanpin_ = remarkquanpin;
  if (remarkquanpin) {
    set_has_remarkquanpin();
  } else {
    clear_has_remarkquanpin();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.RemarkQuanPin)
}

// optional uint32 ContactType = 13;
inline bool ModContact::has_contacttype() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void ModContact::set_has_contacttype() {
  _has_bits_[1] |= 0x00000400u;
}
inline void ModContact::clear_has_contacttype() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void ModContact::clear_contacttype() {
  contacttype_ = 0u;
  clear_has_contacttype();
}
inline ::google::protobuf::uint32 ModContact::contacttype() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.ContactType)
  return contacttype_;
}
inline void ModContact::set_contacttype(::google::protobuf::uint32 value) {
  set_has_contacttype();
  contacttype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModContact.ContactType)
}

// optional uint32 RoomInfoCount = 14;
inline bool ModContact::has_roominfocount() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void ModContact::set_has_roominfocount() {
  _has_bits_[1] |= 0x00000800u;
}
inline void ModContact::clear_has_roominfocount() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void ModContact::clear_roominfocount() {
  roominfocount_ = 0u;
  clear_has_roominfocount();
}
inline ::google::protobuf::uint32 ModContact::roominfocount() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.RoomInfoCount)
  return roominfocount_;
}
inline void ModContact::set_roominfocount(::google::protobuf::uint32 value) {
  set_has_roominfocount();
  roominfocount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModContact.RoomInfoCount)
}

// repeated .micromsg.RoomInfo RoomInfoList = 15;
inline int ModContact::roominfolist_size() const {
  return roominfolist_.size();
}
inline void ModContact::clear_roominfolist() {
  roominfolist_.Clear();
}
inline const ::micromsg::RoomInfo& ModContact::roominfolist(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.RoomInfoList)
  return roominfolist_.Get(index);
}
inline ::micromsg::RoomInfo* ModContact::mutable_roominfolist(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.RoomInfoList)
  return roominfolist_.Mutable(index);
}
inline ::micromsg::RoomInfo* ModContact::add_roominfolist() {
  // @@protoc_insertion_point(field_add:micromsg.ModContact.RoomInfoList)
  return roominfolist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::micromsg::RoomInfo >*
ModContact::mutable_roominfolist() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.ModContact.RoomInfoList)
  return &roominfolist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::micromsg::RoomInfo >&
ModContact::roominfolist() const {
  // @@protoc_insertion_point(field_list:micromsg.ModContact.RoomInfoList)
  return roominfolist_;
}

// optional .micromsg.SKBuiltinString_t DomainList = 16;
inline bool ModContact::has_domainlist() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void ModContact::set_has_domainlist() {
  _has_bits_[1] |= 0x00000002u;
}
inline void ModContact::clear_has_domainlist() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void ModContact::clear_domainlist() {
  if (domainlist_ != NULL) domainlist_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_domainlist();
}
inline const ::micromsg::SKBuiltinString_t& ModContact::domainlist() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.DomainList)
  return domainlist_ != NULL ? *domainlist_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
inline ::micromsg::SKBuiltinString_t* ModContact::mutable_domainlist() {
  set_has_domainlist();
  if (domainlist_ == NULL) {
    domainlist_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.DomainList)
  return domainlist_;
}
inline ::micromsg::SKBuiltinString_t* ModContact::release_domainlist() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.DomainList)
  clear_has_domainlist();
  ::micromsg::SKBuiltinString_t* temp = domainlist_;
  domainlist_ = NULL;
  return temp;
}
inline void ModContact::set_allocated_domainlist(::micromsg::SKBuiltinString_t* domainlist) {
  delete domainlist_;
  domainlist_ = domainlist;
  if (domainlist) {
    set_has_domainlist();
  } else {
    clear_has_domainlist();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.DomainList)
}

// optional uint32 ChatRoomNotify = 17;
inline bool ModContact::has_chatroomnotify() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void ModContact::set_has_chatroomnotify() {
  _has_bits_[1] |= 0x00001000u;
}
inline void ModContact::clear_has_chatroomnotify() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void ModContact::clear_chatroomnotify() {
  chatroomnotify_ = 0u;
  clear_has_chatroomnotify();
}
inline ::google::protobuf::uint32 ModContact::chatroomnotify() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.ChatRoomNotify)
  return chatroomnotify_;
}
inline void ModContact::set_chatroomnotify(::google::protobuf::uint32 value) {
  set_has_chatroomnotify();
  chatroomnotify_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModContact.ChatRoomNotify)
}

// optional uint32 AddContactScene = 18;
inline bool ModContact::has_addcontactscene() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void ModContact::set_has_addcontactscene() {
  _has_bits_[1] |= 0x00002000u;
}
inline void ModContact::clear_has_addcontactscene() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void ModContact::clear_addcontactscene() {
  addcontactscene_ = 0u;
  clear_has_addcontactscene();
}
inline ::google::protobuf::uint32 ModContact::addcontactscene() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.AddContactScene)
  return addcontactscene_;
}
inline void ModContact::set_addcontactscene(::google::protobuf::uint32 value) {
  set_has_addcontactscene();
  addcontactscene_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModContact.AddContactScene)
}

// optional string Province = 19;
inline bool ModContact::has_province() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ModContact::set_has_province() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ModContact::clear_has_province() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ModContact::clear_province() {
  province_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_province();
}
inline const ::std::string& ModContact::province() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.Province)
  return province_.GetNoArena();
}
inline void ModContact::set_province(const ::std::string& value) {
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModContact.Province)
}
#if LANG_CXX11
inline void ModContact::set_province(::std::string&& value) {
  set_has_province();
  province_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModContact.Province)
}
#endif
inline void ModContact::set_province(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModContact.Province)
}
inline void ModContact::set_province(const char* value, size_t size) {
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModContact.Province)
}
inline ::std::string* ModContact::mutable_province() {
  set_has_province();
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.Province)
  return province_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModContact::release_province() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.Province)
  clear_has_province();
  return province_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModContact::set_allocated_province(::std::string* province) {
  if (province != NULL) {
    set_has_province();
  } else {
    clear_has_province();
  }
  province_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), province);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.Province)
}

// optional string City = 20;
inline bool ModContact::has_city() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ModContact::set_has_city() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ModContact::clear_has_city() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ModContact::clear_city() {
  city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_city();
}
inline const ::std::string& ModContact::city() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.City)
  return city_.GetNoArena();
}
inline void ModContact::set_city(const ::std::string& value) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModContact.City)
}
#if LANG_CXX11
inline void ModContact::set_city(::std::string&& value) {
  set_has_city();
  city_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModContact.City)
}
#endif
inline void ModContact::set_city(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModContact.City)
}
inline void ModContact::set_city(const char* value, size_t size) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModContact.City)
}
inline ::std::string* ModContact::mutable_city() {
  set_has_city();
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.City)
  return city_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModContact::release_city() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.City)
  clear_has_city();
  return city_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModContact::set_allocated_city(::std::string* city) {
  if (city != NULL) {
    set_has_city();
  } else {
    clear_has_city();
  }
  city_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.City)
}

// optional string Signature = 21;
inline bool ModContact::has_signature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ModContact::set_has_signature() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ModContact::clear_has_signature() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ModContact::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_signature();
}
inline const ::std::string& ModContact::signature() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.Signature)
  return signature_.GetNoArena();
}
inline void ModContact::set_signature(const ::std::string& value) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModContact.Signature)
}
#if LANG_CXX11
inline void ModContact::set_signature(::std::string&& value) {
  set_has_signature();
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModContact.Signature)
}
#endif
inline void ModContact::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModContact.Signature)
}
inline void ModContact::set_signature(const char* value, size_t size) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModContact.Signature)
}
inline ::std::string* ModContact::mutable_signature() {
  set_has_signature();
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.Signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModContact::release_signature() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.Signature)
  clear_has_signature();
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModContact::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.Signature)
}

// optional uint32 PersonalCard = 22;
inline bool ModContact::has_personalcard() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void ModContact::set_has_personalcard() {
  _has_bits_[1] |= 0x00004000u;
}
inline void ModContact::clear_has_personalcard() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void ModContact::clear_personalcard() {
  personalcard_ = 0u;
  clear_has_personalcard();
}
inline ::google::protobuf::uint32 ModContact::personalcard() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.PersonalCard)
  return personalcard_;
}
inline void ModContact::set_personalcard(::google::protobuf::uint32 value) {
  set_has_personalcard();
  personalcard_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModContact.PersonalCard)
}

// optional uint32 HasWeiXinHdHeadImg = 23;
inline bool ModContact::has_hasweixinhdheadimg() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void ModContact::set_has_hasweixinhdheadimg() {
  _has_bits_[1] |= 0x00008000u;
}
inline void ModContact::clear_has_hasweixinhdheadimg() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void ModContact::clear_hasweixinhdheadimg() {
  hasweixinhdheadimg_ = 0u;
  clear_has_hasweixinhdheadimg();
}
inline ::google::protobuf::uint32 ModContact::hasweixinhdheadimg() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.HasWeiXinHdHeadImg)
  return hasweixinhdheadimg_;
}
inline void ModContact::set_hasweixinhdheadimg(::google::protobuf::uint32 value) {
  set_has_hasweixinhdheadimg();
  hasweixinhdheadimg_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModContact.HasWeiXinHdHeadImg)
}

// optional uint32 VerifyFlag = 24;
inline bool ModContact::has_verifyflag() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void ModContact::set_has_verifyflag() {
  _has_bits_[1] |= 0x00010000u;
}
inline void ModContact::clear_has_verifyflag() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void ModContact::clear_verifyflag() {
  verifyflag_ = 0u;
  clear_has_verifyflag();
}
inline ::google::protobuf::uint32 ModContact::verifyflag() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.VerifyFlag)
  return verifyflag_;
}
inline void ModContact::set_verifyflag(::google::protobuf::uint32 value) {
  set_has_verifyflag();
  verifyflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModContact.VerifyFlag)
}

// optional string VerifyInfo = 25;
inline bool ModContact::has_verifyinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ModContact::set_has_verifyinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ModContact::clear_has_verifyinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ModContact::clear_verifyinfo() {
  verifyinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_verifyinfo();
}
inline const ::std::string& ModContact::verifyinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.VerifyInfo)
  return verifyinfo_.GetNoArena();
}
inline void ModContact::set_verifyinfo(const ::std::string& value) {
  set_has_verifyinfo();
  verifyinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModContact.VerifyInfo)
}
#if LANG_CXX11
inline void ModContact::set_verifyinfo(::std::string&& value) {
  set_has_verifyinfo();
  verifyinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModContact.VerifyInfo)
}
#endif
inline void ModContact::set_verifyinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_verifyinfo();
  verifyinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModContact.VerifyInfo)
}
inline void ModContact::set_verifyinfo(const char* value, size_t size) {
  set_has_verifyinfo();
  verifyinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModContact.VerifyInfo)
}
inline ::std::string* ModContact::mutable_verifyinfo() {
  set_has_verifyinfo();
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.VerifyInfo)
  return verifyinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModContact::release_verifyinfo() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.VerifyInfo)
  clear_has_verifyinfo();
  return verifyinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModContact::set_allocated_verifyinfo(::std::string* verifyinfo) {
  if (verifyinfo != NULL) {
    set_has_verifyinfo();
  } else {
    clear_has_verifyinfo();
  }
  verifyinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verifyinfo);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.VerifyInfo)
}

// optional int32 Level = 26;
inline bool ModContact::has_level() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void ModContact::set_has_level() {
  _has_bits_[1] |= 0x00020000u;
}
inline void ModContact::clear_has_level() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void ModContact::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 ModContact::level() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.Level)
  return level_;
}
inline void ModContact::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModContact.Level)
}

// optional uint32 Source = 27;
inline bool ModContact::has_source() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void ModContact::set_has_source() {
  _has_bits_[1] |= 0x00040000u;
}
inline void ModContact::clear_has_source() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void ModContact::clear_source() {
  source_ = 0u;
  clear_has_source();
}
inline ::google::protobuf::uint32 ModContact::source() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.Source)
  return source_;
}
inline void ModContact::set_source(::google::protobuf::uint32 value) {
  set_has_source();
  source_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModContact.Source)
}

// optional string Weibo = 28;
inline bool ModContact::has_weibo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ModContact::set_has_weibo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ModContact::clear_has_weibo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ModContact::clear_weibo() {
  weibo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_weibo();
}
inline const ::std::string& ModContact::weibo() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.Weibo)
  return weibo_.GetNoArena();
}
inline void ModContact::set_weibo(const ::std::string& value) {
  set_has_weibo();
  weibo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModContact.Weibo)
}
#if LANG_CXX11
inline void ModContact::set_weibo(::std::string&& value) {
  set_has_weibo();
  weibo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModContact.Weibo)
}
#endif
inline void ModContact::set_weibo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_weibo();
  weibo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModContact.Weibo)
}
inline void ModContact::set_weibo(const char* value, size_t size) {
  set_has_weibo();
  weibo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModContact.Weibo)
}
inline ::std::string* ModContact::mutable_weibo() {
  set_has_weibo();
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.Weibo)
  return weibo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModContact::release_weibo() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.Weibo)
  clear_has_weibo();
  return weibo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModContact::set_allocated_weibo(::std::string* weibo) {
  if (weibo != NULL) {
    set_has_weibo();
  } else {
    clear_has_weibo();
  }
  weibo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), weibo);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.Weibo)
}

// optional string VerifyContent = 29;
inline bool ModContact::has_verifycontent() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ModContact::set_has_verifycontent() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ModContact::clear_has_verifycontent() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ModContact::clear_verifycontent() {
  verifycontent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_verifycontent();
}
inline const ::std::string& ModContact::verifycontent() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.VerifyContent)
  return verifycontent_.GetNoArena();
}
inline void ModContact::set_verifycontent(const ::std::string& value) {
  set_has_verifycontent();
  verifycontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModContact.VerifyContent)
}
#if LANG_CXX11
inline void ModContact::set_verifycontent(::std::string&& value) {
  set_has_verifycontent();
  verifycontent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModContact.VerifyContent)
}
#endif
inline void ModContact::set_verifycontent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_verifycontent();
  verifycontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModContact.VerifyContent)
}
inline void ModContact::set_verifycontent(const char* value, size_t size) {
  set_has_verifycontent();
  verifycontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModContact.VerifyContent)
}
inline ::std::string* ModContact::mutable_verifycontent() {
  set_has_verifycontent();
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.VerifyContent)
  return verifycontent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModContact::release_verifycontent() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.VerifyContent)
  clear_has_verifycontent();
  return verifycontent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModContact::set_allocated_verifycontent(::std::string* verifycontent) {
  if (verifycontent != NULL) {
    set_has_verifycontent();
  } else {
    clear_has_verifycontent();
  }
  verifycontent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verifycontent);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.VerifyContent)
}

// optional string Alias = 30;
inline bool ModContact::has_alias() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ModContact::set_has_alias() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ModContact::clear_has_alias() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ModContact::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_alias();
}
inline const ::std::string& ModContact::alias() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.Alias)
  return alias_.GetNoArena();
}
inline void ModContact::set_alias(const ::std::string& value) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModContact.Alias)
}
#if LANG_CXX11
inline void ModContact::set_alias(::std::string&& value) {
  set_has_alias();
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModContact.Alias)
}
#endif
inline void ModContact::set_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModContact.Alias)
}
inline void ModContact::set_alias(const char* value, size_t size) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModContact.Alias)
}
inline ::std::string* ModContact::mutable_alias() {
  set_has_alias();
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.Alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModContact::release_alias() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.Alias)
  clear_has_alias();
  return alias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModContact::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    set_has_alias();
  } else {
    clear_has_alias();
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.Alias)
}

// optional string ChatRoomOwner = 31;
inline bool ModContact::has_chatroomowner() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ModContact::set_has_chatroomowner() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ModContact::clear_has_chatroomowner() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ModContact::clear_chatroomowner() {
  chatroomowner_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chatroomowner();
}
inline const ::std::string& ModContact::chatroomowner() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.ChatRoomOwner)
  return chatroomowner_.GetNoArena();
}
inline void ModContact::set_chatroomowner(const ::std::string& value) {
  set_has_chatroomowner();
  chatroomowner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModContact.ChatRoomOwner)
}
#if LANG_CXX11
inline void ModContact::set_chatroomowner(::std::string&& value) {
  set_has_chatroomowner();
  chatroomowner_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModContact.ChatRoomOwner)
}
#endif
inline void ModContact::set_chatroomowner(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_chatroomowner();
  chatroomowner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModContact.ChatRoomOwner)
}
inline void ModContact::set_chatroomowner(const char* value, size_t size) {
  set_has_chatroomowner();
  chatroomowner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModContact.ChatRoomOwner)
}
inline ::std::string* ModContact::mutable_chatroomowner() {
  set_has_chatroomowner();
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.ChatRoomOwner)
  return chatroomowner_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModContact::release_chatroomowner() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.ChatRoomOwner)
  clear_has_chatroomowner();
  return chatroomowner_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModContact::set_allocated_chatroomowner(::std::string* chatroomowner) {
  if (chatroomowner != NULL) {
    set_has_chatroomowner();
  } else {
    clear_has_chatroomowner();
  }
  chatroomowner_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chatroomowner);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.ChatRoomOwner)
}

// optional string WeiboNickname = 32;
inline bool ModContact::has_weibonickname() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ModContact::set_has_weibonickname() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ModContact::clear_has_weibonickname() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ModContact::clear_weibonickname() {
  weibonickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_weibonickname();
}
inline const ::std::string& ModContact::weibonickname() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.WeiboNickname)
  return weibonickname_.GetNoArena();
}
inline void ModContact::set_weibonickname(const ::std::string& value) {
  set_has_weibonickname();
  weibonickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModContact.WeiboNickname)
}
#if LANG_CXX11
inline void ModContact::set_weibonickname(::std::string&& value) {
  set_has_weibonickname();
  weibonickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModContact.WeiboNickname)
}
#endif
inline void ModContact::set_weibonickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_weibonickname();
  weibonickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModContact.WeiboNickname)
}
inline void ModContact::set_weibonickname(const char* value, size_t size) {
  set_has_weibonickname();
  weibonickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModContact.WeiboNickname)
}
inline ::std::string* ModContact::mutable_weibonickname() {
  set_has_weibonickname();
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.WeiboNickname)
  return weibonickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModContact::release_weibonickname() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.WeiboNickname)
  clear_has_weibonickname();
  return weibonickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModContact::set_allocated_weibonickname(::std::string* weibonickname) {
  if (weibonickname != NULL) {
    set_has_weibonickname();
  } else {
    clear_has_weibonickname();
  }
  weibonickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), weibonickname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.WeiboNickname)
}

// optional uint32 WeiboFlag = 33;
inline bool ModContact::has_weiboflag() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void ModContact::set_has_weiboflag() {
  _has_bits_[1] |= 0x00080000u;
}
inline void ModContact::clear_has_weiboflag() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void ModContact::clear_weiboflag() {
  weiboflag_ = 0u;
  clear_has_weiboflag();
}
inline ::google::protobuf::uint32 ModContact::weiboflag() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.WeiboFlag)
  return weiboflag_;
}
inline void ModContact::set_weiboflag(::google::protobuf::uint32 value) {
  set_has_weiboflag();
  weiboflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModContact.WeiboFlag)
}

// optional int32 AlbumStyle = 34;
inline bool ModContact::has_albumstyle() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void ModContact::set_has_albumstyle() {
  _has_bits_[1] |= 0x00100000u;
}
inline void ModContact::clear_has_albumstyle() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void ModContact::clear_albumstyle() {
  albumstyle_ = 0;
  clear_has_albumstyle();
}
inline ::google::protobuf::int32 ModContact::albumstyle() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.AlbumStyle)
  return albumstyle_;
}
inline void ModContact::set_albumstyle(::google::protobuf::int32 value) {
  set_has_albumstyle();
  albumstyle_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModContact.AlbumStyle)
}

// optional int32 AlbumFlag = 35;
inline bool ModContact::has_albumflag() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void ModContact::set_has_albumflag() {
  _has_bits_[1] |= 0x00200000u;
}
inline void ModContact::clear_has_albumflag() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void ModContact::clear_albumflag() {
  albumflag_ = 0;
  clear_has_albumflag();
}
inline ::google::protobuf::int32 ModContact::albumflag() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.AlbumFlag)
  return albumflag_;
}
inline void ModContact::set_albumflag(::google::protobuf::int32 value) {
  set_has_albumflag();
  albumflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModContact.AlbumFlag)
}

// optional string AlbumBGImgID = 36;
inline bool ModContact::has_albumbgimgid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ModContact::set_has_albumbgimgid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ModContact::clear_has_albumbgimgid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ModContact::clear_albumbgimgid() {
  albumbgimgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_albumbgimgid();
}
inline const ::std::string& ModContact::albumbgimgid() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.AlbumBGImgID)
  return albumbgimgid_.GetNoArena();
}
inline void ModContact::set_albumbgimgid(const ::std::string& value) {
  set_has_albumbgimgid();
  albumbgimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModContact.AlbumBGImgID)
}
#if LANG_CXX11
inline void ModContact::set_albumbgimgid(::std::string&& value) {
  set_has_albumbgimgid();
  albumbgimgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModContact.AlbumBGImgID)
}
#endif
inline void ModContact::set_albumbgimgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_albumbgimgid();
  albumbgimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModContact.AlbumBGImgID)
}
inline void ModContact::set_albumbgimgid(const char* value, size_t size) {
  set_has_albumbgimgid();
  albumbgimgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModContact.AlbumBGImgID)
}
inline ::std::string* ModContact::mutable_albumbgimgid() {
  set_has_albumbgimgid();
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.AlbumBGImgID)
  return albumbgimgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModContact::release_albumbgimgid() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.AlbumBGImgID)
  clear_has_albumbgimgid();
  return albumbgimgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModContact::set_allocated_albumbgimgid(::std::string* albumbgimgid) {
  if (albumbgimgid != NULL) {
    set_has_albumbgimgid();
  } else {
    clear_has_albumbgimgid();
  }
  albumbgimgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), albumbgimgid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.AlbumBGImgID)
}

// optional .micromsg.SnsUserInfo SnsUserInfo = 37;
inline bool ModContact::has_snsuserinfo() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void ModContact::set_has_snsuserinfo() {
  _has_bits_[1] |= 0x00000004u;
}
inline void ModContact::clear_has_snsuserinfo() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void ModContact::clear_snsuserinfo() {
  if (snsuserinfo_ != NULL) snsuserinfo_->::micromsg::SnsUserInfo::Clear();
  clear_has_snsuserinfo();
}
inline const ::micromsg::SnsUserInfo& ModContact::snsuserinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.SnsUserInfo)
  return snsuserinfo_ != NULL ? *snsuserinfo_
                         : *::micromsg::SnsUserInfo::internal_default_instance();
}
inline ::micromsg::SnsUserInfo* ModContact::mutable_snsuserinfo() {
  set_has_snsuserinfo();
  if (snsuserinfo_ == NULL) {
    snsuserinfo_ = new ::micromsg::SnsUserInfo;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.SnsUserInfo)
  return snsuserinfo_;
}
inline ::micromsg::SnsUserInfo* ModContact::release_snsuserinfo() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.SnsUserInfo)
  clear_has_snsuserinfo();
  ::micromsg::SnsUserInfo* temp = snsuserinfo_;
  snsuserinfo_ = NULL;
  return temp;
}
inline void ModContact::set_allocated_snsuserinfo(::micromsg::SnsUserInfo* snsuserinfo) {
  delete snsuserinfo_;
  snsuserinfo_ = snsuserinfo;
  if (snsuserinfo) {
    set_has_snsuserinfo();
  } else {
    clear_has_snsuserinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.SnsUserInfo)
}

// optional string Country = 38;
inline bool ModContact::has_country() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ModContact::set_has_country() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ModContact::clear_has_country() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ModContact::clear_country() {
  country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country();
}
inline const ::std::string& ModContact::country() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.Country)
  return country_.GetNoArena();
}
inline void ModContact::set_country(const ::std::string& value) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModContact.Country)
}
#if LANG_CXX11
inline void ModContact::set_country(::std::string&& value) {
  set_has_country();
  country_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModContact.Country)
}
#endif
inline void ModContact::set_country(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModContact.Country)
}
inline void ModContact::set_country(const char* value, size_t size) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModContact.Country)
}
inline ::std::string* ModContact::mutable_country() {
  set_has_country();
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.Country)
  return country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModContact::release_country() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.Country)
  clear_has_country();
  return country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModContact::set_allocated_country(::std::string* country) {
  if (country != NULL) {
    set_has_country();
  } else {
    clear_has_country();
  }
  country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.Country)
}

// optional string BigHeadImgUrl = 39;
inline bool ModContact::has_bigheadimgurl() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ModContact::set_has_bigheadimgurl() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ModContact::clear_has_bigheadimgurl() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ModContact::clear_bigheadimgurl() {
  bigheadimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bigheadimgurl();
}
inline const ::std::string& ModContact::bigheadimgurl() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.BigHeadImgUrl)
  return bigheadimgurl_.GetNoArena();
}
inline void ModContact::set_bigheadimgurl(const ::std::string& value) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModContact.BigHeadImgUrl)
}
#if LANG_CXX11
inline void ModContact::set_bigheadimgurl(::std::string&& value) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModContact.BigHeadImgUrl)
}
#endif
inline void ModContact::set_bigheadimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModContact.BigHeadImgUrl)
}
inline void ModContact::set_bigheadimgurl(const char* value, size_t size) {
  set_has_bigheadimgurl();
  bigheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModContact.BigHeadImgUrl)
}
inline ::std::string* ModContact::mutable_bigheadimgurl() {
  set_has_bigheadimgurl();
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.BigHeadImgUrl)
  return bigheadimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModContact::release_bigheadimgurl() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.BigHeadImgUrl)
  clear_has_bigheadimgurl();
  return bigheadimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModContact::set_allocated_bigheadimgurl(::std::string* bigheadimgurl) {
  if (bigheadimgurl != NULL) {
    set_has_bigheadimgurl();
  } else {
    clear_has_bigheadimgurl();
  }
  bigheadimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bigheadimgurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.BigHeadImgUrl)
}

// optional string SmallHeadImgUrl = 40;
inline bool ModContact::has_smallheadimgurl() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ModContact::set_has_smallheadimgurl() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ModContact::clear_has_smallheadimgurl() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ModContact::clear_smallheadimgurl() {
  smallheadimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_smallheadimgurl();
}
inline const ::std::string& ModContact::smallheadimgurl() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.SmallHeadImgUrl)
  return smallheadimgurl_.GetNoArena();
}
inline void ModContact::set_smallheadimgurl(const ::std::string& value) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModContact.SmallHeadImgUrl)
}
#if LANG_CXX11
inline void ModContact::set_smallheadimgurl(::std::string&& value) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModContact.SmallHeadImgUrl)
}
#endif
inline void ModContact::set_smallheadimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModContact.SmallHeadImgUrl)
}
inline void ModContact::set_smallheadimgurl(const char* value, size_t size) {
  set_has_smallheadimgurl();
  smallheadimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModContact.SmallHeadImgUrl)
}
inline ::std::string* ModContact::mutable_smallheadimgurl() {
  set_has_smallheadimgurl();
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.SmallHeadImgUrl)
  return smallheadimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModContact::release_smallheadimgurl() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.SmallHeadImgUrl)
  clear_has_smallheadimgurl();
  return smallheadimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModContact::set_allocated_smallheadimgurl(::std::string* smallheadimgurl) {
  if (smallheadimgurl != NULL) {
    set_has_smallheadimgurl();
  } else {
    clear_has_smallheadimgurl();
  }
  smallheadimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smallheadimgurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.SmallHeadImgUrl)
}

// optional string MyBrandList = 41;
inline bool ModContact::has_mybrandlist() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ModContact::set_has_mybrandlist() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ModContact::clear_has_mybrandlist() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ModContact::clear_mybrandlist() {
  mybrandlist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mybrandlist();
}
inline const ::std::string& ModContact::mybrandlist() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.MyBrandList)
  return mybrandlist_.GetNoArena();
}
inline void ModContact::set_mybrandlist(const ::std::string& value) {
  set_has_mybrandlist();
  mybrandlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModContact.MyBrandList)
}
#if LANG_CXX11
inline void ModContact::set_mybrandlist(::std::string&& value) {
  set_has_mybrandlist();
  mybrandlist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModContact.MyBrandList)
}
#endif
inline void ModContact::set_mybrandlist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mybrandlist();
  mybrandlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModContact.MyBrandList)
}
inline void ModContact::set_mybrandlist(const char* value, size_t size) {
  set_has_mybrandlist();
  mybrandlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModContact.MyBrandList)
}
inline ::std::string* ModContact::mutable_mybrandlist() {
  set_has_mybrandlist();
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.MyBrandList)
  return mybrandlist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModContact::release_mybrandlist() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.MyBrandList)
  clear_has_mybrandlist();
  return mybrandlist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModContact::set_allocated_mybrandlist(::std::string* mybrandlist) {
  if (mybrandlist != NULL) {
    set_has_mybrandlist();
  } else {
    clear_has_mybrandlist();
  }
  mybrandlist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mybrandlist);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.MyBrandList)
}

// optional .micromsg.CustomizedInfo CustomizedInfo = 42;
inline bool ModContact::has_customizedinfo() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void ModContact::set_has_customizedinfo() {
  _has_bits_[1] |= 0x00000008u;
}
inline void ModContact::clear_has_customizedinfo() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void ModContact::clear_customizedinfo() {
  if (customizedinfo_ != NULL) customizedinfo_->::micromsg::CustomizedInfo::Clear();
  clear_has_customizedinfo();
}
inline const ::micromsg::CustomizedInfo& ModContact::customizedinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.CustomizedInfo)
  return customizedinfo_ != NULL ? *customizedinfo_
                         : *::micromsg::CustomizedInfo::internal_default_instance();
}
inline ::micromsg::CustomizedInfo* ModContact::mutable_customizedinfo() {
  set_has_customizedinfo();
  if (customizedinfo_ == NULL) {
    customizedinfo_ = new ::micromsg::CustomizedInfo;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.CustomizedInfo)
  return customizedinfo_;
}
inline ::micromsg::CustomizedInfo* ModContact::release_customizedinfo() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.CustomizedInfo)
  clear_has_customizedinfo();
  ::micromsg::CustomizedInfo* temp = customizedinfo_;
  customizedinfo_ = NULL;
  return temp;
}
inline void ModContact::set_allocated_customizedinfo(::micromsg::CustomizedInfo* customizedinfo) {
  delete customizedinfo_;
  customizedinfo_ = customizedinfo;
  if (customizedinfo) {
    set_has_customizedinfo();
  } else {
    clear_has_customizedinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.CustomizedInfo)
}

// optional string ChatRoomData = 43;
inline bool ModContact::has_chatroomdata() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ModContact::set_has_chatroomdata() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ModContact::clear_has_chatroomdata() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ModContact::clear_chatroomdata() {
  chatroomdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chatroomdata();
}
inline const ::std::string& ModContact::chatroomdata() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.ChatRoomData)
  return chatroomdata_.GetNoArena();
}
inline void ModContact::set_chatroomdata(const ::std::string& value) {
  set_has_chatroomdata();
  chatroomdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModContact.ChatRoomData)
}
#if LANG_CXX11
inline void ModContact::set_chatroomdata(::std::string&& value) {
  set_has_chatroomdata();
  chatroomdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModContact.ChatRoomData)
}
#endif
inline void ModContact::set_chatroomdata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_chatroomdata();
  chatroomdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModContact.ChatRoomData)
}
inline void ModContact::set_chatroomdata(const char* value, size_t size) {
  set_has_chatroomdata();
  chatroomdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModContact.ChatRoomData)
}
inline ::std::string* ModContact::mutable_chatroomdata() {
  set_has_chatroomdata();
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.ChatRoomData)
  return chatroomdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModContact::release_chatroomdata() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.ChatRoomData)
  clear_has_chatroomdata();
  return chatroomdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModContact::set_allocated_chatroomdata(::std::string* chatroomdata) {
  if (chatroomdata != NULL) {
    set_has_chatroomdata();
  } else {
    clear_has_chatroomdata();
  }
  chatroomdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chatroomdata);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.ChatRoomData)
}

// optional string HeadImgMd5 = 44;
inline bool ModContact::has_headimgmd5() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ModContact::set_has_headimgmd5() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ModContact::clear_has_headimgmd5() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ModContact::clear_headimgmd5() {
  headimgmd5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_headimgmd5();
}
inline const ::std::string& ModContact::headimgmd5() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.HeadImgMd5)
  return headimgmd5_.GetNoArena();
}
inline void ModContact::set_headimgmd5(const ::std::string& value) {
  set_has_headimgmd5();
  headimgmd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModContact.HeadImgMd5)
}
#if LANG_CXX11
inline void ModContact::set_headimgmd5(::std::string&& value) {
  set_has_headimgmd5();
  headimgmd5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModContact.HeadImgMd5)
}
#endif
inline void ModContact::set_headimgmd5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_headimgmd5();
  headimgmd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModContact.HeadImgMd5)
}
inline void ModContact::set_headimgmd5(const char* value, size_t size) {
  set_has_headimgmd5();
  headimgmd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModContact.HeadImgMd5)
}
inline ::std::string* ModContact::mutable_headimgmd5() {
  set_has_headimgmd5();
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.HeadImgMd5)
  return headimgmd5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModContact::release_headimgmd5() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.HeadImgMd5)
  clear_has_headimgmd5();
  return headimgmd5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModContact::set_allocated_headimgmd5(::std::string* headimgmd5) {
  if (headimgmd5 != NULL) {
    set_has_headimgmd5();
  } else {
    clear_has_headimgmd5();
  }
  headimgmd5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), headimgmd5);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.HeadImgMd5)
}

// optional string EncryptUserName = 45;
inline bool ModContact::has_encryptusername() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ModContact::set_has_encryptusername() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ModContact::clear_has_encryptusername() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ModContact::clear_encryptusername() {
  encryptusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_encryptusername();
}
inline const ::std::string& ModContact::encryptusername() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.EncryptUserName)
  return encryptusername_.GetNoArena();
}
inline void ModContact::set_encryptusername(const ::std::string& value) {
  set_has_encryptusername();
  encryptusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModContact.EncryptUserName)
}
#if LANG_CXX11
inline void ModContact::set_encryptusername(::std::string&& value) {
  set_has_encryptusername();
  encryptusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModContact.EncryptUserName)
}
#endif
inline void ModContact::set_encryptusername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_encryptusername();
  encryptusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModContact.EncryptUserName)
}
inline void ModContact::set_encryptusername(const char* value, size_t size) {
  set_has_encryptusername();
  encryptusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModContact.EncryptUserName)
}
inline ::std::string* ModContact::mutable_encryptusername() {
  set_has_encryptusername();
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.EncryptUserName)
  return encryptusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModContact::release_encryptusername() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.EncryptUserName)
  clear_has_encryptusername();
  return encryptusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModContact::set_allocated_encryptusername(::std::string* encryptusername) {
  if (encryptusername != NULL) {
    set_has_encryptusername();
  } else {
    clear_has_encryptusername();
  }
  encryptusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), encryptusername);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.EncryptUserName)
}

// optional string IDCardNum = 46;
inline bool ModContact::has_idcardnum() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ModContact::set_has_idcardnum() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ModContact::clear_has_idcardnum() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ModContact::clear_idcardnum() {
  idcardnum_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_idcardnum();
}
inline const ::std::string& ModContact::idcardnum() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.IDCardNum)
  return idcardnum_.GetNoArena();
}
inline void ModContact::set_idcardnum(const ::std::string& value) {
  set_has_idcardnum();
  idcardnum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModContact.IDCardNum)
}
#if LANG_CXX11
inline void ModContact::set_idcardnum(::std::string&& value) {
  set_has_idcardnum();
  idcardnum_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModContact.IDCardNum)
}
#endif
inline void ModContact::set_idcardnum(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_idcardnum();
  idcardnum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModContact.IDCardNum)
}
inline void ModContact::set_idcardnum(const char* value, size_t size) {
  set_has_idcardnum();
  idcardnum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModContact.IDCardNum)
}
inline ::std::string* ModContact::mutable_idcardnum() {
  set_has_idcardnum();
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.IDCardNum)
  return idcardnum_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModContact::release_idcardnum() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.IDCardNum)
  clear_has_idcardnum();
  return idcardnum_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModContact::set_allocated_idcardnum(::std::string* idcardnum) {
  if (idcardnum != NULL) {
    set_has_idcardnum();
  } else {
    clear_has_idcardnum();
  }
  idcardnum_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), idcardnum);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.IDCardNum)
}

// optional string RealName = 47;
inline bool ModContact::has_realname() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ModContact::set_has_realname() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ModContact::clear_has_realname() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ModContact::clear_realname() {
  realname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_realname();
}
inline const ::std::string& ModContact::realname() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.RealName)
  return realname_.GetNoArena();
}
inline void ModContact::set_realname(const ::std::string& value) {
  set_has_realname();
  realname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModContact.RealName)
}
#if LANG_CXX11
inline void ModContact::set_realname(::std::string&& value) {
  set_has_realname();
  realname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModContact.RealName)
}
#endif
inline void ModContact::set_realname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_realname();
  realname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModContact.RealName)
}
inline void ModContact::set_realname(const char* value, size_t size) {
  set_has_realname();
  realname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModContact.RealName)
}
inline ::std::string* ModContact::mutable_realname() {
  set_has_realname();
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.RealName)
  return realname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModContact::release_realname() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.RealName)
  clear_has_realname();
  return realname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModContact::set_allocated_realname(::std::string* realname) {
  if (realname != NULL) {
    set_has_realname();
  } else {
    clear_has_realname();
  }
  realname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), realname);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.RealName)
}

// optional string MobileHash = 48;
inline bool ModContact::has_mobilehash() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ModContact::set_has_mobilehash() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ModContact::clear_has_mobilehash() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ModContact::clear_mobilehash() {
  mobilehash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mobilehash();
}
inline const ::std::string& ModContact::mobilehash() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.MobileHash)
  return mobilehash_.GetNoArena();
}
inline void ModContact::set_mobilehash(const ::std::string& value) {
  set_has_mobilehash();
  mobilehash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModContact.MobileHash)
}
#if LANG_CXX11
inline void ModContact::set_mobilehash(::std::string&& value) {
  set_has_mobilehash();
  mobilehash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModContact.MobileHash)
}
#endif
inline void ModContact::set_mobilehash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mobilehash();
  mobilehash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModContact.MobileHash)
}
inline void ModContact::set_mobilehash(const char* value, size_t size) {
  set_has_mobilehash();
  mobilehash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModContact.MobileHash)
}
inline ::std::string* ModContact::mutable_mobilehash() {
  set_has_mobilehash();
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.MobileHash)
  return mobilehash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModContact::release_mobilehash() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.MobileHash)
  clear_has_mobilehash();
  return mobilehash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModContact::set_allocated_mobilehash(::std::string* mobilehash) {
  if (mobilehash != NULL) {
    set_has_mobilehash();
  } else {
    clear_has_mobilehash();
  }
  mobilehash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mobilehash);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.MobileHash)
}

// optional string MobileFullHash = 49;
inline bool ModContact::has_mobilefullhash() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ModContact::set_has_mobilefullhash() {
  _has_bits_[0] |= 0x00100000u;
}
inline void ModContact::clear_has_mobilefullhash() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void ModContact::clear_mobilefullhash() {
  mobilefullhash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mobilefullhash();
}
inline const ::std::string& ModContact::mobilefullhash() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.MobileFullHash)
  return mobilefullhash_.GetNoArena();
}
inline void ModContact::set_mobilefullhash(const ::std::string& value) {
  set_has_mobilefullhash();
  mobilefullhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModContact.MobileFullHash)
}
#if LANG_CXX11
inline void ModContact::set_mobilefullhash(::std::string&& value) {
  set_has_mobilefullhash();
  mobilefullhash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModContact.MobileFullHash)
}
#endif
inline void ModContact::set_mobilefullhash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mobilefullhash();
  mobilefullhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModContact.MobileFullHash)
}
inline void ModContact::set_mobilefullhash(const char* value, size_t size) {
  set_has_mobilefullhash();
  mobilefullhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModContact.MobileFullHash)
}
inline ::std::string* ModContact::mutable_mobilefullhash() {
  set_has_mobilefullhash();
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.MobileFullHash)
  return mobilefullhash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModContact::release_mobilefullhash() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.MobileFullHash)
  clear_has_mobilefullhash();
  return mobilefullhash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModContact::set_allocated_mobilefullhash(::std::string* mobilefullhash) {
  if (mobilefullhash != NULL) {
    set_has_mobilefullhash();
  } else {
    clear_has_mobilefullhash();
  }
  mobilefullhash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mobilefullhash);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.MobileFullHash)
}

// optional .micromsg.AdditionalContactList AdditionalContactList = 50;
inline bool ModContact::has_additionalcontactlist() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void ModContact::set_has_additionalcontactlist() {
  _has_bits_[1] |= 0x00000010u;
}
inline void ModContact::clear_has_additionalcontactlist() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void ModContact::clear_additionalcontactlist() {
  if (additionalcontactlist_ != NULL) additionalcontactlist_->::micromsg::AdditionalContactList::Clear();
  clear_has_additionalcontactlist();
}
inline const ::micromsg::AdditionalContactList& ModContact::additionalcontactlist() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.AdditionalContactList)
  return additionalcontactlist_ != NULL ? *additionalcontactlist_
                         : *::micromsg::AdditionalContactList::internal_default_instance();
}
inline ::micromsg::AdditionalContactList* ModContact::mutable_additionalcontactlist() {
  set_has_additionalcontactlist();
  if (additionalcontactlist_ == NULL) {
    additionalcontactlist_ = new ::micromsg::AdditionalContactList;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.AdditionalContactList)
  return additionalcontactlist_;
}
inline ::micromsg::AdditionalContactList* ModContact::release_additionalcontactlist() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.AdditionalContactList)
  clear_has_additionalcontactlist();
  ::micromsg::AdditionalContactList* temp = additionalcontactlist_;
  additionalcontactlist_ = NULL;
  return temp;
}
inline void ModContact::set_allocated_additionalcontactlist(::micromsg::AdditionalContactList* additionalcontactlist) {
  delete additionalcontactlist_;
  additionalcontactlist_ = additionalcontactlist;
  if (additionalcontactlist) {
    set_has_additionalcontactlist();
  } else {
    clear_has_additionalcontactlist();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.AdditionalContactList)
}

// optional uint32 ChatroomVersion = 53;
inline bool ModContact::has_chatroomversion() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void ModContact::set_has_chatroomversion() {
  _has_bits_[1] |= 0x00400000u;
}
inline void ModContact::clear_has_chatroomversion() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void ModContact::clear_chatroomversion() {
  chatroomversion_ = 0u;
  clear_has_chatroomversion();
}
inline ::google::protobuf::uint32 ModContact::chatroomversion() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.ChatroomVersion)
  return chatroomversion_;
}
inline void ModContact::set_chatroomversion(::google::protobuf::uint32 value) {
  set_has_chatroomversion();
  chatroomversion_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModContact.ChatroomVersion)
}

// optional string ExtInfo = 54;
inline bool ModContact::has_extinfo() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void ModContact::set_has_extinfo() {
  _has_bits_[0] |= 0x00200000u;
}
inline void ModContact::clear_has_extinfo() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void ModContact::clear_extinfo() {
  extinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_extinfo();
}
inline const ::std::string& ModContact::extinfo() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.ExtInfo)
  return extinfo_.GetNoArena();
}
inline void ModContact::set_extinfo(const ::std::string& value) {
  set_has_extinfo();
  extinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModContact.ExtInfo)
}
#if LANG_CXX11
inline void ModContact::set_extinfo(::std::string&& value) {
  set_has_extinfo();
  extinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModContact.ExtInfo)
}
#endif
inline void ModContact::set_extinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_extinfo();
  extinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModContact.ExtInfo)
}
inline void ModContact::set_extinfo(const char* value, size_t size) {
  set_has_extinfo();
  extinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModContact.ExtInfo)
}
inline ::std::string* ModContact::mutable_extinfo() {
  set_has_extinfo();
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.ExtInfo)
  return extinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModContact::release_extinfo() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.ExtInfo)
  clear_has_extinfo();
  return extinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModContact::set_allocated_extinfo(::std::string* extinfo) {
  if (extinfo != NULL) {
    set_has_extinfo();
  } else {
    clear_has_extinfo();
  }
  extinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extinfo);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.ExtInfo)
}

// optional uint32 ChatroomMaxCount = 55;
inline bool ModContact::has_chatroommaxcount() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void ModContact::set_has_chatroommaxcount() {
  _has_bits_[1] |= 0x00800000u;
}
inline void ModContact::clear_has_chatroommaxcount() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void ModContact::clear_chatroommaxcount() {
  chatroommaxcount_ = 0u;
  clear_has_chatroommaxcount();
}
inline ::google::protobuf::uint32 ModContact::chatroommaxcount() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.ChatroomMaxCount)
  return chatroommaxcount_;
}
inline void ModContact::set_chatroommaxcount(::google::protobuf::uint32 value) {
  set_has_chatroommaxcount();
  chatroommaxcount_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModContact.ChatroomMaxCount)
}

// optional uint32 ChatroomType = 56;
inline bool ModContact::has_chatroomtype() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void ModContact::set_has_chatroomtype() {
  _has_bits_[1] |= 0x01000000u;
}
inline void ModContact::clear_has_chatroomtype() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void ModContact::clear_chatroomtype() {
  chatroomtype_ = 0u;
  clear_has_chatroomtype();
}
inline ::google::protobuf::uint32 ModContact::chatroomtype() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.ChatroomType)
  return chatroomtype_;
}
inline void ModContact::set_chatroomtype(::google::protobuf::uint32 value) {
  set_has_chatroomtype();
  chatroomtype_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModContact.ChatroomType)
}

// optional .micromsg.ChatRoomMemberData NewChatroomData = 57;
inline bool ModContact::has_newchatroomdata() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void ModContact::set_has_newchatroomdata() {
  _has_bits_[1] |= 0x00000020u;
}
inline void ModContact::clear_has_newchatroomdata() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void ModContact::clear_newchatroomdata() {
  if (newchatroomdata_ != NULL) newchatroomdata_->::micromsg::ChatRoomMemberData::Clear();
  clear_has_newchatroomdata();
}
inline const ::micromsg::ChatRoomMemberData& ModContact::newchatroomdata() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.NewChatroomData)
  return newchatroomdata_ != NULL ? *newchatroomdata_
                         : *::micromsg::ChatRoomMemberData::internal_default_instance();
}
inline ::micromsg::ChatRoomMemberData* ModContact::mutable_newchatroomdata() {
  set_has_newchatroomdata();
  if (newchatroomdata_ == NULL) {
    newchatroomdata_ = new ::micromsg::ChatRoomMemberData;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.NewChatroomData)
  return newchatroomdata_;
}
inline ::micromsg::ChatRoomMemberData* ModContact::release_newchatroomdata() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.NewChatroomData)
  clear_has_newchatroomdata();
  ::micromsg::ChatRoomMemberData* temp = newchatroomdata_;
  newchatroomdata_ = NULL;
  return temp;
}
inline void ModContact::set_allocated_newchatroomdata(::micromsg::ChatRoomMemberData* newchatroomdata) {
  delete newchatroomdata_;
  newchatroomdata_ = newchatroomdata;
  if (newchatroomdata) {
    set_has_newchatroomdata();
  } else {
    clear_has_newchatroomdata();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.NewChatroomData)
}

// optional int32 DeleteFlag = 58;
inline bool ModContact::has_deleteflag() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void ModContact::set_has_deleteflag() {
  _has_bits_[1] |= 0x02000000u;
}
inline void ModContact::clear_has_deleteflag() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void ModContact::clear_deleteflag() {
  deleteflag_ = 0;
  clear_has_deleteflag();
}
inline ::google::protobuf::int32 ModContact::deleteflag() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.DeleteFlag)
  return deleteflag_;
}
inline void ModContact::set_deleteflag(::google::protobuf::int32 value) {
  set_has_deleteflag();
  deleteflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.ModContact.DeleteFlag)
}

// optional string Description = 59;
inline bool ModContact::has_description() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void ModContact::set_has_description() {
  _has_bits_[0] |= 0x00400000u;
}
inline void ModContact::clear_has_description() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void ModContact::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
inline const ::std::string& ModContact::description() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.Description)
  return description_.GetNoArena();
}
inline void ModContact::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModContact.Description)
}
#if LANG_CXX11
inline void ModContact::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModContact.Description)
}
#endif
inline void ModContact::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModContact.Description)
}
inline void ModContact::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModContact.Description)
}
inline ::std::string* ModContact::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.Description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModContact::release_description() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.Description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModContact::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.Description)
}

// optional string CardImgUrl = 60;
inline bool ModContact::has_cardimgurl() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void ModContact::set_has_cardimgurl() {
  _has_bits_[0] |= 0x00800000u;
}
inline void ModContact::clear_has_cardimgurl() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void ModContact::clear_cardimgurl() {
  cardimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cardimgurl();
}
inline const ::std::string& ModContact::cardimgurl() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.CardImgUrl)
  return cardimgurl_.GetNoArena();
}
inline void ModContact::set_cardimgurl(const ::std::string& value) {
  set_has_cardimgurl();
  cardimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModContact.CardImgUrl)
}
#if LANG_CXX11
inline void ModContact::set_cardimgurl(::std::string&& value) {
  set_has_cardimgurl();
  cardimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModContact.CardImgUrl)
}
#endif
inline void ModContact::set_cardimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cardimgurl();
  cardimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModContact.CardImgUrl)
}
inline void ModContact::set_cardimgurl(const char* value, size_t size) {
  set_has_cardimgurl();
  cardimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModContact.CardImgUrl)
}
inline ::std::string* ModContact::mutable_cardimgurl() {
  set_has_cardimgurl();
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.CardImgUrl)
  return cardimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModContact::release_cardimgurl() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.CardImgUrl)
  clear_has_cardimgurl();
  return cardimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModContact::set_allocated_cardimgurl(::std::string* cardimgurl) {
  if (cardimgurl != NULL) {
    set_has_cardimgurl();
  } else {
    clear_has_cardimgurl();
  }
  cardimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cardimgurl);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.CardImgUrl)
}

// optional string LabelIDList = 61;
inline bool ModContact::has_labelidlist() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void ModContact::set_has_labelidlist() {
  _has_bits_[0] |= 0x01000000u;
}
inline void ModContact::clear_has_labelidlist() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void ModContact::clear_labelidlist() {
  labelidlist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_labelidlist();
}
inline const ::std::string& ModContact::labelidlist() const {
  // @@protoc_insertion_point(field_get:micromsg.ModContact.LabelIDList)
  return labelidlist_.GetNoArena();
}
inline void ModContact::set_labelidlist(const ::std::string& value) {
  set_has_labelidlist();
  labelidlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.ModContact.LabelIDList)
}
#if LANG_CXX11
inline void ModContact::set_labelidlist(::std::string&& value) {
  set_has_labelidlist();
  labelidlist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.ModContact.LabelIDList)
}
#endif
inline void ModContact::set_labelidlist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_labelidlist();
  labelidlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.ModContact.LabelIDList)
}
inline void ModContact::set_labelidlist(const char* value, size_t size) {
  set_has_labelidlist();
  labelidlist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.ModContact.LabelIDList)
}
inline ::std::string* ModContact::mutable_labelidlist() {
  set_has_labelidlist();
  // @@protoc_insertion_point(field_mutable:micromsg.ModContact.LabelIDList)
  return labelidlist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModContact::release_labelidlist() {
  // @@protoc_insertion_point(field_release:micromsg.ModContact.LabelIDList)
  clear_has_labelidlist();
  return labelidlist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModContact::set_allocated_labelidlist(::std::string* labelidlist) {
  if (labelidlist != NULL) {
    set_has_labelidlist();
  } else {
    clear_has_labelidlist();
  }
  labelidlist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), labelidlist);
  // @@protoc_insertion_point(field_set_allocated:micromsg.ModContact.LabelIDList)
}

// -------------------------------------------------------------------

// HardDevice

// optional string DeviceType = 1;
inline bool HardDevice::has_devicetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HardDevice::set_has_devicetype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HardDevice::clear_has_devicetype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HardDevice::clear_devicetype() {
  devicetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_devicetype();
}
inline const ::std::string& HardDevice::devicetype() const {
  // @@protoc_insertion_point(field_get:micromsg.HardDevice.DeviceType)
  return devicetype_.GetNoArena();
}
inline void HardDevice::set_devicetype(const ::std::string& value) {
  set_has_devicetype();
  devicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.HardDevice.DeviceType)
}
#if LANG_CXX11
inline void HardDevice::set_devicetype(::std::string&& value) {
  set_has_devicetype();
  devicetype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.HardDevice.DeviceType)
}
#endif
inline void HardDevice::set_devicetype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_devicetype();
  devicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.HardDevice.DeviceType)
}
inline void HardDevice::set_devicetype(const char* value, size_t size) {
  set_has_devicetype();
  devicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.HardDevice.DeviceType)
}
inline ::std::string* HardDevice::mutable_devicetype() {
  set_has_devicetype();
  // @@protoc_insertion_point(field_mutable:micromsg.HardDevice.DeviceType)
  return devicetype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HardDevice::release_devicetype() {
  // @@protoc_insertion_point(field_release:micromsg.HardDevice.DeviceType)
  clear_has_devicetype();
  return devicetype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HardDevice::set_allocated_devicetype(::std::string* devicetype) {
  if (devicetype != NULL) {
    set_has_devicetype();
  } else {
    clear_has_devicetype();
  }
  devicetype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicetype);
  // @@protoc_insertion_point(field_set_allocated:micromsg.HardDevice.DeviceType)
}

// optional string DeviceID = 2;
inline bool HardDevice::has_deviceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HardDevice::set_has_deviceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HardDevice::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HardDevice::clear_deviceid() {
  deviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_deviceid();
}
inline const ::std::string& HardDevice::deviceid() const {
  // @@protoc_insertion_point(field_get:micromsg.HardDevice.DeviceID)
  return deviceid_.GetNoArena();
}
inline void HardDevice::set_deviceid(const ::std::string& value) {
  set_has_deviceid();
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.HardDevice.DeviceID)
}
#if LANG_CXX11
inline void HardDevice::set_deviceid(::std::string&& value) {
  set_has_deviceid();
  deviceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.HardDevice.DeviceID)
}
#endif
inline void HardDevice::set_deviceid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_deviceid();
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.HardDevice.DeviceID)
}
inline void HardDevice::set_deviceid(const char* value, size_t size) {
  set_has_deviceid();
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.HardDevice.DeviceID)
}
inline ::std::string* HardDevice::mutable_deviceid() {
  set_has_deviceid();
  // @@protoc_insertion_point(field_mutable:micromsg.HardDevice.DeviceID)
  return deviceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HardDevice::release_deviceid() {
  // @@protoc_insertion_point(field_release:micromsg.HardDevice.DeviceID)
  clear_has_deviceid();
  return deviceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HardDevice::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid != NULL) {
    set_has_deviceid();
  } else {
    clear_has_deviceid();
  }
  deviceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deviceid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.HardDevice.DeviceID)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace micromsg

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mmbase_2eproto__INCLUDED
