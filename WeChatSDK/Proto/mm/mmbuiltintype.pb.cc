// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mmbuiltintype.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mmbuiltintype.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace micromsg {
class BaseRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BaseRequest> {
} _BaseRequest_default_instance_;
class BaseResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BaseResponse> {
} _BaseResponse_default_instance_;
class SKBuiltinInt32_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SKBuiltinInt32_t> {
} _SKBuiltinInt32_t_default_instance_;
class SKBuiltinUint32_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SKBuiltinUint32_t> {
} _SKBuiltinUint32_t_default_instance_;
class SKBuiltinChar_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SKBuiltinChar_t> {
} _SKBuiltinChar_t_default_instance_;
class SKBuiltinUchar_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SKBuiltinUchar_t> {
} _SKBuiltinUchar_t_default_instance_;
class SKBuiltinInt8_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SKBuiltinInt8_t> {
} _SKBuiltinInt8_t_default_instance_;
class SKBuiltinUint8_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SKBuiltinUint8_t> {
} _SKBuiltinUint8_t_default_instance_;
class SKBuiltinInt16_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SKBuiltinInt16_t> {
} _SKBuiltinInt16_t_default_instance_;
class SKBuiltinUint16_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SKBuiltinUint16_t> {
} _SKBuiltinUint16_t_default_instance_;
class SKBuiltinInt64_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SKBuiltinInt64_t> {
} _SKBuiltinInt64_t_default_instance_;
class SKBuiltinUint64_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SKBuiltinUint64_t> {
} _SKBuiltinUint64_t_default_instance_;
class SKBuiltinFloat32_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SKBuiltinFloat32_t> {
} _SKBuiltinFloat32_t_default_instance_;
class SKBuiltinDouble64_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SKBuiltinDouble64_t> {
} _SKBuiltinDouble64_t_default_instance_;
class SKBuiltinBuffer_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SKBuiltinBuffer_t> {
} _SKBuiltinBuffer_t_default_instance_;
class SKBuiltinString_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SKBuiltinString_t> {
} _SKBuiltinString_t_default_instance_;

namespace protobuf_mmbuiltintype_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[16];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseRequest, sessionkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseRequest, uin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseRequest, deviceid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseRequest, clientversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseRequest, devicetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseRequest, scene_),
  0,
  3,
  1,
  4,
  2,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseResponse, ret_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseResponse, errmsg_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SKBuiltinInt32_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SKBuiltinInt32_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SKBuiltinInt32_t, ival_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SKBuiltinUint32_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SKBuiltinUint32_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SKBuiltinUint32_t, uival_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SKBuiltinChar_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SKBuiltinChar_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SKBuiltinChar_t, ival_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SKBuiltinUchar_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SKBuiltinUchar_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SKBuiltinUchar_t, uival_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SKBuiltinInt8_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SKBuiltinInt8_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SKBuiltinInt8_t, ival_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SKBuiltinUint8_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SKBuiltinUint8_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SKBuiltinUint8_t, uival_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SKBuiltinInt16_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SKBuiltinInt16_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SKBuiltinInt16_t, ival_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SKBuiltinUint16_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SKBuiltinUint16_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SKBuiltinUint16_t, uival_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SKBuiltinInt64_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SKBuiltinInt64_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SKBuiltinInt64_t, llval_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SKBuiltinUint64_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SKBuiltinUint64_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SKBuiltinUint64_t, ullval_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SKBuiltinFloat32_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SKBuiltinFloat32_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SKBuiltinFloat32_t, fval_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SKBuiltinDouble64_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SKBuiltinDouble64_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SKBuiltinDouble64_t, dval_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SKBuiltinBuffer_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SKBuiltinBuffer_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SKBuiltinBuffer_t, ilen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SKBuiltinBuffer_t, buffer_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SKBuiltinString_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SKBuiltinString_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SKBuiltinString_t, string_),
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 11, sizeof(BaseRequest)},
  { 17, 24, sizeof(BaseResponse)},
  { 26, 32, sizeof(SKBuiltinInt32_t)},
  { 33, 39, sizeof(SKBuiltinUint32_t)},
  { 40, 46, sizeof(SKBuiltinChar_t)},
  { 47, 53, sizeof(SKBuiltinUchar_t)},
  { 54, 60, sizeof(SKBuiltinInt8_t)},
  { 61, 67, sizeof(SKBuiltinUint8_t)},
  { 68, 74, sizeof(SKBuiltinInt16_t)},
  { 75, 81, sizeof(SKBuiltinUint16_t)},
  { 82, 88, sizeof(SKBuiltinInt64_t)},
  { 89, 95, sizeof(SKBuiltinUint64_t)},
  { 96, 102, sizeof(SKBuiltinFloat32_t)},
  { 103, 109, sizeof(SKBuiltinDouble64_t)},
  { 110, 117, sizeof(SKBuiltinBuffer_t)},
  { 119, 125, sizeof(SKBuiltinString_t)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_BaseRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BaseResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SKBuiltinInt32_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SKBuiltinUint32_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SKBuiltinChar_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SKBuiltinUchar_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SKBuiltinInt8_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SKBuiltinUint8_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SKBuiltinInt16_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SKBuiltinUint16_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SKBuiltinInt64_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SKBuiltinUint64_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SKBuiltinFloat32_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SKBuiltinDouble64_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SKBuiltinBuffer_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SKBuiltinString_t_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "mmbuiltintype.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 16);
}

}  // namespace

void TableStruct::Shutdown() {
  _BaseRequest_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _BaseResponse_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _SKBuiltinInt32_t_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _SKBuiltinUint32_t_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _SKBuiltinChar_t_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _SKBuiltinUchar_t_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _SKBuiltinInt8_t_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _SKBuiltinUint8_t_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _SKBuiltinInt16_t_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _SKBuiltinUint16_t_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _SKBuiltinInt64_t_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _SKBuiltinUint64_t_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _SKBuiltinFloat32_t_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _SKBuiltinDouble64_t_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _SKBuiltinBuffer_t_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _SKBuiltinString_t_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _BaseRequest_default_instance_.DefaultConstruct();
  _BaseResponse_default_instance_.DefaultConstruct();
  _SKBuiltinInt32_t_default_instance_.DefaultConstruct();
  _SKBuiltinUint32_t_default_instance_.DefaultConstruct();
  _SKBuiltinChar_t_default_instance_.DefaultConstruct();
  _SKBuiltinUchar_t_default_instance_.DefaultConstruct();
  _SKBuiltinInt8_t_default_instance_.DefaultConstruct();
  _SKBuiltinUint8_t_default_instance_.DefaultConstruct();
  _SKBuiltinInt16_t_default_instance_.DefaultConstruct();
  _SKBuiltinUint16_t_default_instance_.DefaultConstruct();
  _SKBuiltinInt64_t_default_instance_.DefaultConstruct();
  _SKBuiltinUint64_t_default_instance_.DefaultConstruct();
  _SKBuiltinFloat32_t_default_instance_.DefaultConstruct();
  _SKBuiltinDouble64_t_default_instance_.DefaultConstruct();
  _SKBuiltinBuffer_t_default_instance_.DefaultConstruct();
  _SKBuiltinString_t_default_instance_.DefaultConstruct();
  _BaseResponse_default_instance_.get_mutable()->errmsg_ = const_cast< ::micromsg::SKBuiltinString_t*>(
      ::micromsg::SKBuiltinString_t::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\023mmbuiltintype.proto\022\010micromsg\"z\n\013BaseR"
      "equest\022\022\n\nSessionKey\030\001 \002(\014\022\013\n\003Uin\030\002 \002(\r\022"
      "\020\n\010DeviceID\030\003 \002(\014\022\025\n\rClientVersion\030\004 \002(\005"
      "\022\022\n\nDeviceType\030\005 \002(\014\022\r\n\005Scene\030\006 \001(\r\"H\n\014B"
      "aseResponse\022\013\n\003Ret\030\001 \002(\005\022+\n\006ErrMsg\030\002 \002(\013"
      "2\033.micromsg.SKBuiltinString_t\" \n\020SKBuilt"
      "inInt32_t\022\014\n\004iVal\030\001 \002(\r\"\"\n\021SKBuiltinUint"
      "32_t\022\r\n\005uiVal\030\001 \002(\r\"\037\n\017SKBuiltinChar_t\022\014"
      "\n\004iVal\030\001 \002(\005\"!\n\020SKBuiltinUchar_t\022\r\n\005uiVa"
      "l\030\001 \002(\r\"\037\n\017SKBuiltinInt8_t\022\014\n\004iVal\030\001 \002(\005"
      "\"!\n\020SKBuiltinUint8_t\022\r\n\005uiVal\030\001 \002(\r\" \n\020S"
      "KBuiltinInt16_t\022\014\n\004iVal\030\001 \002(\005\"\"\n\021SKBuilt"
      "inUint16_t\022\r\n\005uiVal\030\001 \002(\r\"!\n\020SKBuiltinIn"
      "t64_t\022\r\n\005llVal\030\001 \002(\003\"#\n\021SKBuiltinUint64_"
      "t\022\016\n\006ullVal\030\001 \002(\004\"\"\n\022SKBuiltinFloat32_t\022"
      "\014\n\004fVal\030\001 \002(\002\"#\n\023SKBuiltinDouble64_t\022\014\n\004"
      "dVal\030\001 \002(\001\"1\n\021SKBuiltinBuffer_t\022\014\n\004iLen\030"
      "\001 \002(\r\022\016\n\006Buffer\030\002 \001(\014\"#\n\021SKBuiltinString"
      "_t\022\016\n\006String\030\001 \001(\t"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 738);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mmbuiltintype.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_mmbuiltintype_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BaseRequest::kSessionKeyFieldNumber;
const int BaseRequest::kUinFieldNumber;
const int BaseRequest::kDeviceIDFieldNumber;
const int BaseRequest::kClientVersionFieldNumber;
const int BaseRequest::kDeviceTypeFieldNumber;
const int BaseRequest::kSceneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BaseRequest::BaseRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbuiltintype_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BaseRequest)
}
BaseRequest::BaseRequest(const BaseRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sessionkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sessionkey()) {
    sessionkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionkey_);
  }
  deviceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_deviceid()) {
    deviceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deviceid_);
  }
  devicetype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_devicetype()) {
    devicetype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicetype_);
  }
  ::memcpy(&uin_, &from.uin_,
    reinterpret_cast<char*>(&scene_) -
    reinterpret_cast<char*>(&uin_) + sizeof(scene_));
  // @@protoc_insertion_point(copy_constructor:micromsg.BaseRequest)
}

void BaseRequest::SharedCtor() {
  _cached_size_ = 0;
  sessionkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deviceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicetype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&uin_, 0, reinterpret_cast<char*>(&scene_) -
    reinterpret_cast<char*>(&uin_) + sizeof(scene_));
}

BaseRequest::~BaseRequest() {
  // @@protoc_insertion_point(destructor:micromsg.BaseRequest)
  SharedDtor();
}

void BaseRequest::SharedDtor() {
  sessionkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deviceid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicetype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BaseRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BaseRequest::descriptor() {
  protobuf_mmbuiltintype_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbuiltintype_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BaseRequest& BaseRequest::default_instance() {
  protobuf_mmbuiltintype_2eproto::InitDefaults();
  return *internal_default_instance();
}

BaseRequest* BaseRequest::New(::google::protobuf::Arena* arena) const {
  BaseRequest* n = new BaseRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BaseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BaseRequest)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_sessionkey()) {
      GOOGLE_DCHECK(!sessionkey_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sessionkey_.UnsafeRawStringPointer())->clear();
    }
    if (has_deviceid()) {
      GOOGLE_DCHECK(!deviceid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*deviceid_.UnsafeRawStringPointer())->clear();
    }
    if (has_devicetype()) {
      GOOGLE_DCHECK(!devicetype_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*devicetype_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 56u) {
    ::memset(&uin_, 0, reinterpret_cast<char*>(&scene_) -
      reinterpret_cast<char*>(&uin_) + sizeof(scene_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BaseRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BaseRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes SessionKey = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sessionkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Uin = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_uin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes DeviceID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_deviceid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 ClientVersion = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_clientversion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clientversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes DeviceType = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_devicetype()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 Scene = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_scene();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BaseRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BaseRequest)
  return false;
#undef DO_
}

void BaseRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BaseRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes SessionKey = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->sessionkey(), output);
  }

  // required uint32 Uin = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uin(), output);
  }

  // required bytes DeviceID = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->deviceid(), output);
  }

  // required int32 ClientVersion = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->clientversion(), output);
  }

  // required bytes DeviceType = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->devicetype(), output);
  }

  // optional uint32 Scene = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->scene(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BaseRequest)
}

::google::protobuf::uint8* BaseRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BaseRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes SessionKey = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->sessionkey(), target);
  }

  // required uint32 Uin = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uin(), target);
  }

  // required bytes DeviceID = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->deviceid(), target);
  }

  // required int32 ClientVersion = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->clientversion(), target);
  }

  // required bytes DeviceType = 5;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->devicetype(), target);
  }

  // optional uint32 Scene = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->scene(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BaseRequest)
  return target;
}

size_t BaseRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.BaseRequest)
  size_t total_size = 0;

  if (has_sessionkey()) {
    // required bytes SessionKey = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->sessionkey());
  }

  if (has_deviceid()) {
    // required bytes DeviceID = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->deviceid());
  }

  if (has_devicetype()) {
    // required bytes DeviceType = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->devicetype());
  }

  if (has_uin()) {
    // required uint32 Uin = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uin());
  }

  if (has_clientversion()) {
    // required int32 ClientVersion = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->clientversion());
  }

  return total_size;
}
size_t BaseRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BaseRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required bytes SessionKey = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->sessionkey());

    // required bytes DeviceID = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->deviceid());

    // required bytes DeviceType = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->devicetype());

    // required uint32 Uin = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uin());

    // required int32 ClientVersion = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->clientversion());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional uint32 Scene = 6;
  if (has_scene()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BaseRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BaseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BaseRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BaseRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BaseRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BaseRequest)
    MergeFrom(*source);
  }
}

void BaseRequest::MergeFrom(const BaseRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BaseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sessionkey();
      sessionkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionkey_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_deviceid();
      deviceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deviceid_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_devicetype();
      devicetype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicetype_);
    }
    if (cached_has_bits & 0x00000008u) {
      uin_ = from.uin_;
    }
    if (cached_has_bits & 0x00000010u) {
      clientversion_ = from.clientversion_;
    }
    if (cached_has_bits & 0x00000020u) {
      scene_ = from.scene_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BaseRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BaseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseRequest::CopyFrom(const BaseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BaseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void BaseRequest::Swap(BaseRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BaseRequest::InternalSwap(BaseRequest* other) {
  sessionkey_.Swap(&other->sessionkey_);
  deviceid_.Swap(&other->deviceid_);
  devicetype_.Swap(&other->devicetype_);
  std::swap(uin_, other->uin_);
  std::swap(clientversion_, other->clientversion_);
  std::swap(scene_, other->scene_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BaseRequest::GetMetadata() const {
  protobuf_mmbuiltintype_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbuiltintype_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BaseRequest

// required bytes SessionKey = 1;
bool BaseRequest::has_sessionkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BaseRequest::set_has_sessionkey() {
  _has_bits_[0] |= 0x00000001u;
}
void BaseRequest::clear_has_sessionkey() {
  _has_bits_[0] &= ~0x00000001u;
}
void BaseRequest::clear_sessionkey() {
  sessionkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sessionkey();
}
const ::std::string& BaseRequest::sessionkey() const {
  // @@protoc_insertion_point(field_get:micromsg.BaseRequest.SessionKey)
  return sessionkey_.GetNoArena();
}
void BaseRequest::set_sessionkey(const ::std::string& value) {
  set_has_sessionkey();
  sessionkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BaseRequest.SessionKey)
}
#if LANG_CXX11
void BaseRequest::set_sessionkey(::std::string&& value) {
  set_has_sessionkey();
  sessionkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BaseRequest.SessionKey)
}
#endif
void BaseRequest::set_sessionkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sessionkey();
  sessionkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BaseRequest.SessionKey)
}
void BaseRequest::set_sessionkey(const void* value, size_t size) {
  set_has_sessionkey();
  sessionkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BaseRequest.SessionKey)
}
::std::string* BaseRequest::mutable_sessionkey() {
  set_has_sessionkey();
  // @@protoc_insertion_point(field_mutable:micromsg.BaseRequest.SessionKey)
  return sessionkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BaseRequest::release_sessionkey() {
  // @@protoc_insertion_point(field_release:micromsg.BaseRequest.SessionKey)
  clear_has_sessionkey();
  return sessionkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BaseRequest::set_allocated_sessionkey(::std::string* sessionkey) {
  if (sessionkey != NULL) {
    set_has_sessionkey();
  } else {
    clear_has_sessionkey();
  }
  sessionkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionkey);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BaseRequest.SessionKey)
}

// required uint32 Uin = 2;
bool BaseRequest::has_uin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BaseRequest::set_has_uin() {
  _has_bits_[0] |= 0x00000008u;
}
void BaseRequest::clear_has_uin() {
  _has_bits_[0] &= ~0x00000008u;
}
void BaseRequest::clear_uin() {
  uin_ = 0u;
  clear_has_uin();
}
::google::protobuf::uint32 BaseRequest::uin() const {
  // @@protoc_insertion_point(field_get:micromsg.BaseRequest.Uin)
  return uin_;
}
void BaseRequest::set_uin(::google::protobuf::uint32 value) {
  set_has_uin();
  uin_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BaseRequest.Uin)
}

// required bytes DeviceID = 3;
bool BaseRequest::has_deviceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BaseRequest::set_has_deviceid() {
  _has_bits_[0] |= 0x00000002u;
}
void BaseRequest::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000002u;
}
void BaseRequest::clear_deviceid() {
  deviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_deviceid();
}
const ::std::string& BaseRequest::deviceid() const {
  // @@protoc_insertion_point(field_get:micromsg.BaseRequest.DeviceID)
  return deviceid_.GetNoArena();
}
void BaseRequest::set_deviceid(const ::std::string& value) {
  set_has_deviceid();
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BaseRequest.DeviceID)
}
#if LANG_CXX11
void BaseRequest::set_deviceid(::std::string&& value) {
  set_has_deviceid();
  deviceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BaseRequest.DeviceID)
}
#endif
void BaseRequest::set_deviceid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_deviceid();
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BaseRequest.DeviceID)
}
void BaseRequest::set_deviceid(const void* value, size_t size) {
  set_has_deviceid();
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BaseRequest.DeviceID)
}
::std::string* BaseRequest::mutable_deviceid() {
  set_has_deviceid();
  // @@protoc_insertion_point(field_mutable:micromsg.BaseRequest.DeviceID)
  return deviceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BaseRequest::release_deviceid() {
  // @@protoc_insertion_point(field_release:micromsg.BaseRequest.DeviceID)
  clear_has_deviceid();
  return deviceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BaseRequest::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid != NULL) {
    set_has_deviceid();
  } else {
    clear_has_deviceid();
  }
  deviceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deviceid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BaseRequest.DeviceID)
}

// required int32 ClientVersion = 4;
bool BaseRequest::has_clientversion() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BaseRequest::set_has_clientversion() {
  _has_bits_[0] |= 0x00000010u;
}
void BaseRequest::clear_has_clientversion() {
  _has_bits_[0] &= ~0x00000010u;
}
void BaseRequest::clear_clientversion() {
  clientversion_ = 0;
  clear_has_clientversion();
}
::google::protobuf::int32 BaseRequest::clientversion() const {
  // @@protoc_insertion_point(field_get:micromsg.BaseRequest.ClientVersion)
  return clientversion_;
}
void BaseRequest::set_clientversion(::google::protobuf::int32 value) {
  set_has_clientversion();
  clientversion_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BaseRequest.ClientVersion)
}

// required bytes DeviceType = 5;
bool BaseRequest::has_devicetype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BaseRequest::set_has_devicetype() {
  _has_bits_[0] |= 0x00000004u;
}
void BaseRequest::clear_has_devicetype() {
  _has_bits_[0] &= ~0x00000004u;
}
void BaseRequest::clear_devicetype() {
  devicetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_devicetype();
}
const ::std::string& BaseRequest::devicetype() const {
  // @@protoc_insertion_point(field_get:micromsg.BaseRequest.DeviceType)
  return devicetype_.GetNoArena();
}
void BaseRequest::set_devicetype(const ::std::string& value) {
  set_has_devicetype();
  devicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BaseRequest.DeviceType)
}
#if LANG_CXX11
void BaseRequest::set_devicetype(::std::string&& value) {
  set_has_devicetype();
  devicetype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BaseRequest.DeviceType)
}
#endif
void BaseRequest::set_devicetype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_devicetype();
  devicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BaseRequest.DeviceType)
}
void BaseRequest::set_devicetype(const void* value, size_t size) {
  set_has_devicetype();
  devicetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BaseRequest.DeviceType)
}
::std::string* BaseRequest::mutable_devicetype() {
  set_has_devicetype();
  // @@protoc_insertion_point(field_mutable:micromsg.BaseRequest.DeviceType)
  return devicetype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BaseRequest::release_devicetype() {
  // @@protoc_insertion_point(field_release:micromsg.BaseRequest.DeviceType)
  clear_has_devicetype();
  return devicetype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BaseRequest::set_allocated_devicetype(::std::string* devicetype) {
  if (devicetype != NULL) {
    set_has_devicetype();
  } else {
    clear_has_devicetype();
  }
  devicetype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicetype);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BaseRequest.DeviceType)
}

// optional uint32 Scene = 6;
bool BaseRequest::has_scene() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BaseRequest::set_has_scene() {
  _has_bits_[0] |= 0x00000020u;
}
void BaseRequest::clear_has_scene() {
  _has_bits_[0] &= ~0x00000020u;
}
void BaseRequest::clear_scene() {
  scene_ = 0u;
  clear_has_scene();
}
::google::protobuf::uint32 BaseRequest::scene() const {
  // @@protoc_insertion_point(field_get:micromsg.BaseRequest.Scene)
  return scene_;
}
void BaseRequest::set_scene(::google::protobuf::uint32 value) {
  set_has_scene();
  scene_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BaseRequest.Scene)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BaseResponse::kRetFieldNumber;
const int BaseResponse::kErrMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BaseResponse::BaseResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbuiltintype_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BaseResponse)
}
BaseResponse::BaseResponse(const BaseResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_errmsg()) {
    errmsg_ = new ::micromsg::SKBuiltinString_t(*from.errmsg_);
  } else {
    errmsg_ = NULL;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:micromsg.BaseResponse)
}

void BaseResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&errmsg_, 0, reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&errmsg_) + sizeof(ret_));
}

BaseResponse::~BaseResponse() {
  // @@protoc_insertion_point(destructor:micromsg.BaseResponse)
  SharedDtor();
}

void BaseResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete errmsg_;
  }
}

void BaseResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BaseResponse::descriptor() {
  protobuf_mmbuiltintype_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbuiltintype_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BaseResponse& BaseResponse::default_instance() {
  protobuf_mmbuiltintype_2eproto::InitDefaults();
  return *internal_default_instance();
}

BaseResponse* BaseResponse::New(::google::protobuf::Arena* arena) const {
  BaseResponse* n = new BaseResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BaseResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BaseResponse)
  if (has_errmsg()) {
    GOOGLE_DCHECK(errmsg_ != NULL);
    errmsg_->::micromsg::SKBuiltinString_t::Clear();
  }
  ret_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BaseResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BaseResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Ret = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_ret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinString_t ErrMsg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_errmsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BaseResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BaseResponse)
  return false;
#undef DO_
}

void BaseResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BaseResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 Ret = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // required .micromsg.SKBuiltinString_t ErrMsg = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->errmsg_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BaseResponse)
}

::google::protobuf::uint8* BaseResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BaseResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 Ret = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // required .micromsg.SKBuiltinString_t ErrMsg = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->errmsg_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BaseResponse)
  return target;
}

size_t BaseResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.BaseResponse)
  size_t total_size = 0;

  if (has_errmsg()) {
    // required .micromsg.SKBuiltinString_t ErrMsg = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->errmsg_);
  }

  if (has_ret()) {
    // required int32 Ret = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());
  }

  return total_size;
}
size_t BaseResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BaseResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .micromsg.SKBuiltinString_t ErrMsg = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->errmsg_);

    // required int32 Ret = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BaseResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BaseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BaseResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BaseResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BaseResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BaseResponse)
    MergeFrom(*source);
  }
}

void BaseResponse::MergeFrom(const BaseResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BaseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_errmsg()->::micromsg::SKBuiltinString_t::MergeFrom(from.errmsg());
    }
    if (cached_has_bits & 0x00000002u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BaseResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BaseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseResponse::CopyFrom(const BaseResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BaseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void BaseResponse::Swap(BaseResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BaseResponse::InternalSwap(BaseResponse* other) {
  std::swap(errmsg_, other->errmsg_);
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BaseResponse::GetMetadata() const {
  protobuf_mmbuiltintype_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbuiltintype_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BaseResponse

// required int32 Ret = 1;
bool BaseResponse::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BaseResponse::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
void BaseResponse::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
void BaseResponse::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
::google::protobuf::int32 BaseResponse::ret() const {
  // @@protoc_insertion_point(field_get:micromsg.BaseResponse.Ret)
  return ret_;
}
void BaseResponse::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:micromsg.BaseResponse.Ret)
}

// required .micromsg.SKBuiltinString_t ErrMsg = 2;
bool BaseResponse::has_errmsg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BaseResponse::set_has_errmsg() {
  _has_bits_[0] |= 0x00000001u;
}
void BaseResponse::clear_has_errmsg() {
  _has_bits_[0] &= ~0x00000001u;
}
void BaseResponse::clear_errmsg() {
  if (errmsg_ != NULL) errmsg_->::micromsg::SKBuiltinString_t::Clear();
  clear_has_errmsg();
}
const ::micromsg::SKBuiltinString_t& BaseResponse::errmsg() const {
  // @@protoc_insertion_point(field_get:micromsg.BaseResponse.ErrMsg)
  return errmsg_ != NULL ? *errmsg_
                         : *::micromsg::SKBuiltinString_t::internal_default_instance();
}
::micromsg::SKBuiltinString_t* BaseResponse::mutable_errmsg() {
  set_has_errmsg();
  if (errmsg_ == NULL) {
    errmsg_ = new ::micromsg::SKBuiltinString_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BaseResponse.ErrMsg)
  return errmsg_;
}
::micromsg::SKBuiltinString_t* BaseResponse::release_errmsg() {
  // @@protoc_insertion_point(field_release:micromsg.BaseResponse.ErrMsg)
  clear_has_errmsg();
  ::micromsg::SKBuiltinString_t* temp = errmsg_;
  errmsg_ = NULL;
  return temp;
}
void BaseResponse::set_allocated_errmsg(::micromsg::SKBuiltinString_t* errmsg) {
  delete errmsg_;
  errmsg_ = errmsg;
  if (errmsg) {
    set_has_errmsg();
  } else {
    clear_has_errmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BaseResponse.ErrMsg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SKBuiltinInt32_t::kIValFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SKBuiltinInt32_t::SKBuiltinInt32_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbuiltintype_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SKBuiltinInt32_t)
}
SKBuiltinInt32_t::SKBuiltinInt32_t(const SKBuiltinInt32_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ival_ = from.ival_;
  // @@protoc_insertion_point(copy_constructor:micromsg.SKBuiltinInt32_t)
}

void SKBuiltinInt32_t::SharedCtor() {
  _cached_size_ = 0;
  ival_ = 0u;
}

SKBuiltinInt32_t::~SKBuiltinInt32_t() {
  // @@protoc_insertion_point(destructor:micromsg.SKBuiltinInt32_t)
  SharedDtor();
}

void SKBuiltinInt32_t::SharedDtor() {
}

void SKBuiltinInt32_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SKBuiltinInt32_t::descriptor() {
  protobuf_mmbuiltintype_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbuiltintype_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SKBuiltinInt32_t& SKBuiltinInt32_t::default_instance() {
  protobuf_mmbuiltintype_2eproto::InitDefaults();
  return *internal_default_instance();
}

SKBuiltinInt32_t* SKBuiltinInt32_t::New(::google::protobuf::Arena* arena) const {
  SKBuiltinInt32_t* n = new SKBuiltinInt32_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SKBuiltinInt32_t::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SKBuiltinInt32_t)
  ival_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SKBuiltinInt32_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SKBuiltinInt32_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 iVal = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_ival();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ival_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SKBuiltinInt32_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SKBuiltinInt32_t)
  return false;
#undef DO_
}

void SKBuiltinInt32_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SKBuiltinInt32_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 iVal = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ival(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SKBuiltinInt32_t)
}

::google::protobuf::uint8* SKBuiltinInt32_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SKBuiltinInt32_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 iVal = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ival(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SKBuiltinInt32_t)
  return target;
}

size_t SKBuiltinInt32_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SKBuiltinInt32_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 iVal = 1;
  if (has_ival()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ival());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SKBuiltinInt32_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SKBuiltinInt32_t)
  GOOGLE_DCHECK_NE(&from, this);
  const SKBuiltinInt32_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SKBuiltinInt32_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SKBuiltinInt32_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SKBuiltinInt32_t)
    MergeFrom(*source);
  }
}

void SKBuiltinInt32_t::MergeFrom(const SKBuiltinInt32_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SKBuiltinInt32_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ival()) {
    set_ival(from.ival());
  }
}

void SKBuiltinInt32_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SKBuiltinInt32_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SKBuiltinInt32_t::CopyFrom(const SKBuiltinInt32_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SKBuiltinInt32_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SKBuiltinInt32_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void SKBuiltinInt32_t::Swap(SKBuiltinInt32_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SKBuiltinInt32_t::InternalSwap(SKBuiltinInt32_t* other) {
  std::swap(ival_, other->ival_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SKBuiltinInt32_t::GetMetadata() const {
  protobuf_mmbuiltintype_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbuiltintype_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SKBuiltinInt32_t

// required uint32 iVal = 1;
bool SKBuiltinInt32_t::has_ival() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SKBuiltinInt32_t::set_has_ival() {
  _has_bits_[0] |= 0x00000001u;
}
void SKBuiltinInt32_t::clear_has_ival() {
  _has_bits_[0] &= ~0x00000001u;
}
void SKBuiltinInt32_t::clear_ival() {
  ival_ = 0u;
  clear_has_ival();
}
::google::protobuf::uint32 SKBuiltinInt32_t::ival() const {
  // @@protoc_insertion_point(field_get:micromsg.SKBuiltinInt32_t.iVal)
  return ival_;
}
void SKBuiltinInt32_t::set_ival(::google::protobuf::uint32 value) {
  set_has_ival();
  ival_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SKBuiltinInt32_t.iVal)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SKBuiltinUint32_t::kUiValFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SKBuiltinUint32_t::SKBuiltinUint32_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbuiltintype_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SKBuiltinUint32_t)
}
SKBuiltinUint32_t::SKBuiltinUint32_t(const SKBuiltinUint32_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uival_ = from.uival_;
  // @@protoc_insertion_point(copy_constructor:micromsg.SKBuiltinUint32_t)
}

void SKBuiltinUint32_t::SharedCtor() {
  _cached_size_ = 0;
  uival_ = 0u;
}

SKBuiltinUint32_t::~SKBuiltinUint32_t() {
  // @@protoc_insertion_point(destructor:micromsg.SKBuiltinUint32_t)
  SharedDtor();
}

void SKBuiltinUint32_t::SharedDtor() {
}

void SKBuiltinUint32_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SKBuiltinUint32_t::descriptor() {
  protobuf_mmbuiltintype_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbuiltintype_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SKBuiltinUint32_t& SKBuiltinUint32_t::default_instance() {
  protobuf_mmbuiltintype_2eproto::InitDefaults();
  return *internal_default_instance();
}

SKBuiltinUint32_t* SKBuiltinUint32_t::New(::google::protobuf::Arena* arena) const {
  SKBuiltinUint32_t* n = new SKBuiltinUint32_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SKBuiltinUint32_t::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SKBuiltinUint32_t)
  uival_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SKBuiltinUint32_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SKBuiltinUint32_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uiVal = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_uival();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uival_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SKBuiltinUint32_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SKBuiltinUint32_t)
  return false;
#undef DO_
}

void SKBuiltinUint32_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SKBuiltinUint32_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 uiVal = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uival(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SKBuiltinUint32_t)
}

::google::protobuf::uint8* SKBuiltinUint32_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SKBuiltinUint32_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 uiVal = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uival(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SKBuiltinUint32_t)
  return target;
}

size_t SKBuiltinUint32_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SKBuiltinUint32_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 uiVal = 1;
  if (has_uival()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uival());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SKBuiltinUint32_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SKBuiltinUint32_t)
  GOOGLE_DCHECK_NE(&from, this);
  const SKBuiltinUint32_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SKBuiltinUint32_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SKBuiltinUint32_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SKBuiltinUint32_t)
    MergeFrom(*source);
  }
}

void SKBuiltinUint32_t::MergeFrom(const SKBuiltinUint32_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SKBuiltinUint32_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_uival()) {
    set_uival(from.uival());
  }
}

void SKBuiltinUint32_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SKBuiltinUint32_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SKBuiltinUint32_t::CopyFrom(const SKBuiltinUint32_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SKBuiltinUint32_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SKBuiltinUint32_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void SKBuiltinUint32_t::Swap(SKBuiltinUint32_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SKBuiltinUint32_t::InternalSwap(SKBuiltinUint32_t* other) {
  std::swap(uival_, other->uival_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SKBuiltinUint32_t::GetMetadata() const {
  protobuf_mmbuiltintype_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbuiltintype_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SKBuiltinUint32_t

// required uint32 uiVal = 1;
bool SKBuiltinUint32_t::has_uival() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SKBuiltinUint32_t::set_has_uival() {
  _has_bits_[0] |= 0x00000001u;
}
void SKBuiltinUint32_t::clear_has_uival() {
  _has_bits_[0] &= ~0x00000001u;
}
void SKBuiltinUint32_t::clear_uival() {
  uival_ = 0u;
  clear_has_uival();
}
::google::protobuf::uint32 SKBuiltinUint32_t::uival() const {
  // @@protoc_insertion_point(field_get:micromsg.SKBuiltinUint32_t.uiVal)
  return uival_;
}
void SKBuiltinUint32_t::set_uival(::google::protobuf::uint32 value) {
  set_has_uival();
  uival_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SKBuiltinUint32_t.uiVal)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SKBuiltinChar_t::kIValFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SKBuiltinChar_t::SKBuiltinChar_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbuiltintype_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SKBuiltinChar_t)
}
SKBuiltinChar_t::SKBuiltinChar_t(const SKBuiltinChar_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ival_ = from.ival_;
  // @@protoc_insertion_point(copy_constructor:micromsg.SKBuiltinChar_t)
}

void SKBuiltinChar_t::SharedCtor() {
  _cached_size_ = 0;
  ival_ = 0;
}

SKBuiltinChar_t::~SKBuiltinChar_t() {
  // @@protoc_insertion_point(destructor:micromsg.SKBuiltinChar_t)
  SharedDtor();
}

void SKBuiltinChar_t::SharedDtor() {
}

void SKBuiltinChar_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SKBuiltinChar_t::descriptor() {
  protobuf_mmbuiltintype_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbuiltintype_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SKBuiltinChar_t& SKBuiltinChar_t::default_instance() {
  protobuf_mmbuiltintype_2eproto::InitDefaults();
  return *internal_default_instance();
}

SKBuiltinChar_t* SKBuiltinChar_t::New(::google::protobuf::Arena* arena) const {
  SKBuiltinChar_t* n = new SKBuiltinChar_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SKBuiltinChar_t::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SKBuiltinChar_t)
  ival_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SKBuiltinChar_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SKBuiltinChar_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 iVal = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_ival();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ival_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SKBuiltinChar_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SKBuiltinChar_t)
  return false;
#undef DO_
}

void SKBuiltinChar_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SKBuiltinChar_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 iVal = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ival(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SKBuiltinChar_t)
}

::google::protobuf::uint8* SKBuiltinChar_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SKBuiltinChar_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 iVal = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ival(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SKBuiltinChar_t)
  return target;
}

size_t SKBuiltinChar_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SKBuiltinChar_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required int32 iVal = 1;
  if (has_ival()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ival());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SKBuiltinChar_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SKBuiltinChar_t)
  GOOGLE_DCHECK_NE(&from, this);
  const SKBuiltinChar_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SKBuiltinChar_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SKBuiltinChar_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SKBuiltinChar_t)
    MergeFrom(*source);
  }
}

void SKBuiltinChar_t::MergeFrom(const SKBuiltinChar_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SKBuiltinChar_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ival()) {
    set_ival(from.ival());
  }
}

void SKBuiltinChar_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SKBuiltinChar_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SKBuiltinChar_t::CopyFrom(const SKBuiltinChar_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SKBuiltinChar_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SKBuiltinChar_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void SKBuiltinChar_t::Swap(SKBuiltinChar_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SKBuiltinChar_t::InternalSwap(SKBuiltinChar_t* other) {
  std::swap(ival_, other->ival_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SKBuiltinChar_t::GetMetadata() const {
  protobuf_mmbuiltintype_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbuiltintype_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SKBuiltinChar_t

// required int32 iVal = 1;
bool SKBuiltinChar_t::has_ival() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SKBuiltinChar_t::set_has_ival() {
  _has_bits_[0] |= 0x00000001u;
}
void SKBuiltinChar_t::clear_has_ival() {
  _has_bits_[0] &= ~0x00000001u;
}
void SKBuiltinChar_t::clear_ival() {
  ival_ = 0;
  clear_has_ival();
}
::google::protobuf::int32 SKBuiltinChar_t::ival() const {
  // @@protoc_insertion_point(field_get:micromsg.SKBuiltinChar_t.iVal)
  return ival_;
}
void SKBuiltinChar_t::set_ival(::google::protobuf::int32 value) {
  set_has_ival();
  ival_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SKBuiltinChar_t.iVal)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SKBuiltinUchar_t::kUiValFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SKBuiltinUchar_t::SKBuiltinUchar_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbuiltintype_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SKBuiltinUchar_t)
}
SKBuiltinUchar_t::SKBuiltinUchar_t(const SKBuiltinUchar_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uival_ = from.uival_;
  // @@protoc_insertion_point(copy_constructor:micromsg.SKBuiltinUchar_t)
}

void SKBuiltinUchar_t::SharedCtor() {
  _cached_size_ = 0;
  uival_ = 0u;
}

SKBuiltinUchar_t::~SKBuiltinUchar_t() {
  // @@protoc_insertion_point(destructor:micromsg.SKBuiltinUchar_t)
  SharedDtor();
}

void SKBuiltinUchar_t::SharedDtor() {
}

void SKBuiltinUchar_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SKBuiltinUchar_t::descriptor() {
  protobuf_mmbuiltintype_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbuiltintype_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SKBuiltinUchar_t& SKBuiltinUchar_t::default_instance() {
  protobuf_mmbuiltintype_2eproto::InitDefaults();
  return *internal_default_instance();
}

SKBuiltinUchar_t* SKBuiltinUchar_t::New(::google::protobuf::Arena* arena) const {
  SKBuiltinUchar_t* n = new SKBuiltinUchar_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SKBuiltinUchar_t::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SKBuiltinUchar_t)
  uival_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SKBuiltinUchar_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SKBuiltinUchar_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uiVal = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_uival();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uival_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SKBuiltinUchar_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SKBuiltinUchar_t)
  return false;
#undef DO_
}

void SKBuiltinUchar_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SKBuiltinUchar_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 uiVal = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uival(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SKBuiltinUchar_t)
}

::google::protobuf::uint8* SKBuiltinUchar_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SKBuiltinUchar_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 uiVal = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uival(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SKBuiltinUchar_t)
  return target;
}

size_t SKBuiltinUchar_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SKBuiltinUchar_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 uiVal = 1;
  if (has_uival()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uival());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SKBuiltinUchar_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SKBuiltinUchar_t)
  GOOGLE_DCHECK_NE(&from, this);
  const SKBuiltinUchar_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SKBuiltinUchar_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SKBuiltinUchar_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SKBuiltinUchar_t)
    MergeFrom(*source);
  }
}

void SKBuiltinUchar_t::MergeFrom(const SKBuiltinUchar_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SKBuiltinUchar_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_uival()) {
    set_uival(from.uival());
  }
}

void SKBuiltinUchar_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SKBuiltinUchar_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SKBuiltinUchar_t::CopyFrom(const SKBuiltinUchar_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SKBuiltinUchar_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SKBuiltinUchar_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void SKBuiltinUchar_t::Swap(SKBuiltinUchar_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SKBuiltinUchar_t::InternalSwap(SKBuiltinUchar_t* other) {
  std::swap(uival_, other->uival_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SKBuiltinUchar_t::GetMetadata() const {
  protobuf_mmbuiltintype_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbuiltintype_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SKBuiltinUchar_t

// required uint32 uiVal = 1;
bool SKBuiltinUchar_t::has_uival() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SKBuiltinUchar_t::set_has_uival() {
  _has_bits_[0] |= 0x00000001u;
}
void SKBuiltinUchar_t::clear_has_uival() {
  _has_bits_[0] &= ~0x00000001u;
}
void SKBuiltinUchar_t::clear_uival() {
  uival_ = 0u;
  clear_has_uival();
}
::google::protobuf::uint32 SKBuiltinUchar_t::uival() const {
  // @@protoc_insertion_point(field_get:micromsg.SKBuiltinUchar_t.uiVal)
  return uival_;
}
void SKBuiltinUchar_t::set_uival(::google::protobuf::uint32 value) {
  set_has_uival();
  uival_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SKBuiltinUchar_t.uiVal)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SKBuiltinInt8_t::kIValFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SKBuiltinInt8_t::SKBuiltinInt8_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbuiltintype_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SKBuiltinInt8_t)
}
SKBuiltinInt8_t::SKBuiltinInt8_t(const SKBuiltinInt8_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ival_ = from.ival_;
  // @@protoc_insertion_point(copy_constructor:micromsg.SKBuiltinInt8_t)
}

void SKBuiltinInt8_t::SharedCtor() {
  _cached_size_ = 0;
  ival_ = 0;
}

SKBuiltinInt8_t::~SKBuiltinInt8_t() {
  // @@protoc_insertion_point(destructor:micromsg.SKBuiltinInt8_t)
  SharedDtor();
}

void SKBuiltinInt8_t::SharedDtor() {
}

void SKBuiltinInt8_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SKBuiltinInt8_t::descriptor() {
  protobuf_mmbuiltintype_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbuiltintype_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SKBuiltinInt8_t& SKBuiltinInt8_t::default_instance() {
  protobuf_mmbuiltintype_2eproto::InitDefaults();
  return *internal_default_instance();
}

SKBuiltinInt8_t* SKBuiltinInt8_t::New(::google::protobuf::Arena* arena) const {
  SKBuiltinInt8_t* n = new SKBuiltinInt8_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SKBuiltinInt8_t::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SKBuiltinInt8_t)
  ival_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SKBuiltinInt8_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SKBuiltinInt8_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 iVal = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_ival();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ival_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SKBuiltinInt8_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SKBuiltinInt8_t)
  return false;
#undef DO_
}

void SKBuiltinInt8_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SKBuiltinInt8_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 iVal = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ival(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SKBuiltinInt8_t)
}

::google::protobuf::uint8* SKBuiltinInt8_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SKBuiltinInt8_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 iVal = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ival(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SKBuiltinInt8_t)
  return target;
}

size_t SKBuiltinInt8_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SKBuiltinInt8_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required int32 iVal = 1;
  if (has_ival()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ival());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SKBuiltinInt8_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SKBuiltinInt8_t)
  GOOGLE_DCHECK_NE(&from, this);
  const SKBuiltinInt8_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SKBuiltinInt8_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SKBuiltinInt8_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SKBuiltinInt8_t)
    MergeFrom(*source);
  }
}

void SKBuiltinInt8_t::MergeFrom(const SKBuiltinInt8_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SKBuiltinInt8_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ival()) {
    set_ival(from.ival());
  }
}

void SKBuiltinInt8_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SKBuiltinInt8_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SKBuiltinInt8_t::CopyFrom(const SKBuiltinInt8_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SKBuiltinInt8_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SKBuiltinInt8_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void SKBuiltinInt8_t::Swap(SKBuiltinInt8_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SKBuiltinInt8_t::InternalSwap(SKBuiltinInt8_t* other) {
  std::swap(ival_, other->ival_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SKBuiltinInt8_t::GetMetadata() const {
  protobuf_mmbuiltintype_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbuiltintype_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SKBuiltinInt8_t

// required int32 iVal = 1;
bool SKBuiltinInt8_t::has_ival() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SKBuiltinInt8_t::set_has_ival() {
  _has_bits_[0] |= 0x00000001u;
}
void SKBuiltinInt8_t::clear_has_ival() {
  _has_bits_[0] &= ~0x00000001u;
}
void SKBuiltinInt8_t::clear_ival() {
  ival_ = 0;
  clear_has_ival();
}
::google::protobuf::int32 SKBuiltinInt8_t::ival() const {
  // @@protoc_insertion_point(field_get:micromsg.SKBuiltinInt8_t.iVal)
  return ival_;
}
void SKBuiltinInt8_t::set_ival(::google::protobuf::int32 value) {
  set_has_ival();
  ival_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SKBuiltinInt8_t.iVal)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SKBuiltinUint8_t::kUiValFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SKBuiltinUint8_t::SKBuiltinUint8_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbuiltintype_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SKBuiltinUint8_t)
}
SKBuiltinUint8_t::SKBuiltinUint8_t(const SKBuiltinUint8_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uival_ = from.uival_;
  // @@protoc_insertion_point(copy_constructor:micromsg.SKBuiltinUint8_t)
}

void SKBuiltinUint8_t::SharedCtor() {
  _cached_size_ = 0;
  uival_ = 0u;
}

SKBuiltinUint8_t::~SKBuiltinUint8_t() {
  // @@protoc_insertion_point(destructor:micromsg.SKBuiltinUint8_t)
  SharedDtor();
}

void SKBuiltinUint8_t::SharedDtor() {
}

void SKBuiltinUint8_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SKBuiltinUint8_t::descriptor() {
  protobuf_mmbuiltintype_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbuiltintype_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SKBuiltinUint8_t& SKBuiltinUint8_t::default_instance() {
  protobuf_mmbuiltintype_2eproto::InitDefaults();
  return *internal_default_instance();
}

SKBuiltinUint8_t* SKBuiltinUint8_t::New(::google::protobuf::Arena* arena) const {
  SKBuiltinUint8_t* n = new SKBuiltinUint8_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SKBuiltinUint8_t::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SKBuiltinUint8_t)
  uival_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SKBuiltinUint8_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SKBuiltinUint8_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uiVal = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_uival();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uival_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SKBuiltinUint8_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SKBuiltinUint8_t)
  return false;
#undef DO_
}

void SKBuiltinUint8_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SKBuiltinUint8_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 uiVal = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uival(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SKBuiltinUint8_t)
}

::google::protobuf::uint8* SKBuiltinUint8_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SKBuiltinUint8_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 uiVal = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uival(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SKBuiltinUint8_t)
  return target;
}

size_t SKBuiltinUint8_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SKBuiltinUint8_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 uiVal = 1;
  if (has_uival()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uival());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SKBuiltinUint8_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SKBuiltinUint8_t)
  GOOGLE_DCHECK_NE(&from, this);
  const SKBuiltinUint8_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SKBuiltinUint8_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SKBuiltinUint8_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SKBuiltinUint8_t)
    MergeFrom(*source);
  }
}

void SKBuiltinUint8_t::MergeFrom(const SKBuiltinUint8_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SKBuiltinUint8_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_uival()) {
    set_uival(from.uival());
  }
}

void SKBuiltinUint8_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SKBuiltinUint8_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SKBuiltinUint8_t::CopyFrom(const SKBuiltinUint8_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SKBuiltinUint8_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SKBuiltinUint8_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void SKBuiltinUint8_t::Swap(SKBuiltinUint8_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SKBuiltinUint8_t::InternalSwap(SKBuiltinUint8_t* other) {
  std::swap(uival_, other->uival_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SKBuiltinUint8_t::GetMetadata() const {
  protobuf_mmbuiltintype_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbuiltintype_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SKBuiltinUint8_t

// required uint32 uiVal = 1;
bool SKBuiltinUint8_t::has_uival() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SKBuiltinUint8_t::set_has_uival() {
  _has_bits_[0] |= 0x00000001u;
}
void SKBuiltinUint8_t::clear_has_uival() {
  _has_bits_[0] &= ~0x00000001u;
}
void SKBuiltinUint8_t::clear_uival() {
  uival_ = 0u;
  clear_has_uival();
}
::google::protobuf::uint32 SKBuiltinUint8_t::uival() const {
  // @@protoc_insertion_point(field_get:micromsg.SKBuiltinUint8_t.uiVal)
  return uival_;
}
void SKBuiltinUint8_t::set_uival(::google::protobuf::uint32 value) {
  set_has_uival();
  uival_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SKBuiltinUint8_t.uiVal)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SKBuiltinInt16_t::kIValFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SKBuiltinInt16_t::SKBuiltinInt16_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbuiltintype_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SKBuiltinInt16_t)
}
SKBuiltinInt16_t::SKBuiltinInt16_t(const SKBuiltinInt16_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ival_ = from.ival_;
  // @@protoc_insertion_point(copy_constructor:micromsg.SKBuiltinInt16_t)
}

void SKBuiltinInt16_t::SharedCtor() {
  _cached_size_ = 0;
  ival_ = 0;
}

SKBuiltinInt16_t::~SKBuiltinInt16_t() {
  // @@protoc_insertion_point(destructor:micromsg.SKBuiltinInt16_t)
  SharedDtor();
}

void SKBuiltinInt16_t::SharedDtor() {
}

void SKBuiltinInt16_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SKBuiltinInt16_t::descriptor() {
  protobuf_mmbuiltintype_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbuiltintype_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SKBuiltinInt16_t& SKBuiltinInt16_t::default_instance() {
  protobuf_mmbuiltintype_2eproto::InitDefaults();
  return *internal_default_instance();
}

SKBuiltinInt16_t* SKBuiltinInt16_t::New(::google::protobuf::Arena* arena) const {
  SKBuiltinInt16_t* n = new SKBuiltinInt16_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SKBuiltinInt16_t::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SKBuiltinInt16_t)
  ival_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SKBuiltinInt16_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SKBuiltinInt16_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 iVal = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_ival();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ival_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SKBuiltinInt16_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SKBuiltinInt16_t)
  return false;
#undef DO_
}

void SKBuiltinInt16_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SKBuiltinInt16_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 iVal = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ival(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SKBuiltinInt16_t)
}

::google::protobuf::uint8* SKBuiltinInt16_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SKBuiltinInt16_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 iVal = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ival(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SKBuiltinInt16_t)
  return target;
}

size_t SKBuiltinInt16_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SKBuiltinInt16_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required int32 iVal = 1;
  if (has_ival()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ival());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SKBuiltinInt16_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SKBuiltinInt16_t)
  GOOGLE_DCHECK_NE(&from, this);
  const SKBuiltinInt16_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SKBuiltinInt16_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SKBuiltinInt16_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SKBuiltinInt16_t)
    MergeFrom(*source);
  }
}

void SKBuiltinInt16_t::MergeFrom(const SKBuiltinInt16_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SKBuiltinInt16_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ival()) {
    set_ival(from.ival());
  }
}

void SKBuiltinInt16_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SKBuiltinInt16_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SKBuiltinInt16_t::CopyFrom(const SKBuiltinInt16_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SKBuiltinInt16_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SKBuiltinInt16_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void SKBuiltinInt16_t::Swap(SKBuiltinInt16_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SKBuiltinInt16_t::InternalSwap(SKBuiltinInt16_t* other) {
  std::swap(ival_, other->ival_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SKBuiltinInt16_t::GetMetadata() const {
  protobuf_mmbuiltintype_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbuiltintype_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SKBuiltinInt16_t

// required int32 iVal = 1;
bool SKBuiltinInt16_t::has_ival() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SKBuiltinInt16_t::set_has_ival() {
  _has_bits_[0] |= 0x00000001u;
}
void SKBuiltinInt16_t::clear_has_ival() {
  _has_bits_[0] &= ~0x00000001u;
}
void SKBuiltinInt16_t::clear_ival() {
  ival_ = 0;
  clear_has_ival();
}
::google::protobuf::int32 SKBuiltinInt16_t::ival() const {
  // @@protoc_insertion_point(field_get:micromsg.SKBuiltinInt16_t.iVal)
  return ival_;
}
void SKBuiltinInt16_t::set_ival(::google::protobuf::int32 value) {
  set_has_ival();
  ival_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SKBuiltinInt16_t.iVal)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SKBuiltinUint16_t::kUiValFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SKBuiltinUint16_t::SKBuiltinUint16_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbuiltintype_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SKBuiltinUint16_t)
}
SKBuiltinUint16_t::SKBuiltinUint16_t(const SKBuiltinUint16_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uival_ = from.uival_;
  // @@protoc_insertion_point(copy_constructor:micromsg.SKBuiltinUint16_t)
}

void SKBuiltinUint16_t::SharedCtor() {
  _cached_size_ = 0;
  uival_ = 0u;
}

SKBuiltinUint16_t::~SKBuiltinUint16_t() {
  // @@protoc_insertion_point(destructor:micromsg.SKBuiltinUint16_t)
  SharedDtor();
}

void SKBuiltinUint16_t::SharedDtor() {
}

void SKBuiltinUint16_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SKBuiltinUint16_t::descriptor() {
  protobuf_mmbuiltintype_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbuiltintype_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SKBuiltinUint16_t& SKBuiltinUint16_t::default_instance() {
  protobuf_mmbuiltintype_2eproto::InitDefaults();
  return *internal_default_instance();
}

SKBuiltinUint16_t* SKBuiltinUint16_t::New(::google::protobuf::Arena* arena) const {
  SKBuiltinUint16_t* n = new SKBuiltinUint16_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SKBuiltinUint16_t::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SKBuiltinUint16_t)
  uival_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SKBuiltinUint16_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SKBuiltinUint16_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uiVal = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_uival();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uival_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SKBuiltinUint16_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SKBuiltinUint16_t)
  return false;
#undef DO_
}

void SKBuiltinUint16_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SKBuiltinUint16_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 uiVal = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uival(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SKBuiltinUint16_t)
}

::google::protobuf::uint8* SKBuiltinUint16_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SKBuiltinUint16_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 uiVal = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uival(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SKBuiltinUint16_t)
  return target;
}

size_t SKBuiltinUint16_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SKBuiltinUint16_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 uiVal = 1;
  if (has_uival()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uival());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SKBuiltinUint16_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SKBuiltinUint16_t)
  GOOGLE_DCHECK_NE(&from, this);
  const SKBuiltinUint16_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SKBuiltinUint16_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SKBuiltinUint16_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SKBuiltinUint16_t)
    MergeFrom(*source);
  }
}

void SKBuiltinUint16_t::MergeFrom(const SKBuiltinUint16_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SKBuiltinUint16_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_uival()) {
    set_uival(from.uival());
  }
}

void SKBuiltinUint16_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SKBuiltinUint16_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SKBuiltinUint16_t::CopyFrom(const SKBuiltinUint16_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SKBuiltinUint16_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SKBuiltinUint16_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void SKBuiltinUint16_t::Swap(SKBuiltinUint16_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SKBuiltinUint16_t::InternalSwap(SKBuiltinUint16_t* other) {
  std::swap(uival_, other->uival_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SKBuiltinUint16_t::GetMetadata() const {
  protobuf_mmbuiltintype_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbuiltintype_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SKBuiltinUint16_t

// required uint32 uiVal = 1;
bool SKBuiltinUint16_t::has_uival() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SKBuiltinUint16_t::set_has_uival() {
  _has_bits_[0] |= 0x00000001u;
}
void SKBuiltinUint16_t::clear_has_uival() {
  _has_bits_[0] &= ~0x00000001u;
}
void SKBuiltinUint16_t::clear_uival() {
  uival_ = 0u;
  clear_has_uival();
}
::google::protobuf::uint32 SKBuiltinUint16_t::uival() const {
  // @@protoc_insertion_point(field_get:micromsg.SKBuiltinUint16_t.uiVal)
  return uival_;
}
void SKBuiltinUint16_t::set_uival(::google::protobuf::uint32 value) {
  set_has_uival();
  uival_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SKBuiltinUint16_t.uiVal)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SKBuiltinInt64_t::kLlValFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SKBuiltinInt64_t::SKBuiltinInt64_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbuiltintype_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SKBuiltinInt64_t)
}
SKBuiltinInt64_t::SKBuiltinInt64_t(const SKBuiltinInt64_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  llval_ = from.llval_;
  // @@protoc_insertion_point(copy_constructor:micromsg.SKBuiltinInt64_t)
}

void SKBuiltinInt64_t::SharedCtor() {
  _cached_size_ = 0;
  llval_ = GOOGLE_LONGLONG(0);
}

SKBuiltinInt64_t::~SKBuiltinInt64_t() {
  // @@protoc_insertion_point(destructor:micromsg.SKBuiltinInt64_t)
  SharedDtor();
}

void SKBuiltinInt64_t::SharedDtor() {
}

void SKBuiltinInt64_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SKBuiltinInt64_t::descriptor() {
  protobuf_mmbuiltintype_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbuiltintype_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SKBuiltinInt64_t& SKBuiltinInt64_t::default_instance() {
  protobuf_mmbuiltintype_2eproto::InitDefaults();
  return *internal_default_instance();
}

SKBuiltinInt64_t* SKBuiltinInt64_t::New(::google::protobuf::Arena* arena) const {
  SKBuiltinInt64_t* n = new SKBuiltinInt64_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SKBuiltinInt64_t::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SKBuiltinInt64_t)
  llval_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SKBuiltinInt64_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SKBuiltinInt64_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 llVal = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_llval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &llval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SKBuiltinInt64_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SKBuiltinInt64_t)
  return false;
#undef DO_
}

void SKBuiltinInt64_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SKBuiltinInt64_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 llVal = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->llval(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SKBuiltinInt64_t)
}

::google::protobuf::uint8* SKBuiltinInt64_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SKBuiltinInt64_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 llVal = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->llval(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SKBuiltinInt64_t)
  return target;
}

size_t SKBuiltinInt64_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SKBuiltinInt64_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required int64 llVal = 1;
  if (has_llval()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->llval());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SKBuiltinInt64_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SKBuiltinInt64_t)
  GOOGLE_DCHECK_NE(&from, this);
  const SKBuiltinInt64_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SKBuiltinInt64_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SKBuiltinInt64_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SKBuiltinInt64_t)
    MergeFrom(*source);
  }
}

void SKBuiltinInt64_t::MergeFrom(const SKBuiltinInt64_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SKBuiltinInt64_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_llval()) {
    set_llval(from.llval());
  }
}

void SKBuiltinInt64_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SKBuiltinInt64_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SKBuiltinInt64_t::CopyFrom(const SKBuiltinInt64_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SKBuiltinInt64_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SKBuiltinInt64_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void SKBuiltinInt64_t::Swap(SKBuiltinInt64_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SKBuiltinInt64_t::InternalSwap(SKBuiltinInt64_t* other) {
  std::swap(llval_, other->llval_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SKBuiltinInt64_t::GetMetadata() const {
  protobuf_mmbuiltintype_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbuiltintype_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SKBuiltinInt64_t

// required int64 llVal = 1;
bool SKBuiltinInt64_t::has_llval() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SKBuiltinInt64_t::set_has_llval() {
  _has_bits_[0] |= 0x00000001u;
}
void SKBuiltinInt64_t::clear_has_llval() {
  _has_bits_[0] &= ~0x00000001u;
}
void SKBuiltinInt64_t::clear_llval() {
  llval_ = GOOGLE_LONGLONG(0);
  clear_has_llval();
}
::google::protobuf::int64 SKBuiltinInt64_t::llval() const {
  // @@protoc_insertion_point(field_get:micromsg.SKBuiltinInt64_t.llVal)
  return llval_;
}
void SKBuiltinInt64_t::set_llval(::google::protobuf::int64 value) {
  set_has_llval();
  llval_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SKBuiltinInt64_t.llVal)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SKBuiltinUint64_t::kUllValFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SKBuiltinUint64_t::SKBuiltinUint64_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbuiltintype_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SKBuiltinUint64_t)
}
SKBuiltinUint64_t::SKBuiltinUint64_t(const SKBuiltinUint64_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ullval_ = from.ullval_;
  // @@protoc_insertion_point(copy_constructor:micromsg.SKBuiltinUint64_t)
}

void SKBuiltinUint64_t::SharedCtor() {
  _cached_size_ = 0;
  ullval_ = GOOGLE_ULONGLONG(0);
}

SKBuiltinUint64_t::~SKBuiltinUint64_t() {
  // @@protoc_insertion_point(destructor:micromsg.SKBuiltinUint64_t)
  SharedDtor();
}

void SKBuiltinUint64_t::SharedDtor() {
}

void SKBuiltinUint64_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SKBuiltinUint64_t::descriptor() {
  protobuf_mmbuiltintype_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbuiltintype_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SKBuiltinUint64_t& SKBuiltinUint64_t::default_instance() {
  protobuf_mmbuiltintype_2eproto::InitDefaults();
  return *internal_default_instance();
}

SKBuiltinUint64_t* SKBuiltinUint64_t::New(::google::protobuf::Arena* arena) const {
  SKBuiltinUint64_t* n = new SKBuiltinUint64_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SKBuiltinUint64_t::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SKBuiltinUint64_t)
  ullval_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SKBuiltinUint64_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SKBuiltinUint64_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 ullVal = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_ullval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ullval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SKBuiltinUint64_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SKBuiltinUint64_t)
  return false;
#undef DO_
}

void SKBuiltinUint64_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SKBuiltinUint64_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 ullVal = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->ullval(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SKBuiltinUint64_t)
}

::google::protobuf::uint8* SKBuiltinUint64_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SKBuiltinUint64_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 ullVal = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->ullval(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SKBuiltinUint64_t)
  return target;
}

size_t SKBuiltinUint64_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SKBuiltinUint64_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint64 ullVal = 1;
  if (has_ullval()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ullval());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SKBuiltinUint64_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SKBuiltinUint64_t)
  GOOGLE_DCHECK_NE(&from, this);
  const SKBuiltinUint64_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SKBuiltinUint64_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SKBuiltinUint64_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SKBuiltinUint64_t)
    MergeFrom(*source);
  }
}

void SKBuiltinUint64_t::MergeFrom(const SKBuiltinUint64_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SKBuiltinUint64_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ullval()) {
    set_ullval(from.ullval());
  }
}

void SKBuiltinUint64_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SKBuiltinUint64_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SKBuiltinUint64_t::CopyFrom(const SKBuiltinUint64_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SKBuiltinUint64_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SKBuiltinUint64_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void SKBuiltinUint64_t::Swap(SKBuiltinUint64_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SKBuiltinUint64_t::InternalSwap(SKBuiltinUint64_t* other) {
  std::swap(ullval_, other->ullval_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SKBuiltinUint64_t::GetMetadata() const {
  protobuf_mmbuiltintype_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbuiltintype_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SKBuiltinUint64_t

// required uint64 ullVal = 1;
bool SKBuiltinUint64_t::has_ullval() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SKBuiltinUint64_t::set_has_ullval() {
  _has_bits_[0] |= 0x00000001u;
}
void SKBuiltinUint64_t::clear_has_ullval() {
  _has_bits_[0] &= ~0x00000001u;
}
void SKBuiltinUint64_t::clear_ullval() {
  ullval_ = GOOGLE_ULONGLONG(0);
  clear_has_ullval();
}
::google::protobuf::uint64 SKBuiltinUint64_t::ullval() const {
  // @@protoc_insertion_point(field_get:micromsg.SKBuiltinUint64_t.ullVal)
  return ullval_;
}
void SKBuiltinUint64_t::set_ullval(::google::protobuf::uint64 value) {
  set_has_ullval();
  ullval_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SKBuiltinUint64_t.ullVal)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SKBuiltinFloat32_t::kFValFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SKBuiltinFloat32_t::SKBuiltinFloat32_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbuiltintype_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SKBuiltinFloat32_t)
}
SKBuiltinFloat32_t::SKBuiltinFloat32_t(const SKBuiltinFloat32_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fval_ = from.fval_;
  // @@protoc_insertion_point(copy_constructor:micromsg.SKBuiltinFloat32_t)
}

void SKBuiltinFloat32_t::SharedCtor() {
  _cached_size_ = 0;
  fval_ = 0;
}

SKBuiltinFloat32_t::~SKBuiltinFloat32_t() {
  // @@protoc_insertion_point(destructor:micromsg.SKBuiltinFloat32_t)
  SharedDtor();
}

void SKBuiltinFloat32_t::SharedDtor() {
}

void SKBuiltinFloat32_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SKBuiltinFloat32_t::descriptor() {
  protobuf_mmbuiltintype_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbuiltintype_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SKBuiltinFloat32_t& SKBuiltinFloat32_t::default_instance() {
  protobuf_mmbuiltintype_2eproto::InitDefaults();
  return *internal_default_instance();
}

SKBuiltinFloat32_t* SKBuiltinFloat32_t::New(::google::protobuf::Arena* arena) const {
  SKBuiltinFloat32_t* n = new SKBuiltinFloat32_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SKBuiltinFloat32_t::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SKBuiltinFloat32_t)
  fval_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SKBuiltinFloat32_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SKBuiltinFloat32_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float fVal = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_fval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SKBuiltinFloat32_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SKBuiltinFloat32_t)
  return false;
#undef DO_
}

void SKBuiltinFloat32_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SKBuiltinFloat32_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float fVal = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->fval(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SKBuiltinFloat32_t)
}

::google::protobuf::uint8* SKBuiltinFloat32_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SKBuiltinFloat32_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float fVal = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->fval(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SKBuiltinFloat32_t)
  return target;
}

size_t SKBuiltinFloat32_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SKBuiltinFloat32_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required float fVal = 1;
  if (has_fval()) {
    total_size += 1 + 4;
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SKBuiltinFloat32_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SKBuiltinFloat32_t)
  GOOGLE_DCHECK_NE(&from, this);
  const SKBuiltinFloat32_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SKBuiltinFloat32_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SKBuiltinFloat32_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SKBuiltinFloat32_t)
    MergeFrom(*source);
  }
}

void SKBuiltinFloat32_t::MergeFrom(const SKBuiltinFloat32_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SKBuiltinFloat32_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_fval()) {
    set_fval(from.fval());
  }
}

void SKBuiltinFloat32_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SKBuiltinFloat32_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SKBuiltinFloat32_t::CopyFrom(const SKBuiltinFloat32_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SKBuiltinFloat32_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SKBuiltinFloat32_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void SKBuiltinFloat32_t::Swap(SKBuiltinFloat32_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SKBuiltinFloat32_t::InternalSwap(SKBuiltinFloat32_t* other) {
  std::swap(fval_, other->fval_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SKBuiltinFloat32_t::GetMetadata() const {
  protobuf_mmbuiltintype_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbuiltintype_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SKBuiltinFloat32_t

// required float fVal = 1;
bool SKBuiltinFloat32_t::has_fval() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SKBuiltinFloat32_t::set_has_fval() {
  _has_bits_[0] |= 0x00000001u;
}
void SKBuiltinFloat32_t::clear_has_fval() {
  _has_bits_[0] &= ~0x00000001u;
}
void SKBuiltinFloat32_t::clear_fval() {
  fval_ = 0;
  clear_has_fval();
}
float SKBuiltinFloat32_t::fval() const {
  // @@protoc_insertion_point(field_get:micromsg.SKBuiltinFloat32_t.fVal)
  return fval_;
}
void SKBuiltinFloat32_t::set_fval(float value) {
  set_has_fval();
  fval_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SKBuiltinFloat32_t.fVal)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SKBuiltinDouble64_t::kDValFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SKBuiltinDouble64_t::SKBuiltinDouble64_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbuiltintype_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SKBuiltinDouble64_t)
}
SKBuiltinDouble64_t::SKBuiltinDouble64_t(const SKBuiltinDouble64_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dval_ = from.dval_;
  // @@protoc_insertion_point(copy_constructor:micromsg.SKBuiltinDouble64_t)
}

void SKBuiltinDouble64_t::SharedCtor() {
  _cached_size_ = 0;
  dval_ = 0;
}

SKBuiltinDouble64_t::~SKBuiltinDouble64_t() {
  // @@protoc_insertion_point(destructor:micromsg.SKBuiltinDouble64_t)
  SharedDtor();
}

void SKBuiltinDouble64_t::SharedDtor() {
}

void SKBuiltinDouble64_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SKBuiltinDouble64_t::descriptor() {
  protobuf_mmbuiltintype_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbuiltintype_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SKBuiltinDouble64_t& SKBuiltinDouble64_t::default_instance() {
  protobuf_mmbuiltintype_2eproto::InitDefaults();
  return *internal_default_instance();
}

SKBuiltinDouble64_t* SKBuiltinDouble64_t::New(::google::protobuf::Arena* arena) const {
  SKBuiltinDouble64_t* n = new SKBuiltinDouble64_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SKBuiltinDouble64_t::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SKBuiltinDouble64_t)
  dval_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SKBuiltinDouble64_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SKBuiltinDouble64_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double dVal = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_dval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SKBuiltinDouble64_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SKBuiltinDouble64_t)
  return false;
#undef DO_
}

void SKBuiltinDouble64_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SKBuiltinDouble64_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double dVal = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->dval(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SKBuiltinDouble64_t)
}

::google::protobuf::uint8* SKBuiltinDouble64_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SKBuiltinDouble64_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double dVal = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->dval(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SKBuiltinDouble64_t)
  return target;
}

size_t SKBuiltinDouble64_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SKBuiltinDouble64_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required double dVal = 1;
  if (has_dval()) {
    total_size += 1 + 8;
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SKBuiltinDouble64_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SKBuiltinDouble64_t)
  GOOGLE_DCHECK_NE(&from, this);
  const SKBuiltinDouble64_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SKBuiltinDouble64_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SKBuiltinDouble64_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SKBuiltinDouble64_t)
    MergeFrom(*source);
  }
}

void SKBuiltinDouble64_t::MergeFrom(const SKBuiltinDouble64_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SKBuiltinDouble64_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_dval()) {
    set_dval(from.dval());
  }
}

void SKBuiltinDouble64_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SKBuiltinDouble64_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SKBuiltinDouble64_t::CopyFrom(const SKBuiltinDouble64_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SKBuiltinDouble64_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SKBuiltinDouble64_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void SKBuiltinDouble64_t::Swap(SKBuiltinDouble64_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SKBuiltinDouble64_t::InternalSwap(SKBuiltinDouble64_t* other) {
  std::swap(dval_, other->dval_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SKBuiltinDouble64_t::GetMetadata() const {
  protobuf_mmbuiltintype_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbuiltintype_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SKBuiltinDouble64_t

// required double dVal = 1;
bool SKBuiltinDouble64_t::has_dval() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SKBuiltinDouble64_t::set_has_dval() {
  _has_bits_[0] |= 0x00000001u;
}
void SKBuiltinDouble64_t::clear_has_dval() {
  _has_bits_[0] &= ~0x00000001u;
}
void SKBuiltinDouble64_t::clear_dval() {
  dval_ = 0;
  clear_has_dval();
}
double SKBuiltinDouble64_t::dval() const {
  // @@protoc_insertion_point(field_get:micromsg.SKBuiltinDouble64_t.dVal)
  return dval_;
}
void SKBuiltinDouble64_t::set_dval(double value) {
  set_has_dval();
  dval_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SKBuiltinDouble64_t.dVal)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SKBuiltinBuffer_t::kILenFieldNumber;
const int SKBuiltinBuffer_t::kBufferFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SKBuiltinBuffer_t::SKBuiltinBuffer_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbuiltintype_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SKBuiltinBuffer_t)
}
SKBuiltinBuffer_t::SKBuiltinBuffer_t(const SKBuiltinBuffer_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  buffer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_buffer()) {
    buffer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buffer_);
  }
  ilen_ = from.ilen_;
  // @@protoc_insertion_point(copy_constructor:micromsg.SKBuiltinBuffer_t)
}

void SKBuiltinBuffer_t::SharedCtor() {
  _cached_size_ = 0;
  buffer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ilen_ = 0u;
}

SKBuiltinBuffer_t::~SKBuiltinBuffer_t() {
  // @@protoc_insertion_point(destructor:micromsg.SKBuiltinBuffer_t)
  SharedDtor();
}

void SKBuiltinBuffer_t::SharedDtor() {
  buffer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SKBuiltinBuffer_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SKBuiltinBuffer_t::descriptor() {
  protobuf_mmbuiltintype_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbuiltintype_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SKBuiltinBuffer_t& SKBuiltinBuffer_t::default_instance() {
  protobuf_mmbuiltintype_2eproto::InitDefaults();
  return *internal_default_instance();
}

SKBuiltinBuffer_t* SKBuiltinBuffer_t::New(::google::protobuf::Arena* arena) const {
  SKBuiltinBuffer_t* n = new SKBuiltinBuffer_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SKBuiltinBuffer_t::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SKBuiltinBuffer_t)
  if (has_buffer()) {
    GOOGLE_DCHECK(!buffer_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*buffer_.UnsafeRawStringPointer())->clear();
  }
  ilen_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SKBuiltinBuffer_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SKBuiltinBuffer_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 iLen = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_ilen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ilen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes Buffer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buffer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SKBuiltinBuffer_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SKBuiltinBuffer_t)
  return false;
#undef DO_
}

void SKBuiltinBuffer_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SKBuiltinBuffer_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 iLen = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ilen(), output);
  }

  // optional bytes Buffer = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->buffer(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SKBuiltinBuffer_t)
}

::google::protobuf::uint8* SKBuiltinBuffer_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SKBuiltinBuffer_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 iLen = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ilen(), target);
  }

  // optional bytes Buffer = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->buffer(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SKBuiltinBuffer_t)
  return target;
}

size_t SKBuiltinBuffer_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SKBuiltinBuffer_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 iLen = 1;
  if (has_ilen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ilen());
  }
  // optional bytes Buffer = 2;
  if (has_buffer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->buffer());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SKBuiltinBuffer_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SKBuiltinBuffer_t)
  GOOGLE_DCHECK_NE(&from, this);
  const SKBuiltinBuffer_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SKBuiltinBuffer_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SKBuiltinBuffer_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SKBuiltinBuffer_t)
    MergeFrom(*source);
  }
}

void SKBuiltinBuffer_t::MergeFrom(const SKBuiltinBuffer_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SKBuiltinBuffer_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_buffer();
      buffer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buffer_);
    }
    if (cached_has_bits & 0x00000002u) {
      ilen_ = from.ilen_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SKBuiltinBuffer_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SKBuiltinBuffer_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SKBuiltinBuffer_t::CopyFrom(const SKBuiltinBuffer_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SKBuiltinBuffer_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SKBuiltinBuffer_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void SKBuiltinBuffer_t::Swap(SKBuiltinBuffer_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SKBuiltinBuffer_t::InternalSwap(SKBuiltinBuffer_t* other) {
  buffer_.Swap(&other->buffer_);
  std::swap(ilen_, other->ilen_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SKBuiltinBuffer_t::GetMetadata() const {
  protobuf_mmbuiltintype_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbuiltintype_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SKBuiltinBuffer_t

// required uint32 iLen = 1;
bool SKBuiltinBuffer_t::has_ilen() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SKBuiltinBuffer_t::set_has_ilen() {
  _has_bits_[0] |= 0x00000002u;
}
void SKBuiltinBuffer_t::clear_has_ilen() {
  _has_bits_[0] &= ~0x00000002u;
}
void SKBuiltinBuffer_t::clear_ilen() {
  ilen_ = 0u;
  clear_has_ilen();
}
::google::protobuf::uint32 SKBuiltinBuffer_t::ilen() const {
  // @@protoc_insertion_point(field_get:micromsg.SKBuiltinBuffer_t.iLen)
  return ilen_;
}
void SKBuiltinBuffer_t::set_ilen(::google::protobuf::uint32 value) {
  set_has_ilen();
  ilen_ = value;
  // @@protoc_insertion_point(field_set:micromsg.SKBuiltinBuffer_t.iLen)
}

// optional bytes Buffer = 2;
bool SKBuiltinBuffer_t::has_buffer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SKBuiltinBuffer_t::set_has_buffer() {
  _has_bits_[0] |= 0x00000001u;
}
void SKBuiltinBuffer_t::clear_has_buffer() {
  _has_bits_[0] &= ~0x00000001u;
}
void SKBuiltinBuffer_t::clear_buffer() {
  buffer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_buffer();
}
const ::std::string& SKBuiltinBuffer_t::buffer() const {
  // @@protoc_insertion_point(field_get:micromsg.SKBuiltinBuffer_t.Buffer)
  return buffer_.GetNoArena();
}
void SKBuiltinBuffer_t::set_buffer(const ::std::string& value) {
  set_has_buffer();
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SKBuiltinBuffer_t.Buffer)
}
#if LANG_CXX11
void SKBuiltinBuffer_t::set_buffer(::std::string&& value) {
  set_has_buffer();
  buffer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SKBuiltinBuffer_t.Buffer)
}
#endif
void SKBuiltinBuffer_t::set_buffer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_buffer();
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SKBuiltinBuffer_t.Buffer)
}
void SKBuiltinBuffer_t::set_buffer(const void* value, size_t size) {
  set_has_buffer();
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SKBuiltinBuffer_t.Buffer)
}
::std::string* SKBuiltinBuffer_t::mutable_buffer() {
  set_has_buffer();
  // @@protoc_insertion_point(field_mutable:micromsg.SKBuiltinBuffer_t.Buffer)
  return buffer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SKBuiltinBuffer_t::release_buffer() {
  // @@protoc_insertion_point(field_release:micromsg.SKBuiltinBuffer_t.Buffer)
  clear_has_buffer();
  return buffer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SKBuiltinBuffer_t::set_allocated_buffer(::std::string* buffer) {
  if (buffer != NULL) {
    set_has_buffer();
  } else {
    clear_has_buffer();
  }
  buffer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buffer);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SKBuiltinBuffer_t.Buffer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SKBuiltinString_t::kStringFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SKBuiltinString_t::SKBuiltinString_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmbuiltintype_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.SKBuiltinString_t)
}
SKBuiltinString_t::SKBuiltinString_t(const SKBuiltinString_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_string()) {
    string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.string_);
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.SKBuiltinString_t)
}

void SKBuiltinString_t::SharedCtor() {
  _cached_size_ = 0;
  string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SKBuiltinString_t::~SKBuiltinString_t() {
  // @@protoc_insertion_point(destructor:micromsg.SKBuiltinString_t)
  SharedDtor();
}

void SKBuiltinString_t::SharedDtor() {
  string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SKBuiltinString_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SKBuiltinString_t::descriptor() {
  protobuf_mmbuiltintype_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbuiltintype_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SKBuiltinString_t& SKBuiltinString_t::default_instance() {
  protobuf_mmbuiltintype_2eproto::InitDefaults();
  return *internal_default_instance();
}

SKBuiltinString_t* SKBuiltinString_t::New(::google::protobuf::Arena* arena) const {
  SKBuiltinString_t* n = new SKBuiltinString_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SKBuiltinString_t::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.SKBuiltinString_t)
  if (has_string()) {
    GOOGLE_DCHECK(!string_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*string_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SKBuiltinString_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.SKBuiltinString_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string String = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->string().data(), this->string().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.SKBuiltinString_t.String");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.SKBuiltinString_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.SKBuiltinString_t)
  return false;
#undef DO_
}

void SKBuiltinString_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.SKBuiltinString_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string String = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->string().data(), this->string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SKBuiltinString_t.String");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->string(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.SKBuiltinString_t)
}

::google::protobuf::uint8* SKBuiltinString_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.SKBuiltinString_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string String = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->string().data(), this->string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.SKBuiltinString_t.String");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->string(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.SKBuiltinString_t)
  return target;
}

size_t SKBuiltinString_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.SKBuiltinString_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string String = 1;
  if (has_string()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->string());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SKBuiltinString_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.SKBuiltinString_t)
  GOOGLE_DCHECK_NE(&from, this);
  const SKBuiltinString_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SKBuiltinString_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.SKBuiltinString_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.SKBuiltinString_t)
    MergeFrom(*source);
  }
}

void SKBuiltinString_t::MergeFrom(const SKBuiltinString_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.SKBuiltinString_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_string()) {
    set_has_string();
    string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.string_);
  }
}

void SKBuiltinString_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.SKBuiltinString_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SKBuiltinString_t::CopyFrom(const SKBuiltinString_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.SKBuiltinString_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SKBuiltinString_t::IsInitialized() const {
  return true;
}

void SKBuiltinString_t::Swap(SKBuiltinString_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SKBuiltinString_t::InternalSwap(SKBuiltinString_t* other) {
  string_.Swap(&other->string_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SKBuiltinString_t::GetMetadata() const {
  protobuf_mmbuiltintype_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmbuiltintype_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SKBuiltinString_t

// optional string String = 1;
bool SKBuiltinString_t::has_string() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SKBuiltinString_t::set_has_string() {
  _has_bits_[0] |= 0x00000001u;
}
void SKBuiltinString_t::clear_has_string() {
  _has_bits_[0] &= ~0x00000001u;
}
void SKBuiltinString_t::clear_string() {
  string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_string();
}
const ::std::string& SKBuiltinString_t::string() const {
  // @@protoc_insertion_point(field_get:micromsg.SKBuiltinString_t.String)
  return string_.GetNoArena();
}
void SKBuiltinString_t::set_string(const ::std::string& value) {
  set_has_string();
  string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.SKBuiltinString_t.String)
}
#if LANG_CXX11
void SKBuiltinString_t::set_string(::std::string&& value) {
  set_has_string();
  string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.SKBuiltinString_t.String)
}
#endif
void SKBuiltinString_t::set_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_string();
  string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.SKBuiltinString_t.String)
}
void SKBuiltinString_t::set_string(const char* value, size_t size) {
  set_has_string();
  string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.SKBuiltinString_t.String)
}
::std::string* SKBuiltinString_t::mutable_string() {
  set_has_string();
  // @@protoc_insertion_point(field_mutable:micromsg.SKBuiltinString_t.String)
  return string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SKBuiltinString_t::release_string() {
  // @@protoc_insertion_point(field_release:micromsg.SKBuiltinString_t.String)
  clear_has_string();
  return string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SKBuiltinString_t::set_allocated_string(::std::string* string) {
  if (string != NULL) {
    set_has_string();
  } else {
    clear_has_string();
  }
  string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), string);
  // @@protoc_insertion_point(field_set_allocated:micromsg.SKBuiltinString_t.String)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace micromsg

// @@protoc_insertion_point(global_scope)
