// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mmcard.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mmcard.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace micromsg {
class CardUserItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CardUserItem> {
} _CardUserItem_default_instance_;
class BatchDelCardItemRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BatchDelCardItemRequest> {
} _BatchDelCardItemRequest_default_instance_;
class BatchDelCardItemResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BatchDelCardItemResponse> {
} _BatchDelCardItemResponse_default_instance_;
class BatchGetCardItemRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BatchGetCardItemRequest> {
} _BatchGetCardItemRequest_default_instance_;
class BatchGetCardItemResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BatchGetCardItemResponse> {
} _BatchGetCardItemResponse_default_instance_;
class CardSyncRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CardSyncRequest> {
} _CardSyncRequest_default_instance_;
class CardSyncResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CardSyncResponse> {
} _CardSyncResponse_default_instance_;
class CardShopLBSRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CardShopLBSRequest> {
} _CardShopLBSRequest_default_instance_;
class CardShopLBSResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CardShopLBSResponse> {
} _CardShopLBSResponse_default_instance_;
class GetCardSerialRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetCardSerialRequest> {
} _GetCardSerialRequest_default_instance_;
class GetCardSerialResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetCardSerialResponse> {
} _GetCardSerialResponse_default_instance_;
class GetCardItemInfoRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetCardItemInfoRequest> {
} _GetCardItemInfoRequest_default_instance_;
class GetCardItemInfoResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetCardItemInfoResponse> {
} _GetCardItemInfoResponse_default_instance_;
class GiftCardItemRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GiftCardItemRequest> {
} _GiftCardItemRequest_default_instance_;
class GiftCardItemResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GiftCardItemResponse> {
} _GiftCardItemResponse_default_instance_;
class AcceptCardItemRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AcceptCardItemRequest> {
} _AcceptCardItemRequest_default_instance_;
class AcceptCardItemResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AcceptCardItemResponse> {
} _AcceptCardItemResponse_default_instance_;
class GetCardCountRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetCardCountRequest> {
} _GetCardCountRequest_default_instance_;
class GetCardCountResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetCardCountResponse> {
} _GetCardCountResponse_default_instance_;
class GetAvailableCardRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetAvailableCardRequest> {
} _GetAvailableCardRequest_default_instance_;
class GetAvailableCardResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetAvailableCardResponse> {
} _GetAvailableCardResponse_default_instance_;
class CardListItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CardListItem> {
} _CardListItem_default_instance_;
class CardListItemsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CardListItems> {
} _CardListItems_default_instance_;
class GetCardListFromAppRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetCardListFromAppRequest> {
} _GetCardListFromAppRequest_default_instance_;
class GetCardListFromAppResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetCardListFromAppResponse> {
} _GetCardListFromAppResponse_default_instance_;
class AcceptCardListFromAppRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AcceptCardListFromAppRequest> {
} _AcceptCardListFromAppRequest_default_instance_;
class AcceptCardListFromAppResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AcceptCardListFromAppResponse> {
} _AcceptCardListFromAppResponse_default_instance_;
class GetCardConfigInfoRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetCardConfigInfoRequest> {
} _GetCardConfigInfoRequest_default_instance_;
class GetCardConfigInfoResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetCardConfigInfoResponse> {
} _GetCardConfigInfoResponse_default_instance_;
class CardDataInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CardDataInfo> {
} _CardDataInfo_default_instance_;
class BatchGetCardItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BatchGetCardItem> {
} _BatchGetCardItem_default_instance_;
class BatchGetCardArrayDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BatchGetCardArray> {
} _BatchGetCardArray_default_instance_;
class CardTpInfoItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CardTpInfoItem> {
} _CardTpInfoItem_default_instance_;
class BatchGetCardItemByTpInfoRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BatchGetCardItemByTpInfoRequest> {
} _BatchGetCardItemByTpInfoRequest_default_instance_;
class BatchGetCardItemByTpInfoResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BatchGetCardItemByTpInfoResponse> {
} _BatchGetCardItemByTpInfoResponse_default_instance_;

namespace protobuf_mmcard_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[35];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardUserItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardUserItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardUserItem, cardid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardUserItem, updatesequence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardUserItem, stateflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardUserItem, updatetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardUserItem, status_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchDelCardItemRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchDelCardItemRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchDelCardItemRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchDelCardItemRequest, card_ids_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchDelCardItemResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchDelCardItemResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchDelCardItemResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchDelCardItemResponse, succ_card_ids_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetCardItemRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetCardItemRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetCardItemRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetCardItemRequest, card_ids_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetCardItemResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetCardItemResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetCardItemResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetCardItemResponse, json_ret_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardSyncRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardSyncRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardSyncRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardSyncRequest, selector_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardSyncRequest, keybuf_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardSyncResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardSyncResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardSyncResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardSyncResponse, cmdlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardSyncResponse, keybuf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardSyncResponse, continueflag_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardShopLBSRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardShopLBSRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardShopLBSRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardShopLBSRequest, card_tp_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardShopLBSRequest, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardShopLBSRequest, latitude_),
  1,
  0,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardShopLBSResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardShopLBSResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardShopLBSResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardShopLBSResponse, json_ret_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCardSerialRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCardSerialRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCardSerialRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCardSerialRequest, card_id_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCardSerialResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCardSerialResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCardSerialResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCardSerialResponse, serial_number_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCardItemInfoRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCardItemInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCardItemInfoRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCardItemInfoRequest, card_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCardItemInfoRequest, from_scene_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCardItemInfoRequest, from_username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCardItemInfoRequest, card_ext_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCardItemInfoRequest, js_checkinfo_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCardItemInfoRequest, js_checkinfo_session_username_),
  5,
  0,
  6,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCardItemInfoResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCardItemInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCardItemInfoResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCardItemInfoResponse, json_ret_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiftCardItemRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiftCardItemRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiftCardItemRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiftCardItemRequest, card_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiftCardItemRequest, to_username_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiftCardItemResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiftCardItemResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiftCardItemResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiftCardItemResponse, card_ext_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiftCardItemResponse, ret_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiftCardItemResponse, ret_msg_),
  2,
  0,
  3,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptCardItemRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptCardItemRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptCardItemRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptCardItemRequest, from_username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptCardItemRequest, from_scene_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptCardItemRequest, card_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptCardItemRequest, card_ext_),
  3,
  0,
  4,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptCardItemResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptCardItemResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptCardItemResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptCardItemResponse, json_ret_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptCardItemResponse, ret_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptCardItemResponse, ret_msg_),
  2,
  0,
  3,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCardCountRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCardCountRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCardCountRequest, baserequest_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCardCountResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCardCountResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCardCountResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCardCountResponse, count_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAvailableCardRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAvailableCardRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAvailableCardRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAvailableCardRequest, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAvailableCardRequest, shop_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAvailableCardRequest, sign_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAvailableCardRequest, card_sign_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAvailableCardRequest, time_stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAvailableCardRequest, nonce_str_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAvailableCardRequest, card_tp_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAvailableCardRequest, card_type_),
  6,
  0,
  7,
  1,
  2,
  8,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAvailableCardResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAvailableCardResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAvailableCardResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAvailableCardResponse, json_ret_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardListItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardListItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardListItem, card_tp_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardListItem, card_ext_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardListItem, is_succ_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardListItems, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardListItems, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardListItems, card_list_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCardListFromAppRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCardListFromAppRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCardListFromAppRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCardListFromAppRequest, card_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCardListFromAppRequest, from_scene_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCardListFromAppRequest, bundle_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCardListFromAppRequest, package_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCardListFromAppRequest, sign_),
  3,
  ~0u,
  4,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCardListFromAppResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCardListFromAppResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCardListFromAppResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCardListFromAppResponse, json_ret_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptCardListFromAppRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptCardListFromAppRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptCardListFromAppRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptCardListFromAppRequest, card_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptCardListFromAppRequest, from_scene_),
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptCardListFromAppResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptCardListFromAppResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptCardListFromAppResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptCardListFromAppResponse, json_ret_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptCardListFromAppResponse, ret_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptCardListFromAppResponse, ret_msg_),
  2,
  0,
  3,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCardConfigInfoRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCardConfigInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCardConfigInfoRequest, baserequest_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCardConfigInfoResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCardConfigInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCardConfigInfoResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCardConfigInfoResponse, json_ret_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardDataInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardDataInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardDataInfo, card_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetCardItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetCardItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetCardItem, card_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetCardItem, card_data_info_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetCardArray, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetCardArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetCardArray, card_array_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardTpInfoItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardTpInfoItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardTpInfoItem, card_tp_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardTpInfoItem, code_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetCardItemByTpInfoRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetCardItemByTpInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetCardItemByTpInfoRequest, baserequest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetCardItemByTpInfoRequest, items_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetCardItemByTpInfoResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetCardItemByTpInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetCardItemByTpInfoResponse, baseresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetCardItemByTpInfoResponse, json_ret_),
  1,
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 10, sizeof(CardUserItem)},
  { 15, 22, sizeof(BatchDelCardItemRequest)},
  { 24, 31, sizeof(BatchDelCardItemResponse)},
  { 33, 40, sizeof(BatchGetCardItemRequest)},
  { 42, 49, sizeof(BatchGetCardItemResponse)},
  { 51, 59, sizeof(CardSyncRequest)},
  { 62, 71, sizeof(CardSyncResponse)},
  { 75, 84, sizeof(CardShopLBSRequest)},
  { 88, 95, sizeof(CardShopLBSResponse)},
  { 97, 104, sizeof(GetCardSerialRequest)},
  { 106, 113, sizeof(GetCardSerialResponse)},
  { 115, 127, sizeof(GetCardItemInfoRequest)},
  { 134, 141, sizeof(GetCardItemInfoResponse)},
  { 143, 151, sizeof(GiftCardItemRequest)},
  { 154, 163, sizeof(GiftCardItemResponse)},
  { 167, 177, sizeof(AcceptCardItemRequest)},
  { 182, 191, sizeof(AcceptCardItemResponse)},
  { 195, 201, sizeof(GetCardCountRequest)},
  { 202, 209, sizeof(GetCardCountResponse)},
  { 211, 225, sizeof(GetAvailableCardRequest)},
  { 234, 241, sizeof(GetAvailableCardResponse)},
  { 243, 251, sizeof(CardListItem)},
  { 254, 260, sizeof(CardListItems)},
  { 261, 272, sizeof(GetCardListFromAppRequest)},
  { 278, 285, sizeof(GetCardListFromAppResponse)},
  { 287, 295, sizeof(AcceptCardListFromAppRequest)},
  { 298, 307, sizeof(AcceptCardListFromAppResponse)},
  { 311, 317, sizeof(GetCardConfigInfoRequest)},
  { 318, 325, sizeof(GetCardConfigInfoResponse)},
  { 327, 333, sizeof(CardDataInfo)},
  { 334, 341, sizeof(BatchGetCardItem)},
  { 343, 349, sizeof(BatchGetCardArray)},
  { 350, 357, sizeof(CardTpInfoItem)},
  { 359, 366, sizeof(BatchGetCardItemByTpInfoRequest)},
  { 368, 375, sizeof(BatchGetCardItemByTpInfoResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CardUserItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BatchDelCardItemRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BatchDelCardItemResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BatchGetCardItemRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BatchGetCardItemResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CardSyncRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CardSyncResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CardShopLBSRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CardShopLBSResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetCardSerialRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetCardSerialResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetCardItemInfoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetCardItemInfoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GiftCardItemRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GiftCardItemResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AcceptCardItemRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AcceptCardItemResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetCardCountRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetCardCountResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetAvailableCardRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetAvailableCardResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CardListItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CardListItems_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetCardListFromAppRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetCardListFromAppResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AcceptCardListFromAppRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AcceptCardListFromAppResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetCardConfigInfoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetCardConfigInfoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CardDataInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BatchGetCardItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BatchGetCardArray_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CardTpInfoItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BatchGetCardItemByTpInfoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BatchGetCardItemByTpInfoResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "mmcard.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 35);
}

}  // namespace

void TableStruct::Shutdown() {
  _CardUserItem_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _BatchDelCardItemRequest_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _BatchDelCardItemResponse_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _BatchGetCardItemRequest_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _BatchGetCardItemResponse_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _CardSyncRequest_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _CardSyncResponse_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _CardShopLBSRequest_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _CardShopLBSResponse_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _GetCardSerialRequest_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _GetCardSerialResponse_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _GetCardItemInfoRequest_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _GetCardItemInfoResponse_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _GiftCardItemRequest_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _GiftCardItemResponse_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _AcceptCardItemRequest_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _AcceptCardItemResponse_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _GetCardCountRequest_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _GetCardCountResponse_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _GetAvailableCardRequest_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _GetAvailableCardResponse_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _CardListItem_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _CardListItems_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _GetCardListFromAppRequest_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _GetCardListFromAppResponse_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _AcceptCardListFromAppRequest_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _AcceptCardListFromAppResponse_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _GetCardConfigInfoRequest_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _GetCardConfigInfoResponse_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _CardDataInfo_default_instance_.Shutdown();
  delete file_level_metadata[29].reflection;
  _BatchGetCardItem_default_instance_.Shutdown();
  delete file_level_metadata[30].reflection;
  _BatchGetCardArray_default_instance_.Shutdown();
  delete file_level_metadata[31].reflection;
  _CardTpInfoItem_default_instance_.Shutdown();
  delete file_level_metadata[32].reflection;
  _BatchGetCardItemByTpInfoRequest_default_instance_.Shutdown();
  delete file_level_metadata[33].reflection;
  _BatchGetCardItemByTpInfoResponse_default_instance_.Shutdown();
  delete file_level_metadata[34].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::micromsg::protobuf_mmbuiltintype_2eproto::InitDefaults();
  ::micromsg::protobuf_mmbase_2eproto::InitDefaults();
  _CardUserItem_default_instance_.DefaultConstruct();
  _BatchDelCardItemRequest_default_instance_.DefaultConstruct();
  _BatchDelCardItemResponse_default_instance_.DefaultConstruct();
  _BatchGetCardItemRequest_default_instance_.DefaultConstruct();
  _BatchGetCardItemResponse_default_instance_.DefaultConstruct();
  _CardSyncRequest_default_instance_.DefaultConstruct();
  _CardSyncResponse_default_instance_.DefaultConstruct();
  _CardShopLBSRequest_default_instance_.DefaultConstruct();
  _CardShopLBSResponse_default_instance_.DefaultConstruct();
  _GetCardSerialRequest_default_instance_.DefaultConstruct();
  _GetCardSerialResponse_default_instance_.DefaultConstruct();
  _GetCardItemInfoRequest_default_instance_.DefaultConstruct();
  _GetCardItemInfoResponse_default_instance_.DefaultConstruct();
  _GiftCardItemRequest_default_instance_.DefaultConstruct();
  _GiftCardItemResponse_default_instance_.DefaultConstruct();
  _AcceptCardItemRequest_default_instance_.DefaultConstruct();
  _AcceptCardItemResponse_default_instance_.DefaultConstruct();
  _GetCardCountRequest_default_instance_.DefaultConstruct();
  _GetCardCountResponse_default_instance_.DefaultConstruct();
  _GetAvailableCardRequest_default_instance_.DefaultConstruct();
  _GetAvailableCardResponse_default_instance_.DefaultConstruct();
  _CardListItem_default_instance_.DefaultConstruct();
  _CardListItems_default_instance_.DefaultConstruct();
  _GetCardListFromAppRequest_default_instance_.DefaultConstruct();
  _GetCardListFromAppResponse_default_instance_.DefaultConstruct();
  _AcceptCardListFromAppRequest_default_instance_.DefaultConstruct();
  _AcceptCardListFromAppResponse_default_instance_.DefaultConstruct();
  _GetCardConfigInfoRequest_default_instance_.DefaultConstruct();
  _GetCardConfigInfoResponse_default_instance_.DefaultConstruct();
  _CardDataInfo_default_instance_.DefaultConstruct();
  _BatchGetCardItem_default_instance_.DefaultConstruct();
  _BatchGetCardArray_default_instance_.DefaultConstruct();
  _CardTpInfoItem_default_instance_.DefaultConstruct();
  _BatchGetCardItemByTpInfoRequest_default_instance_.DefaultConstruct();
  _BatchGetCardItemByTpInfoResponse_default_instance_.DefaultConstruct();
  _BatchDelCardItemRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _BatchDelCardItemResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _BatchGetCardItemRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _BatchGetCardItemResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _CardSyncRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _CardSyncRequest_default_instance_.get_mutable()->keybuf_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _CardSyncResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _CardSyncResponse_default_instance_.get_mutable()->cmdlist_ = const_cast< ::micromsg::CmdList*>(
      ::micromsg::CmdList::internal_default_instance());
  _CardSyncResponse_default_instance_.get_mutable()->keybuf_ = const_cast< ::micromsg::SKBuiltinBuffer_t*>(
      ::micromsg::SKBuiltinBuffer_t::internal_default_instance());
  _CardShopLBSRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _CardShopLBSResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GetCardSerialRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _GetCardSerialResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GetCardItemInfoRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _GetCardItemInfoResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GiftCardItemRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _GiftCardItemResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _AcceptCardItemRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _AcceptCardItemResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GetCardCountRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _GetCardCountResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GetAvailableCardRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _GetAvailableCardResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GetCardListFromAppRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _GetCardListFromAppResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _AcceptCardListFromAppRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _AcceptCardListFromAppResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _GetCardConfigInfoRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _GetCardConfigInfoResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
  _BatchGetCardItem_default_instance_.get_mutable()->card_data_info_ = const_cast< ::micromsg::CardDataInfo*>(
      ::micromsg::CardDataInfo::internal_default_instance());
  _BatchGetCardItemByTpInfoRequest_default_instance_.get_mutable()->baserequest_ = const_cast< ::micromsg::BaseRequest*>(
      ::micromsg::BaseRequest::internal_default_instance());
  _BatchGetCardItemByTpInfoResponse_default_instance_.get_mutable()->baseresponse_ = const_cast< ::micromsg::BaseResponse*>(
      ::micromsg::BaseResponse::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\014mmcard.proto\022\010micromsg\032\023mmbuiltintype."
      "proto\032\014mmbase.proto\"m\n\014CardUserItem\022\016\n\006C"
      "ardId\030\001 \001(\t\022\026\n\016UpdateSequence\030\002 \001(\004\022\021\n\tS"
      "tateFlag\030\003 \001(\r\022\022\n\nUpdateTime\030\004 \001(\r\022\016\n\006St"
      "atus\030\005 \001(\r\"W\n\027BatchDelCardItemRequest\022*\n"
      "\013BaseRequest\030\001 \002(\0132\025.micromsg.BaseReques"
      "t\022\020\n\010card_ids\030\002 \003(\t\"_\n\030BatchDelCardItemR"
      "esponse\022,\n\014BaseResponse\030\001 \002(\0132\026.micromsg"
      ".BaseResponse\022\025\n\rsucc_card_ids\030\002 \003(\t\"W\n\027"
      "BatchGetCardItemRequest\022*\n\013BaseRequest\030\001"
      " \002(\0132\025.micromsg.BaseRequest\022\020\n\010card_ids\030"
      "\002 \003(\t\"Z\n\030BatchGetCardItemResponse\022,\n\014Bas"
      "eResponse\030\001 \002(\0132\026.micromsg.BaseResponse\022"
      "\020\n\010json_ret\030\002 \001(\t\"|\n\017CardSyncRequest\022*\n\013"
      "BaseRequest\030\001 \002(\0132\025.micromsg.BaseRequest"
      "\022\020\n\010Selector\030\002 \002(\r\022+\n\006KeyBuf\030\003 \002(\0132\033.mic"
      "romsg.SKBuiltinBuffer_t\"\247\001\n\020CardSyncResp"
      "onse\022,\n\014BaseResponse\030\001 \002(\0132\026.micromsg.Ba"
      "seResponse\022\"\n\007CmdList\030\002 \002(\0132\021.micromsg.C"
      "mdList\022+\n\006KeyBuf\030\003 \002(\0132\033.micromsg.SKBuil"
      "tinBuffer_t\022\024\n\014ContinueFlag\030\004 \002(\r\"y\n\022Car"
      "dShopLBSRequest\022*\n\013BaseRequest\030\001 \002(\0132\025.m"
      "icromsg.BaseRequest\022\022\n\ncard_tp_id\030\002 \001(\t\022"
      "\021\n\tlongitude\030\003 \002(\002\022\020\n\010latitude\030\004 \002(\002\"U\n\023"
      "CardShopLBSResponse\022,\n\014BaseResponse\030\001 \002("
      "\0132\026.micromsg.BaseResponse\022\020\n\010json_ret\030\002 "
      "\001(\t\"S\n\024GetCardSerialRequest\022*\n\013BaseReque"
      "st\030\001 \002(\0132\025.micromsg.BaseRequest\022\017\n\007card_"
      "id\030\002 \002(\t\"\\\n\025GetCardSerialResponse\022,\n\014Bas"
      "eResponse\030\001 \002(\0132\026.micromsg.BaseResponse\022"
      "\025\n\rserial_number\030\002 \001(\t\"\323\001\n\026GetCardItemIn"
      "foRequest\022*\n\013BaseRequest\030\001 \002(\0132\025.microms"
      "g.BaseRequest\022\017\n\007card_id\030\002 \002(\t\022\022\n\nfrom_s"
      "cene\030\003 \002(\r\022\025\n\rfrom_username\030\004 \001(\t\022\020\n\010car"
      "d_ext\030\005 \001(\t\022\030\n\020js_checkinfo_url\030\006 \001(\t\022%\n"
      "\035js_checkinfo_session_username\030\007 \001(\t\"Y\n\027"
      "GetCardItemInfoResponse\022,\n\014BaseResponse\030"
      "\001 \002(\0132\026.micromsg.BaseResponse\022\020\n\010json_re"
      "t\030\002 \001(\t\"g\n\023GiftCardItemRequest\022*\n\013BaseRe"
      "quest\030\001 \002(\0132\025.micromsg.BaseRequest\022\017\n\007ca"
      "rd_id\030\002 \002(\t\022\023\n\013to_username\030\003 \002(\t\"y\n\024Gift"
      "CardItemResponse\022,\n\014BaseResponse\030\001 \002(\0132\026"
      ".micromsg.BaseResponse\022\020\n\010card_ext\030\002 \001(\t"
      "\022\020\n\010ret_code\030\003 \001(\005\022\017\n\007ret_msg\030\004 \001(\t\"\221\001\n\025"
      "AcceptCardItemRequest\022*\n\013BaseRequest\030\001 \002"
      "(\0132\025.micromsg.BaseRequest\022\025\n\rfrom_userna"
      "me\030\002 \001(\t\022\022\n\nfrom_scene\030\003 \002(\r\022\017\n\007card_id\030"
      "\004 \002(\t\022\020\n\010card_ext\030\005 \001(\t\"{\n\026AcceptCardIte"
      "mResponse\022,\n\014BaseResponse\030\001 \002(\0132\026.microm"
      "sg.BaseResponse\022\020\n\010json_ret\030\002 \001(\t\022\020\n\010ret"
      "_code\030\003 \001(\005\022\017\n\007ret_msg\030\004 \001(\t\"A\n\023GetCardC"
      "ountRequest\022*\n\013BaseRequest\030\001 \002(\0132\025.micro"
      "msg.BaseRequest\"S\n\024GetCardCountResponse\022"
      ",\n\014BaseResponse\030\001 \002(\0132\026.micromsg.BaseRes"
      "ponse\022\r\n\005count\030\002 \001(\r\"\332\001\n\027GetAvailableCar"
      "dRequest\022*\n\013BaseRequest\030\001 \002(\0132\025.micromsg"
      ".BaseRequest\022\016\n\006app_id\030\002 \001(\t\022\017\n\007shop_id\030"
      "\003 \001(\r\022\021\n\tsign_type\030\004 \001(\t\022\021\n\tcard_sign\030\005 "
      "\001(\t\022\022\n\ntime_stamp\030\006 \001(\r\022\021\n\tnonce_str\030\007 \001"
      "(\t\022\022\n\ncard_tp_id\030\010 \001(\t\022\021\n\tcard_type\030\t \001("
      "\t\"Z\n\030GetAvailableCardResponse\022,\n\014BaseRes"
      "ponse\030\001 \002(\0132\026.micromsg.BaseResponse\022\020\n\010j"
      "son_ret\030\002 \001(\t\"E\n\014CardListItem\022\022\n\ncard_tp"
      "_id\030\001 \001(\t\022\020\n\010card_ext\030\002 \001(\t\022\017\n\007is_succ\030\003"
      " \001(\005\":\n\rCardListItems\022)\n\tcard_list\030\001 \003(\013"
      "2\026.micromsg.CardListItem\"\275\001\n\031GetCardList"
      "FromAppRequest\022*\n\013BaseRequest\030\001 \002(\0132\025.mi"
      "cromsg.BaseRequest\022)\n\tcard_list\030\002 \003(\0132\026."
      "micromsg.CardListItem\022\022\n\nfrom_scene\030\003 \001("
      "\r\022\021\n\tbundle_id\030\004 \001(\t\022\024\n\014package_name\030\005 \001"
      "(\t\022\014\n\004sign\030\006 \001(\t\"\\\n\032GetCardListFromAppRe"
      "sponse\022,\n\014BaseResponse\030\001 \002(\0132\026.micromsg."
      "BaseResponse\022\020\n\010json_ret\030\002 \001(\t\"\211\001\n\034Accep"
      "tCardListFromAppRequest\022*\n\013BaseRequest\030\001"
      " \002(\0132\025.micromsg.BaseRequest\022)\n\tcard_list"
      "\030\002 \003(\0132\026.micromsg.CardListItem\022\022\n\nfrom_s"
      "cene\030\003 \001(\r\"\202\001\n\035AcceptCardListFromAppResp"
      "onse\022,\n\014BaseResponse\030\001 \002(\0132\026.micromsg.Ba"
      "seResponse\022\020\n\010json_ret\030\002 \001(\t\022\020\n\010ret_code"
      "\030\003 \001(\005\022\017\n\007ret_msg\030\004 \001(\t\"F\n\030GetCardConfig"
      "InfoRequest\022*\n\013BaseRequest\030\001 \002(\0132\025.micro"
      "msg.BaseRequest\"[\n\031GetCardConfigInfoResp"
      "onse\022,\n\014BaseResponse\030\001 \002(\0132\026.micromsg.Ba"
      "seResponse\022\020\n\010json_ret\030\002 \001(\t\"\037\n\014CardData"
      "Info\022\017\n\007card_id\030\001 \001(\t\"S\n\020BatchGetCardIte"
      "m\022\017\n\007card_id\030\001 \001(\t\022.\n\016card_data_info\030\002 \001"
      "(\0132\026.micromsg.CardDataInfo\"C\n\021BatchGetCa"
      "rdArray\022.\n\ncard_array\030\001 \003(\0132\032.micromsg.B"
      "atchGetCardItem\"2\n\016CardTpInfoItem\022\022\n\ncar"
      "d_tp_id\030\001 \001(\t\022\014\n\004code\030\002 \001(\t\"v\n\037BatchGetC"
      "ardItemByTpInfoRequest\022*\n\013BaseRequest\030\001 "
      "\002(\0132\025.micromsg.BaseRequest\022\'\n\005items\030\002 \003("
      "\0132\030.micromsg.CardTpInfoItem\"b\n BatchGetC"
      "ardItemByTpInfoResponse\022,\n\014BaseResponse\030"
      "\001 \002(\0132\026.micromsg.BaseResponse\022\020\n\010json_re"
      "t\030\002 \001(\t"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3807);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mmcard.proto", &protobuf_RegisterTypes);
  ::micromsg::protobuf_mmbuiltintype_2eproto::AddDescriptors();
  ::micromsg::protobuf_mmbase_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_mmcard_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CardUserItem::kCardIdFieldNumber;
const int CardUserItem::kUpdateSequenceFieldNumber;
const int CardUserItem::kStateFlagFieldNumber;
const int CardUserItem::kUpdateTimeFieldNumber;
const int CardUserItem::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CardUserItem::CardUserItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcard_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.CardUserItem)
}
CardUserItem::CardUserItem(const CardUserItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cardid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cardid()) {
    cardid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cardid_);
  }
  ::memcpy(&updatesequence_, &from.updatesequence_,
    reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&updatesequence_) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:micromsg.CardUserItem)
}

void CardUserItem::SharedCtor() {
  _cached_size_ = 0;
  cardid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&updatesequence_, 0, reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&updatesequence_) + sizeof(status_));
}

CardUserItem::~CardUserItem() {
  // @@protoc_insertion_point(destructor:micromsg.CardUserItem)
  SharedDtor();
}

void CardUserItem::SharedDtor() {
  cardid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CardUserItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CardUserItem::descriptor() {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CardUserItem& CardUserItem::default_instance() {
  protobuf_mmcard_2eproto::InitDefaults();
  return *internal_default_instance();
}

CardUserItem* CardUserItem::New(::google::protobuf::Arena* arena) const {
  CardUserItem* n = new CardUserItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CardUserItem::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.CardUserItem)
  if (has_cardid()) {
    GOOGLE_DCHECK(!cardid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*cardid_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&updatesequence_, 0, reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&updatesequence_) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CardUserItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.CardUserItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string CardId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cardid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cardid().data(), this->cardid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.CardUserItem.CardId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 UpdateSequence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_updatesequence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &updatesequence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 StateFlag = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_stateflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stateflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 UpdateTime = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_updatetime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &updatetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 Status = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.CardUserItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.CardUserItem)
  return false;
#undef DO_
}

void CardUserItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.CardUserItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string CardId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cardid().data(), this->cardid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CardUserItem.CardId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cardid(), output);
  }

  // optional uint64 UpdateSequence = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->updatesequence(), output);
  }

  // optional uint32 StateFlag = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->stateflag(), output);
  }

  // optional uint32 UpdateTime = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->updatetime(), output);
  }

  // optional uint32 Status = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.CardUserItem)
}

::google::protobuf::uint8* CardUserItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.CardUserItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string CardId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cardid().data(), this->cardid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CardUserItem.CardId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cardid(), target);
  }

  // optional uint64 UpdateSequence = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->updatesequence(), target);
  }

  // optional uint32 StateFlag = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->stateflag(), target);
  }

  // optional uint32 UpdateTime = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->updatetime(), target);
  }

  // optional uint32 Status = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.CardUserItem)
  return target;
}

size_t CardUserItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.CardUserItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string CardId = 1;
    if (has_cardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cardid());
    }

    // optional uint64 UpdateSequence = 2;
    if (has_updatesequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->updatesequence());
    }

    // optional uint32 StateFlag = 3;
    if (has_stateflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stateflag());
    }

    // optional uint32 UpdateTime = 4;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->updatetime());
    }

    // optional uint32 Status = 5;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CardUserItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.CardUserItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CardUserItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CardUserItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.CardUserItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.CardUserItem)
    MergeFrom(*source);
  }
}

void CardUserItem::MergeFrom(const CardUserItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.CardUserItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_cardid();
      cardid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cardid_);
    }
    if (cached_has_bits & 0x00000002u) {
      updatesequence_ = from.updatesequence_;
    }
    if (cached_has_bits & 0x00000004u) {
      stateflag_ = from.stateflag_;
    }
    if (cached_has_bits & 0x00000008u) {
      updatetime_ = from.updatetime_;
    }
    if (cached_has_bits & 0x00000010u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CardUserItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.CardUserItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CardUserItem::CopyFrom(const CardUserItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.CardUserItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardUserItem::IsInitialized() const {
  return true;
}

void CardUserItem::Swap(CardUserItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CardUserItem::InternalSwap(CardUserItem* other) {
  cardid_.Swap(&other->cardid_);
  std::swap(updatesequence_, other->updatesequence_);
  std::swap(stateflag_, other->stateflag_);
  std::swap(updatetime_, other->updatetime_);
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CardUserItem::GetMetadata() const {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CardUserItem

// optional string CardId = 1;
bool CardUserItem::has_cardid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CardUserItem::set_has_cardid() {
  _has_bits_[0] |= 0x00000001u;
}
void CardUserItem::clear_has_cardid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CardUserItem::clear_cardid() {
  cardid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cardid();
}
const ::std::string& CardUserItem::cardid() const {
  // @@protoc_insertion_point(field_get:micromsg.CardUserItem.CardId)
  return cardid_.GetNoArena();
}
void CardUserItem::set_cardid(const ::std::string& value) {
  set_has_cardid();
  cardid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CardUserItem.CardId)
}
#if LANG_CXX11
void CardUserItem::set_cardid(::std::string&& value) {
  set_has_cardid();
  cardid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CardUserItem.CardId)
}
#endif
void CardUserItem::set_cardid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cardid();
  cardid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CardUserItem.CardId)
}
void CardUserItem::set_cardid(const char* value, size_t size) {
  set_has_cardid();
  cardid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CardUserItem.CardId)
}
::std::string* CardUserItem::mutable_cardid() {
  set_has_cardid();
  // @@protoc_insertion_point(field_mutable:micromsg.CardUserItem.CardId)
  return cardid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CardUserItem::release_cardid() {
  // @@protoc_insertion_point(field_release:micromsg.CardUserItem.CardId)
  clear_has_cardid();
  return cardid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CardUserItem::set_allocated_cardid(::std::string* cardid) {
  if (cardid != NULL) {
    set_has_cardid();
  } else {
    clear_has_cardid();
  }
  cardid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cardid);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CardUserItem.CardId)
}

// optional uint64 UpdateSequence = 2;
bool CardUserItem::has_updatesequence() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CardUserItem::set_has_updatesequence() {
  _has_bits_[0] |= 0x00000002u;
}
void CardUserItem::clear_has_updatesequence() {
  _has_bits_[0] &= ~0x00000002u;
}
void CardUserItem::clear_updatesequence() {
  updatesequence_ = GOOGLE_ULONGLONG(0);
  clear_has_updatesequence();
}
::google::protobuf::uint64 CardUserItem::updatesequence() const {
  // @@protoc_insertion_point(field_get:micromsg.CardUserItem.UpdateSequence)
  return updatesequence_;
}
void CardUserItem::set_updatesequence(::google::protobuf::uint64 value) {
  set_has_updatesequence();
  updatesequence_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CardUserItem.UpdateSequence)
}

// optional uint32 StateFlag = 3;
bool CardUserItem::has_stateflag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CardUserItem::set_has_stateflag() {
  _has_bits_[0] |= 0x00000004u;
}
void CardUserItem::clear_has_stateflag() {
  _has_bits_[0] &= ~0x00000004u;
}
void CardUserItem::clear_stateflag() {
  stateflag_ = 0u;
  clear_has_stateflag();
}
::google::protobuf::uint32 CardUserItem::stateflag() const {
  // @@protoc_insertion_point(field_get:micromsg.CardUserItem.StateFlag)
  return stateflag_;
}
void CardUserItem::set_stateflag(::google::protobuf::uint32 value) {
  set_has_stateflag();
  stateflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CardUserItem.StateFlag)
}

// optional uint32 UpdateTime = 4;
bool CardUserItem::has_updatetime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CardUserItem::set_has_updatetime() {
  _has_bits_[0] |= 0x00000008u;
}
void CardUserItem::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00000008u;
}
void CardUserItem::clear_updatetime() {
  updatetime_ = 0u;
  clear_has_updatetime();
}
::google::protobuf::uint32 CardUserItem::updatetime() const {
  // @@protoc_insertion_point(field_get:micromsg.CardUserItem.UpdateTime)
  return updatetime_;
}
void CardUserItem::set_updatetime(::google::protobuf::uint32 value) {
  set_has_updatetime();
  updatetime_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CardUserItem.UpdateTime)
}

// optional uint32 Status = 5;
bool CardUserItem::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CardUserItem::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
void CardUserItem::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
void CardUserItem::clear_status() {
  status_ = 0u;
  clear_has_status();
}
::google::protobuf::uint32 CardUserItem::status() const {
  // @@protoc_insertion_point(field_get:micromsg.CardUserItem.Status)
  return status_;
}
void CardUserItem::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CardUserItem.Status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchDelCardItemRequest::kBaseRequestFieldNumber;
const int BatchDelCardItemRequest::kCardIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchDelCardItemRequest::BatchDelCardItemRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcard_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BatchDelCardItemRequest)
}
BatchDelCardItemRequest::BatchDelCardItemRequest(const BatchDelCardItemRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      card_ids_(from.card_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.BatchDelCardItemRequest)
}

void BatchDelCardItemRequest::SharedCtor() {
  _cached_size_ = 0;
  baserequest_ = NULL;
}

BatchDelCardItemRequest::~BatchDelCardItemRequest() {
  // @@protoc_insertion_point(destructor:micromsg.BatchDelCardItemRequest)
  SharedDtor();
}

void BatchDelCardItemRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void BatchDelCardItemRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchDelCardItemRequest::descriptor() {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BatchDelCardItemRequest& BatchDelCardItemRequest::default_instance() {
  protobuf_mmcard_2eproto::InitDefaults();
  return *internal_default_instance();
}

BatchDelCardItemRequest* BatchDelCardItemRequest::New(::google::protobuf::Arena* arena) const {
  BatchDelCardItemRequest* n = new BatchDelCardItemRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BatchDelCardItemRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BatchDelCardItemRequest)
  card_ids_.Clear();
  if (has_baserequest()) {
    GOOGLE_DCHECK(baserequest_ != NULL);
    baserequest_->::micromsg::BaseRequest::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BatchDelCardItemRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BatchDelCardItemRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string card_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_card_ids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->card_ids(this->card_ids_size() - 1).data(),
            this->card_ids(this->card_ids_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BatchDelCardItemRequest.card_ids");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BatchDelCardItemRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BatchDelCardItemRequest)
  return false;
#undef DO_
}

void BatchDelCardItemRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BatchDelCardItemRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // repeated string card_ids = 2;
  for (int i = 0, n = this->card_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->card_ids(i).data(), this->card_ids(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BatchDelCardItemRequest.card_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->card_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BatchDelCardItemRequest)
}

::google::protobuf::uint8* BatchDelCardItemRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BatchDelCardItemRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // repeated string card_ids = 2;
  for (int i = 0, n = this->card_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->card_ids(i).data(), this->card_ids(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BatchDelCardItemRequest.card_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->card_ids(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BatchDelCardItemRequest)
  return target;
}

size_t BatchDelCardItemRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BatchDelCardItemRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (has_baserequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }
  // repeated string card_ids = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->card_ids_size());
  for (int i = 0, n = this->card_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->card_ids(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchDelCardItemRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BatchDelCardItemRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchDelCardItemRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchDelCardItemRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BatchDelCardItemRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BatchDelCardItemRequest)
    MergeFrom(*source);
  }
}

void BatchDelCardItemRequest::MergeFrom(const BatchDelCardItemRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BatchDelCardItemRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  card_ids_.MergeFrom(from.card_ids_);
  if (from.has_baserequest()) {
    mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
  }
}

void BatchDelCardItemRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BatchDelCardItemRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchDelCardItemRequest::CopyFrom(const BatchDelCardItemRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BatchDelCardItemRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchDelCardItemRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void BatchDelCardItemRequest::Swap(BatchDelCardItemRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchDelCardItemRequest::InternalSwap(BatchDelCardItemRequest* other) {
  card_ids_.InternalSwap(&other->card_ids_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BatchDelCardItemRequest::GetMetadata() const {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BatchDelCardItemRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool BatchDelCardItemRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BatchDelCardItemRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void BatchDelCardItemRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void BatchDelCardItemRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& BatchDelCardItemRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.BatchDelCardItemRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* BatchDelCardItemRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BatchDelCardItemRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* BatchDelCardItemRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.BatchDelCardItemRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void BatchDelCardItemRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BatchDelCardItemRequest.BaseRequest)
}

// repeated string card_ids = 2;
int BatchDelCardItemRequest::card_ids_size() const {
  return card_ids_.size();
}
void BatchDelCardItemRequest::clear_card_ids() {
  card_ids_.Clear();
}
const ::std::string& BatchDelCardItemRequest::card_ids(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.BatchDelCardItemRequest.card_ids)
  return card_ids_.Get(index);
}
::std::string* BatchDelCardItemRequest::mutable_card_ids(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.BatchDelCardItemRequest.card_ids)
  return card_ids_.Mutable(index);
}
void BatchDelCardItemRequest::set_card_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:micromsg.BatchDelCardItemRequest.card_ids)
  card_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void BatchDelCardItemRequest::set_card_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:micromsg.BatchDelCardItemRequest.card_ids)
  card_ids_.Mutable(index)->assign(std::move(value));
}
#endif
void BatchDelCardItemRequest::set_card_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  card_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:micromsg.BatchDelCardItemRequest.card_ids)
}
void BatchDelCardItemRequest::set_card_ids(int index, const char* value, size_t size) {
  card_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:micromsg.BatchDelCardItemRequest.card_ids)
}
::std::string* BatchDelCardItemRequest::add_card_ids() {
  // @@protoc_insertion_point(field_add_mutable:micromsg.BatchDelCardItemRequest.card_ids)
  return card_ids_.Add();
}
void BatchDelCardItemRequest::add_card_ids(const ::std::string& value) {
  card_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:micromsg.BatchDelCardItemRequest.card_ids)
}
#if LANG_CXX11
void BatchDelCardItemRequest::add_card_ids(::std::string&& value) {
  card_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:micromsg.BatchDelCardItemRequest.card_ids)
}
#endif
void BatchDelCardItemRequest::add_card_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  card_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:micromsg.BatchDelCardItemRequest.card_ids)
}
void BatchDelCardItemRequest::add_card_ids(const char* value, size_t size) {
  card_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:micromsg.BatchDelCardItemRequest.card_ids)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
BatchDelCardItemRequest::card_ids() const {
  // @@protoc_insertion_point(field_list:micromsg.BatchDelCardItemRequest.card_ids)
  return card_ids_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
BatchDelCardItemRequest::mutable_card_ids() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.BatchDelCardItemRequest.card_ids)
  return &card_ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchDelCardItemResponse::kBaseResponseFieldNumber;
const int BatchDelCardItemResponse::kSuccCardIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchDelCardItemResponse::BatchDelCardItemResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcard_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BatchDelCardItemResponse)
}
BatchDelCardItemResponse::BatchDelCardItemResponse(const BatchDelCardItemResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      succ_card_ids_(from.succ_card_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.BatchDelCardItemResponse)
}

void BatchDelCardItemResponse::SharedCtor() {
  _cached_size_ = 0;
  baseresponse_ = NULL;
}

BatchDelCardItemResponse::~BatchDelCardItemResponse() {
  // @@protoc_insertion_point(destructor:micromsg.BatchDelCardItemResponse)
  SharedDtor();
}

void BatchDelCardItemResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void BatchDelCardItemResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchDelCardItemResponse::descriptor() {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BatchDelCardItemResponse& BatchDelCardItemResponse::default_instance() {
  protobuf_mmcard_2eproto::InitDefaults();
  return *internal_default_instance();
}

BatchDelCardItemResponse* BatchDelCardItemResponse::New(::google::protobuf::Arena* arena) const {
  BatchDelCardItemResponse* n = new BatchDelCardItemResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BatchDelCardItemResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BatchDelCardItemResponse)
  succ_card_ids_.Clear();
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BatchDelCardItemResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BatchDelCardItemResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string succ_card_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_succ_card_ids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->succ_card_ids(this->succ_card_ids_size() - 1).data(),
            this->succ_card_ids(this->succ_card_ids_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BatchDelCardItemResponse.succ_card_ids");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BatchDelCardItemResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BatchDelCardItemResponse)
  return false;
#undef DO_
}

void BatchDelCardItemResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BatchDelCardItemResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // repeated string succ_card_ids = 2;
  for (int i = 0, n = this->succ_card_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->succ_card_ids(i).data(), this->succ_card_ids(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BatchDelCardItemResponse.succ_card_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->succ_card_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BatchDelCardItemResponse)
}

::google::protobuf::uint8* BatchDelCardItemResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BatchDelCardItemResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // repeated string succ_card_ids = 2;
  for (int i = 0, n = this->succ_card_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->succ_card_ids(i).data(), this->succ_card_ids(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BatchDelCardItemResponse.succ_card_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->succ_card_ids(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BatchDelCardItemResponse)
  return target;
}

size_t BatchDelCardItemResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BatchDelCardItemResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  // repeated string succ_card_ids = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->succ_card_ids_size());
  for (int i = 0, n = this->succ_card_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->succ_card_ids(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchDelCardItemResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BatchDelCardItemResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchDelCardItemResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchDelCardItemResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BatchDelCardItemResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BatchDelCardItemResponse)
    MergeFrom(*source);
  }
}

void BatchDelCardItemResponse::MergeFrom(const BatchDelCardItemResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BatchDelCardItemResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  succ_card_ids_.MergeFrom(from.succ_card_ids_);
  if (from.has_baseresponse()) {
    mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
  }
}

void BatchDelCardItemResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BatchDelCardItemResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchDelCardItemResponse::CopyFrom(const BatchDelCardItemResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BatchDelCardItemResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchDelCardItemResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void BatchDelCardItemResponse::Swap(BatchDelCardItemResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchDelCardItemResponse::InternalSwap(BatchDelCardItemResponse* other) {
  succ_card_ids_.InternalSwap(&other->succ_card_ids_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BatchDelCardItemResponse::GetMetadata() const {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BatchDelCardItemResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool BatchDelCardItemResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BatchDelCardItemResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void BatchDelCardItemResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void BatchDelCardItemResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& BatchDelCardItemResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.BatchDelCardItemResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* BatchDelCardItemResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BatchDelCardItemResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* BatchDelCardItemResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.BatchDelCardItemResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void BatchDelCardItemResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BatchDelCardItemResponse.BaseResponse)
}

// repeated string succ_card_ids = 2;
int BatchDelCardItemResponse::succ_card_ids_size() const {
  return succ_card_ids_.size();
}
void BatchDelCardItemResponse::clear_succ_card_ids() {
  succ_card_ids_.Clear();
}
const ::std::string& BatchDelCardItemResponse::succ_card_ids(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.BatchDelCardItemResponse.succ_card_ids)
  return succ_card_ids_.Get(index);
}
::std::string* BatchDelCardItemResponse::mutable_succ_card_ids(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.BatchDelCardItemResponse.succ_card_ids)
  return succ_card_ids_.Mutable(index);
}
void BatchDelCardItemResponse::set_succ_card_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:micromsg.BatchDelCardItemResponse.succ_card_ids)
  succ_card_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void BatchDelCardItemResponse::set_succ_card_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:micromsg.BatchDelCardItemResponse.succ_card_ids)
  succ_card_ids_.Mutable(index)->assign(std::move(value));
}
#endif
void BatchDelCardItemResponse::set_succ_card_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  succ_card_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:micromsg.BatchDelCardItemResponse.succ_card_ids)
}
void BatchDelCardItemResponse::set_succ_card_ids(int index, const char* value, size_t size) {
  succ_card_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:micromsg.BatchDelCardItemResponse.succ_card_ids)
}
::std::string* BatchDelCardItemResponse::add_succ_card_ids() {
  // @@protoc_insertion_point(field_add_mutable:micromsg.BatchDelCardItemResponse.succ_card_ids)
  return succ_card_ids_.Add();
}
void BatchDelCardItemResponse::add_succ_card_ids(const ::std::string& value) {
  succ_card_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:micromsg.BatchDelCardItemResponse.succ_card_ids)
}
#if LANG_CXX11
void BatchDelCardItemResponse::add_succ_card_ids(::std::string&& value) {
  succ_card_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:micromsg.BatchDelCardItemResponse.succ_card_ids)
}
#endif
void BatchDelCardItemResponse::add_succ_card_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  succ_card_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:micromsg.BatchDelCardItemResponse.succ_card_ids)
}
void BatchDelCardItemResponse::add_succ_card_ids(const char* value, size_t size) {
  succ_card_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:micromsg.BatchDelCardItemResponse.succ_card_ids)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
BatchDelCardItemResponse::succ_card_ids() const {
  // @@protoc_insertion_point(field_list:micromsg.BatchDelCardItemResponse.succ_card_ids)
  return succ_card_ids_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
BatchDelCardItemResponse::mutable_succ_card_ids() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.BatchDelCardItemResponse.succ_card_ids)
  return &succ_card_ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchGetCardItemRequest::kBaseRequestFieldNumber;
const int BatchGetCardItemRequest::kCardIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchGetCardItemRequest::BatchGetCardItemRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcard_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BatchGetCardItemRequest)
}
BatchGetCardItemRequest::BatchGetCardItemRequest(const BatchGetCardItemRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      card_ids_(from.card_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.BatchGetCardItemRequest)
}

void BatchGetCardItemRequest::SharedCtor() {
  _cached_size_ = 0;
  baserequest_ = NULL;
}

BatchGetCardItemRequest::~BatchGetCardItemRequest() {
  // @@protoc_insertion_point(destructor:micromsg.BatchGetCardItemRequest)
  SharedDtor();
}

void BatchGetCardItemRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void BatchGetCardItemRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchGetCardItemRequest::descriptor() {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BatchGetCardItemRequest& BatchGetCardItemRequest::default_instance() {
  protobuf_mmcard_2eproto::InitDefaults();
  return *internal_default_instance();
}

BatchGetCardItemRequest* BatchGetCardItemRequest::New(::google::protobuf::Arena* arena) const {
  BatchGetCardItemRequest* n = new BatchGetCardItemRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BatchGetCardItemRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BatchGetCardItemRequest)
  card_ids_.Clear();
  if (has_baserequest()) {
    GOOGLE_DCHECK(baserequest_ != NULL);
    baserequest_->::micromsg::BaseRequest::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BatchGetCardItemRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BatchGetCardItemRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string card_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_card_ids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->card_ids(this->card_ids_size() - 1).data(),
            this->card_ids(this->card_ids_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BatchGetCardItemRequest.card_ids");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BatchGetCardItemRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BatchGetCardItemRequest)
  return false;
#undef DO_
}

void BatchGetCardItemRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BatchGetCardItemRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // repeated string card_ids = 2;
  for (int i = 0, n = this->card_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->card_ids(i).data(), this->card_ids(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BatchGetCardItemRequest.card_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->card_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BatchGetCardItemRequest)
}

::google::protobuf::uint8* BatchGetCardItemRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BatchGetCardItemRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // repeated string card_ids = 2;
  for (int i = 0, n = this->card_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->card_ids(i).data(), this->card_ids(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BatchGetCardItemRequest.card_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->card_ids(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BatchGetCardItemRequest)
  return target;
}

size_t BatchGetCardItemRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BatchGetCardItemRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (has_baserequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }
  // repeated string card_ids = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->card_ids_size());
  for (int i = 0, n = this->card_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->card_ids(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchGetCardItemRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BatchGetCardItemRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchGetCardItemRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchGetCardItemRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BatchGetCardItemRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BatchGetCardItemRequest)
    MergeFrom(*source);
  }
}

void BatchGetCardItemRequest::MergeFrom(const BatchGetCardItemRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BatchGetCardItemRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  card_ids_.MergeFrom(from.card_ids_);
  if (from.has_baserequest()) {
    mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
  }
}

void BatchGetCardItemRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BatchGetCardItemRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchGetCardItemRequest::CopyFrom(const BatchGetCardItemRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BatchGetCardItemRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchGetCardItemRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void BatchGetCardItemRequest::Swap(BatchGetCardItemRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchGetCardItemRequest::InternalSwap(BatchGetCardItemRequest* other) {
  card_ids_.InternalSwap(&other->card_ids_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BatchGetCardItemRequest::GetMetadata() const {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BatchGetCardItemRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool BatchGetCardItemRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BatchGetCardItemRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void BatchGetCardItemRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void BatchGetCardItemRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& BatchGetCardItemRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.BatchGetCardItemRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* BatchGetCardItemRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BatchGetCardItemRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* BatchGetCardItemRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.BatchGetCardItemRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void BatchGetCardItemRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BatchGetCardItemRequest.BaseRequest)
}

// repeated string card_ids = 2;
int BatchGetCardItemRequest::card_ids_size() const {
  return card_ids_.size();
}
void BatchGetCardItemRequest::clear_card_ids() {
  card_ids_.Clear();
}
const ::std::string& BatchGetCardItemRequest::card_ids(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.BatchGetCardItemRequest.card_ids)
  return card_ids_.Get(index);
}
::std::string* BatchGetCardItemRequest::mutable_card_ids(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.BatchGetCardItemRequest.card_ids)
  return card_ids_.Mutable(index);
}
void BatchGetCardItemRequest::set_card_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:micromsg.BatchGetCardItemRequest.card_ids)
  card_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void BatchGetCardItemRequest::set_card_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:micromsg.BatchGetCardItemRequest.card_ids)
  card_ids_.Mutable(index)->assign(std::move(value));
}
#endif
void BatchGetCardItemRequest::set_card_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  card_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:micromsg.BatchGetCardItemRequest.card_ids)
}
void BatchGetCardItemRequest::set_card_ids(int index, const char* value, size_t size) {
  card_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:micromsg.BatchGetCardItemRequest.card_ids)
}
::std::string* BatchGetCardItemRequest::add_card_ids() {
  // @@protoc_insertion_point(field_add_mutable:micromsg.BatchGetCardItemRequest.card_ids)
  return card_ids_.Add();
}
void BatchGetCardItemRequest::add_card_ids(const ::std::string& value) {
  card_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:micromsg.BatchGetCardItemRequest.card_ids)
}
#if LANG_CXX11
void BatchGetCardItemRequest::add_card_ids(::std::string&& value) {
  card_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:micromsg.BatchGetCardItemRequest.card_ids)
}
#endif
void BatchGetCardItemRequest::add_card_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  card_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:micromsg.BatchGetCardItemRequest.card_ids)
}
void BatchGetCardItemRequest::add_card_ids(const char* value, size_t size) {
  card_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:micromsg.BatchGetCardItemRequest.card_ids)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
BatchGetCardItemRequest::card_ids() const {
  // @@protoc_insertion_point(field_list:micromsg.BatchGetCardItemRequest.card_ids)
  return card_ids_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
BatchGetCardItemRequest::mutable_card_ids() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.BatchGetCardItemRequest.card_ids)
  return &card_ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchGetCardItemResponse::kBaseResponseFieldNumber;
const int BatchGetCardItemResponse::kJsonRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchGetCardItemResponse::BatchGetCardItemResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcard_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BatchGetCardItemResponse)
}
BatchGetCardItemResponse::BatchGetCardItemResponse(const BatchGetCardItemResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  json_ret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_json_ret()) {
    json_ret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_ret_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.BatchGetCardItemResponse)
}

void BatchGetCardItemResponse::SharedCtor() {
  _cached_size_ = 0;
  json_ret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baseresponse_ = NULL;
}

BatchGetCardItemResponse::~BatchGetCardItemResponse() {
  // @@protoc_insertion_point(destructor:micromsg.BatchGetCardItemResponse)
  SharedDtor();
}

void BatchGetCardItemResponse::SharedDtor() {
  json_ret_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void BatchGetCardItemResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchGetCardItemResponse::descriptor() {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BatchGetCardItemResponse& BatchGetCardItemResponse::default_instance() {
  protobuf_mmcard_2eproto::InitDefaults();
  return *internal_default_instance();
}

BatchGetCardItemResponse* BatchGetCardItemResponse::New(::google::protobuf::Arena* arena) const {
  BatchGetCardItemResponse* n = new BatchGetCardItemResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BatchGetCardItemResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BatchGetCardItemResponse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_json_ret()) {
      GOOGLE_DCHECK(!json_ret_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*json_ret_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BatchGetCardItemResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BatchGetCardItemResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string json_ret = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_json_ret()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->json_ret().data(), this->json_ret().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BatchGetCardItemResponse.json_ret");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BatchGetCardItemResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BatchGetCardItemResponse)
  return false;
#undef DO_
}

void BatchGetCardItemResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BatchGetCardItemResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // optional string json_ret = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->json_ret().data(), this->json_ret().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BatchGetCardItemResponse.json_ret");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->json_ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BatchGetCardItemResponse)
}

::google::protobuf::uint8* BatchGetCardItemResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BatchGetCardItemResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // optional string json_ret = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->json_ret().data(), this->json_ret().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BatchGetCardItemResponse.json_ret");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->json_ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BatchGetCardItemResponse)
  return target;
}

size_t BatchGetCardItemResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BatchGetCardItemResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  // optional string json_ret = 2;
  if (has_json_ret()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->json_ret());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchGetCardItemResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BatchGetCardItemResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchGetCardItemResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchGetCardItemResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BatchGetCardItemResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BatchGetCardItemResponse)
    MergeFrom(*source);
  }
}

void BatchGetCardItemResponse::MergeFrom(const BatchGetCardItemResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BatchGetCardItemResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_json_ret();
      json_ret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_ret_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
  }
}

void BatchGetCardItemResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BatchGetCardItemResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchGetCardItemResponse::CopyFrom(const BatchGetCardItemResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BatchGetCardItemResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchGetCardItemResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void BatchGetCardItemResponse::Swap(BatchGetCardItemResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchGetCardItemResponse::InternalSwap(BatchGetCardItemResponse* other) {
  json_ret_.Swap(&other->json_ret_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BatchGetCardItemResponse::GetMetadata() const {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BatchGetCardItemResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool BatchGetCardItemResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BatchGetCardItemResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000002u;
}
void BatchGetCardItemResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000002u;
}
void BatchGetCardItemResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& BatchGetCardItemResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.BatchGetCardItemResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* BatchGetCardItemResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BatchGetCardItemResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* BatchGetCardItemResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.BatchGetCardItemResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void BatchGetCardItemResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BatchGetCardItemResponse.BaseResponse)
}

// optional string json_ret = 2;
bool BatchGetCardItemResponse::has_json_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BatchGetCardItemResponse::set_has_json_ret() {
  _has_bits_[0] |= 0x00000001u;
}
void BatchGetCardItemResponse::clear_has_json_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
void BatchGetCardItemResponse::clear_json_ret() {
  json_ret_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_json_ret();
}
const ::std::string& BatchGetCardItemResponse::json_ret() const {
  // @@protoc_insertion_point(field_get:micromsg.BatchGetCardItemResponse.json_ret)
  return json_ret_.GetNoArena();
}
void BatchGetCardItemResponse::set_json_ret(const ::std::string& value) {
  set_has_json_ret();
  json_ret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BatchGetCardItemResponse.json_ret)
}
#if LANG_CXX11
void BatchGetCardItemResponse::set_json_ret(::std::string&& value) {
  set_has_json_ret();
  json_ret_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BatchGetCardItemResponse.json_ret)
}
#endif
void BatchGetCardItemResponse::set_json_ret(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_json_ret();
  json_ret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BatchGetCardItemResponse.json_ret)
}
void BatchGetCardItemResponse::set_json_ret(const char* value, size_t size) {
  set_has_json_ret();
  json_ret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BatchGetCardItemResponse.json_ret)
}
::std::string* BatchGetCardItemResponse::mutable_json_ret() {
  set_has_json_ret();
  // @@protoc_insertion_point(field_mutable:micromsg.BatchGetCardItemResponse.json_ret)
  return json_ret_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BatchGetCardItemResponse::release_json_ret() {
  // @@protoc_insertion_point(field_release:micromsg.BatchGetCardItemResponse.json_ret)
  clear_has_json_ret();
  return json_ret_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BatchGetCardItemResponse::set_allocated_json_ret(::std::string* json_ret) {
  if (json_ret != NULL) {
    set_has_json_ret();
  } else {
    clear_has_json_ret();
  }
  json_ret_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), json_ret);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BatchGetCardItemResponse.json_ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CardSyncRequest::kBaseRequestFieldNumber;
const int CardSyncRequest::kSelectorFieldNumber;
const int CardSyncRequest::kKeyBufFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CardSyncRequest::CardSyncRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcard_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.CardSyncRequest)
}
CardSyncRequest::CardSyncRequest(const CardSyncRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  if (from.has_keybuf()) {
    keybuf_ = new ::micromsg::SKBuiltinBuffer_t(*from.keybuf_);
  } else {
    keybuf_ = NULL;
  }
  selector_ = from.selector_;
  // @@protoc_insertion_point(copy_constructor:micromsg.CardSyncRequest)
}

void CardSyncRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&selector_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(selector_));
}

CardSyncRequest::~CardSyncRequest() {
  // @@protoc_insertion_point(destructor:micromsg.CardSyncRequest)
  SharedDtor();
}

void CardSyncRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
  if (this != internal_default_instance()) {
    delete keybuf_;
  }
}

void CardSyncRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CardSyncRequest::descriptor() {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CardSyncRequest& CardSyncRequest::default_instance() {
  protobuf_mmcard_2eproto::InitDefaults();
  return *internal_default_instance();
}

CardSyncRequest* CardSyncRequest::New(::google::protobuf::Arena* arena) const {
  CardSyncRequest* n = new CardSyncRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CardSyncRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.CardSyncRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
    if (has_keybuf()) {
      GOOGLE_DCHECK(keybuf_ != NULL);
      keybuf_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  selector_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CardSyncRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.CardSyncRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 Selector = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_selector();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selector_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t KeyBuf = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_keybuf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.CardSyncRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.CardSyncRequest)
  return false;
#undef DO_
}

void CardSyncRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.CardSyncRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required uint32 Selector = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->selector(), output);
  }

  // required .micromsg.SKBuiltinBuffer_t KeyBuf = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->keybuf_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.CardSyncRequest)
}

::google::protobuf::uint8* CardSyncRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.CardSyncRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required uint32 Selector = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->selector(), target);
  }

  // required .micromsg.SKBuiltinBuffer_t KeyBuf = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->keybuf_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.CardSyncRequest)
  return target;
}

size_t CardSyncRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.CardSyncRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_keybuf()) {
    // required .micromsg.SKBuiltinBuffer_t KeyBuf = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->keybuf_);
  }

  if (has_selector()) {
    // required uint32 Selector = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->selector());
  }

  return total_size;
}
size_t CardSyncRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.CardSyncRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required .micromsg.SKBuiltinBuffer_t KeyBuf = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->keybuf_);

    // required uint32 Selector = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->selector());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CardSyncRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.CardSyncRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CardSyncRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CardSyncRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.CardSyncRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.CardSyncRequest)
    MergeFrom(*source);
  }
}

void CardSyncRequest::MergeFrom(const CardSyncRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.CardSyncRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_keybuf()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.keybuf());
    }
    if (cached_has_bits & 0x00000004u) {
      selector_ = from.selector_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CardSyncRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.CardSyncRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CardSyncRequest::CopyFrom(const CardSyncRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.CardSyncRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardSyncRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  if (has_keybuf()) {
    if (!this->keybuf_->IsInitialized()) return false;
  }
  return true;
}

void CardSyncRequest::Swap(CardSyncRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CardSyncRequest::InternalSwap(CardSyncRequest* other) {
  std::swap(baserequest_, other->baserequest_);
  std::swap(keybuf_, other->keybuf_);
  std::swap(selector_, other->selector_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CardSyncRequest::GetMetadata() const {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CardSyncRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool CardSyncRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CardSyncRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void CardSyncRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void CardSyncRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& CardSyncRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.CardSyncRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* CardSyncRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CardSyncRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* CardSyncRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.CardSyncRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void CardSyncRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CardSyncRequest.BaseRequest)
}

// required uint32 Selector = 2;
bool CardSyncRequest::has_selector() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CardSyncRequest::set_has_selector() {
  _has_bits_[0] |= 0x00000004u;
}
void CardSyncRequest::clear_has_selector() {
  _has_bits_[0] &= ~0x00000004u;
}
void CardSyncRequest::clear_selector() {
  selector_ = 0u;
  clear_has_selector();
}
::google::protobuf::uint32 CardSyncRequest::selector() const {
  // @@protoc_insertion_point(field_get:micromsg.CardSyncRequest.Selector)
  return selector_;
}
void CardSyncRequest::set_selector(::google::protobuf::uint32 value) {
  set_has_selector();
  selector_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CardSyncRequest.Selector)
}

// required .micromsg.SKBuiltinBuffer_t KeyBuf = 3;
bool CardSyncRequest::has_keybuf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CardSyncRequest::set_has_keybuf() {
  _has_bits_[0] |= 0x00000002u;
}
void CardSyncRequest::clear_has_keybuf() {
  _has_bits_[0] &= ~0x00000002u;
}
void CardSyncRequest::clear_keybuf() {
  if (keybuf_ != NULL) keybuf_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_keybuf();
}
const ::micromsg::SKBuiltinBuffer_t& CardSyncRequest::keybuf() const {
  // @@protoc_insertion_point(field_get:micromsg.CardSyncRequest.KeyBuf)
  return keybuf_ != NULL ? *keybuf_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* CardSyncRequest::mutable_keybuf() {
  set_has_keybuf();
  if (keybuf_ == NULL) {
    keybuf_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CardSyncRequest.KeyBuf)
  return keybuf_;
}
::micromsg::SKBuiltinBuffer_t* CardSyncRequest::release_keybuf() {
  // @@protoc_insertion_point(field_release:micromsg.CardSyncRequest.KeyBuf)
  clear_has_keybuf();
  ::micromsg::SKBuiltinBuffer_t* temp = keybuf_;
  keybuf_ = NULL;
  return temp;
}
void CardSyncRequest::set_allocated_keybuf(::micromsg::SKBuiltinBuffer_t* keybuf) {
  delete keybuf_;
  keybuf_ = keybuf;
  if (keybuf) {
    set_has_keybuf();
  } else {
    clear_has_keybuf();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CardSyncRequest.KeyBuf)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CardSyncResponse::kBaseResponseFieldNumber;
const int CardSyncResponse::kCmdListFieldNumber;
const int CardSyncResponse::kKeyBufFieldNumber;
const int CardSyncResponse::kContinueFlagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CardSyncResponse::CardSyncResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcard_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.CardSyncResponse)
}
CardSyncResponse::CardSyncResponse(const CardSyncResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  if (from.has_cmdlist()) {
    cmdlist_ = new ::micromsg::CmdList(*from.cmdlist_);
  } else {
    cmdlist_ = NULL;
  }
  if (from.has_keybuf()) {
    keybuf_ = new ::micromsg::SKBuiltinBuffer_t(*from.keybuf_);
  } else {
    keybuf_ = NULL;
  }
  continueflag_ = from.continueflag_;
  // @@protoc_insertion_point(copy_constructor:micromsg.CardSyncResponse)
}

void CardSyncResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&continueflag_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(continueflag_));
}

CardSyncResponse::~CardSyncResponse() {
  // @@protoc_insertion_point(destructor:micromsg.CardSyncResponse)
  SharedDtor();
}

void CardSyncResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
  if (this != internal_default_instance()) {
    delete cmdlist_;
  }
  if (this != internal_default_instance()) {
    delete keybuf_;
  }
}

void CardSyncResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CardSyncResponse::descriptor() {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CardSyncResponse& CardSyncResponse::default_instance() {
  protobuf_mmcard_2eproto::InitDefaults();
  return *internal_default_instance();
}

CardSyncResponse* CardSyncResponse::New(::google::protobuf::Arena* arena) const {
  CardSyncResponse* n = new CardSyncResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CardSyncResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.CardSyncResponse)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
    if (has_cmdlist()) {
      GOOGLE_DCHECK(cmdlist_ != NULL);
      cmdlist_->::micromsg::CmdList::Clear();
    }
    if (has_keybuf()) {
      GOOGLE_DCHECK(keybuf_ != NULL);
      keybuf_->::micromsg::SKBuiltinBuffer_t::Clear();
    }
  }
  continueflag_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CardSyncResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.CardSyncResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.CmdList CmdList = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmdlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .micromsg.SKBuiltinBuffer_t KeyBuf = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_keybuf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ContinueFlag = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_continueflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &continueflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.CardSyncResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.CardSyncResponse)
  return false;
#undef DO_
}

void CardSyncResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.CardSyncResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // required .micromsg.CmdList CmdList = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->cmdlist_, output);
  }

  // required .micromsg.SKBuiltinBuffer_t KeyBuf = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->keybuf_, output);
  }

  // required uint32 ContinueFlag = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->continueflag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.CardSyncResponse)
}

::google::protobuf::uint8* CardSyncResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.CardSyncResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // required .micromsg.CmdList CmdList = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->cmdlist_, deterministic, target);
  }

  // required .micromsg.SKBuiltinBuffer_t KeyBuf = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->keybuf_, deterministic, target);
  }

  // required uint32 ContinueFlag = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->continueflag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.CardSyncResponse)
  return target;
}

size_t CardSyncResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.CardSyncResponse)
  size_t total_size = 0;

  if (has_baseresponse()) {
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }

  if (has_cmdlist()) {
    // required .micromsg.CmdList CmdList = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cmdlist_);
  }

  if (has_keybuf()) {
    // required .micromsg.SKBuiltinBuffer_t KeyBuf = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->keybuf_);
  }

  if (has_continueflag()) {
    // required uint32 ContinueFlag = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->continueflag());
  }

  return total_size;
}
size_t CardSyncResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.CardSyncResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .micromsg.BaseResponse BaseResponse = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);

    // required .micromsg.CmdList CmdList = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cmdlist_);

    // required .micromsg.SKBuiltinBuffer_t KeyBuf = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->keybuf_);

    // required uint32 ContinueFlag = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->continueflag());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CardSyncResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.CardSyncResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CardSyncResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CardSyncResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.CardSyncResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.CardSyncResponse)
    MergeFrom(*source);
  }
}

void CardSyncResponse::MergeFrom(const CardSyncResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.CardSyncResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_cmdlist()->::micromsg::CmdList::MergeFrom(from.cmdlist());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_keybuf()->::micromsg::SKBuiltinBuffer_t::MergeFrom(from.keybuf());
    }
    if (cached_has_bits & 0x00000008u) {
      continueflag_ = from.continueflag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CardSyncResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.CardSyncResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CardSyncResponse::CopyFrom(const CardSyncResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.CardSyncResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardSyncResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  if (has_cmdlist()) {
    if (!this->cmdlist_->IsInitialized()) return false;
  }
  if (has_keybuf()) {
    if (!this->keybuf_->IsInitialized()) return false;
  }
  return true;
}

void CardSyncResponse::Swap(CardSyncResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CardSyncResponse::InternalSwap(CardSyncResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(cmdlist_, other->cmdlist_);
  std::swap(keybuf_, other->keybuf_);
  std::swap(continueflag_, other->continueflag_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CardSyncResponse::GetMetadata() const {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CardSyncResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool CardSyncResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CardSyncResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void CardSyncResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void CardSyncResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& CardSyncResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.CardSyncResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* CardSyncResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CardSyncResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* CardSyncResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.CardSyncResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void CardSyncResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CardSyncResponse.BaseResponse)
}

// required .micromsg.CmdList CmdList = 2;
bool CardSyncResponse::has_cmdlist() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CardSyncResponse::set_has_cmdlist() {
  _has_bits_[0] |= 0x00000002u;
}
void CardSyncResponse::clear_has_cmdlist() {
  _has_bits_[0] &= ~0x00000002u;
}
void CardSyncResponse::clear_cmdlist() {
  if (cmdlist_ != NULL) cmdlist_->::micromsg::CmdList::Clear();
  clear_has_cmdlist();
}
const ::micromsg::CmdList& CardSyncResponse::cmdlist() const {
  // @@protoc_insertion_point(field_get:micromsg.CardSyncResponse.CmdList)
  return cmdlist_ != NULL ? *cmdlist_
                         : *::micromsg::CmdList::internal_default_instance();
}
::micromsg::CmdList* CardSyncResponse::mutable_cmdlist() {
  set_has_cmdlist();
  if (cmdlist_ == NULL) {
    cmdlist_ = new ::micromsg::CmdList;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CardSyncResponse.CmdList)
  return cmdlist_;
}
::micromsg::CmdList* CardSyncResponse::release_cmdlist() {
  // @@protoc_insertion_point(field_release:micromsg.CardSyncResponse.CmdList)
  clear_has_cmdlist();
  ::micromsg::CmdList* temp = cmdlist_;
  cmdlist_ = NULL;
  return temp;
}
void CardSyncResponse::set_allocated_cmdlist(::micromsg::CmdList* cmdlist) {
  delete cmdlist_;
  cmdlist_ = cmdlist;
  if (cmdlist) {
    set_has_cmdlist();
  } else {
    clear_has_cmdlist();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CardSyncResponse.CmdList)
}

// required .micromsg.SKBuiltinBuffer_t KeyBuf = 3;
bool CardSyncResponse::has_keybuf() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CardSyncResponse::set_has_keybuf() {
  _has_bits_[0] |= 0x00000004u;
}
void CardSyncResponse::clear_has_keybuf() {
  _has_bits_[0] &= ~0x00000004u;
}
void CardSyncResponse::clear_keybuf() {
  if (keybuf_ != NULL) keybuf_->::micromsg::SKBuiltinBuffer_t::Clear();
  clear_has_keybuf();
}
const ::micromsg::SKBuiltinBuffer_t& CardSyncResponse::keybuf() const {
  // @@protoc_insertion_point(field_get:micromsg.CardSyncResponse.KeyBuf)
  return keybuf_ != NULL ? *keybuf_
                         : *::micromsg::SKBuiltinBuffer_t::internal_default_instance();
}
::micromsg::SKBuiltinBuffer_t* CardSyncResponse::mutable_keybuf() {
  set_has_keybuf();
  if (keybuf_ == NULL) {
    keybuf_ = new ::micromsg::SKBuiltinBuffer_t;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CardSyncResponse.KeyBuf)
  return keybuf_;
}
::micromsg::SKBuiltinBuffer_t* CardSyncResponse::release_keybuf() {
  // @@protoc_insertion_point(field_release:micromsg.CardSyncResponse.KeyBuf)
  clear_has_keybuf();
  ::micromsg::SKBuiltinBuffer_t* temp = keybuf_;
  keybuf_ = NULL;
  return temp;
}
void CardSyncResponse::set_allocated_keybuf(::micromsg::SKBuiltinBuffer_t* keybuf) {
  delete keybuf_;
  keybuf_ = keybuf;
  if (keybuf) {
    set_has_keybuf();
  } else {
    clear_has_keybuf();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CardSyncResponse.KeyBuf)
}

// required uint32 ContinueFlag = 4;
bool CardSyncResponse::has_continueflag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CardSyncResponse::set_has_continueflag() {
  _has_bits_[0] |= 0x00000008u;
}
void CardSyncResponse::clear_has_continueflag() {
  _has_bits_[0] &= ~0x00000008u;
}
void CardSyncResponse::clear_continueflag() {
  continueflag_ = 0u;
  clear_has_continueflag();
}
::google::protobuf::uint32 CardSyncResponse::continueflag() const {
  // @@protoc_insertion_point(field_get:micromsg.CardSyncResponse.ContinueFlag)
  return continueflag_;
}
void CardSyncResponse::set_continueflag(::google::protobuf::uint32 value) {
  set_has_continueflag();
  continueflag_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CardSyncResponse.ContinueFlag)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CardShopLBSRequest::kBaseRequestFieldNumber;
const int CardShopLBSRequest::kCardTpIdFieldNumber;
const int CardShopLBSRequest::kLongitudeFieldNumber;
const int CardShopLBSRequest::kLatitudeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CardShopLBSRequest::CardShopLBSRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcard_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.CardShopLBSRequest)
}
CardShopLBSRequest::CardShopLBSRequest(const CardShopLBSRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  card_tp_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_card_tp_id()) {
    card_tp_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.card_tp_id_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  ::memcpy(&longitude_, &from.longitude_,
    reinterpret_cast<char*>(&latitude_) -
    reinterpret_cast<char*>(&longitude_) + sizeof(latitude_));
  // @@protoc_insertion_point(copy_constructor:micromsg.CardShopLBSRequest)
}

void CardShopLBSRequest::SharedCtor() {
  _cached_size_ = 0;
  card_tp_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&latitude_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(latitude_));
}

CardShopLBSRequest::~CardShopLBSRequest() {
  // @@protoc_insertion_point(destructor:micromsg.CardShopLBSRequest)
  SharedDtor();
}

void CardShopLBSRequest::SharedDtor() {
  card_tp_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void CardShopLBSRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CardShopLBSRequest::descriptor() {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CardShopLBSRequest& CardShopLBSRequest::default_instance() {
  protobuf_mmcard_2eproto::InitDefaults();
  return *internal_default_instance();
}

CardShopLBSRequest* CardShopLBSRequest::New(::google::protobuf::Arena* arena) const {
  CardShopLBSRequest* n = new CardShopLBSRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CardShopLBSRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.CardShopLBSRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_card_tp_id()) {
      GOOGLE_DCHECK(!card_tp_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*card_tp_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&longitude_, 0, reinterpret_cast<char*>(&latitude_) -
      reinterpret_cast<char*>(&longitude_) + sizeof(latitude_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CardShopLBSRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.CardShopLBSRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string card_tp_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_card_tp_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->card_tp_id().data(), this->card_tp_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.CardShopLBSRequest.card_tp_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float longitude = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float latitude = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.CardShopLBSRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.CardShopLBSRequest)
  return false;
#undef DO_
}

void CardShopLBSRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.CardShopLBSRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string card_tp_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->card_tp_id().data(), this->card_tp_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CardShopLBSRequest.card_tp_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->card_tp_id(), output);
  }

  // required float longitude = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->longitude(), output);
  }

  // required float latitude = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->latitude(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.CardShopLBSRequest)
}

::google::protobuf::uint8* CardShopLBSRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.CardShopLBSRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string card_tp_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->card_tp_id().data(), this->card_tp_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CardShopLBSRequest.card_tp_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->card_tp_id(), target);
  }

  // required float longitude = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->longitude(), target);
  }

  // required float latitude = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->latitude(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.CardShopLBSRequest)
  return target;
}

size_t CardShopLBSRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.CardShopLBSRequest)
  size_t total_size = 0;

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_longitude()) {
    // required float longitude = 3;
    total_size += 1 + 4;
  }

  if (has_latitude()) {
    // required float latitude = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t CardShopLBSRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.CardShopLBSRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000e) ^ 0x0000000e) == 0) {  // All required fields are present.
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required float longitude = 3;
    total_size += 1 + 4;

    // required float latitude = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string card_tp_id = 2;
  if (has_card_tp_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->card_tp_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CardShopLBSRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.CardShopLBSRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CardShopLBSRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CardShopLBSRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.CardShopLBSRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.CardShopLBSRequest)
    MergeFrom(*source);
  }
}

void CardShopLBSRequest::MergeFrom(const CardShopLBSRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.CardShopLBSRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_card_tp_id();
      card_tp_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.card_tp_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000004u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000008u) {
      latitude_ = from.latitude_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CardShopLBSRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.CardShopLBSRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CardShopLBSRequest::CopyFrom(const CardShopLBSRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.CardShopLBSRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardShopLBSRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void CardShopLBSRequest::Swap(CardShopLBSRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CardShopLBSRequest::InternalSwap(CardShopLBSRequest* other) {
  card_tp_id_.Swap(&other->card_tp_id_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(longitude_, other->longitude_);
  std::swap(latitude_, other->latitude_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CardShopLBSRequest::GetMetadata() const {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CardShopLBSRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool CardShopLBSRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CardShopLBSRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void CardShopLBSRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void CardShopLBSRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& CardShopLBSRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.CardShopLBSRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* CardShopLBSRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CardShopLBSRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* CardShopLBSRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.CardShopLBSRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void CardShopLBSRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CardShopLBSRequest.BaseRequest)
}

// optional string card_tp_id = 2;
bool CardShopLBSRequest::has_card_tp_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CardShopLBSRequest::set_has_card_tp_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CardShopLBSRequest::clear_has_card_tp_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CardShopLBSRequest::clear_card_tp_id() {
  card_tp_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_card_tp_id();
}
const ::std::string& CardShopLBSRequest::card_tp_id() const {
  // @@protoc_insertion_point(field_get:micromsg.CardShopLBSRequest.card_tp_id)
  return card_tp_id_.GetNoArena();
}
void CardShopLBSRequest::set_card_tp_id(const ::std::string& value) {
  set_has_card_tp_id();
  card_tp_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CardShopLBSRequest.card_tp_id)
}
#if LANG_CXX11
void CardShopLBSRequest::set_card_tp_id(::std::string&& value) {
  set_has_card_tp_id();
  card_tp_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CardShopLBSRequest.card_tp_id)
}
#endif
void CardShopLBSRequest::set_card_tp_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_card_tp_id();
  card_tp_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CardShopLBSRequest.card_tp_id)
}
void CardShopLBSRequest::set_card_tp_id(const char* value, size_t size) {
  set_has_card_tp_id();
  card_tp_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CardShopLBSRequest.card_tp_id)
}
::std::string* CardShopLBSRequest::mutable_card_tp_id() {
  set_has_card_tp_id();
  // @@protoc_insertion_point(field_mutable:micromsg.CardShopLBSRequest.card_tp_id)
  return card_tp_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CardShopLBSRequest::release_card_tp_id() {
  // @@protoc_insertion_point(field_release:micromsg.CardShopLBSRequest.card_tp_id)
  clear_has_card_tp_id();
  return card_tp_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CardShopLBSRequest::set_allocated_card_tp_id(::std::string* card_tp_id) {
  if (card_tp_id != NULL) {
    set_has_card_tp_id();
  } else {
    clear_has_card_tp_id();
  }
  card_tp_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), card_tp_id);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CardShopLBSRequest.card_tp_id)
}

// required float longitude = 3;
bool CardShopLBSRequest::has_longitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CardShopLBSRequest::set_has_longitude() {
  _has_bits_[0] |= 0x00000004u;
}
void CardShopLBSRequest::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000004u;
}
void CardShopLBSRequest::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
float CardShopLBSRequest::longitude() const {
  // @@protoc_insertion_point(field_get:micromsg.CardShopLBSRequest.longitude)
  return longitude_;
}
void CardShopLBSRequest::set_longitude(float value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CardShopLBSRequest.longitude)
}

// required float latitude = 4;
bool CardShopLBSRequest::has_latitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CardShopLBSRequest::set_has_latitude() {
  _has_bits_[0] |= 0x00000008u;
}
void CardShopLBSRequest::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000008u;
}
void CardShopLBSRequest::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
float CardShopLBSRequest::latitude() const {
  // @@protoc_insertion_point(field_get:micromsg.CardShopLBSRequest.latitude)
  return latitude_;
}
void CardShopLBSRequest::set_latitude(float value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CardShopLBSRequest.latitude)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CardShopLBSResponse::kBaseResponseFieldNumber;
const int CardShopLBSResponse::kJsonRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CardShopLBSResponse::CardShopLBSResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcard_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.CardShopLBSResponse)
}
CardShopLBSResponse::CardShopLBSResponse(const CardShopLBSResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  json_ret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_json_ret()) {
    json_ret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_ret_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.CardShopLBSResponse)
}

void CardShopLBSResponse::SharedCtor() {
  _cached_size_ = 0;
  json_ret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baseresponse_ = NULL;
}

CardShopLBSResponse::~CardShopLBSResponse() {
  // @@protoc_insertion_point(destructor:micromsg.CardShopLBSResponse)
  SharedDtor();
}

void CardShopLBSResponse::SharedDtor() {
  json_ret_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void CardShopLBSResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CardShopLBSResponse::descriptor() {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CardShopLBSResponse& CardShopLBSResponse::default_instance() {
  protobuf_mmcard_2eproto::InitDefaults();
  return *internal_default_instance();
}

CardShopLBSResponse* CardShopLBSResponse::New(::google::protobuf::Arena* arena) const {
  CardShopLBSResponse* n = new CardShopLBSResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CardShopLBSResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.CardShopLBSResponse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_json_ret()) {
      GOOGLE_DCHECK(!json_ret_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*json_ret_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CardShopLBSResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.CardShopLBSResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string json_ret = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_json_ret()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->json_ret().data(), this->json_ret().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.CardShopLBSResponse.json_ret");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.CardShopLBSResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.CardShopLBSResponse)
  return false;
#undef DO_
}

void CardShopLBSResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.CardShopLBSResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // optional string json_ret = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->json_ret().data(), this->json_ret().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CardShopLBSResponse.json_ret");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->json_ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.CardShopLBSResponse)
}

::google::protobuf::uint8* CardShopLBSResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.CardShopLBSResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // optional string json_ret = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->json_ret().data(), this->json_ret().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CardShopLBSResponse.json_ret");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->json_ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.CardShopLBSResponse)
  return target;
}

size_t CardShopLBSResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.CardShopLBSResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  // optional string json_ret = 2;
  if (has_json_ret()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->json_ret());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CardShopLBSResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.CardShopLBSResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CardShopLBSResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CardShopLBSResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.CardShopLBSResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.CardShopLBSResponse)
    MergeFrom(*source);
  }
}

void CardShopLBSResponse::MergeFrom(const CardShopLBSResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.CardShopLBSResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_json_ret();
      json_ret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_ret_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
  }
}

void CardShopLBSResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.CardShopLBSResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CardShopLBSResponse::CopyFrom(const CardShopLBSResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.CardShopLBSResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardShopLBSResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void CardShopLBSResponse::Swap(CardShopLBSResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CardShopLBSResponse::InternalSwap(CardShopLBSResponse* other) {
  json_ret_.Swap(&other->json_ret_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CardShopLBSResponse::GetMetadata() const {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CardShopLBSResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool CardShopLBSResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CardShopLBSResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000002u;
}
void CardShopLBSResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000002u;
}
void CardShopLBSResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& CardShopLBSResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.CardShopLBSResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* CardShopLBSResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.CardShopLBSResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* CardShopLBSResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.CardShopLBSResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void CardShopLBSResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.CardShopLBSResponse.BaseResponse)
}

// optional string json_ret = 2;
bool CardShopLBSResponse::has_json_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CardShopLBSResponse::set_has_json_ret() {
  _has_bits_[0] |= 0x00000001u;
}
void CardShopLBSResponse::clear_has_json_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
void CardShopLBSResponse::clear_json_ret() {
  json_ret_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_json_ret();
}
const ::std::string& CardShopLBSResponse::json_ret() const {
  // @@protoc_insertion_point(field_get:micromsg.CardShopLBSResponse.json_ret)
  return json_ret_.GetNoArena();
}
void CardShopLBSResponse::set_json_ret(const ::std::string& value) {
  set_has_json_ret();
  json_ret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CardShopLBSResponse.json_ret)
}
#if LANG_CXX11
void CardShopLBSResponse::set_json_ret(::std::string&& value) {
  set_has_json_ret();
  json_ret_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CardShopLBSResponse.json_ret)
}
#endif
void CardShopLBSResponse::set_json_ret(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_json_ret();
  json_ret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CardShopLBSResponse.json_ret)
}
void CardShopLBSResponse::set_json_ret(const char* value, size_t size) {
  set_has_json_ret();
  json_ret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CardShopLBSResponse.json_ret)
}
::std::string* CardShopLBSResponse::mutable_json_ret() {
  set_has_json_ret();
  // @@protoc_insertion_point(field_mutable:micromsg.CardShopLBSResponse.json_ret)
  return json_ret_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CardShopLBSResponse::release_json_ret() {
  // @@protoc_insertion_point(field_release:micromsg.CardShopLBSResponse.json_ret)
  clear_has_json_ret();
  return json_ret_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CardShopLBSResponse::set_allocated_json_ret(::std::string* json_ret) {
  if (json_ret != NULL) {
    set_has_json_ret();
  } else {
    clear_has_json_ret();
  }
  json_ret_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), json_ret);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CardShopLBSResponse.json_ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetCardSerialRequest::kBaseRequestFieldNumber;
const int GetCardSerialRequest::kCardIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetCardSerialRequest::GetCardSerialRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcard_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetCardSerialRequest)
}
GetCardSerialRequest::GetCardSerialRequest(const GetCardSerialRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  card_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_card_id()) {
    card_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.card_id_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.GetCardSerialRequest)
}

void GetCardSerialRequest::SharedCtor() {
  _cached_size_ = 0;
  card_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baserequest_ = NULL;
}

GetCardSerialRequest::~GetCardSerialRequest() {
  // @@protoc_insertion_point(destructor:micromsg.GetCardSerialRequest)
  SharedDtor();
}

void GetCardSerialRequest::SharedDtor() {
  card_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void GetCardSerialRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetCardSerialRequest::descriptor() {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetCardSerialRequest& GetCardSerialRequest::default_instance() {
  protobuf_mmcard_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetCardSerialRequest* GetCardSerialRequest::New(::google::protobuf::Arena* arena) const {
  GetCardSerialRequest* n = new GetCardSerialRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetCardSerialRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetCardSerialRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_card_id()) {
      GOOGLE_DCHECK(!card_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*card_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetCardSerialRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetCardSerialRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string card_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_card_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->card_id().data(), this->card_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetCardSerialRequest.card_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetCardSerialRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetCardSerialRequest)
  return false;
#undef DO_
}

void GetCardSerialRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetCardSerialRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required string card_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->card_id().data(), this->card_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetCardSerialRequest.card_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->card_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetCardSerialRequest)
}

::google::protobuf::uint8* GetCardSerialRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetCardSerialRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required string card_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->card_id().data(), this->card_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetCardSerialRequest.card_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->card_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetCardSerialRequest)
  return target;
}

size_t GetCardSerialRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GetCardSerialRequest)
  size_t total_size = 0;

  if (has_card_id()) {
    // required string card_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->card_id());
  }

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  return total_size;
}
size_t GetCardSerialRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetCardSerialRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string card_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->card_id());

    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCardSerialRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetCardSerialRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCardSerialRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetCardSerialRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetCardSerialRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetCardSerialRequest)
    MergeFrom(*source);
  }
}

void GetCardSerialRequest::MergeFrom(const GetCardSerialRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetCardSerialRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_card_id();
      card_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.card_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
  }
}

void GetCardSerialRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetCardSerialRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCardSerialRequest::CopyFrom(const GetCardSerialRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetCardSerialRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCardSerialRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void GetCardSerialRequest::Swap(GetCardSerialRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetCardSerialRequest::InternalSwap(GetCardSerialRequest* other) {
  card_id_.Swap(&other->card_id_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetCardSerialRequest::GetMetadata() const {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetCardSerialRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool GetCardSerialRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetCardSerialRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000002u;
}
void GetCardSerialRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetCardSerialRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& GetCardSerialRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetCardSerialRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* GetCardSerialRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetCardSerialRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* GetCardSerialRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetCardSerialRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void GetCardSerialRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetCardSerialRequest.BaseRequest)
}

// required string card_id = 2;
bool GetCardSerialRequest::has_card_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetCardSerialRequest::set_has_card_id() {
  _has_bits_[0] |= 0x00000001u;
}
void GetCardSerialRequest::clear_has_card_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetCardSerialRequest::clear_card_id() {
  card_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_card_id();
}
const ::std::string& GetCardSerialRequest::card_id() const {
  // @@protoc_insertion_point(field_get:micromsg.GetCardSerialRequest.card_id)
  return card_id_.GetNoArena();
}
void GetCardSerialRequest::set_card_id(const ::std::string& value) {
  set_has_card_id();
  card_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetCardSerialRequest.card_id)
}
#if LANG_CXX11
void GetCardSerialRequest::set_card_id(::std::string&& value) {
  set_has_card_id();
  card_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetCardSerialRequest.card_id)
}
#endif
void GetCardSerialRequest::set_card_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_card_id();
  card_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetCardSerialRequest.card_id)
}
void GetCardSerialRequest::set_card_id(const char* value, size_t size) {
  set_has_card_id();
  card_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetCardSerialRequest.card_id)
}
::std::string* GetCardSerialRequest::mutable_card_id() {
  set_has_card_id();
  // @@protoc_insertion_point(field_mutable:micromsg.GetCardSerialRequest.card_id)
  return card_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetCardSerialRequest::release_card_id() {
  // @@protoc_insertion_point(field_release:micromsg.GetCardSerialRequest.card_id)
  clear_has_card_id();
  return card_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetCardSerialRequest::set_allocated_card_id(::std::string* card_id) {
  if (card_id != NULL) {
    set_has_card_id();
  } else {
    clear_has_card_id();
  }
  card_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), card_id);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetCardSerialRequest.card_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetCardSerialResponse::kBaseResponseFieldNumber;
const int GetCardSerialResponse::kSerialNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetCardSerialResponse::GetCardSerialResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcard_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetCardSerialResponse)
}
GetCardSerialResponse::GetCardSerialResponse(const GetCardSerialResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serial_number()) {
    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.GetCardSerialResponse)
}

void GetCardSerialResponse::SharedCtor() {
  _cached_size_ = 0;
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baseresponse_ = NULL;
}

GetCardSerialResponse::~GetCardSerialResponse() {
  // @@protoc_insertion_point(destructor:micromsg.GetCardSerialResponse)
  SharedDtor();
}

void GetCardSerialResponse::SharedDtor() {
  serial_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void GetCardSerialResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetCardSerialResponse::descriptor() {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetCardSerialResponse& GetCardSerialResponse::default_instance() {
  protobuf_mmcard_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetCardSerialResponse* GetCardSerialResponse::New(::google::protobuf::Arena* arena) const {
  GetCardSerialResponse* n = new GetCardSerialResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetCardSerialResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetCardSerialResponse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_serial_number()) {
      GOOGLE_DCHECK(!serial_number_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*serial_number_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetCardSerialResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetCardSerialResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string serial_number = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serial_number().data(), this->serial_number().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetCardSerialResponse.serial_number");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetCardSerialResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetCardSerialResponse)
  return false;
#undef DO_
}

void GetCardSerialResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetCardSerialResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // optional string serial_number = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serial_number().data(), this->serial_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetCardSerialResponse.serial_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->serial_number(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetCardSerialResponse)
}

::google::protobuf::uint8* GetCardSerialResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetCardSerialResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // optional string serial_number = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serial_number().data(), this->serial_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetCardSerialResponse.serial_number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->serial_number(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetCardSerialResponse)
  return target;
}

size_t GetCardSerialResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetCardSerialResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  // optional string serial_number = 2;
  if (has_serial_number()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serial_number());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCardSerialResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetCardSerialResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCardSerialResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetCardSerialResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetCardSerialResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetCardSerialResponse)
    MergeFrom(*source);
  }
}

void GetCardSerialResponse::MergeFrom(const GetCardSerialResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetCardSerialResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_serial_number();
      serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
  }
}

void GetCardSerialResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetCardSerialResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCardSerialResponse::CopyFrom(const GetCardSerialResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetCardSerialResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCardSerialResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void GetCardSerialResponse::Swap(GetCardSerialResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetCardSerialResponse::InternalSwap(GetCardSerialResponse* other) {
  serial_number_.Swap(&other->serial_number_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetCardSerialResponse::GetMetadata() const {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetCardSerialResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool GetCardSerialResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetCardSerialResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000002u;
}
void GetCardSerialResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetCardSerialResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& GetCardSerialResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetCardSerialResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* GetCardSerialResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetCardSerialResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* GetCardSerialResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetCardSerialResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void GetCardSerialResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetCardSerialResponse.BaseResponse)
}

// optional string serial_number = 2;
bool GetCardSerialResponse::has_serial_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetCardSerialResponse::set_has_serial_number() {
  _has_bits_[0] |= 0x00000001u;
}
void GetCardSerialResponse::clear_has_serial_number() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetCardSerialResponse::clear_serial_number() {
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serial_number();
}
const ::std::string& GetCardSerialResponse::serial_number() const {
  // @@protoc_insertion_point(field_get:micromsg.GetCardSerialResponse.serial_number)
  return serial_number_.GetNoArena();
}
void GetCardSerialResponse::set_serial_number(const ::std::string& value) {
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetCardSerialResponse.serial_number)
}
#if LANG_CXX11
void GetCardSerialResponse::set_serial_number(::std::string&& value) {
  set_has_serial_number();
  serial_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetCardSerialResponse.serial_number)
}
#endif
void GetCardSerialResponse::set_serial_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetCardSerialResponse.serial_number)
}
void GetCardSerialResponse::set_serial_number(const char* value, size_t size) {
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetCardSerialResponse.serial_number)
}
::std::string* GetCardSerialResponse::mutable_serial_number() {
  set_has_serial_number();
  // @@protoc_insertion_point(field_mutable:micromsg.GetCardSerialResponse.serial_number)
  return serial_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetCardSerialResponse::release_serial_number() {
  // @@protoc_insertion_point(field_release:micromsg.GetCardSerialResponse.serial_number)
  clear_has_serial_number();
  return serial_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetCardSerialResponse::set_allocated_serial_number(::std::string* serial_number) {
  if (serial_number != NULL) {
    set_has_serial_number();
  } else {
    clear_has_serial_number();
  }
  serial_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial_number);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetCardSerialResponse.serial_number)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetCardItemInfoRequest::kBaseRequestFieldNumber;
const int GetCardItemInfoRequest::kCardIdFieldNumber;
const int GetCardItemInfoRequest::kFromSceneFieldNumber;
const int GetCardItemInfoRequest::kFromUsernameFieldNumber;
const int GetCardItemInfoRequest::kCardExtFieldNumber;
const int GetCardItemInfoRequest::kJsCheckinfoUrlFieldNumber;
const int GetCardItemInfoRequest::kJsCheckinfoSessionUsernameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetCardItemInfoRequest::GetCardItemInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcard_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetCardItemInfoRequest)
}
GetCardItemInfoRequest::GetCardItemInfoRequest(const GetCardItemInfoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  card_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_card_id()) {
    card_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.card_id_);
  }
  from_username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_from_username()) {
    from_username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_username_);
  }
  card_ext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_card_ext()) {
    card_ext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.card_ext_);
  }
  js_checkinfo_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_js_checkinfo_url()) {
    js_checkinfo_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.js_checkinfo_url_);
  }
  js_checkinfo_session_username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_js_checkinfo_session_username()) {
    js_checkinfo_session_username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.js_checkinfo_session_username_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  from_scene_ = from.from_scene_;
  // @@protoc_insertion_point(copy_constructor:micromsg.GetCardItemInfoRequest)
}

void GetCardItemInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  card_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  card_ext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  js_checkinfo_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  js_checkinfo_session_username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&from_scene_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(from_scene_));
}

GetCardItemInfoRequest::~GetCardItemInfoRequest() {
  // @@protoc_insertion_point(destructor:micromsg.GetCardItemInfoRequest)
  SharedDtor();
}

void GetCardItemInfoRequest::SharedDtor() {
  card_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  card_ext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  js_checkinfo_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  js_checkinfo_session_username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void GetCardItemInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetCardItemInfoRequest::descriptor() {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetCardItemInfoRequest& GetCardItemInfoRequest::default_instance() {
  protobuf_mmcard_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetCardItemInfoRequest* GetCardItemInfoRequest::New(::google::protobuf::Arena* arena) const {
  GetCardItemInfoRequest* n = new GetCardItemInfoRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetCardItemInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetCardItemInfoRequest)
  if (_has_bits_[0 / 32] & 63u) {
    if (has_card_id()) {
      GOOGLE_DCHECK(!card_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*card_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_from_username()) {
      GOOGLE_DCHECK(!from_username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*from_username_.UnsafeRawStringPointer())->clear();
    }
    if (has_card_ext()) {
      GOOGLE_DCHECK(!card_ext_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*card_ext_.UnsafeRawStringPointer())->clear();
    }
    if (has_js_checkinfo_url()) {
      GOOGLE_DCHECK(!js_checkinfo_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*js_checkinfo_url_.UnsafeRawStringPointer())->clear();
    }
    if (has_js_checkinfo_session_username()) {
      GOOGLE_DCHECK(!js_checkinfo_session_username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*js_checkinfo_session_username_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  from_scene_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetCardItemInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetCardItemInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string card_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_card_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->card_id().data(), this->card_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetCardItemInfoRequest.card_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 from_scene = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_from_scene();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_scene_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string from_username = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->from_username().data(), this->from_username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetCardItemInfoRequest.from_username");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string card_ext = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_card_ext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->card_ext().data(), this->card_ext().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetCardItemInfoRequest.card_ext");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string js_checkinfo_url = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_js_checkinfo_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->js_checkinfo_url().data(), this->js_checkinfo_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetCardItemInfoRequest.js_checkinfo_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string js_checkinfo_session_username = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_js_checkinfo_session_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->js_checkinfo_session_username().data(), this->js_checkinfo_session_username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetCardItemInfoRequest.js_checkinfo_session_username");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetCardItemInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetCardItemInfoRequest)
  return false;
#undef DO_
}

void GetCardItemInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetCardItemInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required string card_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->card_id().data(), this->card_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetCardItemInfoRequest.card_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->card_id(), output);
  }

  // required uint32 from_scene = 3;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->from_scene(), output);
  }

  // optional string from_username = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from_username().data(), this->from_username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetCardItemInfoRequest.from_username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->from_username(), output);
  }

  // optional string card_ext = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->card_ext().data(), this->card_ext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetCardItemInfoRequest.card_ext");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->card_ext(), output);
  }

  // optional string js_checkinfo_url = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->js_checkinfo_url().data(), this->js_checkinfo_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetCardItemInfoRequest.js_checkinfo_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->js_checkinfo_url(), output);
  }

  // optional string js_checkinfo_session_username = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->js_checkinfo_session_username().data(), this->js_checkinfo_session_username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetCardItemInfoRequest.js_checkinfo_session_username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->js_checkinfo_session_username(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetCardItemInfoRequest)
}

::google::protobuf::uint8* GetCardItemInfoRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetCardItemInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required string card_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->card_id().data(), this->card_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetCardItemInfoRequest.card_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->card_id(), target);
  }

  // required uint32 from_scene = 3;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->from_scene(), target);
  }

  // optional string from_username = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from_username().data(), this->from_username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetCardItemInfoRequest.from_username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->from_username(), target);
  }

  // optional string card_ext = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->card_ext().data(), this->card_ext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetCardItemInfoRequest.card_ext");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->card_ext(), target);
  }

  // optional string js_checkinfo_url = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->js_checkinfo_url().data(), this->js_checkinfo_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetCardItemInfoRequest.js_checkinfo_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->js_checkinfo_url(), target);
  }

  // optional string js_checkinfo_session_username = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->js_checkinfo_session_username().data(), this->js_checkinfo_session_username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetCardItemInfoRequest.js_checkinfo_session_username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->js_checkinfo_session_username(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetCardItemInfoRequest)
  return target;
}

size_t GetCardItemInfoRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GetCardItemInfoRequest)
  size_t total_size = 0;

  if (has_card_id()) {
    // required string card_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->card_id());
  }

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_from_scene()) {
    // required uint32 from_scene = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->from_scene());
  }

  return total_size;
}
size_t GetCardItemInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetCardItemInfoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000061) ^ 0x00000061) == 0) {  // All required fields are present.
    // required string card_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->card_id());

    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 from_scene = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->from_scene());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 30u) {
    // optional string from_username = 4;
    if (has_from_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_username());
    }

    // optional string card_ext = 5;
    if (has_card_ext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->card_ext());
    }

    // optional string js_checkinfo_url = 6;
    if (has_js_checkinfo_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->js_checkinfo_url());
    }

    // optional string js_checkinfo_session_username = 7;
    if (has_js_checkinfo_session_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->js_checkinfo_session_username());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCardItemInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetCardItemInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCardItemInfoRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetCardItemInfoRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetCardItemInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetCardItemInfoRequest)
    MergeFrom(*source);
  }
}

void GetCardItemInfoRequest::MergeFrom(const GetCardItemInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetCardItemInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_card_id();
      card_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.card_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_from_username();
      from_username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_username_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_card_ext();
      card_ext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.card_ext_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_js_checkinfo_url();
      js_checkinfo_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.js_checkinfo_url_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_js_checkinfo_session_username();
      js_checkinfo_session_username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.js_checkinfo_session_username_);
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000040u) {
      from_scene_ = from.from_scene_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetCardItemInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetCardItemInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCardItemInfoRequest::CopyFrom(const GetCardItemInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetCardItemInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCardItemInfoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000061) != 0x00000061) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void GetCardItemInfoRequest::Swap(GetCardItemInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetCardItemInfoRequest::InternalSwap(GetCardItemInfoRequest* other) {
  card_id_.Swap(&other->card_id_);
  from_username_.Swap(&other->from_username_);
  card_ext_.Swap(&other->card_ext_);
  js_checkinfo_url_.Swap(&other->js_checkinfo_url_);
  js_checkinfo_session_username_.Swap(&other->js_checkinfo_session_username_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(from_scene_, other->from_scene_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetCardItemInfoRequest::GetMetadata() const {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetCardItemInfoRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool GetCardItemInfoRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void GetCardItemInfoRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000020u;
}
void GetCardItemInfoRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000020u;
}
void GetCardItemInfoRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& GetCardItemInfoRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetCardItemInfoRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* GetCardItemInfoRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetCardItemInfoRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* GetCardItemInfoRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetCardItemInfoRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void GetCardItemInfoRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetCardItemInfoRequest.BaseRequest)
}

// required string card_id = 2;
bool GetCardItemInfoRequest::has_card_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetCardItemInfoRequest::set_has_card_id() {
  _has_bits_[0] |= 0x00000001u;
}
void GetCardItemInfoRequest::clear_has_card_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetCardItemInfoRequest::clear_card_id() {
  card_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_card_id();
}
const ::std::string& GetCardItemInfoRequest::card_id() const {
  // @@protoc_insertion_point(field_get:micromsg.GetCardItemInfoRequest.card_id)
  return card_id_.GetNoArena();
}
void GetCardItemInfoRequest::set_card_id(const ::std::string& value) {
  set_has_card_id();
  card_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetCardItemInfoRequest.card_id)
}
#if LANG_CXX11
void GetCardItemInfoRequest::set_card_id(::std::string&& value) {
  set_has_card_id();
  card_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetCardItemInfoRequest.card_id)
}
#endif
void GetCardItemInfoRequest::set_card_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_card_id();
  card_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetCardItemInfoRequest.card_id)
}
void GetCardItemInfoRequest::set_card_id(const char* value, size_t size) {
  set_has_card_id();
  card_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetCardItemInfoRequest.card_id)
}
::std::string* GetCardItemInfoRequest::mutable_card_id() {
  set_has_card_id();
  // @@protoc_insertion_point(field_mutable:micromsg.GetCardItemInfoRequest.card_id)
  return card_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetCardItemInfoRequest::release_card_id() {
  // @@protoc_insertion_point(field_release:micromsg.GetCardItemInfoRequest.card_id)
  clear_has_card_id();
  return card_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetCardItemInfoRequest::set_allocated_card_id(::std::string* card_id) {
  if (card_id != NULL) {
    set_has_card_id();
  } else {
    clear_has_card_id();
  }
  card_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), card_id);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetCardItemInfoRequest.card_id)
}

// required uint32 from_scene = 3;
bool GetCardItemInfoRequest::has_from_scene() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void GetCardItemInfoRequest::set_has_from_scene() {
  _has_bits_[0] |= 0x00000040u;
}
void GetCardItemInfoRequest::clear_has_from_scene() {
  _has_bits_[0] &= ~0x00000040u;
}
void GetCardItemInfoRequest::clear_from_scene() {
  from_scene_ = 0u;
  clear_has_from_scene();
}
::google::protobuf::uint32 GetCardItemInfoRequest::from_scene() const {
  // @@protoc_insertion_point(field_get:micromsg.GetCardItemInfoRequest.from_scene)
  return from_scene_;
}
void GetCardItemInfoRequest::set_from_scene(::google::protobuf::uint32 value) {
  set_has_from_scene();
  from_scene_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetCardItemInfoRequest.from_scene)
}

// optional string from_username = 4;
bool GetCardItemInfoRequest::has_from_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetCardItemInfoRequest::set_has_from_username() {
  _has_bits_[0] |= 0x00000002u;
}
void GetCardItemInfoRequest::clear_has_from_username() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetCardItemInfoRequest::clear_from_username() {
  from_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_from_username();
}
const ::std::string& GetCardItemInfoRequest::from_username() const {
  // @@protoc_insertion_point(field_get:micromsg.GetCardItemInfoRequest.from_username)
  return from_username_.GetNoArena();
}
void GetCardItemInfoRequest::set_from_username(const ::std::string& value) {
  set_has_from_username();
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetCardItemInfoRequest.from_username)
}
#if LANG_CXX11
void GetCardItemInfoRequest::set_from_username(::std::string&& value) {
  set_has_from_username();
  from_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetCardItemInfoRequest.from_username)
}
#endif
void GetCardItemInfoRequest::set_from_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_from_username();
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetCardItemInfoRequest.from_username)
}
void GetCardItemInfoRequest::set_from_username(const char* value, size_t size) {
  set_has_from_username();
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetCardItemInfoRequest.from_username)
}
::std::string* GetCardItemInfoRequest::mutable_from_username() {
  set_has_from_username();
  // @@protoc_insertion_point(field_mutable:micromsg.GetCardItemInfoRequest.from_username)
  return from_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetCardItemInfoRequest::release_from_username() {
  // @@protoc_insertion_point(field_release:micromsg.GetCardItemInfoRequest.from_username)
  clear_has_from_username();
  return from_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetCardItemInfoRequest::set_allocated_from_username(::std::string* from_username) {
  if (from_username != NULL) {
    set_has_from_username();
  } else {
    clear_has_from_username();
  }
  from_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_username);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetCardItemInfoRequest.from_username)
}

// optional string card_ext = 5;
bool GetCardItemInfoRequest::has_card_ext() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetCardItemInfoRequest::set_has_card_ext() {
  _has_bits_[0] |= 0x00000004u;
}
void GetCardItemInfoRequest::clear_has_card_ext() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetCardItemInfoRequest::clear_card_ext() {
  card_ext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_card_ext();
}
const ::std::string& GetCardItemInfoRequest::card_ext() const {
  // @@protoc_insertion_point(field_get:micromsg.GetCardItemInfoRequest.card_ext)
  return card_ext_.GetNoArena();
}
void GetCardItemInfoRequest::set_card_ext(const ::std::string& value) {
  set_has_card_ext();
  card_ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetCardItemInfoRequest.card_ext)
}
#if LANG_CXX11
void GetCardItemInfoRequest::set_card_ext(::std::string&& value) {
  set_has_card_ext();
  card_ext_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetCardItemInfoRequest.card_ext)
}
#endif
void GetCardItemInfoRequest::set_card_ext(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_card_ext();
  card_ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetCardItemInfoRequest.card_ext)
}
void GetCardItemInfoRequest::set_card_ext(const char* value, size_t size) {
  set_has_card_ext();
  card_ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetCardItemInfoRequest.card_ext)
}
::std::string* GetCardItemInfoRequest::mutable_card_ext() {
  set_has_card_ext();
  // @@protoc_insertion_point(field_mutable:micromsg.GetCardItemInfoRequest.card_ext)
  return card_ext_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetCardItemInfoRequest::release_card_ext() {
  // @@protoc_insertion_point(field_release:micromsg.GetCardItemInfoRequest.card_ext)
  clear_has_card_ext();
  return card_ext_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetCardItemInfoRequest::set_allocated_card_ext(::std::string* card_ext) {
  if (card_ext != NULL) {
    set_has_card_ext();
  } else {
    clear_has_card_ext();
  }
  card_ext_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), card_ext);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetCardItemInfoRequest.card_ext)
}

// optional string js_checkinfo_url = 6;
bool GetCardItemInfoRequest::has_js_checkinfo_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GetCardItemInfoRequest::set_has_js_checkinfo_url() {
  _has_bits_[0] |= 0x00000008u;
}
void GetCardItemInfoRequest::clear_has_js_checkinfo_url() {
  _has_bits_[0] &= ~0x00000008u;
}
void GetCardItemInfoRequest::clear_js_checkinfo_url() {
  js_checkinfo_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_js_checkinfo_url();
}
const ::std::string& GetCardItemInfoRequest::js_checkinfo_url() const {
  // @@protoc_insertion_point(field_get:micromsg.GetCardItemInfoRequest.js_checkinfo_url)
  return js_checkinfo_url_.GetNoArena();
}
void GetCardItemInfoRequest::set_js_checkinfo_url(const ::std::string& value) {
  set_has_js_checkinfo_url();
  js_checkinfo_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetCardItemInfoRequest.js_checkinfo_url)
}
#if LANG_CXX11
void GetCardItemInfoRequest::set_js_checkinfo_url(::std::string&& value) {
  set_has_js_checkinfo_url();
  js_checkinfo_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetCardItemInfoRequest.js_checkinfo_url)
}
#endif
void GetCardItemInfoRequest::set_js_checkinfo_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_js_checkinfo_url();
  js_checkinfo_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetCardItemInfoRequest.js_checkinfo_url)
}
void GetCardItemInfoRequest::set_js_checkinfo_url(const char* value, size_t size) {
  set_has_js_checkinfo_url();
  js_checkinfo_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetCardItemInfoRequest.js_checkinfo_url)
}
::std::string* GetCardItemInfoRequest::mutable_js_checkinfo_url() {
  set_has_js_checkinfo_url();
  // @@protoc_insertion_point(field_mutable:micromsg.GetCardItemInfoRequest.js_checkinfo_url)
  return js_checkinfo_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetCardItemInfoRequest::release_js_checkinfo_url() {
  // @@protoc_insertion_point(field_release:micromsg.GetCardItemInfoRequest.js_checkinfo_url)
  clear_has_js_checkinfo_url();
  return js_checkinfo_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetCardItemInfoRequest::set_allocated_js_checkinfo_url(::std::string* js_checkinfo_url) {
  if (js_checkinfo_url != NULL) {
    set_has_js_checkinfo_url();
  } else {
    clear_has_js_checkinfo_url();
  }
  js_checkinfo_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), js_checkinfo_url);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetCardItemInfoRequest.js_checkinfo_url)
}

// optional string js_checkinfo_session_username = 7;
bool GetCardItemInfoRequest::has_js_checkinfo_session_username() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GetCardItemInfoRequest::set_has_js_checkinfo_session_username() {
  _has_bits_[0] |= 0x00000010u;
}
void GetCardItemInfoRequest::clear_has_js_checkinfo_session_username() {
  _has_bits_[0] &= ~0x00000010u;
}
void GetCardItemInfoRequest::clear_js_checkinfo_session_username() {
  js_checkinfo_session_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_js_checkinfo_session_username();
}
const ::std::string& GetCardItemInfoRequest::js_checkinfo_session_username() const {
  // @@protoc_insertion_point(field_get:micromsg.GetCardItemInfoRequest.js_checkinfo_session_username)
  return js_checkinfo_session_username_.GetNoArena();
}
void GetCardItemInfoRequest::set_js_checkinfo_session_username(const ::std::string& value) {
  set_has_js_checkinfo_session_username();
  js_checkinfo_session_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetCardItemInfoRequest.js_checkinfo_session_username)
}
#if LANG_CXX11
void GetCardItemInfoRequest::set_js_checkinfo_session_username(::std::string&& value) {
  set_has_js_checkinfo_session_username();
  js_checkinfo_session_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetCardItemInfoRequest.js_checkinfo_session_username)
}
#endif
void GetCardItemInfoRequest::set_js_checkinfo_session_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_js_checkinfo_session_username();
  js_checkinfo_session_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetCardItemInfoRequest.js_checkinfo_session_username)
}
void GetCardItemInfoRequest::set_js_checkinfo_session_username(const char* value, size_t size) {
  set_has_js_checkinfo_session_username();
  js_checkinfo_session_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetCardItemInfoRequest.js_checkinfo_session_username)
}
::std::string* GetCardItemInfoRequest::mutable_js_checkinfo_session_username() {
  set_has_js_checkinfo_session_username();
  // @@protoc_insertion_point(field_mutable:micromsg.GetCardItemInfoRequest.js_checkinfo_session_username)
  return js_checkinfo_session_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetCardItemInfoRequest::release_js_checkinfo_session_username() {
  // @@protoc_insertion_point(field_release:micromsg.GetCardItemInfoRequest.js_checkinfo_session_username)
  clear_has_js_checkinfo_session_username();
  return js_checkinfo_session_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetCardItemInfoRequest::set_allocated_js_checkinfo_session_username(::std::string* js_checkinfo_session_username) {
  if (js_checkinfo_session_username != NULL) {
    set_has_js_checkinfo_session_username();
  } else {
    clear_has_js_checkinfo_session_username();
  }
  js_checkinfo_session_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), js_checkinfo_session_username);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetCardItemInfoRequest.js_checkinfo_session_username)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetCardItemInfoResponse::kBaseResponseFieldNumber;
const int GetCardItemInfoResponse::kJsonRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetCardItemInfoResponse::GetCardItemInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcard_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetCardItemInfoResponse)
}
GetCardItemInfoResponse::GetCardItemInfoResponse(const GetCardItemInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  json_ret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_json_ret()) {
    json_ret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_ret_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.GetCardItemInfoResponse)
}

void GetCardItemInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  json_ret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baseresponse_ = NULL;
}

GetCardItemInfoResponse::~GetCardItemInfoResponse() {
  // @@protoc_insertion_point(destructor:micromsg.GetCardItemInfoResponse)
  SharedDtor();
}

void GetCardItemInfoResponse::SharedDtor() {
  json_ret_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void GetCardItemInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetCardItemInfoResponse::descriptor() {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetCardItemInfoResponse& GetCardItemInfoResponse::default_instance() {
  protobuf_mmcard_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetCardItemInfoResponse* GetCardItemInfoResponse::New(::google::protobuf::Arena* arena) const {
  GetCardItemInfoResponse* n = new GetCardItemInfoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetCardItemInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetCardItemInfoResponse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_json_ret()) {
      GOOGLE_DCHECK(!json_ret_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*json_ret_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetCardItemInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetCardItemInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string json_ret = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_json_ret()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->json_ret().data(), this->json_ret().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetCardItemInfoResponse.json_ret");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetCardItemInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetCardItemInfoResponse)
  return false;
#undef DO_
}

void GetCardItemInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetCardItemInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // optional string json_ret = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->json_ret().data(), this->json_ret().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetCardItemInfoResponse.json_ret");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->json_ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetCardItemInfoResponse)
}

::google::protobuf::uint8* GetCardItemInfoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetCardItemInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // optional string json_ret = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->json_ret().data(), this->json_ret().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetCardItemInfoResponse.json_ret");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->json_ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetCardItemInfoResponse)
  return target;
}

size_t GetCardItemInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetCardItemInfoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  // optional string json_ret = 2;
  if (has_json_ret()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->json_ret());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCardItemInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetCardItemInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCardItemInfoResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetCardItemInfoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetCardItemInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetCardItemInfoResponse)
    MergeFrom(*source);
  }
}

void GetCardItemInfoResponse::MergeFrom(const GetCardItemInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetCardItemInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_json_ret();
      json_ret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_ret_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
  }
}

void GetCardItemInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetCardItemInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCardItemInfoResponse::CopyFrom(const GetCardItemInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetCardItemInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCardItemInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void GetCardItemInfoResponse::Swap(GetCardItemInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetCardItemInfoResponse::InternalSwap(GetCardItemInfoResponse* other) {
  json_ret_.Swap(&other->json_ret_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetCardItemInfoResponse::GetMetadata() const {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetCardItemInfoResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool GetCardItemInfoResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetCardItemInfoResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000002u;
}
void GetCardItemInfoResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetCardItemInfoResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& GetCardItemInfoResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetCardItemInfoResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* GetCardItemInfoResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetCardItemInfoResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* GetCardItemInfoResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetCardItemInfoResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void GetCardItemInfoResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetCardItemInfoResponse.BaseResponse)
}

// optional string json_ret = 2;
bool GetCardItemInfoResponse::has_json_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetCardItemInfoResponse::set_has_json_ret() {
  _has_bits_[0] |= 0x00000001u;
}
void GetCardItemInfoResponse::clear_has_json_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetCardItemInfoResponse::clear_json_ret() {
  json_ret_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_json_ret();
}
const ::std::string& GetCardItemInfoResponse::json_ret() const {
  // @@protoc_insertion_point(field_get:micromsg.GetCardItemInfoResponse.json_ret)
  return json_ret_.GetNoArena();
}
void GetCardItemInfoResponse::set_json_ret(const ::std::string& value) {
  set_has_json_ret();
  json_ret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetCardItemInfoResponse.json_ret)
}
#if LANG_CXX11
void GetCardItemInfoResponse::set_json_ret(::std::string&& value) {
  set_has_json_ret();
  json_ret_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetCardItemInfoResponse.json_ret)
}
#endif
void GetCardItemInfoResponse::set_json_ret(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_json_ret();
  json_ret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetCardItemInfoResponse.json_ret)
}
void GetCardItemInfoResponse::set_json_ret(const char* value, size_t size) {
  set_has_json_ret();
  json_ret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetCardItemInfoResponse.json_ret)
}
::std::string* GetCardItemInfoResponse::mutable_json_ret() {
  set_has_json_ret();
  // @@protoc_insertion_point(field_mutable:micromsg.GetCardItemInfoResponse.json_ret)
  return json_ret_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetCardItemInfoResponse::release_json_ret() {
  // @@protoc_insertion_point(field_release:micromsg.GetCardItemInfoResponse.json_ret)
  clear_has_json_ret();
  return json_ret_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetCardItemInfoResponse::set_allocated_json_ret(::std::string* json_ret) {
  if (json_ret != NULL) {
    set_has_json_ret();
  } else {
    clear_has_json_ret();
  }
  json_ret_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), json_ret);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetCardItemInfoResponse.json_ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GiftCardItemRequest::kBaseRequestFieldNumber;
const int GiftCardItemRequest::kCardIdFieldNumber;
const int GiftCardItemRequest::kToUsernameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GiftCardItemRequest::GiftCardItemRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcard_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GiftCardItemRequest)
}
GiftCardItemRequest::GiftCardItemRequest(const GiftCardItemRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  card_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_card_id()) {
    card_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.card_id_);
  }
  to_username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_to_username()) {
    to_username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_username_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.GiftCardItemRequest)
}

void GiftCardItemRequest::SharedCtor() {
  _cached_size_ = 0;
  card_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baserequest_ = NULL;
}

GiftCardItemRequest::~GiftCardItemRequest() {
  // @@protoc_insertion_point(destructor:micromsg.GiftCardItemRequest)
  SharedDtor();
}

void GiftCardItemRequest::SharedDtor() {
  card_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void GiftCardItemRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GiftCardItemRequest::descriptor() {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GiftCardItemRequest& GiftCardItemRequest::default_instance() {
  protobuf_mmcard_2eproto::InitDefaults();
  return *internal_default_instance();
}

GiftCardItemRequest* GiftCardItemRequest::New(::google::protobuf::Arena* arena) const {
  GiftCardItemRequest* n = new GiftCardItemRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GiftCardItemRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GiftCardItemRequest)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_card_id()) {
      GOOGLE_DCHECK(!card_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*card_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_to_username()) {
      GOOGLE_DCHECK(!to_username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*to_username_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GiftCardItemRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GiftCardItemRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string card_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_card_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->card_id().data(), this->card_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GiftCardItemRequest.card_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string to_username = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->to_username().data(), this->to_username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GiftCardItemRequest.to_username");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GiftCardItemRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GiftCardItemRequest)
  return false;
#undef DO_
}

void GiftCardItemRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GiftCardItemRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // required string card_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->card_id().data(), this->card_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GiftCardItemRequest.card_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->card_id(), output);
  }

  // required string to_username = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to_username().data(), this->to_username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GiftCardItemRequest.to_username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->to_username(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GiftCardItemRequest)
}

::google::protobuf::uint8* GiftCardItemRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GiftCardItemRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // required string card_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->card_id().data(), this->card_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GiftCardItemRequest.card_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->card_id(), target);
  }

  // required string to_username = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to_username().data(), this->to_username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GiftCardItemRequest.to_username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->to_username(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GiftCardItemRequest)
  return target;
}

size_t GiftCardItemRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.GiftCardItemRequest)
  size_t total_size = 0;

  if (has_card_id()) {
    // required string card_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->card_id());
  }

  if (has_to_username()) {
    // required string to_username = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->to_username());
  }

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  return total_size;
}
size_t GiftCardItemRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GiftCardItemRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string card_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->card_id());

    // required string to_username = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->to_username());

    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GiftCardItemRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GiftCardItemRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GiftCardItemRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GiftCardItemRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GiftCardItemRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GiftCardItemRequest)
    MergeFrom(*source);
  }
}

void GiftCardItemRequest::MergeFrom(const GiftCardItemRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GiftCardItemRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_card_id();
      card_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.card_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_to_username();
      to_username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_username_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
  }
}

void GiftCardItemRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GiftCardItemRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GiftCardItemRequest::CopyFrom(const GiftCardItemRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GiftCardItemRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GiftCardItemRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void GiftCardItemRequest::Swap(GiftCardItemRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GiftCardItemRequest::InternalSwap(GiftCardItemRequest* other) {
  card_id_.Swap(&other->card_id_);
  to_username_.Swap(&other->to_username_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GiftCardItemRequest::GetMetadata() const {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GiftCardItemRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool GiftCardItemRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GiftCardItemRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000004u;
}
void GiftCardItemRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000004u;
}
void GiftCardItemRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& GiftCardItemRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GiftCardItemRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* GiftCardItemRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GiftCardItemRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* GiftCardItemRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GiftCardItemRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void GiftCardItemRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GiftCardItemRequest.BaseRequest)
}

// required string card_id = 2;
bool GiftCardItemRequest::has_card_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GiftCardItemRequest::set_has_card_id() {
  _has_bits_[0] |= 0x00000001u;
}
void GiftCardItemRequest::clear_has_card_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void GiftCardItemRequest::clear_card_id() {
  card_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_card_id();
}
const ::std::string& GiftCardItemRequest::card_id() const {
  // @@protoc_insertion_point(field_get:micromsg.GiftCardItemRequest.card_id)
  return card_id_.GetNoArena();
}
void GiftCardItemRequest::set_card_id(const ::std::string& value) {
  set_has_card_id();
  card_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GiftCardItemRequest.card_id)
}
#if LANG_CXX11
void GiftCardItemRequest::set_card_id(::std::string&& value) {
  set_has_card_id();
  card_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GiftCardItemRequest.card_id)
}
#endif
void GiftCardItemRequest::set_card_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_card_id();
  card_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GiftCardItemRequest.card_id)
}
void GiftCardItemRequest::set_card_id(const char* value, size_t size) {
  set_has_card_id();
  card_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GiftCardItemRequest.card_id)
}
::std::string* GiftCardItemRequest::mutable_card_id() {
  set_has_card_id();
  // @@protoc_insertion_point(field_mutable:micromsg.GiftCardItemRequest.card_id)
  return card_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GiftCardItemRequest::release_card_id() {
  // @@protoc_insertion_point(field_release:micromsg.GiftCardItemRequest.card_id)
  clear_has_card_id();
  return card_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GiftCardItemRequest::set_allocated_card_id(::std::string* card_id) {
  if (card_id != NULL) {
    set_has_card_id();
  } else {
    clear_has_card_id();
  }
  card_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), card_id);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GiftCardItemRequest.card_id)
}

// required string to_username = 3;
bool GiftCardItemRequest::has_to_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GiftCardItemRequest::set_has_to_username() {
  _has_bits_[0] |= 0x00000002u;
}
void GiftCardItemRequest::clear_has_to_username() {
  _has_bits_[0] &= ~0x00000002u;
}
void GiftCardItemRequest::clear_to_username() {
  to_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_to_username();
}
const ::std::string& GiftCardItemRequest::to_username() const {
  // @@protoc_insertion_point(field_get:micromsg.GiftCardItemRequest.to_username)
  return to_username_.GetNoArena();
}
void GiftCardItemRequest::set_to_username(const ::std::string& value) {
  set_has_to_username();
  to_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GiftCardItemRequest.to_username)
}
#if LANG_CXX11
void GiftCardItemRequest::set_to_username(::std::string&& value) {
  set_has_to_username();
  to_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GiftCardItemRequest.to_username)
}
#endif
void GiftCardItemRequest::set_to_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_to_username();
  to_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GiftCardItemRequest.to_username)
}
void GiftCardItemRequest::set_to_username(const char* value, size_t size) {
  set_has_to_username();
  to_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GiftCardItemRequest.to_username)
}
::std::string* GiftCardItemRequest::mutable_to_username() {
  set_has_to_username();
  // @@protoc_insertion_point(field_mutable:micromsg.GiftCardItemRequest.to_username)
  return to_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GiftCardItemRequest::release_to_username() {
  // @@protoc_insertion_point(field_release:micromsg.GiftCardItemRequest.to_username)
  clear_has_to_username();
  return to_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GiftCardItemRequest::set_allocated_to_username(::std::string* to_username) {
  if (to_username != NULL) {
    set_has_to_username();
  } else {
    clear_has_to_username();
  }
  to_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_username);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GiftCardItemRequest.to_username)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GiftCardItemResponse::kBaseResponseFieldNumber;
const int GiftCardItemResponse::kCardExtFieldNumber;
const int GiftCardItemResponse::kRetCodeFieldNumber;
const int GiftCardItemResponse::kRetMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GiftCardItemResponse::GiftCardItemResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcard_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GiftCardItemResponse)
}
GiftCardItemResponse::GiftCardItemResponse(const GiftCardItemResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  card_ext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_card_ext()) {
    card_ext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.card_ext_);
  }
  ret_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ret_msg()) {
    ret_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_msg_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  ret_code_ = from.ret_code_;
  // @@protoc_insertion_point(copy_constructor:micromsg.GiftCardItemResponse)
}

void GiftCardItemResponse::SharedCtor() {
  _cached_size_ = 0;
  card_ext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ret_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&ret_code_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(ret_code_));
}

GiftCardItemResponse::~GiftCardItemResponse() {
  // @@protoc_insertion_point(destructor:micromsg.GiftCardItemResponse)
  SharedDtor();
}

void GiftCardItemResponse::SharedDtor() {
  card_ext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ret_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void GiftCardItemResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GiftCardItemResponse::descriptor() {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GiftCardItemResponse& GiftCardItemResponse::default_instance() {
  protobuf_mmcard_2eproto::InitDefaults();
  return *internal_default_instance();
}

GiftCardItemResponse* GiftCardItemResponse::New(::google::protobuf::Arena* arena) const {
  GiftCardItemResponse* n = new GiftCardItemResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GiftCardItemResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GiftCardItemResponse)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_card_ext()) {
      GOOGLE_DCHECK(!card_ext_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*card_ext_.UnsafeRawStringPointer())->clear();
    }
    if (has_ret_msg()) {
      GOOGLE_DCHECK(!ret_msg_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ret_msg_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
  }
  ret_code_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GiftCardItemResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GiftCardItemResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string card_ext = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_card_ext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->card_ext().data(), this->card_ext().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GiftCardItemResponse.card_ext");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ret_code = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_ret_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ret_msg = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ret_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ret_msg().data(), this->ret_msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GiftCardItemResponse.ret_msg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GiftCardItemResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GiftCardItemResponse)
  return false;
#undef DO_
}

void GiftCardItemResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GiftCardItemResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // optional string card_ext = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->card_ext().data(), this->card_ext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GiftCardItemResponse.card_ext");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->card_ext(), output);
  }

  // optional int32 ret_code = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ret_code(), output);
  }

  // optional string ret_msg = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ret_msg().data(), this->ret_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GiftCardItemResponse.ret_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->ret_msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GiftCardItemResponse)
}

::google::protobuf::uint8* GiftCardItemResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GiftCardItemResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // optional string card_ext = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->card_ext().data(), this->card_ext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GiftCardItemResponse.card_ext");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->card_ext(), target);
  }

  // optional int32 ret_code = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ret_code(), target);
  }

  // optional string ret_msg = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ret_msg().data(), this->ret_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GiftCardItemResponse.ret_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ret_msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GiftCardItemResponse)
  return target;
}

size_t GiftCardItemResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GiftCardItemResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string card_ext = 2;
    if (has_card_ext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->card_ext());
    }

    // optional string ret_msg = 4;
    if (has_ret_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ret_msg());
    }

  }
  // optional int32 ret_code = 3;
  if (has_ret_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ret_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GiftCardItemResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GiftCardItemResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GiftCardItemResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GiftCardItemResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GiftCardItemResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GiftCardItemResponse)
    MergeFrom(*source);
  }
}

void GiftCardItemResponse::MergeFrom(const GiftCardItemResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GiftCardItemResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_card_ext();
      card_ext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.card_ext_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_ret_msg();
      ret_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_msg_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000008u) {
      ret_code_ = from.ret_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GiftCardItemResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GiftCardItemResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GiftCardItemResponse::CopyFrom(const GiftCardItemResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GiftCardItemResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GiftCardItemResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void GiftCardItemResponse::Swap(GiftCardItemResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GiftCardItemResponse::InternalSwap(GiftCardItemResponse* other) {
  card_ext_.Swap(&other->card_ext_);
  ret_msg_.Swap(&other->ret_msg_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(ret_code_, other->ret_code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GiftCardItemResponse::GetMetadata() const {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GiftCardItemResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool GiftCardItemResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GiftCardItemResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000004u;
}
void GiftCardItemResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000004u;
}
void GiftCardItemResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& GiftCardItemResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GiftCardItemResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* GiftCardItemResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GiftCardItemResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* GiftCardItemResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GiftCardItemResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void GiftCardItemResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GiftCardItemResponse.BaseResponse)
}

// optional string card_ext = 2;
bool GiftCardItemResponse::has_card_ext() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GiftCardItemResponse::set_has_card_ext() {
  _has_bits_[0] |= 0x00000001u;
}
void GiftCardItemResponse::clear_has_card_ext() {
  _has_bits_[0] &= ~0x00000001u;
}
void GiftCardItemResponse::clear_card_ext() {
  card_ext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_card_ext();
}
const ::std::string& GiftCardItemResponse::card_ext() const {
  // @@protoc_insertion_point(field_get:micromsg.GiftCardItemResponse.card_ext)
  return card_ext_.GetNoArena();
}
void GiftCardItemResponse::set_card_ext(const ::std::string& value) {
  set_has_card_ext();
  card_ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GiftCardItemResponse.card_ext)
}
#if LANG_CXX11
void GiftCardItemResponse::set_card_ext(::std::string&& value) {
  set_has_card_ext();
  card_ext_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GiftCardItemResponse.card_ext)
}
#endif
void GiftCardItemResponse::set_card_ext(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_card_ext();
  card_ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GiftCardItemResponse.card_ext)
}
void GiftCardItemResponse::set_card_ext(const char* value, size_t size) {
  set_has_card_ext();
  card_ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GiftCardItemResponse.card_ext)
}
::std::string* GiftCardItemResponse::mutable_card_ext() {
  set_has_card_ext();
  // @@protoc_insertion_point(field_mutable:micromsg.GiftCardItemResponse.card_ext)
  return card_ext_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GiftCardItemResponse::release_card_ext() {
  // @@protoc_insertion_point(field_release:micromsg.GiftCardItemResponse.card_ext)
  clear_has_card_ext();
  return card_ext_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GiftCardItemResponse::set_allocated_card_ext(::std::string* card_ext) {
  if (card_ext != NULL) {
    set_has_card_ext();
  } else {
    clear_has_card_ext();
  }
  card_ext_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), card_ext);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GiftCardItemResponse.card_ext)
}

// optional int32 ret_code = 3;
bool GiftCardItemResponse::has_ret_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GiftCardItemResponse::set_has_ret_code() {
  _has_bits_[0] |= 0x00000008u;
}
void GiftCardItemResponse::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000008u;
}
void GiftCardItemResponse::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
::google::protobuf::int32 GiftCardItemResponse::ret_code() const {
  // @@protoc_insertion_point(field_get:micromsg.GiftCardItemResponse.ret_code)
  return ret_code_;
}
void GiftCardItemResponse::set_ret_code(::google::protobuf::int32 value) {
  set_has_ret_code();
  ret_code_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GiftCardItemResponse.ret_code)
}

// optional string ret_msg = 4;
bool GiftCardItemResponse::has_ret_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GiftCardItemResponse::set_has_ret_msg() {
  _has_bits_[0] |= 0x00000002u;
}
void GiftCardItemResponse::clear_has_ret_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
void GiftCardItemResponse::clear_ret_msg() {
  ret_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ret_msg();
}
const ::std::string& GiftCardItemResponse::ret_msg() const {
  // @@protoc_insertion_point(field_get:micromsg.GiftCardItemResponse.ret_msg)
  return ret_msg_.GetNoArena();
}
void GiftCardItemResponse::set_ret_msg(const ::std::string& value) {
  set_has_ret_msg();
  ret_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GiftCardItemResponse.ret_msg)
}
#if LANG_CXX11
void GiftCardItemResponse::set_ret_msg(::std::string&& value) {
  set_has_ret_msg();
  ret_msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GiftCardItemResponse.ret_msg)
}
#endif
void GiftCardItemResponse::set_ret_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ret_msg();
  ret_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GiftCardItemResponse.ret_msg)
}
void GiftCardItemResponse::set_ret_msg(const char* value, size_t size) {
  set_has_ret_msg();
  ret_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GiftCardItemResponse.ret_msg)
}
::std::string* GiftCardItemResponse::mutable_ret_msg() {
  set_has_ret_msg();
  // @@protoc_insertion_point(field_mutable:micromsg.GiftCardItemResponse.ret_msg)
  return ret_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GiftCardItemResponse::release_ret_msg() {
  // @@protoc_insertion_point(field_release:micromsg.GiftCardItemResponse.ret_msg)
  clear_has_ret_msg();
  return ret_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GiftCardItemResponse::set_allocated_ret_msg(::std::string* ret_msg) {
  if (ret_msg != NULL) {
    set_has_ret_msg();
  } else {
    clear_has_ret_msg();
  }
  ret_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ret_msg);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GiftCardItemResponse.ret_msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AcceptCardItemRequest::kBaseRequestFieldNumber;
const int AcceptCardItemRequest::kFromUsernameFieldNumber;
const int AcceptCardItemRequest::kFromSceneFieldNumber;
const int AcceptCardItemRequest::kCardIdFieldNumber;
const int AcceptCardItemRequest::kCardExtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AcceptCardItemRequest::AcceptCardItemRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcard_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.AcceptCardItemRequest)
}
AcceptCardItemRequest::AcceptCardItemRequest(const AcceptCardItemRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  from_username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_from_username()) {
    from_username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_username_);
  }
  card_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_card_id()) {
    card_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.card_id_);
  }
  card_ext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_card_ext()) {
    card_ext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.card_ext_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  from_scene_ = from.from_scene_;
  // @@protoc_insertion_point(copy_constructor:micromsg.AcceptCardItemRequest)
}

void AcceptCardItemRequest::SharedCtor() {
  _cached_size_ = 0;
  from_username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  card_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  card_ext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&from_scene_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(from_scene_));
}

AcceptCardItemRequest::~AcceptCardItemRequest() {
  // @@protoc_insertion_point(destructor:micromsg.AcceptCardItemRequest)
  SharedDtor();
}

void AcceptCardItemRequest::SharedDtor() {
  from_username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  card_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  card_ext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void AcceptCardItemRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcceptCardItemRequest::descriptor() {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AcceptCardItemRequest& AcceptCardItemRequest::default_instance() {
  protobuf_mmcard_2eproto::InitDefaults();
  return *internal_default_instance();
}

AcceptCardItemRequest* AcceptCardItemRequest::New(::google::protobuf::Arena* arena) const {
  AcceptCardItemRequest* n = new AcceptCardItemRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AcceptCardItemRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.AcceptCardItemRequest)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_from_username()) {
      GOOGLE_DCHECK(!from_username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*from_username_.UnsafeRawStringPointer())->clear();
    }
    if (has_card_id()) {
      GOOGLE_DCHECK(!card_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*card_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_card_ext()) {
      GOOGLE_DCHECK(!card_ext_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*card_ext_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  from_scene_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AcceptCardItemRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.AcceptCardItemRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string from_username = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->from_username().data(), this->from_username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.AcceptCardItemRequest.from_username");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 from_scene = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_from_scene();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_scene_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string card_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_card_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->card_id().data(), this->card_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.AcceptCardItemRequest.card_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string card_ext = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_card_ext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->card_ext().data(), this->card_ext().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.AcceptCardItemRequest.card_ext");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.AcceptCardItemRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.AcceptCardItemRequest)
  return false;
#undef DO_
}

void AcceptCardItemRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.AcceptCardItemRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string from_username = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from_username().data(), this->from_username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AcceptCardItemRequest.from_username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->from_username(), output);
  }

  // required uint32 from_scene = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->from_scene(), output);
  }

  // required string card_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->card_id().data(), this->card_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AcceptCardItemRequest.card_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->card_id(), output);
  }

  // optional string card_ext = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->card_ext().data(), this->card_ext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AcceptCardItemRequest.card_ext");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->card_ext(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.AcceptCardItemRequest)
}

::google::protobuf::uint8* AcceptCardItemRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.AcceptCardItemRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string from_username = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from_username().data(), this->from_username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AcceptCardItemRequest.from_username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->from_username(), target);
  }

  // required uint32 from_scene = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->from_scene(), target);
  }

  // required string card_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->card_id().data(), this->card_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AcceptCardItemRequest.card_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->card_id(), target);
  }

  // optional string card_ext = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->card_ext().data(), this->card_ext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AcceptCardItemRequest.card_ext");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->card_ext(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.AcceptCardItemRequest)
  return target;
}

size_t AcceptCardItemRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:micromsg.AcceptCardItemRequest)
  size_t total_size = 0;

  if (has_card_id()) {
    // required string card_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->card_id());
  }

  if (has_baserequest()) {
    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }

  if (has_from_scene()) {
    // required uint32 from_scene = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->from_scene());
  }

  return total_size;
}
size_t AcceptCardItemRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.AcceptCardItemRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001a) ^ 0x0000001a) == 0) {  // All required fields are present.
    // required string card_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->card_id());

    // required .micromsg.BaseRequest BaseRequest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);

    // required uint32 from_scene = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->from_scene());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string from_username = 2;
  if (has_from_username()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->from_username());
  }

  // optional string card_ext = 5;
  if (has_card_ext()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->card_ext());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcceptCardItemRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.AcceptCardItemRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AcceptCardItemRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AcceptCardItemRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.AcceptCardItemRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.AcceptCardItemRequest)
    MergeFrom(*source);
  }
}

void AcceptCardItemRequest::MergeFrom(const AcceptCardItemRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.AcceptCardItemRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_from_username();
      from_username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_username_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_card_id();
      card_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.card_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_card_ext();
      card_ext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.card_ext_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000010u) {
      from_scene_ = from.from_scene_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AcceptCardItemRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.AcceptCardItemRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcceptCardItemRequest::CopyFrom(const AcceptCardItemRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.AcceptCardItemRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcceptCardItemRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001a) != 0x0000001a) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void AcceptCardItemRequest::Swap(AcceptCardItemRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AcceptCardItemRequest::InternalSwap(AcceptCardItemRequest* other) {
  from_username_.Swap(&other->from_username_);
  card_id_.Swap(&other->card_id_);
  card_ext_.Swap(&other->card_ext_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(from_scene_, other->from_scene_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AcceptCardItemRequest::GetMetadata() const {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AcceptCardItemRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool AcceptCardItemRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AcceptCardItemRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000008u;
}
void AcceptCardItemRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000008u;
}
void AcceptCardItemRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& AcceptCardItemRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.AcceptCardItemRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* AcceptCardItemRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.AcceptCardItemRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* AcceptCardItemRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.AcceptCardItemRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void AcceptCardItemRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.AcceptCardItemRequest.BaseRequest)
}

// optional string from_username = 2;
bool AcceptCardItemRequest::has_from_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AcceptCardItemRequest::set_has_from_username() {
  _has_bits_[0] |= 0x00000001u;
}
void AcceptCardItemRequest::clear_has_from_username() {
  _has_bits_[0] &= ~0x00000001u;
}
void AcceptCardItemRequest::clear_from_username() {
  from_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_from_username();
}
const ::std::string& AcceptCardItemRequest::from_username() const {
  // @@protoc_insertion_point(field_get:micromsg.AcceptCardItemRequest.from_username)
  return from_username_.GetNoArena();
}
void AcceptCardItemRequest::set_from_username(const ::std::string& value) {
  set_has_from_username();
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.AcceptCardItemRequest.from_username)
}
#if LANG_CXX11
void AcceptCardItemRequest::set_from_username(::std::string&& value) {
  set_has_from_username();
  from_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.AcceptCardItemRequest.from_username)
}
#endif
void AcceptCardItemRequest::set_from_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_from_username();
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.AcceptCardItemRequest.from_username)
}
void AcceptCardItemRequest::set_from_username(const char* value, size_t size) {
  set_has_from_username();
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.AcceptCardItemRequest.from_username)
}
::std::string* AcceptCardItemRequest::mutable_from_username() {
  set_has_from_username();
  // @@protoc_insertion_point(field_mutable:micromsg.AcceptCardItemRequest.from_username)
  return from_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AcceptCardItemRequest::release_from_username() {
  // @@protoc_insertion_point(field_release:micromsg.AcceptCardItemRequest.from_username)
  clear_has_from_username();
  return from_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AcceptCardItemRequest::set_allocated_from_username(::std::string* from_username) {
  if (from_username != NULL) {
    set_has_from_username();
  } else {
    clear_has_from_username();
  }
  from_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_username);
  // @@protoc_insertion_point(field_set_allocated:micromsg.AcceptCardItemRequest.from_username)
}

// required uint32 from_scene = 3;
bool AcceptCardItemRequest::has_from_scene() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void AcceptCardItemRequest::set_has_from_scene() {
  _has_bits_[0] |= 0x00000010u;
}
void AcceptCardItemRequest::clear_has_from_scene() {
  _has_bits_[0] &= ~0x00000010u;
}
void AcceptCardItemRequest::clear_from_scene() {
  from_scene_ = 0u;
  clear_has_from_scene();
}
::google::protobuf::uint32 AcceptCardItemRequest::from_scene() const {
  // @@protoc_insertion_point(field_get:micromsg.AcceptCardItemRequest.from_scene)
  return from_scene_;
}
void AcceptCardItemRequest::set_from_scene(::google::protobuf::uint32 value) {
  set_has_from_scene();
  from_scene_ = value;
  // @@protoc_insertion_point(field_set:micromsg.AcceptCardItemRequest.from_scene)
}

// required string card_id = 4;
bool AcceptCardItemRequest::has_card_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AcceptCardItemRequest::set_has_card_id() {
  _has_bits_[0] |= 0x00000002u;
}
void AcceptCardItemRequest::clear_has_card_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void AcceptCardItemRequest::clear_card_id() {
  card_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_card_id();
}
const ::std::string& AcceptCardItemRequest::card_id() const {
  // @@protoc_insertion_point(field_get:micromsg.AcceptCardItemRequest.card_id)
  return card_id_.GetNoArena();
}
void AcceptCardItemRequest::set_card_id(const ::std::string& value) {
  set_has_card_id();
  card_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.AcceptCardItemRequest.card_id)
}
#if LANG_CXX11
void AcceptCardItemRequest::set_card_id(::std::string&& value) {
  set_has_card_id();
  card_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.AcceptCardItemRequest.card_id)
}
#endif
void AcceptCardItemRequest::set_card_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_card_id();
  card_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.AcceptCardItemRequest.card_id)
}
void AcceptCardItemRequest::set_card_id(const char* value, size_t size) {
  set_has_card_id();
  card_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.AcceptCardItemRequest.card_id)
}
::std::string* AcceptCardItemRequest::mutable_card_id() {
  set_has_card_id();
  // @@protoc_insertion_point(field_mutable:micromsg.AcceptCardItemRequest.card_id)
  return card_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AcceptCardItemRequest::release_card_id() {
  // @@protoc_insertion_point(field_release:micromsg.AcceptCardItemRequest.card_id)
  clear_has_card_id();
  return card_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AcceptCardItemRequest::set_allocated_card_id(::std::string* card_id) {
  if (card_id != NULL) {
    set_has_card_id();
  } else {
    clear_has_card_id();
  }
  card_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), card_id);
  // @@protoc_insertion_point(field_set_allocated:micromsg.AcceptCardItemRequest.card_id)
}

// optional string card_ext = 5;
bool AcceptCardItemRequest::has_card_ext() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AcceptCardItemRequest::set_has_card_ext() {
  _has_bits_[0] |= 0x00000004u;
}
void AcceptCardItemRequest::clear_has_card_ext() {
  _has_bits_[0] &= ~0x00000004u;
}
void AcceptCardItemRequest::clear_card_ext() {
  card_ext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_card_ext();
}
const ::std::string& AcceptCardItemRequest::card_ext() const {
  // @@protoc_insertion_point(field_get:micromsg.AcceptCardItemRequest.card_ext)
  return card_ext_.GetNoArena();
}
void AcceptCardItemRequest::set_card_ext(const ::std::string& value) {
  set_has_card_ext();
  card_ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.AcceptCardItemRequest.card_ext)
}
#if LANG_CXX11
void AcceptCardItemRequest::set_card_ext(::std::string&& value) {
  set_has_card_ext();
  card_ext_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.AcceptCardItemRequest.card_ext)
}
#endif
void AcceptCardItemRequest::set_card_ext(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_card_ext();
  card_ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.AcceptCardItemRequest.card_ext)
}
void AcceptCardItemRequest::set_card_ext(const char* value, size_t size) {
  set_has_card_ext();
  card_ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.AcceptCardItemRequest.card_ext)
}
::std::string* AcceptCardItemRequest::mutable_card_ext() {
  set_has_card_ext();
  // @@protoc_insertion_point(field_mutable:micromsg.AcceptCardItemRequest.card_ext)
  return card_ext_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AcceptCardItemRequest::release_card_ext() {
  // @@protoc_insertion_point(field_release:micromsg.AcceptCardItemRequest.card_ext)
  clear_has_card_ext();
  return card_ext_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AcceptCardItemRequest::set_allocated_card_ext(::std::string* card_ext) {
  if (card_ext != NULL) {
    set_has_card_ext();
  } else {
    clear_has_card_ext();
  }
  card_ext_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), card_ext);
  // @@protoc_insertion_point(field_set_allocated:micromsg.AcceptCardItemRequest.card_ext)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AcceptCardItemResponse::kBaseResponseFieldNumber;
const int AcceptCardItemResponse::kJsonRetFieldNumber;
const int AcceptCardItemResponse::kRetCodeFieldNumber;
const int AcceptCardItemResponse::kRetMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AcceptCardItemResponse::AcceptCardItemResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcard_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.AcceptCardItemResponse)
}
AcceptCardItemResponse::AcceptCardItemResponse(const AcceptCardItemResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  json_ret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_json_ret()) {
    json_ret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_ret_);
  }
  ret_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ret_msg()) {
    ret_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_msg_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  ret_code_ = from.ret_code_;
  // @@protoc_insertion_point(copy_constructor:micromsg.AcceptCardItemResponse)
}

void AcceptCardItemResponse::SharedCtor() {
  _cached_size_ = 0;
  json_ret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ret_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&ret_code_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(ret_code_));
}

AcceptCardItemResponse::~AcceptCardItemResponse() {
  // @@protoc_insertion_point(destructor:micromsg.AcceptCardItemResponse)
  SharedDtor();
}

void AcceptCardItemResponse::SharedDtor() {
  json_ret_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ret_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void AcceptCardItemResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcceptCardItemResponse::descriptor() {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AcceptCardItemResponse& AcceptCardItemResponse::default_instance() {
  protobuf_mmcard_2eproto::InitDefaults();
  return *internal_default_instance();
}

AcceptCardItemResponse* AcceptCardItemResponse::New(::google::protobuf::Arena* arena) const {
  AcceptCardItemResponse* n = new AcceptCardItemResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AcceptCardItemResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.AcceptCardItemResponse)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_json_ret()) {
      GOOGLE_DCHECK(!json_ret_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*json_ret_.UnsafeRawStringPointer())->clear();
    }
    if (has_ret_msg()) {
      GOOGLE_DCHECK(!ret_msg_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ret_msg_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
  }
  ret_code_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AcceptCardItemResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.AcceptCardItemResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string json_ret = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_json_ret()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->json_ret().data(), this->json_ret().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.AcceptCardItemResponse.json_ret");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ret_code = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_ret_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ret_msg = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ret_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ret_msg().data(), this->ret_msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.AcceptCardItemResponse.ret_msg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.AcceptCardItemResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.AcceptCardItemResponse)
  return false;
#undef DO_
}

void AcceptCardItemResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.AcceptCardItemResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // optional string json_ret = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->json_ret().data(), this->json_ret().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AcceptCardItemResponse.json_ret");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->json_ret(), output);
  }

  // optional int32 ret_code = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ret_code(), output);
  }

  // optional string ret_msg = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ret_msg().data(), this->ret_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AcceptCardItemResponse.ret_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->ret_msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.AcceptCardItemResponse)
}

::google::protobuf::uint8* AcceptCardItemResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.AcceptCardItemResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // optional string json_ret = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->json_ret().data(), this->json_ret().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AcceptCardItemResponse.json_ret");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->json_ret(), target);
  }

  // optional int32 ret_code = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ret_code(), target);
  }

  // optional string ret_msg = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ret_msg().data(), this->ret_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AcceptCardItemResponse.ret_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ret_msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.AcceptCardItemResponse)
  return target;
}

size_t AcceptCardItemResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.AcceptCardItemResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string json_ret = 2;
    if (has_json_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->json_ret());
    }

    // optional string ret_msg = 4;
    if (has_ret_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ret_msg());
    }

  }
  // optional int32 ret_code = 3;
  if (has_ret_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ret_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcceptCardItemResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.AcceptCardItemResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AcceptCardItemResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AcceptCardItemResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.AcceptCardItemResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.AcceptCardItemResponse)
    MergeFrom(*source);
  }
}

void AcceptCardItemResponse::MergeFrom(const AcceptCardItemResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.AcceptCardItemResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_json_ret();
      json_ret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_ret_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_ret_msg();
      ret_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_msg_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000008u) {
      ret_code_ = from.ret_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AcceptCardItemResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.AcceptCardItemResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcceptCardItemResponse::CopyFrom(const AcceptCardItemResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.AcceptCardItemResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcceptCardItemResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void AcceptCardItemResponse::Swap(AcceptCardItemResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AcceptCardItemResponse::InternalSwap(AcceptCardItemResponse* other) {
  json_ret_.Swap(&other->json_ret_);
  ret_msg_.Swap(&other->ret_msg_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(ret_code_, other->ret_code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AcceptCardItemResponse::GetMetadata() const {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AcceptCardItemResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool AcceptCardItemResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AcceptCardItemResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000004u;
}
void AcceptCardItemResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000004u;
}
void AcceptCardItemResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& AcceptCardItemResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.AcceptCardItemResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* AcceptCardItemResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.AcceptCardItemResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* AcceptCardItemResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.AcceptCardItemResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void AcceptCardItemResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.AcceptCardItemResponse.BaseResponse)
}

// optional string json_ret = 2;
bool AcceptCardItemResponse::has_json_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AcceptCardItemResponse::set_has_json_ret() {
  _has_bits_[0] |= 0x00000001u;
}
void AcceptCardItemResponse::clear_has_json_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
void AcceptCardItemResponse::clear_json_ret() {
  json_ret_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_json_ret();
}
const ::std::string& AcceptCardItemResponse::json_ret() const {
  // @@protoc_insertion_point(field_get:micromsg.AcceptCardItemResponse.json_ret)
  return json_ret_.GetNoArena();
}
void AcceptCardItemResponse::set_json_ret(const ::std::string& value) {
  set_has_json_ret();
  json_ret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.AcceptCardItemResponse.json_ret)
}
#if LANG_CXX11
void AcceptCardItemResponse::set_json_ret(::std::string&& value) {
  set_has_json_ret();
  json_ret_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.AcceptCardItemResponse.json_ret)
}
#endif
void AcceptCardItemResponse::set_json_ret(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_json_ret();
  json_ret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.AcceptCardItemResponse.json_ret)
}
void AcceptCardItemResponse::set_json_ret(const char* value, size_t size) {
  set_has_json_ret();
  json_ret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.AcceptCardItemResponse.json_ret)
}
::std::string* AcceptCardItemResponse::mutable_json_ret() {
  set_has_json_ret();
  // @@protoc_insertion_point(field_mutable:micromsg.AcceptCardItemResponse.json_ret)
  return json_ret_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AcceptCardItemResponse::release_json_ret() {
  // @@protoc_insertion_point(field_release:micromsg.AcceptCardItemResponse.json_ret)
  clear_has_json_ret();
  return json_ret_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AcceptCardItemResponse::set_allocated_json_ret(::std::string* json_ret) {
  if (json_ret != NULL) {
    set_has_json_ret();
  } else {
    clear_has_json_ret();
  }
  json_ret_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), json_ret);
  // @@protoc_insertion_point(field_set_allocated:micromsg.AcceptCardItemResponse.json_ret)
}

// optional int32 ret_code = 3;
bool AcceptCardItemResponse::has_ret_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AcceptCardItemResponse::set_has_ret_code() {
  _has_bits_[0] |= 0x00000008u;
}
void AcceptCardItemResponse::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000008u;
}
void AcceptCardItemResponse::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
::google::protobuf::int32 AcceptCardItemResponse::ret_code() const {
  // @@protoc_insertion_point(field_get:micromsg.AcceptCardItemResponse.ret_code)
  return ret_code_;
}
void AcceptCardItemResponse::set_ret_code(::google::protobuf::int32 value) {
  set_has_ret_code();
  ret_code_ = value;
  // @@protoc_insertion_point(field_set:micromsg.AcceptCardItemResponse.ret_code)
}

// optional string ret_msg = 4;
bool AcceptCardItemResponse::has_ret_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AcceptCardItemResponse::set_has_ret_msg() {
  _has_bits_[0] |= 0x00000002u;
}
void AcceptCardItemResponse::clear_has_ret_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
void AcceptCardItemResponse::clear_ret_msg() {
  ret_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ret_msg();
}
const ::std::string& AcceptCardItemResponse::ret_msg() const {
  // @@protoc_insertion_point(field_get:micromsg.AcceptCardItemResponse.ret_msg)
  return ret_msg_.GetNoArena();
}
void AcceptCardItemResponse::set_ret_msg(const ::std::string& value) {
  set_has_ret_msg();
  ret_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.AcceptCardItemResponse.ret_msg)
}
#if LANG_CXX11
void AcceptCardItemResponse::set_ret_msg(::std::string&& value) {
  set_has_ret_msg();
  ret_msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.AcceptCardItemResponse.ret_msg)
}
#endif
void AcceptCardItemResponse::set_ret_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ret_msg();
  ret_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.AcceptCardItemResponse.ret_msg)
}
void AcceptCardItemResponse::set_ret_msg(const char* value, size_t size) {
  set_has_ret_msg();
  ret_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.AcceptCardItemResponse.ret_msg)
}
::std::string* AcceptCardItemResponse::mutable_ret_msg() {
  set_has_ret_msg();
  // @@protoc_insertion_point(field_mutable:micromsg.AcceptCardItemResponse.ret_msg)
  return ret_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AcceptCardItemResponse::release_ret_msg() {
  // @@protoc_insertion_point(field_release:micromsg.AcceptCardItemResponse.ret_msg)
  clear_has_ret_msg();
  return ret_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AcceptCardItemResponse::set_allocated_ret_msg(::std::string* ret_msg) {
  if (ret_msg != NULL) {
    set_has_ret_msg();
  } else {
    clear_has_ret_msg();
  }
  ret_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ret_msg);
  // @@protoc_insertion_point(field_set_allocated:micromsg.AcceptCardItemResponse.ret_msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetCardCountRequest::kBaseRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetCardCountRequest::GetCardCountRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcard_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetCardCountRequest)
}
GetCardCountRequest::GetCardCountRequest(const GetCardCountRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.GetCardCountRequest)
}

void GetCardCountRequest::SharedCtor() {
  _cached_size_ = 0;
  baserequest_ = NULL;
}

GetCardCountRequest::~GetCardCountRequest() {
  // @@protoc_insertion_point(destructor:micromsg.GetCardCountRequest)
  SharedDtor();
}

void GetCardCountRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void GetCardCountRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetCardCountRequest::descriptor() {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetCardCountRequest& GetCardCountRequest::default_instance() {
  protobuf_mmcard_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetCardCountRequest* GetCardCountRequest::New(::google::protobuf::Arena* arena) const {
  GetCardCountRequest* n = new GetCardCountRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetCardCountRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetCardCountRequest)
  if (has_baserequest()) {
    GOOGLE_DCHECK(baserequest_ != NULL);
    baserequest_->::micromsg::BaseRequest::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetCardCountRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetCardCountRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetCardCountRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetCardCountRequest)
  return false;
#undef DO_
}

void GetCardCountRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetCardCountRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetCardCountRequest)
}

::google::protobuf::uint8* GetCardCountRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetCardCountRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetCardCountRequest)
  return target;
}

size_t GetCardCountRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetCardCountRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (has_baserequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCardCountRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetCardCountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCardCountRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetCardCountRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetCardCountRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetCardCountRequest)
    MergeFrom(*source);
  }
}

void GetCardCountRequest::MergeFrom(const GetCardCountRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetCardCountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_baserequest()) {
    mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
  }
}

void GetCardCountRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetCardCountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCardCountRequest::CopyFrom(const GetCardCountRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetCardCountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCardCountRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void GetCardCountRequest::Swap(GetCardCountRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetCardCountRequest::InternalSwap(GetCardCountRequest* other) {
  std::swap(baserequest_, other->baserequest_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetCardCountRequest::GetMetadata() const {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetCardCountRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool GetCardCountRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetCardCountRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void GetCardCountRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetCardCountRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& GetCardCountRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetCardCountRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* GetCardCountRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetCardCountRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* GetCardCountRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetCardCountRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void GetCardCountRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetCardCountRequest.BaseRequest)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetCardCountResponse::kBaseResponseFieldNumber;
const int GetCardCountResponse::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetCardCountResponse::GetCardCountResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcard_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetCardCountResponse)
}
GetCardCountResponse::GetCardCountResponse(const GetCardCountResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:micromsg.GetCardCountResponse)
}

void GetCardCountResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(count_));
}

GetCardCountResponse::~GetCardCountResponse() {
  // @@protoc_insertion_point(destructor:micromsg.GetCardCountResponse)
  SharedDtor();
}

void GetCardCountResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void GetCardCountResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetCardCountResponse::descriptor() {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetCardCountResponse& GetCardCountResponse::default_instance() {
  protobuf_mmcard_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetCardCountResponse* GetCardCountResponse::New(::google::protobuf::Arena* arena) const {
  GetCardCountResponse* n = new GetCardCountResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetCardCountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetCardCountResponse)
  if (has_baseresponse()) {
    GOOGLE_DCHECK(baseresponse_ != NULL);
    baseresponse_->::micromsg::BaseResponse::Clear();
  }
  count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetCardCountResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetCardCountResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetCardCountResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetCardCountResponse)
  return false;
#undef DO_
}

void GetCardCountResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetCardCountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // optional uint32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetCardCountResponse)
}

::google::protobuf::uint8* GetCardCountResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetCardCountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // optional uint32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetCardCountResponse)
  return target;
}

size_t GetCardCountResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetCardCountResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  // optional uint32 count = 2;
  if (has_count()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCardCountResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetCardCountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCardCountResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetCardCountResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetCardCountResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetCardCountResponse)
    MergeFrom(*source);
  }
}

void GetCardCountResponse::MergeFrom(const GetCardCountResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetCardCountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetCardCountResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetCardCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCardCountResponse::CopyFrom(const GetCardCountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetCardCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCardCountResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void GetCardCountResponse::Swap(GetCardCountResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetCardCountResponse::InternalSwap(GetCardCountResponse* other) {
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(count_, other->count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetCardCountResponse::GetMetadata() const {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetCardCountResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool GetCardCountResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetCardCountResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000001u;
}
void GetCardCountResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetCardCountResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& GetCardCountResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetCardCountResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* GetCardCountResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetCardCountResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* GetCardCountResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetCardCountResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void GetCardCountResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetCardCountResponse.BaseResponse)
}

// optional uint32 count = 2;
bool GetCardCountResponse::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetCardCountResponse::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
void GetCardCountResponse::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetCardCountResponse::clear_count() {
  count_ = 0u;
  clear_has_count();
}
::google::protobuf::uint32 GetCardCountResponse::count() const {
  // @@protoc_insertion_point(field_get:micromsg.GetCardCountResponse.count)
  return count_;
}
void GetCardCountResponse::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetCardCountResponse.count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetAvailableCardRequest::kBaseRequestFieldNumber;
const int GetAvailableCardRequest::kAppIdFieldNumber;
const int GetAvailableCardRequest::kShopIdFieldNumber;
const int GetAvailableCardRequest::kSignTypeFieldNumber;
const int GetAvailableCardRequest::kCardSignFieldNumber;
const int GetAvailableCardRequest::kTimeStampFieldNumber;
const int GetAvailableCardRequest::kNonceStrFieldNumber;
const int GetAvailableCardRequest::kCardTpIdFieldNumber;
const int GetAvailableCardRequest::kCardTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetAvailableCardRequest::GetAvailableCardRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcard_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetAvailableCardRequest)
}
GetAvailableCardRequest::GetAvailableCardRequest(const GetAvailableCardRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  app_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_app_id()) {
    app_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_id_);
  }
  sign_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sign_type()) {
    sign_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_type_);
  }
  card_sign_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_card_sign()) {
    card_sign_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.card_sign_);
  }
  nonce_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nonce_str()) {
    nonce_str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nonce_str_);
  }
  card_tp_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_card_tp_id()) {
    card_tp_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.card_tp_id_);
  }
  card_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_card_type()) {
    card_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.card_type_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  ::memcpy(&shop_id_, &from.shop_id_,
    reinterpret_cast<char*>(&time_stamp_) -
    reinterpret_cast<char*>(&shop_id_) + sizeof(time_stamp_));
  // @@protoc_insertion_point(copy_constructor:micromsg.GetAvailableCardRequest)
}

void GetAvailableCardRequest::SharedCtor() {
  _cached_size_ = 0;
  app_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  card_sign_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nonce_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  card_tp_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  card_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&time_stamp_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(time_stamp_));
}

GetAvailableCardRequest::~GetAvailableCardRequest() {
  // @@protoc_insertion_point(destructor:micromsg.GetAvailableCardRequest)
  SharedDtor();
}

void GetAvailableCardRequest::SharedDtor() {
  app_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  card_sign_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nonce_str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  card_tp_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  card_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void GetAvailableCardRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAvailableCardRequest::descriptor() {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetAvailableCardRequest& GetAvailableCardRequest::default_instance() {
  protobuf_mmcard_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetAvailableCardRequest* GetAvailableCardRequest::New(::google::protobuf::Arena* arena) const {
  GetAvailableCardRequest* n = new GetAvailableCardRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetAvailableCardRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetAvailableCardRequest)
  if (_has_bits_[0 / 32] & 127u) {
    if (has_app_id()) {
      GOOGLE_DCHECK(!app_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*app_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_sign_type()) {
      GOOGLE_DCHECK(!sign_type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sign_type_.UnsafeRawStringPointer())->clear();
    }
    if (has_card_sign()) {
      GOOGLE_DCHECK(!card_sign_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*card_sign_.UnsafeRawStringPointer())->clear();
    }
    if (has_nonce_str()) {
      GOOGLE_DCHECK(!nonce_str_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*nonce_str_.UnsafeRawStringPointer())->clear();
    }
    if (has_card_tp_id()) {
      GOOGLE_DCHECK(!card_tp_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*card_tp_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_card_type()) {
      GOOGLE_DCHECK(!card_type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*card_type_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  shop_id_ = 0u;
  time_stamp_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetAvailableCardRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetAvailableCardRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string app_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->app_id().data(), this->app_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetAvailableCardRequest.app_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 shop_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_shop_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shop_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string sign_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sign_type().data(), this->sign_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetAvailableCardRequest.sign_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string card_sign = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_card_sign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->card_sign().data(), this->card_sign().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetAvailableCardRequest.card_sign");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_stamp = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_time_stamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string nonce_str = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nonce_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nonce_str().data(), this->nonce_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetAvailableCardRequest.nonce_str");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string card_tp_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_card_tp_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->card_tp_id().data(), this->card_tp_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetAvailableCardRequest.card_tp_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string card_type = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_card_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->card_type().data(), this->card_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetAvailableCardRequest.card_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetAvailableCardRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetAvailableCardRequest)
  return false;
#undef DO_
}

void GetAvailableCardRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetAvailableCardRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // optional string app_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_id().data(), this->app_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetAvailableCardRequest.app_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->app_id(), output);
  }

  // optional uint32 shop_id = 3;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->shop_id(), output);
  }

  // optional string sign_type = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sign_type().data(), this->sign_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetAvailableCardRequest.sign_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sign_type(), output);
  }

  // optional string card_sign = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->card_sign().data(), this->card_sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetAvailableCardRequest.card_sign");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->card_sign(), output);
  }

  // optional uint32 time_stamp = 6;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->time_stamp(), output);
  }

  // optional string nonce_str = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nonce_str().data(), this->nonce_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetAvailableCardRequest.nonce_str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->nonce_str(), output);
  }

  // optional string card_tp_id = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->card_tp_id().data(), this->card_tp_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetAvailableCardRequest.card_tp_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->card_tp_id(), output);
  }

  // optional string card_type = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->card_type().data(), this->card_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetAvailableCardRequest.card_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->card_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetAvailableCardRequest)
}

::google::protobuf::uint8* GetAvailableCardRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetAvailableCardRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // optional string app_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_id().data(), this->app_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetAvailableCardRequest.app_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->app_id(), target);
  }

  // optional uint32 shop_id = 3;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->shop_id(), target);
  }

  // optional string sign_type = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sign_type().data(), this->sign_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetAvailableCardRequest.sign_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sign_type(), target);
  }

  // optional string card_sign = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->card_sign().data(), this->card_sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetAvailableCardRequest.card_sign");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->card_sign(), target);
  }

  // optional uint32 time_stamp = 6;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->time_stamp(), target);
  }

  // optional string nonce_str = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nonce_str().data(), this->nonce_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetAvailableCardRequest.nonce_str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->nonce_str(), target);
  }

  // optional string card_tp_id = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->card_tp_id().data(), this->card_tp_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetAvailableCardRequest.card_tp_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->card_tp_id(), target);
  }

  // optional string card_type = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->card_type().data(), this->card_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetAvailableCardRequest.card_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->card_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetAvailableCardRequest)
  return target;
}

size_t GetAvailableCardRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetAvailableCardRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (has_baserequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string app_id = 2;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_id());
    }

    // optional string sign_type = 4;
    if (has_sign_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign_type());
    }

    // optional string card_sign = 5;
    if (has_card_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->card_sign());
    }

    // optional string nonce_str = 7;
    if (has_nonce_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nonce_str());
    }

    // optional string card_tp_id = 8;
    if (has_card_tp_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->card_tp_id());
    }

    // optional string card_type = 9;
    if (has_card_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->card_type());
    }

  }
  // optional uint32 shop_id = 3;
  if (has_shop_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->shop_id());
  }

  // optional uint32 time_stamp = 6;
  if (has_time_stamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->time_stamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAvailableCardRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetAvailableCardRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAvailableCardRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetAvailableCardRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetAvailableCardRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetAvailableCardRequest)
    MergeFrom(*source);
  }
}

void GetAvailableCardRequest::MergeFrom(const GetAvailableCardRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetAvailableCardRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_app_id();
      app_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_sign_type();
      sign_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_type_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_card_sign();
      card_sign_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.card_sign_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_nonce_str();
      nonce_str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nonce_str_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_card_tp_id();
      card_tp_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.card_tp_id_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_card_type();
      card_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.card_type_);
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000080u) {
      shop_id_ = from.shop_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_time_stamp(from.time_stamp());
  }
}

void GetAvailableCardRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetAvailableCardRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAvailableCardRequest::CopyFrom(const GetAvailableCardRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetAvailableCardRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAvailableCardRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000040) != 0x00000040) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void GetAvailableCardRequest::Swap(GetAvailableCardRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetAvailableCardRequest::InternalSwap(GetAvailableCardRequest* other) {
  app_id_.Swap(&other->app_id_);
  sign_type_.Swap(&other->sign_type_);
  card_sign_.Swap(&other->card_sign_);
  nonce_str_.Swap(&other->nonce_str_);
  card_tp_id_.Swap(&other->card_tp_id_);
  card_type_.Swap(&other->card_type_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(shop_id_, other->shop_id_);
  std::swap(time_stamp_, other->time_stamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetAvailableCardRequest::GetMetadata() const {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetAvailableCardRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool GetAvailableCardRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void GetAvailableCardRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000040u;
}
void GetAvailableCardRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000040u;
}
void GetAvailableCardRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& GetAvailableCardRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetAvailableCardRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* GetAvailableCardRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetAvailableCardRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* GetAvailableCardRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetAvailableCardRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void GetAvailableCardRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetAvailableCardRequest.BaseRequest)
}

// optional string app_id = 2;
bool GetAvailableCardRequest::has_app_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetAvailableCardRequest::set_has_app_id() {
  _has_bits_[0] |= 0x00000001u;
}
void GetAvailableCardRequest::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetAvailableCardRequest::clear_app_id() {
  app_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_app_id();
}
const ::std::string& GetAvailableCardRequest::app_id() const {
  // @@protoc_insertion_point(field_get:micromsg.GetAvailableCardRequest.app_id)
  return app_id_.GetNoArena();
}
void GetAvailableCardRequest::set_app_id(const ::std::string& value) {
  set_has_app_id();
  app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetAvailableCardRequest.app_id)
}
#if LANG_CXX11
void GetAvailableCardRequest::set_app_id(::std::string&& value) {
  set_has_app_id();
  app_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetAvailableCardRequest.app_id)
}
#endif
void GetAvailableCardRequest::set_app_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_app_id();
  app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetAvailableCardRequest.app_id)
}
void GetAvailableCardRequest::set_app_id(const char* value, size_t size) {
  set_has_app_id();
  app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetAvailableCardRequest.app_id)
}
::std::string* GetAvailableCardRequest::mutable_app_id() {
  set_has_app_id();
  // @@protoc_insertion_point(field_mutable:micromsg.GetAvailableCardRequest.app_id)
  return app_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetAvailableCardRequest::release_app_id() {
  // @@protoc_insertion_point(field_release:micromsg.GetAvailableCardRequest.app_id)
  clear_has_app_id();
  return app_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetAvailableCardRequest::set_allocated_app_id(::std::string* app_id) {
  if (app_id != NULL) {
    set_has_app_id();
  } else {
    clear_has_app_id();
  }
  app_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_id);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetAvailableCardRequest.app_id)
}

// optional uint32 shop_id = 3;
bool GetAvailableCardRequest::has_shop_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void GetAvailableCardRequest::set_has_shop_id() {
  _has_bits_[0] |= 0x00000080u;
}
void GetAvailableCardRequest::clear_has_shop_id() {
  _has_bits_[0] &= ~0x00000080u;
}
void GetAvailableCardRequest::clear_shop_id() {
  shop_id_ = 0u;
  clear_has_shop_id();
}
::google::protobuf::uint32 GetAvailableCardRequest::shop_id() const {
  // @@protoc_insertion_point(field_get:micromsg.GetAvailableCardRequest.shop_id)
  return shop_id_;
}
void GetAvailableCardRequest::set_shop_id(::google::protobuf::uint32 value) {
  set_has_shop_id();
  shop_id_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetAvailableCardRequest.shop_id)
}

// optional string sign_type = 4;
bool GetAvailableCardRequest::has_sign_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetAvailableCardRequest::set_has_sign_type() {
  _has_bits_[0] |= 0x00000002u;
}
void GetAvailableCardRequest::clear_has_sign_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetAvailableCardRequest::clear_sign_type() {
  sign_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sign_type();
}
const ::std::string& GetAvailableCardRequest::sign_type() const {
  // @@protoc_insertion_point(field_get:micromsg.GetAvailableCardRequest.sign_type)
  return sign_type_.GetNoArena();
}
void GetAvailableCardRequest::set_sign_type(const ::std::string& value) {
  set_has_sign_type();
  sign_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetAvailableCardRequest.sign_type)
}
#if LANG_CXX11
void GetAvailableCardRequest::set_sign_type(::std::string&& value) {
  set_has_sign_type();
  sign_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetAvailableCardRequest.sign_type)
}
#endif
void GetAvailableCardRequest::set_sign_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sign_type();
  sign_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetAvailableCardRequest.sign_type)
}
void GetAvailableCardRequest::set_sign_type(const char* value, size_t size) {
  set_has_sign_type();
  sign_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetAvailableCardRequest.sign_type)
}
::std::string* GetAvailableCardRequest::mutable_sign_type() {
  set_has_sign_type();
  // @@protoc_insertion_point(field_mutable:micromsg.GetAvailableCardRequest.sign_type)
  return sign_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetAvailableCardRequest::release_sign_type() {
  // @@protoc_insertion_point(field_release:micromsg.GetAvailableCardRequest.sign_type)
  clear_has_sign_type();
  return sign_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetAvailableCardRequest::set_allocated_sign_type(::std::string* sign_type) {
  if (sign_type != NULL) {
    set_has_sign_type();
  } else {
    clear_has_sign_type();
  }
  sign_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sign_type);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetAvailableCardRequest.sign_type)
}

// optional string card_sign = 5;
bool GetAvailableCardRequest::has_card_sign() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetAvailableCardRequest::set_has_card_sign() {
  _has_bits_[0] |= 0x00000004u;
}
void GetAvailableCardRequest::clear_has_card_sign() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetAvailableCardRequest::clear_card_sign() {
  card_sign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_card_sign();
}
const ::std::string& GetAvailableCardRequest::card_sign() const {
  // @@protoc_insertion_point(field_get:micromsg.GetAvailableCardRequest.card_sign)
  return card_sign_.GetNoArena();
}
void GetAvailableCardRequest::set_card_sign(const ::std::string& value) {
  set_has_card_sign();
  card_sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetAvailableCardRequest.card_sign)
}
#if LANG_CXX11
void GetAvailableCardRequest::set_card_sign(::std::string&& value) {
  set_has_card_sign();
  card_sign_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetAvailableCardRequest.card_sign)
}
#endif
void GetAvailableCardRequest::set_card_sign(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_card_sign();
  card_sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetAvailableCardRequest.card_sign)
}
void GetAvailableCardRequest::set_card_sign(const char* value, size_t size) {
  set_has_card_sign();
  card_sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetAvailableCardRequest.card_sign)
}
::std::string* GetAvailableCardRequest::mutable_card_sign() {
  set_has_card_sign();
  // @@protoc_insertion_point(field_mutable:micromsg.GetAvailableCardRequest.card_sign)
  return card_sign_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetAvailableCardRequest::release_card_sign() {
  // @@protoc_insertion_point(field_release:micromsg.GetAvailableCardRequest.card_sign)
  clear_has_card_sign();
  return card_sign_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetAvailableCardRequest::set_allocated_card_sign(::std::string* card_sign) {
  if (card_sign != NULL) {
    set_has_card_sign();
  } else {
    clear_has_card_sign();
  }
  card_sign_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), card_sign);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetAvailableCardRequest.card_sign)
}

// optional uint32 time_stamp = 6;
bool GetAvailableCardRequest::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void GetAvailableCardRequest::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000100u;
}
void GetAvailableCardRequest::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000100u;
}
void GetAvailableCardRequest::clear_time_stamp() {
  time_stamp_ = 0u;
  clear_has_time_stamp();
}
::google::protobuf::uint32 GetAvailableCardRequest::time_stamp() const {
  // @@protoc_insertion_point(field_get:micromsg.GetAvailableCardRequest.time_stamp)
  return time_stamp_;
}
void GetAvailableCardRequest::set_time_stamp(::google::protobuf::uint32 value) {
  set_has_time_stamp();
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetAvailableCardRequest.time_stamp)
}

// optional string nonce_str = 7;
bool GetAvailableCardRequest::has_nonce_str() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GetAvailableCardRequest::set_has_nonce_str() {
  _has_bits_[0] |= 0x00000008u;
}
void GetAvailableCardRequest::clear_has_nonce_str() {
  _has_bits_[0] &= ~0x00000008u;
}
void GetAvailableCardRequest::clear_nonce_str() {
  nonce_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nonce_str();
}
const ::std::string& GetAvailableCardRequest::nonce_str() const {
  // @@protoc_insertion_point(field_get:micromsg.GetAvailableCardRequest.nonce_str)
  return nonce_str_.GetNoArena();
}
void GetAvailableCardRequest::set_nonce_str(const ::std::string& value) {
  set_has_nonce_str();
  nonce_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetAvailableCardRequest.nonce_str)
}
#if LANG_CXX11
void GetAvailableCardRequest::set_nonce_str(::std::string&& value) {
  set_has_nonce_str();
  nonce_str_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetAvailableCardRequest.nonce_str)
}
#endif
void GetAvailableCardRequest::set_nonce_str(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nonce_str();
  nonce_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetAvailableCardRequest.nonce_str)
}
void GetAvailableCardRequest::set_nonce_str(const char* value, size_t size) {
  set_has_nonce_str();
  nonce_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetAvailableCardRequest.nonce_str)
}
::std::string* GetAvailableCardRequest::mutable_nonce_str() {
  set_has_nonce_str();
  // @@protoc_insertion_point(field_mutable:micromsg.GetAvailableCardRequest.nonce_str)
  return nonce_str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetAvailableCardRequest::release_nonce_str() {
  // @@protoc_insertion_point(field_release:micromsg.GetAvailableCardRequest.nonce_str)
  clear_has_nonce_str();
  return nonce_str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetAvailableCardRequest::set_allocated_nonce_str(::std::string* nonce_str) {
  if (nonce_str != NULL) {
    set_has_nonce_str();
  } else {
    clear_has_nonce_str();
  }
  nonce_str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nonce_str);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetAvailableCardRequest.nonce_str)
}

// optional string card_tp_id = 8;
bool GetAvailableCardRequest::has_card_tp_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GetAvailableCardRequest::set_has_card_tp_id() {
  _has_bits_[0] |= 0x00000010u;
}
void GetAvailableCardRequest::clear_has_card_tp_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void GetAvailableCardRequest::clear_card_tp_id() {
  card_tp_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_card_tp_id();
}
const ::std::string& GetAvailableCardRequest::card_tp_id() const {
  // @@protoc_insertion_point(field_get:micromsg.GetAvailableCardRequest.card_tp_id)
  return card_tp_id_.GetNoArena();
}
void GetAvailableCardRequest::set_card_tp_id(const ::std::string& value) {
  set_has_card_tp_id();
  card_tp_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetAvailableCardRequest.card_tp_id)
}
#if LANG_CXX11
void GetAvailableCardRequest::set_card_tp_id(::std::string&& value) {
  set_has_card_tp_id();
  card_tp_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetAvailableCardRequest.card_tp_id)
}
#endif
void GetAvailableCardRequest::set_card_tp_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_card_tp_id();
  card_tp_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetAvailableCardRequest.card_tp_id)
}
void GetAvailableCardRequest::set_card_tp_id(const char* value, size_t size) {
  set_has_card_tp_id();
  card_tp_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetAvailableCardRequest.card_tp_id)
}
::std::string* GetAvailableCardRequest::mutable_card_tp_id() {
  set_has_card_tp_id();
  // @@protoc_insertion_point(field_mutable:micromsg.GetAvailableCardRequest.card_tp_id)
  return card_tp_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetAvailableCardRequest::release_card_tp_id() {
  // @@protoc_insertion_point(field_release:micromsg.GetAvailableCardRequest.card_tp_id)
  clear_has_card_tp_id();
  return card_tp_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetAvailableCardRequest::set_allocated_card_tp_id(::std::string* card_tp_id) {
  if (card_tp_id != NULL) {
    set_has_card_tp_id();
  } else {
    clear_has_card_tp_id();
  }
  card_tp_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), card_tp_id);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetAvailableCardRequest.card_tp_id)
}

// optional string card_type = 9;
bool GetAvailableCardRequest::has_card_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void GetAvailableCardRequest::set_has_card_type() {
  _has_bits_[0] |= 0x00000020u;
}
void GetAvailableCardRequest::clear_has_card_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void GetAvailableCardRequest::clear_card_type() {
  card_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_card_type();
}
const ::std::string& GetAvailableCardRequest::card_type() const {
  // @@protoc_insertion_point(field_get:micromsg.GetAvailableCardRequest.card_type)
  return card_type_.GetNoArena();
}
void GetAvailableCardRequest::set_card_type(const ::std::string& value) {
  set_has_card_type();
  card_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetAvailableCardRequest.card_type)
}
#if LANG_CXX11
void GetAvailableCardRequest::set_card_type(::std::string&& value) {
  set_has_card_type();
  card_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetAvailableCardRequest.card_type)
}
#endif
void GetAvailableCardRequest::set_card_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_card_type();
  card_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetAvailableCardRequest.card_type)
}
void GetAvailableCardRequest::set_card_type(const char* value, size_t size) {
  set_has_card_type();
  card_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetAvailableCardRequest.card_type)
}
::std::string* GetAvailableCardRequest::mutable_card_type() {
  set_has_card_type();
  // @@protoc_insertion_point(field_mutable:micromsg.GetAvailableCardRequest.card_type)
  return card_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetAvailableCardRequest::release_card_type() {
  // @@protoc_insertion_point(field_release:micromsg.GetAvailableCardRequest.card_type)
  clear_has_card_type();
  return card_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetAvailableCardRequest::set_allocated_card_type(::std::string* card_type) {
  if (card_type != NULL) {
    set_has_card_type();
  } else {
    clear_has_card_type();
  }
  card_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), card_type);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetAvailableCardRequest.card_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetAvailableCardResponse::kBaseResponseFieldNumber;
const int GetAvailableCardResponse::kJsonRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetAvailableCardResponse::GetAvailableCardResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcard_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetAvailableCardResponse)
}
GetAvailableCardResponse::GetAvailableCardResponse(const GetAvailableCardResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  json_ret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_json_ret()) {
    json_ret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_ret_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.GetAvailableCardResponse)
}

void GetAvailableCardResponse::SharedCtor() {
  _cached_size_ = 0;
  json_ret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baseresponse_ = NULL;
}

GetAvailableCardResponse::~GetAvailableCardResponse() {
  // @@protoc_insertion_point(destructor:micromsg.GetAvailableCardResponse)
  SharedDtor();
}

void GetAvailableCardResponse::SharedDtor() {
  json_ret_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void GetAvailableCardResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAvailableCardResponse::descriptor() {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetAvailableCardResponse& GetAvailableCardResponse::default_instance() {
  protobuf_mmcard_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetAvailableCardResponse* GetAvailableCardResponse::New(::google::protobuf::Arena* arena) const {
  GetAvailableCardResponse* n = new GetAvailableCardResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetAvailableCardResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetAvailableCardResponse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_json_ret()) {
      GOOGLE_DCHECK(!json_ret_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*json_ret_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetAvailableCardResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetAvailableCardResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string json_ret = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_json_ret()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->json_ret().data(), this->json_ret().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetAvailableCardResponse.json_ret");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetAvailableCardResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetAvailableCardResponse)
  return false;
#undef DO_
}

void GetAvailableCardResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetAvailableCardResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // optional string json_ret = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->json_ret().data(), this->json_ret().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetAvailableCardResponse.json_ret");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->json_ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetAvailableCardResponse)
}

::google::protobuf::uint8* GetAvailableCardResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetAvailableCardResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // optional string json_ret = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->json_ret().data(), this->json_ret().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetAvailableCardResponse.json_ret");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->json_ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetAvailableCardResponse)
  return target;
}

size_t GetAvailableCardResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetAvailableCardResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  // optional string json_ret = 2;
  if (has_json_ret()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->json_ret());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAvailableCardResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetAvailableCardResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAvailableCardResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetAvailableCardResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetAvailableCardResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetAvailableCardResponse)
    MergeFrom(*source);
  }
}

void GetAvailableCardResponse::MergeFrom(const GetAvailableCardResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetAvailableCardResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_json_ret();
      json_ret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_ret_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
  }
}

void GetAvailableCardResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetAvailableCardResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAvailableCardResponse::CopyFrom(const GetAvailableCardResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetAvailableCardResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAvailableCardResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void GetAvailableCardResponse::Swap(GetAvailableCardResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetAvailableCardResponse::InternalSwap(GetAvailableCardResponse* other) {
  json_ret_.Swap(&other->json_ret_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetAvailableCardResponse::GetMetadata() const {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetAvailableCardResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool GetAvailableCardResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetAvailableCardResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000002u;
}
void GetAvailableCardResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetAvailableCardResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& GetAvailableCardResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetAvailableCardResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* GetAvailableCardResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetAvailableCardResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* GetAvailableCardResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetAvailableCardResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void GetAvailableCardResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetAvailableCardResponse.BaseResponse)
}

// optional string json_ret = 2;
bool GetAvailableCardResponse::has_json_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetAvailableCardResponse::set_has_json_ret() {
  _has_bits_[0] |= 0x00000001u;
}
void GetAvailableCardResponse::clear_has_json_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetAvailableCardResponse::clear_json_ret() {
  json_ret_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_json_ret();
}
const ::std::string& GetAvailableCardResponse::json_ret() const {
  // @@protoc_insertion_point(field_get:micromsg.GetAvailableCardResponse.json_ret)
  return json_ret_.GetNoArena();
}
void GetAvailableCardResponse::set_json_ret(const ::std::string& value) {
  set_has_json_ret();
  json_ret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetAvailableCardResponse.json_ret)
}
#if LANG_CXX11
void GetAvailableCardResponse::set_json_ret(::std::string&& value) {
  set_has_json_ret();
  json_ret_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetAvailableCardResponse.json_ret)
}
#endif
void GetAvailableCardResponse::set_json_ret(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_json_ret();
  json_ret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetAvailableCardResponse.json_ret)
}
void GetAvailableCardResponse::set_json_ret(const char* value, size_t size) {
  set_has_json_ret();
  json_ret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetAvailableCardResponse.json_ret)
}
::std::string* GetAvailableCardResponse::mutable_json_ret() {
  set_has_json_ret();
  // @@protoc_insertion_point(field_mutable:micromsg.GetAvailableCardResponse.json_ret)
  return json_ret_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetAvailableCardResponse::release_json_ret() {
  // @@protoc_insertion_point(field_release:micromsg.GetAvailableCardResponse.json_ret)
  clear_has_json_ret();
  return json_ret_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetAvailableCardResponse::set_allocated_json_ret(::std::string* json_ret) {
  if (json_ret != NULL) {
    set_has_json_ret();
  } else {
    clear_has_json_ret();
  }
  json_ret_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), json_ret);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetAvailableCardResponse.json_ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CardListItem::kCardTpIdFieldNumber;
const int CardListItem::kCardExtFieldNumber;
const int CardListItem::kIsSuccFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CardListItem::CardListItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcard_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.CardListItem)
}
CardListItem::CardListItem(const CardListItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  card_tp_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_card_tp_id()) {
    card_tp_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.card_tp_id_);
  }
  card_ext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_card_ext()) {
    card_ext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.card_ext_);
  }
  is_succ_ = from.is_succ_;
  // @@protoc_insertion_point(copy_constructor:micromsg.CardListItem)
}

void CardListItem::SharedCtor() {
  _cached_size_ = 0;
  card_tp_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  card_ext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_succ_ = 0;
}

CardListItem::~CardListItem() {
  // @@protoc_insertion_point(destructor:micromsg.CardListItem)
  SharedDtor();
}

void CardListItem::SharedDtor() {
  card_tp_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  card_ext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CardListItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CardListItem::descriptor() {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CardListItem& CardListItem::default_instance() {
  protobuf_mmcard_2eproto::InitDefaults();
  return *internal_default_instance();
}

CardListItem* CardListItem::New(::google::protobuf::Arena* arena) const {
  CardListItem* n = new CardListItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CardListItem::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.CardListItem)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_card_tp_id()) {
      GOOGLE_DCHECK(!card_tp_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*card_tp_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_card_ext()) {
      GOOGLE_DCHECK(!card_ext_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*card_ext_.UnsafeRawStringPointer())->clear();
    }
  }
  is_succ_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CardListItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.CardListItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string card_tp_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_card_tp_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->card_tp_id().data(), this->card_tp_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.CardListItem.card_tp_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string card_ext = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_card_ext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->card_ext().data(), this->card_ext().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.CardListItem.card_ext");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 is_succ = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_is_succ();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_succ_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.CardListItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.CardListItem)
  return false;
#undef DO_
}

void CardListItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.CardListItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string card_tp_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->card_tp_id().data(), this->card_tp_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CardListItem.card_tp_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->card_tp_id(), output);
  }

  // optional string card_ext = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->card_ext().data(), this->card_ext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CardListItem.card_ext");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->card_ext(), output);
  }

  // optional int32 is_succ = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->is_succ(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.CardListItem)
}

::google::protobuf::uint8* CardListItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.CardListItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string card_tp_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->card_tp_id().data(), this->card_tp_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CardListItem.card_tp_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->card_tp_id(), target);
  }

  // optional string card_ext = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->card_ext().data(), this->card_ext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CardListItem.card_ext");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->card_ext(), target);
  }

  // optional int32 is_succ = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->is_succ(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.CardListItem)
  return target;
}

size_t CardListItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.CardListItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string card_tp_id = 1;
    if (has_card_tp_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->card_tp_id());
    }

    // optional string card_ext = 2;
    if (has_card_ext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->card_ext());
    }

    // optional int32 is_succ = 3;
    if (has_is_succ()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_succ());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CardListItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.CardListItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CardListItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CardListItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.CardListItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.CardListItem)
    MergeFrom(*source);
  }
}

void CardListItem::MergeFrom(const CardListItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.CardListItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_card_tp_id();
      card_tp_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.card_tp_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_card_ext();
      card_ext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.card_ext_);
    }
    if (cached_has_bits & 0x00000004u) {
      is_succ_ = from.is_succ_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CardListItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.CardListItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CardListItem::CopyFrom(const CardListItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.CardListItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardListItem::IsInitialized() const {
  return true;
}

void CardListItem::Swap(CardListItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CardListItem::InternalSwap(CardListItem* other) {
  card_tp_id_.Swap(&other->card_tp_id_);
  card_ext_.Swap(&other->card_ext_);
  std::swap(is_succ_, other->is_succ_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CardListItem::GetMetadata() const {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CardListItem

// optional string card_tp_id = 1;
bool CardListItem::has_card_tp_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CardListItem::set_has_card_tp_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CardListItem::clear_has_card_tp_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CardListItem::clear_card_tp_id() {
  card_tp_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_card_tp_id();
}
const ::std::string& CardListItem::card_tp_id() const {
  // @@protoc_insertion_point(field_get:micromsg.CardListItem.card_tp_id)
  return card_tp_id_.GetNoArena();
}
void CardListItem::set_card_tp_id(const ::std::string& value) {
  set_has_card_tp_id();
  card_tp_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CardListItem.card_tp_id)
}
#if LANG_CXX11
void CardListItem::set_card_tp_id(::std::string&& value) {
  set_has_card_tp_id();
  card_tp_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CardListItem.card_tp_id)
}
#endif
void CardListItem::set_card_tp_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_card_tp_id();
  card_tp_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CardListItem.card_tp_id)
}
void CardListItem::set_card_tp_id(const char* value, size_t size) {
  set_has_card_tp_id();
  card_tp_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CardListItem.card_tp_id)
}
::std::string* CardListItem::mutable_card_tp_id() {
  set_has_card_tp_id();
  // @@protoc_insertion_point(field_mutable:micromsg.CardListItem.card_tp_id)
  return card_tp_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CardListItem::release_card_tp_id() {
  // @@protoc_insertion_point(field_release:micromsg.CardListItem.card_tp_id)
  clear_has_card_tp_id();
  return card_tp_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CardListItem::set_allocated_card_tp_id(::std::string* card_tp_id) {
  if (card_tp_id != NULL) {
    set_has_card_tp_id();
  } else {
    clear_has_card_tp_id();
  }
  card_tp_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), card_tp_id);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CardListItem.card_tp_id)
}

// optional string card_ext = 2;
bool CardListItem::has_card_ext() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CardListItem::set_has_card_ext() {
  _has_bits_[0] |= 0x00000002u;
}
void CardListItem::clear_has_card_ext() {
  _has_bits_[0] &= ~0x00000002u;
}
void CardListItem::clear_card_ext() {
  card_ext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_card_ext();
}
const ::std::string& CardListItem::card_ext() const {
  // @@protoc_insertion_point(field_get:micromsg.CardListItem.card_ext)
  return card_ext_.GetNoArena();
}
void CardListItem::set_card_ext(const ::std::string& value) {
  set_has_card_ext();
  card_ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CardListItem.card_ext)
}
#if LANG_CXX11
void CardListItem::set_card_ext(::std::string&& value) {
  set_has_card_ext();
  card_ext_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CardListItem.card_ext)
}
#endif
void CardListItem::set_card_ext(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_card_ext();
  card_ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CardListItem.card_ext)
}
void CardListItem::set_card_ext(const char* value, size_t size) {
  set_has_card_ext();
  card_ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CardListItem.card_ext)
}
::std::string* CardListItem::mutable_card_ext() {
  set_has_card_ext();
  // @@protoc_insertion_point(field_mutable:micromsg.CardListItem.card_ext)
  return card_ext_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CardListItem::release_card_ext() {
  // @@protoc_insertion_point(field_release:micromsg.CardListItem.card_ext)
  clear_has_card_ext();
  return card_ext_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CardListItem::set_allocated_card_ext(::std::string* card_ext) {
  if (card_ext != NULL) {
    set_has_card_ext();
  } else {
    clear_has_card_ext();
  }
  card_ext_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), card_ext);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CardListItem.card_ext)
}

// optional int32 is_succ = 3;
bool CardListItem::has_is_succ() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CardListItem::set_has_is_succ() {
  _has_bits_[0] |= 0x00000004u;
}
void CardListItem::clear_has_is_succ() {
  _has_bits_[0] &= ~0x00000004u;
}
void CardListItem::clear_is_succ() {
  is_succ_ = 0;
  clear_has_is_succ();
}
::google::protobuf::int32 CardListItem::is_succ() const {
  // @@protoc_insertion_point(field_get:micromsg.CardListItem.is_succ)
  return is_succ_;
}
void CardListItem::set_is_succ(::google::protobuf::int32 value) {
  set_has_is_succ();
  is_succ_ = value;
  // @@protoc_insertion_point(field_set:micromsg.CardListItem.is_succ)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CardListItems::kCardListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CardListItems::CardListItems()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcard_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.CardListItems)
}
CardListItems::CardListItems(const CardListItems& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      card_list_(from.card_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:micromsg.CardListItems)
}

void CardListItems::SharedCtor() {
  _cached_size_ = 0;
}

CardListItems::~CardListItems() {
  // @@protoc_insertion_point(destructor:micromsg.CardListItems)
  SharedDtor();
}

void CardListItems::SharedDtor() {
}

void CardListItems::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CardListItems::descriptor() {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CardListItems& CardListItems::default_instance() {
  protobuf_mmcard_2eproto::InitDefaults();
  return *internal_default_instance();
}

CardListItems* CardListItems::New(::google::protobuf::Arena* arena) const {
  CardListItems* n = new CardListItems;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CardListItems::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.CardListItems)
  card_list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CardListItems::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.CardListItems)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .micromsg.CardListItem card_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_card_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.CardListItems)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.CardListItems)
  return false;
#undef DO_
}

void CardListItems::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.CardListItems)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .micromsg.CardListItem card_list = 1;
  for (unsigned int i = 0, n = this->card_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->card_list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.CardListItems)
}

::google::protobuf::uint8* CardListItems::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.CardListItems)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .micromsg.CardListItem card_list = 1;
  for (unsigned int i = 0, n = this->card_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->card_list(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.CardListItems)
  return target;
}

size_t CardListItems::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.CardListItems)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .micromsg.CardListItem card_list = 1;
  {
    unsigned int count = this->card_list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->card_list(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CardListItems::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.CardListItems)
  GOOGLE_DCHECK_NE(&from, this);
  const CardListItems* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CardListItems>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.CardListItems)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.CardListItems)
    MergeFrom(*source);
  }
}

void CardListItems::MergeFrom(const CardListItems& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.CardListItems)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  card_list_.MergeFrom(from.card_list_);
}

void CardListItems::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.CardListItems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CardListItems::CopyFrom(const CardListItems& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.CardListItems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardListItems::IsInitialized() const {
  return true;
}

void CardListItems::Swap(CardListItems* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CardListItems::InternalSwap(CardListItems* other) {
  card_list_.InternalSwap(&other->card_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CardListItems::GetMetadata() const {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CardListItems

// repeated .micromsg.CardListItem card_list = 1;
int CardListItems::card_list_size() const {
  return card_list_.size();
}
void CardListItems::clear_card_list() {
  card_list_.Clear();
}
const ::micromsg::CardListItem& CardListItems::card_list(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.CardListItems.card_list)
  return card_list_.Get(index);
}
::micromsg::CardListItem* CardListItems::mutable_card_list(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.CardListItems.card_list)
  return card_list_.Mutable(index);
}
::micromsg::CardListItem* CardListItems::add_card_list() {
  // @@protoc_insertion_point(field_add:micromsg.CardListItems.card_list)
  return card_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::CardListItem >*
CardListItems::mutable_card_list() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.CardListItems.card_list)
  return &card_list_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::CardListItem >&
CardListItems::card_list() const {
  // @@protoc_insertion_point(field_list:micromsg.CardListItems.card_list)
  return card_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetCardListFromAppRequest::kBaseRequestFieldNumber;
const int GetCardListFromAppRequest::kCardListFieldNumber;
const int GetCardListFromAppRequest::kFromSceneFieldNumber;
const int GetCardListFromAppRequest::kBundleIdFieldNumber;
const int GetCardListFromAppRequest::kPackageNameFieldNumber;
const int GetCardListFromAppRequest::kSignFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetCardListFromAppRequest::GetCardListFromAppRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcard_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetCardListFromAppRequest)
}
GetCardListFromAppRequest::GetCardListFromAppRequest(const GetCardListFromAppRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      card_list_(from.card_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bundle_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bundle_id()) {
    bundle_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bundle_id_);
  }
  package_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_package_name()) {
    package_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.package_name_);
  }
  sign_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sign()) {
    sign_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_);
  }
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  from_scene_ = from.from_scene_;
  // @@protoc_insertion_point(copy_constructor:micromsg.GetCardListFromAppRequest)
}

void GetCardListFromAppRequest::SharedCtor() {
  _cached_size_ = 0;
  bundle_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  package_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&from_scene_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(from_scene_));
}

GetCardListFromAppRequest::~GetCardListFromAppRequest() {
  // @@protoc_insertion_point(destructor:micromsg.GetCardListFromAppRequest)
  SharedDtor();
}

void GetCardListFromAppRequest::SharedDtor() {
  bundle_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  package_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void GetCardListFromAppRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetCardListFromAppRequest::descriptor() {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetCardListFromAppRequest& GetCardListFromAppRequest::default_instance() {
  protobuf_mmcard_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetCardListFromAppRequest* GetCardListFromAppRequest::New(::google::protobuf::Arena* arena) const {
  GetCardListFromAppRequest* n = new GetCardListFromAppRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetCardListFromAppRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetCardListFromAppRequest)
  card_list_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    if (has_bundle_id()) {
      GOOGLE_DCHECK(!bundle_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bundle_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_package_name()) {
      GOOGLE_DCHECK(!package_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*package_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_sign()) {
      GOOGLE_DCHECK(!sign_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sign_.UnsafeRawStringPointer())->clear();
    }
    if (has_baserequest()) {
      GOOGLE_DCHECK(baserequest_ != NULL);
      baserequest_->::micromsg::BaseRequest::Clear();
    }
  }
  from_scene_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetCardListFromAppRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetCardListFromAppRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.CardListItem card_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_card_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 from_scene = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_from_scene();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_scene_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string bundle_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bundle_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bundle_id().data(), this->bundle_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetCardListFromAppRequest.bundle_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string package_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_package_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->package_name().data(), this->package_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetCardListFromAppRequest.package_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string sign = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sign().data(), this->sign().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetCardListFromAppRequest.sign");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetCardListFromAppRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetCardListFromAppRequest)
  return false;
#undef DO_
}

void GetCardListFromAppRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetCardListFromAppRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // repeated .micromsg.CardListItem card_list = 2;
  for (unsigned int i = 0, n = this->card_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->card_list(i), output);
  }

  // optional uint32 from_scene = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->from_scene(), output);
  }

  // optional string bundle_id = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bundle_id().data(), this->bundle_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetCardListFromAppRequest.bundle_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->bundle_id(), output);
  }

  // optional string package_name = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->package_name().data(), this->package_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetCardListFromAppRequest.package_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->package_name(), output);
  }

  // optional string sign = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetCardListFromAppRequest.sign");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->sign(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetCardListFromAppRequest)
}

::google::protobuf::uint8* GetCardListFromAppRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetCardListFromAppRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // repeated .micromsg.CardListItem card_list = 2;
  for (unsigned int i = 0, n = this->card_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->card_list(i), deterministic, target);
  }

  // optional uint32 from_scene = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->from_scene(), target);
  }

  // optional string bundle_id = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bundle_id().data(), this->bundle_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetCardListFromAppRequest.bundle_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->bundle_id(), target);
  }

  // optional string package_name = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->package_name().data(), this->package_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetCardListFromAppRequest.package_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->package_name(), target);
  }

  // optional string sign = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetCardListFromAppRequest.sign");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->sign(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetCardListFromAppRequest)
  return target;
}

size_t GetCardListFromAppRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetCardListFromAppRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (has_baserequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }
  // repeated .micromsg.CardListItem card_list = 2;
  {
    unsigned int count = this->card_list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->card_list(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string bundle_id = 4;
    if (has_bundle_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bundle_id());
    }

    // optional string package_name = 5;
    if (has_package_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->package_name());
    }

    // optional string sign = 6;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign());
    }

  }
  // optional uint32 from_scene = 3;
  if (has_from_scene()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->from_scene());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCardListFromAppRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetCardListFromAppRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCardListFromAppRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetCardListFromAppRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetCardListFromAppRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetCardListFromAppRequest)
    MergeFrom(*source);
  }
}

void GetCardListFromAppRequest::MergeFrom(const GetCardListFromAppRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetCardListFromAppRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  card_list_.MergeFrom(from.card_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_bundle_id();
      bundle_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bundle_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_package_name();
      package_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.package_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_sign();
      sign_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000010u) {
      from_scene_ = from.from_scene_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetCardListFromAppRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetCardListFromAppRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCardListFromAppRequest::CopyFrom(const GetCardListFromAppRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetCardListFromAppRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCardListFromAppRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void GetCardListFromAppRequest::Swap(GetCardListFromAppRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetCardListFromAppRequest::InternalSwap(GetCardListFromAppRequest* other) {
  card_list_.InternalSwap(&other->card_list_);
  bundle_id_.Swap(&other->bundle_id_);
  package_name_.Swap(&other->package_name_);
  sign_.Swap(&other->sign_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(from_scene_, other->from_scene_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetCardListFromAppRequest::GetMetadata() const {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetCardListFromAppRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool GetCardListFromAppRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GetCardListFromAppRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000008u;
}
void GetCardListFromAppRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000008u;
}
void GetCardListFromAppRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& GetCardListFromAppRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetCardListFromAppRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* GetCardListFromAppRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetCardListFromAppRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* GetCardListFromAppRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetCardListFromAppRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void GetCardListFromAppRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetCardListFromAppRequest.BaseRequest)
}

// repeated .micromsg.CardListItem card_list = 2;
int GetCardListFromAppRequest::card_list_size() const {
  return card_list_.size();
}
void GetCardListFromAppRequest::clear_card_list() {
  card_list_.Clear();
}
const ::micromsg::CardListItem& GetCardListFromAppRequest::card_list(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.GetCardListFromAppRequest.card_list)
  return card_list_.Get(index);
}
::micromsg::CardListItem* GetCardListFromAppRequest::mutable_card_list(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.GetCardListFromAppRequest.card_list)
  return card_list_.Mutable(index);
}
::micromsg::CardListItem* GetCardListFromAppRequest::add_card_list() {
  // @@protoc_insertion_point(field_add:micromsg.GetCardListFromAppRequest.card_list)
  return card_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::CardListItem >*
GetCardListFromAppRequest::mutable_card_list() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.GetCardListFromAppRequest.card_list)
  return &card_list_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::CardListItem >&
GetCardListFromAppRequest::card_list() const {
  // @@protoc_insertion_point(field_list:micromsg.GetCardListFromAppRequest.card_list)
  return card_list_;
}

// optional uint32 from_scene = 3;
bool GetCardListFromAppRequest::has_from_scene() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GetCardListFromAppRequest::set_has_from_scene() {
  _has_bits_[0] |= 0x00000010u;
}
void GetCardListFromAppRequest::clear_has_from_scene() {
  _has_bits_[0] &= ~0x00000010u;
}
void GetCardListFromAppRequest::clear_from_scene() {
  from_scene_ = 0u;
  clear_has_from_scene();
}
::google::protobuf::uint32 GetCardListFromAppRequest::from_scene() const {
  // @@protoc_insertion_point(field_get:micromsg.GetCardListFromAppRequest.from_scene)
  return from_scene_;
}
void GetCardListFromAppRequest::set_from_scene(::google::protobuf::uint32 value) {
  set_has_from_scene();
  from_scene_ = value;
  // @@protoc_insertion_point(field_set:micromsg.GetCardListFromAppRequest.from_scene)
}

// optional string bundle_id = 4;
bool GetCardListFromAppRequest::has_bundle_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetCardListFromAppRequest::set_has_bundle_id() {
  _has_bits_[0] |= 0x00000001u;
}
void GetCardListFromAppRequest::clear_has_bundle_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetCardListFromAppRequest::clear_bundle_id() {
  bundle_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bundle_id();
}
const ::std::string& GetCardListFromAppRequest::bundle_id() const {
  // @@protoc_insertion_point(field_get:micromsg.GetCardListFromAppRequest.bundle_id)
  return bundle_id_.GetNoArena();
}
void GetCardListFromAppRequest::set_bundle_id(const ::std::string& value) {
  set_has_bundle_id();
  bundle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetCardListFromAppRequest.bundle_id)
}
#if LANG_CXX11
void GetCardListFromAppRequest::set_bundle_id(::std::string&& value) {
  set_has_bundle_id();
  bundle_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetCardListFromAppRequest.bundle_id)
}
#endif
void GetCardListFromAppRequest::set_bundle_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bundle_id();
  bundle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetCardListFromAppRequest.bundle_id)
}
void GetCardListFromAppRequest::set_bundle_id(const char* value, size_t size) {
  set_has_bundle_id();
  bundle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetCardListFromAppRequest.bundle_id)
}
::std::string* GetCardListFromAppRequest::mutable_bundle_id() {
  set_has_bundle_id();
  // @@protoc_insertion_point(field_mutable:micromsg.GetCardListFromAppRequest.bundle_id)
  return bundle_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetCardListFromAppRequest::release_bundle_id() {
  // @@protoc_insertion_point(field_release:micromsg.GetCardListFromAppRequest.bundle_id)
  clear_has_bundle_id();
  return bundle_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetCardListFromAppRequest::set_allocated_bundle_id(::std::string* bundle_id) {
  if (bundle_id != NULL) {
    set_has_bundle_id();
  } else {
    clear_has_bundle_id();
  }
  bundle_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bundle_id);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetCardListFromAppRequest.bundle_id)
}

// optional string package_name = 5;
bool GetCardListFromAppRequest::has_package_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetCardListFromAppRequest::set_has_package_name() {
  _has_bits_[0] |= 0x00000002u;
}
void GetCardListFromAppRequest::clear_has_package_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetCardListFromAppRequest::clear_package_name() {
  package_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_package_name();
}
const ::std::string& GetCardListFromAppRequest::package_name() const {
  // @@protoc_insertion_point(field_get:micromsg.GetCardListFromAppRequest.package_name)
  return package_name_.GetNoArena();
}
void GetCardListFromAppRequest::set_package_name(const ::std::string& value) {
  set_has_package_name();
  package_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetCardListFromAppRequest.package_name)
}
#if LANG_CXX11
void GetCardListFromAppRequest::set_package_name(::std::string&& value) {
  set_has_package_name();
  package_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetCardListFromAppRequest.package_name)
}
#endif
void GetCardListFromAppRequest::set_package_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_package_name();
  package_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetCardListFromAppRequest.package_name)
}
void GetCardListFromAppRequest::set_package_name(const char* value, size_t size) {
  set_has_package_name();
  package_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetCardListFromAppRequest.package_name)
}
::std::string* GetCardListFromAppRequest::mutable_package_name() {
  set_has_package_name();
  // @@protoc_insertion_point(field_mutable:micromsg.GetCardListFromAppRequest.package_name)
  return package_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetCardListFromAppRequest::release_package_name() {
  // @@protoc_insertion_point(field_release:micromsg.GetCardListFromAppRequest.package_name)
  clear_has_package_name();
  return package_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetCardListFromAppRequest::set_allocated_package_name(::std::string* package_name) {
  if (package_name != NULL) {
    set_has_package_name();
  } else {
    clear_has_package_name();
  }
  package_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), package_name);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetCardListFromAppRequest.package_name)
}

// optional string sign = 6;
bool GetCardListFromAppRequest::has_sign() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetCardListFromAppRequest::set_has_sign() {
  _has_bits_[0] |= 0x00000004u;
}
void GetCardListFromAppRequest::clear_has_sign() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetCardListFromAppRequest::clear_sign() {
  sign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sign();
}
const ::std::string& GetCardListFromAppRequest::sign() const {
  // @@protoc_insertion_point(field_get:micromsg.GetCardListFromAppRequest.sign)
  return sign_.GetNoArena();
}
void GetCardListFromAppRequest::set_sign(const ::std::string& value) {
  set_has_sign();
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetCardListFromAppRequest.sign)
}
#if LANG_CXX11
void GetCardListFromAppRequest::set_sign(::std::string&& value) {
  set_has_sign();
  sign_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetCardListFromAppRequest.sign)
}
#endif
void GetCardListFromAppRequest::set_sign(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sign();
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetCardListFromAppRequest.sign)
}
void GetCardListFromAppRequest::set_sign(const char* value, size_t size) {
  set_has_sign();
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetCardListFromAppRequest.sign)
}
::std::string* GetCardListFromAppRequest::mutable_sign() {
  set_has_sign();
  // @@protoc_insertion_point(field_mutable:micromsg.GetCardListFromAppRequest.sign)
  return sign_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetCardListFromAppRequest::release_sign() {
  // @@protoc_insertion_point(field_release:micromsg.GetCardListFromAppRequest.sign)
  clear_has_sign();
  return sign_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetCardListFromAppRequest::set_allocated_sign(::std::string* sign) {
  if (sign != NULL) {
    set_has_sign();
  } else {
    clear_has_sign();
  }
  sign_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sign);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetCardListFromAppRequest.sign)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetCardListFromAppResponse::kBaseResponseFieldNumber;
const int GetCardListFromAppResponse::kJsonRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetCardListFromAppResponse::GetCardListFromAppResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcard_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetCardListFromAppResponse)
}
GetCardListFromAppResponse::GetCardListFromAppResponse(const GetCardListFromAppResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  json_ret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_json_ret()) {
    json_ret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_ret_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.GetCardListFromAppResponse)
}

void GetCardListFromAppResponse::SharedCtor() {
  _cached_size_ = 0;
  json_ret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baseresponse_ = NULL;
}

GetCardListFromAppResponse::~GetCardListFromAppResponse() {
  // @@protoc_insertion_point(destructor:micromsg.GetCardListFromAppResponse)
  SharedDtor();
}

void GetCardListFromAppResponse::SharedDtor() {
  json_ret_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void GetCardListFromAppResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetCardListFromAppResponse::descriptor() {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetCardListFromAppResponse& GetCardListFromAppResponse::default_instance() {
  protobuf_mmcard_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetCardListFromAppResponse* GetCardListFromAppResponse::New(::google::protobuf::Arena* arena) const {
  GetCardListFromAppResponse* n = new GetCardListFromAppResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetCardListFromAppResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetCardListFromAppResponse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_json_ret()) {
      GOOGLE_DCHECK(!json_ret_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*json_ret_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetCardListFromAppResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetCardListFromAppResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string json_ret = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_json_ret()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->json_ret().data(), this->json_ret().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetCardListFromAppResponse.json_ret");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetCardListFromAppResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetCardListFromAppResponse)
  return false;
#undef DO_
}

void GetCardListFromAppResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetCardListFromAppResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // optional string json_ret = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->json_ret().data(), this->json_ret().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetCardListFromAppResponse.json_ret");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->json_ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetCardListFromAppResponse)
}

::google::protobuf::uint8* GetCardListFromAppResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetCardListFromAppResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // optional string json_ret = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->json_ret().data(), this->json_ret().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetCardListFromAppResponse.json_ret");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->json_ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetCardListFromAppResponse)
  return target;
}

size_t GetCardListFromAppResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetCardListFromAppResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  // optional string json_ret = 2;
  if (has_json_ret()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->json_ret());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCardListFromAppResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetCardListFromAppResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCardListFromAppResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetCardListFromAppResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetCardListFromAppResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetCardListFromAppResponse)
    MergeFrom(*source);
  }
}

void GetCardListFromAppResponse::MergeFrom(const GetCardListFromAppResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetCardListFromAppResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_json_ret();
      json_ret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_ret_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
  }
}

void GetCardListFromAppResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetCardListFromAppResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCardListFromAppResponse::CopyFrom(const GetCardListFromAppResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetCardListFromAppResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCardListFromAppResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void GetCardListFromAppResponse::Swap(GetCardListFromAppResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetCardListFromAppResponse::InternalSwap(GetCardListFromAppResponse* other) {
  json_ret_.Swap(&other->json_ret_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetCardListFromAppResponse::GetMetadata() const {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetCardListFromAppResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool GetCardListFromAppResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetCardListFromAppResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000002u;
}
void GetCardListFromAppResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetCardListFromAppResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& GetCardListFromAppResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetCardListFromAppResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* GetCardListFromAppResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetCardListFromAppResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* GetCardListFromAppResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetCardListFromAppResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void GetCardListFromAppResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetCardListFromAppResponse.BaseResponse)
}

// optional string json_ret = 2;
bool GetCardListFromAppResponse::has_json_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetCardListFromAppResponse::set_has_json_ret() {
  _has_bits_[0] |= 0x00000001u;
}
void GetCardListFromAppResponse::clear_has_json_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetCardListFromAppResponse::clear_json_ret() {
  json_ret_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_json_ret();
}
const ::std::string& GetCardListFromAppResponse::json_ret() const {
  // @@protoc_insertion_point(field_get:micromsg.GetCardListFromAppResponse.json_ret)
  return json_ret_.GetNoArena();
}
void GetCardListFromAppResponse::set_json_ret(const ::std::string& value) {
  set_has_json_ret();
  json_ret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetCardListFromAppResponse.json_ret)
}
#if LANG_CXX11
void GetCardListFromAppResponse::set_json_ret(::std::string&& value) {
  set_has_json_ret();
  json_ret_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetCardListFromAppResponse.json_ret)
}
#endif
void GetCardListFromAppResponse::set_json_ret(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_json_ret();
  json_ret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetCardListFromAppResponse.json_ret)
}
void GetCardListFromAppResponse::set_json_ret(const char* value, size_t size) {
  set_has_json_ret();
  json_ret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetCardListFromAppResponse.json_ret)
}
::std::string* GetCardListFromAppResponse::mutable_json_ret() {
  set_has_json_ret();
  // @@protoc_insertion_point(field_mutable:micromsg.GetCardListFromAppResponse.json_ret)
  return json_ret_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetCardListFromAppResponse::release_json_ret() {
  // @@protoc_insertion_point(field_release:micromsg.GetCardListFromAppResponse.json_ret)
  clear_has_json_ret();
  return json_ret_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetCardListFromAppResponse::set_allocated_json_ret(::std::string* json_ret) {
  if (json_ret != NULL) {
    set_has_json_ret();
  } else {
    clear_has_json_ret();
  }
  json_ret_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), json_ret);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetCardListFromAppResponse.json_ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AcceptCardListFromAppRequest::kBaseRequestFieldNumber;
const int AcceptCardListFromAppRequest::kCardListFieldNumber;
const int AcceptCardListFromAppRequest::kFromSceneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AcceptCardListFromAppRequest::AcceptCardListFromAppRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcard_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.AcceptCardListFromAppRequest)
}
AcceptCardListFromAppRequest::AcceptCardListFromAppRequest(const AcceptCardListFromAppRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      card_list_(from.card_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  from_scene_ = from.from_scene_;
  // @@protoc_insertion_point(copy_constructor:micromsg.AcceptCardListFromAppRequest)
}

void AcceptCardListFromAppRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baserequest_, 0, reinterpret_cast<char*>(&from_scene_) -
    reinterpret_cast<char*>(&baserequest_) + sizeof(from_scene_));
}

AcceptCardListFromAppRequest::~AcceptCardListFromAppRequest() {
  // @@protoc_insertion_point(destructor:micromsg.AcceptCardListFromAppRequest)
  SharedDtor();
}

void AcceptCardListFromAppRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void AcceptCardListFromAppRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcceptCardListFromAppRequest::descriptor() {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AcceptCardListFromAppRequest& AcceptCardListFromAppRequest::default_instance() {
  protobuf_mmcard_2eproto::InitDefaults();
  return *internal_default_instance();
}

AcceptCardListFromAppRequest* AcceptCardListFromAppRequest::New(::google::protobuf::Arena* arena) const {
  AcceptCardListFromAppRequest* n = new AcceptCardListFromAppRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AcceptCardListFromAppRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.AcceptCardListFromAppRequest)
  card_list_.Clear();
  if (has_baserequest()) {
    GOOGLE_DCHECK(baserequest_ != NULL);
    baserequest_->::micromsg::BaseRequest::Clear();
  }
  from_scene_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AcceptCardListFromAppRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.AcceptCardListFromAppRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.CardListItem card_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_card_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 from_scene = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_from_scene();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_scene_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.AcceptCardListFromAppRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.AcceptCardListFromAppRequest)
  return false;
#undef DO_
}

void AcceptCardListFromAppRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.AcceptCardListFromAppRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // repeated .micromsg.CardListItem card_list = 2;
  for (unsigned int i = 0, n = this->card_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->card_list(i), output);
  }

  // optional uint32 from_scene = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->from_scene(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.AcceptCardListFromAppRequest)
}

::google::protobuf::uint8* AcceptCardListFromAppRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.AcceptCardListFromAppRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // repeated .micromsg.CardListItem card_list = 2;
  for (unsigned int i = 0, n = this->card_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->card_list(i), deterministic, target);
  }

  // optional uint32 from_scene = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->from_scene(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.AcceptCardListFromAppRequest)
  return target;
}

size_t AcceptCardListFromAppRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.AcceptCardListFromAppRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (has_baserequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }
  // repeated .micromsg.CardListItem card_list = 2;
  {
    unsigned int count = this->card_list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->card_list(i));
    }
  }

  // optional uint32 from_scene = 3;
  if (has_from_scene()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->from_scene());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcceptCardListFromAppRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.AcceptCardListFromAppRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AcceptCardListFromAppRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AcceptCardListFromAppRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.AcceptCardListFromAppRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.AcceptCardListFromAppRequest)
    MergeFrom(*source);
  }
}

void AcceptCardListFromAppRequest::MergeFrom(const AcceptCardListFromAppRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.AcceptCardListFromAppRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  card_list_.MergeFrom(from.card_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
    }
    if (cached_has_bits & 0x00000002u) {
      from_scene_ = from.from_scene_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AcceptCardListFromAppRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.AcceptCardListFromAppRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcceptCardListFromAppRequest::CopyFrom(const AcceptCardListFromAppRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.AcceptCardListFromAppRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcceptCardListFromAppRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void AcceptCardListFromAppRequest::Swap(AcceptCardListFromAppRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AcceptCardListFromAppRequest::InternalSwap(AcceptCardListFromAppRequest* other) {
  card_list_.InternalSwap(&other->card_list_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(from_scene_, other->from_scene_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AcceptCardListFromAppRequest::GetMetadata() const {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AcceptCardListFromAppRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool AcceptCardListFromAppRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AcceptCardListFromAppRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void AcceptCardListFromAppRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void AcceptCardListFromAppRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& AcceptCardListFromAppRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.AcceptCardListFromAppRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* AcceptCardListFromAppRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.AcceptCardListFromAppRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* AcceptCardListFromAppRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.AcceptCardListFromAppRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void AcceptCardListFromAppRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.AcceptCardListFromAppRequest.BaseRequest)
}

// repeated .micromsg.CardListItem card_list = 2;
int AcceptCardListFromAppRequest::card_list_size() const {
  return card_list_.size();
}
void AcceptCardListFromAppRequest::clear_card_list() {
  card_list_.Clear();
}
const ::micromsg::CardListItem& AcceptCardListFromAppRequest::card_list(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.AcceptCardListFromAppRequest.card_list)
  return card_list_.Get(index);
}
::micromsg::CardListItem* AcceptCardListFromAppRequest::mutable_card_list(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.AcceptCardListFromAppRequest.card_list)
  return card_list_.Mutable(index);
}
::micromsg::CardListItem* AcceptCardListFromAppRequest::add_card_list() {
  // @@protoc_insertion_point(field_add:micromsg.AcceptCardListFromAppRequest.card_list)
  return card_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::CardListItem >*
AcceptCardListFromAppRequest::mutable_card_list() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.AcceptCardListFromAppRequest.card_list)
  return &card_list_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::CardListItem >&
AcceptCardListFromAppRequest::card_list() const {
  // @@protoc_insertion_point(field_list:micromsg.AcceptCardListFromAppRequest.card_list)
  return card_list_;
}

// optional uint32 from_scene = 3;
bool AcceptCardListFromAppRequest::has_from_scene() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AcceptCardListFromAppRequest::set_has_from_scene() {
  _has_bits_[0] |= 0x00000002u;
}
void AcceptCardListFromAppRequest::clear_has_from_scene() {
  _has_bits_[0] &= ~0x00000002u;
}
void AcceptCardListFromAppRequest::clear_from_scene() {
  from_scene_ = 0u;
  clear_has_from_scene();
}
::google::protobuf::uint32 AcceptCardListFromAppRequest::from_scene() const {
  // @@protoc_insertion_point(field_get:micromsg.AcceptCardListFromAppRequest.from_scene)
  return from_scene_;
}
void AcceptCardListFromAppRequest::set_from_scene(::google::protobuf::uint32 value) {
  set_has_from_scene();
  from_scene_ = value;
  // @@protoc_insertion_point(field_set:micromsg.AcceptCardListFromAppRequest.from_scene)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AcceptCardListFromAppResponse::kBaseResponseFieldNumber;
const int AcceptCardListFromAppResponse::kJsonRetFieldNumber;
const int AcceptCardListFromAppResponse::kRetCodeFieldNumber;
const int AcceptCardListFromAppResponse::kRetMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AcceptCardListFromAppResponse::AcceptCardListFromAppResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcard_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.AcceptCardListFromAppResponse)
}
AcceptCardListFromAppResponse::AcceptCardListFromAppResponse(const AcceptCardListFromAppResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  json_ret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_json_ret()) {
    json_ret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_ret_);
  }
  ret_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ret_msg()) {
    ret_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_msg_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  ret_code_ = from.ret_code_;
  // @@protoc_insertion_point(copy_constructor:micromsg.AcceptCardListFromAppResponse)
}

void AcceptCardListFromAppResponse::SharedCtor() {
  _cached_size_ = 0;
  json_ret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ret_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&baseresponse_, 0, reinterpret_cast<char*>(&ret_code_) -
    reinterpret_cast<char*>(&baseresponse_) + sizeof(ret_code_));
}

AcceptCardListFromAppResponse::~AcceptCardListFromAppResponse() {
  // @@protoc_insertion_point(destructor:micromsg.AcceptCardListFromAppResponse)
  SharedDtor();
}

void AcceptCardListFromAppResponse::SharedDtor() {
  json_ret_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ret_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void AcceptCardListFromAppResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcceptCardListFromAppResponse::descriptor() {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AcceptCardListFromAppResponse& AcceptCardListFromAppResponse::default_instance() {
  protobuf_mmcard_2eproto::InitDefaults();
  return *internal_default_instance();
}

AcceptCardListFromAppResponse* AcceptCardListFromAppResponse::New(::google::protobuf::Arena* arena) const {
  AcceptCardListFromAppResponse* n = new AcceptCardListFromAppResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AcceptCardListFromAppResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.AcceptCardListFromAppResponse)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_json_ret()) {
      GOOGLE_DCHECK(!json_ret_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*json_ret_.UnsafeRawStringPointer())->clear();
    }
    if (has_ret_msg()) {
      GOOGLE_DCHECK(!ret_msg_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ret_msg_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
  }
  ret_code_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AcceptCardListFromAppResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.AcceptCardListFromAppResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string json_ret = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_json_ret()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->json_ret().data(), this->json_ret().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.AcceptCardListFromAppResponse.json_ret");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ret_code = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_ret_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ret_msg = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ret_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ret_msg().data(), this->ret_msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.AcceptCardListFromAppResponse.ret_msg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.AcceptCardListFromAppResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.AcceptCardListFromAppResponse)
  return false;
#undef DO_
}

void AcceptCardListFromAppResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.AcceptCardListFromAppResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // optional string json_ret = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->json_ret().data(), this->json_ret().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AcceptCardListFromAppResponse.json_ret");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->json_ret(), output);
  }

  // optional int32 ret_code = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ret_code(), output);
  }

  // optional string ret_msg = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ret_msg().data(), this->ret_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AcceptCardListFromAppResponse.ret_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->ret_msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.AcceptCardListFromAppResponse)
}

::google::protobuf::uint8* AcceptCardListFromAppResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.AcceptCardListFromAppResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // optional string json_ret = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->json_ret().data(), this->json_ret().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AcceptCardListFromAppResponse.json_ret");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->json_ret(), target);
  }

  // optional int32 ret_code = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ret_code(), target);
  }

  // optional string ret_msg = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ret_msg().data(), this->ret_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.AcceptCardListFromAppResponse.ret_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ret_msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.AcceptCardListFromAppResponse)
  return target;
}

size_t AcceptCardListFromAppResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.AcceptCardListFromAppResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string json_ret = 2;
    if (has_json_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->json_ret());
    }

    // optional string ret_msg = 4;
    if (has_ret_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ret_msg());
    }

  }
  // optional int32 ret_code = 3;
  if (has_ret_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ret_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcceptCardListFromAppResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.AcceptCardListFromAppResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AcceptCardListFromAppResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AcceptCardListFromAppResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.AcceptCardListFromAppResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.AcceptCardListFromAppResponse)
    MergeFrom(*source);
  }
}

void AcceptCardListFromAppResponse::MergeFrom(const AcceptCardListFromAppResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.AcceptCardListFromAppResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_json_ret();
      json_ret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_ret_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_ret_msg();
      ret_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_msg_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
    if (cached_has_bits & 0x00000008u) {
      ret_code_ = from.ret_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AcceptCardListFromAppResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.AcceptCardListFromAppResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcceptCardListFromAppResponse::CopyFrom(const AcceptCardListFromAppResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.AcceptCardListFromAppResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcceptCardListFromAppResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void AcceptCardListFromAppResponse::Swap(AcceptCardListFromAppResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AcceptCardListFromAppResponse::InternalSwap(AcceptCardListFromAppResponse* other) {
  json_ret_.Swap(&other->json_ret_);
  ret_msg_.Swap(&other->ret_msg_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(ret_code_, other->ret_code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AcceptCardListFromAppResponse::GetMetadata() const {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AcceptCardListFromAppResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool AcceptCardListFromAppResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AcceptCardListFromAppResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000004u;
}
void AcceptCardListFromAppResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000004u;
}
void AcceptCardListFromAppResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& AcceptCardListFromAppResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.AcceptCardListFromAppResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* AcceptCardListFromAppResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.AcceptCardListFromAppResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* AcceptCardListFromAppResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.AcceptCardListFromAppResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void AcceptCardListFromAppResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.AcceptCardListFromAppResponse.BaseResponse)
}

// optional string json_ret = 2;
bool AcceptCardListFromAppResponse::has_json_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AcceptCardListFromAppResponse::set_has_json_ret() {
  _has_bits_[0] |= 0x00000001u;
}
void AcceptCardListFromAppResponse::clear_has_json_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
void AcceptCardListFromAppResponse::clear_json_ret() {
  json_ret_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_json_ret();
}
const ::std::string& AcceptCardListFromAppResponse::json_ret() const {
  // @@protoc_insertion_point(field_get:micromsg.AcceptCardListFromAppResponse.json_ret)
  return json_ret_.GetNoArena();
}
void AcceptCardListFromAppResponse::set_json_ret(const ::std::string& value) {
  set_has_json_ret();
  json_ret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.AcceptCardListFromAppResponse.json_ret)
}
#if LANG_CXX11
void AcceptCardListFromAppResponse::set_json_ret(::std::string&& value) {
  set_has_json_ret();
  json_ret_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.AcceptCardListFromAppResponse.json_ret)
}
#endif
void AcceptCardListFromAppResponse::set_json_ret(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_json_ret();
  json_ret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.AcceptCardListFromAppResponse.json_ret)
}
void AcceptCardListFromAppResponse::set_json_ret(const char* value, size_t size) {
  set_has_json_ret();
  json_ret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.AcceptCardListFromAppResponse.json_ret)
}
::std::string* AcceptCardListFromAppResponse::mutable_json_ret() {
  set_has_json_ret();
  // @@protoc_insertion_point(field_mutable:micromsg.AcceptCardListFromAppResponse.json_ret)
  return json_ret_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AcceptCardListFromAppResponse::release_json_ret() {
  // @@protoc_insertion_point(field_release:micromsg.AcceptCardListFromAppResponse.json_ret)
  clear_has_json_ret();
  return json_ret_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AcceptCardListFromAppResponse::set_allocated_json_ret(::std::string* json_ret) {
  if (json_ret != NULL) {
    set_has_json_ret();
  } else {
    clear_has_json_ret();
  }
  json_ret_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), json_ret);
  // @@protoc_insertion_point(field_set_allocated:micromsg.AcceptCardListFromAppResponse.json_ret)
}

// optional int32 ret_code = 3;
bool AcceptCardListFromAppResponse::has_ret_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AcceptCardListFromAppResponse::set_has_ret_code() {
  _has_bits_[0] |= 0x00000008u;
}
void AcceptCardListFromAppResponse::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000008u;
}
void AcceptCardListFromAppResponse::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
::google::protobuf::int32 AcceptCardListFromAppResponse::ret_code() const {
  // @@protoc_insertion_point(field_get:micromsg.AcceptCardListFromAppResponse.ret_code)
  return ret_code_;
}
void AcceptCardListFromAppResponse::set_ret_code(::google::protobuf::int32 value) {
  set_has_ret_code();
  ret_code_ = value;
  // @@protoc_insertion_point(field_set:micromsg.AcceptCardListFromAppResponse.ret_code)
}

// optional string ret_msg = 4;
bool AcceptCardListFromAppResponse::has_ret_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AcceptCardListFromAppResponse::set_has_ret_msg() {
  _has_bits_[0] |= 0x00000002u;
}
void AcceptCardListFromAppResponse::clear_has_ret_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
void AcceptCardListFromAppResponse::clear_ret_msg() {
  ret_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ret_msg();
}
const ::std::string& AcceptCardListFromAppResponse::ret_msg() const {
  // @@protoc_insertion_point(field_get:micromsg.AcceptCardListFromAppResponse.ret_msg)
  return ret_msg_.GetNoArena();
}
void AcceptCardListFromAppResponse::set_ret_msg(const ::std::string& value) {
  set_has_ret_msg();
  ret_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.AcceptCardListFromAppResponse.ret_msg)
}
#if LANG_CXX11
void AcceptCardListFromAppResponse::set_ret_msg(::std::string&& value) {
  set_has_ret_msg();
  ret_msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.AcceptCardListFromAppResponse.ret_msg)
}
#endif
void AcceptCardListFromAppResponse::set_ret_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ret_msg();
  ret_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.AcceptCardListFromAppResponse.ret_msg)
}
void AcceptCardListFromAppResponse::set_ret_msg(const char* value, size_t size) {
  set_has_ret_msg();
  ret_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.AcceptCardListFromAppResponse.ret_msg)
}
::std::string* AcceptCardListFromAppResponse::mutable_ret_msg() {
  set_has_ret_msg();
  // @@protoc_insertion_point(field_mutable:micromsg.AcceptCardListFromAppResponse.ret_msg)
  return ret_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AcceptCardListFromAppResponse::release_ret_msg() {
  // @@protoc_insertion_point(field_release:micromsg.AcceptCardListFromAppResponse.ret_msg)
  clear_has_ret_msg();
  return ret_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AcceptCardListFromAppResponse::set_allocated_ret_msg(::std::string* ret_msg) {
  if (ret_msg != NULL) {
    set_has_ret_msg();
  } else {
    clear_has_ret_msg();
  }
  ret_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ret_msg);
  // @@protoc_insertion_point(field_set_allocated:micromsg.AcceptCardListFromAppResponse.ret_msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetCardConfigInfoRequest::kBaseRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetCardConfigInfoRequest::GetCardConfigInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcard_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetCardConfigInfoRequest)
}
GetCardConfigInfoRequest::GetCardConfigInfoRequest(const GetCardConfigInfoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.GetCardConfigInfoRequest)
}

void GetCardConfigInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  baserequest_ = NULL;
}

GetCardConfigInfoRequest::~GetCardConfigInfoRequest() {
  // @@protoc_insertion_point(destructor:micromsg.GetCardConfigInfoRequest)
  SharedDtor();
}

void GetCardConfigInfoRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void GetCardConfigInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetCardConfigInfoRequest::descriptor() {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetCardConfigInfoRequest& GetCardConfigInfoRequest::default_instance() {
  protobuf_mmcard_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetCardConfigInfoRequest* GetCardConfigInfoRequest::New(::google::protobuf::Arena* arena) const {
  GetCardConfigInfoRequest* n = new GetCardConfigInfoRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetCardConfigInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetCardConfigInfoRequest)
  if (has_baserequest()) {
    GOOGLE_DCHECK(baserequest_ != NULL);
    baserequest_->::micromsg::BaseRequest::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetCardConfigInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetCardConfigInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetCardConfigInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetCardConfigInfoRequest)
  return false;
#undef DO_
}

void GetCardConfigInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetCardConfigInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetCardConfigInfoRequest)
}

::google::protobuf::uint8* GetCardConfigInfoRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetCardConfigInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetCardConfigInfoRequest)
  return target;
}

size_t GetCardConfigInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetCardConfigInfoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (has_baserequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCardConfigInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetCardConfigInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCardConfigInfoRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetCardConfigInfoRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetCardConfigInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetCardConfigInfoRequest)
    MergeFrom(*source);
  }
}

void GetCardConfigInfoRequest::MergeFrom(const GetCardConfigInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetCardConfigInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_baserequest()) {
    mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
  }
}

void GetCardConfigInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetCardConfigInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCardConfigInfoRequest::CopyFrom(const GetCardConfigInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetCardConfigInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCardConfigInfoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void GetCardConfigInfoRequest::Swap(GetCardConfigInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetCardConfigInfoRequest::InternalSwap(GetCardConfigInfoRequest* other) {
  std::swap(baserequest_, other->baserequest_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetCardConfigInfoRequest::GetMetadata() const {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetCardConfigInfoRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool GetCardConfigInfoRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetCardConfigInfoRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void GetCardConfigInfoRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetCardConfigInfoRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& GetCardConfigInfoRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.GetCardConfigInfoRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* GetCardConfigInfoRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetCardConfigInfoRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* GetCardConfigInfoRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.GetCardConfigInfoRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void GetCardConfigInfoRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetCardConfigInfoRequest.BaseRequest)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetCardConfigInfoResponse::kBaseResponseFieldNumber;
const int GetCardConfigInfoResponse::kJsonRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetCardConfigInfoResponse::GetCardConfigInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcard_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.GetCardConfigInfoResponse)
}
GetCardConfigInfoResponse::GetCardConfigInfoResponse(const GetCardConfigInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  json_ret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_json_ret()) {
    json_ret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_ret_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.GetCardConfigInfoResponse)
}

void GetCardConfigInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  json_ret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baseresponse_ = NULL;
}

GetCardConfigInfoResponse::~GetCardConfigInfoResponse() {
  // @@protoc_insertion_point(destructor:micromsg.GetCardConfigInfoResponse)
  SharedDtor();
}

void GetCardConfigInfoResponse::SharedDtor() {
  json_ret_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void GetCardConfigInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetCardConfigInfoResponse::descriptor() {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetCardConfigInfoResponse& GetCardConfigInfoResponse::default_instance() {
  protobuf_mmcard_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetCardConfigInfoResponse* GetCardConfigInfoResponse::New(::google::protobuf::Arena* arena) const {
  GetCardConfigInfoResponse* n = new GetCardConfigInfoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetCardConfigInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.GetCardConfigInfoResponse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_json_ret()) {
      GOOGLE_DCHECK(!json_ret_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*json_ret_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetCardConfigInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.GetCardConfigInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string json_ret = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_json_ret()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->json_ret().data(), this->json_ret().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.GetCardConfigInfoResponse.json_ret");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.GetCardConfigInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.GetCardConfigInfoResponse)
  return false;
#undef DO_
}

void GetCardConfigInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.GetCardConfigInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // optional string json_ret = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->json_ret().data(), this->json_ret().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetCardConfigInfoResponse.json_ret");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->json_ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.GetCardConfigInfoResponse)
}

::google::protobuf::uint8* GetCardConfigInfoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.GetCardConfigInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // optional string json_ret = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->json_ret().data(), this->json_ret().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.GetCardConfigInfoResponse.json_ret");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->json_ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.GetCardConfigInfoResponse)
  return target;
}

size_t GetCardConfigInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.GetCardConfigInfoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  // optional string json_ret = 2;
  if (has_json_ret()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->json_ret());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCardConfigInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.GetCardConfigInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCardConfigInfoResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetCardConfigInfoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.GetCardConfigInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.GetCardConfigInfoResponse)
    MergeFrom(*source);
  }
}

void GetCardConfigInfoResponse::MergeFrom(const GetCardConfigInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.GetCardConfigInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_json_ret();
      json_ret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_ret_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
  }
}

void GetCardConfigInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.GetCardConfigInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCardConfigInfoResponse::CopyFrom(const GetCardConfigInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.GetCardConfigInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCardConfigInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void GetCardConfigInfoResponse::Swap(GetCardConfigInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetCardConfigInfoResponse::InternalSwap(GetCardConfigInfoResponse* other) {
  json_ret_.Swap(&other->json_ret_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetCardConfigInfoResponse::GetMetadata() const {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetCardConfigInfoResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool GetCardConfigInfoResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetCardConfigInfoResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000002u;
}
void GetCardConfigInfoResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetCardConfigInfoResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& GetCardConfigInfoResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.GetCardConfigInfoResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* GetCardConfigInfoResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.GetCardConfigInfoResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* GetCardConfigInfoResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.GetCardConfigInfoResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void GetCardConfigInfoResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetCardConfigInfoResponse.BaseResponse)
}

// optional string json_ret = 2;
bool GetCardConfigInfoResponse::has_json_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetCardConfigInfoResponse::set_has_json_ret() {
  _has_bits_[0] |= 0x00000001u;
}
void GetCardConfigInfoResponse::clear_has_json_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetCardConfigInfoResponse::clear_json_ret() {
  json_ret_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_json_ret();
}
const ::std::string& GetCardConfigInfoResponse::json_ret() const {
  // @@protoc_insertion_point(field_get:micromsg.GetCardConfigInfoResponse.json_ret)
  return json_ret_.GetNoArena();
}
void GetCardConfigInfoResponse::set_json_ret(const ::std::string& value) {
  set_has_json_ret();
  json_ret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.GetCardConfigInfoResponse.json_ret)
}
#if LANG_CXX11
void GetCardConfigInfoResponse::set_json_ret(::std::string&& value) {
  set_has_json_ret();
  json_ret_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.GetCardConfigInfoResponse.json_ret)
}
#endif
void GetCardConfigInfoResponse::set_json_ret(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_json_ret();
  json_ret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.GetCardConfigInfoResponse.json_ret)
}
void GetCardConfigInfoResponse::set_json_ret(const char* value, size_t size) {
  set_has_json_ret();
  json_ret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.GetCardConfigInfoResponse.json_ret)
}
::std::string* GetCardConfigInfoResponse::mutable_json_ret() {
  set_has_json_ret();
  // @@protoc_insertion_point(field_mutable:micromsg.GetCardConfigInfoResponse.json_ret)
  return json_ret_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetCardConfigInfoResponse::release_json_ret() {
  // @@protoc_insertion_point(field_release:micromsg.GetCardConfigInfoResponse.json_ret)
  clear_has_json_ret();
  return json_ret_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetCardConfigInfoResponse::set_allocated_json_ret(::std::string* json_ret) {
  if (json_ret != NULL) {
    set_has_json_ret();
  } else {
    clear_has_json_ret();
  }
  json_ret_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), json_ret);
  // @@protoc_insertion_point(field_set_allocated:micromsg.GetCardConfigInfoResponse.json_ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CardDataInfo::kCardIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CardDataInfo::CardDataInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcard_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.CardDataInfo)
}
CardDataInfo::CardDataInfo(const CardDataInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  card_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_card_id()) {
    card_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.card_id_);
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.CardDataInfo)
}

void CardDataInfo::SharedCtor() {
  _cached_size_ = 0;
  card_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CardDataInfo::~CardDataInfo() {
  // @@protoc_insertion_point(destructor:micromsg.CardDataInfo)
  SharedDtor();
}

void CardDataInfo::SharedDtor() {
  card_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CardDataInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CardDataInfo::descriptor() {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CardDataInfo& CardDataInfo::default_instance() {
  protobuf_mmcard_2eproto::InitDefaults();
  return *internal_default_instance();
}

CardDataInfo* CardDataInfo::New(::google::protobuf::Arena* arena) const {
  CardDataInfo* n = new CardDataInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CardDataInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.CardDataInfo)
  if (has_card_id()) {
    GOOGLE_DCHECK(!card_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*card_id_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CardDataInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.CardDataInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string card_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_card_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->card_id().data(), this->card_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.CardDataInfo.card_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.CardDataInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.CardDataInfo)
  return false;
#undef DO_
}

void CardDataInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.CardDataInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string card_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->card_id().data(), this->card_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CardDataInfo.card_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->card_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.CardDataInfo)
}

::google::protobuf::uint8* CardDataInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.CardDataInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string card_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->card_id().data(), this->card_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CardDataInfo.card_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->card_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.CardDataInfo)
  return target;
}

size_t CardDataInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.CardDataInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string card_id = 1;
  if (has_card_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->card_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CardDataInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.CardDataInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CardDataInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CardDataInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.CardDataInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.CardDataInfo)
    MergeFrom(*source);
  }
}

void CardDataInfo::MergeFrom(const CardDataInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.CardDataInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_card_id()) {
    set_has_card_id();
    card_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.card_id_);
  }
}

void CardDataInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.CardDataInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CardDataInfo::CopyFrom(const CardDataInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.CardDataInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardDataInfo::IsInitialized() const {
  return true;
}

void CardDataInfo::Swap(CardDataInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CardDataInfo::InternalSwap(CardDataInfo* other) {
  card_id_.Swap(&other->card_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CardDataInfo::GetMetadata() const {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CardDataInfo

// optional string card_id = 1;
bool CardDataInfo::has_card_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CardDataInfo::set_has_card_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CardDataInfo::clear_has_card_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CardDataInfo::clear_card_id() {
  card_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_card_id();
}
const ::std::string& CardDataInfo::card_id() const {
  // @@protoc_insertion_point(field_get:micromsg.CardDataInfo.card_id)
  return card_id_.GetNoArena();
}
void CardDataInfo::set_card_id(const ::std::string& value) {
  set_has_card_id();
  card_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CardDataInfo.card_id)
}
#if LANG_CXX11
void CardDataInfo::set_card_id(::std::string&& value) {
  set_has_card_id();
  card_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CardDataInfo.card_id)
}
#endif
void CardDataInfo::set_card_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_card_id();
  card_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CardDataInfo.card_id)
}
void CardDataInfo::set_card_id(const char* value, size_t size) {
  set_has_card_id();
  card_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CardDataInfo.card_id)
}
::std::string* CardDataInfo::mutable_card_id() {
  set_has_card_id();
  // @@protoc_insertion_point(field_mutable:micromsg.CardDataInfo.card_id)
  return card_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CardDataInfo::release_card_id() {
  // @@protoc_insertion_point(field_release:micromsg.CardDataInfo.card_id)
  clear_has_card_id();
  return card_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CardDataInfo::set_allocated_card_id(::std::string* card_id) {
  if (card_id != NULL) {
    set_has_card_id();
  } else {
    clear_has_card_id();
  }
  card_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), card_id);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CardDataInfo.card_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchGetCardItem::kCardIdFieldNumber;
const int BatchGetCardItem::kCardDataInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchGetCardItem::BatchGetCardItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcard_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BatchGetCardItem)
}
BatchGetCardItem::BatchGetCardItem(const BatchGetCardItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  card_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_card_id()) {
    card_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.card_id_);
  }
  if (from.has_card_data_info()) {
    card_data_info_ = new ::micromsg::CardDataInfo(*from.card_data_info_);
  } else {
    card_data_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.BatchGetCardItem)
}

void BatchGetCardItem::SharedCtor() {
  _cached_size_ = 0;
  card_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  card_data_info_ = NULL;
}

BatchGetCardItem::~BatchGetCardItem() {
  // @@protoc_insertion_point(destructor:micromsg.BatchGetCardItem)
  SharedDtor();
}

void BatchGetCardItem::SharedDtor() {
  card_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete card_data_info_;
  }
}

void BatchGetCardItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchGetCardItem::descriptor() {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BatchGetCardItem& BatchGetCardItem::default_instance() {
  protobuf_mmcard_2eproto::InitDefaults();
  return *internal_default_instance();
}

BatchGetCardItem* BatchGetCardItem::New(::google::protobuf::Arena* arena) const {
  BatchGetCardItem* n = new BatchGetCardItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BatchGetCardItem::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BatchGetCardItem)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_card_id()) {
      GOOGLE_DCHECK(!card_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*card_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_card_data_info()) {
      GOOGLE_DCHECK(card_data_info_ != NULL);
      card_data_info_->::micromsg::CardDataInfo::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BatchGetCardItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BatchGetCardItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string card_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_card_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->card_id().data(), this->card_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BatchGetCardItem.card_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .micromsg.CardDataInfo card_data_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_card_data_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BatchGetCardItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BatchGetCardItem)
  return false;
#undef DO_
}

void BatchGetCardItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BatchGetCardItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string card_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->card_id().data(), this->card_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BatchGetCardItem.card_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->card_id(), output);
  }

  // optional .micromsg.CardDataInfo card_data_info = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->card_data_info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BatchGetCardItem)
}

::google::protobuf::uint8* BatchGetCardItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BatchGetCardItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string card_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->card_id().data(), this->card_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BatchGetCardItem.card_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->card_id(), target);
  }

  // optional .micromsg.CardDataInfo card_data_info = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->card_data_info_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BatchGetCardItem)
  return target;
}

size_t BatchGetCardItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BatchGetCardItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string card_id = 1;
    if (has_card_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->card_id());
    }

    // optional .micromsg.CardDataInfo card_data_info = 2;
    if (has_card_data_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->card_data_info_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchGetCardItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BatchGetCardItem)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchGetCardItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchGetCardItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BatchGetCardItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BatchGetCardItem)
    MergeFrom(*source);
  }
}

void BatchGetCardItem::MergeFrom(const BatchGetCardItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BatchGetCardItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_card_id();
      card_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.card_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_card_data_info()->::micromsg::CardDataInfo::MergeFrom(from.card_data_info());
    }
  }
}

void BatchGetCardItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BatchGetCardItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchGetCardItem::CopyFrom(const BatchGetCardItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BatchGetCardItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchGetCardItem::IsInitialized() const {
  return true;
}

void BatchGetCardItem::Swap(BatchGetCardItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchGetCardItem::InternalSwap(BatchGetCardItem* other) {
  card_id_.Swap(&other->card_id_);
  std::swap(card_data_info_, other->card_data_info_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BatchGetCardItem::GetMetadata() const {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BatchGetCardItem

// optional string card_id = 1;
bool BatchGetCardItem::has_card_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BatchGetCardItem::set_has_card_id() {
  _has_bits_[0] |= 0x00000001u;
}
void BatchGetCardItem::clear_has_card_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void BatchGetCardItem::clear_card_id() {
  card_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_card_id();
}
const ::std::string& BatchGetCardItem::card_id() const {
  // @@protoc_insertion_point(field_get:micromsg.BatchGetCardItem.card_id)
  return card_id_.GetNoArena();
}
void BatchGetCardItem::set_card_id(const ::std::string& value) {
  set_has_card_id();
  card_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BatchGetCardItem.card_id)
}
#if LANG_CXX11
void BatchGetCardItem::set_card_id(::std::string&& value) {
  set_has_card_id();
  card_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BatchGetCardItem.card_id)
}
#endif
void BatchGetCardItem::set_card_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_card_id();
  card_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BatchGetCardItem.card_id)
}
void BatchGetCardItem::set_card_id(const char* value, size_t size) {
  set_has_card_id();
  card_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BatchGetCardItem.card_id)
}
::std::string* BatchGetCardItem::mutable_card_id() {
  set_has_card_id();
  // @@protoc_insertion_point(field_mutable:micromsg.BatchGetCardItem.card_id)
  return card_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BatchGetCardItem::release_card_id() {
  // @@protoc_insertion_point(field_release:micromsg.BatchGetCardItem.card_id)
  clear_has_card_id();
  return card_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BatchGetCardItem::set_allocated_card_id(::std::string* card_id) {
  if (card_id != NULL) {
    set_has_card_id();
  } else {
    clear_has_card_id();
  }
  card_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), card_id);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BatchGetCardItem.card_id)
}

// optional .micromsg.CardDataInfo card_data_info = 2;
bool BatchGetCardItem::has_card_data_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BatchGetCardItem::set_has_card_data_info() {
  _has_bits_[0] |= 0x00000002u;
}
void BatchGetCardItem::clear_has_card_data_info() {
  _has_bits_[0] &= ~0x00000002u;
}
void BatchGetCardItem::clear_card_data_info() {
  if (card_data_info_ != NULL) card_data_info_->::micromsg::CardDataInfo::Clear();
  clear_has_card_data_info();
}
const ::micromsg::CardDataInfo& BatchGetCardItem::card_data_info() const {
  // @@protoc_insertion_point(field_get:micromsg.BatchGetCardItem.card_data_info)
  return card_data_info_ != NULL ? *card_data_info_
                         : *::micromsg::CardDataInfo::internal_default_instance();
}
::micromsg::CardDataInfo* BatchGetCardItem::mutable_card_data_info() {
  set_has_card_data_info();
  if (card_data_info_ == NULL) {
    card_data_info_ = new ::micromsg::CardDataInfo;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BatchGetCardItem.card_data_info)
  return card_data_info_;
}
::micromsg::CardDataInfo* BatchGetCardItem::release_card_data_info() {
  // @@protoc_insertion_point(field_release:micromsg.BatchGetCardItem.card_data_info)
  clear_has_card_data_info();
  ::micromsg::CardDataInfo* temp = card_data_info_;
  card_data_info_ = NULL;
  return temp;
}
void BatchGetCardItem::set_allocated_card_data_info(::micromsg::CardDataInfo* card_data_info) {
  delete card_data_info_;
  card_data_info_ = card_data_info;
  if (card_data_info) {
    set_has_card_data_info();
  } else {
    clear_has_card_data_info();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BatchGetCardItem.card_data_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchGetCardArray::kCardArrayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchGetCardArray::BatchGetCardArray()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcard_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BatchGetCardArray)
}
BatchGetCardArray::BatchGetCardArray(const BatchGetCardArray& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      card_array_(from.card_array_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:micromsg.BatchGetCardArray)
}

void BatchGetCardArray::SharedCtor() {
  _cached_size_ = 0;
}

BatchGetCardArray::~BatchGetCardArray() {
  // @@protoc_insertion_point(destructor:micromsg.BatchGetCardArray)
  SharedDtor();
}

void BatchGetCardArray::SharedDtor() {
}

void BatchGetCardArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchGetCardArray::descriptor() {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BatchGetCardArray& BatchGetCardArray::default_instance() {
  protobuf_mmcard_2eproto::InitDefaults();
  return *internal_default_instance();
}

BatchGetCardArray* BatchGetCardArray::New(::google::protobuf::Arena* arena) const {
  BatchGetCardArray* n = new BatchGetCardArray;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BatchGetCardArray::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BatchGetCardArray)
  card_array_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BatchGetCardArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BatchGetCardArray)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .micromsg.BatchGetCardItem card_array = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_card_array()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BatchGetCardArray)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BatchGetCardArray)
  return false;
#undef DO_
}

void BatchGetCardArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BatchGetCardArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .micromsg.BatchGetCardItem card_array = 1;
  for (unsigned int i = 0, n = this->card_array_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->card_array(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BatchGetCardArray)
}

::google::protobuf::uint8* BatchGetCardArray::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BatchGetCardArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .micromsg.BatchGetCardItem card_array = 1;
  for (unsigned int i = 0, n = this->card_array_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->card_array(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BatchGetCardArray)
  return target;
}

size_t BatchGetCardArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BatchGetCardArray)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .micromsg.BatchGetCardItem card_array = 1;
  {
    unsigned int count = this->card_array_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->card_array(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchGetCardArray::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BatchGetCardArray)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchGetCardArray* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchGetCardArray>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BatchGetCardArray)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BatchGetCardArray)
    MergeFrom(*source);
  }
}

void BatchGetCardArray::MergeFrom(const BatchGetCardArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BatchGetCardArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  card_array_.MergeFrom(from.card_array_);
}

void BatchGetCardArray::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BatchGetCardArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchGetCardArray::CopyFrom(const BatchGetCardArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BatchGetCardArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchGetCardArray::IsInitialized() const {
  return true;
}

void BatchGetCardArray::Swap(BatchGetCardArray* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchGetCardArray::InternalSwap(BatchGetCardArray* other) {
  card_array_.InternalSwap(&other->card_array_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BatchGetCardArray::GetMetadata() const {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BatchGetCardArray

// repeated .micromsg.BatchGetCardItem card_array = 1;
int BatchGetCardArray::card_array_size() const {
  return card_array_.size();
}
void BatchGetCardArray::clear_card_array() {
  card_array_.Clear();
}
const ::micromsg::BatchGetCardItem& BatchGetCardArray::card_array(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.BatchGetCardArray.card_array)
  return card_array_.Get(index);
}
::micromsg::BatchGetCardItem* BatchGetCardArray::mutable_card_array(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.BatchGetCardArray.card_array)
  return card_array_.Mutable(index);
}
::micromsg::BatchGetCardItem* BatchGetCardArray::add_card_array() {
  // @@protoc_insertion_point(field_add:micromsg.BatchGetCardArray.card_array)
  return card_array_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::BatchGetCardItem >*
BatchGetCardArray::mutable_card_array() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.BatchGetCardArray.card_array)
  return &card_array_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::BatchGetCardItem >&
BatchGetCardArray::card_array() const {
  // @@protoc_insertion_point(field_list:micromsg.BatchGetCardArray.card_array)
  return card_array_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CardTpInfoItem::kCardTpIdFieldNumber;
const int CardTpInfoItem::kCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CardTpInfoItem::CardTpInfoItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcard_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.CardTpInfoItem)
}
CardTpInfoItem::CardTpInfoItem(const CardTpInfoItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  card_tp_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_card_tp_id()) {
    card_tp_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.card_tp_id_);
  }
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.CardTpInfoItem)
}

void CardTpInfoItem::SharedCtor() {
  _cached_size_ = 0;
  card_tp_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CardTpInfoItem::~CardTpInfoItem() {
  // @@protoc_insertion_point(destructor:micromsg.CardTpInfoItem)
  SharedDtor();
}

void CardTpInfoItem::SharedDtor() {
  card_tp_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CardTpInfoItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CardTpInfoItem::descriptor() {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CardTpInfoItem& CardTpInfoItem::default_instance() {
  protobuf_mmcard_2eproto::InitDefaults();
  return *internal_default_instance();
}

CardTpInfoItem* CardTpInfoItem::New(::google::protobuf::Arena* arena) const {
  CardTpInfoItem* n = new CardTpInfoItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CardTpInfoItem::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.CardTpInfoItem)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_card_tp_id()) {
      GOOGLE_DCHECK(!card_tp_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*card_tp_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_code()) {
      GOOGLE_DCHECK(!code_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*code_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CardTpInfoItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.CardTpInfoItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string card_tp_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_card_tp_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->card_tp_id().data(), this->card_tp_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.CardTpInfoItem.card_tp_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.CardTpInfoItem.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.CardTpInfoItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.CardTpInfoItem)
  return false;
#undef DO_
}

void CardTpInfoItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.CardTpInfoItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string card_tp_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->card_tp_id().data(), this->card_tp_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CardTpInfoItem.card_tp_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->card_tp_id(), output);
  }

  // optional string code = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CardTpInfoItem.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.CardTpInfoItem)
}

::google::protobuf::uint8* CardTpInfoItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.CardTpInfoItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string card_tp_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->card_tp_id().data(), this->card_tp_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CardTpInfoItem.card_tp_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->card_tp_id(), target);
  }

  // optional string code = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.CardTpInfoItem.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.CardTpInfoItem)
  return target;
}

size_t CardTpInfoItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.CardTpInfoItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string card_tp_id = 1;
    if (has_card_tp_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->card_tp_id());
    }

    // optional string code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CardTpInfoItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.CardTpInfoItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CardTpInfoItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CardTpInfoItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.CardTpInfoItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.CardTpInfoItem)
    MergeFrom(*source);
  }
}

void CardTpInfoItem::MergeFrom(const CardTpInfoItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.CardTpInfoItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_card_tp_id();
      card_tp_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.card_tp_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
  }
}

void CardTpInfoItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.CardTpInfoItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CardTpInfoItem::CopyFrom(const CardTpInfoItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.CardTpInfoItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardTpInfoItem::IsInitialized() const {
  return true;
}

void CardTpInfoItem::Swap(CardTpInfoItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CardTpInfoItem::InternalSwap(CardTpInfoItem* other) {
  card_tp_id_.Swap(&other->card_tp_id_);
  code_.Swap(&other->code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CardTpInfoItem::GetMetadata() const {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CardTpInfoItem

// optional string card_tp_id = 1;
bool CardTpInfoItem::has_card_tp_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CardTpInfoItem::set_has_card_tp_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CardTpInfoItem::clear_has_card_tp_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CardTpInfoItem::clear_card_tp_id() {
  card_tp_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_card_tp_id();
}
const ::std::string& CardTpInfoItem::card_tp_id() const {
  // @@protoc_insertion_point(field_get:micromsg.CardTpInfoItem.card_tp_id)
  return card_tp_id_.GetNoArena();
}
void CardTpInfoItem::set_card_tp_id(const ::std::string& value) {
  set_has_card_tp_id();
  card_tp_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CardTpInfoItem.card_tp_id)
}
#if LANG_CXX11
void CardTpInfoItem::set_card_tp_id(::std::string&& value) {
  set_has_card_tp_id();
  card_tp_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CardTpInfoItem.card_tp_id)
}
#endif
void CardTpInfoItem::set_card_tp_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_card_tp_id();
  card_tp_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CardTpInfoItem.card_tp_id)
}
void CardTpInfoItem::set_card_tp_id(const char* value, size_t size) {
  set_has_card_tp_id();
  card_tp_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CardTpInfoItem.card_tp_id)
}
::std::string* CardTpInfoItem::mutable_card_tp_id() {
  set_has_card_tp_id();
  // @@protoc_insertion_point(field_mutable:micromsg.CardTpInfoItem.card_tp_id)
  return card_tp_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CardTpInfoItem::release_card_tp_id() {
  // @@protoc_insertion_point(field_release:micromsg.CardTpInfoItem.card_tp_id)
  clear_has_card_tp_id();
  return card_tp_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CardTpInfoItem::set_allocated_card_tp_id(::std::string* card_tp_id) {
  if (card_tp_id != NULL) {
    set_has_card_tp_id();
  } else {
    clear_has_card_tp_id();
  }
  card_tp_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), card_tp_id);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CardTpInfoItem.card_tp_id)
}

// optional string code = 2;
bool CardTpInfoItem::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CardTpInfoItem::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
void CardTpInfoItem::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void CardTpInfoItem::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
const ::std::string& CardTpInfoItem::code() const {
  // @@protoc_insertion_point(field_get:micromsg.CardTpInfoItem.code)
  return code_.GetNoArena();
}
void CardTpInfoItem::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.CardTpInfoItem.code)
}
#if LANG_CXX11
void CardTpInfoItem::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.CardTpInfoItem.code)
}
#endif
void CardTpInfoItem::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.CardTpInfoItem.code)
}
void CardTpInfoItem::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.CardTpInfoItem.code)
}
::std::string* CardTpInfoItem::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:micromsg.CardTpInfoItem.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CardTpInfoItem::release_code() {
  // @@protoc_insertion_point(field_release:micromsg.CardTpInfoItem.code)
  clear_has_code();
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CardTpInfoItem::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:micromsg.CardTpInfoItem.code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchGetCardItemByTpInfoRequest::kBaseRequestFieldNumber;
const int BatchGetCardItemByTpInfoRequest::kItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchGetCardItemByTpInfoRequest::BatchGetCardItemByTpInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcard_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BatchGetCardItemByTpInfoRequest)
}
BatchGetCardItemByTpInfoRequest::BatchGetCardItemByTpInfoRequest(const BatchGetCardItemByTpInfoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      items_(from.items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_baserequest()) {
    baserequest_ = new ::micromsg::BaseRequest(*from.baserequest_);
  } else {
    baserequest_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.BatchGetCardItemByTpInfoRequest)
}

void BatchGetCardItemByTpInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  baserequest_ = NULL;
}

BatchGetCardItemByTpInfoRequest::~BatchGetCardItemByTpInfoRequest() {
  // @@protoc_insertion_point(destructor:micromsg.BatchGetCardItemByTpInfoRequest)
  SharedDtor();
}

void BatchGetCardItemByTpInfoRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete baserequest_;
  }
}

void BatchGetCardItemByTpInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchGetCardItemByTpInfoRequest::descriptor() {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BatchGetCardItemByTpInfoRequest& BatchGetCardItemByTpInfoRequest::default_instance() {
  protobuf_mmcard_2eproto::InitDefaults();
  return *internal_default_instance();
}

BatchGetCardItemByTpInfoRequest* BatchGetCardItemByTpInfoRequest::New(::google::protobuf::Arena* arena) const {
  BatchGetCardItemByTpInfoRequest* n = new BatchGetCardItemByTpInfoRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BatchGetCardItemByTpInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BatchGetCardItemByTpInfoRequest)
  items_.Clear();
  if (has_baserequest()) {
    GOOGLE_DCHECK(baserequest_ != NULL);
    baserequest_->::micromsg::BaseRequest::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BatchGetCardItemByTpInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BatchGetCardItemByTpInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseRequest BaseRequest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baserequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .micromsg.CardTpInfoItem items = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BatchGetCardItemByTpInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BatchGetCardItemByTpInfoRequest)
  return false;
#undef DO_
}

void BatchGetCardItemByTpInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BatchGetCardItemByTpInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baserequest_, output);
  }

  // repeated .micromsg.CardTpInfoItem items = 2;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BatchGetCardItemByTpInfoRequest)
}

::google::protobuf::uint8* BatchGetCardItemByTpInfoRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BatchGetCardItemByTpInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baserequest_, deterministic, target);
  }

  // repeated .micromsg.CardTpInfoItem items = 2;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->items(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BatchGetCardItemByTpInfoRequest)
  return target;
}

size_t BatchGetCardItemByTpInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BatchGetCardItemByTpInfoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseRequest BaseRequest = 1;
  if (has_baserequest()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baserequest_);
  }
  // repeated .micromsg.CardTpInfoItem items = 2;
  {
    unsigned int count = this->items_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->items(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchGetCardItemByTpInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BatchGetCardItemByTpInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchGetCardItemByTpInfoRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchGetCardItemByTpInfoRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BatchGetCardItemByTpInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BatchGetCardItemByTpInfoRequest)
    MergeFrom(*source);
  }
}

void BatchGetCardItemByTpInfoRequest::MergeFrom(const BatchGetCardItemByTpInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BatchGetCardItemByTpInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from.has_baserequest()) {
    mutable_baserequest()->::micromsg::BaseRequest::MergeFrom(from.baserequest());
  }
}

void BatchGetCardItemByTpInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BatchGetCardItemByTpInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchGetCardItemByTpInfoRequest::CopyFrom(const BatchGetCardItemByTpInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BatchGetCardItemByTpInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchGetCardItemByTpInfoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_baserequest()) {
    if (!this->baserequest_->IsInitialized()) return false;
  }
  return true;
}

void BatchGetCardItemByTpInfoRequest::Swap(BatchGetCardItemByTpInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchGetCardItemByTpInfoRequest::InternalSwap(BatchGetCardItemByTpInfoRequest* other) {
  items_.InternalSwap(&other->items_);
  std::swap(baserequest_, other->baserequest_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BatchGetCardItemByTpInfoRequest::GetMetadata() const {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BatchGetCardItemByTpInfoRequest

// required .micromsg.BaseRequest BaseRequest = 1;
bool BatchGetCardItemByTpInfoRequest::has_baserequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BatchGetCardItemByTpInfoRequest::set_has_baserequest() {
  _has_bits_[0] |= 0x00000001u;
}
void BatchGetCardItemByTpInfoRequest::clear_has_baserequest() {
  _has_bits_[0] &= ~0x00000001u;
}
void BatchGetCardItemByTpInfoRequest::clear_baserequest() {
  if (baserequest_ != NULL) baserequest_->::micromsg::BaseRequest::Clear();
  clear_has_baserequest();
}
const ::micromsg::BaseRequest& BatchGetCardItemByTpInfoRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:micromsg.BatchGetCardItemByTpInfoRequest.BaseRequest)
  return baserequest_ != NULL ? *baserequest_
                         : *::micromsg::BaseRequest::internal_default_instance();
}
::micromsg::BaseRequest* BatchGetCardItemByTpInfoRequest::mutable_baserequest() {
  set_has_baserequest();
  if (baserequest_ == NULL) {
    baserequest_ = new ::micromsg::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BatchGetCardItemByTpInfoRequest.BaseRequest)
  return baserequest_;
}
::micromsg::BaseRequest* BatchGetCardItemByTpInfoRequest::release_baserequest() {
  // @@protoc_insertion_point(field_release:micromsg.BatchGetCardItemByTpInfoRequest.BaseRequest)
  clear_has_baserequest();
  ::micromsg::BaseRequest* temp = baserequest_;
  baserequest_ = NULL;
  return temp;
}
void BatchGetCardItemByTpInfoRequest::set_allocated_baserequest(::micromsg::BaseRequest* baserequest) {
  delete baserequest_;
  baserequest_ = baserequest;
  if (baserequest) {
    set_has_baserequest();
  } else {
    clear_has_baserequest();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BatchGetCardItemByTpInfoRequest.BaseRequest)
}

// repeated .micromsg.CardTpInfoItem items = 2;
int BatchGetCardItemByTpInfoRequest::items_size() const {
  return items_.size();
}
void BatchGetCardItemByTpInfoRequest::clear_items() {
  items_.Clear();
}
const ::micromsg::CardTpInfoItem& BatchGetCardItemByTpInfoRequest::items(int index) const {
  // @@protoc_insertion_point(field_get:micromsg.BatchGetCardItemByTpInfoRequest.items)
  return items_.Get(index);
}
::micromsg::CardTpInfoItem* BatchGetCardItemByTpInfoRequest::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:micromsg.BatchGetCardItemByTpInfoRequest.items)
  return items_.Mutable(index);
}
::micromsg::CardTpInfoItem* BatchGetCardItemByTpInfoRequest::add_items() {
  // @@protoc_insertion_point(field_add:micromsg.BatchGetCardItemByTpInfoRequest.items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::micromsg::CardTpInfoItem >*
BatchGetCardItemByTpInfoRequest::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:micromsg.BatchGetCardItemByTpInfoRequest.items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::micromsg::CardTpInfoItem >&
BatchGetCardItemByTpInfoRequest::items() const {
  // @@protoc_insertion_point(field_list:micromsg.BatchGetCardItemByTpInfoRequest.items)
  return items_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchGetCardItemByTpInfoResponse::kBaseResponseFieldNumber;
const int BatchGetCardItemByTpInfoResponse::kJsonRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchGetCardItemByTpInfoResponse::BatchGetCardItemByTpInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mmcard_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:micromsg.BatchGetCardItemByTpInfoResponse)
}
BatchGetCardItemByTpInfoResponse::BatchGetCardItemByTpInfoResponse(const BatchGetCardItemByTpInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  json_ret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_json_ret()) {
    json_ret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_ret_);
  }
  if (from.has_baseresponse()) {
    baseresponse_ = new ::micromsg::BaseResponse(*from.baseresponse_);
  } else {
    baseresponse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:micromsg.BatchGetCardItemByTpInfoResponse)
}

void BatchGetCardItemByTpInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  json_ret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baseresponse_ = NULL;
}

BatchGetCardItemByTpInfoResponse::~BatchGetCardItemByTpInfoResponse() {
  // @@protoc_insertion_point(destructor:micromsg.BatchGetCardItemByTpInfoResponse)
  SharedDtor();
}

void BatchGetCardItemByTpInfoResponse::SharedDtor() {
  json_ret_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete baseresponse_;
  }
}

void BatchGetCardItemByTpInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchGetCardItemByTpInfoResponse::descriptor() {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BatchGetCardItemByTpInfoResponse& BatchGetCardItemByTpInfoResponse::default_instance() {
  protobuf_mmcard_2eproto::InitDefaults();
  return *internal_default_instance();
}

BatchGetCardItemByTpInfoResponse* BatchGetCardItemByTpInfoResponse::New(::google::protobuf::Arena* arena) const {
  BatchGetCardItemByTpInfoResponse* n = new BatchGetCardItemByTpInfoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BatchGetCardItemByTpInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:micromsg.BatchGetCardItemByTpInfoResponse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_json_ret()) {
      GOOGLE_DCHECK(!json_ret_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*json_ret_.UnsafeRawStringPointer())->clear();
    }
    if (has_baseresponse()) {
      GOOGLE_DCHECK(baseresponse_ != NULL);
      baseresponse_->::micromsg::BaseResponse::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BatchGetCardItemByTpInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:micromsg.BatchGetCardItemByTpInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .micromsg.BaseResponse BaseResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string json_ret = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_json_ret()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->json_ret().data(), this->json_ret().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "micromsg.BatchGetCardItemByTpInfoResponse.json_ret");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:micromsg.BatchGetCardItemByTpInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:micromsg.BatchGetCardItemByTpInfoResponse)
  return false;
#undef DO_
}

void BatchGetCardItemByTpInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:micromsg.BatchGetCardItemByTpInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseresponse_, output);
  }

  // optional string json_ret = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->json_ret().data(), this->json_ret().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BatchGetCardItemByTpInfoResponse.json_ret");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->json_ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:micromsg.BatchGetCardItemByTpInfoResponse)
}

::google::protobuf::uint8* BatchGetCardItemByTpInfoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:micromsg.BatchGetCardItemByTpInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->baseresponse_, deterministic, target);
  }

  // optional string json_ret = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->json_ret().data(), this->json_ret().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "micromsg.BatchGetCardItemByTpInfoResponse.json_ret");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->json_ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:micromsg.BatchGetCardItemByTpInfoResponse)
  return target;
}

size_t BatchGetCardItemByTpInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:micromsg.BatchGetCardItemByTpInfoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .micromsg.BaseResponse BaseResponse = 1;
  if (has_baseresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseresponse_);
  }
  // optional string json_ret = 2;
  if (has_json_ret()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->json_ret());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchGetCardItemByTpInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:micromsg.BatchGetCardItemByTpInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchGetCardItemByTpInfoResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchGetCardItemByTpInfoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:micromsg.BatchGetCardItemByTpInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:micromsg.BatchGetCardItemByTpInfoResponse)
    MergeFrom(*source);
  }
}

void BatchGetCardItemByTpInfoResponse::MergeFrom(const BatchGetCardItemByTpInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:micromsg.BatchGetCardItemByTpInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_json_ret();
      json_ret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_ret_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_baseresponse()->::micromsg::BaseResponse::MergeFrom(from.baseresponse());
    }
  }
}

void BatchGetCardItemByTpInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:micromsg.BatchGetCardItemByTpInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchGetCardItemByTpInfoResponse::CopyFrom(const BatchGetCardItemByTpInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:micromsg.BatchGetCardItemByTpInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchGetCardItemByTpInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_baseresponse()) {
    if (!this->baseresponse_->IsInitialized()) return false;
  }
  return true;
}

void BatchGetCardItemByTpInfoResponse::Swap(BatchGetCardItemByTpInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchGetCardItemByTpInfoResponse::InternalSwap(BatchGetCardItemByTpInfoResponse* other) {
  json_ret_.Swap(&other->json_ret_);
  std::swap(baseresponse_, other->baseresponse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BatchGetCardItemByTpInfoResponse::GetMetadata() const {
  protobuf_mmcard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mmcard_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BatchGetCardItemByTpInfoResponse

// required .micromsg.BaseResponse BaseResponse = 1;
bool BatchGetCardItemByTpInfoResponse::has_baseresponse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BatchGetCardItemByTpInfoResponse::set_has_baseresponse() {
  _has_bits_[0] |= 0x00000002u;
}
void BatchGetCardItemByTpInfoResponse::clear_has_baseresponse() {
  _has_bits_[0] &= ~0x00000002u;
}
void BatchGetCardItemByTpInfoResponse::clear_baseresponse() {
  if (baseresponse_ != NULL) baseresponse_->::micromsg::BaseResponse::Clear();
  clear_has_baseresponse();
}
const ::micromsg::BaseResponse& BatchGetCardItemByTpInfoResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:micromsg.BatchGetCardItemByTpInfoResponse.BaseResponse)
  return baseresponse_ != NULL ? *baseresponse_
                         : *::micromsg::BaseResponse::internal_default_instance();
}
::micromsg::BaseResponse* BatchGetCardItemByTpInfoResponse::mutable_baseresponse() {
  set_has_baseresponse();
  if (baseresponse_ == NULL) {
    baseresponse_ = new ::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:micromsg.BatchGetCardItemByTpInfoResponse.BaseResponse)
  return baseresponse_;
}
::micromsg::BaseResponse* BatchGetCardItemByTpInfoResponse::release_baseresponse() {
  // @@protoc_insertion_point(field_release:micromsg.BatchGetCardItemByTpInfoResponse.BaseResponse)
  clear_has_baseresponse();
  ::micromsg::BaseResponse* temp = baseresponse_;
  baseresponse_ = NULL;
  return temp;
}
void BatchGetCardItemByTpInfoResponse::set_allocated_baseresponse(::micromsg::BaseResponse* baseresponse) {
  delete baseresponse_;
  baseresponse_ = baseresponse;
  if (baseresponse) {
    set_has_baseresponse();
  } else {
    clear_has_baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:micromsg.BatchGetCardItemByTpInfoResponse.BaseResponse)
}

// optional string json_ret = 2;
bool BatchGetCardItemByTpInfoResponse::has_json_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BatchGetCardItemByTpInfoResponse::set_has_json_ret() {
  _has_bits_[0] |= 0x00000001u;
}
void BatchGetCardItemByTpInfoResponse::clear_has_json_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
void BatchGetCardItemByTpInfoResponse::clear_json_ret() {
  json_ret_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_json_ret();
}
const ::std::string& BatchGetCardItemByTpInfoResponse::json_ret() const {
  // @@protoc_insertion_point(field_get:micromsg.BatchGetCardItemByTpInfoResponse.json_ret)
  return json_ret_.GetNoArena();
}
void BatchGetCardItemByTpInfoResponse::set_json_ret(const ::std::string& value) {
  set_has_json_ret();
  json_ret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:micromsg.BatchGetCardItemByTpInfoResponse.json_ret)
}
#if LANG_CXX11
void BatchGetCardItemByTpInfoResponse::set_json_ret(::std::string&& value) {
  set_has_json_ret();
  json_ret_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:micromsg.BatchGetCardItemByTpInfoResponse.json_ret)
}
#endif
void BatchGetCardItemByTpInfoResponse::set_json_ret(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_json_ret();
  json_ret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:micromsg.BatchGetCardItemByTpInfoResponse.json_ret)
}
void BatchGetCardItemByTpInfoResponse::set_json_ret(const char* value, size_t size) {
  set_has_json_ret();
  json_ret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:micromsg.BatchGetCardItemByTpInfoResponse.json_ret)
}
::std::string* BatchGetCardItemByTpInfoResponse::mutable_json_ret() {
  set_has_json_ret();
  // @@protoc_insertion_point(field_mutable:micromsg.BatchGetCardItemByTpInfoResponse.json_ret)
  return json_ret_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BatchGetCardItemByTpInfoResponse::release_json_ret() {
  // @@protoc_insertion_point(field_release:micromsg.BatchGetCardItemByTpInfoResponse.json_ret)
  clear_has_json_ret();
  return json_ret_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BatchGetCardItemByTpInfoResponse::set_allocated_json_ret(::std::string* json_ret) {
  if (json_ret != NULL) {
    set_has_json_ret();
  } else {
    clear_has_json_ret();
  }
  json_ret_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), json_ret);
  // @@protoc_insertion_point(field_set_allocated:micromsg.BatchGetCardItemByTpInfoResponse.json_ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace micromsg

// @@protoc_insertion_point(global_scope)
